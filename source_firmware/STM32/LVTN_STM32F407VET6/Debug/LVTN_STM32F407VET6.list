
LVTN_STM32F407VET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012968  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c78  08012af8  08012af8  00022af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013770  08013770  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08013770  08013770  00023770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013778  08013778  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013778  08013778  00023778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801377c  0801377c  0002377c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08013780  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          000016a8  200001f8  200001f8  000301f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200018a0  200018a0  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e3a4  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041fd  00000000  00000000  0004e5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af8  00000000  00000000  000527d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001980  00000000  00000000  000542c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000281f9  00000000  00000000  00055c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024802  00000000  00000000  0007de41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7070  00000000  00000000  000a2643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001896b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000087e0  00000000  00000000  00189704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012ae0 	.word	0x08012ae0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08012ae0 	.word	0x08012ae0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <BUFFER_CLEAR>:
extern TIM_HandleTypeDef htim6;
extern void Read_SetPoint(Save_Flash_Type tp);
extern void Save_SetPoint(Save_Flash_Type tp);
extern float TDS_SetPoint,TDS_THR_SetPoint,PH_THR_SetPoint,PH_SetPoint;
void BUFFER_CLEAR(uint8_t *buff, uint32_t sizebuff)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<sizebuff;i++)
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e007      	b.n	8001038 <BUFFER_CLEAR+0x20>
	{
		buff[i] = '\0';
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<sizebuff;i++)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3301      	adds	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f3      	bhi.n	8001028 <BUFFER_CLEAR+0x10>
	}
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <BUFF_SIZE>:

unsigned int BUFF_SIZE(uint8_t *buff)
{
 800104e:	b480      	push	{r7}
 8001050:	b085      	sub	sp, #20
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
	while(*(buff++) != '\0')
 800105a:	e002      	b.n	8001062 <BUFF_SIZE+0x14>
	{i++;}
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3301      	adds	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
	while(*(buff++) != '\0')
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f6      	bne.n	800105c <BUFF_SIZE+0xe>
	return i;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <SELECT>:
#define SD_CS_GPIO_Port GPIOC
#define SD_CS_Pin GPIO_PIN_1

/* SPI Chip Select */
static void SELECT(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2102      	movs	r1, #2
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <SELECT+0x14>)
 8001086:	f005 fcff 	bl	8006a88 <HAL_GPIO_WritePin>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40020800 	.word	0x40020800

08001094 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2102      	movs	r1, #2
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <DESELECT+0x14>)
 800109e:	f005 fcf3 	bl	8006a88 <HAL_GPIO_WritePin>
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40020800 	.word	0x40020800

080010ac <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80010b6:	bf00      	nop
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <SPI_TxByte+0x30>)
 80010ba:	f007 fd2c 	bl	8008b16 <HAL_SPI_GetState>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d1f9      	bne.n	80010b8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 80010c4:	1df9      	adds	r1, r7, #7
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	2201      	movs	r2, #1
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <SPI_TxByte+0x30>)
 80010ce:	f007 f933 	bl	8008338 <HAL_SPI_Transmit>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200003b0 	.word	0x200003b0

080010e0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80010e6:	23ff      	movs	r3, #255	; 0xff
 80010e8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 80010ee:	bf00      	nop
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <SPI_RxByte+0x38>)
 80010f2:	f007 fd10 	bl	8008b16 <HAL_SPI_GetState>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d1f9      	bne.n	80010f0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80010fc:	1dba      	adds	r2, r7, #6
 80010fe:	1df9      	adds	r1, r7, #7
 8001100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2301      	movs	r3, #1
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <SPI_RxByte+0x38>)
 800110a:	f007 fb62 	bl	80087d2 <HAL_SPI_TransmitReceive>

  return data;
 800110e:	79bb      	ldrb	r3, [r7, #6]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200003b0 	.word	0x200003b0

0800111c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001124:	f7ff ffdc 	bl	80010e0 <SPI_RxByte>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	701a      	strb	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <SD_ReadyWait+0x34>)
 8001140:	2232      	movs	r2, #50	; 0x32
 8001142:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001144:	f7ff ffcc 	bl	80010e0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001148:	f7ff ffca 	bl	80010e0 <SPI_RxByte>
 800114c:	4603      	mov	r3, r0
 800114e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2bff      	cmp	r3, #255	; 0xff
 8001154:	d004      	beq.n	8001160 <SD_ReadyWait+0x28>
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <SD_ReadyWait+0x34>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f3      	bne.n	8001148 <SD_ReadyWait+0x10>

  return res;
 8001160:	79fb      	ldrb	r3, [r7, #7]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20001622 	.word	0x20001622

08001170 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001176:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800117a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800117c:	f7ff ff8a 	bl	8001094 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	e005      	b.n	8001192 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001186:	20ff      	movs	r0, #255	; 0xff
 8001188:	f7ff ff90 	bl	80010ac <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	3301      	adds	r3, #1
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	2b09      	cmp	r3, #9
 8001196:	ddf6      	ble.n	8001186 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001198:	f7ff ff70 	bl	800107c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800119c:	2340      	movs	r3, #64	; 0x40
 800119e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80011b0:	2395      	movs	r3, #149	; 0x95
 80011b2:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	e009      	b.n	80011ce <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80011ba:	1d3a      	adds	r2, r7, #4
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff72 	bl	80010ac <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3301      	adds	r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b05      	cmp	r3, #5
 80011d2:	ddf2      	ble.n	80011ba <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80011d4:	e002      	b.n	80011dc <SD_PowerOn+0x6c>
  {
    Count--;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3b01      	subs	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80011dc:	f7ff ff80 	bl	80010e0 <SPI_RxByte>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d002      	beq.n	80011ec <SD_PowerOn+0x7c>
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f4      	bne.n	80011d6 <SD_PowerOn+0x66>
  }

  DESELECT();
 80011ec:	f7ff ff52 	bl	8001094 <DESELECT>
  SPI_TxByte(0XFF);
 80011f0:	20ff      	movs	r0, #255	; 0xff
 80011f2:	f7ff ff5b 	bl	80010ac <SPI_TxByte>

  PowerFlag = 1;
 80011f6:	4b03      	ldr	r3, [pc, #12]	; (8001204 <SD_PowerOn+0x94>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000215 	.word	0x20000215

08001208 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <SD_PowerOff+0x14>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	20000215 	.word	0x20000215

08001220 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <SD_CheckPower+0x14>)
 8001226:	781b      	ldrb	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000215 	.word	0x20000215

08001238 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <SD_RxDataBlock+0x68>)
 8001244:	220a      	movs	r2, #10
 8001246:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001248:	f7ff ff4a 	bl	80010e0 <SPI_RxByte>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2bff      	cmp	r3, #255	; 0xff
 8001254:	d104      	bne.n	8001260 <SD_RxDataBlock+0x28>
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <SD_RxDataBlock+0x68>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f3      	bne.n	8001248 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2bfe      	cmp	r3, #254	; 0xfe
 8001264:	d001      	beq.n	800126a <SD_RxDataBlock+0x32>
    return FALSE;
 8001266:	2300      	movs	r3, #0
 8001268:	e016      	b.n	8001298 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff53 	bl	800111c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff4d 	bl	800111c <SPI_RxBytePtr>
  } while(btr -= 2);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3b02      	subs	r3, #2
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1ed      	bne.n	800126a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800128e:	f7ff ff27 	bl	80010e0 <SPI_RxByte>
  SPI_RxByte();
 8001292:	f7ff ff25 	bl	80010e0 <SPI_RxByte>

  return TRUE;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20001621 	.word	0x20001621

080012a4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80012b4:	f7ff ff40 	bl	8001138 <SD_ReadyWait>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2bff      	cmp	r3, #255	; 0xff
 80012bc:	d001      	beq.n	80012c2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80012be:	2300      	movs	r3, #0
 80012c0:	e040      	b.n	8001344 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fef1 	bl	80010ac <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	2bfd      	cmp	r3, #253	; 0xfd
 80012ce:	d031      	beq.n	8001334 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fee5 	bl	80010ac <SPI_TxByte>
      SPI_TxByte(*buff++);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fede 	bl	80010ac <SPI_TxByte>
    } while (--wc);
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	73bb      	strb	r3, [r7, #14]
 80012f6:	7bbb      	ldrb	r3, [r7, #14]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1eb      	bne.n	80012d4 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80012fc:	f7ff fef0 	bl	80010e0 <SPI_RxByte>
    SPI_RxByte();
 8001300:	f7ff feee 	bl	80010e0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001304:	e00b      	b.n	800131e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001306:	f7ff feeb 	bl	80010e0 <SPI_RxByte>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	2b05      	cmp	r3, #5
 8001316:	d006      	beq.n	8001326 <SD_TxDataBlock+0x82>
        break;

      i++;
 8001318:	7b7b      	ldrb	r3, [r7, #13]
 800131a:	3301      	adds	r3, #1
 800131c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800131e:	7b7b      	ldrb	r3, [r7, #13]
 8001320:	2b40      	cmp	r3, #64	; 0x40
 8001322:	d9f0      	bls.n	8001306 <SD_TxDataBlock+0x62>
 8001324:	e000      	b.n	8001328 <SD_TxDataBlock+0x84>
        break;
 8001326:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001328:	bf00      	nop
 800132a:	f7ff fed9 	bl	80010e0 <SPI_RxByte>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0fa      	beq.n	800132a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	2b05      	cmp	r3, #5
 800133c:	d101      	bne.n	8001342 <SD_TxDataBlock+0x9e>
    return TRUE;
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001358:	f7ff feee 	bl	8001138 <SD_ReadyWait>
 800135c:	4603      	mov	r3, r0
 800135e:	2bff      	cmp	r3, #255	; 0xff
 8001360:	d001      	beq.n	8001366 <SD_SendCmd+0x1a>
    return 0xFF;
 8001362:	23ff      	movs	r3, #255	; 0xff
 8001364:	e040      	b.n	80013e8 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fe9f 	bl	80010ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	0e1b      	lsrs	r3, r3, #24
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fe99 	bl	80010ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	0c1b      	lsrs	r3, r3, #16
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fe93 	bl	80010ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe8d 	bl	80010ac <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe88 	bl	80010ac <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2b40      	cmp	r3, #64	; 0x40
 80013a4:	d101      	bne.n	80013aa <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80013a6:	2395      	movs	r3, #149	; 0x95
 80013a8:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b48      	cmp	r3, #72	; 0x48
 80013ae:	d101      	bne.n	80013b4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80013b0:	2387      	movs	r3, #135	; 0x87
 80013b2:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fe78 	bl	80010ac <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b4c      	cmp	r3, #76	; 0x4c
 80013c0:	d101      	bne.n	80013c6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80013c2:	f7ff fe8d 	bl	80010e0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80013c6:	230a      	movs	r3, #10
 80013c8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80013ca:	f7ff fe89 	bl	80010e0 <SPI_RxByte>
 80013ce:	4603      	mov	r3, r0
 80013d0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80013d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	da05      	bge.n	80013e6 <SD_SendCmd+0x9a>
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	3b01      	subs	r3, #1
 80013de:	73bb      	strb	r3, [r7, #14]
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f1      	bne.n	80013ca <SD_SendCmd+0x7e>

  return res;
 80013e6:	7b7b      	ldrb	r3, [r7, #13]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001400:	2301      	movs	r3, #1
 8001402:	e0d5      	b.n	80015b0 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001404:	4b6c      	ldr	r3, [pc, #432]	; (80015b8 <SD_disk_initialize+0x1c8>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <SD_disk_initialize+0x2a>
    return Stat;
 8001412:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <SD_disk_initialize+0x1c8>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	e0ca      	b.n	80015b0 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800141a:	f7ff fea9 	bl	8001170 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800141e:	f7ff fe2d 	bl	800107c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001426:	2100      	movs	r1, #0
 8001428:	2040      	movs	r0, #64	; 0x40
 800142a:	f7ff ff8f 	bl	800134c <SD_SendCmd>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	f040 80a5 	bne.w	8001580 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001436:	4b61      	ldr	r3, [pc, #388]	; (80015bc <SD_disk_initialize+0x1cc>)
 8001438:	2264      	movs	r2, #100	; 0x64
 800143a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800143c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001440:	2048      	movs	r0, #72	; 0x48
 8001442:	f7ff ff83 	bl	800134c <SD_SendCmd>
 8001446:	4603      	mov	r3, r0
 8001448:	2b01      	cmp	r3, #1
 800144a:	d158      	bne.n	80014fe <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e00c      	b.n	800146c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001452:	7bfc      	ldrb	r4, [r7, #15]
 8001454:	f7ff fe44 	bl	80010e0 <SPI_RxByte>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	f104 0310 	add.w	r3, r4, #16
 8001460:	443b      	add	r3, r7
 8001462:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	3301      	adds	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b03      	cmp	r3, #3
 8001470:	d9ef      	bls.n	8001452 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001472:	7abb      	ldrb	r3, [r7, #10]
 8001474:	2b01      	cmp	r3, #1
 8001476:	f040 8083 	bne.w	8001580 <SD_disk_initialize+0x190>
 800147a:	7afb      	ldrb	r3, [r7, #11]
 800147c:	2baa      	cmp	r3, #170	; 0xaa
 800147e:	d17f      	bne.n	8001580 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001480:	2100      	movs	r1, #0
 8001482:	2077      	movs	r0, #119	; 0x77
 8001484:	f7ff ff62 	bl	800134c <SD_SendCmd>
 8001488:	4603      	mov	r3, r0
 800148a:	2b01      	cmp	r3, #1
 800148c:	d807      	bhi.n	800149e <SD_disk_initialize+0xae>
 800148e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001492:	2069      	movs	r0, #105	; 0x69
 8001494:	f7ff ff5a 	bl	800134c <SD_SendCmd>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <SD_disk_initialize+0x1cc>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1eb      	bne.n	8001480 <SD_disk_initialize+0x90>
 80014a8:	e000      	b.n	80014ac <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80014aa:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80014ac:	4b43      	ldr	r3, [pc, #268]	; (80015bc <SD_disk_initialize+0x1cc>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d064      	beq.n	8001580 <SD_disk_initialize+0x190>
 80014b6:	2100      	movs	r1, #0
 80014b8:	207a      	movs	r0, #122	; 0x7a
 80014ba:	f7ff ff47 	bl	800134c <SD_SendCmd>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d15d      	bne.n	8001580 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	e00c      	b.n	80014e4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80014ca:	7bfc      	ldrb	r4, [r7, #15]
 80014cc:	f7ff fe08 	bl	80010e0 <SPI_RxByte>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	f104 0310 	add.w	r3, r4, #16
 80014d8:	443b      	add	r3, r7
 80014da:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	3301      	adds	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d9ef      	bls.n	80014ca <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80014ea:	7a3b      	ldrb	r3, [r7, #8]
 80014ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SD_disk_initialize+0x108>
 80014f4:	2306      	movs	r3, #6
 80014f6:	e000      	b.n	80014fa <SD_disk_initialize+0x10a>
 80014f8:	2302      	movs	r3, #2
 80014fa:	73bb      	strb	r3, [r7, #14]
 80014fc:	e040      	b.n	8001580 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80014fe:	2100      	movs	r1, #0
 8001500:	2077      	movs	r0, #119	; 0x77
 8001502:	f7ff ff23 	bl	800134c <SD_SendCmd>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d808      	bhi.n	800151e <SD_disk_initialize+0x12e>
 800150c:	2100      	movs	r1, #0
 800150e:	2069      	movs	r0, #105	; 0x69
 8001510:	f7ff ff1c 	bl	800134c <SD_SendCmd>
 8001514:	4603      	mov	r3, r0
 8001516:	2b01      	cmp	r3, #1
 8001518:	d801      	bhi.n	800151e <SD_disk_initialize+0x12e>
 800151a:	2302      	movs	r3, #2
 800151c:	e000      	b.n	8001520 <SD_disk_initialize+0x130>
 800151e:	2301      	movs	r3, #1
 8001520:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001522:	7bbb      	ldrb	r3, [r7, #14]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d10e      	bne.n	8001546 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001528:	2100      	movs	r1, #0
 800152a:	2077      	movs	r0, #119	; 0x77
 800152c:	f7ff ff0e 	bl	800134c <SD_SendCmd>
 8001530:	4603      	mov	r3, r0
 8001532:	2b01      	cmp	r3, #1
 8001534:	d80e      	bhi.n	8001554 <SD_disk_initialize+0x164>
 8001536:	2100      	movs	r1, #0
 8001538:	2069      	movs	r0, #105	; 0x69
 800153a:	f7ff ff07 	bl	800134c <SD_SendCmd>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d107      	bne.n	8001554 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001544:	e00d      	b.n	8001562 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001546:	2100      	movs	r1, #0
 8001548:	2041      	movs	r0, #65	; 0x41
 800154a:	f7ff feff 	bl	800134c <SD_SendCmd>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <SD_disk_initialize+0x1cc>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1e1      	bne.n	8001522 <SD_disk_initialize+0x132>
 800155e:	e000      	b.n	8001562 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001560:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <SD_disk_initialize+0x1cc>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d007      	beq.n	800157c <SD_disk_initialize+0x18c>
 800156c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001570:	2050      	movs	r0, #80	; 0x50
 8001572:	f7ff feeb 	bl	800134c <SD_SendCmd>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001580:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <SD_disk_initialize+0x1d0>)
 8001582:	7bbb      	ldrb	r3, [r7, #14]
 8001584:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001586:	f7ff fd85 	bl	8001094 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800158a:	f7ff fda9 	bl	80010e0 <SPI_RxByte>

  if (type)
 800158e:	7bbb      	ldrb	r3, [r7, #14]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <SD_disk_initialize+0x1c8>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SD_disk_initialize+0x1c8>)
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	e001      	b.n	80015aa <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80015a6:	f7ff fe2f 	bl	8001208 <SD_PowerOff>
  }

  return Stat;
 80015aa:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <SD_disk_initialize+0x1c8>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2db      	uxtb	r3, r3
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd90      	pop	{r4, r7, pc}
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20001621 	.word	0x20001621
 80015c0:	20000214 	.word	0x20000214

080015c4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SD_disk_status+0x14>
    return STA_NOINIT;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e002      	b.n	80015de <SD_disk_status+0x1a>

  return Stat;
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SD_disk_status+0x28>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b2db      	uxtb	r3, r3
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000000 	.word	0x20000000

080015f0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <SD_disk_read+0x1c>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <SD_disk_read+0x20>
    return RES_PARERR;
 800160c:	2304      	movs	r3, #4
 800160e:	e051      	b.n	80016b4 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001610:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <SD_disk_read+0xcc>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800161e:	2303      	movs	r3, #3
 8001620:	e048      	b.n	80016b4 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001622:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <SD_disk_read+0xd0>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	025b      	lsls	r3, r3, #9
 8001632:	607b      	str	r3, [r7, #4]

  SELECT();
 8001634:	f7ff fd22 	bl	800107c <SELECT>

  if (count == 1)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d111      	bne.n	8001662 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	2051      	movs	r0, #81	; 0x51
 8001642:	f7ff fe83 	bl	800134c <SD_SendCmd>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d129      	bne.n	80016a0 <SD_disk_read+0xb0>
 800164c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001650:	68b8      	ldr	r0, [r7, #8]
 8001652:	f7ff fdf1 	bl	8001238 <SD_RxDataBlock>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d021      	beq.n	80016a0 <SD_disk_read+0xb0>
      count = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	e01e      	b.n	80016a0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	2052      	movs	r0, #82	; 0x52
 8001666:	f7ff fe71 	bl	800134c <SD_SendCmd>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d117      	bne.n	80016a0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001674:	68b8      	ldr	r0, [r7, #8]
 8001676:	f7ff fddf 	bl	8001238 <SD_RxDataBlock>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00a      	beq.n	8001696 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001686:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	3b01      	subs	r3, #1
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1ed      	bne.n	8001670 <SD_disk_read+0x80>
 8001694:	e000      	b.n	8001698 <SD_disk_read+0xa8>
          break;
 8001696:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001698:	2100      	movs	r1, #0
 800169a:	204c      	movs	r0, #76	; 0x4c
 800169c:	f7ff fe56 	bl	800134c <SD_SendCmd>
    }
  }

  DESELECT();
 80016a0:	f7ff fcf8 	bl	8001094 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80016a4:	f7ff fd1c 	bl	80010e0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bf14      	ite	ne
 80016ae:	2301      	movne	r3, #1
 80016b0:	2300      	moveq	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000214 	.word	0x20000214

080016c4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	4603      	mov	r3, r0
 80016d2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <SD_disk_write+0x1c>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <SD_disk_write+0x20>
    return RES_PARERR;
 80016e0:	2304      	movs	r3, #4
 80016e2:	e06b      	b.n	80017bc <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80016e4:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <SD_disk_write+0x100>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e062      	b.n	80017bc <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80016f6:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <SD_disk_write+0x100>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001704:	2302      	movs	r3, #2
 8001706:	e059      	b.n	80017bc <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001708:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <SD_disk_write+0x104>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	025b      	lsls	r3, r3, #9
 8001718:	607b      	str	r3, [r7, #4]

  SELECT();
 800171a:	f7ff fcaf 	bl	800107c <SELECT>

  if (count == 1)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d110      	bne.n	8001746 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	2058      	movs	r0, #88	; 0x58
 8001728:	f7ff fe10 	bl	800134c <SD_SendCmd>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d13a      	bne.n	80017a8 <SD_disk_write+0xe4>
 8001732:	21fe      	movs	r1, #254	; 0xfe
 8001734:	68b8      	ldr	r0, [r7, #8]
 8001736:	f7ff fdb5 	bl	80012a4 <SD_TxDataBlock>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d033      	beq.n	80017a8 <SD_disk_write+0xe4>
      count = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	e030      	b.n	80017a8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <SD_disk_write+0x104>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001752:	2100      	movs	r1, #0
 8001754:	2077      	movs	r0, #119	; 0x77
 8001756:	f7ff fdf9 	bl	800134c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800175a:	6839      	ldr	r1, [r7, #0]
 800175c:	2057      	movs	r0, #87	; 0x57
 800175e:	f7ff fdf5 	bl	800134c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	2059      	movs	r0, #89	; 0x59
 8001766:	f7ff fdf1 	bl	800134c <SD_SendCmd>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d11b      	bne.n	80017a8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001770:	21fc      	movs	r1, #252	; 0xfc
 8001772:	68b8      	ldr	r0, [r7, #8]
 8001774:	f7ff fd96 	bl	80012a4 <SD_TxDataBlock>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00a      	beq.n	8001794 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001784:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	3b01      	subs	r3, #1
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1ee      	bne.n	8001770 <SD_disk_write+0xac>
 8001792:	e000      	b.n	8001796 <SD_disk_write+0xd2>
          break;
 8001794:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001796:	21fd      	movs	r1, #253	; 0xfd
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff fd83 	bl	80012a4 <SD_TxDataBlock>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <SD_disk_write+0xe4>
      {
        count = 1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80017a8:	f7ff fc74 	bl	8001094 <DESELECT>
  SPI_RxByte();
 80017ac:	f7ff fc98 	bl	80010e0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf14      	ite	ne
 80017b6:	2301      	movne	r3, #1
 80017b8:	2300      	moveq	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000214 	.word	0x20000214

080017cc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b08b      	sub	sp, #44	; 0x2c
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	603a      	str	r2, [r7, #0]
 80017d6:	71fb      	strb	r3, [r7, #7]
 80017d8:	460b      	mov	r3, r1
 80017da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80017e6:	2304      	movs	r3, #4
 80017e8:	e11b      	b.n	8001a22 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	d129      	bne.n	800184a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d017      	beq.n	800182e <SD_disk_ioctl+0x62>
 80017fe:	2b02      	cmp	r3, #2
 8001800:	dc1f      	bgt.n	8001842 <SD_disk_ioctl+0x76>
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <SD_disk_ioctl+0x40>
 8001806:	2b01      	cmp	r3, #1
 8001808:	d00b      	beq.n	8001822 <SD_disk_ioctl+0x56>
 800180a:	e01a      	b.n	8001842 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800180c:	f7ff fd08 	bl	8001220 <SD_CheckPower>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001816:	f7ff fcf7 	bl	8001208 <SD_PowerOff>
      res = RES_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001820:	e0fd      	b.n	8001a1e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001822:	f7ff fca5 	bl	8001170 <SD_PowerOn>
      res = RES_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800182c:	e0f7      	b.n	8001a1e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	1c5c      	adds	r4, r3, #1
 8001832:	f7ff fcf5 	bl	8001220 <SD_CheckPower>
 8001836:	4603      	mov	r3, r0
 8001838:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800183a:	2300      	movs	r3, #0
 800183c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001840:	e0ed      	b.n	8001a1e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001842:	2304      	movs	r3, #4
 8001844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001848:	e0e9      	b.n	8001a1e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800184a:	4b78      	ldr	r3, [pc, #480]	; (8001a2c <SD_disk_ioctl+0x260>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001858:	2303      	movs	r3, #3
 800185a:	e0e2      	b.n	8001a22 <SD_disk_ioctl+0x256>

    SELECT();
 800185c:	f7ff fc0e 	bl	800107c <SELECT>

    switch (ctrl)
 8001860:	79bb      	ldrb	r3, [r7, #6]
 8001862:	2b0d      	cmp	r3, #13
 8001864:	f200 80cc 	bhi.w	8001a00 <SD_disk_ioctl+0x234>
 8001868:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <SD_disk_ioctl+0xa4>)
 800186a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186e:	bf00      	nop
 8001870:	0800196b 	.word	0x0800196b
 8001874:	080018a9 	.word	0x080018a9
 8001878:	0800195b 	.word	0x0800195b
 800187c:	08001a01 	.word	0x08001a01
 8001880:	08001a01 	.word	0x08001a01
 8001884:	08001a01 	.word	0x08001a01
 8001888:	08001a01 	.word	0x08001a01
 800188c:	08001a01 	.word	0x08001a01
 8001890:	08001a01 	.word	0x08001a01
 8001894:	08001a01 	.word	0x08001a01
 8001898:	08001a01 	.word	0x08001a01
 800189c:	0800197d 	.word	0x0800197d
 80018a0:	080019a1 	.word	0x080019a1
 80018a4:	080019c5 	.word	0x080019c5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80018a8:	2100      	movs	r1, #0
 80018aa:	2049      	movs	r0, #73	; 0x49
 80018ac:	f7ff fd4e 	bl	800134c <SD_SendCmd>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f040 80a8 	bne.w	8001a08 <SD_disk_ioctl+0x23c>
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	2110      	movs	r1, #16
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fcba 	bl	8001238 <SD_RxDataBlock>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 809e 	beq.w	8001a08 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80018cc:	7b3b      	ldrb	r3, [r7, #12]
 80018ce:	099b      	lsrs	r3, r3, #6
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d10e      	bne.n	80018f4 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80018d6:	7d7b      	ldrb	r3, [r7, #21]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	7d3b      	ldrb	r3, [r7, #20]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3301      	adds	r3, #1
 80018e8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80018ea:	8bfb      	ldrh	r3, [r7, #30]
 80018ec:	029a      	lsls	r2, r3, #10
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e02e      	b.n	8001952 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80018f4:	7c7b      	ldrb	r3, [r7, #17]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	7dbb      	ldrb	r3, [r7, #22]
 80018fe:	09db      	lsrs	r3, r3, #7
 8001900:	b2db      	uxtb	r3, r3
 8001902:	4413      	add	r3, r2
 8001904:	b2da      	uxtb	r2, r3
 8001906:	7d7b      	ldrb	r3, [r7, #21]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f003 0306 	and.w	r3, r3, #6
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4413      	add	r3, r2
 8001914:	b2db      	uxtb	r3, r3
 8001916:	3302      	adds	r3, #2
 8001918:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800191c:	7d3b      	ldrb	r3, [r7, #20]
 800191e:	099b      	lsrs	r3, r3, #6
 8001920:	b2db      	uxtb	r3, r3
 8001922:	b29a      	uxth	r2, r3
 8001924:	7cfb      	ldrb	r3, [r7, #19]
 8001926:	b29b      	uxth	r3, r3
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	b29b      	uxth	r3, r3
 800192c:	4413      	add	r3, r2
 800192e:	b29a      	uxth	r2, r3
 8001930:	7cbb      	ldrb	r3, [r7, #18]
 8001932:	029b      	lsls	r3, r3, #10
 8001934:	b29b      	uxth	r3, r3
 8001936:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800193a:	b29b      	uxth	r3, r3
 800193c:	4413      	add	r3, r2
 800193e:	b29b      	uxth	r3, r3
 8001940:	3301      	adds	r3, #1
 8001942:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001944:	8bfa      	ldrh	r2, [r7, #30]
 8001946:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800194a:	3b09      	subs	r3, #9
 800194c:	409a      	lsls	r2, r3
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001958:	e056      	b.n	8001a08 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001960:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001968:	e055      	b.n	8001a16 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800196a:	f7ff fbe5 	bl	8001138 <SD_ReadyWait>
 800196e:	4603      	mov	r3, r0
 8001970:	2bff      	cmp	r3, #255	; 0xff
 8001972:	d14b      	bne.n	8001a0c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800197a:	e047      	b.n	8001a0c <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800197c:	2100      	movs	r1, #0
 800197e:	2049      	movs	r0, #73	; 0x49
 8001980:	f7ff fce4 	bl	800134c <SD_SendCmd>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d142      	bne.n	8001a10 <SD_disk_ioctl+0x244>
 800198a:	2110      	movs	r1, #16
 800198c:	6a38      	ldr	r0, [r7, #32]
 800198e:	f7ff fc53 	bl	8001238 <SD_RxDataBlock>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d03b      	beq.n	8001a10 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800199e:	e037      	b.n	8001a10 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80019a0:	2100      	movs	r1, #0
 80019a2:	204a      	movs	r0, #74	; 0x4a
 80019a4:	f7ff fcd2 	bl	800134c <SD_SendCmd>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d132      	bne.n	8001a14 <SD_disk_ioctl+0x248>
 80019ae:	2110      	movs	r1, #16
 80019b0:	6a38      	ldr	r0, [r7, #32]
 80019b2:	f7ff fc41 	bl	8001238 <SD_RxDataBlock>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d02b      	beq.n	8001a14 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80019c2:	e027      	b.n	8001a14 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80019c4:	2100      	movs	r1, #0
 80019c6:	207a      	movs	r0, #122	; 0x7a
 80019c8:	f7ff fcc0 	bl	800134c <SD_SendCmd>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d116      	bne.n	8001a00 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019d8:	e00b      	b.n	80019f2 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80019da:	6a3c      	ldr	r4, [r7, #32]
 80019dc:	1c63      	adds	r3, r4, #1
 80019de:	623b      	str	r3, [r7, #32]
 80019e0:	f7ff fb7e 	bl	80010e0 <SPI_RxByte>
 80019e4:	4603      	mov	r3, r0
 80019e6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80019e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019ec:	3301      	adds	r3, #1
 80019ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d9ef      	bls.n	80019da <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001a00:	2304      	movs	r3, #4
 8001a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a06:	e006      	b.n	8001a16 <SD_disk_ioctl+0x24a>
      break;
 8001a08:	bf00      	nop
 8001a0a:	e004      	b.n	8001a16 <SD_disk_ioctl+0x24a>
      break;
 8001a0c:	bf00      	nop
 8001a0e:	e002      	b.n	8001a16 <SD_disk_ioctl+0x24a>
      break;
 8001a10:	bf00      	nop
 8001a12:	e000      	b.n	8001a16 <SD_disk_ioctl+0x24a>
      break;
 8001a14:	bf00      	nop
    }

    DESELECT();
 8001a16:	f7ff fb3d 	bl	8001094 <DESELECT>
    SPI_RxByte();
 8001a1a:	f7ff fb61 	bl	80010e0 <SPI_RxByte>
  }

  return res;
 8001a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	372c      	adds	r7, #44	; 0x2c
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000000 	.word	0x20000000

08001a30 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f023 030f 	bic.w	r3, r3, #15
 8001a40:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	f043 030c 	orr.w	r3, r3, #12
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	f043 0308 	orr.w	r3, r3, #8
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001a5c:	7bbb      	ldrb	r3, [r7, #14]
 8001a5e:	f043 030c 	orr.w	r3, r3, #12
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001a66:	7bbb      	ldrb	r3, [r7, #14]
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a70:	f107 0208 	add.w	r2, r7, #8
 8001a74:	2364      	movs	r3, #100	; 0x64
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2304      	movs	r3, #4
 8001a7a:	214e      	movs	r1, #78	; 0x4e
 8001a7c:	4803      	ldr	r0, [pc, #12]	; (8001a8c <lcd_send_cmd+0x5c>)
 8001a7e:	f005 f97b 	bl	8006d78 <HAL_I2C_Master_Transmit>
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000284 	.word	0x20000284

08001a90 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f023 030f 	bic.w	r3, r3, #15
 8001aa0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	f043 030d 	orr.w	r3, r3, #13
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	f043 0309 	orr.w	r3, r3, #9
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	f043 030d 	orr.w	r3, r3, #13
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1sssssssss
 8001ac6:	7bbb      	ldrb	r3, [r7, #14]
 8001ac8:	f043 0309 	orr.w	r3, r3, #9
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ad0:	f107 0208 	add.w	r2, r7, #8
 8001ad4:	2364      	movs	r3, #100	; 0x64
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2304      	movs	r3, #4
 8001ada:	214e      	movs	r1, #78	; 0x4e
 8001adc:	4803      	ldr	r0, [pc, #12]	; (8001aec <lcd_send_data+0x5c>)
 8001ade:	f005 f94b 	bl	8006d78 <HAL_I2C_Master_Transmit>
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000284 	.word	0x20000284

08001af0 <lcd_clear>:

void lcd_clear (void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f7ff ff9a 	bl	8001a30 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	e005      	b.n	8001b0e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001b02:	2020      	movs	r0, #32
 8001b04:	f7ff ffc4 	bl	8001a90 <lcd_send_data>
	for (int i=0; i<100; i++)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b63      	cmp	r3, #99	; 0x63
 8001b12:	ddf6      	ble.n	8001b02 <lcd_clear+0x12>
	}
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <lcd_init>:

void lcd_init (void)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001b22:	2032      	movs	r0, #50	; 0x32
 8001b24:	f003 fcc4 	bl	80054b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001b28:	2030      	movs	r0, #48	; 0x30
 8001b2a:	f7ff ff81 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001b2e:	2005      	movs	r0, #5
 8001b30:	f003 fcbe 	bl	80054b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001b34:	2030      	movs	r0, #48	; 0x30
 8001b36:	f7ff ff7b 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f003 fcb8 	bl	80054b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001b40:	2030      	movs	r0, #48	; 0x30
 8001b42:	f7ff ff75 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(10);
 8001b46:	200a      	movs	r0, #10
 8001b48:	f003 fcb2 	bl	80054b0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001b4c:	2020      	movs	r0, #32
 8001b4e:	f7ff ff6f 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(10);
 8001b52:	200a      	movs	r0, #10
 8001b54:	f003 fcac 	bl	80054b0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001b58:	2028      	movs	r0, #40	; 0x28
 8001b5a:	f7ff ff69 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(1);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f003 fca6 	bl	80054b0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001b64:	2008      	movs	r0, #8
 8001b66:	f7ff ff63 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(1);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f003 fca0 	bl	80054b0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001b70:	2001      	movs	r0, #1
 8001b72:	f7ff ff5d 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(1);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f003 fc9a 	bl	80054b0 <HAL_Delay>
	HAL_Delay(1);
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f003 fc97 	bl	80054b0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001b82:	2006      	movs	r0, #6
 8001b84:	f7ff ff54 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(1);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f003 fc91 	bl	80054b0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001b8e:	200c      	movs	r0, #12
 8001b90:	f7ff ff4e 	bl	8001a30 <lcd_send_cmd>
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001ba0:	e006      	b.n	8001bb0 <lcd_send_string+0x18>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff70 	bl	8001a90 <lcd_send_data>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f4      	bne.n	8001ba2 <lcd_send_string+0xa>
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <filt_string>:
extern void TDS_Calibration();
extern void Wifi_Config();
extern float TDS_Calculator(float k , uint16_t adc);

char *filt_string(char *str)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
    char *first;
    char *token;
    first = strstr(str,":");
 8001bcc:	213a      	movs	r1, #58	; 0x3a
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f00d f94d 	bl	800ee6e <strchr>
 8001bd4:	60f8      	str	r0, [r7, #12]
    token = strtok((char*)first+2,"\"");
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3302      	adds	r3, #2
 8001bda:	4905      	ldr	r1, [pc, #20]	; (8001bf0 <filt_string+0x2c>)
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f00d ff87 	bl	800faf0 <strtok>
 8001be2:	60b8      	str	r0, [r7, #8]

    return token;
 8001be4:	68bb      	ldr	r3, [r7, #8]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	08012af8 	.word	0x08012af8

08001bf4 <GET_VALUE_FROM_ESP32>:
void GET_VALUE_FROM_ESP32(char *string)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
    char *token;
    char *ph_string;
    char *ph_thr_string;
    char *tds_string;
    char *tds_thr_string;
    int i = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]

    first = strstr(string,"{");
 8001c00:	217b      	movs	r1, #123	; 0x7b
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f00d f933 	bl	800ee6e <strchr>
 8001c08:	6138      	str	r0, [r7, #16]
    token = strtok((char*)first,",");
 8001c0a:	4935      	ldr	r1, [pc, #212]	; (8001ce0 <GET_VALUE_FROM_ESP32+0xec>)
 8001c0c:	6938      	ldr	r0, [r7, #16]
 8001c0e:	f00d ff6f 	bl	800faf0 <strtok>
 8001c12:	6278      	str	r0, [r7, #36]	; 0x24
    ph_string = token;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	60fb      	str	r3, [r7, #12]

         while( token != NULL )
 8001c18:	e018      	b.n	8001c4c <GET_VALUE_FROM_ESP32+0x58>
          {
        	 token = strtok(NULL,",");
 8001c1a:	4931      	ldr	r1, [pc, #196]	; (8001ce0 <GET_VALUE_FROM_ESP32+0xec>)
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f00d ff67 	bl	800faf0 <strtok>
 8001c22:	6278      	str	r0, [r7, #36]	; 0x24
        	 if(i == 0)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d102      	bne.n	8001c30 <GET_VALUE_FROM_ESP32+0x3c>
        	 {
        		 ph_thr_string = token;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	623b      	str	r3, [r7, #32]
 8001c2e:	e00a      	b.n	8001c46 <GET_VALUE_FROM_ESP32+0x52>

        	 }
        	 else if(i == 1)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d102      	bne.n	8001c3c <GET_VALUE_FROM_ESP32+0x48>
        	 {
        		 tds_string =token;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	e004      	b.n	8001c46 <GET_VALUE_FROM_ESP32+0x52>

        	 }
        	 else if(i == 2)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d101      	bne.n	8001c46 <GET_VALUE_FROM_ESP32+0x52>
        	 {
        		 tds_thr_string = token;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	61bb      	str	r3, [r7, #24]

        	 }
             i++;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
         while( token != NULL )
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1e3      	bne.n	8001c1a <GET_VALUE_FROM_ESP32+0x26>
          }
         PH_SetPoint = (float)atof(filt_string(ph_string));
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f7ff ffb6 	bl	8001bc4 <filt_string>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f00c fa14 	bl	800e088 <atof>
 8001c60:	ec53 2b10 	vmov	r2, r3, d0
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7fe ffce 	bl	8000c08 <__aeabi_d2f>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ce4 <GET_VALUE_FROM_ESP32+0xf0>)
 8001c70:	6013      	str	r3, [r2, #0]
         PH_THR_SetPoint =  (float)(atof(filt_string(ph_thr_string)));
 8001c72:	6a38      	ldr	r0, [r7, #32]
 8001c74:	f7ff ffa6 	bl	8001bc4 <filt_string>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00c fa04 	bl	800e088 <atof>
 8001c80:	ec53 2b10 	vmov	r2, r3, d0
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f7fe ffbe 	bl	8000c08 <__aeabi_d2f>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4a16      	ldr	r2, [pc, #88]	; (8001ce8 <GET_VALUE_FROM_ESP32+0xf4>)
 8001c90:	6013      	str	r3, [r2, #0]
         TDS_SetPoint =  (float)atof(filt_string(tds_string));
 8001c92:	69f8      	ldr	r0, [r7, #28]
 8001c94:	f7ff ff96 	bl	8001bc4 <filt_string>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f00c f9f4 	bl	800e088 <atof>
 8001ca0:	ec53 2b10 	vmov	r2, r3, d0
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe ffae 	bl	8000c08 <__aeabi_d2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <GET_VALUE_FROM_ESP32+0xf8>)
 8001cb0:	6013      	str	r3, [r2, #0]
         TDS_THR_SetPoint = (float)atof(filt_string(tds_thr_string));
 8001cb2:	69b8      	ldr	r0, [r7, #24]
 8001cb4:	f7ff ff86 	bl	8001bc4 <filt_string>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f00c f9e4 	bl	800e088 <atof>
 8001cc0:	ec53 2b10 	vmov	r2, r3, d0
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe ff9e 	bl	8000c08 <__aeabi_d2f>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <GET_VALUE_FROM_ESP32+0xfc>)
 8001cd0:	6013      	str	r3, [r2, #0]
         from_web_flag = 1;
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <GET_VALUE_FROM_ESP32+0x100>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
//         Read_SetPoint(flash_setpoint);


}
 8001cd8:	bf00      	nop
 8001cda:	3728      	adds	r7, #40	; 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	08012afc 	.word	0x08012afc
 8001ce4:	20000558 	.word	0x20000558
 8001ce8:	20000554 	.word	0x20000554
 8001cec:	2000054c 	.word	0x2000054c
 8001cf0:	20000550 	.word	0x20000550
 8001cf4:	2000055e 	.word	0x2000055e

08001cf8 <Rotary_init>:

void Rotary_init()
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	rotary_first_value = HAL_GPIO_ReadPin(GPIOE, Rotary_CLK_Pin);
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	4804      	ldr	r0, [pc, #16]	; (8001d10 <Rotary_init+0x18>)
 8001d00:	f004 feaa 	bl	8006a58 <HAL_GPIO_ReadPin>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b02      	ldr	r3, [pc, #8]	; (8001d14 <Rotary_init+0x1c>)
 8001d0a:	601a      	str	r2, [r3, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	20000234 	.word	0x20000234

08001d18 <Rotary_volum>:
int  Rotary_volum()
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	rotary_curent_value = HAL_GPIO_ReadPin(GPIOE, Rotary_CLK_Pin);
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	4817      	ldr	r0, [pc, #92]	; (8001d7c <Rotary_volum+0x64>)
 8001d20:	f004 fe9a 	bl	8006a58 <HAL_GPIO_ReadPin>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <Rotary_volum+0x68>)
 8001d2a:	601a      	str	r2, [r3, #0]
	if (rotary_curent_value != rotary_first_value)
 8001d2c:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <Rotary_volum+0x68>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <Rotary_volum+0x6c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d019      	beq.n	8001d6c <Rotary_volum+0x54>
	   {
	     if (HAL_GPIO_ReadPin(GPIOE, Rotary_DT_Pin) != rotary_curent_value)
 8001d38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d3c:	480f      	ldr	r0, [pc, #60]	; (8001d7c <Rotary_volum+0x64>)
 8001d3e:	f004 fe8b 	bl	8006a58 <HAL_GPIO_ReadPin>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <Rotary_volum+0x68>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d007      	beq.n	8001d5e <Rotary_volum+0x46>
	     {
	    	 lcd_clear();
 8001d4e:	f7ff fecf 	bl	8001af0 <lcd_clear>
	    	 lcd_pointer_1 +=1;
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <Rotary_volum+0x70>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <Rotary_volum+0x70>)
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	e006      	b.n	8001d6c <Rotary_volum+0x54>

	     }
	     else
	     {
	    	 lcd_clear();
 8001d5e:	f7ff fec7 	bl	8001af0 <lcd_clear>
	    	 lcd_pointer_1 -=1;
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <Rotary_volum+0x70>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <Rotary_volum+0x70>)
 8001d6a:	6013      	str	r3, [r2, #0]
	     }
	   }
	rotary_first_value = rotary_curent_value;
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <Rotary_volum+0x68>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <Rotary_volum+0x6c>)
 8001d72:	6013      	str	r3, [r2, #0]
	return lcd_pointer_1;
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <Rotary_volum+0x70>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	20000238 	.word	0x20000238
 8001d84:	20000234 	.word	0x20000234
 8001d88:	2000022c 	.word	0x2000022c

08001d8c <Push_Slect>:
void Push_Slect()
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
	  if(HAL_GPIO_ReadPin(GPIOE, Rotary_SW_Pin) == 0)
 8001d90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d94:	4813      	ldr	r0, [pc, #76]	; (8001de4 <Push_Slect+0x58>)
 8001d96:	f004 fe5f 	bl	8006a58 <HAL_GPIO_ReadPin>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d11c      	bne.n	8001dda <Push_Slect+0x4e>
	  		{
	  			HAL_Delay(20);
 8001da0:	2014      	movs	r0, #20
 8001da2:	f003 fb85 	bl	80054b0 <HAL_Delay>
	  			if((HAL_GPIO_ReadPin(GPIOE, Rotary_SW_Pin) == 0) && (isPress == 0)) // nut nhan da bam
 8001da6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001daa:	480e      	ldr	r0, [pc, #56]	; (8001de4 <Push_Slect+0x58>)
 8001dac:	f004 fe54 	bl	8006a58 <HAL_GPIO_ReadPin>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d114      	bne.n	8001de0 <Push_Slect+0x54>
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <Push_Slect+0x5c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d110      	bne.n	8001de0 <Push_Slect+0x54>
	  			{
	  				lcd_clear();
 8001dbe:	f7ff fe97 	bl	8001af0 <lcd_clear>
	  				Rpush_number++;
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <Push_Slect+0x60>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	4a08      	ldr	r2, [pc, #32]	; (8001dec <Push_Slect+0x60>)
 8001dca:	6013      	str	r3, [r2, #0]
	  				isPress = 1;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <Push_Slect+0x5c>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
	  				button_flag = 0;
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <Push_Slect+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
	  			}
	  		}
	  		else{isPress = 0;}
}
 8001dd8:	e002      	b.n	8001de0 <Push_Slect+0x54>
	  		else{isPress = 0;}
 8001dda:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <Push_Slect+0x5c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	20000230 	.word	0x20000230
 8001dec:	20000220 	.word	0x20000220
 8001df0:	20000224 	.word	0x20000224

08001df4 <Pointer_Status>:
void Pointer_Status(uint32_t volume)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	if(volume > last)
 8001dfc:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <Pointer_Status+0xd8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d905      	bls.n	8001e12 <Pointer_Status+0x1e>
	{
		pointer_position++;
 8001e06:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <Pointer_Status+0xdc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	4a30      	ldr	r2, [pc, #192]	; (8001ed0 <Pointer_Status+0xdc>)
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	e009      	b.n	8001e26 <Pointer_Status+0x32>
	}
	else if(volume < last)
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <Pointer_Status+0xd8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d204      	bcs.n	8001e26 <Pointer_Status+0x32>
	{
		pointer_position--;
 8001e1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <Pointer_Status+0xdc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	4a2b      	ldr	r2, [pc, #172]	; (8001ed0 <Pointer_Status+0xdc>)
 8001e24:	6013      	str	r3, [r2, #0]
	}
	last = volume;
 8001e26:	4a29      	ldr	r2, [pc, #164]	; (8001ecc <Pointer_Status+0xd8>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6013      	str	r3, [r2, #0]

	switch(pointer_position)
 8001e2c:	4b28      	ldr	r3, [pc, #160]	; (8001ed0 <Pointer_Status+0xdc>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d838      	bhi.n	8001ea6 <Pointer_Status+0xb2>
 8001e34:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <Pointer_Status+0x48>)
 8001e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3a:	bf00      	nop
 8001e3c:	08001e61 	.word	0x08001e61
 8001e40:	08001ea7 	.word	0x08001ea7
 8001e44:	08001e6f 	.word	0x08001e6f
 8001e48:	08001ea7 	.word	0x08001ea7
 8001e4c:	08001e7d 	.word	0x08001e7d
 8001e50:	08001ea7 	.word	0x08001ea7
 8001e54:	08001e8b 	.word	0x08001e8b
 8001e58:	08001ea7 	.word	0x08001ea7
 8001e5c:	08001e99 	.word	0x08001e99
	{
		case 0:
			lcd_send_cmd(0x80 | 0x00); //PH
 8001e60:	2080      	movs	r0, #128	; 0x80
 8001e62:	f7ff fde5 	bl	8001a30 <lcd_send_cmd>
			lcd_send_string("->");
 8001e66:	481b      	ldr	r0, [pc, #108]	; (8001ed4 <Pointer_Status+0xe0>)
 8001e68:	f7ff fe96 	bl	8001b98 <lcd_send_string>
			break;
 8001e6c:	e029      	b.n	8001ec2 <Pointer_Status+0xce>
		case 2:
			lcd_send_cmd(0x80 | 0x40); //PH
 8001e6e:	20c0      	movs	r0, #192	; 0xc0
 8001e70:	f7ff fdde 	bl	8001a30 <lcd_send_cmd>
			lcd_send_string("->");
 8001e74:	4817      	ldr	r0, [pc, #92]	; (8001ed4 <Pointer_Status+0xe0>)
 8001e76:	f7ff fe8f 	bl	8001b98 <lcd_send_string>
			break;
 8001e7a:	e022      	b.n	8001ec2 <Pointer_Status+0xce>
		case 4:
			lcd_send_cmd(0x80 | 0x14); //PH
 8001e7c:	2094      	movs	r0, #148	; 0x94
 8001e7e:	f7ff fdd7 	bl	8001a30 <lcd_send_cmd>
			lcd_send_string("->");
 8001e82:	4814      	ldr	r0, [pc, #80]	; (8001ed4 <Pointer_Status+0xe0>)
 8001e84:	f7ff fe88 	bl	8001b98 <lcd_send_string>
			break;
 8001e88:	e01b      	b.n	8001ec2 <Pointer_Status+0xce>
		case 6:
			lcd_send_cmd(0x80 | 0x54); //PH
 8001e8a:	20d4      	movs	r0, #212	; 0xd4
 8001e8c:	f7ff fdd0 	bl	8001a30 <lcd_send_cmd>
			lcd_send_string("->");
 8001e90:	4810      	ldr	r0, [pc, #64]	; (8001ed4 <Pointer_Status+0xe0>)
 8001e92:	f7ff fe81 	bl	8001b98 <lcd_send_string>
			break;
 8001e96:	e014      	b.n	8001ec2 <Pointer_Status+0xce>
		case 8:
			if(Rpush_number == 2||3)
			{
				lcd_send_cmd(0x80 | 0x66);
 8001e98:	20e6      	movs	r0, #230	; 0xe6
 8001e9a:	f7ff fdc9 	bl	8001a30 <lcd_send_cmd>
				lcd_send_string(">>");
 8001e9e:	480e      	ldr	r0, [pc, #56]	; (8001ed8 <Pointer_Status+0xe4>)
 8001ea0:	f7ff fe7a 	bl	8001b98 <lcd_send_string>
			}
			break;
 8001ea4:	e00d      	b.n	8001ec2 <Pointer_Status+0xce>
		default:
			if(pointer_position>9)
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <Pointer_Status+0xdc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b09      	cmp	r3, #9
 8001eac:	d908      	bls.n	8001ec0 <Pointer_Status+0xcc>
			{
				pointer_position = 0;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <Pointer_Status+0xdc>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(0x80 | 0x00); //PH
 8001eb4:	2080      	movs	r0, #128	; 0x80
 8001eb6:	f7ff fdbb 	bl	8001a30 <lcd_send_cmd>
				lcd_send_string("->");
 8001eba:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <Pointer_Status+0xe0>)
 8001ebc:	f7ff fe6c 	bl	8001b98 <lcd_send_string>
			}
			break;
 8001ec0:	bf00      	nop
	}
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000218 	.word	0x20000218
 8001ed0:	2000021c 	.word	0x2000021c
 8001ed4:	08012b00 	.word	0x08012b00
 8001ed8:	08012b04 	.word	0x08012b04

08001edc <Pointer_2_Status>:
void Pointer_2_Status(uint32_t line)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	if(line == 0)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <Pointer_2_Status+0x1c>
		{
		lcd_send_cmd(0x80 | 0x0A); //PH
 8001eea:	208a      	movs	r0, #138	; 0x8a
 8001eec:	f7ff fda0 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("<");
 8001ef0:	4812      	ldr	r0, [pc, #72]	; (8001f3c <Pointer_2_Status+0x60>)
 8001ef2:	f7ff fe51 	bl	8001b98 <lcd_send_string>
		else if(line == 6)
		{
		lcd_send_cmd(0x80 | 0x5E); //PH
		lcd_send_string("<");
		}
}
 8001ef6:	e01c      	b.n	8001f32 <Pointer_2_Status+0x56>
		else if(line == 2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d106      	bne.n	8001f0c <Pointer_2_Status+0x30>
		lcd_send_cmd(0x80 | 0x4A); //PH
 8001efe:	20ca      	movs	r0, #202	; 0xca
 8001f00:	f7ff fd96 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("<");
 8001f04:	480d      	ldr	r0, [pc, #52]	; (8001f3c <Pointer_2_Status+0x60>)
 8001f06:	f7ff fe47 	bl	8001b98 <lcd_send_string>
}
 8001f0a:	e012      	b.n	8001f32 <Pointer_2_Status+0x56>
		else if(line == 4)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d106      	bne.n	8001f20 <Pointer_2_Status+0x44>
		lcd_send_cmd(0x80 | 0x1E); //PH
 8001f12:	209e      	movs	r0, #158	; 0x9e
 8001f14:	f7ff fd8c 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("<");
 8001f18:	4808      	ldr	r0, [pc, #32]	; (8001f3c <Pointer_2_Status+0x60>)
 8001f1a:	f7ff fe3d 	bl	8001b98 <lcd_send_string>
}
 8001f1e:	e008      	b.n	8001f32 <Pointer_2_Status+0x56>
		else if(line == 6)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d105      	bne.n	8001f32 <Pointer_2_Status+0x56>
		lcd_send_cmd(0x80 | 0x5E); //PH
 8001f26:	20de      	movs	r0, #222	; 0xde
 8001f28:	f7ff fd82 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("<");
 8001f2c:	4803      	ldr	r0, [pc, #12]	; (8001f3c <Pointer_2_Status+0x60>)
 8001f2e:	f7ff fe33 	bl	8001b98 <lcd_send_string>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	08012b08 	.word	0x08012b08

08001f40 <LCD_Menu_2_1>:
void LCD_Menu_2_1()
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b09a      	sub	sp, #104	; 0x68
 8001f44:	af00      	add	r7, sp, #0
	char buffer_string[100];
	lcd_send_cmd(0x80 | 0x02); //PH
 8001f46:	2082      	movs	r0, #130	; 0x82
 8001f48:	f7ff fd72 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string("PH:");
 8001f4c:	4844      	ldr	r0, [pc, #272]	; (8002060 <LCD_Menu_2_1+0x120>)
 8001f4e:	f7ff fe23 	bl	8001b98 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x42); //PH
 8001f52:	20c2      	movs	r0, #194	; 0xc2
 8001f54:	f7ff fd6c 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string("PH_Thr:");
 8001f58:	4842      	ldr	r0, [pc, #264]	; (8002064 <LCD_Menu_2_1+0x124>)
 8001f5a:	f7ff fe1d 	bl	8001b98 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x16); //PH
 8001f5e:	2096      	movs	r0, #150	; 0x96
 8001f60:	f7ff fd66 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string("TDS:");
 8001f64:	4840      	ldr	r0, [pc, #256]	; (8002068 <LCD_Menu_2_1+0x128>)
 8001f66:	f7ff fe17 	bl	8001b98 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x56); //PH
 8001f6a:	20d6      	movs	r0, #214	; 0xd6
 8001f6c:	f7ff fd60 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string("TDS_Thr:");
 8001f70:	483e      	ldr	r0, [pc, #248]	; (800206c <LCD_Menu_2_1+0x12c>)
 8001f72:	f7ff fe11 	bl	8001b98 <lcd_send_string>


	lcd_send_cmd(0x80 | 0x0B); //PH_Setpoint
 8001f76:	208b      	movs	r0, #139	; 0x8b
 8001f78:	f7ff fd5a 	bl	8001a30 <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",PH_SetPoint);
 8001f7c:	4b3c      	ldr	r3, [pc, #240]	; (8002070 <LCD_Menu_2_1+0x130>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe faf1 	bl	8000568 <__aeabi_f2d>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	1d38      	adds	r0, r7, #4
 8001f8c:	4939      	ldr	r1, [pc, #228]	; (8002074 <LCD_Menu_2_1+0x134>)
 8001f8e:	f00c ff3f 	bl	800ee10 <siprintf>
	lcd_send_string(buffer_string);
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fdff 	bl	8001b98 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe f921 	bl	80001e4 <strlen>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00c f8a9 	bl	800e100 <memset>


	lcd_send_cmd(0x80 | 0x4B); //PH_THR_Setpoint
 8001fae:	20cb      	movs	r0, #203	; 0xcb
 8001fb0:	f7ff fd3e 	bl	8001a30 <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",PH_THR_SetPoint);
 8001fb4:	4b30      	ldr	r3, [pc, #192]	; (8002078 <LCD_Menu_2_1+0x138>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fad5 	bl	8000568 <__aeabi_f2d>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	1d38      	adds	r0, r7, #4
 8001fc4:	492b      	ldr	r1, [pc, #172]	; (8002074 <LCD_Menu_2_1+0x134>)
 8001fc6:	f00c ff23 	bl	800ee10 <siprintf>
	lcd_send_string(buffer_string);
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fde3 	bl	8001b98 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe f905 	bl	80001e4 <strlen>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f00c f88d 	bl	800e100 <memset>

	lcd_send_cmd(0x80 | 0x1F); //TDS_Setpoint
 8001fe6:	209f      	movs	r0, #159	; 0x9f
 8001fe8:	f7ff fd22 	bl	8001a30 <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",TDS_SetPoint);
 8001fec:	4b23      	ldr	r3, [pc, #140]	; (800207c <LCD_Menu_2_1+0x13c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fab9 	bl	8000568 <__aeabi_f2d>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	1d38      	adds	r0, r7, #4
 8001ffc:	491d      	ldr	r1, [pc, #116]	; (8002074 <LCD_Menu_2_1+0x134>)
 8001ffe:	f00c ff07 	bl	800ee10 <siprintf>
	lcd_send_string(buffer_string);
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fdc7 	bl	8001b98 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe f8e9 	bl	80001e4 <strlen>
 8002012:	4602      	mov	r2, r0
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f00c f871 	bl	800e100 <memset>


	lcd_send_cmd(0x80 | 0x5F); //TDS_THR_Setpoint
 800201e:	20df      	movs	r0, #223	; 0xdf
 8002020:	f7ff fd06 	bl	8001a30 <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",TDS_THR_SetPoint);
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <LCD_Menu_2_1+0x140>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fa9d 	bl	8000568 <__aeabi_f2d>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	1d38      	adds	r0, r7, #4
 8002034:	490f      	ldr	r1, [pc, #60]	; (8002074 <LCD_Menu_2_1+0x134>)
 8002036:	f00c feeb 	bl	800ee10 <siprintf>
	lcd_send_string(buffer_string);
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fdab 	bl	8001b98 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe f8cd 	bl	80001e4 <strlen>
 800204a:	4602      	mov	r2, r0
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f00c f855 	bl	800e100 <memset>
}
 8002056:	bf00      	nop
 8002058:	3768      	adds	r7, #104	; 0x68
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	08012b0c 	.word	0x08012b0c
 8002064:	08012b10 	.word	0x08012b10
 8002068:	08012b18 	.word	0x08012b18
 800206c:	08012b20 	.word	0x08012b20
 8002070:	20000558 	.word	0x20000558
 8002074:	08012b2c 	.word	0x08012b2c
 8002078:	20000554 	.word	0x20000554
 800207c:	2000054c 	.word	0x2000054c
 8002080:	20000550 	.word	0x20000550

08002084 <LCD_Menu_2_2>:
void LCD_Menu_2_2(uint8_t isTesting)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
	if(isTesting == 0)
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d118      	bne.n	80020c6 <LCD_Menu_2_2+0x42>
	{
		lcd_send_cmd(0x80 | 0x02); //PH
 8002094:	2082      	movs	r0, #130	; 0x82
 8002096:	f7ff fccb 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Pump 1:");
 800209a:	4812      	ldr	r0, [pc, #72]	; (80020e4 <LCD_Menu_2_2+0x60>)
 800209c:	f7ff fd7c 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x42); //PH
 80020a0:	20c2      	movs	r0, #194	; 0xc2
 80020a2:	f7ff fcc5 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Pump 2:");
 80020a6:	4810      	ldr	r0, [pc, #64]	; (80020e8 <LCD_Menu_2_2+0x64>)
 80020a8:	f7ff fd76 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x16); //PH
 80020ac:	2096      	movs	r0, #150	; 0x96
 80020ae:	f7ff fcbf 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Pump 3:");
 80020b2:	480e      	ldr	r0, [pc, #56]	; (80020ec <LCD_Menu_2_2+0x68>)
 80020b4:	f7ff fd70 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x56); //PH
 80020b8:	20d6      	movs	r0, #214	; 0xd6
 80020ba:	f7ff fcb9 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Pump 4:");
 80020be:	480c      	ldr	r0, [pc, #48]	; (80020f0 <LCD_Menu_2_2+0x6c>)
 80020c0:	f7ff fd6a 	bl	8001b98 <lcd_send_string>
	{
		lcd_send_cmd(0x80 | 0x42); //PH
		lcd_send_string("Testing pump...");
		lcd_clear();
	}
}
 80020c4:	e00a      	b.n	80020dc <LCD_Menu_2_2+0x58>
	else if(isTesting == 1)
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <LCD_Menu_2_2+0x58>
		lcd_send_cmd(0x80 | 0x42); //PH
 80020cc:	20c2      	movs	r0, #194	; 0xc2
 80020ce:	f7ff fcaf 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Testing pump...");
 80020d2:	4808      	ldr	r0, [pc, #32]	; (80020f4 <LCD_Menu_2_2+0x70>)
 80020d4:	f7ff fd60 	bl	8001b98 <lcd_send_string>
		lcd_clear();
 80020d8:	f7ff fd0a 	bl	8001af0 <lcd_clear>
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	08012b34 	.word	0x08012b34
 80020e8:	08012b3c 	.word	0x08012b3c
 80020ec:	08012b44 	.word	0x08012b44
 80020f0:	08012b4c 	.word	0x08012b4c
 80020f4:	08012b54 	.word	0x08012b54

080020f8 <LCD_Menu_2_3>:
void LCD_Menu_2_3(uint8_t isCalib)
{
 80020f8:	b5b0      	push	{r4, r5, r7, lr}
 80020fa:	b0a0      	sub	sp, #128	; 0x80
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
	char buffer_String[100] = {0};
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	f107 0310 	add.w	r3, r7, #16
 800210a:	2260      	movs	r2, #96	; 0x60
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f00b fff6 	bl	800e100 <memset>
	float PH_Calib = 0;
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	677b      	str	r3, [r7, #116]	; 0x74
	float TDS_Calib = 0;
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	673b      	str	r3, [r7, #112]	; 0x70
	if(isCalib == 0)
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d15c      	bne.n	80021e0 <LCD_Menu_2_3+0xe8>
	{
		/*PH:*/
		lcd_send_cmd(0x80 | 0x02); //PH
 8002126:	2082      	movs	r0, #130	; 0x82
 8002128:	f7ff fc82 	bl	8001a30 <lcd_send_cmd>
		sprintf(buffer_String,"PH:%.2f",PH);
 800212c:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <LCD_Menu_2_3+0x1bc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fa19 	bl	8000568 <__aeabi_f2d>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	f107 000c 	add.w	r0, r7, #12
 800213e:	495e      	ldr	r1, [pc, #376]	; (80022b8 <LCD_Menu_2_3+0x1c0>)
 8002140:	f00c fe66 	bl	800ee10 <siprintf>
		lcd_send_string(buffer_String);
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fd25 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x43); //PH
 800214e:	20c3      	movs	r0, #195	; 0xc3
 8002150:	f7ff fc6e 	bl	8001a30 <lcd_send_cmd>
		sprintf(buffer_String,"=>%.4f|%.4f",ph_a_value,ph_b_value);
 8002154:	4b59      	ldr	r3, [pc, #356]	; (80022bc <LCD_Menu_2_3+0x1c4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fa05 	bl	8000568 <__aeabi_f2d>
 800215e:	4604      	mov	r4, r0
 8002160:	460d      	mov	r5, r1
 8002162:	4b57      	ldr	r3, [pc, #348]	; (80022c0 <LCD_Menu_2_3+0x1c8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe f9fe 	bl	8000568 <__aeabi_f2d>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	f107 000c 	add.w	r0, r7, #12
 8002174:	e9cd 2300 	strd	r2, r3, [sp]
 8002178:	4622      	mov	r2, r4
 800217a:	462b      	mov	r3, r5
 800217c:	4951      	ldr	r1, [pc, #324]	; (80022c4 <LCD_Menu_2_3+0x1cc>)
 800217e:	f00c fe47 	bl	800ee10 <siprintf>
		lcd_send_string(buffer_String);
 8002182:	f107 030c 	add.w	r3, r7, #12
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fd06 	bl	8001b98 <lcd_send_string>

		/*TDS*/
		lcd_send_cmd(0x80 | 0x16); //PH
 800218c:	2096      	movs	r0, #150	; 0x96
 800218e:	f7ff fc4f 	bl	8001a30 <lcd_send_cmd>
		sprintf(buffer_String,"TDS:%d",(int)TDS);
 8002192:	4b4d      	ldr	r3, [pc, #308]	; (80022c8 <LCD_Menu_2_3+0x1d0>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	ee17 2a90 	vmov	r2, s15
 80021a4:	4949      	ldr	r1, [pc, #292]	; (80022cc <LCD_Menu_2_3+0x1d4>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f00c fe32 	bl	800ee10 <siprintf>
		lcd_send_string(buffer_String);
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fcf1 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x57); //PH
 80021b6:	20d7      	movs	r0, #215	; 0xd7
 80021b8:	f7ff fc3a 	bl	8001a30 <lcd_send_cmd>
		sprintf(buffer_String,"=>%.2f",tds_k_value);
 80021bc:	4b44      	ldr	r3, [pc, #272]	; (80022d0 <LCD_Menu_2_3+0x1d8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f9d1 	bl	8000568 <__aeabi_f2d>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	f107 000c 	add.w	r0, r7, #12
 80021ce:	4941      	ldr	r1, [pc, #260]	; (80022d4 <LCD_Menu_2_3+0x1dc>)
 80021d0:	f00c fe1e 	bl	800ee10 <siprintf>
		lcd_send_string(buffer_String);
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fcdd 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x41);
		lcd_send_string(buffer_String);
		lcd_send_cmd(0x80 | 0x54);
		lcd_send_string("tds_400 or ph_900");
	}
}
 80021de:	e065      	b.n	80022ac <LCD_Menu_2_3+0x1b4>
	else if(isCalib == 1)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d132      	bne.n	800224c <LCD_Menu_2_3+0x154>
		lcd_send_cmd(0x80 | 0x02);
 80021e6:	2082      	movs	r0, #130	; 0x82
 80021e8:	f7ff fc22 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Calib PH mode...");
 80021ec:	483a      	ldr	r0, [pc, #232]	; (80022d8 <LCD_Menu_2_3+0x1e0>)
 80021ee:	f7ff fcd3 	bl	8001b98 <lcd_send_string>
		PH_Calib = PH_Calculator(ph_a_value, ph_b_value, ADC_Value[0]);
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <LCD_Menu_2_3+0x1c4>)
 80021f4:	edd3 7a00 	vldr	s15, [r3]
 80021f8:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <LCD_Menu_2_3+0x1c8>)
 80021fa:	ed93 7a00 	vldr	s14, [r3]
 80021fe:	4b37      	ldr	r3, [pc, #220]	; (80022dc <LCD_Menu_2_3+0x1e4>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	eef0 0a47 	vmov.f32	s1, s14
 8002208:	eeb0 0a67 	vmov.f32	s0, s15
 800220c:	f000 ff0c 	bl	8003028 <PH_Calculator>
 8002210:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
		sprintf(buffer_String,"%.2f---%d",PH_Calib,ADC_Value[0]);
 8002214:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002216:	f7fe f9a7 	bl	8000568 <__aeabi_f2d>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	492f      	ldr	r1, [pc, #188]	; (80022dc <LCD_Menu_2_3+0x1e4>)
 8002220:	8809      	ldrh	r1, [r1, #0]
 8002222:	f107 000c 	add.w	r0, r7, #12
 8002226:	9100      	str	r1, [sp, #0]
 8002228:	492d      	ldr	r1, [pc, #180]	; (80022e0 <LCD_Menu_2_3+0x1e8>)
 800222a:	f00c fdf1 	bl	800ee10 <siprintf>
		lcd_send_cmd(0x80 | 0x41);
 800222e:	20c1      	movs	r0, #193	; 0xc1
 8002230:	f7ff fbfe 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string(buffer_String);
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fcad 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800223e:	20d4      	movs	r0, #212	; 0xd4
 8002240:	f7ff fbf6 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("ph_7 or ph_4");
 8002244:	4827      	ldr	r0, [pc, #156]	; (80022e4 <LCD_Menu_2_3+0x1ec>)
 8002246:	f7ff fca7 	bl	8001b98 <lcd_send_string>
}
 800224a:	e02f      	b.n	80022ac <LCD_Menu_2_3+0x1b4>
	else if(isCalib == 2)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d12c      	bne.n	80022ac <LCD_Menu_2_3+0x1b4>
		lcd_send_cmd(0x80 | 0x02);
 8002252:	2082      	movs	r0, #130	; 0x82
 8002254:	f7ff fbec 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Calib TDS mode...");
 8002258:	4823      	ldr	r0, [pc, #140]	; (80022e8 <LCD_Menu_2_3+0x1f0>)
 800225a:	f7ff fc9d 	bl	8001b98 <lcd_send_string>
		TDS_Calib = TDS_Calculator(tds_k_value, ADC_Value[1]);
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <LCD_Menu_2_3+0x1d8>)
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <LCD_Menu_2_3+0x1e4>)
 8002266:	885b      	ldrh	r3, [r3, #2]
 8002268:	4618      	mov	r0, r3
 800226a:	eeb0 0a67 	vmov.f32	s0, s15
 800226e:	f000 ff13 	bl	8003098 <TDS_Calculator>
 8002272:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		sprintf(buffer_String,"%.1f-%d",(float)TDS_Calib,ADC_Value[1]);
 8002276:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002278:	f7fe f976 	bl	8000568 <__aeabi_f2d>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4916      	ldr	r1, [pc, #88]	; (80022dc <LCD_Menu_2_3+0x1e4>)
 8002282:	8849      	ldrh	r1, [r1, #2]
 8002284:	f107 000c 	add.w	r0, r7, #12
 8002288:	9100      	str	r1, [sp, #0]
 800228a:	4918      	ldr	r1, [pc, #96]	; (80022ec <LCD_Menu_2_3+0x1f4>)
 800228c:	f00c fdc0 	bl	800ee10 <siprintf>
		lcd_send_cmd(0x80 | 0x41);
 8002290:	20c1      	movs	r0, #193	; 0xc1
 8002292:	f7ff fbcd 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string(buffer_String);
 8002296:	f107 030c 	add.w	r3, r7, #12
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fc7c 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80022a0:	20d4      	movs	r0, #212	; 0xd4
 80022a2:	f7ff fbc5 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("tds_400 or ph_900");
 80022a6:	4812      	ldr	r0, [pc, #72]	; (80022f0 <LCD_Menu_2_3+0x1f8>)
 80022a8:	f7ff fc76 	bl	8001b98 <lcd_send_string>
}
 80022ac:	bf00      	nop
 80022ae:	3778      	adds	r7, #120	; 0x78
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bdb0      	pop	{r4, r5, r7, pc}
 80022b4:	20000544 	.word	0x20000544
 80022b8:	08012b64 	.word	0x08012b64
 80022bc:	2000116c 	.word	0x2000116c
 80022c0:	20001170 	.word	0x20001170
 80022c4:	08012b6c 	.word	0x08012b6c
 80022c8:	20000540 	.word	0x20000540
 80022cc:	08012b78 	.word	0x08012b78
 80022d0:	20001174 	.word	0x20001174
 80022d4:	08012b80 	.word	0x08012b80
 80022d8:	08012b88 	.word	0x08012b88
 80022dc:	20001160 	.word	0x20001160
 80022e0:	08012b9c 	.word	0x08012b9c
 80022e4:	08012ba8 	.word	0x08012ba8
 80022e8:	08012bb8 	.word	0x08012bb8
 80022ec:	08012bcc 	.word	0x08012bcc
 80022f0:	08012bd4 	.word	0x08012bd4

080022f4 <LCD_Menu_2_4_>:

void LCD_Menu_2_4_(uint8_t isWifi)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
	if(isWifi == 0)
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d118      	bne.n	8002336 <LCD_Menu_2_4_+0x42>
	{
		lcd_send_cmd(0x80 | 0x02);
 8002304:	2082      	movs	r0, #130	; 0x82
 8002306:	f7ff fb93 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("login MyHydroponic");
 800230a:	4817      	ldr	r0, [pc, #92]	; (8002368 <LCD_Menu_2_4_+0x74>)
 800230c:	f7ff fc44 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x42);
 8002310:	20c2      	movs	r0, #194	; 0xc2
 8002312:	f7ff fb8d 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("goto 192.168.4.1");
 8002316:	4815      	ldr	r0, [pc, #84]	; (800236c <LCD_Menu_2_4_+0x78>)
 8002318:	f7ff fc3e 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x16);
 800231c:	2096      	movs	r0, #150	; 0x96
 800231e:	f7ff fb87 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Start");
 8002322:	4813      	ldr	r0, [pc, #76]	; (8002370 <LCD_Menu_2_4_+0x7c>)
 8002324:	f7ff fc38 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x56);
 8002328:	20d6      	movs	r0, #214	; 0xd6
 800232a:	f7ff fb81 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("End");
 800232e:	4811      	ldr	r0, [pc, #68]	; (8002374 <LCD_Menu_2_4_+0x80>)
 8002330:	f7ff fc32 	bl	8001b98 <lcd_send_string>
		lcd_send_string("goto 192.168.4.1");
		lcd_send_cmd(0x80 | 0x16);
		lcd_send_string("Config_wifi ...");
	}

}
 8002334:	e014      	b.n	8002360 <LCD_Menu_2_4_+0x6c>
	else if(isWifi == 1)
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d111      	bne.n	8002360 <LCD_Menu_2_4_+0x6c>
		lcd_send_cmd(0x80 | 0x02);
 800233c:	2082      	movs	r0, #130	; 0x82
 800233e:	f7ff fb77 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("login MyHydroponic");
 8002342:	4809      	ldr	r0, [pc, #36]	; (8002368 <LCD_Menu_2_4_+0x74>)
 8002344:	f7ff fc28 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x42);
 8002348:	20c2      	movs	r0, #194	; 0xc2
 800234a:	f7ff fb71 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("goto 192.168.4.1");
 800234e:	4807      	ldr	r0, [pc, #28]	; (800236c <LCD_Menu_2_4_+0x78>)
 8002350:	f7ff fc22 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x16);
 8002354:	2096      	movs	r0, #150	; 0x96
 8002356:	f7ff fb6b 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Config_wifi ...");
 800235a:	4807      	ldr	r0, [pc, #28]	; (8002378 <LCD_Menu_2_4_+0x84>)
 800235c:	f7ff fc1c 	bl	8001b98 <lcd_send_string>
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	08012be8 	.word	0x08012be8
 800236c:	08012bfc 	.word	0x08012bfc
 8002370:	08012c10 	.word	0x08012c10
 8002374:	08012c18 	.word	0x08012c18
 8002378:	08012c1c 	.word	0x08012c1c

0800237c <LCD_Menu_1>:
void LCD_Menu_1()
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x02);
 8002380:	2082      	movs	r0, #130	; 0x82
 8002382:	f7ff fb55 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Set point");
 8002386:	480b      	ldr	r0, [pc, #44]	; (80023b4 <LCD_Menu_1+0x38>)
 8002388:	f7ff fc06 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x42);
 800238c:	20c2      	movs	r0, #194	; 0xc2
 800238e:	f7ff fb4f 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Testing");
 8002392:	4809      	ldr	r0, [pc, #36]	; (80023b8 <LCD_Menu_1+0x3c>)
 8002394:	f7ff fc00 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x16);
 8002398:	2096      	movs	r0, #150	; 0x96
 800239a:	f7ff fb49 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Calibration sensor");
 800239e:	4807      	ldr	r0, [pc, #28]	; (80023bc <LCD_Menu_1+0x40>)
 80023a0:	f7ff fbfa 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x56);
 80023a4:	20d6      	movs	r0, #214	; 0xd6
 80023a6:	f7ff fb43 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Wifi Config");
 80023aa:	4805      	ldr	r0, [pc, #20]	; (80023c0 <LCD_Menu_1+0x44>)
 80023ac:	f7ff fbf4 	bl	8001b98 <lcd_send_string>
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	08012c2c 	.word	0x08012c2c
 80023b8:	08012c38 	.word	0x08012c38
 80023bc:	08012c40 	.word	0x08012c40
 80023c0:	08012c54 	.word	0x08012c54

080023c4 <LCD_Normal_Mode>:
void LCD_Normal_Mode()
{
 80023c4:	b5b0      	push	{r4, r5, r7, lr}
 80023c6:	b09e      	sub	sp, #120	; 0x78
 80023c8:	af04      	add	r7, sp, #16
	char String[100];
	sprintf(String,"PH  :%.2f / %.2f",PH,PH_SetPoint);
 80023ca:	4b46      	ldr	r3, [pc, #280]	; (80024e4 <LCD_Normal_Mode+0x120>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe f8ca 	bl	8000568 <__aeabi_f2d>
 80023d4:	4604      	mov	r4, r0
 80023d6:	460d      	mov	r5, r1
 80023d8:	4b43      	ldr	r3, [pc, #268]	; (80024e8 <LCD_Normal_Mode+0x124>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f8c3 	bl	8000568 <__aeabi_f2d>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	1d38      	adds	r0, r7, #4
 80023e8:	e9cd 2300 	strd	r2, r3, [sp]
 80023ec:	4622      	mov	r2, r4
 80023ee:	462b      	mov	r3, r5
 80023f0:	493e      	ldr	r1, [pc, #248]	; (80024ec <LCD_Normal_Mode+0x128>)
 80023f2:	f00c fd0d 	bl	800ee10 <siprintf>
	lcd_send_cmd(0x80 | 0x01); //PH
 80023f6:	2081      	movs	r0, #129	; 0x81
 80023f8:	f7ff fb1a 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string(String) ;
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fbca 	bl	8001b98 <lcd_send_string>
	memset(String,0,strlen(String));
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	4618      	mov	r0, r3
 8002408:	f7fd feec 	bl	80001e4 <strlen>
 800240c:	4602      	mov	r2, r0
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f00b fe74 	bl	800e100 <memset>

	sprintf(String,"TDS :%.0f / %.0fppm",TDS,TDS_SetPoint);
 8002418:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <LCD_Normal_Mode+0x12c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f8a3 	bl	8000568 <__aeabi_f2d>
 8002422:	4604      	mov	r4, r0
 8002424:	460d      	mov	r5, r1
 8002426:	4b33      	ldr	r3, [pc, #204]	; (80024f4 <LCD_Normal_Mode+0x130>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe f89c 	bl	8000568 <__aeabi_f2d>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	1d38      	adds	r0, r7, #4
 8002436:	e9cd 2300 	strd	r2, r3, [sp]
 800243a:	4622      	mov	r2, r4
 800243c:	462b      	mov	r3, r5
 800243e:	492e      	ldr	r1, [pc, #184]	; (80024f8 <LCD_Normal_Mode+0x134>)
 8002440:	f00c fce6 	bl	800ee10 <siprintf>
	lcd_send_cmd(0x80 | 0x41); //PH
 8002444:	20c1      	movs	r0, #193	; 0xc1
 8002446:	f7ff faf3 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string(String);
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fba3 	bl	8001b98 <lcd_send_string>
	memset(String,0,strlen(String));
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	4618      	mov	r0, r3
 8002456:	f7fd fec5 	bl	80001e4 <strlen>
 800245a:	4602      	mov	r2, r0
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2100      	movs	r1, #0
 8002460:	4618      	mov	r0, r3
 8002462:	f00b fe4d 	bl	800e100 <memset>

	sprintf(String,"TEMP:%.2f*C",Temperature);
 8002466:	4b25      	ldr	r3, [pc, #148]	; (80024fc <LCD_Normal_Mode+0x138>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe f87c 	bl	8000568 <__aeabi_f2d>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	1d38      	adds	r0, r7, #4
 8002476:	4922      	ldr	r1, [pc, #136]	; (8002500 <LCD_Normal_Mode+0x13c>)
 8002478:	f00c fcca 	bl	800ee10 <siprintf>
	lcd_send_cmd(0x80 | 0x15); //PH
 800247c:	2095      	movs	r0, #149	; 0x95
 800247e:	f7ff fad7 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string(String);
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fb87 	bl	8001b98 <lcd_send_string>
	memset(String,0,strlen(String));
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	4618      	mov	r0, r3
 800248e:	f7fd fea9 	bl	80001e4 <strlen>
 8002492:	4602      	mov	r2, r0
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f00b fe31 	bl	800e100 <memset>
	sprintf(String,"%d/%d/%d- %d:%d ",sDate.Date,sDate.Month ,sDate.Year,sTime.Hours,sTime.Minutes);
 800249e:	4b19      	ldr	r3, [pc, #100]	; (8002504 <LCD_Normal_Mode+0x140>)
 80024a0:	789b      	ldrb	r3, [r3, #2]
 80024a2:	461c      	mov	r4, r3
 80024a4:	4b17      	ldr	r3, [pc, #92]	; (8002504 <LCD_Normal_Mode+0x140>)
 80024a6:	785b      	ldrb	r3, [r3, #1]
 80024a8:	461d      	mov	r5, r3
 80024aa:	4b16      	ldr	r3, [pc, #88]	; (8002504 <LCD_Normal_Mode+0x140>)
 80024ac:	78db      	ldrb	r3, [r3, #3]
 80024ae:	461a      	mov	r2, r3
 80024b0:	4b15      	ldr	r3, [pc, #84]	; (8002508 <LCD_Normal_Mode+0x144>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	4b14      	ldr	r3, [pc, #80]	; (8002508 <LCD_Normal_Mode+0x144>)
 80024b8:	785b      	ldrb	r3, [r3, #1]
 80024ba:	1d38      	adds	r0, r7, #4
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	9101      	str	r1, [sp, #4]
 80024c0:	9200      	str	r2, [sp, #0]
 80024c2:	462b      	mov	r3, r5
 80024c4:	4622      	mov	r2, r4
 80024c6:	4911      	ldr	r1, [pc, #68]	; (800250c <LCD_Normal_Mode+0x148>)
 80024c8:	f00c fca2 	bl	800ee10 <siprintf>
	lcd_send_cmd(0x80 | 0x56); //PH
 80024cc:	20d6      	movs	r0, #214	; 0xd6
 80024ce:	f7ff faaf 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string(String);
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fb5f 	bl	8001b98 <lcd_send_string>
}
 80024da:	bf00      	nop
 80024dc:	3768      	adds	r7, #104	; 0x68
 80024de:	46bd      	mov	sp, r7
 80024e0:	bdb0      	pop	{r4, r5, r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000544 	.word	0x20000544
 80024e8:	20000558 	.word	0x20000558
 80024ec:	08012c60 	.word	0x08012c60
 80024f0:	20000540 	.word	0x20000540
 80024f4:	2000054c 	.word	0x2000054c
 80024f8:	08012c74 	.word	0x08012c74
 80024fc:	20000548 	.word	0x20000548
 8002500:	08012c88 	.word	0x08012c88
 8002504:	20001190 	.word	0x20001190
 8002508:	2000117c 	.word	0x2000117c
 800250c:	08012c94 	.word	0x08012c94

08002510 <LCD_Display>:
void LCD_Display()
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
	if(from_web_flag == 1)
 8002516:	4b97      	ldr	r3, [pc, #604]	; (8002774 <LCD_Display+0x264>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d105      	bne.n	800252a <LCD_Display+0x1a>
	{

		Save_SetPoint(flash_setpoint);
 800251e:	2000      	movs	r0, #0
 8002520:	f000 fdd2 	bl	80030c8 <Save_SetPoint>
		from_web_flag = 0;
 8002524:	4b93      	ldr	r3, [pc, #588]	; (8002774 <LCD_Display+0x264>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
	}
	float tamp  = 0;
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	607b      	str	r3, [r7, #4]
	float tamp2 = 0;
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	603b      	str	r3, [r7, #0]
	{
	Push_Slect();
 8002536:	f7ff fc29 	bl	8001d8c <Push_Slect>
	if(Rpush_number == 0)
 800253a:	4b8f      	ldr	r3, [pc, #572]	; (8002778 <LCD_Display+0x268>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d103      	bne.n	800254a <LCD_Display+0x3a>
	{
		Page = 0;
 8002542:	4b8e      	ldr	r3, [pc, #568]	; (800277c <LCD_Display+0x26c>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e185      	b.n	8002856 <LCD_Display+0x346>
	}
	else if(Rpush_number == 1)
 800254a:	4b8b      	ldr	r3, [pc, #556]	; (8002778 <LCD_Display+0x268>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d103      	bne.n	800255a <LCD_Display+0x4a>
	{
		Page = 1;
 8002552:	4b8a      	ldr	r3, [pc, #552]	; (800277c <LCD_Display+0x26c>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e17d      	b.n	8002856 <LCD_Display+0x346>
	}
	else if(Rpush_number == 2)
 800255a:	4b87      	ldr	r3, [pc, #540]	; (8002778 <LCD_Display+0x268>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d144      	bne.n	80025ec <LCD_Display+0xdc>
	{
		if(button_flag == 0)
 8002562:	4b87      	ldr	r3, [pc, #540]	; (8002780 <LCD_Display+0x270>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 8175 	bne.w	8002856 <LCD_Display+0x346>
		{
			switch(pointer_position)
 800256c:	4b85      	ldr	r3, [pc, #532]	; (8002784 <LCD_Display+0x274>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b06      	cmp	r3, #6
 8002572:	d82d      	bhi.n	80025d0 <LCD_Display+0xc0>
 8002574:	a201      	add	r2, pc, #4	; (adr r2, 800257c <LCD_Display+0x6c>)
 8002576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257a:	bf00      	nop
 800257c:	08002599 	.word	0x08002599
 8002580:	080025d1 	.word	0x080025d1
 8002584:	080025a7 	.word	0x080025a7
 8002588:	080025d1 	.word	0x080025d1
 800258c:	080025b5 	.word	0x080025b5
 8002590:	080025d1 	.word	0x080025d1
 8002594:	080025c3 	.word	0x080025c3
		  {
			case 0:
				option_page_1 = Page1_SetPoint;
 8002598:	4b7b      	ldr	r3, [pc, #492]	; (8002788 <LCD_Display+0x278>)
 800259a:	2202      	movs	r2, #2
 800259c:	701a      	strb	r2, [r3, #0]
				Page = 2;
 800259e:	4b77      	ldr	r3, [pc, #476]	; (800277c <LCD_Display+0x26c>)
 80025a0:	2202      	movs	r2, #2
 80025a2:	601a      	str	r2, [r3, #0]
				break;
 80025a4:	e01e      	b.n	80025e4 <LCD_Display+0xd4>
			case 2:
				option_page_1 = Page1_Testing;
 80025a6:	4b78      	ldr	r3, [pc, #480]	; (8002788 <LCD_Display+0x278>)
 80025a8:	2203      	movs	r2, #3
 80025aa:	701a      	strb	r2, [r3, #0]
				Page = 2;
 80025ac:	4b73      	ldr	r3, [pc, #460]	; (800277c <LCD_Display+0x26c>)
 80025ae:	2202      	movs	r2, #2
 80025b0:	601a      	str	r2, [r3, #0]
				break;
 80025b2:	e017      	b.n	80025e4 <LCD_Display+0xd4>
			case 4:
				option_page_1 = Page1_Calbration_sensor;
 80025b4:	4b74      	ldr	r3, [pc, #464]	; (8002788 <LCD_Display+0x278>)
 80025b6:	2204      	movs	r2, #4
 80025b8:	701a      	strb	r2, [r3, #0]
				Page = 2;
 80025ba:	4b70      	ldr	r3, [pc, #448]	; (800277c <LCD_Display+0x26c>)
 80025bc:	2202      	movs	r2, #2
 80025be:	601a      	str	r2, [r3, #0]
				break;
 80025c0:	e010      	b.n	80025e4 <LCD_Display+0xd4>
			case 6:
				option_page_1 = Page1_WifiConfig;
 80025c2:	4b71      	ldr	r3, [pc, #452]	; (8002788 <LCD_Display+0x278>)
 80025c4:	2205      	movs	r2, #5
 80025c6:	701a      	strb	r2, [r3, #0]
				Page = 2;
 80025c8:	4b6c      	ldr	r3, [pc, #432]	; (800277c <LCD_Display+0x26c>)
 80025ca:	2202      	movs	r2, #2
 80025cc:	601a      	str	r2, [r3, #0]
				break;
 80025ce:	e009      	b.n	80025e4 <LCD_Display+0xd4>
			default:
				option_page_1 = Page1_Back;
 80025d0:	4b6d      	ldr	r3, [pc, #436]	; (8002788 <LCD_Display+0x278>)
 80025d2:	2206      	movs	r2, #6
 80025d4:	701a      	strb	r2, [r3, #0]
				Page = 0;
 80025d6:	4b69      	ldr	r3, [pc, #420]	; (800277c <LCD_Display+0x26c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
				Rpush_number = 0;
 80025dc:	4b66      	ldr	r3, [pc, #408]	; (8002778 <LCD_Display+0x268>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
				break;
 80025e2:	bf00      	nop
			}
			button_flag =1;
 80025e4:	4b66      	ldr	r3, [pc, #408]	; (8002780 <LCD_Display+0x270>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e134      	b.n	8002856 <LCD_Display+0x346>
		}
	}
	else if(Rpush_number == 3)
 80025ec:	4b62      	ldr	r3, [pc, #392]	; (8002778 <LCD_Display+0x268>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d17c      	bne.n	80026ee <LCD_Display+0x1de>
	{
			// OPTION SETPOINT AT PAGE 1
			if(option_page_1 == Page1_SetPoint)
 80025f4:	4b64      	ldr	r3, [pc, #400]	; (8002788 <LCD_Display+0x278>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d123      	bne.n	8002644 <LCD_Display+0x134>
			{
				if(pointer_position == 0)
 80025fc:	4b61      	ldr	r3, [pc, #388]	; (8002784 <LCD_Display+0x274>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d103      	bne.n	800260c <LCD_Display+0xfc>
				{
					option_page_2 = Page2_ph;
 8002604:	4b61      	ldr	r3, [pc, #388]	; (800278c <LCD_Display+0x27c>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e124      	b.n	8002856 <LCD_Display+0x346>
				}
				else if(pointer_position == 2)
 800260c:	4b5d      	ldr	r3, [pc, #372]	; (8002784 <LCD_Display+0x274>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d103      	bne.n	800261c <LCD_Display+0x10c>
				{
					option_page_2 = Page2_ph_thr;
 8002614:	4b5d      	ldr	r3, [pc, #372]	; (800278c <LCD_Display+0x27c>)
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e11c      	b.n	8002856 <LCD_Display+0x346>
				}
				else if(pointer_position == 4)
 800261c:	4b59      	ldr	r3, [pc, #356]	; (8002784 <LCD_Display+0x274>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d103      	bne.n	800262c <LCD_Display+0x11c>
				{
					option_page_2 = Page2_tds;
 8002624:	4b59      	ldr	r3, [pc, #356]	; (800278c <LCD_Display+0x27c>)
 8002626:	2202      	movs	r2, #2
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e114      	b.n	8002856 <LCD_Display+0x346>
				}
				else if(pointer_position == 6)
 800262c:	4b55      	ldr	r3, [pc, #340]	; (8002784 <LCD_Display+0x274>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b06      	cmp	r3, #6
 8002632:	d103      	bne.n	800263c <LCD_Display+0x12c>
				{
					option_page_2 = Page2_tds_thr;
 8002634:	4b55      	ldr	r3, [pc, #340]	; (800278c <LCD_Display+0x27c>)
 8002636:	2203      	movs	r2, #3
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e10c      	b.n	8002856 <LCD_Display+0x346>
				}
				else
				{
					option_page_2 = Page2_Back;
 800263c:	4b53      	ldr	r3, [pc, #332]	; (800278c <LCD_Display+0x27c>)
 800263e:	220c      	movs	r2, #12
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e108      	b.n	8002856 <LCD_Display+0x346>
				}

			}
			//// OPTION TESTING AT PAGE 1
			else if (option_page_1 ==Page1_Testing)
 8002644:	4b50      	ldr	r3, [pc, #320]	; (8002788 <LCD_Display+0x278>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d123      	bne.n	8002694 <LCD_Display+0x184>
			{
				if(pointer_position == 0)
 800264c:	4b4d      	ldr	r3, [pc, #308]	; (8002784 <LCD_Display+0x274>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <LCD_Display+0x14c>
				{
					option_page_2 = Page2_pump_1;
 8002654:	4b4d      	ldr	r3, [pc, #308]	; (800278c <LCD_Display+0x27c>)
 8002656:	2204      	movs	r2, #4
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e0fc      	b.n	8002856 <LCD_Display+0x346>
				}
				else if(pointer_position == 2)
 800265c:	4b49      	ldr	r3, [pc, #292]	; (8002784 <LCD_Display+0x274>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d103      	bne.n	800266c <LCD_Display+0x15c>
				{
					option_page_2 = Page2_pump_2;
 8002664:	4b49      	ldr	r3, [pc, #292]	; (800278c <LCD_Display+0x27c>)
 8002666:	2205      	movs	r2, #5
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e0f4      	b.n	8002856 <LCD_Display+0x346>
				}
				else if(pointer_position == 4)
 800266c:	4b45      	ldr	r3, [pc, #276]	; (8002784 <LCD_Display+0x274>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d103      	bne.n	800267c <LCD_Display+0x16c>
				{
					option_page_2 = Page2_pump_3;
 8002674:	4b45      	ldr	r3, [pc, #276]	; (800278c <LCD_Display+0x27c>)
 8002676:	2206      	movs	r2, #6
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	e0ec      	b.n	8002856 <LCD_Display+0x346>
				}
				else if(pointer_position == 6)
 800267c:	4b41      	ldr	r3, [pc, #260]	; (8002784 <LCD_Display+0x274>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b06      	cmp	r3, #6
 8002682:	d103      	bne.n	800268c <LCD_Display+0x17c>
				{
					option_page_2 = Page2_pump_4;
 8002684:	4b41      	ldr	r3, [pc, #260]	; (800278c <LCD_Display+0x27c>)
 8002686:	2207      	movs	r2, #7
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	e0e4      	b.n	8002856 <LCD_Display+0x346>
				}
				else
				{
					option_page_2 = Page2_Back;
 800268c:	4b3f      	ldr	r3, [pc, #252]	; (800278c <LCD_Display+0x27c>)
 800268e:	220c      	movs	r2, #12
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e0e0      	b.n	8002856 <LCD_Display+0x346>
				}

			}
			///// OPTION CALIB AT PAGE 1
			else if(option_page_1 == Page1_Calbration_sensor)
 8002694:	4b3c      	ldr	r3, [pc, #240]	; (8002788 <LCD_Display+0x278>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b04      	cmp	r3, #4
 800269a:	d117      	bne.n	80026cc <LCD_Display+0x1bc>
			{

				if(pointer_position == 0)
 800269c:	4b39      	ldr	r3, [pc, #228]	; (8002784 <LCD_Display+0x274>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <LCD_Display+0x1a0>
				{
					option_page_2 = Page2_calib_ph;
 80026a4:	4b39      	ldr	r3, [pc, #228]	; (800278c <LCD_Display+0x27c>)
 80026a6:	2208      	movs	r2, #8
 80026a8:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 80026aa:	f7ff fa21 	bl	8001af0 <lcd_clear>
 80026ae:	e0d2      	b.n	8002856 <LCD_Display+0x346>
				}
				else if(pointer_position == 4)
 80026b0:	4b34      	ldr	r3, [pc, #208]	; (8002784 <LCD_Display+0x274>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d105      	bne.n	80026c4 <LCD_Display+0x1b4>
				{
					option_page_2 = Page2_calib_tds;
 80026b8:	4b34      	ldr	r3, [pc, #208]	; (800278c <LCD_Display+0x27c>)
 80026ba:	2209      	movs	r2, #9
 80026bc:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 80026be:	f7ff fa17 	bl	8001af0 <lcd_clear>
 80026c2:	e0c8      	b.n	8002856 <LCD_Display+0x346>
				}
				else
				{
					option_page_2 = Page2_Back;
 80026c4:	4b31      	ldr	r3, [pc, #196]	; (800278c <LCD_Display+0x27c>)
 80026c6:	220c      	movs	r2, #12
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	e0c4      	b.n	8002856 <LCD_Display+0x346>
				}
			}
			///OPTION WIFICONFIG PAGE 1
			else if(option_page_1 == Page1_WifiConfig)
 80026cc:	4b2e      	ldr	r3, [pc, #184]	; (8002788 <LCD_Display+0x278>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	f040 80c0 	bne.w	8002856 <LCD_Display+0x346>
			{
				if(pointer_position == 4)
 80026d6:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <LCD_Display+0x274>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d103      	bne.n	80026e6 <LCD_Display+0x1d6>
				{
					option_page_2 = Page2_start;
 80026de:	4b2b      	ldr	r3, [pc, #172]	; (800278c <LCD_Display+0x27c>)
 80026e0:	220a      	movs	r2, #10
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e0b7      	b.n	8002856 <LCD_Display+0x346>
				}
				else
				{
					option_page_2 = Page2_Back;
 80026e6:	4b29      	ldr	r3, [pc, #164]	; (800278c <LCD_Display+0x27c>)
 80026e8:	220c      	movs	r2, #12
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	e0b3      	b.n	8002856 <LCD_Display+0x346>
				}
			}
		}
		else if(Rpush_number == 4)  // Only for Set up value
 80026ee:	4b22      	ldr	r3, [pc, #136]	; (8002778 <LCD_Display+0x268>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	f040 80af 	bne.w	8002856 <LCD_Display+0x346>
		{
			if(option_page_1 == Page1_SetPoint)
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <LCD_Display+0x278>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d116      	bne.n	800272e <LCD_Display+0x21e>
			{
				option_page_2 = Page2_Nothing;
 8002700:	4b22      	ldr	r3, [pc, #136]	; (800278c <LCD_Display+0x27c>)
 8002702:	220d      	movs	r2, #13
 8002704:	701a      	strb	r2, [r3, #0]
				Rpush_number = 2;
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <LCD_Display+0x268>)
 8002708:	2202      	movs	r2, #2
 800270a:	601a      	str	r2, [r3, #0]
				button_flag = 1;
 800270c:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <LCD_Display+0x270>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]
				pointer_position = pointer_position + 1;
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <LCD_Display+0x274>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	4a1a      	ldr	r2, [pc, #104]	; (8002784 <LCD_Display+0x274>)
 800271a:	6013      	str	r3, [r2, #0]
				Save_SetPoint(flash_setpoint);
 800271c:	2000      	movs	r0, #0
 800271e:	f000 fcd3 	bl	80030c8 <Save_SetPoint>
				HAL_TIM_Base_Start_IT(&htim4);
 8002722:	481b      	ldr	r0, [pc, #108]	; (8002790 <LCD_Display+0x280>)
 8002724:	f006 fbee 	bl	8008f04 <HAL_TIM_Base_Start_IT>
				lcd_clear();
 8002728:	f7ff f9e2 	bl	8001af0 <lcd_clear>
 800272c:	e093      	b.n	8002856 <LCD_Display+0x346>
			}
			else if(option_page_1 == Page1_Calbration_sensor)
 800272e:	4b16      	ldr	r3, [pc, #88]	; (8002788 <LCD_Display+0x278>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b04      	cmp	r3, #4
 8002734:	d14c      	bne.n	80027d0 <LCD_Display+0x2c0>
			{
				if(option_page_2 == Page2_calib_ph)
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <LCD_Display+0x27c>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b08      	cmp	r3, #8
 800273c:	d12a      	bne.n	8002794 <LCD_Display+0x284>
				{
					option_page_2 = Page2_Nothing;
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <LCD_Display+0x27c>)
 8002740:	220d      	movs	r2, #13
 8002742:	701a      	strb	r2, [r3, #0]
					Rpush_number = 2;
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <LCD_Display+0x268>)
 8002746:	2202      	movs	r2, #2
 8002748:	601a      	str	r2, [r3, #0]
					button_flag = 1;
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <LCD_Display+0x270>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]
					pointer_position = pointer_position + 1;
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <LCD_Display+0x274>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3301      	adds	r3, #1
 8002756:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <LCD_Display+0x274>)
 8002758:	6013      	str	r3, [r2, #0]
					Save_SetPoint(flash_calibration_ph);
 800275a:	2001      	movs	r0, #1
 800275c:	f000 fcb4 	bl	80030c8 <Save_SetPoint>
					Read_SetPoint(flash_calibration_ph);
 8002760:	2001      	movs	r0, #1
 8002762:	f000 fd1f 	bl	80031a4 <Read_SetPoint>
					HAL_TIM_Base_Start_IT(&htim4);
 8002766:	480a      	ldr	r0, [pc, #40]	; (8002790 <LCD_Display+0x280>)
 8002768:	f006 fbcc 	bl	8008f04 <HAL_TIM_Base_Start_IT>
					lcd_clear();
 800276c:	f7ff f9c0 	bl	8001af0 <lcd_clear>
 8002770:	e071      	b.n	8002856 <LCD_Display+0x346>
 8002772:	bf00      	nop
 8002774:	2000055e 	.word	0x2000055e
 8002778:	20000220 	.word	0x20000220
 800277c:	20000228 	.word	0x20000228
 8002780:	20000224 	.word	0x20000224
 8002784:	2000021c 	.word	0x2000021c
 8002788:	20000001 	.word	0x20000001
 800278c:	20000002 	.word	0x20000002
 8002790:	20000408 	.word	0x20000408
				}
				else if(option_page_2 ==Page2_calib_tds)
 8002794:	4baf      	ldr	r3, [pc, #700]	; (8002a54 <LCD_Display+0x544>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b09      	cmp	r3, #9
 800279a:	d15c      	bne.n	8002856 <LCD_Display+0x346>
				{
					option_page_2 = Page2_Nothing;
 800279c:	4bad      	ldr	r3, [pc, #692]	; (8002a54 <LCD_Display+0x544>)
 800279e:	220d      	movs	r2, #13
 80027a0:	701a      	strb	r2, [r3, #0]
					Rpush_number = 2;
 80027a2:	4bad      	ldr	r3, [pc, #692]	; (8002a58 <LCD_Display+0x548>)
 80027a4:	2202      	movs	r2, #2
 80027a6:	601a      	str	r2, [r3, #0]
					button_flag = 1;
 80027a8:	4bac      	ldr	r3, [pc, #688]	; (8002a5c <LCD_Display+0x54c>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
					pointer_position = pointer_position + 1;
 80027ae:	4bac      	ldr	r3, [pc, #688]	; (8002a60 <LCD_Display+0x550>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	3301      	adds	r3, #1
 80027b4:	4aaa      	ldr	r2, [pc, #680]	; (8002a60 <LCD_Display+0x550>)
 80027b6:	6013      	str	r3, [r2, #0]
					Save_SetPoint(flash_calibration_tds);
 80027b8:	2002      	movs	r0, #2
 80027ba:	f000 fc85 	bl	80030c8 <Save_SetPoint>
					Read_SetPoint(flash_calibration_tds);
 80027be:	2002      	movs	r0, #2
 80027c0:	f000 fcf0 	bl	80031a4 <Read_SetPoint>
					HAL_TIM_Base_Start_IT(&htim4);
 80027c4:	48a7      	ldr	r0, [pc, #668]	; (8002a64 <LCD_Display+0x554>)
 80027c6:	f006 fb9d 	bl	8008f04 <HAL_TIM_Base_Start_IT>
					lcd_clear();
 80027ca:	f7ff f991 	bl	8001af0 <lcd_clear>
 80027ce:	e042      	b.n	8002856 <LCD_Display+0x346>
				}

			}
			else if(option_page_2 ==Page2_start)
 80027d0:	4ba0      	ldr	r3, [pc, #640]	; (8002a54 <LCD_Display+0x544>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b0a      	cmp	r3, #10
 80027d6:	d113      	bne.n	8002800 <LCD_Display+0x2f0>
			{
				button_flag = 1;
 80027d8:	4ba0      	ldr	r3, [pc, #640]	; (8002a5c <LCD_Display+0x54c>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
				option_page_2 = Page2_Nothing;
 80027de:	4b9d      	ldr	r3, [pc, #628]	; (8002a54 <LCD_Display+0x544>)
 80027e0:	220d      	movs	r2, #13
 80027e2:	701a      	strb	r2, [r3, #0]
				Rpush_number = 2;
 80027e4:	4b9c      	ldr	r3, [pc, #624]	; (8002a58 <LCD_Display+0x548>)
 80027e6:	2202      	movs	r2, #2
 80027e8:	601a      	str	r2, [r3, #0]
				pointer_position = pointer_position + 1;
 80027ea:	4b9d      	ldr	r3, [pc, #628]	; (8002a60 <LCD_Display+0x550>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3301      	adds	r3, #1
 80027f0:	4a9b      	ldr	r2, [pc, #620]	; (8002a60 <LCD_Display+0x550>)
 80027f2:	6013      	str	r3, [r2, #0]
				HAL_TIM_Base_Start_IT(&htim4);
 80027f4:	489b      	ldr	r0, [pc, #620]	; (8002a64 <LCD_Display+0x554>)
 80027f6:	f006 fb85 	bl	8008f04 <HAL_TIM_Base_Start_IT>
				lcd_clear();
 80027fa:	f7ff f979 	bl	8001af0 <lcd_clear>
 80027fe:	e02a      	b.n	8002856 <LCD_Display+0x346>
			}
			else if(option_page_2 == Page2_pump_1 || Page2_pump_2 || Page2_pump_3 || Page2_pump_4)
			{
				HAL_GPIO_WritePin(ACID_GPIO_Port, ACID_Pin, GPIO_PIN_SET);
 8002800:	2201      	movs	r2, #1
 8002802:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002806:	4898      	ldr	r0, [pc, #608]	; (8002a68 <LCD_Display+0x558>)
 8002808:	f004 f93e 	bl	8006a88 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BASE_GPIO_Port, BASE_Pin, GPIO_PIN_SET);
 800280c:	2201      	movs	r2, #1
 800280e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002812:	4895      	ldr	r0, [pc, #596]	; (8002a68 <LCD_Display+0x558>)
 8002814:	f004 f938 	bl	8006a88 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(NutriA_GPIO_Port, NutriA_Pin, GPIO_PIN_SET);
 8002818:	2201      	movs	r2, #1
 800281a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800281e:	4892      	ldr	r0, [pc, #584]	; (8002a68 <LCD_Display+0x558>)
 8002820:	f004 f932 	bl	8006a88 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(NutriB_GPIO_Port, NutriB_Pin, GPIO_PIN_SET);
 8002824:	2201      	movs	r2, #1
 8002826:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800282a:	488f      	ldr	r0, [pc, #572]	; (8002a68 <LCD_Display+0x558>)
 800282c:	f004 f92c 	bl	8006a88 <HAL_GPIO_WritePin>
				button_flag = 1;
 8002830:	4b8a      	ldr	r3, [pc, #552]	; (8002a5c <LCD_Display+0x54c>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]
				option_page_2 = Page2_Nothing;
 8002836:	4b87      	ldr	r3, [pc, #540]	; (8002a54 <LCD_Display+0x544>)
 8002838:	220d      	movs	r2, #13
 800283a:	701a      	strb	r2, [r3, #0]
				Rpush_number = 2;
 800283c:	4b86      	ldr	r3, [pc, #536]	; (8002a58 <LCD_Display+0x548>)
 800283e:	2202      	movs	r2, #2
 8002840:	601a      	str	r2, [r3, #0]
				pointer_position = pointer_position + 1;
 8002842:	4b87      	ldr	r3, [pc, #540]	; (8002a60 <LCD_Display+0x550>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3301      	adds	r3, #1
 8002848:	4a85      	ldr	r2, [pc, #532]	; (8002a60 <LCD_Display+0x550>)
 800284a:	6013      	str	r3, [r2, #0]
				HAL_TIM_Base_Start_IT(&htim4);
 800284c:	4885      	ldr	r0, [pc, #532]	; (8002a64 <LCD_Display+0x554>)
 800284e:	f006 fb59 	bl	8008f04 <HAL_TIM_Base_Start_IT>
				lcd_clear();
 8002852:	f7ff f94d 	bl	8001af0 <lcd_clear>
	}




	switch(Page)
 8002856:	4b85      	ldr	r3, [pc, #532]	; (8002a6c <LCD_Display+0x55c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d017      	beq.n	800288e <LCD_Display+0x37e>
 800285e:	2b02      	cmp	r3, #2
 8002860:	f200 8282 	bhi.w	8002d68 <LCD_Display+0x858>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <LCD_Display+0x35e>
 8002868:	2b01      	cmp	r3, #1
 800286a:	d003      	beq.n	8002874 <LCD_Display+0x364>
				}
			}
			break;

		default:
			break;
 800286c:	e27c      	b.n	8002d68 <LCD_Display+0x858>
			LCD_Normal_Mode();
 800286e:	f7ff fda9 	bl	80023c4 <LCD_Normal_Mode>
			break;
 8002872:	e27c      	b.n	8002d6e <LCD_Display+0x85e>
			Pointer_Status(Rotary_volum());
 8002874:	f7ff fa50 	bl	8001d18 <Rotary_volum>
 8002878:	4603      	mov	r3, r0
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff faba 	bl	8001df4 <Pointer_Status>
			LCD_Menu_1(Rotary_volum());
 8002880:	f7ff fa4a 	bl	8001d18 <Rotary_volum>
 8002884:	4603      	mov	r3, r0
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fd78 	bl	800237c <LCD_Menu_1>
			break;
 800288c:	e26f      	b.n	8002d6e <LCD_Display+0x85e>
			Pointer_Status(Rotary_volum());
 800288e:	f7ff fa43 	bl	8001d18 <Rotary_volum>
 8002892:	4603      	mov	r3, r0
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff faad 	bl	8001df4 <Pointer_Status>
			if(option_page_1 == Page1_SetPoint)
 800289a:	4b75      	ldr	r3, [pc, #468]	; (8002a70 <LCD_Display+0x560>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	f040 813b 	bne.w	8002b1a <LCD_Display+0x60a>
				  Read_SetPoint(flash_setpoint);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f000 fc7d 	bl	80031a4 <Read_SetPoint>
				  LCD_Menu_2_1();
 80028aa:	f7ff fb49 	bl	8001f40 <LCD_Menu_2_1>
				  if(option_page_2 == Page2_ph)
 80028ae:	4b69      	ldr	r3, [pc, #420]	; (8002a54 <LCD_Display+0x544>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d137      	bne.n	8002926 <LCD_Display+0x416>
					  lcd_pointer_1 = PH_SetPoint;
 80028b6:	4b6f      	ldr	r3, [pc, #444]	; (8002a74 <LCD_Display+0x564>)
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028c0:	ee17 2a90 	vmov	r2, s15
 80028c4:	4b6c      	ldr	r3, [pc, #432]	; (8002a78 <LCD_Display+0x568>)
 80028c6:	601a      	str	r2, [r3, #0]
					  tamp = PH_SetPoint;
 80028c8:	4b6a      	ldr	r3, [pc, #424]	; (8002a74 <LCD_Display+0x564>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	607b      	str	r3, [r7, #4]
					  HAL_TIM_Base_Stop_IT(&htim4);
 80028ce:	4865      	ldr	r0, [pc, #404]	; (8002a64 <LCD_Display+0x554>)
 80028d0:	f006 fb88 	bl	8008fe4 <HAL_TIM_Base_Stop_IT>
						while(Rpush_number == 3) 		// Setting setpoint for PH
 80028d4:	e022      	b.n	800291c <LCD_Display+0x40c>
											LCD_Menu_2_1();
 80028d6:	f7ff fb33 	bl	8001f40 <LCD_Menu_2_1>
											Push_Slect();
 80028da:	f7ff fa57 	bl	8001d8c <Push_Slect>
											Pointer_2_Status(0);
 80028de:	2000      	movs	r0, #0
 80028e0:	f7ff fafc 	bl	8001edc <Pointer_2_Status>
											tamp2= (float)((Rotary_volum()- tamp)/10);
 80028e4:	f7ff fa18 	bl	8001d18 <Rotary_volum>
 80028e8:	ee07 0a90 	vmov	s15, r0
 80028ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80028f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028f8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80028fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002900:	edc7 7a00 	vstr	s15, [r7]
											PH_SetPoint = tamp2 + tamp;
 8002904:	ed97 7a00 	vldr	s14, [r7]
 8002908:	edd7 7a01 	vldr	s15, [r7, #4]
 800290c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002910:	4b58      	ldr	r3, [pc, #352]	; (8002a74 <LCD_Display+0x564>)
 8002912:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 8002916:	4859      	ldr	r0, [pc, #356]	; (8002a7c <LCD_Display+0x56c>)
 8002918:	f004 fd77 	bl	800740a <HAL_IWDG_Refresh>
						while(Rpush_number == 3) 		// Setting setpoint for PH
 800291c:	4b4e      	ldr	r3, [pc, #312]	; (8002a58 <LCD_Display+0x548>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d0d8      	beq.n	80028d6 <LCD_Display+0x3c6>
			break;
 8002924:	e222      	b.n	8002d6c <LCD_Display+0x85c>
				  else if(option_page_2== Page2_ph_thr) // Setting setpoint for PH_THR
 8002926:	4b4b      	ldr	r3, [pc, #300]	; (8002a54 <LCD_Display+0x544>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d137      	bne.n	800299e <LCD_Display+0x48e>
					  lcd_pointer_1 = PH_THR_SetPoint;
 800292e:	4b54      	ldr	r3, [pc, #336]	; (8002a80 <LCD_Display+0x570>)
 8002930:	edd3 7a00 	vldr	s15, [r3]
 8002934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002938:	ee17 2a90 	vmov	r2, s15
 800293c:	4b4e      	ldr	r3, [pc, #312]	; (8002a78 <LCD_Display+0x568>)
 800293e:	601a      	str	r2, [r3, #0]
				  	  tamp = PH_THR_SetPoint;
 8002940:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <LCD_Display+0x570>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	607b      	str	r3, [r7, #4]
					  HAL_TIM_Base_Stop_IT(&htim4);
 8002946:	4847      	ldr	r0, [pc, #284]	; (8002a64 <LCD_Display+0x554>)
 8002948:	f006 fb4c 	bl	8008fe4 <HAL_TIM_Base_Stop_IT>
						while(Rpush_number== 3)
 800294c:	e022      	b.n	8002994 <LCD_Display+0x484>
											LCD_Menu_2_1();
 800294e:	f7ff faf7 	bl	8001f40 <LCD_Menu_2_1>
											Push_Slect();
 8002952:	f7ff fa1b 	bl	8001d8c <Push_Slect>
											Pointer_2_Status(2);
 8002956:	2002      	movs	r0, #2
 8002958:	f7ff fac0 	bl	8001edc <Pointer_2_Status>
											tamp2 = (float)((Rotary_volum()- tamp)/10);
 800295c:	f7ff f9dc 	bl	8001d18 <Rotary_volum>
 8002960:	ee07 0a90 	vmov	s15, r0
 8002964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002968:	edd7 7a01 	vldr	s15, [r7, #4]
 800296c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002970:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002974:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002978:	edc7 7a00 	vstr	s15, [r7]
											PH_THR_SetPoint =  tamp2 + tamp;
 800297c:	ed97 7a00 	vldr	s14, [r7]
 8002980:	edd7 7a01 	vldr	s15, [r7, #4]
 8002984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002988:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <LCD_Display+0x570>)
 800298a:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 800298e:	483b      	ldr	r0, [pc, #236]	; (8002a7c <LCD_Display+0x56c>)
 8002990:	f004 fd3b 	bl	800740a <HAL_IWDG_Refresh>
						while(Rpush_number== 3)
 8002994:	4b30      	ldr	r3, [pc, #192]	; (8002a58 <LCD_Display+0x548>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d0d8      	beq.n	800294e <LCD_Display+0x43e>
			break;
 800299c:	e1e6      	b.n	8002d6c <LCD_Display+0x85c>
				  else if(option_page_2==Page2_tds)		// Setting setpoint for TDS
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <LCD_Display+0x544>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d142      	bne.n	8002a2c <LCD_Display+0x51c>
					  lcd_pointer_1 = TDS_SetPoint;
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <LCD_Display+0x574>)
 80029a8:	edd3 7a00 	vldr	s15, [r3]
 80029ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029b0:	ee17 2a90 	vmov	r2, s15
 80029b4:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <LCD_Display+0x568>)
 80029b6:	601a      	str	r2, [r3, #0]
					  tamp = TDS_SetPoint;
 80029b8:	4b32      	ldr	r3, [pc, #200]	; (8002a84 <LCD_Display+0x574>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	607b      	str	r3, [r7, #4]
					  HAL_TIM_Base_Stop_IT(&htim4);
 80029be:	4829      	ldr	r0, [pc, #164]	; (8002a64 <LCD_Display+0x554>)
 80029c0:	f006 fb10 	bl	8008fe4 <HAL_TIM_Base_Stop_IT>
						while(Rpush_number== 3)
 80029c4:	e02d      	b.n	8002a22 <LCD_Display+0x512>
											LCD_Menu_2_1();
 80029c6:	f7ff fabb 	bl	8001f40 <LCD_Menu_2_1>
											Push_Slect();
 80029ca:	f7ff f9df 	bl	8001d8c <Push_Slect>
											Pointer_2_Status(4);
 80029ce:	2004      	movs	r0, #4
 80029d0:	f7ff fa84 	bl	8001edc <Pointer_2_Status>
											tamp2 = ((Rotary_volum()- tamp)*10);
 80029d4:	f7ff f9a0 	bl	8001d18 <Rotary_volum>
 80029d8:	ee07 0a90 	vmov	s15, r0
 80029dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80029e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f0:	edc7 7a00 	vstr	s15, [r7]
											TDS_SetPoint =  (int)tamp2 + (int)tamp;
 80029f4:	edd7 7a00 	vldr	s15, [r7]
 80029f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029fc:	ee17 2a90 	vmov	r2, s15
 8002a00:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a08:	ee17 3a90 	vmov	r3, s15
 8002a0c:	4413      	add	r3, r2
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <LCD_Display+0x574>)
 8002a18:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 8002a1c:	4817      	ldr	r0, [pc, #92]	; (8002a7c <LCD_Display+0x56c>)
 8002a1e:	f004 fcf4 	bl	800740a <HAL_IWDG_Refresh>
						while(Rpush_number== 3)
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <LCD_Display+0x548>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d0cd      	beq.n	80029c6 <LCD_Display+0x4b6>
			break;
 8002a2a:	e19f      	b.n	8002d6c <LCD_Display+0x85c>
				  else if(option_page_2==Page2_tds_thr)	// Setting setpoint for TDS_thr
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <LCD_Display+0x544>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d15e      	bne.n	8002af2 <LCD_Display+0x5e2>
					  	HAL_TIM_Base_Stop_IT(&htim4);
 8002a34:	480b      	ldr	r0, [pc, #44]	; (8002a64 <LCD_Display+0x554>)
 8002a36:	f006 fad5 	bl	8008fe4 <HAL_TIM_Base_Stop_IT>
					  	tamp = TDS_THR_SetPoint;
 8002a3a:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <LCD_Display+0x578>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	607b      	str	r3, [r7, #4]
					    lcd_pointer_1 = TDS_THR_SetPoint;
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <LCD_Display+0x578>)
 8002a42:	edd3 7a00 	vldr	s15, [r3]
 8002a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a4a:	ee17 2a90 	vmov	r2, s15
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <LCD_Display+0x568>)
 8002a50:	601a      	str	r2, [r3, #0]
						while(Rpush_number == 3)
 8002a52:	e049      	b.n	8002ae8 <LCD_Display+0x5d8>
 8002a54:	20000002 	.word	0x20000002
 8002a58:	20000220 	.word	0x20000220
 8002a5c:	20000224 	.word	0x20000224
 8002a60:	2000021c 	.word	0x2000021c
 8002a64:	20000408 	.word	0x20000408
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	20000228 	.word	0x20000228
 8002a70:	20000001 	.word	0x20000001
 8002a74:	20000558 	.word	0x20000558
 8002a78:	2000022c 	.word	0x2000022c
 8002a7c:	2000032c 	.word	0x2000032c
 8002a80:	20000554 	.word	0x20000554
 8002a84:	2000054c 	.word	0x2000054c
 8002a88:	20000550 	.word	0x20000550
											LCD_Menu_2_1();
 8002a8c:	f7ff fa58 	bl	8001f40 <LCD_Menu_2_1>
											Push_Slect();
 8002a90:	f7ff f97c 	bl	8001d8c <Push_Slect>
											Pointer_2_Status(6);
 8002a94:	2006      	movs	r0, #6
 8002a96:	f7ff fa21 	bl	8001edc <Pointer_2_Status>
											tamp2 = ((Rotary_volum()- tamp)*10);
 8002a9a:	f7ff f93d 	bl	8001d18 <Rotary_volum>
 8002a9e:	ee07 0a90 	vmov	s15, r0
 8002aa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab6:	edc7 7a00 	vstr	s15, [r7]
											TDS_THR_SetPoint = (int)tamp2 + (int)tamp;
 8002aba:	edd7 7a00 	vldr	s15, [r7]
 8002abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ac2:	ee17 2a90 	vmov	r2, s15
 8002ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ace:	ee17 3a90 	vmov	r3, s15
 8002ad2:	4413      	add	r3, r2
 8002ad4:	ee07 3a90 	vmov	s15, r3
 8002ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002adc:	4ba6      	ldr	r3, [pc, #664]	; (8002d78 <LCD_Display+0x868>)
 8002ade:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 8002ae2:	48a6      	ldr	r0, [pc, #664]	; (8002d7c <LCD_Display+0x86c>)
 8002ae4:	f004 fc91 	bl	800740a <HAL_IWDG_Refresh>
						while(Rpush_number == 3)
 8002ae8:	4ba5      	ldr	r3, [pc, #660]	; (8002d80 <LCD_Display+0x870>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d0cd      	beq.n	8002a8c <LCD_Display+0x57c>
			break;
 8002af0:	e13c      	b.n	8002d6c <LCD_Display+0x85c>
				  else if(option_page_2 == Page2_Back)	//Back option
 8002af2:	4ba4      	ldr	r3, [pc, #656]	; (8002d84 <LCD_Display+0x874>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b0c      	cmp	r3, #12
 8002af8:	f040 8138 	bne.w	8002d6c <LCD_Display+0x85c>
					  Page = 1;
 8002afc:	4ba2      	ldr	r3, [pc, #648]	; (8002d88 <LCD_Display+0x878>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
					  Rpush_number = 1;
 8002b02:	4b9f      	ldr	r3, [pc, #636]	; (8002d80 <LCD_Display+0x870>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
					  button_flag = 0;
 8002b08:	4ba0      	ldr	r3, [pc, #640]	; (8002d8c <LCD_Display+0x87c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
					  option_page_2 = Page2_Nothing;
 8002b0e:	4b9d      	ldr	r3, [pc, #628]	; (8002d84 <LCD_Display+0x874>)
 8002b10:	220d      	movs	r2, #13
 8002b12:	701a      	strb	r2, [r3, #0]
					  lcd_clear();
 8002b14:	f7fe ffec 	bl	8001af0 <lcd_clear>
			break;
 8002b18:	e128      	b.n	8002d6c <LCD_Display+0x85c>
			else if(option_page_1 == Page1_Testing) // Display with option testing
 8002b1a:	4b9d      	ldr	r3, [pc, #628]	; (8002d90 <LCD_Display+0x880>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	f040 8083 	bne.w	8002c2a <LCD_Display+0x71a>
				 LCD_Menu_2_2(0);
 8002b24:	2000      	movs	r0, #0
 8002b26:	f7ff faad 	bl	8002084 <LCD_Menu_2_2>
				  if(option_page_2 == Page2_pump_1)
 8002b2a:	4b96      	ldr	r3, [pc, #600]	; (8002d84 <LCD_Display+0x874>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d116      	bne.n	8002b60 <LCD_Display+0x650>
					  HAL_TIM_Base_Stop_IT(&htim4);
 8002b32:	4898      	ldr	r0, [pc, #608]	; (8002d94 <LCD_Display+0x884>)
 8002b34:	f006 fa56 	bl	8008fe4 <HAL_TIM_Base_Stop_IT>
					  while(Rpush_number == 3)
 8002b38:	e00d      	b.n	8002b56 <LCD_Display+0x646>
						  	  HAL_GPIO_WritePin(ACID_GPIO_Port, ACID_Pin, GPIO_PIN_RESET);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b40:	4895      	ldr	r0, [pc, #596]	; (8002d98 <LCD_Display+0x888>)
 8002b42:	f003 ffa1 	bl	8006a88 <HAL_GPIO_WritePin>
						  	  LCD_Menu_2_2(1);
 8002b46:	2001      	movs	r0, #1
 8002b48:	f7ff fa9c 	bl	8002084 <LCD_Menu_2_2>
						  	  Push_Slect();
 8002b4c:	f7ff f91e 	bl	8001d8c <Push_Slect>
						  	  HAL_IWDG_Refresh(&hiwdg);
 8002b50:	488a      	ldr	r0, [pc, #552]	; (8002d7c <LCD_Display+0x86c>)
 8002b52:	f004 fc5a 	bl	800740a <HAL_IWDG_Refresh>
					  while(Rpush_number == 3)
 8002b56:	4b8a      	ldr	r3, [pc, #552]	; (8002d80 <LCD_Display+0x870>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d0ed      	beq.n	8002b3a <LCD_Display+0x62a>
			break;
 8002b5e:	e105      	b.n	8002d6c <LCD_Display+0x85c>
				  else if(option_page_2== Page2_pump_2)
 8002b60:	4b88      	ldr	r3, [pc, #544]	; (8002d84 <LCD_Display+0x874>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b05      	cmp	r3, #5
 8002b66:	d116      	bne.n	8002b96 <LCD_Display+0x686>
					  HAL_TIM_Base_Stop_IT(&htim4);
 8002b68:	488a      	ldr	r0, [pc, #552]	; (8002d94 <LCD_Display+0x884>)
 8002b6a:	f006 fa3b 	bl	8008fe4 <HAL_TIM_Base_Stop_IT>
					  while(Rpush_number == 3)
 8002b6e:	e00d      	b.n	8002b8c <LCD_Display+0x67c>
					  	  HAL_GPIO_WritePin(BASE_GPIO_Port, BASE_Pin, GPIO_PIN_RESET);
 8002b70:	2200      	movs	r2, #0
 8002b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b76:	4888      	ldr	r0, [pc, #544]	; (8002d98 <LCD_Display+0x888>)
 8002b78:	f003 ff86 	bl	8006a88 <HAL_GPIO_WritePin>
					  	  LCD_Menu_2_2(1);
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f7ff fa81 	bl	8002084 <LCD_Menu_2_2>
					  	  Push_Slect();
 8002b82:	f7ff f903 	bl	8001d8c <Push_Slect>
					  	  HAL_IWDG_Refresh(&hiwdg);
 8002b86:	487d      	ldr	r0, [pc, #500]	; (8002d7c <LCD_Display+0x86c>)
 8002b88:	f004 fc3f 	bl	800740a <HAL_IWDG_Refresh>
					  while(Rpush_number == 3)
 8002b8c:	4b7c      	ldr	r3, [pc, #496]	; (8002d80 <LCD_Display+0x870>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d0ed      	beq.n	8002b70 <LCD_Display+0x660>
			break;
 8002b94:	e0ea      	b.n	8002d6c <LCD_Display+0x85c>
				  else if(option_page_2==Page2_pump_3)
 8002b96:	4b7b      	ldr	r3, [pc, #492]	; (8002d84 <LCD_Display+0x874>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d116      	bne.n	8002bcc <LCD_Display+0x6bc>
					  HAL_TIM_Base_Stop_IT(&htim4);
 8002b9e:	487d      	ldr	r0, [pc, #500]	; (8002d94 <LCD_Display+0x884>)
 8002ba0:	f006 fa20 	bl	8008fe4 <HAL_TIM_Base_Stop_IT>
					  while(Rpush_number == 3)
 8002ba4:	e00d      	b.n	8002bc2 <LCD_Display+0x6b2>
					  	  HAL_GPIO_WritePin(NutriA_GPIO_Port, NutriA_Pin, GPIO_PIN_RESET);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bac:	487a      	ldr	r0, [pc, #488]	; (8002d98 <LCD_Display+0x888>)
 8002bae:	f003 ff6b 	bl	8006a88 <HAL_GPIO_WritePin>
					  	  LCD_Menu_2_2(1);
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f7ff fa66 	bl	8002084 <LCD_Menu_2_2>
					  	  Push_Slect();
 8002bb8:	f7ff f8e8 	bl	8001d8c <Push_Slect>
					  	  HAL_IWDG_Refresh(&hiwdg);
 8002bbc:	486f      	ldr	r0, [pc, #444]	; (8002d7c <LCD_Display+0x86c>)
 8002bbe:	f004 fc24 	bl	800740a <HAL_IWDG_Refresh>
					  while(Rpush_number == 3)
 8002bc2:	4b6f      	ldr	r3, [pc, #444]	; (8002d80 <LCD_Display+0x870>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d0ed      	beq.n	8002ba6 <LCD_Display+0x696>
			break;
 8002bca:	e0cf      	b.n	8002d6c <LCD_Display+0x85c>
				  else if(option_page_2==Page2_pump_4)
 8002bcc:	4b6d      	ldr	r3, [pc, #436]	; (8002d84 <LCD_Display+0x874>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b07      	cmp	r3, #7
 8002bd2:	d116      	bne.n	8002c02 <LCD_Display+0x6f2>
					  HAL_TIM_Base_Stop_IT(&htim4);
 8002bd4:	486f      	ldr	r0, [pc, #444]	; (8002d94 <LCD_Display+0x884>)
 8002bd6:	f006 fa05 	bl	8008fe4 <HAL_TIM_Base_Stop_IT>
					  while(Rpush_number == 3)
 8002bda:	e00d      	b.n	8002bf8 <LCD_Display+0x6e8>
					  	  HAL_GPIO_WritePin(NutriB_GPIO_Port, NutriB_Pin, GPIO_PIN_RESET);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002be2:	486d      	ldr	r0, [pc, #436]	; (8002d98 <LCD_Display+0x888>)
 8002be4:	f003 ff50 	bl	8006a88 <HAL_GPIO_WritePin>
					  	  LCD_Menu_2_2(1);
 8002be8:	2001      	movs	r0, #1
 8002bea:	f7ff fa4b 	bl	8002084 <LCD_Menu_2_2>
					  	  Push_Slect();
 8002bee:	f7ff f8cd 	bl	8001d8c <Push_Slect>
					  	  HAL_IWDG_Refresh(&hiwdg);
 8002bf2:	4862      	ldr	r0, [pc, #392]	; (8002d7c <LCD_Display+0x86c>)
 8002bf4:	f004 fc09 	bl	800740a <HAL_IWDG_Refresh>
					  while(Rpush_number == 3)
 8002bf8:	4b61      	ldr	r3, [pc, #388]	; (8002d80 <LCD_Display+0x870>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d0ed      	beq.n	8002bdc <LCD_Display+0x6cc>
			break;
 8002c00:	e0b4      	b.n	8002d6c <LCD_Display+0x85c>
				  else if(option_page_2 == Page2_Back)
 8002c02:	4b60      	ldr	r3, [pc, #384]	; (8002d84 <LCD_Display+0x874>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b0c      	cmp	r3, #12
 8002c08:	f040 80b0 	bne.w	8002d6c <LCD_Display+0x85c>
					  Page = 1;
 8002c0c:	4b5e      	ldr	r3, [pc, #376]	; (8002d88 <LCD_Display+0x878>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
					  Rpush_number = 1;
 8002c12:	4b5b      	ldr	r3, [pc, #364]	; (8002d80 <LCD_Display+0x870>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
					  button_flag = 0;
 8002c18:	4b5c      	ldr	r3, [pc, #368]	; (8002d8c <LCD_Display+0x87c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
					  option_page_2 = Page2_Nothing;
 8002c1e:	4b59      	ldr	r3, [pc, #356]	; (8002d84 <LCD_Display+0x874>)
 8002c20:	220d      	movs	r2, #13
 8002c22:	701a      	strb	r2, [r3, #0]
					  lcd_clear();
 8002c24:	f7fe ff64 	bl	8001af0 <lcd_clear>
			break;
 8002c28:	e0a0      	b.n	8002d6c <LCD_Display+0x85c>
			else if(option_page_1 == Page1_Calbration_sensor) // Display with calibration
 8002c2a:	4b59      	ldr	r3, [pc, #356]	; (8002d90 <LCD_Display+0x880>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d155      	bne.n	8002cde <LCD_Display+0x7ce>
					Read_SetPoint(flash_calibration_ph);
 8002c32:	2001      	movs	r0, #1
 8002c34:	f000 fab6 	bl	80031a4 <Read_SetPoint>
					Read_SetPoint(flash_calibration_tds);
 8002c38:	2002      	movs	r0, #2
 8002c3a:	f000 fab3 	bl	80031a4 <Read_SetPoint>
					LCD_Menu_2_3(0);
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f7ff fa5a 	bl	80020f8 <LCD_Menu_2_3>
					if(option_page_2 == Page2_calib_ph)
 8002c44:	4b4f      	ldr	r3, [pc, #316]	; (8002d84 <LCD_Display+0x874>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d118      	bne.n	8002c7e <LCD_Display+0x76e>
						HAL_TIM_Base_Stop_IT(&htim4);
 8002c4c:	4851      	ldr	r0, [pc, #324]	; (8002d94 <LCD_Display+0x884>)
 8002c4e:	f006 f9c9 	bl	8008fe4 <HAL_TIM_Base_Stop_IT>
						while(Rpush_number == 3)
 8002c52:	e00f      	b.n	8002c74 <LCD_Display+0x764>
											PH_Calibration();
 8002c54:	f000 f986 	bl	8002f64 <PH_Calibration>
											LCD_Menu_2_3(1);
 8002c58:	2001      	movs	r0, #1
 8002c5a:	f7ff fa4d 	bl	80020f8 <LCD_Menu_2_3>
											Push_Slect();
 8002c5e:	f7ff f895 	bl	8001d8c <Push_Slect>
											HAL_Delay(500);
 8002c62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c66:	f002 fc23 	bl	80054b0 <HAL_Delay>
											lcd_clear();
 8002c6a:	f7fe ff41 	bl	8001af0 <lcd_clear>
											HAL_IWDG_Refresh(&hiwdg);
 8002c6e:	4843      	ldr	r0, [pc, #268]	; (8002d7c <LCD_Display+0x86c>)
 8002c70:	f004 fbcb 	bl	800740a <HAL_IWDG_Refresh>
						while(Rpush_number == 3)
 8002c74:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <LCD_Display+0x870>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d0eb      	beq.n	8002c54 <LCD_Display+0x744>
			break;
 8002c7c:	e076      	b.n	8002d6c <LCD_Display+0x85c>
					else if(option_page_2 == Page2_calib_tds)
 8002c7e:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <LCD_Display+0x874>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b09      	cmp	r3, #9
 8002c84:	d118      	bne.n	8002cb8 <LCD_Display+0x7a8>
						HAL_TIM_Base_Stop_IT(&htim4);
 8002c86:	4843      	ldr	r0, [pc, #268]	; (8002d94 <LCD_Display+0x884>)
 8002c88:	f006 f9ac 	bl	8008fe4 <HAL_TIM_Base_Stop_IT>
						while(Rpush_number == 3)
 8002c8c:	e00f      	b.n	8002cae <LCD_Display+0x79e>
											TDS_Calibration();
 8002c8e:	f000 f9e9 	bl	8003064 <TDS_Calibration>
											LCD_Menu_2_3(2);
 8002c92:	2002      	movs	r0, #2
 8002c94:	f7ff fa30 	bl	80020f8 <LCD_Menu_2_3>
											Push_Slect();
 8002c98:	f7ff f878 	bl	8001d8c <Push_Slect>
											HAL_Delay(500);
 8002c9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ca0:	f002 fc06 	bl	80054b0 <HAL_Delay>
											lcd_clear();
 8002ca4:	f7fe ff24 	bl	8001af0 <lcd_clear>
											HAL_IWDG_Refresh(&hiwdg);
 8002ca8:	4834      	ldr	r0, [pc, #208]	; (8002d7c <LCD_Display+0x86c>)
 8002caa:	f004 fbae 	bl	800740a <HAL_IWDG_Refresh>
						while(Rpush_number == 3)
 8002cae:	4b34      	ldr	r3, [pc, #208]	; (8002d80 <LCD_Display+0x870>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d0eb      	beq.n	8002c8e <LCD_Display+0x77e>
			break;
 8002cb6:	e059      	b.n	8002d6c <LCD_Display+0x85c>
					else if(option_page_2 == Page2_Back)
 8002cb8:	4b32      	ldr	r3, [pc, #200]	; (8002d84 <LCD_Display+0x874>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	d155      	bne.n	8002d6c <LCD_Display+0x85c>
					  Page = 1;
 8002cc0:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <LCD_Display+0x878>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
					  Rpush_number = 1;
 8002cc6:	4b2e      	ldr	r3, [pc, #184]	; (8002d80 <LCD_Display+0x870>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
					  button_flag = 0;
 8002ccc:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <LCD_Display+0x87c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
					  option_page_2 = Page2_Nothing;
 8002cd2:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <LCD_Display+0x874>)
 8002cd4:	220d      	movs	r2, #13
 8002cd6:	701a      	strb	r2, [r3, #0]
					  lcd_clear();
 8002cd8:	f7fe ff0a 	bl	8001af0 <lcd_clear>
			break;
 8002cdc:	e046      	b.n	8002d6c <LCD_Display+0x85c>
			else if(option_page_1 == Page1_WifiConfig)
 8002cde:	4b2c      	ldr	r3, [pc, #176]	; (8002d90 <LCD_Display+0x880>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d142      	bne.n	8002d6c <LCD_Display+0x85c>
				LCD_Menu_2_4_(0);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7ff fb04 	bl	80022f4 <LCD_Menu_2_4_>
				if(option_page_2 == Page2_start)
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <LCD_Display+0x874>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b0a      	cmp	r3, #10
 8002cf2:	d122      	bne.n	8002d3a <LCD_Display+0x82a>
					HAL_TIM_Base_Stop_IT(&htim4);
 8002cf4:	4827      	ldr	r0, [pc, #156]	; (8002d94 <LCD_Display+0x884>)
 8002cf6:	f006 f975 	bl	8008fe4 <HAL_TIM_Base_Stop_IT>
					while(Rpush_number == 3 && config_wifi_flag == 0)
 8002cfa:	e00f      	b.n	8002d1c <LCD_Display+0x80c>
											Push_Slect();
 8002cfc:	f7ff f846 	bl	8001d8c <Push_Slect>
											lcd_clear();
 8002d00:	f7fe fef6 	bl	8001af0 <lcd_clear>
											HAL_IWDG_Refresh(&hiwdg);
 8002d04:	481d      	ldr	r0, [pc, #116]	; (8002d7c <LCD_Display+0x86c>)
 8002d06:	f004 fb80 	bl	800740a <HAL_IWDG_Refresh>
											LCD_Menu_2_4_(1);
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f7ff faf2 	bl	80022f4 <LCD_Menu_2_4_>
											Wifi_Config();
 8002d10:	f000 fcc2 	bl	8003698 <Wifi_Config>
											HAL_Delay(1000);
 8002d14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d18:	f002 fbca 	bl	80054b0 <HAL_Delay>
					while(Rpush_number == 3 && config_wifi_flag == 0)
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <LCD_Display+0x870>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d103      	bne.n	8002d2c <LCD_Display+0x81c>
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <LCD_Display+0x88c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0e7      	beq.n	8002cfc <LCD_Display+0x7ec>
					config_wifi_flag = 0;
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <LCD_Display+0x88c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
					Rpush_number = 4;
 8002d32:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <LCD_Display+0x870>)
 8002d34:	2204      	movs	r2, #4
 8002d36:	601a      	str	r2, [r3, #0]
			break;
 8002d38:	e018      	b.n	8002d6c <LCD_Display+0x85c>
				else if(option_page_2 == Page2_end)
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <LCD_Display+0x874>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b0b      	cmp	r3, #11
 8002d40:	d014      	beq.n	8002d6c <LCD_Display+0x85c>
				else if(option_page_2 == Page2_Back)
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <LCD_Display+0x874>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d110      	bne.n	8002d6c <LCD_Display+0x85c>
				  Page = 1;
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <LCD_Display+0x878>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
				  Rpush_number = 1;
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <LCD_Display+0x870>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
				  button_flag = 0;
 8002d56:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <LCD_Display+0x87c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
				  option_page_2 = Page2_Nothing;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <LCD_Display+0x874>)
 8002d5e:	220d      	movs	r2, #13
 8002d60:	701a      	strb	r2, [r3, #0]
				  lcd_clear();
 8002d62:	f7fe fec5 	bl	8001af0 <lcd_clear>
			break;
 8002d66:	e001      	b.n	8002d6c <LCD_Display+0x85c>
			break;
 8002d68:	bf00      	nop
 8002d6a:	e000      	b.n	8002d6e <LCD_Display+0x85e>
			break;
 8002d6c:	bf00      	nop
	}
 }
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000550 	.word	0x20000550
 8002d7c:	2000032c 	.word	0x2000032c
 8002d80:	20000220 	.word	0x20000220
 8002d84:	20000002 	.word	0x20000002
 8002d88:	20000228 	.word	0x20000228
 8002d8c:	20000224 	.word	0x20000224
 8002d90:	20000001 	.word	0x20000001
 8002d94:	20000408 	.word	0x20000408
 8002d98:	40020c00 	.word	0x40020c00
 8002d9c:	2000055c 	.word	0x2000055c

08002da0 <delay_us>:
uint8_t FileName[20];							//Name of File namme
uint8_t UART1_TEMPBUFFER[SIZEOF_COMMAND];		//Temp buffer when receive data UART1
uint8_t UART1_MAINBUFFER[UART1_BUFFER_SIZE];	//MAIN buffer store data UART1

void delay_us(uint16_t time)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim6,0);
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <delay_us+0x30>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2200      	movs	r2, #0
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24
    while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8002db2:	bf00      	nop
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <delay_us+0x30>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d3f9      	bcc.n	8002db4 <delay_us+0x14>
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000450 	.word	0x20000450

08002dd4 <SEND_UART1>:
	WifiConfig,
}Message_type;
char buffer_send[100];

void SEND_UART1(char *String)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)String,strlen(String), 1000);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7fd fa01 	bl	80001e4 <strlen>
 8002de2:	4603      	mov	r3, r0
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4803      	ldr	r0, [pc, #12]	; (8002dfc <SEND_UART1+0x28>)
 8002dee:	f006 fd36 	bl	800985e <HAL_UART_Transmit>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000498 	.word	0x20000498

08002e00 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
	memset(UART1_MAINBUFFER,0,strlen((char*)UART1_MAINBUFFER));
 8002e0c:	4823      	ldr	r0, [pc, #140]	; (8002e9c <HAL_UARTEx_RxEventCallback+0x9c>)
 8002e0e:	f7fd f9e9 	bl	80001e4 <strlen>
 8002e12:	4603      	mov	r3, r0
 8002e14:	461a      	mov	r2, r3
 8002e16:	2100      	movs	r1, #0
 8002e18:	4820      	ldr	r0, [pc, #128]	; (8002e9c <HAL_UARTEx_RxEventCallback+0x9c>)
 8002e1a:	f00b f971 	bl	800e100 <memset>
	if(huart->Instance == USART1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a1f      	ldr	r2, [pc, #124]	; (8002ea0 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d113      	bne.n	8002e50 <HAL_UARTEx_RxEventCallback+0x50>
	{
		memcpy(UART1_MAINBUFFER,UART1_TEMPBUFFER, Size);
 8002e28:	887b      	ldrh	r3, [r7, #2]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	491d      	ldr	r1, [pc, #116]	; (8002ea4 <HAL_UARTEx_RxEventCallback+0xa4>)
 8002e2e:	481b      	ldr	r0, [pc, #108]	; (8002e9c <HAL_UARTEx_RxEventCallback+0x9c>)
 8002e30:	f00b f958 	bl	800e0e4 <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,UART1_TEMPBUFFER,SIZEOF_COMMAND);
 8002e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e38:	491a      	ldr	r1, [pc, #104]	; (8002ea4 <HAL_UARTEx_RxEventCallback+0xa4>)
 8002e3a:	481b      	ldr	r0, [pc, #108]	; (8002ea8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8002e3c:	f006 fda1 	bl	8009982 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8002e40:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <HAL_UARTEx_RxEventCallback+0xac>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_UARTEx_RxEventCallback+0xac>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0208 	bic.w	r2, r2, #8
 8002e4e:	601a      	str	r2, [r3, #0]
	}

	if(!strcmp(UART1_MAINBUFFER,"Config_Wifi_done"))
 8002e50:	4917      	ldr	r1, [pc, #92]	; (8002eb0 <HAL_UARTEx_RxEventCallback+0xb0>)
 8002e52:	4812      	ldr	r0, [pc, #72]	; (8002e9c <HAL_UARTEx_RxEventCallback+0x9c>)
 8002e54:	f7fd f9bc 	bl	80001d0 <strcmp>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10d      	bne.n	8002e7a <HAL_UARTEx_RxEventCallback+0x7a>
	{
		HAL_UART_Transmit(&huart1, UART1_MAINBUFFER,strlen((char*)UART1_MAINBUFFER), 1000);
 8002e5e:	480f      	ldr	r0, [pc, #60]	; (8002e9c <HAL_UARTEx_RxEventCallback+0x9c>)
 8002e60:	f7fd f9c0 	bl	80001e4 <strlen>
 8002e64:	4603      	mov	r3, r0
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e6c:	490b      	ldr	r1, [pc, #44]	; (8002e9c <HAL_UARTEx_RxEventCallback+0x9c>)
 8002e6e:	480e      	ldr	r0, [pc, #56]	; (8002ea8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8002e70:	f006 fcf5 	bl	800985e <HAL_UART_Transmit>
		config_wifi_flag = 1;
 8002e74:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <HAL_UARTEx_RxEventCallback+0xb4>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
	}

	if(UART1_MAINBUFFER[2] == 80)
 8002e7a:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <HAL_UARTEx_RxEventCallback+0x9c>)
 8002e7c:	789b      	ldrb	r3, [r3, #2]
 8002e7e:	2b50      	cmp	r3, #80	; 0x50
 8002e80:	d102      	bne.n	8002e88 <HAL_UARTEx_RxEventCallback+0x88>
	{
//		SEND_UART1(UART1_MAINBUFFER);

		GET_VALUE_FROM_ESP32(UART1_MAINBUFFER);
 8002e82:	4806      	ldr	r0, [pc, #24]	; (8002e9c <HAL_UARTEx_RxEventCallback+0x9c>)
 8002e84:	f7fe feb6 	bl	8001bf4 <GET_VALUE_FROM_ESP32>

	}
	memset(UART1_MAINBUFFER,0,Size);
 8002e88:	887b      	ldrh	r3, [r7, #2]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4803      	ldr	r0, [pc, #12]	; (8002e9c <HAL_UARTEx_RxEventCallback+0x9c>)
 8002e90:	f00b f936 	bl	800e100 <memset>

}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000d60 	.word	0x20000d60
 8002ea0:	40011000 	.word	0x40011000
 8002ea4:	20000960 	.word	0x20000960
 8002ea8:	20000498 	.word	0x20000498
 8002eac:	200004dc 	.word	0x200004dc
 8002eb0:	08012ca8 	.word	0x08012ca8
 8002eb4:	2000055c 	.word	0x2000055c

08002eb8 <Handle_value_send>:


void Handle_value_send(Message_type tp)
{
 8002eb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ebc:	b0a0      	sub	sp, #128	; 0x80
 8002ebe:	af04      	add	r7, sp, #16
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	71fb      	strb	r3, [r7, #7]
	char msg_send[100];

	if(tp == Value)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d136      	bne.n	8002f38 <Handle_value_send+0x80>
	{
		memset(msg_send,0,strlen(msg_send));
 8002eca:	f107 030c 	add.w	r3, r7, #12
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd f988 	bl	80001e4 <strlen>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	f107 030c 	add.w	r3, r7, #12
 8002eda:	2100      	movs	r1, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f00b f90f 	bl	800e100 <memset>
		sprintf(msg_send,"{\"ID\":\"123456789\",\"PH\":\"%.2f\",\"TDS\":\"%.0f\",\"Temp\":\"%.2f\"}",PH,TDS,Temperature);
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <Handle_value_send+0x98>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fb3e 	bl	8000568 <__aeabi_f2d>
 8002eec:	4680      	mov	r8, r0
 8002eee:	4689      	mov	r9, r1
 8002ef0:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <Handle_value_send+0x9c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fb37 	bl	8000568 <__aeabi_f2d>
 8002efa:	4604      	mov	r4, r0
 8002efc:	460d      	mov	r5, r1
 8002efe:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <Handle_value_send+0xa0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fb30 	bl	8000568 <__aeabi_f2d>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	f107 000c 	add.w	r0, r7, #12
 8002f10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f14:	e9cd 4500 	strd	r4, r5, [sp]
 8002f18:	4642      	mov	r2, r8
 8002f1a:	464b      	mov	r3, r9
 8002f1c:	490f      	ldr	r1, [pc, #60]	; (8002f5c <Handle_value_send+0xa4>)
 8002f1e:	f00b ff77 	bl	800ee10 <siprintf>
		SD_save(msg_send);
 8002f22:	f107 030c 	add.w	r3, r7, #12
 8002f26:	4618      	mov	r0, r3
 8002f28:	f001 f9c6 	bl	80042b8 <SD_save>
		SEND_UART1(msg_send);
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff4f 	bl	8002dd4 <SEND_UART1>
	}
	else if(tp == WifiConfig)
	{
		SEND_UART1("wificonfigmode");
	}
}
 8002f36:	e005      	b.n	8002f44 <Handle_value_send+0x8c>
	else if(tp == WifiConfig)
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d102      	bne.n	8002f44 <Handle_value_send+0x8c>
		SEND_UART1("wificonfigmode");
 8002f3e:	4808      	ldr	r0, [pc, #32]	; (8002f60 <Handle_value_send+0xa8>)
 8002f40:	f7ff ff48 	bl	8002dd4 <SEND_UART1>
}
 8002f44:	bf00      	nop
 8002f46:	3770      	adds	r7, #112	; 0x70
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000544 	.word	0x20000544
 8002f54:	20000540 	.word	0x20000540
 8002f58:	20000548 	.word	0x20000548
 8002f5c:	08012cbc 	.word	0x08012cbc
 8002f60:	08012cf8 	.word	0x08012cf8

08002f64 <PH_Calibration>:
uint16_t ADC_Value[2] = {0};
int ADC_PH_4 = 0, ADC_PH_7 = 0;
float 	ph_a_value = 0,ph_b_value = 0,tds_k_value = 0;
void get_adc();
void PH_Calibration()
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
		//Ax+B = y => ADC_PH_4 - ADC_PH_7 = 640
	get_adc();
 8002f68:	f000 fc26 	bl	80037b8 <get_adc>

	  if(ADC_Value[0] > 1540 && ADC_Value[0] < 2180)
 8002f6c:	4b29      	ldr	r3, [pc, #164]	; (8003014 <PH_Calibration+0xb0>)
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	f240 6204 	movw	r2, #1540	; 0x604
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d911      	bls.n	8002f9c <PH_Calibration+0x38>
 8002f78:	4b26      	ldr	r3, [pc, #152]	; (8003014 <PH_Calibration+0xb0>)
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	f640 0283 	movw	r2, #2179	; 0x883
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d80b      	bhi.n	8002f9c <PH_Calibration+0x38>
	  {
		  ADC_PH_7 = ADC_Value[0];
 8002f84:	4b23      	ldr	r3, [pc, #140]	; (8003014 <PH_Calibration+0xb0>)
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b23      	ldr	r3, [pc, #140]	; (8003018 <PH_Calibration+0xb4>)
 8002f8c:	601a      	str	r2, [r3, #0]
		  ADC_PH_4 = ADC_PH_7 + 640;
 8002f8e:	4b22      	ldr	r3, [pc, #136]	; (8003018 <PH_Calibration+0xb4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f96:	4a21      	ldr	r2, [pc, #132]	; (800301c <PH_Calibration+0xb8>)
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e016      	b.n	8002fca <PH_Calibration+0x66>
	    }
	    else if(ADC_Value[0] < 2820 && ADC_Value[0] > 2180)
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <PH_Calibration+0xb0>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	f640 3203 	movw	r2, #2819	; 0xb03
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d810      	bhi.n	8002fca <PH_Calibration+0x66>
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <PH_Calibration+0xb0>)
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	f640 0284 	movw	r2, #2180	; 0x884
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d90a      	bls.n	8002fca <PH_Calibration+0x66>
	    {
	    	ADC_PH_4 = ADC_Value[0];
 8002fb4:	4b17      	ldr	r3, [pc, #92]	; (8003014 <PH_Calibration+0xb0>)
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b18      	ldr	r3, [pc, #96]	; (800301c <PH_Calibration+0xb8>)
 8002fbc:	601a      	str	r2, [r3, #0]
	    	ADC_PH_7 = ADC_PH_4 - 640;
 8002fbe:	4b17      	ldr	r3, [pc, #92]	; (800301c <PH_Calibration+0xb8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8002fc6:	4a14      	ldr	r2, [pc, #80]	; (8003018 <PH_Calibration+0xb4>)
 8002fc8:	6013      	str	r3, [r2, #0]
	      }

	  ph_a_value = (float)(3/(float)(ADC_PH_7 - ADC_PH_4));
 8002fca:	4b13      	ldr	r3, [pc, #76]	; (8003018 <PH_Calibration+0xb4>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <PH_Calibration+0xb8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fdc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <PH_Calibration+0xbc>)
 8002fe6:	edc3 7a00 	vstr	s15, [r3]
	  ph_b_value = (float)((4 - (ph_a_value*(float)ADC_PH_4)));
 8002fea:	4b0c      	ldr	r3, [pc, #48]	; (800301c <PH_Calibration+0xb8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <PH_Calibration+0xbc>)
 8002ff8:	edd3 7a00 	vldr	s15, [r3]
 8002ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003000:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <PH_Calibration+0xc0>)
 800300a:	edc3 7a00 	vstr	s15, [r3]

}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20001160 	.word	0x20001160
 8003018:	20001168 	.word	0x20001168
 800301c:	20001164 	.word	0x20001164
 8003020:	2000116c 	.word	0x2000116c
 8003024:	20001170 	.word	0x20001170

08003028 <PH_Calculator>:
float PH_Calculator(float A, float B, uint16_t adc)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003032:	edc7 0a02 	vstr	s1, [r7, #8]
 8003036:	4603      	mov	r3, r0
 8003038:	80fb      	strh	r3, [r7, #6]
	return (float)(adc*A + B);
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	ee07 3a90 	vmov	s15, r3
 8003040:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003044:	edd7 7a03 	vldr	s15, [r7, #12]
 8003048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800304c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003050:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003054:	eeb0 0a67 	vmov.f32	s0, s15
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <TDS_Calibration>:

void TDS_Calibration()
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
	get_adc();
 8003068:	f000 fba6 	bl	80037b8 <get_adc>

	tds_k_value = (1000/(float)ADC_Value[1]);
 800306c:	4b07      	ldr	r3, [pc, #28]	; (800308c <TDS_Calibration+0x28>)
 800306e:	885b      	ldrh	r3, [r3, #2]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003078:	eddf 6a05 	vldr	s13, [pc, #20]	; 8003090 <TDS_Calibration+0x2c>
 800307c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003080:	4b04      	ldr	r3, [pc, #16]	; (8003094 <TDS_Calibration+0x30>)
 8003082:	edc3 7a00 	vstr	s15, [r3]
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20001160 	.word	0x20001160
 8003090:	447a0000 	.word	0x447a0000
 8003094:	20001174 	.word	0x20001174

08003098 <TDS_Calculator>:

float TDS_Calculator(float k, uint16_t adc)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	ed87 0a01 	vstr	s0, [r7, #4]
 80030a2:	4603      	mov	r3, r0
 80030a4:	807b      	strh	r3, [r7, #2]
	return (float)(k*adc);
 80030a6:	887b      	ldrh	r3, [r7, #2]
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80030b4:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80030b8:	eeb0 0a67 	vmov.f32	s0, s15
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <Save_SetPoint>:


/*=====================================Flash_Start=================================*/

void Save_SetPoint(Save_Flash_Type tp)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]

	if(tp == flash_setpoint)
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d12d      	bne.n	8003134 <Save_SetPoint+0x6c>
	{
		time_tds = 80;
 80030d8:	4b29      	ldr	r3, [pc, #164]	; (8003180 <Save_SetPoint+0xb8>)
 80030da:	2250      	movs	r2, #80	; 0x50
 80030dc:	801a      	strh	r2, [r3, #0]
		time_ph = 80;
 80030de:	4b29      	ldr	r3, [pc, #164]	; (8003184 <Save_SetPoint+0xbc>)
 80030e0:	2250      	movs	r2, #80	; 0x50
 80030e2:	801a      	strh	r2, [r3, #0]
		HAL_Delay(10);
 80030e4:	200a      	movs	r0, #10
 80030e6:	f002 f9e3 	bl	80054b0 <HAL_Delay>
		W25qxx_EraseSector(1);
 80030ea:	2001      	movs	r0, #1
 80030ec:	f001 ff10 	bl	8004f10 <W25qxx_EraseSector>
		W25qxx_EraseSector(2);
 80030f0:	2002      	movs	r0, #2
 80030f2:	f001 ff0d 	bl	8004f10 <W25qxx_EraseSector>
		W25qxx_EraseSector(3);
 80030f6:	2003      	movs	r0, #3
 80030f8:	f001 ff0a 	bl	8004f10 <W25qxx_EraseSector>
		W25qxx_EraseSector(4);
 80030fc:	2004      	movs	r0, #4
 80030fe:	f001 ff07 	bl	8004f10 <W25qxx_EraseSector>
		W25qxx_WriteSector(&PH_SetPoint, 1, 0, 4);
 8003102:	2304      	movs	r3, #4
 8003104:	2200      	movs	r2, #0
 8003106:	2101      	movs	r1, #1
 8003108:	481f      	ldr	r0, [pc, #124]	; (8003188 <Save_SetPoint+0xc0>)
 800310a:	f001 fff3 	bl	80050f4 <W25qxx_WriteSector>
		W25qxx_WriteSector(&PH_THR_SetPoint, 2, 0, 4);
 800310e:	2304      	movs	r3, #4
 8003110:	2200      	movs	r2, #0
 8003112:	2102      	movs	r1, #2
 8003114:	481d      	ldr	r0, [pc, #116]	; (800318c <Save_SetPoint+0xc4>)
 8003116:	f001 ffed 	bl	80050f4 <W25qxx_WriteSector>
		W25qxx_WriteSector(&TDS_SetPoint, 3, 0, 4);
 800311a:	2304      	movs	r3, #4
 800311c:	2200      	movs	r2, #0
 800311e:	2103      	movs	r1, #3
 8003120:	481b      	ldr	r0, [pc, #108]	; (8003190 <Save_SetPoint+0xc8>)
 8003122:	f001 ffe7 	bl	80050f4 <W25qxx_WriteSector>
		W25qxx_WriteSector(&TDS_THR_SetPoint, 4, 0, 4);
 8003126:	2304      	movs	r3, #4
 8003128:	2200      	movs	r2, #0
 800312a:	2104      	movs	r1, #4
 800312c:	4819      	ldr	r0, [pc, #100]	; (8003194 <Save_SetPoint+0xcc>)
 800312e:	f001 ffe1 	bl	80050f4 <W25qxx_WriteSector>
		W25qxx_EraseSector(7);
		W25qxx_WriteSector(&tds_k_value, 7, 0, 4);

	}

}
 8003132:	e021      	b.n	8003178 <Save_SetPoint+0xb0>
	else if(tp ==flash_calibration_ph)
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d112      	bne.n	8003160 <Save_SetPoint+0x98>
		W25qxx_EraseSector(5);
 800313a:	2005      	movs	r0, #5
 800313c:	f001 fee8 	bl	8004f10 <W25qxx_EraseSector>
		W25qxx_EraseSector(6);
 8003140:	2006      	movs	r0, #6
 8003142:	f001 fee5 	bl	8004f10 <W25qxx_EraseSector>
		W25qxx_WriteSector(&ph_a_value, 5, 0, 4);
 8003146:	2304      	movs	r3, #4
 8003148:	2200      	movs	r2, #0
 800314a:	2105      	movs	r1, #5
 800314c:	4812      	ldr	r0, [pc, #72]	; (8003198 <Save_SetPoint+0xd0>)
 800314e:	f001 ffd1 	bl	80050f4 <W25qxx_WriteSector>
		W25qxx_WriteSector(&ph_b_value, 6, 0, 4);
 8003152:	2304      	movs	r3, #4
 8003154:	2200      	movs	r2, #0
 8003156:	2106      	movs	r1, #6
 8003158:	4810      	ldr	r0, [pc, #64]	; (800319c <Save_SetPoint+0xd4>)
 800315a:	f001 ffcb 	bl	80050f4 <W25qxx_WriteSector>
}
 800315e:	e00b      	b.n	8003178 <Save_SetPoint+0xb0>
	else if (tp == flash_calibration_tds)
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d108      	bne.n	8003178 <Save_SetPoint+0xb0>
		W25qxx_EraseSector(7);
 8003166:	2007      	movs	r0, #7
 8003168:	f001 fed2 	bl	8004f10 <W25qxx_EraseSector>
		W25qxx_WriteSector(&tds_k_value, 7, 0, 4);
 800316c:	2304      	movs	r3, #4
 800316e:	2200      	movs	r2, #0
 8003170:	2107      	movs	r1, #7
 8003172:	480b      	ldr	r0, [pc, #44]	; (80031a0 <Save_SetPoint+0xd8>)
 8003174:	f001 ffbe 	bl	80050f4 <W25qxx_WriteSector>
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	2000053c 	.word	0x2000053c
 8003184:	2000053e 	.word	0x2000053e
 8003188:	20000558 	.word	0x20000558
 800318c:	20000554 	.word	0x20000554
 8003190:	2000054c 	.word	0x2000054c
 8003194:	20000550 	.word	0x20000550
 8003198:	2000116c 	.word	0x2000116c
 800319c:	20001170 	.word	0x20001170
 80031a0:	20001174 	.word	0x20001174

080031a4 <Read_SetPoint>:
void Read_SetPoint(Save_Flash_Type tp)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
	if(tp == flash_setpoint)
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d118      	bne.n	80031e6 <Read_SetPoint+0x42>
	{
		W25qxx_ReadSector(&PH_SetPoint, 1, 0, 4);
 80031b4:	2304      	movs	r3, #4
 80031b6:	2200      	movs	r2, #0
 80031b8:	2101      	movs	r1, #1
 80031ba:	4819      	ldr	r0, [pc, #100]	; (8003220 <Read_SetPoint+0x7c>)
 80031bc:	f002 f87a 	bl	80052b4 <W25qxx_ReadSector>
		W25qxx_ReadSector(&PH_THR_SetPoint, 2, 0, 4);
 80031c0:	2304      	movs	r3, #4
 80031c2:	2200      	movs	r2, #0
 80031c4:	2102      	movs	r1, #2
 80031c6:	4817      	ldr	r0, [pc, #92]	; (8003224 <Read_SetPoint+0x80>)
 80031c8:	f002 f874 	bl	80052b4 <W25qxx_ReadSector>
		W25qxx_ReadSector(&TDS_SetPoint, 3, 0, 4);
 80031cc:	2304      	movs	r3, #4
 80031ce:	2200      	movs	r2, #0
 80031d0:	2103      	movs	r1, #3
 80031d2:	4815      	ldr	r0, [pc, #84]	; (8003228 <Read_SetPoint+0x84>)
 80031d4:	f002 f86e 	bl	80052b4 <W25qxx_ReadSector>
		W25qxx_ReadSector(&TDS_THR_SetPoint, 4, 0, 4);
 80031d8:	2304      	movs	r3, #4
 80031da:	2200      	movs	r2, #0
 80031dc:	2104      	movs	r1, #4
 80031de:	4813      	ldr	r0, [pc, #76]	; (800322c <Read_SetPoint+0x88>)
 80031e0:	f002 f868 	bl	80052b4 <W25qxx_ReadSector>
	}
	else if (tp == flash_calibration_tds)
	{
		W25qxx_ReadSector(&tds_k_value, 7, 0, 4);
	}
}
 80031e4:	e018      	b.n	8003218 <Read_SetPoint+0x74>
	else if(tp == flash_calibration_ph)
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d10c      	bne.n	8003206 <Read_SetPoint+0x62>
		W25qxx_ReadSector(&ph_a_value, 5, 0, 4);
 80031ec:	2304      	movs	r3, #4
 80031ee:	2200      	movs	r2, #0
 80031f0:	2105      	movs	r1, #5
 80031f2:	480f      	ldr	r0, [pc, #60]	; (8003230 <Read_SetPoint+0x8c>)
 80031f4:	f002 f85e 	bl	80052b4 <W25qxx_ReadSector>
		W25qxx_ReadSector(&ph_b_value, 6, 0, 4);
 80031f8:	2304      	movs	r3, #4
 80031fa:	2200      	movs	r2, #0
 80031fc:	2106      	movs	r1, #6
 80031fe:	480d      	ldr	r0, [pc, #52]	; (8003234 <Read_SetPoint+0x90>)
 8003200:	f002 f858 	bl	80052b4 <W25qxx_ReadSector>
}
 8003204:	e008      	b.n	8003218 <Read_SetPoint+0x74>
	else if (tp == flash_calibration_tds)
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d105      	bne.n	8003218 <Read_SetPoint+0x74>
		W25qxx_ReadSector(&tds_k_value, 7, 0, 4);
 800320c:	2304      	movs	r3, #4
 800320e:	2200      	movs	r2, #0
 8003210:	2107      	movs	r1, #7
 8003212:	4809      	ldr	r0, [pc, #36]	; (8003238 <Read_SetPoint+0x94>)
 8003214:	f002 f84e 	bl	80052b4 <W25qxx_ReadSector>
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20000558 	.word	0x20000558
 8003224:	20000554 	.word	0x20000554
 8003228:	2000054c 	.word	0x2000054c
 800322c:	20000550 	.word	0x20000550
 8003230:	2000116c 	.word	0x2000116c
 8003234:	20001170 	.word	0x20001170
 8003238:	20001174 	.word	0x20001174

0800323c <Set_Pin_Output>:
uint16_t TEMP;
#define DS18B20_PORT Temperature_Pin_GPIO_Port
#define DS18B20_PIN Temperature_Pin_Pin

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 030c 	add.w	r3, r7, #12
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8003258:	887b      	ldrh	r3, [r7, #2]
 800325a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325c:	2301      	movs	r3, #1
 800325e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003260:	2300      	movs	r3, #0
 8003262:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003264:	f107 030c 	add.w	r3, r7, #12
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f003 fa58 	bl	8006720 <HAL_GPIO_Init>
}
 8003270:	bf00      	nop
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <Set_Pin_Input>:
void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 030c 	add.w	r3, r7, #12
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8003294:	887b      	ldrh	r3, [r7, #2]
 8003296:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800329c:	2301      	movs	r3, #1
 800329e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80032a0:	f107 030c 	add.w	r3, r7, #12
 80032a4:	4619      	mov	r1, r3
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f003 fa3a 	bl	8006720 <HAL_GPIO_Init>
}
 80032ac:	bf00      	nop
 80032ae:	3720      	adds	r7, #32
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 80032be:	2104      	movs	r1, #4
 80032c0:	4813      	ldr	r0, [pc, #76]	; (8003310 <DS18B20_Start+0x5c>)
 80032c2:	f7ff ffbb 	bl	800323c <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 80032c6:	2200      	movs	r2, #0
 80032c8:	2104      	movs	r1, #4
 80032ca:	4811      	ldr	r0, [pc, #68]	; (8003310 <DS18B20_Start+0x5c>)
 80032cc:	f003 fbdc 	bl	8006a88 <HAL_GPIO_WritePin>
	delay_us(480);   // delay according to datasheet
 80032d0:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80032d4:	f7ff fd64 	bl	8002da0 <delay_us>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80032d8:	2104      	movs	r1, #4
 80032da:	480d      	ldr	r0, [pc, #52]	; (8003310 <DS18B20_Start+0x5c>)
 80032dc:	f7ff ffcc 	bl	8003278 <Set_Pin_Input>
	delay_us(80);    // delay according to datasheet
 80032e0:	2050      	movs	r0, #80	; 0x50
 80032e2:	f7ff fd5d 	bl	8002da0 <delay_us>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 80032e6:	2104      	movs	r1, #4
 80032e8:	4809      	ldr	r0, [pc, #36]	; (8003310 <DS18B20_Start+0x5c>)
 80032ea:	f003 fbb5 	bl	8006a58 <HAL_GPIO_ReadPin>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <DS18B20_Start+0x46>
 80032f4:	2301      	movs	r3, #1
 80032f6:	71fb      	strb	r3, [r7, #7]
 80032f8:	e001      	b.n	80032fe <DS18B20_Start+0x4a>
	else Response = -1;
 80032fa:	23ff      	movs	r3, #255	; 0xff
 80032fc:	71fb      	strb	r3, [r7, #7]

	delay_us(400); // 480 us delay totally.
 80032fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003302:	f7ff fd4d 	bl	8002da0 <delay_us>

	return Response;
 8003306:	79fb      	ldrb	r3, [r7, #7]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40020000 	.word	0x40020000

08003314 <DS18B20_Write>:


void DS18B20_Write (uint8_t data)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800331e:	2104      	movs	r1, #4
 8003320:	481e      	ldr	r0, [pc, #120]	; (800339c <DS18B20_Write+0x88>)
 8003322:	f7ff ff8b 	bl	800323c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e02e      	b.n	800338a <DS18B20_Write+0x76>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 800332c:	79fa      	ldrb	r2, [r7, #7]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	fa42 f303 	asr.w	r3, r2, r3
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d013      	beq.n	8003364 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800333c:	2104      	movs	r1, #4
 800333e:	4817      	ldr	r0, [pc, #92]	; (800339c <DS18B20_Write+0x88>)
 8003340:	f7ff ff7c 	bl	800323c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8003344:	2200      	movs	r2, #0
 8003346:	2104      	movs	r1, #4
 8003348:	4814      	ldr	r0, [pc, #80]	; (800339c <DS18B20_Write+0x88>)
 800334a:	f003 fb9d 	bl	8006a88 <HAL_GPIO_WritePin>
			delay_us(1);  // wait for 1 us
 800334e:	2001      	movs	r0, #1
 8003350:	f7ff fd26 	bl	8002da0 <delay_us>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8003354:	2104      	movs	r1, #4
 8003356:	4811      	ldr	r0, [pc, #68]	; (800339c <DS18B20_Write+0x88>)
 8003358:	f7ff ff8e 	bl	8003278 <Set_Pin_Input>
			delay_us(50);  // wait for 60 us
 800335c:	2032      	movs	r0, #50	; 0x32
 800335e:	f7ff fd1f 	bl	8002da0 <delay_us>
 8003362:	e00f      	b.n	8003384 <DS18B20_Write+0x70>
		}

		else  // if the bit is low
		{
			// write 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8003364:	2104      	movs	r1, #4
 8003366:	480d      	ldr	r0, [pc, #52]	; (800339c <DS18B20_Write+0x88>)
 8003368:	f7ff ff68 	bl	800323c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 800336c:	2200      	movs	r2, #0
 800336e:	2104      	movs	r1, #4
 8003370:	480a      	ldr	r0, [pc, #40]	; (800339c <DS18B20_Write+0x88>)
 8003372:	f003 fb89 	bl	8006a88 <HAL_GPIO_WritePin>
			delay_us(50);  // wait for 60 us
 8003376:	2032      	movs	r0, #50	; 0x32
 8003378:	f7ff fd12 	bl	8002da0 <delay_us>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 800337c:	2104      	movs	r1, #4
 800337e:	4807      	ldr	r0, [pc, #28]	; (800339c <DS18B20_Write+0x88>)
 8003380:	f7ff ff7a 	bl	8003278 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3301      	adds	r3, #1
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b07      	cmp	r3, #7
 800338e:	ddcd      	ble.n	800332c <DS18B20_Write+0x18>
		}
	}
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40020000 	.word	0x40020000

080033a0 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80033aa:	2104      	movs	r1, #4
 80033ac:	481a      	ldr	r0, [pc, #104]	; (8003418 <DS18B20_Read+0x78>)
 80033ae:	f7ff ff63 	bl	8003278 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	603b      	str	r3, [r7, #0]
 80033b6:	e026      	b.n	8003406 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 80033b8:	2104      	movs	r1, #4
 80033ba:	4817      	ldr	r0, [pc, #92]	; (8003418 <DS18B20_Read+0x78>)
 80033bc:	f7ff ff3e 	bl	800323c <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 80033c0:	2200      	movs	r2, #0
 80033c2:	2104      	movs	r1, #4
 80033c4:	4814      	ldr	r0, [pc, #80]	; (8003418 <DS18B20_Read+0x78>)
 80033c6:	f003 fb5f 	bl	8006a88 <HAL_GPIO_WritePin>
		delay_us(1);  // wait for > 1us
 80033ca:	2001      	movs	r0, #1
 80033cc:	f7ff fce8 	bl	8002da0 <delay_us>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80033d0:	2104      	movs	r1, #4
 80033d2:	4811      	ldr	r0, [pc, #68]	; (8003418 <DS18B20_Read+0x78>)
 80033d4:	f7ff ff50 	bl	8003278 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 80033d8:	2104      	movs	r1, #4
 80033da:	480f      	ldr	r0, [pc, #60]	; (8003418 <DS18B20_Read+0x78>)
 80033dc:	f003 fb3c 	bl	8006a58 <HAL_GPIO_ReadPin>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 80033e6:	2201      	movs	r2, #1
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	b25a      	sxtb	r2, r3
 80033f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	b25b      	sxtb	r3, r3
 80033f8:	71fb      	strb	r3, [r7, #7]
		}
		delay_us(50);  // wait for 60 us
 80033fa:	2032      	movs	r0, #50	; 0x32
 80033fc:	f7ff fcd0 	bl	8002da0 <delay_us>
	for (int i=0;i<8;i++)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	3301      	adds	r3, #1
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b07      	cmp	r3, #7
 800340a:	ddd5      	ble.n	80033b8 <DS18B20_Read+0x18>
	}
	return value;
 800340c:	79fb      	ldrb	r3, [r7, #7]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40020000 	.word	0x40020000

0800341c <Get_Temperature_DS18B20>:

float Get_Temperature_DS18B20()
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
		  DS18B20_Start ();
 8003420:	f7ff ff48 	bl	80032b4 <DS18B20_Start>
		  HAL_Delay(1);
 8003424:	2001      	movs	r0, #1
 8003426:	f002 f843 	bl	80054b0 <HAL_Delay>
		  DS18B20_Write (0xCC);  // skip ROM
 800342a:	20cc      	movs	r0, #204	; 0xcc
 800342c:	f7ff ff72 	bl	8003314 <DS18B20_Write>
		  DS18B20_Write (0x44);  // convert t
 8003430:	2044      	movs	r0, #68	; 0x44
 8003432:	f7ff ff6f 	bl	8003314 <DS18B20_Write>
		  HAL_Delay (800);
 8003436:	f44f 7048 	mov.w	r0, #800	; 0x320
 800343a:	f002 f839 	bl	80054b0 <HAL_Delay>

		  DS18B20_Start ();
 800343e:	f7ff ff39 	bl	80032b4 <DS18B20_Start>
	      HAL_Delay(1);
 8003442:	2001      	movs	r0, #1
 8003444:	f002 f834 	bl	80054b0 <HAL_Delay>
	      DS18B20_Write (0xCC);  // skip ROM
 8003448:	20cc      	movs	r0, #204	; 0xcc
 800344a:	f7ff ff63 	bl	8003314 <DS18B20_Write>
	      DS18B20_Write (0xBE);  // Read Scratch-pad
 800344e:	20be      	movs	r0, #190	; 0xbe
 8003450:	f7ff ff60 	bl	8003314 <DS18B20_Write>
	      Temp_byte1 = DS18B20_Read();
 8003454:	f7ff ffa4 	bl	80033a0 <DS18B20_Read>
 8003458:	4603      	mov	r3, r0
 800345a:	461a      	mov	r2, r3
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <Get_Temperature_DS18B20+0x88>)
 800345e:	701a      	strb	r2, [r3, #0]
		  Temp_byte2 = DS18B20_Read();
 8003460:	f7ff ff9e 	bl	80033a0 <DS18B20_Read>
 8003464:	4603      	mov	r3, r0
 8003466:	461a      	mov	r2, r3
 8003468:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <Get_Temperature_DS18B20+0x8c>)
 800346a:	701a      	strb	r2, [r3, #0]
		  TEMP = (Temp_byte2<<8)|Temp_byte1;
 800346c:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <Get_Temperature_DS18B20+0x8c>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	b21a      	sxth	r2, r3
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <Get_Temperature_DS18B20+0x88>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b21b      	sxth	r3, r3
 800347a:	4313      	orrs	r3, r2
 800347c:	b21b      	sxth	r3, r3
 800347e:	b29a      	uxth	r2, r3
 8003480:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <Get_Temperature_DS18B20+0x90>)
 8003482:	801a      	strh	r2, [r3, #0]
		  return (float)TEMP/16;
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <Get_Temperature_DS18B20+0x90>)
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	ee07 3a90 	vmov	s15, r3
 800348c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003490:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003494:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003498:	eef0 7a66 	vmov.f32	s15, s13
}
 800349c:	eeb0 0a67 	vmov.f32	s0, s15
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20001178 	.word	0x20001178
 80034a8:	20001179 	.word	0x20001179
 80034ac:	2000117a 	.word	0x2000117a

080034b0 <TDS_Control>:
/*=====================================DS18B20_End=================================*/

/*=====================================Interrupt_Start=========================*/

void TDS_Control()
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
	   uint32_t i = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	607b      	str	r3, [r7, #4]
	   if((time_tds%90) == 0)
 80034ba:	4b25      	ldr	r3, [pc, #148]	; (8003550 <TDS_Control+0xa0>)
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	085a      	lsrs	r2, r3, #1
 80034c0:	4924      	ldr	r1, [pc, #144]	; (8003554 <TDS_Control+0xa4>)
 80034c2:	fba1 1202 	umull	r1, r2, r1, r2
 80034c6:	0952      	lsrs	r2, r2, #5
 80034c8:	215a      	movs	r1, #90	; 0x5a
 80034ca:	fb01 f202 	mul.w	r2, r1, r2
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d132      	bne.n	800353c <TDS_Control+0x8c>
	   {
		   if(TDS < (TDS_SetPoint-TDS_THR_SetPoint))
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <TDS_Control+0xa8>)
 80034d8:	ed93 7a00 	vldr	s14, [r3]
 80034dc:	4b1f      	ldr	r3, [pc, #124]	; (800355c <TDS_Control+0xac>)
 80034de:	edd3 7a00 	vldr	s15, [r3]
 80034e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034e6:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <TDS_Control+0xb0>)
 80034e8:	edd3 7a00 	vldr	s15, [r3]
 80034ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f4:	dd1f      	ble.n	8003536 <TDS_Control+0x86>
		   {
			   HAL_GPIO_WritePin(NutriA_GPIO_Port,NutriA_Pin, GPIO_PIN_RESET);
 80034f6:	2200      	movs	r2, #0
 80034f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034fc:	4819      	ldr	r0, [pc, #100]	; (8003564 <TDS_Control+0xb4>)
 80034fe:	f003 fac3 	bl	8006a88 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(NutriB_GPIO_Port,NutriB_Pin, GPIO_PIN_RESET);
 8003502:	2200      	movs	r2, #0
 8003504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003508:	4816      	ldr	r0, [pc, #88]	; (8003564 <TDS_Control+0xb4>)
 800350a:	f003 fabd 	bl	8006a88 <HAL_GPIO_WritePin>
			   while(i<14000000)
 800350e:	e002      	b.n	8003516 <TDS_Control+0x66>
			   {
				   i++;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3301      	adds	r3, #1
 8003514:	607b      	str	r3, [r7, #4]
			   while(i<14000000)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a13      	ldr	r2, [pc, #76]	; (8003568 <TDS_Control+0xb8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d3f8      	bcc.n	8003510 <TDS_Control+0x60>
			   }

			   HAL_GPIO_WritePin(NutriA_GPIO_Port,NutriA_Pin, GPIO_PIN_SET);
 800351e:	2201      	movs	r2, #1
 8003520:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003524:	480f      	ldr	r0, [pc, #60]	; (8003564 <TDS_Control+0xb4>)
 8003526:	f003 faaf 	bl	8006a88 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(NutriB_GPIO_Port,NutriB_Pin, GPIO_PIN_SET);
 800352a:	2201      	movs	r2, #1
 800352c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003530:	480c      	ldr	r0, [pc, #48]	; (8003564 <TDS_Control+0xb4>)
 8003532:	f003 faa9 	bl	8006a88 <HAL_GPIO_WritePin>
		   }

		   time_tds = 1;
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <TDS_Control+0xa0>)
 8003538:	2201      	movs	r2, #1
 800353a:	801a      	strh	r2, [r3, #0]
	   }
	   time_tds++;
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <TDS_Control+0xa0>)
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	4b02      	ldr	r3, [pc, #8]	; (8003550 <TDS_Control+0xa0>)
 8003546:	801a      	strh	r2, [r3, #0]
}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	2000053c 	.word	0x2000053c
 8003554:	b60b60b7 	.word	0xb60b60b7
 8003558:	2000054c 	.word	0x2000054c
 800355c:	20000550 	.word	0x20000550
 8003560:	20000540 	.word	0x20000540
 8003564:	40020c00 	.word	0x40020c00
 8003568:	00d59f80 	.word	0x00d59f80

0800356c <PH_Control>:

void PH_Control()
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
	   uint32_t i = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	607b      	str	r3, [r7, #4]
	   if((time_ph%90) == 0)
 8003576:	4b32      	ldr	r3, [pc, #200]	; (8003640 <PH_Control+0xd4>)
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	085a      	lsrs	r2, r3, #1
 800357c:	4931      	ldr	r1, [pc, #196]	; (8003644 <PH_Control+0xd8>)
 800357e:	fba1 1202 	umull	r1, r2, r1, r2
 8003582:	0952      	lsrs	r2, r2, #5
 8003584:	215a      	movs	r1, #90	; 0x5a
 8003586:	fb01 f202 	mul.w	r2, r1, r2
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d14b      	bne.n	800362a <PH_Control+0xbe>
	   {
		   if(PH < (PH_SetPoint-PH_THR_SetPoint))
 8003592:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <PH_Control+0xdc>)
 8003594:	ed93 7a00 	vldr	s14, [r3]
 8003598:	4b2c      	ldr	r3, [pc, #176]	; (800364c <PH_Control+0xe0>)
 800359a:	edd3 7a00 	vldr	s15, [r3]
 800359e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035a2:	4b2b      	ldr	r3, [pc, #172]	; (8003650 <PH_Control+0xe4>)
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b0:	dd14      	ble.n	80035dc <PH_Control+0x70>
		   {
			   HAL_GPIO_WritePin(BASE_GPIO_Port,BASE_Pin, GPIO_PIN_RESET);
 80035b2:	2200      	movs	r2, #0
 80035b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035b8:	4826      	ldr	r0, [pc, #152]	; (8003654 <PH_Control+0xe8>)
 80035ba:	f003 fa65 	bl	8006a88 <HAL_GPIO_WritePin>
			   while(i<14000000)
 80035be:	e002      	b.n	80035c6 <PH_Control+0x5a>
			   {
				   i++;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3301      	adds	r3, #1
 80035c4:	607b      	str	r3, [r7, #4]
			   while(i<14000000)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a23      	ldr	r2, [pc, #140]	; (8003658 <PH_Control+0xec>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d3f8      	bcc.n	80035c0 <PH_Control+0x54>
			   }
			   HAL_GPIO_WritePin(BASE_GPIO_Port,BASE_Pin, GPIO_PIN_SET);
 80035ce:	2201      	movs	r2, #1
 80035d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035d4:	481f      	ldr	r0, [pc, #124]	; (8003654 <PH_Control+0xe8>)
 80035d6:	f003 fa57 	bl	8006a88 <HAL_GPIO_WritePin>
 80035da:	e023      	b.n	8003624 <PH_Control+0xb8>
		   }
		   else if(PH > (PH_SetPoint + PH_THR_SetPoint))
 80035dc:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <PH_Control+0xdc>)
 80035de:	ed93 7a00 	vldr	s14, [r3]
 80035e2:	4b1a      	ldr	r3, [pc, #104]	; (800364c <PH_Control+0xe0>)
 80035e4:	edd3 7a00 	vldr	s15, [r3]
 80035e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035ec:	4b18      	ldr	r3, [pc, #96]	; (8003650 <PH_Control+0xe4>)
 80035ee:	edd3 7a00 	vldr	s15, [r3]
 80035f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fa:	d513      	bpl.n	8003624 <PH_Control+0xb8>
		   {
			   HAL_GPIO_WritePin(ACID_GPIO_Port,ACID_Pin, GPIO_PIN_RESET);
 80035fc:	2200      	movs	r2, #0
 80035fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003602:	4814      	ldr	r0, [pc, #80]	; (8003654 <PH_Control+0xe8>)
 8003604:	f003 fa40 	bl	8006a88 <HAL_GPIO_WritePin>
			   while(i<14000000)
 8003608:	e002      	b.n	8003610 <PH_Control+0xa4>
			   {
				   i++;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3301      	adds	r3, #1
 800360e:	607b      	str	r3, [r7, #4]
			   while(i<14000000)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a11      	ldr	r2, [pc, #68]	; (8003658 <PH_Control+0xec>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d3f8      	bcc.n	800360a <PH_Control+0x9e>
			   }
			   HAL_GPIO_WritePin(ACID_GPIO_Port,ACID_Pin, GPIO_PIN_SET);
 8003618:	2201      	movs	r2, #1
 800361a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800361e:	480d      	ldr	r0, [pc, #52]	; (8003654 <PH_Control+0xe8>)
 8003620:	f003 fa32 	bl	8006a88 <HAL_GPIO_WritePin>
		   }
		   time_ph = 1;
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <PH_Control+0xd4>)
 8003626:	2201      	movs	r2, #1
 8003628:	801a      	strh	r2, [r3, #0]
	   }
	   time_ph++;
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <PH_Control+0xd4>)
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	4b03      	ldr	r3, [pc, #12]	; (8003640 <PH_Control+0xd4>)
 8003634:	801a      	strh	r2, [r3, #0]
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	2000053e 	.word	0x2000053e
 8003644:	b60b60b7 	.word	0xb60b60b7
 8003648:	20000558 	.word	0x20000558
 800364c:	20000554 	.word	0x20000554
 8003650:	20000544 	.word	0x20000544
 8003654:	40020c00 	.word	0x40020c00
 8003658:	00d59f80 	.word	0x00d59f80

0800365c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

	 if(htim->Instance == htim4.Instance)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d10a      	bne.n	8003686 <HAL_TIM_PeriodElapsedCallback+0x2a>
	 {
	   HAL_GPIO_TogglePin(test_pin_GPIO_Port,test_pin_Pin);
 8003670:	2140      	movs	r1, #64	; 0x40
 8003672:	4808      	ldr	r0, [pc, #32]	; (8003694 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003674:	f003 fa21 	bl	8006aba <HAL_GPIO_TogglePin>
	   Handle_value_send(Value);
 8003678:	2000      	movs	r0, #0
 800367a:	f7ff fc1d 	bl	8002eb8 <Handle_value_send>
	   TDS_Control();
 800367e:	f7ff ff17 	bl	80034b0 <TDS_Control>
	   PH_Control();
 8003682:	f7ff ff73 	bl	800356c <PH_Control>

	 }
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000408 	.word	0x20000408
 8003694:	40020000 	.word	0x40020000

08003698 <Wifi_Config>:
/*=====================================Interrupt_End=========================*/

/*=====================================WIFI_CONFIG_Start=========================*/
void Wifi_Config()
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
	Handle_value_send(WifiConfig);
 800369c:	2002      	movs	r0, #2
 800369e:	f7ff fc0b 	bl	8002eb8 <Handle_value_send>
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <get_time>:

float Ring_Buffer_PH[10]  = {0};
float Ring_Buffer_TDS[10] = {0};
//
void get_time(void)
{
 80036a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036aa:	b09f      	sub	sp, #124	; 0x7c
 80036ac:	af04      	add	r7, sp, #16
	char tmp_string[100] = {0};
 80036ae:	2300      	movs	r3, #0
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	f107 0308 	add.w	r3, r7, #8
 80036b6:	2260      	movs	r2, #96	; 0x60
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f00a fd20 	bl	800e100 <memset>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80036c0:	2200      	movs	r2, #0
 80036c2:	4919      	ldr	r1, [pc, #100]	; (8003728 <get_time+0x80>)
 80036c4:	4819      	ldr	r0, [pc, #100]	; (800372c <get_time+0x84>)
 80036c6:	f004 fc61 	bl	8007f8c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80036ca:	2200      	movs	r2, #0
 80036cc:	4918      	ldr	r1, [pc, #96]	; (8003730 <get_time+0x88>)
 80036ce:	4817      	ldr	r0, [pc, #92]	; (800372c <get_time+0x84>)
 80036d0:	f004 fcba 	bl	8008048 <HAL_RTC_GetDate>
	sprintf(tmp_string,"%d/%d/%d- %d:%d:%d\n",sDate.Date,sDate.Month,sDate.Year,sTime.Hours,sTime.Minutes,sTime.Seconds);
 80036d4:	4b16      	ldr	r3, [pc, #88]	; (8003730 <get_time+0x88>)
 80036d6:	789b      	ldrb	r3, [r3, #2]
 80036d8:	461d      	mov	r5, r3
 80036da:	4b15      	ldr	r3, [pc, #84]	; (8003730 <get_time+0x88>)
 80036dc:	785b      	ldrb	r3, [r3, #1]
 80036de:	461e      	mov	r6, r3
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <get_time+0x88>)
 80036e2:	78db      	ldrb	r3, [r3, #3]
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <get_time+0x80>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	4619      	mov	r1, r3
 80036ec:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <get_time+0x80>)
 80036ee:	785b      	ldrb	r3, [r3, #1]
 80036f0:	461c      	mov	r4, r3
 80036f2:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <get_time+0x80>)
 80036f4:	789b      	ldrb	r3, [r3, #2]
 80036f6:	1d38      	adds	r0, r7, #4
 80036f8:	9303      	str	r3, [sp, #12]
 80036fa:	9402      	str	r4, [sp, #8]
 80036fc:	9101      	str	r1, [sp, #4]
 80036fe:	9200      	str	r2, [sp, #0]
 8003700:	4633      	mov	r3, r6
 8003702:	462a      	mov	r2, r5
 8003704:	490b      	ldr	r1, [pc, #44]	; (8003734 <get_time+0x8c>)
 8003706:	f00b fb83 	bl	800ee10 <siprintf>
	memset(tmp_string,0,strlen(tmp_string));
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	4618      	mov	r0, r3
 800370e:	f7fc fd69 	bl	80001e4 <strlen>
 8003712:	4602      	mov	r2, r0
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f00a fcf1 	bl	800e100 <memset>
}
 800371e:	bf00      	nop
 8003720:	376c      	adds	r7, #108	; 0x6c
 8003722:	46bd      	mov	sp, r7
 8003724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003726:	bf00      	nop
 8003728:	2000117c 	.word	0x2000117c
 800372c:	20000338 	.word	0x20000338
 8003730:	20001190 	.word	0x20001190
 8003734:	08012d08 	.word	0x08012d08

08003738 <ADC_Select_CH0>:
void ADC_Select_CH0 (void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800373e:	463b      	mov	r3, r7
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 800374a:	2300      	movs	r3, #0
 800374c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800374e:	2301      	movs	r3, #1
 8003750:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003752:	2306      	movs	r3, #6
 8003754:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003756:	463b      	mov	r3, r7
 8003758:	4619      	mov	r1, r3
 800375a:	4806      	ldr	r0, [pc, #24]	; (8003774 <ADC_Select_CH0+0x3c>)
 800375c:	f002 f8ae 	bl	80058bc <HAL_ADC_ConfigChannel>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <ADC_Select_CH0+0x32>
	  {
	    Error_Handler();
 8003766:	f000 fce3 	bl	8004130 <Error_Handler>
	  }
}
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	2000023c 	.word	0x2000023c

08003778 <ADC_Select_CH1>:

void ADC_Select_CH1 (void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800377e:	463b      	mov	r3, r7
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 800378a:	2301      	movs	r3, #1
 800378c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800378e:	2301      	movs	r3, #1
 8003790:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8003792:	2302      	movs	r3, #2
 8003794:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003796:	463b      	mov	r3, r7
 8003798:	4619      	mov	r1, r3
 800379a:	4806      	ldr	r0, [pc, #24]	; (80037b4 <ADC_Select_CH1+0x3c>)
 800379c:	f002 f88e 	bl	80058bc <HAL_ADC_ConfigChannel>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <ADC_Select_CH1+0x32>
	  {
	    Error_Handler();
 80037a6:	f000 fcc3 	bl	8004130 <Error_Handler>
	  }
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	2000023c 	.word	0x2000023c

080037b8 <get_adc>:
void get_adc()
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
	ADC_Select_CH0();
 80037bc:	f7ff ffbc 	bl	8003738 <ADC_Select_CH0>
	  HAL_ADC_Start(&hadc1);
 80037c0:	4813      	ldr	r0, [pc, #76]	; (8003810 <get_adc+0x58>)
 80037c2:	f001 fedd 	bl	8005580 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80037c6:	210a      	movs	r1, #10
 80037c8:	4811      	ldr	r0, [pc, #68]	; (8003810 <get_adc+0x58>)
 80037ca:	f001 ffde 	bl	800578a <HAL_ADC_PollForConversion>
	  ADC_Value[0] = HAL_ADC_GetValue(&hadc1);
 80037ce:	4810      	ldr	r0, [pc, #64]	; (8003810 <get_adc+0x58>)
 80037d0:	f002 f866 	bl	80058a0 <HAL_ADC_GetValue>
 80037d4:	4603      	mov	r3, r0
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <get_adc+0x5c>)
 80037da:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80037dc:	480c      	ldr	r0, [pc, #48]	; (8003810 <get_adc+0x58>)
 80037de:	f001 ffa1 	bl	8005724 <HAL_ADC_Stop>
	ADC_Select_CH1();
 80037e2:	f7ff ffc9 	bl	8003778 <ADC_Select_CH1>
	  ADC_Select_CH1();
 80037e6:	f7ff ffc7 	bl	8003778 <ADC_Select_CH1>
	  HAL_ADC_Start(&hadc1);
 80037ea:	4809      	ldr	r0, [pc, #36]	; (8003810 <get_adc+0x58>)
 80037ec:	f001 fec8 	bl	8005580 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80037f0:	210a      	movs	r1, #10
 80037f2:	4807      	ldr	r0, [pc, #28]	; (8003810 <get_adc+0x58>)
 80037f4:	f001 ffc9 	bl	800578a <HAL_ADC_PollForConversion>
	  ADC_Value[1] = HAL_ADC_GetValue(&hadc1);
 80037f8:	4805      	ldr	r0, [pc, #20]	; (8003810 <get_adc+0x58>)
 80037fa:	f002 f851 	bl	80058a0 <HAL_ADC_GetValue>
 80037fe:	4603      	mov	r3, r0
 8003800:	b29a      	uxth	r2, r3
 8003802:	4b04      	ldr	r3, [pc, #16]	; (8003814 <get_adc+0x5c>)
 8003804:	805a      	strh	r2, [r3, #2]
	  HAL_ADC_Stop(&hadc1);
 8003806:	4802      	ldr	r0, [pc, #8]	; (8003810 <get_adc+0x58>)
 8003808:	f001 ff8c 	bl	8005724 <HAL_ADC_Stop>
	}
 800380c:	bf00      	nop
 800380e:	bd80      	pop	{r7, pc}
 8003810:	2000023c 	.word	0x2000023c
 8003814:	20001160 	.word	0x20001160

08003818 <PH_average>:
float PH_average(uint32_t t, float ph)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	ed87 0a00 	vstr	s0, [r7]
	return (float)(ph/t);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382e:	ed97 7a00 	vldr	s14, [r7]
 8003832:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003836:	eef0 7a66 	vmov.f32	s15, s13
}
 800383a:	eeb0 0a67 	vmov.f32	s0, s15
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <TDS_average>:

float TDS_average(uint32_t t, float tds)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	ed87 0a00 	vstr	s0, [r7]
	return (float)(tds/t);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385e:	ed97 7a00 	vldr	s14, [r7]
 8003862:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003866:	eef0 7a66 	vmov.f32	s15, s13
}
 800386a:	eeb0 0a67 	vmov.f32	s0, s15
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800387e:	f001 fda5 	bl	80053cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003882:	f000 f909 	bl	8003a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003886:	f000 fb89 	bl	8003f9c <MX_GPIO_Init>
  MX_DMA_Init();
 800388a:	f000 fb67 	bl	8003f5c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800388e:	f000 fb3b 	bl	8003f08 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8003892:	f007 f9cb 	bl	800ac2c <MX_FATFS_Init>
  MX_ADC1_Init();
 8003896:	f000 f969 	bl	8003b6c <MX_ADC1_Init>
  MX_I2C1_Init();
 800389a:	f000 f9a9 	bl	8003bf0 <MX_I2C1_Init>
  MX_TIM4_Init();
 800389e:	f000 faaf 	bl	8003e00 <MX_TIM4_Init>
  MX_IWDG_Init();
 80038a2:	f000 fa01 	bl	8003ca8 <MX_IWDG_Init>
  MX_TIM6_Init();
 80038a6:	f000 faf9 	bl	8003e9c <MX_TIM6_Init>
  MX_SPI2_Init();
 80038aa:	f000 fa73 	bl	8003d94 <MX_SPI2_Init>
  MX_SPI1_Init();
 80038ae:	f000 fa3b 	bl	8003d28 <MX_SPI1_Init>
  MX_I2C3_Init();
 80038b2:	f000 f9cb 	bl	8003c4c <MX_I2C3_Init>
  MX_RTC_Init();
 80038b6:	f000 fa11 	bl	8003cdc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
 //=========================================================================  TESTING


 //=========================================================================  CONFIG_MAIN
  HAL_TIM_Base_Start_IT(&htim4);
 80038ba:	4863      	ldr	r0, [pc, #396]	; (8003a48 <main+0x1d0>)
 80038bc:	f005 fb22 	bl	8008f04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 80038c0:	4862      	ldr	r0, [pc, #392]	; (8003a4c <main+0x1d4>)
 80038c2:	f005 fab7 	bl	8008e34 <HAL_TIM_Base_Start>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1,UART1_TEMPBUFFER,SIZEOF_COMMAND);
 80038c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ca:	4961      	ldr	r1, [pc, #388]	; (8003a50 <main+0x1d8>)
 80038cc:	4861      	ldr	r0, [pc, #388]	; (8003a54 <main+0x1dc>)
 80038ce:	f006 f858 	bl	8009982 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 80038d2:	4b61      	ldr	r3, [pc, #388]	; (8003a58 <main+0x1e0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b5f      	ldr	r3, [pc, #380]	; (8003a58 <main+0x1e0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0208 	bic.w	r2, r2, #8
 80038e0:	601a      	str	r2, [r3, #0]
//
  for(int i =0;i<5;i++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	e009      	b.n	80038fc <main+0x84>
  {
	  HAL_GPIO_TogglePin(test_pin_GPIO_Port,test_pin_Pin);
 80038e8:	2140      	movs	r1, #64	; 0x40
 80038ea:	485c      	ldr	r0, [pc, #368]	; (8003a5c <main+0x1e4>)
 80038ec:	f003 f8e5 	bl	8006aba <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 80038f0:	20c8      	movs	r0, #200	; 0xc8
 80038f2:	f001 fddd 	bl	80054b0 <HAL_Delay>
  for(int i =0;i<5;i++)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3301      	adds	r3, #1
 80038fa:	607b      	str	r3, [r7, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b04      	cmp	r3, #4
 8003900:	ddf2      	ble.n	80038e8 <main+0x70>
  }
  HAL_Delay(50);
 8003902:	2032      	movs	r0, #50	; 0x32
 8003904:	f001 fdd4 	bl	80054b0 <HAL_Delay>
  lcd_init();
 8003908:	f7fe f909 	bl	8001b1e <lcd_init>
  Rotary_init();
 800390c:	f7fe f9f4 	bl	8001cf8 <Rotary_init>
  lcd_clear();
 8003910:	f7fe f8ee 	bl	8001af0 <lcd_clear>
  W25qxx_Init();
 8003914:	f001 fa2a 	bl	8004d6c <W25qxx_Init>

//  Save_SetPoint(flash_setpoint);
//  Save_SetPoint(flash_calibration_tds);
//  Save_SetPoint(flash_calibration_ph);
  Read_SetPoint(flash_setpoint);
 8003918:	2000      	movs	r0, #0
 800391a:	f7ff fc43 	bl	80031a4 <Read_SetPoint>
  Read_SetPoint(flash_calibration_tds);
 800391e:	2002      	movs	r0, #2
 8003920:	f7ff fc40 	bl	80031a4 <Read_SetPoint>
  Read_SetPoint(flash_calibration_ph);
 8003924:	2001      	movs	r0, #1
 8003926:	f7ff fc3d 	bl	80031a4 <Read_SetPoint>
  SD_Handling(SD_Read);
 800392a:	484d      	ldr	r0, [pc, #308]	; (8003a60 <main+0x1e8>)
 800392c:	f000 fc06 	bl	800413c <SD_Handling>
  {
	  //=========================================================================  TESTING


	  //=========================================================================  CONFIG_MAIN
	  LCD_Display();
 8003930:	f7fe fdee 	bl	8002510 <LCD_Display>
      get_adc();
 8003934:	f7ff ff40 	bl	80037b8 <get_adc>
	  PH_t = PH_Calculator(ph_a_value, ph_b_value, ADC_Value[0]);
 8003938:	4b4a      	ldr	r3, [pc, #296]	; (8003a64 <main+0x1ec>)
 800393a:	edd3 7a00 	vldr	s15, [r3]
 800393e:	4b4a      	ldr	r3, [pc, #296]	; (8003a68 <main+0x1f0>)
 8003940:	ed93 7a00 	vldr	s14, [r3]
 8003944:	4b49      	ldr	r3, [pc, #292]	; (8003a6c <main+0x1f4>)
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	eef0 0a47 	vmov.f32	s1, s14
 800394e:	eeb0 0a67 	vmov.f32	s0, s15
 8003952:	f7ff fb69 	bl	8003028 <PH_Calculator>
 8003956:	eef0 7a40 	vmov.f32	s15, s0
 800395a:	4b45      	ldr	r3, [pc, #276]	; (8003a70 <main+0x1f8>)
 800395c:	edc3 7a00 	vstr	s15, [r3]
	  TDS_t = TDS_Calculator(tds_k_value, ADC_Value[1]);
 8003960:	4b44      	ldr	r3, [pc, #272]	; (8003a74 <main+0x1fc>)
 8003962:	edd3 7a00 	vldr	s15, [r3]
 8003966:	4b41      	ldr	r3, [pc, #260]	; (8003a6c <main+0x1f4>)
 8003968:	885b      	ldrh	r3, [r3, #2]
 800396a:	4618      	mov	r0, r3
 800396c:	eeb0 0a67 	vmov.f32	s0, s15
 8003970:	f7ff fb92 	bl	8003098 <TDS_Calculator>
 8003974:	eef0 7a40 	vmov.f32	s15, s0
 8003978:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <main+0x200>)
 800397a:	edc3 7a00 	vstr	s15, [r3]
	  tong_ph = tong_ph + PH_t;
 800397e:	4b3f      	ldr	r3, [pc, #252]	; (8003a7c <main+0x204>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800398a:	4b39      	ldr	r3, [pc, #228]	; (8003a70 <main+0x1f8>)
 800398c:	edd3 7a00 	vldr	s15, [r3]
 8003990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003998:	ee17 2a90 	vmov	r2, s15
 800399c:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <main+0x204>)
 800399e:	601a      	str	r2, [r3, #0]
	  tong_tds = tong_tds + TDS_t;
 80039a0:	4b37      	ldr	r3, [pc, #220]	; (8003a80 <main+0x208>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	ee07 3a90 	vmov	s15, r3
 80039a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039ac:	4b32      	ldr	r3, [pc, #200]	; (8003a78 <main+0x200>)
 80039ae:	edd3 7a00 	vldr	s15, [r3]
 80039b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ba:	ee17 2a90 	vmov	r2, s15
 80039be:	4b30      	ldr	r3, [pc, #192]	; (8003a80 <main+0x208>)
 80039c0:	601a      	str	r2, [r3, #0]
	  tim++;
 80039c2:	4b30      	ldr	r3, [pc, #192]	; (8003a84 <main+0x20c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3301      	adds	r3, #1
 80039c8:	4a2e      	ldr	r2, [pc, #184]	; (8003a84 <main+0x20c>)
 80039ca:	6013      	str	r3, [r2, #0]
      if(tim == 100)
 80039cc:	4b2d      	ldr	r3, [pc, #180]	; (8003a84 <main+0x20c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b64      	cmp	r3, #100	; 0x64
 80039d2:	d133      	bne.n	8003a3c <main+0x1c4>
      {
//    	  PH = PH_Calculator(ph_a_value, ph_b_value, ADC_Value[0]);
//    	  TDS = TDS_Calculator(tds_k_value, ADC_Value[1]);
//    	  Temperature = Get_Temperature_DS18B20();
    	  PH = PH_average(tim, tong_ph);
 80039d4:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <main+0x20c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a28      	ldr	r2, [pc, #160]	; (8003a7c <main+0x204>)
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	ee07 2a90 	vmov	s15, r2
 80039e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e4:	eeb0 0a67 	vmov.f32	s0, s15
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff ff15 	bl	8003818 <PH_average>
 80039ee:	eef0 7a40 	vmov.f32	s15, s0
 80039f2:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <main+0x210>)
 80039f4:	edc3 7a00 	vstr	s15, [r3]
    	  TDS = TDS_average(tim, tong_tds);
 80039f8:	4b22      	ldr	r3, [pc, #136]	; (8003a84 <main+0x20c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <main+0x208>)
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	ee07 2a90 	vmov	s15, r2
 8003a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a08:	eeb0 0a67 	vmov.f32	s0, s15
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ff1b 	bl	8003848 <TDS_average>
 8003a12:	eef0 7a40 	vmov.f32	s15, s0
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <main+0x214>)
 8003a18:	edc3 7a00 	vstr	s15, [r3]
    	  Temperature = Get_Temperature_DS18B20();
 8003a1c:	f7ff fcfe 	bl	800341c <Get_Temperature_DS18B20>
 8003a20:	eef0 7a40 	vmov.f32	s15, s0
 8003a24:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <main+0x218>)
 8003a26:	edc3 7a00 	vstr	s15, [r3]
    	  tim = 0;
 8003a2a:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <main+0x20c>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
    	  tong_ph = 0;
 8003a30:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <main+0x204>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
    	  tong_tds = 0;
 8003a36:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <main+0x208>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

      }
//	  Ring_Buffer_PH[tim] = PH_t;
//	  Ring_Buffer_TDS[tim] = TDS_t;
      get_time();
 8003a3c:	f7ff fe34 	bl	80036a8 <get_time>
	  HAL_IWDG_Refresh(&hiwdg);
 8003a40:	4814      	ldr	r0, [pc, #80]	; (8003a94 <main+0x21c>)
 8003a42:	f003 fce2 	bl	800740a <HAL_IWDG_Refresh>
	  LCD_Display();
 8003a46:	e773      	b.n	8003930 <main+0xb8>
 8003a48:	20000408 	.word	0x20000408
 8003a4c:	20000450 	.word	0x20000450
 8003a50:	20000960 	.word	0x20000960
 8003a54:	20000498 	.word	0x20000498
 8003a58:	200004dc 	.word	0x200004dc
 8003a5c:	40020000 	.word	0x40020000
 8003a60:	20000560 	.word	0x20000560
 8003a64:	2000116c 	.word	0x2000116c
 8003a68:	20001170 	.word	0x20001170
 8003a6c:	20001160 	.word	0x20001160
 8003a70:	200011a0 	.word	0x200011a0
 8003a74:	20001174 	.word	0x20001174
 8003a78:	200011a4 	.word	0x200011a4
 8003a7c:	20001198 	.word	0x20001198
 8003a80:	2000119c 	.word	0x2000119c
 8003a84:	20001194 	.word	0x20001194
 8003a88:	20000544 	.word	0x20000544
 8003a8c:	20000540 	.word	0x20000540
 8003a90:	20000548 	.word	0x20000548
 8003a94:	2000032c 	.word	0x2000032c

08003a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b094      	sub	sp, #80	; 0x50
 8003a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a9e:	f107 0320 	add.w	r3, r7, #32
 8003aa2:	2230      	movs	r2, #48	; 0x30
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f00a fb2a 	bl	800e100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003aac:	f107 030c 	add.w	r3, r7, #12
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003abc:	2300      	movs	r3, #0
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	4b28      	ldr	r3, [pc, #160]	; (8003b64 <SystemClock_Config+0xcc>)
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	4a27      	ldr	r2, [pc, #156]	; (8003b64 <SystemClock_Config+0xcc>)
 8003ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aca:	6413      	str	r3, [r2, #64]	; 0x40
 8003acc:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <SystemClock_Config+0xcc>)
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ad8:	2300      	movs	r3, #0
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <SystemClock_Config+0xd0>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a21      	ldr	r2, [pc, #132]	; (8003b68 <SystemClock_Config+0xd0>)
 8003ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b1f      	ldr	r3, [pc, #124]	; (8003b68 <SystemClock_Config+0xd0>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003af4:	230a      	movs	r3, #10
 8003af6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003af8:	2301      	movs	r3, #1
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003afc:	2310      	movs	r3, #16
 8003afe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003b00:	2301      	movs	r3, #1
 8003b02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b04:	2302      	movs	r3, #2
 8003b06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003b10:	2348      	movs	r3, #72	; 0x48
 8003b12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b14:	2302      	movs	r3, #2
 8003b16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003b18:	2304      	movs	r3, #4
 8003b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b1c:	f107 0320 	add.w	r3, r7, #32
 8003b20:	4618      	mov	r0, r3
 8003b22:	f003 fc83 	bl	800742c <HAL_RCC_OscConfig>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003b2c:	f000 fb00 	bl	8004130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b30:	230f      	movs	r3, #15
 8003b32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b34:	2302      	movs	r3, #2
 8003b36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b46:	f107 030c 	add.w	r3, r7, #12
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f003 fee5 	bl	800791c <HAL_RCC_ClockConfig>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003b58:	f000 faea 	bl	8004130 <Error_Handler>
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	3750      	adds	r7, #80	; 0x50
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40007000 	.word	0x40007000

08003b6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b72:	463b      	mov	r3, r7
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003b7e:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <MX_ADC1_Init+0x78>)
 8003b80:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <MX_ADC1_Init+0x7c>)
 8003b82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003b84:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <MX_ADC1_Init+0x78>)
 8003b86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b8c:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <MX_ADC1_Init+0x78>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <MX_ADC1_Init+0x78>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <MX_ADC1_Init+0x78>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b9e:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <MX_ADC1_Init+0x78>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <MX_ADC1_Init+0x78>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003bac:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <MX_ADC1_Init+0x78>)
 8003bae:	4a0f      	ldr	r2, [pc, #60]	; (8003bec <MX_ADC1_Init+0x80>)
 8003bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003bb2:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <MX_ADC1_Init+0x78>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <MX_ADC1_Init+0x78>)
 8003bba:	2202      	movs	r2, #2
 8003bbc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <MX_ADC1_Init+0x78>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bc6:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <MX_ADC1_Init+0x78>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003bcc:	4805      	ldr	r0, [pc, #20]	; (8003be4 <MX_ADC1_Init+0x78>)
 8003bce:	f001 fc93 	bl	80054f8 <HAL_ADC_Init>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003bd8:	f000 faaa 	bl	8004130 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	2000023c 	.word	0x2000023c
 8003be8:	40012000 	.word	0x40012000
 8003bec:	0f000001 	.word	0x0f000001

08003bf0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003bf4:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <MX_I2C1_Init+0x50>)
 8003bf6:	4a13      	ldr	r2, [pc, #76]	; (8003c44 <MX_I2C1_Init+0x54>)
 8003bf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003bfa:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <MX_I2C1_Init+0x50>)
 8003bfc:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <MX_I2C1_Init+0x58>)
 8003bfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c00:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <MX_I2C1_Init+0x50>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c06:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <MX_I2C1_Init+0x50>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <MX_I2C1_Init+0x50>)
 8003c0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <MX_I2C1_Init+0x50>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <MX_I2C1_Init+0x50>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c20:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <MX_I2C1_Init+0x50>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <MX_I2C1_Init+0x50>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c2c:	4804      	ldr	r0, [pc, #16]	; (8003c40 <MX_I2C1_Init+0x50>)
 8003c2e:	f002 ff5f 	bl	8006af0 <HAL_I2C_Init>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c38:	f000 fa7a 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c3c:	bf00      	nop
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20000284 	.word	0x20000284
 8003c44:	40005400 	.word	0x40005400
 8003c48:	000186a0 	.word	0x000186a0

08003c4c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003c50:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <MX_I2C3_Init+0x50>)
 8003c52:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <MX_I2C3_Init+0x54>)
 8003c54:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <MX_I2C3_Init+0x50>)
 8003c58:	4a12      	ldr	r2, [pc, #72]	; (8003ca4 <MX_I2C3_Init+0x58>)
 8003c5a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <MX_I2C3_Init+0x50>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <MX_I2C3_Init+0x50>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <MX_I2C3_Init+0x50>)
 8003c6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c6e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c70:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <MX_I2C3_Init+0x50>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <MX_I2C3_Init+0x50>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c7c:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <MX_I2C3_Init+0x50>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c82:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <MX_I2C3_Init+0x50>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003c88:	4804      	ldr	r0, [pc, #16]	; (8003c9c <MX_I2C3_Init+0x50>)
 8003c8a:	f002 ff31 	bl	8006af0 <HAL_I2C_Init>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003c94:	f000 fa4c 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003c98:	bf00      	nop
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	200002d8 	.word	0x200002d8
 8003ca0:	40005c00 	.word	0x40005c00
 8003ca4:	000186a0 	.word	0x000186a0

08003ca8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <MX_IWDG_Init+0x2c>)
 8003cae:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <MX_IWDG_Init+0x30>)
 8003cb0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <MX_IWDG_Init+0x2c>)
 8003cb4:	2206      	movs	r2, #6
 8003cb6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8003cb8:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <MX_IWDG_Init+0x2c>)
 8003cba:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8003cbe:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003cc0:	4804      	ldr	r0, [pc, #16]	; (8003cd4 <MX_IWDG_Init+0x2c>)
 8003cc2:	f003 fb60 	bl	8007386 <HAL_IWDG_Init>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8003ccc:	f000 fa30 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003cd0:	bf00      	nop
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	2000032c 	.word	0x2000032c
 8003cd8:	40003000 	.word	0x40003000

08003cdc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <MX_RTC_Init+0x44>)
 8003ce2:	4a10      	ldr	r2, [pc, #64]	; (8003d24 <MX_RTC_Init+0x48>)
 8003ce4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003ce6:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <MX_RTC_Init+0x44>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003cec:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <MX_RTC_Init+0x44>)
 8003cee:	227f      	movs	r2, #127	; 0x7f
 8003cf0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <MX_RTC_Init+0x44>)
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003cf8:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <MX_RTC_Init+0x44>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003cfe:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <MX_RTC_Init+0x44>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <MX_RTC_Init+0x44>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d0a:	4805      	ldr	r0, [pc, #20]	; (8003d20 <MX_RTC_Init+0x44>)
 8003d0c:	f004 f8c8 	bl	8007ea0 <HAL_RTC_Init>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003d16:	f000 fa0b 	bl	8004130 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000338 	.word	0x20000338
 8003d24:	40002800 	.word	0x40002800

08003d28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003d2c:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <MX_SPI1_Init+0x64>)
 8003d2e:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <MX_SPI1_Init+0x68>)
 8003d30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d32:	4b16      	ldr	r3, [pc, #88]	; (8003d8c <MX_SPI1_Init+0x64>)
 8003d34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d3a:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <MX_SPI1_Init+0x64>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d40:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <MX_SPI1_Init+0x64>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d46:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <MX_SPI1_Init+0x64>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <MX_SPI1_Init+0x64>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d52:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <MX_SPI1_Init+0x64>)
 8003d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <MX_SPI1_Init+0x64>)
 8003d5c:	2218      	movs	r2, #24
 8003d5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d60:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <MX_SPI1_Init+0x64>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <MX_SPI1_Init+0x64>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d6c:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <MX_SPI1_Init+0x64>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <MX_SPI1_Init+0x64>)
 8003d74:	220a      	movs	r2, #10
 8003d76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d78:	4804      	ldr	r0, [pc, #16]	; (8003d8c <MX_SPI1_Init+0x64>)
 8003d7a:	f004 fa54 	bl	8008226 <HAL_SPI_Init>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d84:	f000 f9d4 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d88:	bf00      	nop
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000358 	.word	0x20000358
 8003d90:	40013000 	.word	0x40013000

08003d94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003d98:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003d9a:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <MX_SPI2_Init+0x68>)
 8003d9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d9e:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003da0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003da4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003da6:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003db2:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003dc8:	2218      	movs	r2, #24
 8003dca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dd8:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003de0:	220a      	movs	r2, #10
 8003de2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003de4:	4804      	ldr	r0, [pc, #16]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003de6:	f004 fa1e 	bl	8008226 <HAL_SPI_Init>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003df0:	f000 f99e 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003df4:	bf00      	nop
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	200003b0 	.word	0x200003b0
 8003dfc:	40003800 	.word	0x40003800

08003e00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e06:	f107 0308 	add.w	r3, r7, #8
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	609a      	str	r2, [r3, #8]
 8003e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e14:	463b      	mov	r3, r7
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003e1c:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <MX_TIM4_Init+0x94>)
 8003e1e:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <MX_TIM4_Init+0x98>)
 8003e20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50000-1;
 8003e22:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <MX_TIM4_Init+0x94>)
 8003e24:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003e28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <MX_TIM4_Init+0x94>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 14400-1;
 8003e30:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <MX_TIM4_Init+0x94>)
 8003e32:	f643 023f 	movw	r2, #14399	; 0x383f
 8003e36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e38:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <MX_TIM4_Init+0x94>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <MX_TIM4_Init+0x94>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003e44:	4813      	ldr	r0, [pc, #76]	; (8003e94 <MX_TIM4_Init+0x94>)
 8003e46:	f004 ffa5 	bl	8008d94 <HAL_TIM_Base_Init>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003e50:	f000 f96e 	bl	8004130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003e5a:	f107 0308 	add.w	r3, r7, #8
 8003e5e:	4619      	mov	r1, r3
 8003e60:	480c      	ldr	r0, [pc, #48]	; (8003e94 <MX_TIM4_Init+0x94>)
 8003e62:	f005 f9f6 	bl	8009252 <HAL_TIM_ConfigClockSource>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003e6c:	f000 f960 	bl	8004130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e70:	2300      	movs	r3, #0
 8003e72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003e78:	463b      	mov	r3, r7
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4805      	ldr	r0, [pc, #20]	; (8003e94 <MX_TIM4_Init+0x94>)
 8003e7e:	f005 fc11 	bl	80096a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003e88:	f000 f952 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003e8c:	bf00      	nop
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20000408 	.word	0x20000408
 8003e98:	40000800 	.word	0x40000800

08003e9c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ea2:	463b      	mov	r3, r7
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003eaa:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <MX_TIM6_Init+0x64>)
 8003eac:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <MX_TIM6_Init+0x68>)
 8003eae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8003eb0:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <MX_TIM6_Init+0x64>)
 8003eb2:	2247      	movs	r2, #71	; 0x47
 8003eb4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <MX_TIM6_Init+0x64>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8003ebc:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <MX_TIM6_Init+0x64>)
 8003ebe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ec2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ec4:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <MX_TIM6_Init+0x64>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003eca:	480d      	ldr	r0, [pc, #52]	; (8003f00 <MX_TIM6_Init+0x64>)
 8003ecc:	f004 ff62 	bl	8008d94 <HAL_TIM_Base_Init>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003ed6:	f000 f92b 	bl	8004130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eda:	2300      	movs	r3, #0
 8003edc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003ee2:	463b      	mov	r3, r7
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4806      	ldr	r0, [pc, #24]	; (8003f00 <MX_TIM6_Init+0x64>)
 8003ee8:	f005 fbdc 	bl	80096a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003ef2:	f000 f91d 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000450 	.word	0x20000450
 8003f04:	40001000 	.word	0x40001000

08003f08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f0e:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <MX_USART1_UART_Init+0x50>)
 8003f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f12:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f1a:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f20:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f26:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f2e:	220c      	movs	r2, #12
 8003f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f3e:	4805      	ldr	r0, [pc, #20]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f40:	f005 fc40 	bl	80097c4 <HAL_UART_Init>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003f4a:	f000 f8f1 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000498 	.word	0x20000498
 8003f58:	40011000 	.word	0x40011000

08003f5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	607b      	str	r3, [r7, #4]
 8003f66:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <MX_DMA_Init+0x3c>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <MX_DMA_Init+0x3c>)
 8003f6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f70:	6313      	str	r3, [r2, #48]	; 0x30
 8003f72:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <MX_DMA_Init+0x3c>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7a:	607b      	str	r3, [r7, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2100      	movs	r1, #0
 8003f82:	203a      	movs	r0, #58	; 0x3a
 8003f84:	f001 ff93 	bl	8005eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003f88:	203a      	movs	r0, #58	; 0x3a
 8003f8a:	f001 ffac 	bl	8005ee6 <HAL_NVIC_EnableIRQ>

}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40023800 	.word	0x40023800

08003f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08c      	sub	sp, #48	; 0x30
 8003fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa2:	f107 031c 	add.w	r3, r7, #28
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	605a      	str	r2, [r3, #4]
 8003fac:	609a      	str	r2, [r3, #8]
 8003fae:	60da      	str	r2, [r3, #12]
 8003fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	4b58      	ldr	r3, [pc, #352]	; (8004118 <MX_GPIO_Init+0x17c>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	4a57      	ldr	r2, [pc, #348]	; (8004118 <MX_GPIO_Init+0x17c>)
 8003fbc:	f043 0304 	orr.w	r3, r3, #4
 8003fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc2:	4b55      	ldr	r3, [pc, #340]	; (8004118 <MX_GPIO_Init+0x17c>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	61bb      	str	r3, [r7, #24]
 8003fcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	4b51      	ldr	r3, [pc, #324]	; (8004118 <MX_GPIO_Init+0x17c>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	4a50      	ldr	r2, [pc, #320]	; (8004118 <MX_GPIO_Init+0x17c>)
 8003fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fde:	4b4e      	ldr	r3, [pc, #312]	; (8004118 <MX_GPIO_Init+0x17c>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	4b4a      	ldr	r3, [pc, #296]	; (8004118 <MX_GPIO_Init+0x17c>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	4a49      	ldr	r2, [pc, #292]	; (8004118 <MX_GPIO_Init+0x17c>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ffa:	4b47      	ldr	r3, [pc, #284]	; (8004118 <MX_GPIO_Init+0x17c>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	4b43      	ldr	r3, [pc, #268]	; (8004118 <MX_GPIO_Init+0x17c>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	4a42      	ldr	r2, [pc, #264]	; (8004118 <MX_GPIO_Init+0x17c>)
 8004010:	f043 0302 	orr.w	r3, r3, #2
 8004014:	6313      	str	r3, [r2, #48]	; 0x30
 8004016:	4b40      	ldr	r3, [pc, #256]	; (8004118 <MX_GPIO_Init+0x17c>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	4b3c      	ldr	r3, [pc, #240]	; (8004118 <MX_GPIO_Init+0x17c>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	4a3b      	ldr	r2, [pc, #236]	; (8004118 <MX_GPIO_Init+0x17c>)
 800402c:	f043 0310 	orr.w	r3, r3, #16
 8004030:	6313      	str	r3, [r2, #48]	; 0x30
 8004032:	4b39      	ldr	r3, [pc, #228]	; (8004118 <MX_GPIO_Init+0x17c>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	4b35      	ldr	r3, [pc, #212]	; (8004118 <MX_GPIO_Init+0x17c>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	4a34      	ldr	r2, [pc, #208]	; (8004118 <MX_GPIO_Init+0x17c>)
 8004048:	f043 0308 	orr.w	r3, r3, #8
 800404c:	6313      	str	r3, [r2, #48]	; 0x30
 800404e:	4b32      	ldr	r3, [pc, #200]	; (8004118 <MX_GPIO_Init+0x17c>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	607b      	str	r3, [r7, #4]
 8004058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_SPI2_GPIO_Port, SD_CS_SPI2_Pin, GPIO_PIN_RESET);
 800405a:	2200      	movs	r2, #0
 800405c:	2102      	movs	r1, #2
 800405e:	482f      	ldr	r0, [pc, #188]	; (800411c <MX_GPIO_Init+0x180>)
 8004060:	f002 fd12 	bl	8006a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Temperature_Pin_Pin|test_pin_Pin, GPIO_PIN_RESET);
 8004064:	2200      	movs	r2, #0
 8004066:	2144      	movs	r1, #68	; 0x44
 8004068:	482d      	ldr	r0, [pc, #180]	; (8004120 <MX_GPIO_Init+0x184>)
 800406a:	f002 fd0d 	bl	8006a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 800406e:	2200      	movs	r2, #0
 8004070:	2101      	movs	r1, #1
 8004072:	482c      	ldr	r0, [pc, #176]	; (8004124 <MX_GPIO_Init+0x188>)
 8004074:	f002 fd08 	bl	8006a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ACID_Pin|BASE_Pin|NutriA_Pin|NutriB_Pin, GPIO_PIN_SET);
 8004078:	2201      	movs	r2, #1
 800407a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800407e:	482a      	ldr	r0, [pc, #168]	; (8004128 <MX_GPIO_Init+0x18c>)
 8004080:	f002 fd02 	bl	8006a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_SPI2_Pin */
  GPIO_InitStruct.Pin = SD_CS_SPI2_Pin;
 8004084:	2302      	movs	r3, #2
 8004086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004088:	2301      	movs	r3, #1
 800408a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408c:	2300      	movs	r3, #0
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004090:	2300      	movs	r3, #0
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_SPI2_GPIO_Port, &GPIO_InitStruct);
 8004094:	f107 031c 	add.w	r3, r7, #28
 8004098:	4619      	mov	r1, r3
 800409a:	4820      	ldr	r0, [pc, #128]	; (800411c <MX_GPIO_Init+0x180>)
 800409c:	f002 fb40 	bl	8006720 <HAL_GPIO_Init>

  /*Configure GPIO pins : Temperature_Pin_Pin test_pin_Pin */
  GPIO_InitStruct.Pin = Temperature_Pin_Pin|test_pin_Pin;
 80040a0:	2344      	movs	r3, #68	; 0x44
 80040a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040a4:	2301      	movs	r3, #1
 80040a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ac:	2300      	movs	r3, #0
 80040ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b0:	f107 031c 	add.w	r3, r7, #28
 80040b4:	4619      	mov	r1, r3
 80040b6:	481a      	ldr	r0, [pc, #104]	; (8004120 <MX_GPIO_Init+0x184>)
 80040b8:	f002 fb32 	bl	8006720 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80040bc:	2301      	movs	r3, #1
 80040be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040c0:	2301      	movs	r3, #1
 80040c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c8:	2300      	movs	r3, #0
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80040cc:	f107 031c 	add.w	r3, r7, #28
 80040d0:	4619      	mov	r1, r3
 80040d2:	4814      	ldr	r0, [pc, #80]	; (8004124 <MX_GPIO_Init+0x188>)
 80040d4:	f002 fb24 	bl	8006720 <HAL_GPIO_Init>

  /*Configure GPIO pins : Rotary_CLK_Pin Rotary_DT_Pin Rotary_SW_Pin */
  GPIO_InitStruct.Pin = Rotary_CLK_Pin|Rotary_DT_Pin|Rotary_SW_Pin;
 80040d8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80040dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040de:	2300      	movs	r3, #0
 80040e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040e6:	f107 031c 	add.w	r3, r7, #28
 80040ea:	4619      	mov	r1, r3
 80040ec:	480f      	ldr	r0, [pc, #60]	; (800412c <MX_GPIO_Init+0x190>)
 80040ee:	f002 fb17 	bl	8006720 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACID_Pin BASE_Pin NutriA_Pin NutriB_Pin */
  GPIO_InitStruct.Pin = ACID_Pin|BASE_Pin|NutriA_Pin|NutriB_Pin;
 80040f2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80040f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040f8:	2301      	movs	r3, #1
 80040fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004100:	2300      	movs	r3, #0
 8004102:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004104:	f107 031c 	add.w	r3, r7, #28
 8004108:	4619      	mov	r1, r3
 800410a:	4807      	ldr	r0, [pc, #28]	; (8004128 <MX_GPIO_Init+0x18c>)
 800410c:	f002 fb08 	bl	8006720 <HAL_GPIO_Init>

}
 8004110:	bf00      	nop
 8004112:	3730      	adds	r7, #48	; 0x30
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40023800 	.word	0x40023800
 800411c:	40020800 	.word	0x40020800
 8004120:	40020000 	.word	0x40020000
 8004124:	40020400 	.word	0x40020400
 8004128:	40020c00 	.word	0x40020c00
 800412c:	40021000 	.word	0x40021000

08004130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004134:	b672      	cpsid	i
}
 8004136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004138:	e7fe      	b.n	8004138 <Error_Handler+0x8>
	...

0800413c <SD_Handling>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void SD_Handling(uint8_t *SD_ReadBufferData)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, "/", 1);
 8004144:	2201      	movs	r2, #1
 8004146:	4939      	ldr	r1, [pc, #228]	; (800422c <SD_Handling+0xf0>)
 8004148:	4839      	ldr	r0, [pc, #228]	; (8004230 <SD_Handling+0xf4>)
 800414a:	f008 ff01 	bl	800cf50 <f_mount>
 800414e:	4603      	mov	r3, r0
 8004150:	461a      	mov	r2, r3
 8004152:	4b38      	ldr	r3, [pc, #224]	; (8004234 <SD_Handling+0xf8>)
 8004154:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {SEND_UART1("ERROR!!! in mounting SD CARD...\n\n");}
 8004156:	4b37      	ldr	r3, [pc, #220]	; (8004234 <SD_Handling+0xf8>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <SD_Handling+0x2a>
 800415e:	4836      	ldr	r0, [pc, #216]	; (8004238 <SD_Handling+0xfc>)
 8004160:	f7fe fe38 	bl	8002dd4 <SEND_UART1>
	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
	  	sprintf (SD_ReadBufferData, "SD CARD Free Space: \t%lu\n\n",free_space);
	  	SEND_UART1(SD_ReadBufferData);
	  	BUFFER_CLEAR(SD_ReadBufferData,BUFF_SIZE(SD_ReadBufferData));
	}
}
 8004164:	e05e      	b.n	8004224 <SD_Handling+0xe8>
		f_getfree("", &fre_clust, &pfs);
 8004166:	4a35      	ldr	r2, [pc, #212]	; (800423c <SD_Handling+0x100>)
 8004168:	4935      	ldr	r1, [pc, #212]	; (8004240 <SD_Handling+0x104>)
 800416a:	4836      	ldr	r0, [pc, #216]	; (8004244 <SD_Handling+0x108>)
 800416c:	f009 fd1a 	bl	800dba4 <f_getfree>
		SEND_UART1("SD CARD mounted successfully...\n\n");
 8004170:	4835      	ldr	r0, [pc, #212]	; (8004248 <SD_Handling+0x10c>)
 8004172:	f7fe fe2f 	bl	8002dd4 <SEND_UART1>
	  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8004176:	4b31      	ldr	r3, [pc, #196]	; (800423c <SD_Handling+0x100>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	3b02      	subs	r3, #2
 800417e:	4a2f      	ldr	r2, [pc, #188]	; (800423c <SD_Handling+0x100>)
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	8952      	ldrh	r2, [r2, #10]
 8004184:	fb02 f303 	mul.w	r3, r2, r3
 8004188:	4618      	mov	r0, r3
 800418a:	f7fc f9cb 	bl	8000524 <__aeabi_ui2d>
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	4b2e      	ldr	r3, [pc, #184]	; (800424c <SD_Handling+0x110>)
 8004194:	f7fc fa40 	bl	8000618 <__aeabi_dmul>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	f7fc fd12 	bl	8000bc8 <__aeabi_d2uiz>
 80041a4:	4603      	mov	r3, r0
 80041a6:	4a2a      	ldr	r2, [pc, #168]	; (8004250 <SD_Handling+0x114>)
 80041a8:	6013      	str	r3, [r2, #0]
	  	sprintf (SD_ReadBufferData, "SD CARD Total Size: \t%lu\n",total);
 80041aa:	4b29      	ldr	r3, [pc, #164]	; (8004250 <SD_Handling+0x114>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	4928      	ldr	r1, [pc, #160]	; (8004254 <SD_Handling+0x118>)
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f00a fe2c 	bl	800ee10 <siprintf>
	  	SEND_UART1(SD_ReadBufferData);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7fe fe0b 	bl	8002dd4 <SEND_UART1>
	  	BUFFER_CLEAR(SD_ReadBufferData,BUFF_SIZE(SD_ReadBufferData));
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fc ff45 	bl	800104e <BUFF_SIZE>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4619      	mov	r1, r3
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7fc ff25 	bl	8001018 <BUFFER_CLEAR>
	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80041ce:	4b1b      	ldr	r3, [pc, #108]	; (800423c <SD_Handling+0x100>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	895b      	ldrh	r3, [r3, #10]
 80041d4:	461a      	mov	r2, r3
 80041d6:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <SD_Handling+0x104>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fc f9a0 	bl	8000524 <__aeabi_ui2d>
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	4b18      	ldr	r3, [pc, #96]	; (800424c <SD_Handling+0x110>)
 80041ea:	f7fc fa15 	bl	8000618 <__aeabi_dmul>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4610      	mov	r0, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	f7fc fce7 	bl	8000bc8 <__aeabi_d2uiz>
 80041fa:	4603      	mov	r3, r0
 80041fc:	4a16      	ldr	r2, [pc, #88]	; (8004258 <SD_Handling+0x11c>)
 80041fe:	6013      	str	r3, [r2, #0]
	  	sprintf (SD_ReadBufferData, "SD CARD Free Space: \t%lu\n\n",free_space);
 8004200:	4b15      	ldr	r3, [pc, #84]	; (8004258 <SD_Handling+0x11c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	4915      	ldr	r1, [pc, #84]	; (800425c <SD_Handling+0x120>)
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f00a fe01 	bl	800ee10 <siprintf>
	  	SEND_UART1(SD_ReadBufferData);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fe fde0 	bl	8002dd4 <SEND_UART1>
	  	BUFFER_CLEAR(SD_ReadBufferData,BUFF_SIZE(SD_ReadBufferData));
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fc ff1a 	bl	800104e <BUFF_SIZE>
 800421a:	4603      	mov	r3, r0
 800421c:	4619      	mov	r1, r3
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fc fefa 	bl	8001018 <BUFFER_CLEAR>
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	08012d1c 	.word	0x08012d1c
 8004230:	200011a8 	.word	0x200011a8
 8004234:	2000160c 	.word	0x2000160c
 8004238:	08012d20 	.word	0x08012d20
 800423c:	20001610 	.word	0x20001610
 8004240:	20001614 	.word	0x20001614
 8004244:	08012d44 	.word	0x08012d44
 8004248:	08012d48 	.word	0x08012d48
 800424c:	3fe00000 	.word	0x3fe00000
 8004250:	20001618 	.word	0x20001618
 8004254:	08012d6c 	.word	0x08012d6c
 8004258:	2000161c 	.word	0x2000161c
 800425c:	08012d88 	.word	0x08012d88

08004260 <SD_Card_Write>:

void SD_Card_Write(char *NameOfFile,  char *Data)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
		fresult = f_open(&file, NameOfFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800426a:	2213      	movs	r2, #19
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4810      	ldr	r0, [pc, #64]	; (80042b0 <SD_Card_Write+0x50>)
 8004270:	f008 feb4 	bl	800cfdc <f_open>
 8004274:	4603      	mov	r3, r0
 8004276:	461a      	mov	r2, r3
 8004278:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <SD_Card_Write+0x54>)
 800427a:	701a      	strb	r2, [r3, #0]
		f_lseek(&file, f_size(&file));
 800427c:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <SD_Card_Write+0x50>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4619      	mov	r1, r3
 8004282:	480b      	ldr	r0, [pc, #44]	; (80042b0 <SD_Card_Write+0x50>)
 8004284:	f009 fa85 	bl	800d792 <f_lseek>
		  if (fresult == FR_OK)
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <SD_Card_Write+0x54>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10a      	bne.n	80042a6 <SD_Card_Write+0x46>
			  {
			  	  f_puts(Data, &file);
 8004290:	4907      	ldr	r1, [pc, #28]	; (80042b0 <SD_Card_Write+0x50>)
 8004292:	6838      	ldr	r0, [r7, #0]
 8004294:	f009 fdb2 	bl	800ddfc <f_puts>
			  	  fresult = f_close(&file);
 8004298:	4805      	ldr	r0, [pc, #20]	; (80042b0 <SD_Card_Write+0x50>)
 800429a:	f009 fa50 	bl	800d73e <f_close>
 800429e:	4603      	mov	r3, r0
 80042a0:	461a      	mov	r2, r3
 80042a2:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <SD_Card_Write+0x54>)
 80042a4:	701a      	strb	r2, [r3, #0]
			  	 }

}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	200013dc 	.word	0x200013dc
 80042b4:	2000160c 	.word	0x2000160c

080042b8 <SD_save>:
	fresult = f_close(&file);

}

void SD_save(char *my_data)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b0b6      	sub	sp, #216	; 0xd8
 80042bc:	af02      	add	r7, sp, #8
 80042be:	6078      	str	r0, [r7, #4]

	if(((sTime.Minutes)%15) == 0)
 80042c0:	4b2a      	ldr	r3, [pc, #168]	; (800436c <SD_save+0xb4>)
 80042c2:	785a      	ldrb	r2, [r3, #1]
 80042c4:	4b2a      	ldr	r3, [pc, #168]	; (8004370 <SD_save+0xb8>)
 80042c6:	fba3 1302 	umull	r1, r3, r3, r2
 80042ca:	08d9      	lsrs	r1, r3, #3
 80042cc:	460b      	mov	r3, r1
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	1a5b      	subs	r3, r3, r1
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d140      	bne.n	800435c <SD_save+0xa4>
	{
		if(save_sd_flag == 0)
 80042da:	4b26      	ldr	r3, [pc, #152]	; (8004374 <SD_save+0xbc>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d13f      	bne.n	8004362 <SD_save+0xaa>
		{
			char name[100];
			char data[100];
			sprintf(name,"%d_%d_%d.txt",sDate.Date,sDate.Month,sDate.Year);
 80042e2:	4b25      	ldr	r3, [pc, #148]	; (8004378 <SD_save+0xc0>)
 80042e4:	789b      	ldrb	r3, [r3, #2]
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b23      	ldr	r3, [pc, #140]	; (8004378 <SD_save+0xc0>)
 80042ea:	785b      	ldrb	r3, [r3, #1]
 80042ec:	4619      	mov	r1, r3
 80042ee:	4b22      	ldr	r3, [pc, #136]	; (8004378 <SD_save+0xc0>)
 80042f0:	78db      	ldrb	r3, [r3, #3]
 80042f2:	f107 0008 	add.w	r0, r7, #8
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	460b      	mov	r3, r1
 80042fa:	4920      	ldr	r1, [pc, #128]	; (800437c <SD_save+0xc4>)
 80042fc:	f00a fd88 	bl	800ee10 <siprintf>
			sprintf(data,"%d:%d ==>>",sTime.Hours,sTime.Minutes);
 8004300:	4b1a      	ldr	r3, [pc, #104]	; (800436c <SD_save+0xb4>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	4b19      	ldr	r3, [pc, #100]	; (800436c <SD_save+0xb4>)
 8004308:	785b      	ldrb	r3, [r3, #1]
 800430a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800430e:	491c      	ldr	r1, [pc, #112]	; (8004380 <SD_save+0xc8>)
 8004310:	f00a fd7e 	bl	800ee10 <siprintf>
			strcat(data,my_data);
 8004314:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4618      	mov	r0, r3
 800431c:	f00a fd98 	bl	800ee50 <strcat>
			strcat(data,"\n");
 8004320:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004324:	4618      	mov	r0, r3
 8004326:	f7fb ff5d 	bl	80001e4 <strlen>
 800432a:	4603      	mov	r3, r0
 800432c:	461a      	mov	r2, r3
 800432e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004332:	4413      	add	r3, r2
 8004334:	4913      	ldr	r1, [pc, #76]	; (8004384 <SD_save+0xcc>)
 8004336:	461a      	mov	r2, r3
 8004338:	460b      	mov	r3, r1
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	8013      	strh	r3, [r2, #0]
			SD_Card_Write(name,data);
 800433e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004342:	f107 0308 	add.w	r3, r7, #8
 8004346:	4611      	mov	r1, r2
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff ff89 	bl	8004260 <SD_Card_Write>
			save_sd_flag++;
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <SD_save+0xbc>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	3301      	adds	r3, #1
 8004354:	b2da      	uxtb	r2, r3
 8004356:	4b07      	ldr	r3, [pc, #28]	; (8004374 <SD_save+0xbc>)
 8004358:	701a      	strb	r2, [r3, #0]
	else
	{
		save_sd_flag = 0;
	}

}
 800435a:	e002      	b.n	8004362 <SD_save+0xaa>
		save_sd_flag = 0;
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <SD_save+0xbc>)
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
}
 8004362:	bf00      	nop
 8004364:	37d0      	adds	r7, #208	; 0xd0
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	2000117c 	.word	0x2000117c
 8004370:	88888889 	.word	0x88888889
 8004374:	2000055d 	.word	0x2000055d
 8004378:	20001190 	.word	0x20001190
 800437c:	08012da4 	.word	0x08012da4
 8004380:	08012db4 	.word	0x08012db4
 8004384:	08012dc0 	.word	0x08012dc0

08004388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	607b      	str	r3, [r7, #4]
 8004392:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <HAL_MspInit+0x4c>)
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	4a0f      	ldr	r2, [pc, #60]	; (80043d4 <HAL_MspInit+0x4c>)
 8004398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800439c:	6453      	str	r3, [r2, #68]	; 0x44
 800439e:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <HAL_MspInit+0x4c>)
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043aa:	2300      	movs	r3, #0
 80043ac:	603b      	str	r3, [r7, #0]
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <HAL_MspInit+0x4c>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	4a08      	ldr	r2, [pc, #32]	; (80043d4 <HAL_MspInit+0x4c>)
 80043b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <HAL_MspInit+0x4c>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40023800 	.word	0x40023800

080043d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08a      	sub	sp, #40	; 0x28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e0:	f107 0314 	add.w	r3, r7, #20
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	60da      	str	r2, [r3, #12]
 80043ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a17      	ldr	r2, [pc, #92]	; (8004454 <HAL_ADC_MspInit+0x7c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d127      	bne.n	800444a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	4b16      	ldr	r3, [pc, #88]	; (8004458 <HAL_ADC_MspInit+0x80>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	4a15      	ldr	r2, [pc, #84]	; (8004458 <HAL_ADC_MspInit+0x80>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004408:	6453      	str	r3, [r2, #68]	; 0x44
 800440a:	4b13      	ldr	r3, [pc, #76]	; (8004458 <HAL_ADC_MspInit+0x80>)
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <HAL_ADC_MspInit+0x80>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <HAL_ADC_MspInit+0x80>)
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6313      	str	r3, [r2, #48]	; 0x30
 8004426:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <HAL_ADC_MspInit+0x80>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_PH_Sensor_Pin|ADC1_TDS_Sensor_Pin;
 8004432:	2303      	movs	r3, #3
 8004434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004436:	2303      	movs	r3, #3
 8004438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800443e:	f107 0314 	add.w	r3, r7, #20
 8004442:	4619      	mov	r1, r3
 8004444:	4805      	ldr	r0, [pc, #20]	; (800445c <HAL_ADC_MspInit+0x84>)
 8004446:	f002 f96b 	bl	8006720 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800444a:	bf00      	nop
 800444c:	3728      	adds	r7, #40	; 0x28
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40012000 	.word	0x40012000
 8004458:	40023800 	.word	0x40023800
 800445c:	40020000 	.word	0x40020000

08004460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08c      	sub	sp, #48	; 0x30
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004468:	f107 031c 	add.w	r3, r7, #28
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a42      	ldr	r2, [pc, #264]	; (8004588 <HAL_I2C_MspInit+0x128>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d12c      	bne.n	80044dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	4b41      	ldr	r3, [pc, #260]	; (800458c <HAL_I2C_MspInit+0x12c>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	4a40      	ldr	r2, [pc, #256]	; (800458c <HAL_I2C_MspInit+0x12c>)
 800448c:	f043 0302 	orr.w	r3, r3, #2
 8004490:	6313      	str	r3, [r2, #48]	; 0x30
 8004492:	4b3e      	ldr	r3, [pc, #248]	; (800458c <HAL_I2C_MspInit+0x12c>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C1_SCL_Pin|LCD_I2C1_SDA_Pin;
 800449e:	23c0      	movs	r3, #192	; 0xc0
 80044a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044a2:	2312      	movs	r3, #18
 80044a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044aa:	2303      	movs	r3, #3
 80044ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044ae:	2304      	movs	r3, #4
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b2:	f107 031c 	add.w	r3, r7, #28
 80044b6:	4619      	mov	r1, r3
 80044b8:	4835      	ldr	r0, [pc, #212]	; (8004590 <HAL_I2C_MspInit+0x130>)
 80044ba:	f002 f931 	bl	8006720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	4b32      	ldr	r3, [pc, #200]	; (800458c <HAL_I2C_MspInit+0x12c>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	4a31      	ldr	r2, [pc, #196]	; (800458c <HAL_I2C_MspInit+0x12c>)
 80044c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044cc:	6413      	str	r3, [r2, #64]	; 0x40
 80044ce:	4b2f      	ldr	r3, [pc, #188]	; (800458c <HAL_I2C_MspInit+0x12c>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80044da:	e050      	b.n	800457e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a2c      	ldr	r2, [pc, #176]	; (8004594 <HAL_I2C_MspInit+0x134>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d14b      	bne.n	800457e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044e6:	2300      	movs	r3, #0
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	4b28      	ldr	r3, [pc, #160]	; (800458c <HAL_I2C_MspInit+0x12c>)
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	4a27      	ldr	r2, [pc, #156]	; (800458c <HAL_I2C_MspInit+0x12c>)
 80044f0:	f043 0304 	orr.w	r3, r3, #4
 80044f4:	6313      	str	r3, [r2, #48]	; 0x30
 80044f6:	4b25      	ldr	r3, [pc, #148]	; (800458c <HAL_I2C_MspInit+0x12c>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	4b21      	ldr	r3, [pc, #132]	; (800458c <HAL_I2C_MspInit+0x12c>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	4a20      	ldr	r2, [pc, #128]	; (800458c <HAL_I2C_MspInit+0x12c>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	6313      	str	r3, [r2, #48]	; 0x30
 8004512:	4b1e      	ldr	r3, [pc, #120]	; (800458c <HAL_I2C_MspInit+0x12c>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800451e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004524:	2312      	movs	r3, #18
 8004526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004528:	2300      	movs	r3, #0
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800452c:	2303      	movs	r3, #3
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004530:	2304      	movs	r3, #4
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004534:	f107 031c 	add.w	r3, r7, #28
 8004538:	4619      	mov	r1, r3
 800453a:	4817      	ldr	r0, [pc, #92]	; (8004598 <HAL_I2C_MspInit+0x138>)
 800453c:	f002 f8f0 	bl	8006720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004546:	2312      	movs	r3, #18
 8004548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454a:	2300      	movs	r3, #0
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800454e:	2303      	movs	r3, #3
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004552:	2304      	movs	r3, #4
 8004554:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004556:	f107 031c 	add.w	r3, r7, #28
 800455a:	4619      	mov	r1, r3
 800455c:	480f      	ldr	r0, [pc, #60]	; (800459c <HAL_I2C_MspInit+0x13c>)
 800455e:	f002 f8df 	bl	8006720 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_I2C_MspInit+0x12c>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4a08      	ldr	r2, [pc, #32]	; (800458c <HAL_I2C_MspInit+0x12c>)
 800456c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004570:	6413      	str	r3, [r2, #64]	; 0x40
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <HAL_I2C_MspInit+0x12c>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	68bb      	ldr	r3, [r7, #8]
}
 800457e:	bf00      	nop
 8004580:	3730      	adds	r7, #48	; 0x30
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40005400 	.word	0x40005400
 800458c:	40023800 	.word	0x40023800
 8004590:	40020400 	.word	0x40020400
 8004594:	40005c00 	.word	0x40005c00
 8004598:	40020800 	.word	0x40020800
 800459c:	40020000 	.word	0x40020000

080045a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045a8:	f107 0308 	add.w	r3, r7, #8
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a0c      	ldr	r2, [pc, #48]	; (80045ec <HAL_RTC_MspInit+0x4c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d111      	bne.n	80045e4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80045c0:	2302      	movs	r3, #2
 80045c2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80045c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045c8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045ca:	f107 0308 	add.w	r3, r7, #8
 80045ce:	4618      	mov	r0, r3
 80045d0:	f003 fb84 	bl	8007cdc <HAL_RCCEx_PeriphCLKConfig>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80045da:	f7ff fda9 	bl	8004130 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80045de:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <HAL_RTC_MspInit+0x50>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80045e4:	bf00      	nop
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40002800 	.word	0x40002800
 80045f0:	42470e3c 	.word	0x42470e3c

080045f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08c      	sub	sp, #48	; 0x30
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045fc:	f107 031c 	add.w	r3, r7, #28
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	60da      	str	r2, [r3, #12]
 800460a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a41      	ldr	r2, [pc, #260]	; (8004718 <HAL_SPI_MspInit+0x124>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d12c      	bne.n	8004670 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	4b40      	ldr	r3, [pc, #256]	; (800471c <HAL_SPI_MspInit+0x128>)
 800461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461e:	4a3f      	ldr	r2, [pc, #252]	; (800471c <HAL_SPI_MspInit+0x128>)
 8004620:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004624:	6453      	str	r3, [r2, #68]	; 0x44
 8004626:	4b3d      	ldr	r3, [pc, #244]	; (800471c <HAL_SPI_MspInit+0x128>)
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	4b39      	ldr	r3, [pc, #228]	; (800471c <HAL_SPI_MspInit+0x128>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	4a38      	ldr	r2, [pc, #224]	; (800471c <HAL_SPI_MspInit+0x128>)
 800463c:	f043 0302 	orr.w	r3, r3, #2
 8004640:	6313      	str	r3, [r2, #48]	; 0x30
 8004642:	4b36      	ldr	r3, [pc, #216]	; (800471c <HAL_SPI_MspInit+0x128>)
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800464e:	2338      	movs	r3, #56	; 0x38
 8004650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004652:	2302      	movs	r3, #2
 8004654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004656:	2300      	movs	r3, #0
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800465a:	2303      	movs	r3, #3
 800465c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800465e:	2305      	movs	r3, #5
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004662:	f107 031c 	add.w	r3, r7, #28
 8004666:	4619      	mov	r1, r3
 8004668:	482d      	ldr	r0, [pc, #180]	; (8004720 <HAL_SPI_MspInit+0x12c>)
 800466a:	f002 f859 	bl	8006720 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800466e:	e04f      	b.n	8004710 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a2b      	ldr	r2, [pc, #172]	; (8004724 <HAL_SPI_MspInit+0x130>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d14a      	bne.n	8004710 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800467a:	2300      	movs	r3, #0
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	4b27      	ldr	r3, [pc, #156]	; (800471c <HAL_SPI_MspInit+0x128>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	4a26      	ldr	r2, [pc, #152]	; (800471c <HAL_SPI_MspInit+0x128>)
 8004684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004688:	6413      	str	r3, [r2, #64]	; 0x40
 800468a:	4b24      	ldr	r3, [pc, #144]	; (800471c <HAL_SPI_MspInit+0x128>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	4b20      	ldr	r3, [pc, #128]	; (800471c <HAL_SPI_MspInit+0x128>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	4a1f      	ldr	r2, [pc, #124]	; (800471c <HAL_SPI_MspInit+0x128>)
 80046a0:	f043 0304 	orr.w	r3, r3, #4
 80046a4:	6313      	str	r3, [r2, #48]	; 0x30
 80046a6:	4b1d      	ldr	r3, [pc, #116]	; (800471c <HAL_SPI_MspInit+0x128>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	4b19      	ldr	r3, [pc, #100]	; (800471c <HAL_SPI_MspInit+0x128>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	4a18      	ldr	r2, [pc, #96]	; (800471c <HAL_SPI_MspInit+0x128>)
 80046bc:	f043 0302 	orr.w	r3, r3, #2
 80046c0:	6313      	str	r3, [r2, #48]	; 0x30
 80046c2:	4b16      	ldr	r3, [pc, #88]	; (800471c <HAL_SPI_MspInit+0x128>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	60bb      	str	r3, [r7, #8]
 80046cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SD_MISO_SPI2_Pin|SD_MOSI_SPI2_Pin;
 80046ce:	230c      	movs	r3, #12
 80046d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d2:	2302      	movs	r3, #2
 80046d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046da:	2303      	movs	r3, #3
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046de:	2305      	movs	r3, #5
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046e2:	f107 031c 	add.w	r3, r7, #28
 80046e6:	4619      	mov	r1, r3
 80046e8:	480f      	ldr	r0, [pc, #60]	; (8004728 <HAL_SPI_MspInit+0x134>)
 80046ea:	f002 f819 	bl	8006720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SCK_SPI2_Pin;
 80046ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f4:	2302      	movs	r3, #2
 80046f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046fc:	2303      	movs	r3, #3
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004700:	2305      	movs	r3, #5
 8004702:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SD_SCK_SPI2_GPIO_Port, &GPIO_InitStruct);
 8004704:	f107 031c 	add.w	r3, r7, #28
 8004708:	4619      	mov	r1, r3
 800470a:	4805      	ldr	r0, [pc, #20]	; (8004720 <HAL_SPI_MspInit+0x12c>)
 800470c:	f002 f808 	bl	8006720 <HAL_GPIO_Init>
}
 8004710:	bf00      	nop
 8004712:	3730      	adds	r7, #48	; 0x30
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40013000 	.word	0x40013000
 800471c:	40023800 	.word	0x40023800
 8004720:	40020400 	.word	0x40020400
 8004724:	40003800 	.word	0x40003800
 8004728:	40020800 	.word	0x40020800

0800472c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a18      	ldr	r2, [pc, #96]	; (800479c <HAL_TIM_Base_MspInit+0x70>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d116      	bne.n	800476c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	4b17      	ldr	r3, [pc, #92]	; (80047a0 <HAL_TIM_Base_MspInit+0x74>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	4a16      	ldr	r2, [pc, #88]	; (80047a0 <HAL_TIM_Base_MspInit+0x74>)
 8004748:	f043 0304 	orr.w	r3, r3, #4
 800474c:	6413      	str	r3, [r2, #64]	; 0x40
 800474e:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <HAL_TIM_Base_MspInit+0x74>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800475a:	2200      	movs	r2, #0
 800475c:	2100      	movs	r1, #0
 800475e:	201e      	movs	r0, #30
 8004760:	f001 fba5 	bl	8005eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004764:	201e      	movs	r0, #30
 8004766:	f001 fbbe 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800476a:	e012      	b.n	8004792 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a0c      	ldr	r2, [pc, #48]	; (80047a4 <HAL_TIM_Base_MspInit+0x78>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d10d      	bne.n	8004792 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <HAL_TIM_Base_MspInit+0x74>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	4a08      	ldr	r2, [pc, #32]	; (80047a0 <HAL_TIM_Base_MspInit+0x74>)
 8004780:	f043 0310 	orr.w	r3, r3, #16
 8004784:	6413      	str	r3, [r2, #64]	; 0x40
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_TIM_Base_MspInit+0x74>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f003 0310 	and.w	r3, r3, #16
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	68bb      	ldr	r3, [r7, #8]
}
 8004792:	bf00      	nop
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40000800 	.word	0x40000800
 80047a0:	40023800 	.word	0x40023800
 80047a4:	40001000 	.word	0x40001000

080047a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	; 0x28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b0:	f107 0314 	add.w	r3, r7, #20
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a34      	ldr	r2, [pc, #208]	; (8004898 <HAL_UART_MspInit+0xf0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d162      	bne.n	8004890 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	4b33      	ldr	r3, [pc, #204]	; (800489c <HAL_UART_MspInit+0xf4>)
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	4a32      	ldr	r2, [pc, #200]	; (800489c <HAL_UART_MspInit+0xf4>)
 80047d4:	f043 0310 	orr.w	r3, r3, #16
 80047d8:	6453      	str	r3, [r2, #68]	; 0x44
 80047da:	4b30      	ldr	r3, [pc, #192]	; (800489c <HAL_UART_MspInit+0xf4>)
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	613b      	str	r3, [r7, #16]
 80047e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	4b2c      	ldr	r3, [pc, #176]	; (800489c <HAL_UART_MspInit+0xf4>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	4a2b      	ldr	r2, [pc, #172]	; (800489c <HAL_UART_MspInit+0xf4>)
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	6313      	str	r3, [r2, #48]	; 0x30
 80047f6:	4b29      	ldr	r3, [pc, #164]	; (800489c <HAL_UART_MspInit+0xf4>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004802:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004808:	2302      	movs	r3, #2
 800480a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480c:	2300      	movs	r3, #0
 800480e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004810:	2303      	movs	r3, #3
 8004812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004814:	2307      	movs	r3, #7
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004818:	f107 0314 	add.w	r3, r7, #20
 800481c:	4619      	mov	r1, r3
 800481e:	4820      	ldr	r0, [pc, #128]	; (80048a0 <HAL_UART_MspInit+0xf8>)
 8004820:	f001 ff7e 	bl	8006720 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004824:	4b1f      	ldr	r3, [pc, #124]	; (80048a4 <HAL_UART_MspInit+0xfc>)
 8004826:	4a20      	ldr	r2, [pc, #128]	; (80048a8 <HAL_UART_MspInit+0x100>)
 8004828:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800482a:	4b1e      	ldr	r3, [pc, #120]	; (80048a4 <HAL_UART_MspInit+0xfc>)
 800482c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004830:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004832:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <HAL_UART_MspInit+0xfc>)
 8004834:	2200      	movs	r2, #0
 8004836:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004838:	4b1a      	ldr	r3, [pc, #104]	; (80048a4 <HAL_UART_MspInit+0xfc>)
 800483a:	2200      	movs	r2, #0
 800483c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800483e:	4b19      	ldr	r3, [pc, #100]	; (80048a4 <HAL_UART_MspInit+0xfc>)
 8004840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004844:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004846:	4b17      	ldr	r3, [pc, #92]	; (80048a4 <HAL_UART_MspInit+0xfc>)
 8004848:	2200      	movs	r2, #0
 800484a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800484c:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <HAL_UART_MspInit+0xfc>)
 800484e:	2200      	movs	r2, #0
 8004850:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004852:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <HAL_UART_MspInit+0xfc>)
 8004854:	2200      	movs	r2, #0
 8004856:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004858:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <HAL_UART_MspInit+0xfc>)
 800485a:	2200      	movs	r2, #0
 800485c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800485e:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <HAL_UART_MspInit+0xfc>)
 8004860:	2200      	movs	r2, #0
 8004862:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004864:	480f      	ldr	r0, [pc, #60]	; (80048a4 <HAL_UART_MspInit+0xfc>)
 8004866:	f001 fb59 	bl	8005f1c <HAL_DMA_Init>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004870:	f7ff fc5e 	bl	8004130 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a0b      	ldr	r2, [pc, #44]	; (80048a4 <HAL_UART_MspInit+0xfc>)
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
 800487a:	4a0a      	ldr	r2, [pc, #40]	; (80048a4 <HAL_UART_MspInit+0xfc>)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004880:	2200      	movs	r2, #0
 8004882:	2100      	movs	r1, #0
 8004884:	2025      	movs	r0, #37	; 0x25
 8004886:	f001 fb12 	bl	8005eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800488a:	2025      	movs	r0, #37	; 0x25
 800488c:	f001 fb2b 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004890:	bf00      	nop
 8004892:	3728      	adds	r7, #40	; 0x28
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40011000 	.word	0x40011000
 800489c:	40023800 	.word	0x40023800
 80048a0:	40020000 	.word	0x40020000
 80048a4:	200004dc 	.word	0x200004dc
 80048a8:	40026440 	.word	0x40026440

080048ac <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1,Timer2 = 0;
void SDTimer_Handler(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
	if(Timer1>0)
 80048b0:	4b0e      	ldr	r3, [pc, #56]	; (80048ec <SDTimer_Handler+0x40>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d006      	beq.n	80048c8 <SDTimer_Handler+0x1c>
	{
		Timer1--;
 80048ba:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <SDTimer_Handler+0x40>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	4b09      	ldr	r3, [pc, #36]	; (80048ec <SDTimer_Handler+0x40>)
 80048c6:	701a      	strb	r2, [r3, #0]
	}

	if(Timer2>0)
 80048c8:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <SDTimer_Handler+0x44>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d006      	beq.n	80048e0 <SDTimer_Handler+0x34>
	{
		Timer2--;
 80048d2:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <SDTimer_Handler+0x44>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	4b04      	ldr	r3, [pc, #16]	; (80048f0 <SDTimer_Handler+0x44>)
 80048de:	701a      	strb	r2, [r3, #0]
	}
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20001621 	.word	0x20001621
 80048f0:	20001622 	.word	0x20001622

080048f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048f8:	e7fe      	b.n	80048f8 <NMI_Handler+0x4>

080048fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048fa:	b480      	push	{r7}
 80048fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048fe:	e7fe      	b.n	80048fe <HardFault_Handler+0x4>

08004900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004904:	e7fe      	b.n	8004904 <MemManage_Handler+0x4>

08004906 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004906:	b480      	push	{r7}
 8004908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800490a:	e7fe      	b.n	800490a <BusFault_Handler+0x4>

0800490c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004910:	e7fe      	b.n	8004910 <UsageFault_Handler+0x4>

08004912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004912:	b480      	push	{r7}
 8004914:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004916:	bf00      	nop
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004924:	bf00      	nop
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800492e:	b480      	push	{r7}
 8004930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004932:	bf00      	nop
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8004940:	4b0a      	ldr	r3, [pc, #40]	; (800496c <SysTick_Handler+0x30>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	3301      	adds	r3, #1
 8004948:	b2da      	uxtb	r2, r3
 800494a:	4b08      	ldr	r3, [pc, #32]	; (800496c <SysTick_Handler+0x30>)
 800494c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 800494e:	4b07      	ldr	r3, [pc, #28]	; (800496c <SysTick_Handler+0x30>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b09      	cmp	r3, #9
 8004956:	d904      	bls.n	8004962 <SysTick_Handler+0x26>
	{
		FatFsCnt=0;
 8004958:	4b04      	ldr	r3, [pc, #16]	; (800496c <SysTick_Handler+0x30>)
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800495e:	f7ff ffa5 	bl	80048ac <SDTimer_Handler>

	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004962:	f000 fd85 	bl	8005470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004966:	bf00      	nop
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20001620 	.word	0x20001620

08004970 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004974:	4802      	ldr	r0, [pc, #8]	; (8004980 <TIM4_IRQHandler+0x10>)
 8004976:	f004 fb64 	bl	8009042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800497a:	bf00      	nop
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000408 	.word	0x20000408

08004984 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004988:	4802      	ldr	r0, [pc, #8]	; (8004994 <USART1_IRQHandler+0x10>)
 800498a:	f005 f85f 	bl	8009a4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000498 	.word	0x20000498

08004998 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800499c:	4802      	ldr	r0, [pc, #8]	; (80049a8 <DMA2_Stream2_IRQHandler+0x10>)
 800499e:	f001 fc55 	bl	800624c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	200004dc 	.word	0x200004dc

080049ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return 1;
 80049b0:	2301      	movs	r3, #1
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <_kill>:

int _kill(int pid, int sig)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80049c6:	f009 fb63 	bl	800e090 <__errno>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2216      	movs	r2, #22
 80049ce:	601a      	str	r2, [r3, #0]
  return -1;
 80049d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <_exit>:

void _exit (int status)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80049e4:	f04f 31ff 	mov.w	r1, #4294967295
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ffe7 	bl	80049bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80049ee:	e7fe      	b.n	80049ee <_exit+0x12>

080049f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	e00a      	b.n	8004a18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a02:	f3af 8000 	nop.w
 8004a06:	4601      	mov	r1, r0
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	60ba      	str	r2, [r7, #8]
 8004a0e:	b2ca      	uxtb	r2, r1
 8004a10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	3301      	adds	r3, #1
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	dbf0      	blt.n	8004a02 <_read+0x12>
  }

  return len;
 8004a20:	687b      	ldr	r3, [r7, #4]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b086      	sub	sp, #24
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	e009      	b.n	8004a50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	60ba      	str	r2, [r7, #8]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	dbf1      	blt.n	8004a3c <_write+0x12>
  }
  return len;
 8004a58:	687b      	ldr	r3, [r7, #4]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <_close>:

int _close(int file)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a8a:	605a      	str	r2, [r3, #4]
  return 0;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <_isatty>:

int _isatty(int file)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004aa2:	2301      	movs	r3, #1
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ad4:	4a14      	ldr	r2, [pc, #80]	; (8004b28 <_sbrk+0x5c>)
 8004ad6:	4b15      	ldr	r3, [pc, #84]	; (8004b2c <_sbrk+0x60>)
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ae0:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <_sbrk+0x64>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d102      	bne.n	8004aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ae8:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <_sbrk+0x64>)
 8004aea:	4a12      	ldr	r2, [pc, #72]	; (8004b34 <_sbrk+0x68>)
 8004aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004aee:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <_sbrk+0x64>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4413      	add	r3, r2
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d207      	bcs.n	8004b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004afc:	f009 fac8 	bl	800e090 <__errno>
 8004b00:	4603      	mov	r3, r0
 8004b02:	220c      	movs	r2, #12
 8004b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b06:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0a:	e009      	b.n	8004b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b0c:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <_sbrk+0x64>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b12:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <_sbrk+0x64>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4413      	add	r3, r2
 8004b1a:	4a05      	ldr	r2, [pc, #20]	; (8004b30 <_sbrk+0x64>)
 8004b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20020000 	.word	0x20020000
 8004b2c:	00000400 	.word	0x00000400
 8004b30:	20001624 	.word	0x20001624
 8004b34:	200018a0 	.word	0x200018a0

08004b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b3c:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <SystemInit+0x20>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	4a05      	ldr	r2, [pc, #20]	; (8004b58 <SystemInit+0x20>)
 8004b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b4c:	bf00      	nop
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	e000ed00 	.word	0xe000ed00

08004b5c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8004b66:	f107 020f 	add.w	r2, r7, #15
 8004b6a:	1df9      	adds	r1, r7, #7
 8004b6c:	2364      	movs	r3, #100	; 0x64
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	2301      	movs	r3, #1
 8004b72:	4804      	ldr	r0, [pc, #16]	; (8004b84 <W25qxx_Spi+0x28>)
 8004b74:	f003 fe2d 	bl	80087d2 <HAL_SPI_TransmitReceive>
	return ret;
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000358 	.word	0x20000358

08004b88 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	2300      	movs	r3, #0
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	2300      	movs	r3, #0
 8004b98:	607b      	str	r3, [r7, #4]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	4813      	ldr	r0, [pc, #76]	; (8004bf0 <W25qxx_ReadID+0x68>)
 8004ba4:	f001 ff70 	bl	8006a88 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004ba8:	209f      	movs	r0, #159	; 0x9f
 8004baa:	f7ff ffd7 	bl	8004b5c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004bae:	20a5      	movs	r0, #165	; 0xa5
 8004bb0:	f7ff ffd4 	bl	8004b5c <W25qxx_Spi>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004bb8:	20a5      	movs	r0, #165	; 0xa5
 8004bba:	f7ff ffcf 	bl	8004b5c <W25qxx_Spi>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004bc2:	20a5      	movs	r0, #165	; 0xa5
 8004bc4:	f7ff ffca 	bl	8004b5c <W25qxx_Spi>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004bcc:	2201      	movs	r2, #1
 8004bce:	2101      	movs	r1, #1
 8004bd0:	4807      	ldr	r0, [pc, #28]	; (8004bf0 <W25qxx_ReadID+0x68>)
 8004bd2:	f001 ff59 	bl	8006a88 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	041a      	lsls	r2, r3, #16
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	4313      	orrs	r3, r2
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
	return Temp;
 8004be6:	68fb      	ldr	r3, [r7, #12]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40020400 	.word	0x40020400

08004bf4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004bf4:	b590      	push	{r4, r7, lr}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	4816      	ldr	r0, [pc, #88]	; (8004c58 <W25qxx_ReadUniqID+0x64>)
 8004c00:	f001 ff42 	bl	8006a88 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004c04:	204b      	movs	r0, #75	; 0x4b
 8004c06:	f7ff ffa9 	bl	8004b5c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	71fb      	strb	r3, [r7, #7]
 8004c0e:	e005      	b.n	8004c1c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004c10:	20a5      	movs	r0, #165	; 0xa5
 8004c12:	f7ff ffa3 	bl	8004b5c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	71fb      	strb	r3, [r7, #7]
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d9f6      	bls.n	8004c10 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8004c22:	2300      	movs	r3, #0
 8004c24:	71bb      	strb	r3, [r7, #6]
 8004c26:	e00b      	b.n	8004c40 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004c28:	79bc      	ldrb	r4, [r7, #6]
 8004c2a:	20a5      	movs	r0, #165	; 0xa5
 8004c2c:	f7ff ff96 	bl	8004b5c <W25qxx_Spi>
 8004c30:	4603      	mov	r3, r0
 8004c32:	461a      	mov	r2, r3
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <W25qxx_ReadUniqID+0x68>)
 8004c36:	4423      	add	r3, r4
 8004c38:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8004c3a:	79bb      	ldrb	r3, [r7, #6]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	71bb      	strb	r3, [r7, #6]
 8004c40:	79bb      	ldrb	r3, [r7, #6]
 8004c42:	2b07      	cmp	r3, #7
 8004c44:	d9f0      	bls.n	8004c28 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004c46:	2201      	movs	r2, #1
 8004c48:	2101      	movs	r1, #1
 8004c4a:	4803      	ldr	r0, [pc, #12]	; (8004c58 <W25qxx_ReadUniqID+0x64>)
 8004c4c:	f001 ff1c 	bl	8006a88 <HAL_GPIO_WritePin>
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd90      	pop	{r4, r7, pc}
 8004c58:	40020400 	.word	0x40020400
 8004c5c:	20001628 	.word	0x20001628

08004c60 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004c64:	2200      	movs	r2, #0
 8004c66:	2101      	movs	r1, #1
 8004c68:	4807      	ldr	r0, [pc, #28]	; (8004c88 <W25qxx_WriteEnable+0x28>)
 8004c6a:	f001 ff0d 	bl	8006a88 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8004c6e:	2006      	movs	r0, #6
 8004c70:	f7ff ff74 	bl	8004b5c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004c74:	2201      	movs	r2, #1
 8004c76:	2101      	movs	r1, #1
 8004c78:	4803      	ldr	r0, [pc, #12]	; (8004c88 <W25qxx_WriteEnable+0x28>)
 8004c7a:	f001 ff05 	bl	8006a88 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8004c7e:	2001      	movs	r0, #1
 8004c80:	f000 fc16 	bl	80054b0 <HAL_Delay>
}
 8004c84:	bf00      	nop
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40020400 	.word	0x40020400

08004c8c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	481c      	ldr	r0, [pc, #112]	; (8004d10 <W25qxx_ReadStatusRegister+0x84>)
 8004ca0:	f001 fef2 	bl	8006a88 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d10c      	bne.n	8004cc4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8004caa:	2005      	movs	r0, #5
 8004cac:	f7ff ff56 	bl	8004b5c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004cb0:	20a5      	movs	r0, #165	; 0xa5
 8004cb2:	f7ff ff53 	bl	8004b5c <W25qxx_Spi>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8004cba:	4a16      	ldr	r2, [pc, #88]	; (8004d14 <W25qxx_ReadStatusRegister+0x88>)
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8004cc2:	e01b      	b.n	8004cfc <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d10c      	bne.n	8004ce4 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8004cca:	2035      	movs	r0, #53	; 0x35
 8004ccc:	f7ff ff46 	bl	8004b5c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004cd0:	20a5      	movs	r0, #165	; 0xa5
 8004cd2:	f7ff ff43 	bl	8004b5c <W25qxx_Spi>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8004cda:	4a0e      	ldr	r2, [pc, #56]	; (8004d14 <W25qxx_ReadStatusRegister+0x88>)
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004ce2:	e00b      	b.n	8004cfc <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004ce4:	2015      	movs	r0, #21
 8004ce6:	f7ff ff39 	bl	8004b5c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004cea:	20a5      	movs	r0, #165	; 0xa5
 8004cec:	f7ff ff36 	bl	8004b5c <W25qxx_Spi>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004cf4:	4a07      	ldr	r2, [pc, #28]	; (8004d14 <W25qxx_ReadStatusRegister+0x88>)
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	2101      	movs	r1, #1
 8004d00:	4803      	ldr	r0, [pc, #12]	; (8004d10 <W25qxx_ReadStatusRegister+0x84>)
 8004d02:	f001 fec1 	bl	8006a88 <HAL_GPIO_WritePin>
	return status;
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40020400 	.word	0x40020400
 8004d14:	20001628 	.word	0x20001628

08004d18 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8004d1c:	2001      	movs	r0, #1
 8004d1e:	f000 fbc7 	bl	80054b0 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004d22:	2200      	movs	r2, #0
 8004d24:	2101      	movs	r1, #1
 8004d26:	480f      	ldr	r0, [pc, #60]	; (8004d64 <W25qxx_WaitForWriteEnd+0x4c>)
 8004d28:	f001 feae 	bl	8006a88 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8004d2c:	2005      	movs	r0, #5
 8004d2e:	f7ff ff15 	bl	8004b5c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004d32:	20a5      	movs	r0, #165	; 0xa5
 8004d34:	f7ff ff12 	bl	8004b5c <W25qxx_Spi>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <W25qxx_WaitForWriteEnd+0x50>)
 8004d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8004d42:	2001      	movs	r0, #1
 8004d44:	f000 fbb4 	bl	80054b0 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8004d48:	4b07      	ldr	r3, [pc, #28]	; (8004d68 <W25qxx_WaitForWriteEnd+0x50>)
 8004d4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1ed      	bne.n	8004d32 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004d56:	2201      	movs	r2, #1
 8004d58:	2101      	movs	r1, #1
 8004d5a:	4802      	ldr	r0, [pc, #8]	; (8004d64 <W25qxx_WaitForWriteEnd+0x4c>)
 8004d5c:	f001 fe94 	bl	8006a88 <HAL_GPIO_WritePin>
}
 8004d60:	bf00      	nop
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40020400 	.word	0x40020400
 8004d68:	20001628 	.word	0x20001628

08004d6c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8004d72:	4b65      	ldr	r3, [pc, #404]	; (8004f08 <W25qxx_Init+0x19c>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8004d7a:	e002      	b.n	8004d82 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	f000 fb97 	bl	80054b0 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8004d82:	f000 fb89 	bl	8005498 <HAL_GetTick>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b63      	cmp	r3, #99	; 0x63
 8004d8a:	d9f7      	bls.n	8004d7c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	2101      	movs	r1, #1
 8004d90:	485e      	ldr	r0, [pc, #376]	; (8004f0c <W25qxx_Init+0x1a0>)
 8004d92:	f001 fe79 	bl	8006a88 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8004d96:	2064      	movs	r0, #100	; 0x64
 8004d98:	f000 fb8a 	bl	80054b0 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8004d9c:	f7ff fef4 	bl	8004b88 <W25qxx_ReadID>
 8004da0:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	3b11      	subs	r3, #17
 8004da8:	2b0f      	cmp	r3, #15
 8004daa:	d86c      	bhi.n	8004e86 <W25qxx_Init+0x11a>
 8004dac:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <W25qxx_Init+0x48>)
 8004dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db2:	bf00      	nop
 8004db4:	08004e79 	.word	0x08004e79
 8004db8:	08004e6b 	.word	0x08004e6b
 8004dbc:	08004e5d 	.word	0x08004e5d
 8004dc0:	08004e4f 	.word	0x08004e4f
 8004dc4:	08004e41 	.word	0x08004e41
 8004dc8:	08004e33 	.word	0x08004e33
 8004dcc:	08004e25 	.word	0x08004e25
 8004dd0:	08004e15 	.word	0x08004e15
 8004dd4:	08004e05 	.word	0x08004e05
 8004dd8:	08004e87 	.word	0x08004e87
 8004ddc:	08004e87 	.word	0x08004e87
 8004de0:	08004e87 	.word	0x08004e87
 8004de4:	08004e87 	.word	0x08004e87
 8004de8:	08004e87 	.word	0x08004e87
 8004dec:	08004e87 	.word	0x08004e87
 8004df0:	08004df5 	.word	0x08004df5
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004df4:	4b44      	ldr	r3, [pc, #272]	; (8004f08 <W25qxx_Init+0x19c>)
 8004df6:	220a      	movs	r2, #10
 8004df8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004dfa:	4b43      	ldr	r3, [pc, #268]	; (8004f08 <W25qxx_Init+0x19c>)
 8004dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e00:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8004e02:	e046      	b.n	8004e92 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004e04:	4b40      	ldr	r3, [pc, #256]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e06:	2209      	movs	r2, #9
 8004e08:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004e0a:	4b3f      	ldr	r3, [pc, #252]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e10:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8004e12:	e03e      	b.n	8004e92 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004e14:	4b3c      	ldr	r3, [pc, #240]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e16:	2208      	movs	r2, #8
 8004e18:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004e1a:	4b3b      	ldr	r3, [pc, #236]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e20:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8004e22:	e036      	b.n	8004e92 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8004e24:	4b38      	ldr	r3, [pc, #224]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e26:	2207      	movs	r2, #7
 8004e28:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004e2a:	4b37      	ldr	r3, [pc, #220]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e2c:	2280      	movs	r2, #128	; 0x80
 8004e2e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8004e30:	e02f      	b.n	8004e92 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004e32:	4b35      	ldr	r3, [pc, #212]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e34:	2206      	movs	r2, #6
 8004e36:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004e38:	4b33      	ldr	r3, [pc, #204]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e3a:	2240      	movs	r2, #64	; 0x40
 8004e3c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8004e3e:	e028      	b.n	8004e92 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004e40:	4b31      	ldr	r3, [pc, #196]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e42:	2205      	movs	r2, #5
 8004e44:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004e46:	4b30      	ldr	r3, [pc, #192]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e48:	2220      	movs	r2, #32
 8004e4a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8004e4c:	e021      	b.n	8004e92 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8004e4e:	4b2e      	ldr	r3, [pc, #184]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e50:	2204      	movs	r2, #4
 8004e52:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004e54:	4b2c      	ldr	r3, [pc, #176]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e56:	2210      	movs	r2, #16
 8004e58:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8004e5a:	e01a      	b.n	8004e92 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8004e5c:	4b2a      	ldr	r3, [pc, #168]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e5e:	2203      	movs	r2, #3
 8004e60:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004e62:	4b29      	ldr	r3, [pc, #164]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e64:	2208      	movs	r2, #8
 8004e66:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8004e68:	e013      	b.n	8004e92 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004e6a:	4b27      	ldr	r3, [pc, #156]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004e70:	4b25      	ldr	r3, [pc, #148]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e72:	2204      	movs	r2, #4
 8004e74:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8004e76:	e00c      	b.n	8004e92 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004e78:	4b23      	ldr	r3, [pc, #140]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004e7e:	4b22      	ldr	r3, [pc, #136]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e80:	2202      	movs	r2, #2
 8004e82:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8004e84:	e005      	b.n	8004e92 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8004e86:	4b20      	ldr	r3, [pc, #128]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e036      	b.n	8004f00 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8004e92:	4b1d      	ldr	r3, [pc, #116]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e98:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004e9a:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <W25qxx_Init+0x19c>)
 8004e9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ea0:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004ea2:	4b19      	ldr	r3, [pc, #100]	; (8004f08 <W25qxx_Init+0x19c>)
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <W25qxx_Init+0x19c>)
 8004eaa:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004eac:	4b16      	ldr	r3, [pc, #88]	; (8004f08 <W25qxx_Init+0x19c>)
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <W25qxx_Init+0x19c>)
 8004eb2:	6912      	ldr	r2, [r2, #16]
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	4a13      	ldr	r2, [pc, #76]	; (8004f08 <W25qxx_Init+0x19c>)
 8004eba:	8952      	ldrh	r2, [r2, #10]
 8004ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ec0:	4a11      	ldr	r2, [pc, #68]	; (8004f08 <W25qxx_Init+0x19c>)
 8004ec2:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004ec4:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <W25qxx_Init+0x19c>)
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	4a0f      	ldr	r2, [pc, #60]	; (8004f08 <W25qxx_Init+0x19c>)
 8004ecc:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004ece:	4b0e      	ldr	r3, [pc, #56]	; (8004f08 <W25qxx_Init+0x19c>)
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	4a0d      	ldr	r2, [pc, #52]	; (8004f08 <W25qxx_Init+0x19c>)
 8004ed4:	6912      	ldr	r2, [r2, #16]
 8004ed6:	fb02 f303 	mul.w	r3, r2, r3
 8004eda:	0a9b      	lsrs	r3, r3, #10
 8004edc:	4a0a      	ldr	r2, [pc, #40]	; (8004f08 <W25qxx_Init+0x19c>)
 8004ede:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004ee0:	f7ff fe88 	bl	8004bf4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004ee4:	2001      	movs	r0, #1
 8004ee6:	f7ff fed1 	bl	8004c8c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004eea:	2002      	movs	r0, #2
 8004eec:	f7ff fece 	bl	8004c8c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8004ef0:	2003      	movs	r0, #3
 8004ef2:	f7ff fecb 	bl	8004c8c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8004ef6:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <W25qxx_Init+0x19c>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004efe:	2301      	movs	r3, #1
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20001628 	.word	0x20001628
 8004f0c:	40020400 	.word	0x40020400

08004f10 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004f18:	e002      	b.n	8004f20 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	f000 fac8 	bl	80054b0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004f20:	4b25      	ldr	r3, [pc, #148]	; (8004fb8 <W25qxx_EraseSector+0xa8>)
 8004f22:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d0f7      	beq.n	8004f1a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004f2a:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <W25qxx_EraseSector+0xa8>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8004f32:	f7ff fef1 	bl	8004d18 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8004f36:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <W25qxx_EraseSector+0xa8>)
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	fb02 f303 	mul.w	r3, r2, r3
 8004f40:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004f42:	f7ff fe8d 	bl	8004c60 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004f46:	2200      	movs	r2, #0
 8004f48:	2101      	movs	r1, #1
 8004f4a:	481c      	ldr	r0, [pc, #112]	; (8004fbc <W25qxx_EraseSector+0xac>)
 8004f4c:	f001 fd9c 	bl	8006a88 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004f50:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <W25qxx_EraseSector+0xa8>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d909      	bls.n	8004f6c <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8004f58:	2021      	movs	r0, #33	; 0x21
 8004f5a:	f7ff fdff 	bl	8004b5c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	0e1b      	lsrs	r3, r3, #24
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff fdf9 	bl	8004b5c <W25qxx_Spi>
 8004f6a:	e002      	b.n	8004f72 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8004f6c:	2020      	movs	r0, #32
 8004f6e:	f7ff fdf5 	bl	8004b5c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	0c1b      	lsrs	r3, r3, #16
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff fdef 	bl	8004b5c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	0a1b      	lsrs	r3, r3, #8
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff fde9 	bl	8004b5c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fde4 	bl	8004b5c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004f94:	2201      	movs	r2, #1
 8004f96:	2101      	movs	r1, #1
 8004f98:	4808      	ldr	r0, [pc, #32]	; (8004fbc <W25qxx_EraseSector+0xac>)
 8004f9a:	f001 fd75 	bl	8006a88 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004f9e:	f7ff febb 	bl	8004d18 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8004fa2:	2001      	movs	r0, #1
 8004fa4:	f000 fa84 	bl	80054b0 <HAL_Delay>
	w25qxx.Lock = 0;
 8004fa8:	4b03      	ldr	r3, [pc, #12]	; (8004fb8 <W25qxx_EraseSector+0xa8>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20001628 	.word	0x20001628
 8004fbc:	40020400 	.word	0x40020400

08004fc0 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004fc8:	4b07      	ldr	r3, [pc, #28]	; (8004fe8 <W25qxx_SectorToPage+0x28>)
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	4a05      	ldr	r2, [pc, #20]	; (8004fe8 <W25qxx_SectorToPage+0x28>)
 8004fd4:	8952      	ldrh	r2, [r2, #10]
 8004fd6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	20001628 	.word	0x20001628

08004fec <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004ffa:	e002      	b.n	8005002 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004ffc:	2001      	movs	r0, #1
 8004ffe:	f000 fa57 	bl	80054b0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8005002:	4b39      	ldr	r3, [pc, #228]	; (80050e8 <W25qxx_WritePage+0xfc>)
 8005004:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005008:	2b01      	cmp	r3, #1
 800500a:	d0f7      	beq.n	8004ffc <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 800500c:	4b36      	ldr	r3, [pc, #216]	; (80050e8 <W25qxx_WritePage+0xfc>)
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4413      	add	r3, r2
 800501a:	4a33      	ldr	r2, [pc, #204]	; (80050e8 <W25qxx_WritePage+0xfc>)
 800501c:	8952      	ldrh	r2, [r2, #10]
 800501e:	4293      	cmp	r3, r2
 8005020:	d802      	bhi.n	8005028 <W25qxx_WritePage+0x3c>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d105      	bne.n	8005034 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8005028:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <W25qxx_WritePage+0xfc>)
 800502a:	895b      	ldrh	r3, [r3, #10]
 800502c:	461a      	mov	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	4413      	add	r3, r2
 800503a:	4a2b      	ldr	r2, [pc, #172]	; (80050e8 <W25qxx_WritePage+0xfc>)
 800503c:	8952      	ldrh	r2, [r2, #10]
 800503e:	4293      	cmp	r3, r2
 8005040:	d905      	bls.n	800504e <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8005042:	4b29      	ldr	r3, [pc, #164]	; (80050e8 <W25qxx_WritePage+0xfc>)
 8005044:	895b      	ldrh	r3, [r3, #10]
 8005046:	461a      	mov	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 800504e:	f7ff fe63 	bl	8004d18 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8005052:	f7ff fe05 	bl	8004c60 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005056:	2200      	movs	r2, #0
 8005058:	2101      	movs	r1, #1
 800505a:	4824      	ldr	r0, [pc, #144]	; (80050ec <W25qxx_WritePage+0x100>)
 800505c:	f001 fd14 	bl	8006a88 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8005060:	4b21      	ldr	r3, [pc, #132]	; (80050e8 <W25qxx_WritePage+0xfc>)
 8005062:	895b      	ldrh	r3, [r3, #10]
 8005064:	461a      	mov	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	fb02 f303 	mul.w	r3, r2, r3
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	4413      	add	r3, r2
 8005070:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8005072:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <W25qxx_WritePage+0xfc>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b08      	cmp	r3, #8
 8005078:	d909      	bls.n	800508e <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 800507a:	2012      	movs	r0, #18
 800507c:	f7ff fd6e 	bl	8004b5c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	0e1b      	lsrs	r3, r3, #24
 8005084:	b2db      	uxtb	r3, r3
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fd68 	bl	8004b5c <W25qxx_Spi>
 800508c:	e002      	b.n	8005094 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 800508e:	2002      	movs	r0, #2
 8005090:	f7ff fd64 	bl	8004b5c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	0c1b      	lsrs	r3, r3, #16
 8005098:	b2db      	uxtb	r3, r3
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff fd5e 	bl	8004b5c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	0a1b      	lsrs	r3, r3, #8
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff fd58 	bl	8004b5c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fd53 	bl	8004b5c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	2364      	movs	r3, #100	; 0x64
 80050bc:	68f9      	ldr	r1, [r7, #12]
 80050be:	480c      	ldr	r0, [pc, #48]	; (80050f0 <W25qxx_WritePage+0x104>)
 80050c0:	f003 f93a 	bl	8008338 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80050c4:	2201      	movs	r2, #1
 80050c6:	2101      	movs	r1, #1
 80050c8:	4808      	ldr	r0, [pc, #32]	; (80050ec <W25qxx_WritePage+0x100>)
 80050ca:	f001 fcdd 	bl	8006a88 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80050ce:	f7ff fe23 	bl	8004d18 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80050d2:	2001      	movs	r0, #1
 80050d4:	f000 f9ec 	bl	80054b0 <HAL_Delay>
	w25qxx.Lock = 0;
 80050d8:	4b03      	ldr	r3, [pc, #12]	; (80050e8 <W25qxx_WritePage+0xfc>)
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20001628 	.word	0x20001628
 80050ec:	40020400 	.word	0x40020400
 80050f0:	20000358 	.word	0x20000358

080050f4 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8005102:	4b2c      	ldr	r3, [pc, #176]	; (80051b4 <W25qxx_WriteSector+0xc0>)
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d802      	bhi.n	8005112 <W25qxx_WriteSector+0x1e>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d102      	bne.n	8005118 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8005112:	4b28      	ldr	r3, [pc, #160]	; (80051b4 <W25qxx_WriteSector+0xc0>)
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8005118:	4b26      	ldr	r3, [pc, #152]	; (80051b4 <W25qxx_WriteSector+0xc0>)
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	429a      	cmp	r2, r3
 8005120:	d243      	bcs.n	80051aa <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	441a      	add	r2, r3
 8005128:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <W25qxx_WriteSector+0xc0>)
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	429a      	cmp	r2, r3
 800512e:	d905      	bls.n	800513c <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8005130:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <W25qxx_WriteSector+0xc0>)
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	e001      	b.n	8005140 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8005140:	68b8      	ldr	r0, [r7, #8]
 8005142:	f7ff ff3d 	bl	8004fc0 <W25qxx_SectorToPage>
 8005146:	4602      	mov	r2, r0
 8005148:	4b1a      	ldr	r3, [pc, #104]	; (80051b4 <W25qxx_WriteSector+0xc0>)
 800514a:	895b      	ldrh	r3, [r3, #10]
 800514c:	4619      	mov	r1, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	fbb3 f3f1 	udiv	r3, r3, r1
 8005154:	4413      	add	r3, r2
 8005156:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8005158:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <W25qxx_WriteSector+0xc0>)
 800515a:	895b      	ldrh	r3, [r3, #10]
 800515c:	461a      	mov	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	fbb3 f1f2 	udiv	r1, r3, r2
 8005164:	fb01 f202 	mul.w	r2, r1, r2
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	69f9      	ldr	r1, [r7, #28]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f7ff ff3a 	bl	8004fec <W25qxx_WritePage>
		StartPage++;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	3301      	adds	r3, #1
 800517c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800517e:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <W25qxx_WriteSector+0xc0>)
 8005180:	895b      	ldrh	r3, [r3, #10]
 8005182:	461a      	mov	r2, r3
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	1a9a      	subs	r2, r3, r2
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	4413      	add	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <W25qxx_WriteSector+0xc0>)
 8005190:	895b      	ldrh	r3, [r3, #10]
 8005192:	461a      	mov	r2, r3
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	dce1      	bgt.n	800516c <W25qxx_WriteSector+0x78>
 80051a8:	e000      	b.n	80051ac <W25qxx_WriteSector+0xb8>
		return;
 80051aa:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20001628 	.word	0x20001628

080051b8 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80051c6:	e002      	b.n	80051ce <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80051c8:	2001      	movs	r0, #1
 80051ca:	f000 f971 	bl	80054b0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80051ce:	4b36      	ldr	r3, [pc, #216]	; (80052a8 <W25qxx_ReadPage+0xf0>)
 80051d0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d0f7      	beq.n	80051c8 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80051d8:	4b33      	ldr	r3, [pc, #204]	; (80052a8 <W25qxx_ReadPage+0xf0>)
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80051e0:	4b31      	ldr	r3, [pc, #196]	; (80052a8 <W25qxx_ReadPage+0xf0>)
 80051e2:	895b      	ldrh	r3, [r3, #10]
 80051e4:	461a      	mov	r2, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d802      	bhi.n	80051f2 <W25qxx_ReadPage+0x3a>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d102      	bne.n	80051f8 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80051f2:	4b2d      	ldr	r3, [pc, #180]	; (80052a8 <W25qxx_ReadPage+0xf0>)
 80051f4:	895b      	ldrh	r3, [r3, #10]
 80051f6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	4413      	add	r3, r2
 80051fe:	4a2a      	ldr	r2, [pc, #168]	; (80052a8 <W25qxx_ReadPage+0xf0>)
 8005200:	8952      	ldrh	r2, [r2, #10]
 8005202:	4293      	cmp	r3, r2
 8005204:	d905      	bls.n	8005212 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8005206:	4b28      	ldr	r3, [pc, #160]	; (80052a8 <W25qxx_ReadPage+0xf0>)
 8005208:	895b      	ldrh	r3, [r3, #10]
 800520a:	461a      	mov	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8005212:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <W25qxx_ReadPage+0xf0>)
 8005214:	895b      	ldrh	r3, [r3, #10]
 8005216:	461a      	mov	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	fb02 f303 	mul.w	r3, r2, r3
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4413      	add	r3, r2
 8005222:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005224:	2200      	movs	r2, #0
 8005226:	2101      	movs	r1, #1
 8005228:	4820      	ldr	r0, [pc, #128]	; (80052ac <W25qxx_ReadPage+0xf4>)
 800522a:	f001 fc2d 	bl	8006a88 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800522e:	4b1e      	ldr	r3, [pc, #120]	; (80052a8 <W25qxx_ReadPage+0xf0>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b08      	cmp	r3, #8
 8005234:	d909      	bls.n	800524a <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8005236:	200c      	movs	r0, #12
 8005238:	f7ff fc90 	bl	8004b5c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	0e1b      	lsrs	r3, r3, #24
 8005240:	b2db      	uxtb	r3, r3
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fc8a 	bl	8004b5c <W25qxx_Spi>
 8005248:	e002      	b.n	8005250 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800524a:	200b      	movs	r0, #11
 800524c:	f7ff fc86 	bl	8004b5c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	0c1b      	lsrs	r3, r3, #16
 8005254:	b2db      	uxtb	r3, r3
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff fc80 	bl	8004b5c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	0a1b      	lsrs	r3, r3, #8
 8005260:	b2db      	uxtb	r3, r3
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fc7a 	bl	8004b5c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff fc75 	bl	8004b5c <W25qxx_Spi>
	W25qxx_Spi(0);
 8005272:	2000      	movs	r0, #0
 8005274:	f7ff fc72 	bl	8004b5c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	b29a      	uxth	r2, r3
 800527c:	2364      	movs	r3, #100	; 0x64
 800527e:	68f9      	ldr	r1, [r7, #12]
 8005280:	480b      	ldr	r0, [pc, #44]	; (80052b0 <W25qxx_ReadPage+0xf8>)
 8005282:	f003 f995 	bl	80085b0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005286:	2201      	movs	r2, #1
 8005288:	2101      	movs	r1, #1
 800528a:	4808      	ldr	r0, [pc, #32]	; (80052ac <W25qxx_ReadPage+0xf4>)
 800528c:	f001 fbfc 	bl	8006a88 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8005290:	2001      	movs	r0, #1
 8005292:	f000 f90d 	bl	80054b0 <HAL_Delay>
	w25qxx.Lock = 0;
 8005296:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <W25qxx_ReadPage+0xf0>)
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800529e:	bf00      	nop
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	20001628 	.word	0x20001628
 80052ac:	40020400 	.word	0x40020400
 80052b0:	20000358 	.word	0x20000358

080052b4 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80052c2:	4b2c      	ldr	r3, [pc, #176]	; (8005374 <W25qxx_ReadSector+0xc0>)
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d802      	bhi.n	80052d2 <W25qxx_ReadSector+0x1e>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d102      	bne.n	80052d8 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80052d2:	4b28      	ldr	r3, [pc, #160]	; (8005374 <W25qxx_ReadSector+0xc0>)
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80052d8:	4b26      	ldr	r3, [pc, #152]	; (8005374 <W25qxx_ReadSector+0xc0>)
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d243      	bcs.n	800536a <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	441a      	add	r2, r3
 80052e8:	4b22      	ldr	r3, [pc, #136]	; (8005374 <W25qxx_ReadSector+0xc0>)
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d905      	bls.n	80052fc <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80052f0:	4b20      	ldr	r3, [pc, #128]	; (8005374 <W25qxx_ReadSector+0xc0>)
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	e001      	b.n	8005300 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8005300:	68b8      	ldr	r0, [r7, #8]
 8005302:	f7ff fe5d 	bl	8004fc0 <W25qxx_SectorToPage>
 8005306:	4602      	mov	r2, r0
 8005308:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <W25qxx_ReadSector+0xc0>)
 800530a:	895b      	ldrh	r3, [r3, #10]
 800530c:	4619      	mov	r1, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	fbb3 f3f1 	udiv	r3, r3, r1
 8005314:	4413      	add	r3, r2
 8005316:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8005318:	4b16      	ldr	r3, [pc, #88]	; (8005374 <W25qxx_ReadSector+0xc0>)
 800531a:	895b      	ldrh	r3, [r3, #10]
 800531c:	461a      	mov	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	fbb3 f1f2 	udiv	r1, r3, r2
 8005324:	fb01 f202 	mul.w	r2, r1, r2
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	69f9      	ldr	r1, [r7, #28]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f7ff ff40 	bl	80051b8 <W25qxx_ReadPage>
		StartPage++;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	3301      	adds	r3, #1
 800533c:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800533e:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <W25qxx_ReadSector+0xc0>)
 8005340:	895b      	ldrh	r3, [r3, #10]
 8005342:	461a      	mov	r2, r3
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	1a9a      	subs	r2, r3, r2
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	4413      	add	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800534e:	4b09      	ldr	r3, [pc, #36]	; (8005374 <W25qxx_ReadSector+0xc0>)
 8005350:	895b      	ldrh	r3, [r3, #10]
 8005352:	461a      	mov	r2, r3
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	dce1      	bgt.n	800532c <W25qxx_ReadSector+0x78>
 8005368:	e000      	b.n	800536c <W25qxx_ReadSector+0xb8>
		return;
 800536a:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20001628 	.word	0x20001628

08005378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800537c:	480d      	ldr	r0, [pc, #52]	; (80053b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800537e:	490e      	ldr	r1, [pc, #56]	; (80053b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005380:	4a0e      	ldr	r2, [pc, #56]	; (80053bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005384:	e002      	b.n	800538c <LoopCopyDataInit>

08005386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800538a:	3304      	adds	r3, #4

0800538c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800538c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800538e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005390:	d3f9      	bcc.n	8005386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005392:	4a0b      	ldr	r2, [pc, #44]	; (80053c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005394:	4c0b      	ldr	r4, [pc, #44]	; (80053c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005398:	e001      	b.n	800539e <LoopFillZerobss>

0800539a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800539a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800539c:	3204      	adds	r2, #4

0800539e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800539e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053a0:	d3fb      	bcc.n	800539a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80053a2:	f7ff fbc9 	bl	8004b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053a6:	f008 fe79 	bl	800e09c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053aa:	f7fe fa65 	bl	8003878 <main>
  bx  lr    
 80053ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80053b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80053b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053b8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80053bc:	08013780 	.word	0x08013780
  ldr r2, =_sbss
 80053c0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80053c4:	200018a0 	.word	0x200018a0

080053c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053c8:	e7fe      	b.n	80053c8 <ADC_IRQHandler>
	...

080053cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053d0:	4b0e      	ldr	r3, [pc, #56]	; (800540c <HAL_Init+0x40>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a0d      	ldr	r2, [pc, #52]	; (800540c <HAL_Init+0x40>)
 80053d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80053dc:	4b0b      	ldr	r3, [pc, #44]	; (800540c <HAL_Init+0x40>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a0a      	ldr	r2, [pc, #40]	; (800540c <HAL_Init+0x40>)
 80053e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053e8:	4b08      	ldr	r3, [pc, #32]	; (800540c <HAL_Init+0x40>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a07      	ldr	r2, [pc, #28]	; (800540c <HAL_Init+0x40>)
 80053ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053f4:	2003      	movs	r0, #3
 80053f6:	f000 fd4f 	bl	8005e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053fa:	200f      	movs	r0, #15
 80053fc:	f000 f808 	bl	8005410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005400:	f7fe ffc2 	bl	8004388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40023c00 	.word	0x40023c00

08005410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005418:	4b12      	ldr	r3, [pc, #72]	; (8005464 <HAL_InitTick+0x54>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	4b12      	ldr	r3, [pc, #72]	; (8005468 <HAL_InitTick+0x58>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	4619      	mov	r1, r3
 8005422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005426:	fbb3 f3f1 	udiv	r3, r3, r1
 800542a:	fbb2 f3f3 	udiv	r3, r2, r3
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fd67 	bl	8005f02 <HAL_SYSTICK_Config>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e00e      	b.n	800545c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b0f      	cmp	r3, #15
 8005442:	d80a      	bhi.n	800545a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005444:	2200      	movs	r2, #0
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	f000 fd2f 	bl	8005eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005450:	4a06      	ldr	r2, [pc, #24]	; (800546c <HAL_InitTick+0x5c>)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	e000      	b.n	800545c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
}
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	20000004 	.word	0x20000004
 8005468:	2000000c 	.word	0x2000000c
 800546c:	20000008 	.word	0x20000008

08005470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005474:	4b06      	ldr	r3, [pc, #24]	; (8005490 <HAL_IncTick+0x20>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <HAL_IncTick+0x24>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4413      	add	r3, r2
 8005480:	4a04      	ldr	r2, [pc, #16]	; (8005494 <HAL_IncTick+0x24>)
 8005482:	6013      	str	r3, [r2, #0]
}
 8005484:	bf00      	nop
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	2000000c 	.word	0x2000000c
 8005494:	20001650 	.word	0x20001650

08005498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  return uwTick;
 800549c:	4b03      	ldr	r3, [pc, #12]	; (80054ac <HAL_GetTick+0x14>)
 800549e:	681b      	ldr	r3, [r3, #0]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	20001650 	.word	0x20001650

080054b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054b8:	f7ff ffee 	bl	8005498 <HAL_GetTick>
 80054bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c8:	d005      	beq.n	80054d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054ca:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <HAL_Delay+0x44>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054d6:	bf00      	nop
 80054d8:	f7ff ffde 	bl	8005498 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d8f7      	bhi.n	80054d8 <HAL_Delay+0x28>
  {
  }
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	2000000c 	.word	0x2000000c

080054f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e033      	b.n	8005576 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	d109      	bne.n	800552a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fe ff5e 	bl	80043d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b00      	cmp	r3, #0
 8005534:	d118      	bne.n	8005568 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800553e:	f023 0302 	bic.w	r3, r3, #2
 8005542:	f043 0202 	orr.w	r2, r3, #2
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fad8 	bl	8005b00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	f023 0303 	bic.w	r3, r3, #3
 800555e:	f043 0201 	orr.w	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	641a      	str	r2, [r3, #64]	; 0x40
 8005566:	e001      	b.n	800556c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <HAL_ADC_Start+0x1a>
 8005596:	2302      	movs	r3, #2
 8005598:	e0b2      	b.n	8005700 <HAL_ADC_Start+0x180>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d018      	beq.n	80055e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80055c0:	4b52      	ldr	r3, [pc, #328]	; (800570c <HAL_ADC_Start+0x18c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a52      	ldr	r2, [pc, #328]	; (8005710 <HAL_ADC_Start+0x190>)
 80055c6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ca:	0c9a      	lsrs	r2, r3, #18
 80055cc:	4613      	mov	r3, r2
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	4413      	add	r3, r2
 80055d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80055d4:	e002      	b.n	80055dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	3b01      	subs	r3, #1
 80055da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f9      	bne.n	80055d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d17a      	bne.n	80056e6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80055f8:	f023 0301 	bic.w	r3, r3, #1
 80055fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800561a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800562a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562e:	d106      	bne.n	800563e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005634:	f023 0206 	bic.w	r2, r3, #6
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	645a      	str	r2, [r3, #68]	; 0x44
 800563c:	e002      	b.n	8005644 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800564c:	4b31      	ldr	r3, [pc, #196]	; (8005714 <HAL_ADC_Start+0x194>)
 800564e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005658:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 031f 	and.w	r3, r3, #31
 8005662:	2b00      	cmp	r3, #0
 8005664:	d12a      	bne.n	80056bc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a2b      	ldr	r2, [pc, #172]	; (8005718 <HAL_ADC_Start+0x198>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d015      	beq.n	800569c <HAL_ADC_Start+0x11c>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a29      	ldr	r2, [pc, #164]	; (800571c <HAL_ADC_Start+0x19c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d105      	bne.n	8005686 <HAL_ADC_Start+0x106>
 800567a:	4b26      	ldr	r3, [pc, #152]	; (8005714 <HAL_ADC_Start+0x194>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f003 031f 	and.w	r3, r3, #31
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a25      	ldr	r2, [pc, #148]	; (8005720 <HAL_ADC_Start+0x1a0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d136      	bne.n	80056fe <HAL_ADC_Start+0x17e>
 8005690:	4b20      	ldr	r3, [pc, #128]	; (8005714 <HAL_ADC_Start+0x194>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	d130      	bne.n	80056fe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d129      	bne.n	80056fe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80056b8:	609a      	str	r2, [r3, #8]
 80056ba:	e020      	b.n	80056fe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a15      	ldr	r2, [pc, #84]	; (8005718 <HAL_ADC_Start+0x198>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d11b      	bne.n	80056fe <HAL_ADC_Start+0x17e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d114      	bne.n	80056fe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80056e2:	609a      	str	r2, [r3, #8]
 80056e4:	e00b      	b.n	80056fe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f043 0210 	orr.w	r2, r3, #16
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f6:	f043 0201 	orr.w	r2, r3, #1
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	20000004 	.word	0x20000004
 8005710:	431bde83 	.word	0x431bde83
 8005714:	40012300 	.word	0x40012300
 8005718:	40012000 	.word	0x40012000
 800571c:	40012100 	.word	0x40012100
 8005720:	40012200 	.word	0x40012200

08005724 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_ADC_Stop+0x16>
 8005736:	2302      	movs	r3, #2
 8005738:	e021      	b.n	800577e <HAL_ADC_Stop+0x5a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0201 	bic.w	r2, r2, #1
 8005750:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d109      	bne.n	8005774 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005768:	f023 0301 	bic.w	r3, r3, #1
 800576c:	f043 0201 	orr.w	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a6:	d113      	bne.n	80057d0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80057b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b6:	d10b      	bne.n	80057d0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	f043 0220 	orr.w	r2, r3, #32
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e063      	b.n	8005898 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80057d0:	f7ff fe62 	bl	8005498 <HAL_GetTick>
 80057d4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80057d6:	e021      	b.n	800581c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057de:	d01d      	beq.n	800581c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d007      	beq.n	80057f6 <HAL_ADC_PollForConversion+0x6c>
 80057e6:	f7ff fe57 	bl	8005498 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d212      	bcs.n	800581c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b02      	cmp	r3, #2
 8005802:	d00b      	beq.n	800581c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	f043 0204 	orr.w	r2, r3, #4
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e03d      	b.n	8005898 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b02      	cmp	r3, #2
 8005828:	d1d6      	bne.n	80057d8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f06f 0212 	mvn.w	r2, #18
 8005832:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d123      	bne.n	8005896 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005852:	2b00      	cmp	r3, #0
 8005854:	d11f      	bne.n	8005896 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005860:	2b00      	cmp	r3, #0
 8005862:	d006      	beq.n	8005872 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800586e:	2b00      	cmp	r3, #0
 8005870:	d111      	bne.n	8005896 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d105      	bne.n	8005896 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f043 0201 	orr.w	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
	...

080058bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_ADC_ConfigChannel+0x1c>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e105      	b.n	8005ae4 <HAL_ADC_ConfigChannel+0x228>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b09      	cmp	r3, #9
 80058e6:	d925      	bls.n	8005934 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68d9      	ldr	r1, [r3, #12]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	4613      	mov	r3, r2
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	4413      	add	r3, r2
 80058fc:	3b1e      	subs	r3, #30
 80058fe:	2207      	movs	r2, #7
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	43da      	mvns	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	400a      	ands	r2, r1
 800590c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68d9      	ldr	r1, [r3, #12]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	4618      	mov	r0, r3
 8005920:	4603      	mov	r3, r0
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	4403      	add	r3, r0
 8005926:	3b1e      	subs	r3, #30
 8005928:	409a      	lsls	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	60da      	str	r2, [r3, #12]
 8005932:	e022      	b.n	800597a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6919      	ldr	r1, [r3, #16]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	461a      	mov	r2, r3
 8005942:	4613      	mov	r3, r2
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	4413      	add	r3, r2
 8005948:	2207      	movs	r2, #7
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	43da      	mvns	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	400a      	ands	r2, r1
 8005956:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6919      	ldr	r1, [r3, #16]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	4618      	mov	r0, r3
 800596a:	4603      	mov	r3, r0
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	4403      	add	r3, r0
 8005970:	409a      	lsls	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b06      	cmp	r3, #6
 8005980:	d824      	bhi.n	80059cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	3b05      	subs	r3, #5
 8005994:	221f      	movs	r2, #31
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	43da      	mvns	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	400a      	ands	r2, r1
 80059a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	4618      	mov	r0, r3
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	3b05      	subs	r3, #5
 80059be:	fa00 f203 	lsl.w	r2, r0, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	635a      	str	r2, [r3, #52]	; 0x34
 80059ca:	e04c      	b.n	8005a66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b0c      	cmp	r3, #12
 80059d2:	d824      	bhi.n	8005a1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	4613      	mov	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	3b23      	subs	r3, #35	; 0x23
 80059e6:	221f      	movs	r2, #31
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	43da      	mvns	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	400a      	ands	r2, r1
 80059f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	4618      	mov	r0, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3b23      	subs	r3, #35	; 0x23
 8005a10:	fa00 f203 	lsl.w	r2, r0, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8005a1c:	e023      	b.n	8005a66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3b41      	subs	r3, #65	; 0x41
 8005a30:	221f      	movs	r2, #31
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	43da      	mvns	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	400a      	ands	r2, r1
 8005a3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	3b41      	subs	r3, #65	; 0x41
 8005a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a66:	4b22      	ldr	r3, [pc, #136]	; (8005af0 <HAL_ADC_ConfigChannel+0x234>)
 8005a68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a21      	ldr	r2, [pc, #132]	; (8005af4 <HAL_ADC_ConfigChannel+0x238>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d109      	bne.n	8005a88 <HAL_ADC_ConfigChannel+0x1cc>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b12      	cmp	r3, #18
 8005a7a:	d105      	bne.n	8005a88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a19      	ldr	r2, [pc, #100]	; (8005af4 <HAL_ADC_ConfigChannel+0x238>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d123      	bne.n	8005ada <HAL_ADC_ConfigChannel+0x21e>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b10      	cmp	r3, #16
 8005a98:	d003      	beq.n	8005aa2 <HAL_ADC_ConfigChannel+0x1e6>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b11      	cmp	r3, #17
 8005aa0:	d11b      	bne.n	8005ada <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b10      	cmp	r3, #16
 8005ab4:	d111      	bne.n	8005ada <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ab6:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <HAL_ADC_ConfigChannel+0x23c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a10      	ldr	r2, [pc, #64]	; (8005afc <HAL_ADC_ConfigChannel+0x240>)
 8005abc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac0:	0c9a      	lsrs	r2, r3, #18
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005acc:	e002      	b.n	8005ad4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1f9      	bne.n	8005ace <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	40012300 	.word	0x40012300
 8005af4:	40012000 	.word	0x40012000
 8005af8:	20000004 	.word	0x20000004
 8005afc:	431bde83 	.word	0x431bde83

08005b00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b08:	4b79      	ldr	r3, [pc, #484]	; (8005cf0 <ADC_Init+0x1f0>)
 8005b0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	431a      	orrs	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6859      	ldr	r1, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	021a      	lsls	r2, r3, #8
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005b58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6859      	ldr	r1, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6899      	ldr	r1, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	4a58      	ldr	r2, [pc, #352]	; (8005cf4 <ADC_Init+0x1f4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d022      	beq.n	8005bde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ba6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6899      	ldr	r1, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6899      	ldr	r1, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	609a      	str	r2, [r3, #8]
 8005bdc:	e00f      	b.n	8005bfe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005bfc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0202 	bic.w	r2, r2, #2
 8005c0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6899      	ldr	r1, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	7e1b      	ldrb	r3, [r3, #24]
 8005c18:	005a      	lsls	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01b      	beq.n	8005c64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005c4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6859      	ldr	r1, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	3b01      	subs	r3, #1
 8005c58:	035a      	lsls	r2, r3, #13
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
 8005c62:	e007      	b.n	8005c74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	051a      	lsls	r2, r3, #20
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ca8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6899      	ldr	r1, [r3, #8]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cb6:	025a      	lsls	r2, r3, #9
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6899      	ldr	r1, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	029a      	lsls	r2, r3, #10
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	609a      	str	r2, [r3, #8]
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	40012300 	.word	0x40012300
 8005cf4:	0f000001 	.word	0x0f000001

08005cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d08:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <__NVIC_SetPriorityGrouping+0x44>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d14:	4013      	ands	r3, r2
 8005d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d2a:	4a04      	ldr	r2, [pc, #16]	; (8005d3c <__NVIC_SetPriorityGrouping+0x44>)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	60d3      	str	r3, [r2, #12]
}
 8005d30:	bf00      	nop
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	e000ed00 	.word	0xe000ed00

08005d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d44:	4b04      	ldr	r3, [pc, #16]	; (8005d58 <__NVIC_GetPriorityGrouping+0x18>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	0a1b      	lsrs	r3, r3, #8
 8005d4a:	f003 0307 	and.w	r3, r3, #7
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	e000ed00 	.word	0xe000ed00

08005d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	db0b      	blt.n	8005d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	f003 021f 	and.w	r2, r3, #31
 8005d74:	4907      	ldr	r1, [pc, #28]	; (8005d94 <__NVIC_EnableIRQ+0x38>)
 8005d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	e000e100 	.word	0xe000e100

08005d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	6039      	str	r1, [r7, #0]
 8005da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	db0a      	blt.n	8005dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	490c      	ldr	r1, [pc, #48]	; (8005de4 <__NVIC_SetPriority+0x4c>)
 8005db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db6:	0112      	lsls	r2, r2, #4
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	440b      	add	r3, r1
 8005dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dc0:	e00a      	b.n	8005dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	4908      	ldr	r1, [pc, #32]	; (8005de8 <__NVIC_SetPriority+0x50>)
 8005dc8:	79fb      	ldrb	r3, [r7, #7]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	3b04      	subs	r3, #4
 8005dd0:	0112      	lsls	r2, r2, #4
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	761a      	strb	r2, [r3, #24]
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	e000e100 	.word	0xe000e100
 8005de8:	e000ed00 	.word	0xe000ed00

08005dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b089      	sub	sp, #36	; 0x24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f1c3 0307 	rsb	r3, r3, #7
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	bf28      	it	cs
 8005e0a:	2304      	movcs	r3, #4
 8005e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	3304      	adds	r3, #4
 8005e12:	2b06      	cmp	r3, #6
 8005e14:	d902      	bls.n	8005e1c <NVIC_EncodePriority+0x30>
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	3b03      	subs	r3, #3
 8005e1a:	e000      	b.n	8005e1e <NVIC_EncodePriority+0x32>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e20:	f04f 32ff 	mov.w	r2, #4294967295
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2a:	43da      	mvns	r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	401a      	ands	r2, r3
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e34:	f04f 31ff 	mov.w	r1, #4294967295
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3e:	43d9      	mvns	r1, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e44:	4313      	orrs	r3, r2
         );
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3724      	adds	r7, #36	; 0x24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e64:	d301      	bcc.n	8005e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e66:	2301      	movs	r3, #1
 8005e68:	e00f      	b.n	8005e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e6a:	4a0a      	ldr	r2, [pc, #40]	; (8005e94 <SysTick_Config+0x40>)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e72:	210f      	movs	r1, #15
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	f7ff ff8e 	bl	8005d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e7c:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <SysTick_Config+0x40>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e82:	4b04      	ldr	r3, [pc, #16]	; (8005e94 <SysTick_Config+0x40>)
 8005e84:	2207      	movs	r2, #7
 8005e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	e000e010 	.word	0xe000e010

08005e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff ff29 	bl	8005cf8 <__NVIC_SetPriorityGrouping>
}
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b086      	sub	sp, #24
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	607a      	str	r2, [r7, #4]
 8005eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ec0:	f7ff ff3e 	bl	8005d40 <__NVIC_GetPriorityGrouping>
 8005ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	6978      	ldr	r0, [r7, #20]
 8005ecc:	f7ff ff8e 	bl	8005dec <NVIC_EncodePriority>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff ff5d 	bl	8005d98 <__NVIC_SetPriority>
}
 8005ede:	bf00      	nop
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b082      	sub	sp, #8
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	4603      	mov	r3, r0
 8005eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff ff31 	bl	8005d5c <__NVIC_EnableIRQ>
}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff ffa2 	bl	8005e54 <SysTick_Config>
 8005f10:	4603      	mov	r3, r0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005f28:	f7ff fab6 	bl	8005498 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e099      	b.n	800606c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0201 	bic.w	r2, r2, #1
 8005f56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f58:	e00f      	b.n	8005f7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f5a:	f7ff fa9d 	bl	8005498 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b05      	cmp	r3, #5
 8005f66:	d908      	bls.n	8005f7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2203      	movs	r2, #3
 8005f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e078      	b.n	800606c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e8      	bne.n	8005f5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4b38      	ldr	r3, [pc, #224]	; (8006074 <HAL_DMA_Init+0x158>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d107      	bne.n	8005fe4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f023 0307 	bic.w	r3, r3, #7
 8005ffa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	2b04      	cmp	r3, #4
 800600c:	d117      	bne.n	800603e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00e      	beq.n	800603e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fb01 	bl	8006628 <DMA_CheckFifoParam>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d008      	beq.n	800603e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2240      	movs	r2, #64	; 0x40
 8006030:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800603a:	2301      	movs	r3, #1
 800603c:	e016      	b.n	800606c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fab8 	bl	80065bc <DMA_CalcBaseAndBitshift>
 800604c:	4603      	mov	r3, r0
 800604e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006054:	223f      	movs	r2, #63	; 0x3f
 8006056:	409a      	lsls	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	f010803f 	.word	0xf010803f

08006078 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006096:	2b01      	cmp	r3, #1
 8006098:	d101      	bne.n	800609e <HAL_DMA_Start_IT+0x26>
 800609a:	2302      	movs	r3, #2
 800609c:	e040      	b.n	8006120 <HAL_DMA_Start_IT+0xa8>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d12f      	bne.n	8006112 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2202      	movs	r2, #2
 80060b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	68b9      	ldr	r1, [r7, #8]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 fa4a 	bl	8006560 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d0:	223f      	movs	r2, #63	; 0x3f
 80060d2:	409a      	lsls	r2, r3
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0216 	orr.w	r2, r2, #22
 80060e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d007      	beq.n	8006100 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0208 	orr.w	r2, r2, #8
 80060fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0201 	orr.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	e005      	b.n	800611e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800611a:	2302      	movs	r3, #2
 800611c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800611e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006134:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006136:	f7ff f9af 	bl	8005498 <HAL_GetTick>
 800613a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d008      	beq.n	800615a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2280      	movs	r2, #128	; 0x80
 800614c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e052      	b.n	8006200 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0216 	bic.w	r2, r2, #22
 8006168:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695a      	ldr	r2, [r3, #20]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006178:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <HAL_DMA_Abort+0x62>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006186:	2b00      	cmp	r3, #0
 8006188:	d007      	beq.n	800619a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0208 	bic.w	r2, r2, #8
 8006198:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0201 	bic.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061aa:	e013      	b.n	80061d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061ac:	f7ff f974 	bl	8005498 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b05      	cmp	r3, #5
 80061b8:	d90c      	bls.n	80061d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2203      	movs	r2, #3
 80061c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e015      	b.n	8006200 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e4      	bne.n	80061ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e6:	223f      	movs	r2, #63	; 0x3f
 80061e8:	409a      	lsls	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d004      	beq.n	8006226 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2280      	movs	r2, #128	; 0x80
 8006220:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e00c      	b.n	8006240 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2205      	movs	r2, #5
 800622a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0201 	bic.w	r2, r2, #1
 800623c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006258:	4b8e      	ldr	r3, [pc, #568]	; (8006494 <HAL_DMA_IRQHandler+0x248>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a8e      	ldr	r2, [pc, #568]	; (8006498 <HAL_DMA_IRQHandler+0x24c>)
 800625e:	fba2 2303 	umull	r2, r3, r2, r3
 8006262:	0a9b      	lsrs	r3, r3, #10
 8006264:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800626a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006276:	2208      	movs	r2, #8
 8006278:	409a      	lsls	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4013      	ands	r3, r2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d01a      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d013      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0204 	bic.w	r2, r2, #4
 800629e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a4:	2208      	movs	r2, #8
 80062a6:	409a      	lsls	r2, r3
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b0:	f043 0201 	orr.w	r2, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062bc:	2201      	movs	r2, #1
 80062be:	409a      	lsls	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d012      	beq.n	80062ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00b      	beq.n	80062ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062da:	2201      	movs	r2, #1
 80062dc:	409a      	lsls	r2, r3
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e6:	f043 0202 	orr.w	r2, r3, #2
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f2:	2204      	movs	r2, #4
 80062f4:	409a      	lsls	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4013      	ands	r3, r2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d012      	beq.n	8006324 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00b      	beq.n	8006324 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006310:	2204      	movs	r2, #4
 8006312:	409a      	lsls	r2, r3
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631c:	f043 0204 	orr.w	r2, r3, #4
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006328:	2210      	movs	r2, #16
 800632a:	409a      	lsls	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4013      	ands	r3, r2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d043      	beq.n	80063bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d03c      	beq.n	80063bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006346:	2210      	movs	r2, #16
 8006348:	409a      	lsls	r2, r3
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d018      	beq.n	800638e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d108      	bne.n	800637c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d024      	beq.n	80063bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
 800637a:	e01f      	b.n	80063bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01b      	beq.n	80063bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	4798      	blx	r3
 800638c:	e016      	b.n	80063bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006398:	2b00      	cmp	r3, #0
 800639a:	d107      	bne.n	80063ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0208 	bic.w	r2, r2, #8
 80063aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c0:	2220      	movs	r2, #32
 80063c2:	409a      	lsls	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 808f 	beq.w	80064ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0310 	and.w	r3, r3, #16
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8087 	beq.w	80064ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e2:	2220      	movs	r2, #32
 80063e4:	409a      	lsls	r2, r3
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b05      	cmp	r3, #5
 80063f4:	d136      	bne.n	8006464 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0216 	bic.w	r2, r2, #22
 8006404:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695a      	ldr	r2, [r3, #20]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006414:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d103      	bne.n	8006426 <HAL_DMA_IRQHandler+0x1da>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006422:	2b00      	cmp	r3, #0
 8006424:	d007      	beq.n	8006436 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0208 	bic.w	r2, r2, #8
 8006434:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643a:	223f      	movs	r2, #63	; 0x3f
 800643c:	409a      	lsls	r2, r3
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006456:	2b00      	cmp	r3, #0
 8006458:	d07e      	beq.n	8006558 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	4798      	blx	r3
        }
        return;
 8006462:	e079      	b.n	8006558 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d01d      	beq.n	80064ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10d      	bne.n	800649c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006484:	2b00      	cmp	r3, #0
 8006486:	d031      	beq.n	80064ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	4798      	blx	r3
 8006490:	e02c      	b.n	80064ec <HAL_DMA_IRQHandler+0x2a0>
 8006492:	bf00      	nop
 8006494:	20000004 	.word	0x20000004
 8006498:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d023      	beq.n	80064ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	4798      	blx	r3
 80064ac:	e01e      	b.n	80064ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10f      	bne.n	80064dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0210 	bic.w	r2, r2, #16
 80064ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d032      	beq.n	800655a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d022      	beq.n	8006546 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2205      	movs	r2, #5
 8006504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0201 	bic.w	r2, r2, #1
 8006516:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	3301      	adds	r3, #1
 800651c:	60bb      	str	r3, [r7, #8]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	429a      	cmp	r2, r3
 8006522:	d307      	bcc.n	8006534 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1f2      	bne.n	8006518 <HAL_DMA_IRQHandler+0x2cc>
 8006532:	e000      	b.n	8006536 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006534:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d005      	beq.n	800655a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	4798      	blx	r3
 8006556:	e000      	b.n	800655a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006558:	bf00      	nop
    }
  }
}
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800657c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b40      	cmp	r3, #64	; 0x40
 800658c:	d108      	bne.n	80065a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800659e:	e007      	b.n	80065b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	60da      	str	r2, [r3, #12]
}
 80065b0:	bf00      	nop
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	3b10      	subs	r3, #16
 80065cc:	4a14      	ldr	r2, [pc, #80]	; (8006620 <DMA_CalcBaseAndBitshift+0x64>)
 80065ce:	fba2 2303 	umull	r2, r3, r2, r3
 80065d2:	091b      	lsrs	r3, r3, #4
 80065d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80065d6:	4a13      	ldr	r2, [pc, #76]	; (8006624 <DMA_CalcBaseAndBitshift+0x68>)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4413      	add	r3, r2
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d909      	bls.n	80065fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065f2:	f023 0303 	bic.w	r3, r3, #3
 80065f6:	1d1a      	adds	r2, r3, #4
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	659a      	str	r2, [r3, #88]	; 0x58
 80065fc:	e007      	b.n	800660e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	aaaaaaab 	.word	0xaaaaaaab
 8006624:	08012e24 	.word	0x08012e24

08006628 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006638:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d11f      	bne.n	8006682 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2b03      	cmp	r3, #3
 8006646:	d856      	bhi.n	80066f6 <DMA_CheckFifoParam+0xce>
 8006648:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <DMA_CheckFifoParam+0x28>)
 800664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664e:	bf00      	nop
 8006650:	08006661 	.word	0x08006661
 8006654:	08006673 	.word	0x08006673
 8006658:	08006661 	.word	0x08006661
 800665c:	080066f7 	.word	0x080066f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d046      	beq.n	80066fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006670:	e043      	b.n	80066fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006676:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800667a:	d140      	bne.n	80066fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006680:	e03d      	b.n	80066fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800668a:	d121      	bne.n	80066d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b03      	cmp	r3, #3
 8006690:	d837      	bhi.n	8006702 <DMA_CheckFifoParam+0xda>
 8006692:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <DMA_CheckFifoParam+0x70>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	080066a9 	.word	0x080066a9
 800669c:	080066af 	.word	0x080066af
 80066a0:	080066a9 	.word	0x080066a9
 80066a4:	080066c1 	.word	0x080066c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	73fb      	strb	r3, [r7, #15]
      break;
 80066ac:	e030      	b.n	8006710 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d025      	beq.n	8006706 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066be:	e022      	b.n	8006706 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066c8:	d11f      	bne.n	800670a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80066ce:	e01c      	b.n	800670a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d903      	bls.n	80066de <DMA_CheckFifoParam+0xb6>
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d003      	beq.n	80066e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80066dc:	e018      	b.n	8006710 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	73fb      	strb	r3, [r7, #15]
      break;
 80066e2:	e015      	b.n	8006710 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00e      	beq.n	800670e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
      break;
 80066f4:	e00b      	b.n	800670e <DMA_CheckFifoParam+0xe6>
      break;
 80066f6:	bf00      	nop
 80066f8:	e00a      	b.n	8006710 <DMA_CheckFifoParam+0xe8>
      break;
 80066fa:	bf00      	nop
 80066fc:	e008      	b.n	8006710 <DMA_CheckFifoParam+0xe8>
      break;
 80066fe:	bf00      	nop
 8006700:	e006      	b.n	8006710 <DMA_CheckFifoParam+0xe8>
      break;
 8006702:	bf00      	nop
 8006704:	e004      	b.n	8006710 <DMA_CheckFifoParam+0xe8>
      break;
 8006706:	bf00      	nop
 8006708:	e002      	b.n	8006710 <DMA_CheckFifoParam+0xe8>
      break;   
 800670a:	bf00      	nop
 800670c:	e000      	b.n	8006710 <DMA_CheckFifoParam+0xe8>
      break;
 800670e:	bf00      	nop
    }
  } 
  
  return status; 
 8006710:	7bfb      	ldrb	r3, [r7, #15]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop

08006720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006720:	b480      	push	{r7}
 8006722:	b089      	sub	sp, #36	; 0x24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800672e:	2300      	movs	r3, #0
 8006730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006732:	2300      	movs	r3, #0
 8006734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006736:	2300      	movs	r3, #0
 8006738:	61fb      	str	r3, [r7, #28]
 800673a:	e16b      	b.n	8006a14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800673c:	2201      	movs	r2, #1
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	4013      	ands	r3, r2
 800674e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	429a      	cmp	r2, r3
 8006756:	f040 815a 	bne.w	8006a0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	2b01      	cmp	r3, #1
 8006764:	d005      	beq.n	8006772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800676e:	2b02      	cmp	r3, #2
 8006770:	d130      	bne.n	80067d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	2203      	movs	r2, #3
 800677e:	fa02 f303 	lsl.w	r3, r2, r3
 8006782:	43db      	mvns	r3, r3
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	4013      	ands	r3, r2
 8006788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	fa02 f303 	lsl.w	r3, r2, r3
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	4313      	orrs	r3, r2
 800679a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80067a8:	2201      	movs	r2, #1
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	43db      	mvns	r3, r3
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	4013      	ands	r3, r2
 80067b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	091b      	lsrs	r3, r3, #4
 80067be:	f003 0201 	and.w	r2, r3, #1
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	fa02 f303 	lsl.w	r3, r2, r3
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f003 0303 	and.w	r3, r3, #3
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d017      	beq.n	8006810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	2203      	movs	r2, #3
 80067ec:	fa02 f303 	lsl.w	r3, r2, r3
 80067f0:	43db      	mvns	r3, r3
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	4013      	ands	r3, r2
 80067f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	4313      	orrs	r3, r2
 8006808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f003 0303 	and.w	r3, r3, #3
 8006818:	2b02      	cmp	r3, #2
 800681a:	d123      	bne.n	8006864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	08da      	lsrs	r2, r3, #3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3208      	adds	r2, #8
 8006824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	220f      	movs	r2, #15
 8006834:	fa02 f303 	lsl.w	r3, r2, r3
 8006838:	43db      	mvns	r3, r3
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	4013      	ands	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	fa02 f303 	lsl.w	r3, r2, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	4313      	orrs	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	08da      	lsrs	r2, r3, #3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3208      	adds	r2, #8
 800685e:	69b9      	ldr	r1, [r7, #24]
 8006860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	2203      	movs	r2, #3
 8006870:	fa02 f303 	lsl.w	r3, r2, r3
 8006874:	43db      	mvns	r3, r3
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	4013      	ands	r3, r2
 800687a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f003 0203 	and.w	r2, r3, #3
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	4313      	orrs	r3, r2
 8006890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 80b4 	beq.w	8006a0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	4b60      	ldr	r3, [pc, #384]	; (8006a2c <HAL_GPIO_Init+0x30c>)
 80068ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ae:	4a5f      	ldr	r2, [pc, #380]	; (8006a2c <HAL_GPIO_Init+0x30c>)
 80068b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068b4:	6453      	str	r3, [r2, #68]	; 0x44
 80068b6:	4b5d      	ldr	r3, [pc, #372]	; (8006a2c <HAL_GPIO_Init+0x30c>)
 80068b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80068c2:	4a5b      	ldr	r2, [pc, #364]	; (8006a30 <HAL_GPIO_Init+0x310>)
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	089b      	lsrs	r3, r3, #2
 80068c8:	3302      	adds	r3, #2
 80068ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	220f      	movs	r2, #15
 80068da:	fa02 f303 	lsl.w	r3, r2, r3
 80068de:	43db      	mvns	r3, r3
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	4013      	ands	r3, r2
 80068e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a52      	ldr	r2, [pc, #328]	; (8006a34 <HAL_GPIO_Init+0x314>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d02b      	beq.n	8006946 <HAL_GPIO_Init+0x226>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a51      	ldr	r2, [pc, #324]	; (8006a38 <HAL_GPIO_Init+0x318>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d025      	beq.n	8006942 <HAL_GPIO_Init+0x222>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a50      	ldr	r2, [pc, #320]	; (8006a3c <HAL_GPIO_Init+0x31c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01f      	beq.n	800693e <HAL_GPIO_Init+0x21e>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a4f      	ldr	r2, [pc, #316]	; (8006a40 <HAL_GPIO_Init+0x320>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d019      	beq.n	800693a <HAL_GPIO_Init+0x21a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a4e      	ldr	r2, [pc, #312]	; (8006a44 <HAL_GPIO_Init+0x324>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d013      	beq.n	8006936 <HAL_GPIO_Init+0x216>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a4d      	ldr	r2, [pc, #308]	; (8006a48 <HAL_GPIO_Init+0x328>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d00d      	beq.n	8006932 <HAL_GPIO_Init+0x212>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a4c      	ldr	r2, [pc, #304]	; (8006a4c <HAL_GPIO_Init+0x32c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d007      	beq.n	800692e <HAL_GPIO_Init+0x20e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a4b      	ldr	r2, [pc, #300]	; (8006a50 <HAL_GPIO_Init+0x330>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d101      	bne.n	800692a <HAL_GPIO_Init+0x20a>
 8006926:	2307      	movs	r3, #7
 8006928:	e00e      	b.n	8006948 <HAL_GPIO_Init+0x228>
 800692a:	2308      	movs	r3, #8
 800692c:	e00c      	b.n	8006948 <HAL_GPIO_Init+0x228>
 800692e:	2306      	movs	r3, #6
 8006930:	e00a      	b.n	8006948 <HAL_GPIO_Init+0x228>
 8006932:	2305      	movs	r3, #5
 8006934:	e008      	b.n	8006948 <HAL_GPIO_Init+0x228>
 8006936:	2304      	movs	r3, #4
 8006938:	e006      	b.n	8006948 <HAL_GPIO_Init+0x228>
 800693a:	2303      	movs	r3, #3
 800693c:	e004      	b.n	8006948 <HAL_GPIO_Init+0x228>
 800693e:	2302      	movs	r3, #2
 8006940:	e002      	b.n	8006948 <HAL_GPIO_Init+0x228>
 8006942:	2301      	movs	r3, #1
 8006944:	e000      	b.n	8006948 <HAL_GPIO_Init+0x228>
 8006946:	2300      	movs	r3, #0
 8006948:	69fa      	ldr	r2, [r7, #28]
 800694a:	f002 0203 	and.w	r2, r2, #3
 800694e:	0092      	lsls	r2, r2, #2
 8006950:	4093      	lsls	r3, r2
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	4313      	orrs	r3, r2
 8006956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006958:	4935      	ldr	r1, [pc, #212]	; (8006a30 <HAL_GPIO_Init+0x310>)
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	089b      	lsrs	r3, r3, #2
 800695e:	3302      	adds	r3, #2
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006966:	4b3b      	ldr	r3, [pc, #236]	; (8006a54 <HAL_GPIO_Init+0x334>)
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	43db      	mvns	r3, r3
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	4013      	ands	r3, r2
 8006974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800698a:	4a32      	ldr	r2, [pc, #200]	; (8006a54 <HAL_GPIO_Init+0x334>)
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006990:	4b30      	ldr	r3, [pc, #192]	; (8006a54 <HAL_GPIO_Init+0x334>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	43db      	mvns	r3, r3
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	4013      	ands	r3, r2
 800699e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80069b4:	4a27      	ldr	r2, [pc, #156]	; (8006a54 <HAL_GPIO_Init+0x334>)
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80069ba:	4b26      	ldr	r3, [pc, #152]	; (8006a54 <HAL_GPIO_Init+0x334>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	43db      	mvns	r3, r3
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	4013      	ands	r3, r2
 80069c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	4313      	orrs	r3, r2
 80069dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80069de:	4a1d      	ldr	r2, [pc, #116]	; (8006a54 <HAL_GPIO_Init+0x334>)
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80069e4:	4b1b      	ldr	r3, [pc, #108]	; (8006a54 <HAL_GPIO_Init+0x334>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	43db      	mvns	r3, r3
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	4013      	ands	r3, r2
 80069f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006a08:	4a12      	ldr	r2, [pc, #72]	; (8006a54 <HAL_GPIO_Init+0x334>)
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	3301      	adds	r3, #1
 8006a12:	61fb      	str	r3, [r7, #28]
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	2b0f      	cmp	r3, #15
 8006a18:	f67f ae90 	bls.w	800673c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	3724      	adds	r7, #36	; 0x24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40023800 	.word	0x40023800
 8006a30:	40013800 	.word	0x40013800
 8006a34:	40020000 	.word	0x40020000
 8006a38:	40020400 	.word	0x40020400
 8006a3c:	40020800 	.word	0x40020800
 8006a40:	40020c00 	.word	0x40020c00
 8006a44:	40021000 	.word	0x40021000
 8006a48:	40021400 	.word	0x40021400
 8006a4c:	40021800 	.word	0x40021800
 8006a50:	40021c00 	.word	0x40021c00
 8006a54:	40013c00 	.word	0x40013c00

08006a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	887b      	ldrh	r3, [r7, #2]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a70:	2301      	movs	r3, #1
 8006a72:	73fb      	strb	r3, [r7, #15]
 8006a74:	e001      	b.n	8006a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	807b      	strh	r3, [r7, #2]
 8006a94:	4613      	mov	r3, r2
 8006a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a98:	787b      	ldrb	r3, [r7, #1]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a9e:	887a      	ldrh	r2, [r7, #2]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006aa4:	e003      	b.n	8006aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006aa6:	887b      	ldrh	r3, [r7, #2]
 8006aa8:	041a      	lsls	r2, r3, #16
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	619a      	str	r2, [r3, #24]
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b085      	sub	sp, #20
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006acc:	887a      	ldrh	r2, [r7, #2]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	041a      	lsls	r2, r3, #16
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	43d9      	mvns	r1, r3
 8006ad8:	887b      	ldrh	r3, [r7, #2]
 8006ada:	400b      	ands	r3, r1
 8006adc:	431a      	orrs	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	619a      	str	r2, [r3, #24]
}
 8006ae2:	bf00      	nop
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
	...

08006af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e12b      	b.n	8006d5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fd fca2 	bl	8004460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2224      	movs	r2, #36	; 0x24
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0201 	bic.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b54:	f001 f89a 	bl	8007c8c <HAL_RCC_GetPCLK1Freq>
 8006b58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	4a81      	ldr	r2, [pc, #516]	; (8006d64 <HAL_I2C_Init+0x274>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d807      	bhi.n	8006b74 <HAL_I2C_Init+0x84>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4a80      	ldr	r2, [pc, #512]	; (8006d68 <HAL_I2C_Init+0x278>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	bf94      	ite	ls
 8006b6c:	2301      	movls	r3, #1
 8006b6e:	2300      	movhi	r3, #0
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	e006      	b.n	8006b82 <HAL_I2C_Init+0x92>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4a7d      	ldr	r2, [pc, #500]	; (8006d6c <HAL_I2C_Init+0x27c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	bf94      	ite	ls
 8006b7c:	2301      	movls	r3, #1
 8006b7e:	2300      	movhi	r3, #0
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e0e7      	b.n	8006d5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4a78      	ldr	r2, [pc, #480]	; (8006d70 <HAL_I2C_Init+0x280>)
 8006b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b92:	0c9b      	lsrs	r3, r3, #18
 8006b94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	4a6a      	ldr	r2, [pc, #424]	; (8006d64 <HAL_I2C_Init+0x274>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d802      	bhi.n	8006bc4 <HAL_I2C_Init+0xd4>
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	e009      	b.n	8006bd8 <HAL_I2C_Init+0xe8>
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006bca:	fb02 f303 	mul.w	r3, r2, r3
 8006bce:	4a69      	ldr	r2, [pc, #420]	; (8006d74 <HAL_I2C_Init+0x284>)
 8006bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd4:	099b      	lsrs	r3, r3, #6
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6812      	ldr	r2, [r2, #0]
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006bea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	495c      	ldr	r1, [pc, #368]	; (8006d64 <HAL_I2C_Init+0x274>)
 8006bf4:	428b      	cmp	r3, r1
 8006bf6:	d819      	bhi.n	8006c2c <HAL_I2C_Init+0x13c>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	1e59      	subs	r1, r3, #1
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c06:	1c59      	adds	r1, r3, #1
 8006c08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006c0c:	400b      	ands	r3, r1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <HAL_I2C_Init+0x138>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	1e59      	subs	r1, r3, #1
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c20:	3301      	adds	r3, #1
 8006c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c26:	e051      	b.n	8006ccc <HAL_I2C_Init+0x1dc>
 8006c28:	2304      	movs	r3, #4
 8006c2a:	e04f      	b.n	8006ccc <HAL_I2C_Init+0x1dc>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d111      	bne.n	8006c58 <HAL_I2C_Init+0x168>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	1e58      	subs	r0, r3, #1
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6859      	ldr	r1, [r3, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	440b      	add	r3, r1
 8006c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c46:	3301      	adds	r3, #1
 8006c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	bf0c      	ite	eq
 8006c50:	2301      	moveq	r3, #1
 8006c52:	2300      	movne	r3, #0
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	e012      	b.n	8006c7e <HAL_I2C_Init+0x18e>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	1e58      	subs	r0, r3, #1
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6859      	ldr	r1, [r3, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	440b      	add	r3, r1
 8006c66:	0099      	lsls	r1, r3, #2
 8006c68:	440b      	add	r3, r1
 8006c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c6e:	3301      	adds	r3, #1
 8006c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bf0c      	ite	eq
 8006c78:	2301      	moveq	r3, #1
 8006c7a:	2300      	movne	r3, #0
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <HAL_I2C_Init+0x196>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e022      	b.n	8006ccc <HAL_I2C_Init+0x1dc>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10e      	bne.n	8006cac <HAL_I2C_Init+0x1bc>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	1e58      	subs	r0, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6859      	ldr	r1, [r3, #4]
 8006c96:	460b      	mov	r3, r1
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	440b      	add	r3, r1
 8006c9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006caa:	e00f      	b.n	8006ccc <HAL_I2C_Init+0x1dc>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	1e58      	subs	r0, r3, #1
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6859      	ldr	r1, [r3, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	440b      	add	r3, r1
 8006cba:	0099      	lsls	r1, r3, #2
 8006cbc:	440b      	add	r3, r1
 8006cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	6809      	ldr	r1, [r1, #0]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69da      	ldr	r2, [r3, #28]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006cfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6911      	ldr	r1, [r2, #16]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	68d2      	ldr	r2, [r2, #12]
 8006d06:	4311      	orrs	r1, r2
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6812      	ldr	r2, [r2, #0]
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	695a      	ldr	r2, [r3, #20]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0201 	orr.w	r2, r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	000186a0 	.word	0x000186a0
 8006d68:	001e847f 	.word	0x001e847f
 8006d6c:	003d08ff 	.word	0x003d08ff
 8006d70:	431bde83 	.word	0x431bde83
 8006d74:	10624dd3 	.word	0x10624dd3

08006d78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b088      	sub	sp, #32
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	461a      	mov	r2, r3
 8006d84:	460b      	mov	r3, r1
 8006d86:	817b      	strh	r3, [r7, #10]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d8c:	f7fe fb84 	bl	8005498 <HAL_GetTick>
 8006d90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	f040 80e0 	bne.w	8006f60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	2319      	movs	r3, #25
 8006da6:	2201      	movs	r2, #1
 8006da8:	4970      	ldr	r1, [pc, #448]	; (8006f6c <HAL_I2C_Master_Transmit+0x1f4>)
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 f964 	bl	8007078 <I2C_WaitOnFlagUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006db6:	2302      	movs	r3, #2
 8006db8:	e0d3      	b.n	8006f62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d101      	bne.n	8006dc8 <HAL_I2C_Master_Transmit+0x50>
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	e0cc      	b.n	8006f62 <HAL_I2C_Master_Transmit+0x1ea>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d007      	beq.n	8006dee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f042 0201 	orr.w	r2, r2, #1
 8006dec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2221      	movs	r2, #33	; 0x21
 8006e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2210      	movs	r2, #16
 8006e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	893a      	ldrh	r2, [r7, #8]
 8006e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4a50      	ldr	r2, [pc, #320]	; (8006f70 <HAL_I2C_Master_Transmit+0x1f8>)
 8006e2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006e30:	8979      	ldrh	r1, [r7, #10]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	6a3a      	ldr	r2, [r7, #32]
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 f89c 	bl	8006f74 <I2C_MasterRequestWrite>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e08d      	b.n	8006f62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e46:	2300      	movs	r3, #0
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	613b      	str	r3, [r7, #16]
 8006e5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006e5c:	e066      	b.n	8006f2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	6a39      	ldr	r1, [r7, #32]
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 f9de 	bl	8007224 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00d      	beq.n	8006e8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d107      	bne.n	8006e86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e06b      	b.n	8006f62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	781a      	ldrb	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d11b      	bne.n	8006f00 <HAL_I2C_Master_Transmit+0x188>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d017      	beq.n	8006f00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	781a      	ldrb	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	6a39      	ldr	r1, [r7, #32]
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f9ce 	bl	80072a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00d      	beq.n	8006f2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d107      	bne.n	8006f28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e01a      	b.n	8006f62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d194      	bne.n	8006e5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	e000      	b.n	8006f62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006f60:	2302      	movs	r3, #2
  }
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	00100002 	.word	0x00100002
 8006f70:	ffff0000 	.word	0xffff0000

08006f74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af02      	add	r7, sp, #8
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	460b      	mov	r3, r1
 8006f82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d006      	beq.n	8006f9e <I2C_MasterRequestWrite+0x2a>
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d003      	beq.n	8006f9e <I2C_MasterRequestWrite+0x2a>
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f9c:	d108      	bne.n	8006fb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	e00b      	b.n	8006fc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	2b12      	cmp	r3, #18
 8006fb6:	d107      	bne.n	8006fc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 f84f 	bl	8007078 <I2C_WaitOnFlagUntilTimeout>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00d      	beq.n	8006ffc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fee:	d103      	bne.n	8006ff8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ff6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e035      	b.n	8007068 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007004:	d108      	bne.n	8007018 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007006:	897b      	ldrh	r3, [r7, #10]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007014:	611a      	str	r2, [r3, #16]
 8007016:	e01b      	b.n	8007050 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007018:	897b      	ldrh	r3, [r7, #10]
 800701a:	11db      	asrs	r3, r3, #7
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f003 0306 	and.w	r3, r3, #6
 8007022:	b2db      	uxtb	r3, r3
 8007024:	f063 030f 	orn	r3, r3, #15
 8007028:	b2da      	uxtb	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	490e      	ldr	r1, [pc, #56]	; (8007070 <I2C_MasterRequestWrite+0xfc>)
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f000 f875 	bl	8007126 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e010      	b.n	8007068 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007046:	897b      	ldrh	r3, [r7, #10]
 8007048:	b2da      	uxtb	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4907      	ldr	r1, [pc, #28]	; (8007074 <I2C_MasterRequestWrite+0x100>)
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 f865 	bl	8007126 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	00010008 	.word	0x00010008
 8007074:	00010002 	.word	0x00010002

08007078 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	4613      	mov	r3, r2
 8007086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007088:	e025      	b.n	80070d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007090:	d021      	beq.n	80070d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007092:	f7fe fa01 	bl	8005498 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d302      	bcc.n	80070a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d116      	bne.n	80070d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c2:	f043 0220 	orr.w	r2, r3, #32
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e023      	b.n	800711e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	0c1b      	lsrs	r3, r3, #16
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d10d      	bne.n	80070fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	43da      	mvns	r2, r3
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	4013      	ands	r3, r2
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	bf0c      	ite	eq
 80070f2:	2301      	moveq	r3, #1
 80070f4:	2300      	movne	r3, #0
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	461a      	mov	r2, r3
 80070fa:	e00c      	b.n	8007116 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	43da      	mvns	r2, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4013      	ands	r3, r2
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	bf0c      	ite	eq
 800710e:	2301      	moveq	r3, #1
 8007110:	2300      	movne	r3, #0
 8007112:	b2db      	uxtb	r3, r3
 8007114:	461a      	mov	r2, r3
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	429a      	cmp	r2, r3
 800711a:	d0b6      	beq.n	800708a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
 8007132:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007134:	e051      	b.n	80071da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007144:	d123      	bne.n	800718e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007154:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800715e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2220      	movs	r2, #32
 800716a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	f043 0204 	orr.w	r2, r3, #4
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e046      	b.n	800721c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007194:	d021      	beq.n	80071da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007196:	f7fe f97f 	bl	8005498 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d302      	bcc.n	80071ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d116      	bne.n	80071da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	f043 0220 	orr.w	r2, r3, #32
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e020      	b.n	800721c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	0c1b      	lsrs	r3, r3, #16
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d10c      	bne.n	80071fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	43da      	mvns	r2, r3
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	4013      	ands	r3, r2
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bf14      	ite	ne
 80071f6:	2301      	movne	r3, #1
 80071f8:	2300      	moveq	r3, #0
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	e00b      	b.n	8007216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	43da      	mvns	r2, r3
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	4013      	ands	r3, r2
 800720a:	b29b      	uxth	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	bf14      	ite	ne
 8007210:	2301      	movne	r3, #1
 8007212:	2300      	moveq	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d18d      	bne.n	8007136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007230:	e02d      	b.n	800728e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 f878 	bl	8007328 <I2C_IsAcknowledgeFailed>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e02d      	b.n	800729e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007248:	d021      	beq.n	800728e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800724a:	f7fe f925 	bl	8005498 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	429a      	cmp	r2, r3
 8007258:	d302      	bcc.n	8007260 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d116      	bne.n	800728e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2220      	movs	r2, #32
 800726a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	f043 0220 	orr.w	r2, r3, #32
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e007      	b.n	800729e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007298:	2b80      	cmp	r3, #128	; 0x80
 800729a:	d1ca      	bne.n	8007232 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072b2:	e02d      	b.n	8007310 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 f837 	bl	8007328 <I2C_IsAcknowledgeFailed>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e02d      	b.n	8007320 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ca:	d021      	beq.n	8007310 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072cc:	f7fe f8e4 	bl	8005498 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d302      	bcc.n	80072e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d116      	bne.n	8007310 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fc:	f043 0220 	orr.w	r2, r3, #32
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e007      	b.n	8007320 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b04      	cmp	r3, #4
 800731c:	d1ca      	bne.n	80072b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800733a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800733e:	d11b      	bne.n	8007378 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007348:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	f043 0204 	orr.w	r2, r3, #4
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e000      	b.n	800737a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e034      	b.n	8007402 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80073a0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f245 5255 	movw	r2, #21845	; 0x5555
 80073aa:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	6852      	ldr	r2, [r2, #4]
 80073b4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6892      	ldr	r2, [r2, #8]
 80073be:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80073c0:	f7fe f86a 	bl	8005498 <HAL_GetTick>
 80073c4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80073c6:	e00f      	b.n	80073e8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80073c8:	f7fe f866 	bl	8005498 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	2b31      	cmp	r3, #49	; 0x31
 80073d4:	d908      	bls.n	80073e8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f003 0303 	and.w	r3, r3, #3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e00c      	b.n	8007402 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e8      	bne.n	80073c8 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80073fe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800741a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
	...

0800742c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e267      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d075      	beq.n	8007536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800744a:	4b88      	ldr	r3, [pc, #544]	; (800766c <HAL_RCC_OscConfig+0x240>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 030c 	and.w	r3, r3, #12
 8007452:	2b04      	cmp	r3, #4
 8007454:	d00c      	beq.n	8007470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007456:	4b85      	ldr	r3, [pc, #532]	; (800766c <HAL_RCC_OscConfig+0x240>)
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800745e:	2b08      	cmp	r3, #8
 8007460:	d112      	bne.n	8007488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007462:	4b82      	ldr	r3, [pc, #520]	; (800766c <HAL_RCC_OscConfig+0x240>)
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800746a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800746e:	d10b      	bne.n	8007488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007470:	4b7e      	ldr	r3, [pc, #504]	; (800766c <HAL_RCC_OscConfig+0x240>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d05b      	beq.n	8007534 <HAL_RCC_OscConfig+0x108>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d157      	bne.n	8007534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e242      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007490:	d106      	bne.n	80074a0 <HAL_RCC_OscConfig+0x74>
 8007492:	4b76      	ldr	r3, [pc, #472]	; (800766c <HAL_RCC_OscConfig+0x240>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a75      	ldr	r2, [pc, #468]	; (800766c <HAL_RCC_OscConfig+0x240>)
 8007498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	e01d      	b.n	80074dc <HAL_RCC_OscConfig+0xb0>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074a8:	d10c      	bne.n	80074c4 <HAL_RCC_OscConfig+0x98>
 80074aa:	4b70      	ldr	r3, [pc, #448]	; (800766c <HAL_RCC_OscConfig+0x240>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a6f      	ldr	r2, [pc, #444]	; (800766c <HAL_RCC_OscConfig+0x240>)
 80074b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	4b6d      	ldr	r3, [pc, #436]	; (800766c <HAL_RCC_OscConfig+0x240>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a6c      	ldr	r2, [pc, #432]	; (800766c <HAL_RCC_OscConfig+0x240>)
 80074bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	e00b      	b.n	80074dc <HAL_RCC_OscConfig+0xb0>
 80074c4:	4b69      	ldr	r3, [pc, #420]	; (800766c <HAL_RCC_OscConfig+0x240>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a68      	ldr	r2, [pc, #416]	; (800766c <HAL_RCC_OscConfig+0x240>)
 80074ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	4b66      	ldr	r3, [pc, #408]	; (800766c <HAL_RCC_OscConfig+0x240>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a65      	ldr	r2, [pc, #404]	; (800766c <HAL_RCC_OscConfig+0x240>)
 80074d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d013      	beq.n	800750c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e4:	f7fd ffd8 	bl	8005498 <HAL_GetTick>
 80074e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ea:	e008      	b.n	80074fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074ec:	f7fd ffd4 	bl	8005498 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b64      	cmp	r3, #100	; 0x64
 80074f8:	d901      	bls.n	80074fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e207      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074fe:	4b5b      	ldr	r3, [pc, #364]	; (800766c <HAL_RCC_OscConfig+0x240>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0f0      	beq.n	80074ec <HAL_RCC_OscConfig+0xc0>
 800750a:	e014      	b.n	8007536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800750c:	f7fd ffc4 	bl	8005498 <HAL_GetTick>
 8007510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007512:	e008      	b.n	8007526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007514:	f7fd ffc0 	bl	8005498 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b64      	cmp	r3, #100	; 0x64
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e1f3      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007526:	4b51      	ldr	r3, [pc, #324]	; (800766c <HAL_RCC_OscConfig+0x240>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1f0      	bne.n	8007514 <HAL_RCC_OscConfig+0xe8>
 8007532:	e000      	b.n	8007536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d063      	beq.n	800760a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007542:	4b4a      	ldr	r3, [pc, #296]	; (800766c <HAL_RCC_OscConfig+0x240>)
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f003 030c 	and.w	r3, r3, #12
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00b      	beq.n	8007566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800754e:	4b47      	ldr	r3, [pc, #284]	; (800766c <HAL_RCC_OscConfig+0x240>)
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007556:	2b08      	cmp	r3, #8
 8007558:	d11c      	bne.n	8007594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800755a:	4b44      	ldr	r3, [pc, #272]	; (800766c <HAL_RCC_OscConfig+0x240>)
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d116      	bne.n	8007594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007566:	4b41      	ldr	r3, [pc, #260]	; (800766c <HAL_RCC_OscConfig+0x240>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b00      	cmp	r3, #0
 8007570:	d005      	beq.n	800757e <HAL_RCC_OscConfig+0x152>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d001      	beq.n	800757e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e1c7      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800757e:	4b3b      	ldr	r3, [pc, #236]	; (800766c <HAL_RCC_OscConfig+0x240>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	4937      	ldr	r1, [pc, #220]	; (800766c <HAL_RCC_OscConfig+0x240>)
 800758e:	4313      	orrs	r3, r2
 8007590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007592:	e03a      	b.n	800760a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d020      	beq.n	80075de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800759c:	4b34      	ldr	r3, [pc, #208]	; (8007670 <HAL_RCC_OscConfig+0x244>)
 800759e:	2201      	movs	r2, #1
 80075a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a2:	f7fd ff79 	bl	8005498 <HAL_GetTick>
 80075a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075a8:	e008      	b.n	80075bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075aa:	f7fd ff75 	bl	8005498 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e1a8      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075bc:	4b2b      	ldr	r3, [pc, #172]	; (800766c <HAL_RCC_OscConfig+0x240>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0f0      	beq.n	80075aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075c8:	4b28      	ldr	r3, [pc, #160]	; (800766c <HAL_RCC_OscConfig+0x240>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	4925      	ldr	r1, [pc, #148]	; (800766c <HAL_RCC_OscConfig+0x240>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	600b      	str	r3, [r1, #0]
 80075dc:	e015      	b.n	800760a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075de:	4b24      	ldr	r3, [pc, #144]	; (8007670 <HAL_RCC_OscConfig+0x244>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e4:	f7fd ff58 	bl	8005498 <HAL_GetTick>
 80075e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075ea:	e008      	b.n	80075fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075ec:	f7fd ff54 	bl	8005498 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e187      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075fe:	4b1b      	ldr	r3, [pc, #108]	; (800766c <HAL_RCC_OscConfig+0x240>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1f0      	bne.n	80075ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0308 	and.w	r3, r3, #8
 8007612:	2b00      	cmp	r3, #0
 8007614:	d036      	beq.n	8007684 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d016      	beq.n	800764c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800761e:	4b15      	ldr	r3, [pc, #84]	; (8007674 <HAL_RCC_OscConfig+0x248>)
 8007620:	2201      	movs	r2, #1
 8007622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007624:	f7fd ff38 	bl	8005498 <HAL_GetTick>
 8007628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800762a:	e008      	b.n	800763e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800762c:	f7fd ff34 	bl	8005498 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e167      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800763e:	4b0b      	ldr	r3, [pc, #44]	; (800766c <HAL_RCC_OscConfig+0x240>)
 8007640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0f0      	beq.n	800762c <HAL_RCC_OscConfig+0x200>
 800764a:	e01b      	b.n	8007684 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800764c:	4b09      	ldr	r3, [pc, #36]	; (8007674 <HAL_RCC_OscConfig+0x248>)
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007652:	f7fd ff21 	bl	8005498 <HAL_GetTick>
 8007656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007658:	e00e      	b.n	8007678 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800765a:	f7fd ff1d 	bl	8005498 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d907      	bls.n	8007678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e150      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
 800766c:	40023800 	.word	0x40023800
 8007670:	42470000 	.word	0x42470000
 8007674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007678:	4b88      	ldr	r3, [pc, #544]	; (800789c <HAL_RCC_OscConfig+0x470>)
 800767a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1ea      	bne.n	800765a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 8097 	beq.w	80077c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007692:	2300      	movs	r3, #0
 8007694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007696:	4b81      	ldr	r3, [pc, #516]	; (800789c <HAL_RCC_OscConfig+0x470>)
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10f      	bne.n	80076c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076a2:	2300      	movs	r3, #0
 80076a4:	60bb      	str	r3, [r7, #8]
 80076a6:	4b7d      	ldr	r3, [pc, #500]	; (800789c <HAL_RCC_OscConfig+0x470>)
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	4a7c      	ldr	r2, [pc, #496]	; (800789c <HAL_RCC_OscConfig+0x470>)
 80076ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076b0:	6413      	str	r3, [r2, #64]	; 0x40
 80076b2:	4b7a      	ldr	r3, [pc, #488]	; (800789c <HAL_RCC_OscConfig+0x470>)
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ba:	60bb      	str	r3, [r7, #8]
 80076bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076be:	2301      	movs	r3, #1
 80076c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076c2:	4b77      	ldr	r3, [pc, #476]	; (80078a0 <HAL_RCC_OscConfig+0x474>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d118      	bne.n	8007700 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076ce:	4b74      	ldr	r3, [pc, #464]	; (80078a0 <HAL_RCC_OscConfig+0x474>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a73      	ldr	r2, [pc, #460]	; (80078a0 <HAL_RCC_OscConfig+0x474>)
 80076d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076da:	f7fd fedd 	bl	8005498 <HAL_GetTick>
 80076de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076e0:	e008      	b.n	80076f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076e2:	f7fd fed9 	bl	8005498 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e10c      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076f4:	4b6a      	ldr	r3, [pc, #424]	; (80078a0 <HAL_RCC_OscConfig+0x474>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0f0      	beq.n	80076e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d106      	bne.n	8007716 <HAL_RCC_OscConfig+0x2ea>
 8007708:	4b64      	ldr	r3, [pc, #400]	; (800789c <HAL_RCC_OscConfig+0x470>)
 800770a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800770c:	4a63      	ldr	r2, [pc, #396]	; (800789c <HAL_RCC_OscConfig+0x470>)
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	6713      	str	r3, [r2, #112]	; 0x70
 8007714:	e01c      	b.n	8007750 <HAL_RCC_OscConfig+0x324>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	2b05      	cmp	r3, #5
 800771c:	d10c      	bne.n	8007738 <HAL_RCC_OscConfig+0x30c>
 800771e:	4b5f      	ldr	r3, [pc, #380]	; (800789c <HAL_RCC_OscConfig+0x470>)
 8007720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007722:	4a5e      	ldr	r2, [pc, #376]	; (800789c <HAL_RCC_OscConfig+0x470>)
 8007724:	f043 0304 	orr.w	r3, r3, #4
 8007728:	6713      	str	r3, [r2, #112]	; 0x70
 800772a:	4b5c      	ldr	r3, [pc, #368]	; (800789c <HAL_RCC_OscConfig+0x470>)
 800772c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800772e:	4a5b      	ldr	r2, [pc, #364]	; (800789c <HAL_RCC_OscConfig+0x470>)
 8007730:	f043 0301 	orr.w	r3, r3, #1
 8007734:	6713      	str	r3, [r2, #112]	; 0x70
 8007736:	e00b      	b.n	8007750 <HAL_RCC_OscConfig+0x324>
 8007738:	4b58      	ldr	r3, [pc, #352]	; (800789c <HAL_RCC_OscConfig+0x470>)
 800773a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800773c:	4a57      	ldr	r2, [pc, #348]	; (800789c <HAL_RCC_OscConfig+0x470>)
 800773e:	f023 0301 	bic.w	r3, r3, #1
 8007742:	6713      	str	r3, [r2, #112]	; 0x70
 8007744:	4b55      	ldr	r3, [pc, #340]	; (800789c <HAL_RCC_OscConfig+0x470>)
 8007746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007748:	4a54      	ldr	r2, [pc, #336]	; (800789c <HAL_RCC_OscConfig+0x470>)
 800774a:	f023 0304 	bic.w	r3, r3, #4
 800774e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d015      	beq.n	8007784 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007758:	f7fd fe9e 	bl	8005498 <HAL_GetTick>
 800775c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800775e:	e00a      	b.n	8007776 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007760:	f7fd fe9a 	bl	8005498 <HAL_GetTick>
 8007764:	4602      	mov	r2, r0
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	f241 3288 	movw	r2, #5000	; 0x1388
 800776e:	4293      	cmp	r3, r2
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e0cb      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007776:	4b49      	ldr	r3, [pc, #292]	; (800789c <HAL_RCC_OscConfig+0x470>)
 8007778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0ee      	beq.n	8007760 <HAL_RCC_OscConfig+0x334>
 8007782:	e014      	b.n	80077ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007784:	f7fd fe88 	bl	8005498 <HAL_GetTick>
 8007788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800778a:	e00a      	b.n	80077a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800778c:	f7fd fe84 	bl	8005498 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	f241 3288 	movw	r2, #5000	; 0x1388
 800779a:	4293      	cmp	r3, r2
 800779c:	d901      	bls.n	80077a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e0b5      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077a2:	4b3e      	ldr	r3, [pc, #248]	; (800789c <HAL_RCC_OscConfig+0x470>)
 80077a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1ee      	bne.n	800778c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d105      	bne.n	80077c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077b4:	4b39      	ldr	r3, [pc, #228]	; (800789c <HAL_RCC_OscConfig+0x470>)
 80077b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b8:	4a38      	ldr	r2, [pc, #224]	; (800789c <HAL_RCC_OscConfig+0x470>)
 80077ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 80a1 	beq.w	800790c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077ca:	4b34      	ldr	r3, [pc, #208]	; (800789c <HAL_RCC_OscConfig+0x470>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f003 030c 	and.w	r3, r3, #12
 80077d2:	2b08      	cmp	r3, #8
 80077d4:	d05c      	beq.n	8007890 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d141      	bne.n	8007862 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077de:	4b31      	ldr	r3, [pc, #196]	; (80078a4 <HAL_RCC_OscConfig+0x478>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e4:	f7fd fe58 	bl	8005498 <HAL_GetTick>
 80077e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077ea:	e008      	b.n	80077fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077ec:	f7fd fe54 	bl	8005498 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d901      	bls.n	80077fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e087      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077fe:	4b27      	ldr	r3, [pc, #156]	; (800789c <HAL_RCC_OscConfig+0x470>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1f0      	bne.n	80077ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69da      	ldr	r2, [r3, #28]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	431a      	orrs	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	019b      	lsls	r3, r3, #6
 800781a:	431a      	orrs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007820:	085b      	lsrs	r3, r3, #1
 8007822:	3b01      	subs	r3, #1
 8007824:	041b      	lsls	r3, r3, #16
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	061b      	lsls	r3, r3, #24
 800782e:	491b      	ldr	r1, [pc, #108]	; (800789c <HAL_RCC_OscConfig+0x470>)
 8007830:	4313      	orrs	r3, r2
 8007832:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007834:	4b1b      	ldr	r3, [pc, #108]	; (80078a4 <HAL_RCC_OscConfig+0x478>)
 8007836:	2201      	movs	r2, #1
 8007838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800783a:	f7fd fe2d 	bl	8005498 <HAL_GetTick>
 800783e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007840:	e008      	b.n	8007854 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007842:	f7fd fe29 	bl	8005498 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d901      	bls.n	8007854 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e05c      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007854:	4b11      	ldr	r3, [pc, #68]	; (800789c <HAL_RCC_OscConfig+0x470>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d0f0      	beq.n	8007842 <HAL_RCC_OscConfig+0x416>
 8007860:	e054      	b.n	800790c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007862:	4b10      	ldr	r3, [pc, #64]	; (80078a4 <HAL_RCC_OscConfig+0x478>)
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007868:	f7fd fe16 	bl	8005498 <HAL_GetTick>
 800786c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800786e:	e008      	b.n	8007882 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007870:	f7fd fe12 	bl	8005498 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e045      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007882:	4b06      	ldr	r3, [pc, #24]	; (800789c <HAL_RCC_OscConfig+0x470>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1f0      	bne.n	8007870 <HAL_RCC_OscConfig+0x444>
 800788e:	e03d      	b.n	800790c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d107      	bne.n	80078a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e038      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
 800789c:	40023800 	.word	0x40023800
 80078a0:	40007000 	.word	0x40007000
 80078a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078a8:	4b1b      	ldr	r3, [pc, #108]	; (8007918 <HAL_RCC_OscConfig+0x4ec>)
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d028      	beq.n	8007908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d121      	bne.n	8007908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d11a      	bne.n	8007908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80078d8:	4013      	ands	r3, r2
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80078de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d111      	bne.n	8007908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ee:	085b      	lsrs	r3, r3, #1
 80078f0:	3b01      	subs	r3, #1
 80078f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d107      	bne.n	8007908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007902:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007904:	429a      	cmp	r2, r3
 8007906:	d001      	beq.n	800790c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e000      	b.n	800790e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	40023800 	.word	0x40023800

0800791c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e0cc      	b.n	8007aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007930:	4b68      	ldr	r3, [pc, #416]	; (8007ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0307 	and.w	r3, r3, #7
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	429a      	cmp	r2, r3
 800793c:	d90c      	bls.n	8007958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800793e:	4b65      	ldr	r3, [pc, #404]	; (8007ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007946:	4b63      	ldr	r3, [pc, #396]	; (8007ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0307 	and.w	r3, r3, #7
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	429a      	cmp	r2, r3
 8007952:	d001      	beq.n	8007958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e0b8      	b.n	8007aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d020      	beq.n	80079a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	d005      	beq.n	800797c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007970:	4b59      	ldr	r3, [pc, #356]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	4a58      	ldr	r2, [pc, #352]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8007976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800797a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0308 	and.w	r3, r3, #8
 8007984:	2b00      	cmp	r3, #0
 8007986:	d005      	beq.n	8007994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007988:	4b53      	ldr	r3, [pc, #332]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	4a52      	ldr	r2, [pc, #328]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800798e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007994:	4b50      	ldr	r3, [pc, #320]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	494d      	ldr	r1, [pc, #308]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d044      	beq.n	8007a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d107      	bne.n	80079ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079ba:	4b47      	ldr	r3, [pc, #284]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d119      	bne.n	80079fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e07f      	b.n	8007aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d003      	beq.n	80079da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d107      	bne.n	80079ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079da:	4b3f      	ldr	r3, [pc, #252]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d109      	bne.n	80079fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e06f      	b.n	8007aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079ea:	4b3b      	ldr	r3, [pc, #236]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e067      	b.n	8007aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079fa:	4b37      	ldr	r3, [pc, #220]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f023 0203 	bic.w	r2, r3, #3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	4934      	ldr	r1, [pc, #208]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a0c:	f7fd fd44 	bl	8005498 <HAL_GetTick>
 8007a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a12:	e00a      	b.n	8007a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a14:	f7fd fd40 	bl	8005498 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d901      	bls.n	8007a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e04f      	b.n	8007aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a2a:	4b2b      	ldr	r3, [pc, #172]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f003 020c 	and.w	r2, r3, #12
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d1eb      	bne.n	8007a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a3c:	4b25      	ldr	r3, [pc, #148]	; (8007ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0307 	and.w	r3, r3, #7
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d20c      	bcs.n	8007a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a4a:	4b22      	ldr	r3, [pc, #136]	; (8007ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	b2d2      	uxtb	r2, r2
 8007a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a52:	4b20      	ldr	r3, [pc, #128]	; (8007ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0307 	and.w	r3, r3, #7
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d001      	beq.n	8007a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e032      	b.n	8007aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d008      	beq.n	8007a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a70:	4b19      	ldr	r3, [pc, #100]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	4916      	ldr	r1, [pc, #88]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0308 	and.w	r3, r3, #8
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d009      	beq.n	8007aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a8e:	4b12      	ldr	r3, [pc, #72]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	490e      	ldr	r1, [pc, #56]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007aa2:	f000 f821 	bl	8007ae8 <HAL_RCC_GetSysClockFreq>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	4b0b      	ldr	r3, [pc, #44]	; (8007ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	091b      	lsrs	r3, r3, #4
 8007aae:	f003 030f 	and.w	r3, r3, #15
 8007ab2:	490a      	ldr	r1, [pc, #40]	; (8007adc <HAL_RCC_ClockConfig+0x1c0>)
 8007ab4:	5ccb      	ldrb	r3, [r1, r3]
 8007ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8007aba:	4a09      	ldr	r2, [pc, #36]	; (8007ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8007abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007abe:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fd fca4 	bl	8005410 <HAL_InitTick>

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	40023c00 	.word	0x40023c00
 8007ad8:	40023800 	.word	0x40023800
 8007adc:	08012e0c 	.word	0x08012e0c
 8007ae0:	20000004 	.word	0x20000004
 8007ae4:	20000008 	.word	0x20000008

08007ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aec:	b090      	sub	sp, #64	; 0x40
 8007aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
 8007af4:	2300      	movs	r3, #0
 8007af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007af8:	2300      	movs	r3, #0
 8007afa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b00:	4b59      	ldr	r3, [pc, #356]	; (8007c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 030c 	and.w	r3, r3, #12
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d00d      	beq.n	8007b28 <HAL_RCC_GetSysClockFreq+0x40>
 8007b0c:	2b08      	cmp	r3, #8
 8007b0e:	f200 80a1 	bhi.w	8007c54 <HAL_RCC_GetSysClockFreq+0x16c>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <HAL_RCC_GetSysClockFreq+0x34>
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	d003      	beq.n	8007b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8007b1a:	e09b      	b.n	8007c54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b1c:	4b53      	ldr	r3, [pc, #332]	; (8007c6c <HAL_RCC_GetSysClockFreq+0x184>)
 8007b1e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007b20:	e09b      	b.n	8007c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b22:	4b53      	ldr	r3, [pc, #332]	; (8007c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b26:	e098      	b.n	8007c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b28:	4b4f      	ldr	r3, [pc, #316]	; (8007c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b30:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b32:	4b4d      	ldr	r3, [pc, #308]	; (8007c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d028      	beq.n	8007b90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b3e:	4b4a      	ldr	r3, [pc, #296]	; (8007c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	099b      	lsrs	r3, r3, #6
 8007b44:	2200      	movs	r2, #0
 8007b46:	623b      	str	r3, [r7, #32]
 8007b48:	627a      	str	r2, [r7, #36]	; 0x24
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007b50:	2100      	movs	r1, #0
 8007b52:	4b47      	ldr	r3, [pc, #284]	; (8007c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b54:	fb03 f201 	mul.w	r2, r3, r1
 8007b58:	2300      	movs	r3, #0
 8007b5a:	fb00 f303 	mul.w	r3, r0, r3
 8007b5e:	4413      	add	r3, r2
 8007b60:	4a43      	ldr	r2, [pc, #268]	; (8007c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b62:	fba0 1202 	umull	r1, r2, r0, r2
 8007b66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b68:	460a      	mov	r2, r1
 8007b6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8007b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b6e:	4413      	add	r3, r2
 8007b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b74:	2200      	movs	r2, #0
 8007b76:	61bb      	str	r3, [r7, #24]
 8007b78:	61fa      	str	r2, [r7, #28]
 8007b7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007b82:	f7f9 f891 	bl	8000ca8 <__aeabi_uldivmod>
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b8e:	e053      	b.n	8007c38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b90:	4b35      	ldr	r3, [pc, #212]	; (8007c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	099b      	lsrs	r3, r3, #6
 8007b96:	2200      	movs	r2, #0
 8007b98:	613b      	str	r3, [r7, #16]
 8007b9a:	617a      	str	r2, [r7, #20]
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007ba2:	f04f 0b00 	mov.w	fp, #0
 8007ba6:	4652      	mov	r2, sl
 8007ba8:	465b      	mov	r3, fp
 8007baa:	f04f 0000 	mov.w	r0, #0
 8007bae:	f04f 0100 	mov.w	r1, #0
 8007bb2:	0159      	lsls	r1, r3, #5
 8007bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007bb8:	0150      	lsls	r0, r2, #5
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	ebb2 080a 	subs.w	r8, r2, sl
 8007bc2:	eb63 090b 	sbc.w	r9, r3, fp
 8007bc6:	f04f 0200 	mov.w	r2, #0
 8007bca:	f04f 0300 	mov.w	r3, #0
 8007bce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007bd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007bd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007bda:	ebb2 0408 	subs.w	r4, r2, r8
 8007bde:	eb63 0509 	sbc.w	r5, r3, r9
 8007be2:	f04f 0200 	mov.w	r2, #0
 8007be6:	f04f 0300 	mov.w	r3, #0
 8007bea:	00eb      	lsls	r3, r5, #3
 8007bec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bf0:	00e2      	lsls	r2, r4, #3
 8007bf2:	4614      	mov	r4, r2
 8007bf4:	461d      	mov	r5, r3
 8007bf6:	eb14 030a 	adds.w	r3, r4, sl
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	eb45 030b 	adc.w	r3, r5, fp
 8007c00:	607b      	str	r3, [r7, #4]
 8007c02:	f04f 0200 	mov.w	r2, #0
 8007c06:	f04f 0300 	mov.w	r3, #0
 8007c0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c0e:	4629      	mov	r1, r5
 8007c10:	028b      	lsls	r3, r1, #10
 8007c12:	4621      	mov	r1, r4
 8007c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c18:	4621      	mov	r1, r4
 8007c1a:	028a      	lsls	r2, r1, #10
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c22:	2200      	movs	r2, #0
 8007c24:	60bb      	str	r3, [r7, #8]
 8007c26:	60fa      	str	r2, [r7, #12]
 8007c28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c2c:	f7f9 f83c 	bl	8000ca8 <__aeabi_uldivmod>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4613      	mov	r3, r2
 8007c36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c38:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	0c1b      	lsrs	r3, r3, #16
 8007c3e:	f003 0303 	and.w	r3, r3, #3
 8007c42:	3301      	adds	r3, #1
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007c48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c52:	e002      	b.n	8007c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c54:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <HAL_RCC_GetSysClockFreq+0x184>)
 8007c56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3740      	adds	r7, #64	; 0x40
 8007c60:	46bd      	mov	sp, r7
 8007c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c66:	bf00      	nop
 8007c68:	40023800 	.word	0x40023800
 8007c6c:	00f42400 	.word	0x00f42400
 8007c70:	017d7840 	.word	0x017d7840

08007c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c78:	4b03      	ldr	r3, [pc, #12]	; (8007c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	20000004 	.word	0x20000004

08007c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007c90:	f7ff fff0 	bl	8007c74 <HAL_RCC_GetHCLKFreq>
 8007c94:	4602      	mov	r2, r0
 8007c96:	4b05      	ldr	r3, [pc, #20]	; (8007cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	0a9b      	lsrs	r3, r3, #10
 8007c9c:	f003 0307 	and.w	r3, r3, #7
 8007ca0:	4903      	ldr	r1, [pc, #12]	; (8007cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ca2:	5ccb      	ldrb	r3, [r1, r3]
 8007ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	40023800 	.word	0x40023800
 8007cb0:	08012e1c 	.word	0x08012e1c

08007cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007cb8:	f7ff ffdc 	bl	8007c74 <HAL_RCC_GetHCLKFreq>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	0b5b      	lsrs	r3, r3, #13
 8007cc4:	f003 0307 	and.w	r3, r3, #7
 8007cc8:	4903      	ldr	r1, [pc, #12]	; (8007cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cca:	5ccb      	ldrb	r3, [r1, r3]
 8007ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	40023800 	.word	0x40023800
 8007cd8:	08012e1c 	.word	0x08012e1c

08007cdc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d105      	bne.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d035      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d04:	4b62      	ldr	r3, [pc, #392]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d0a:	f7fd fbc5 	bl	8005498 <HAL_GetTick>
 8007d0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d10:	e008      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007d12:	f7fd fbc1 	bl	8005498 <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d901      	bls.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e0b0      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d24:	4b5b      	ldr	r3, [pc, #364]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1f0      	bne.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	019a      	lsls	r2, r3, #6
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	071b      	lsls	r3, r3, #28
 8007d3c:	4955      	ldr	r1, [pc, #340]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d44:	4b52      	ldr	r3, [pc, #328]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007d46:	2201      	movs	r2, #1
 8007d48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d4a:	f7fd fba5 	bl	8005498 <HAL_GetTick>
 8007d4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d50:	e008      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007d52:	f7fd fba1 	bl	8005498 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d901      	bls.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e090      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d64:	4b4b      	ldr	r3, [pc, #300]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d0f0      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 8083 	beq.w	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]
 8007d82:	4b44      	ldr	r3, [pc, #272]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	4a43      	ldr	r2, [pc, #268]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8007d8e:	4b41      	ldr	r3, [pc, #260]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007d9a:	4b3f      	ldr	r3, [pc, #252]	; (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a3e      	ldr	r2, [pc, #248]	; (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007da4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007da6:	f7fd fb77 	bl	8005498 <HAL_GetTick>
 8007daa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007dac:	e008      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007dae:	f7fd fb73 	bl	8005498 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d901      	bls.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e062      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007dc0:	4b35      	ldr	r3, [pc, #212]	; (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0f0      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007dcc:	4b31      	ldr	r3, [pc, #196]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dd4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d02f      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d028      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007dea:	4b2a      	ldr	r3, [pc, #168]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007df2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007df4:	4b29      	ldr	r3, [pc, #164]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007df6:	2201      	movs	r2, #1
 8007df8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007dfa:	4b28      	ldr	r3, [pc, #160]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007e00:	4a24      	ldr	r2, [pc, #144]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007e06:	4b23      	ldr	r3, [pc, #140]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d114      	bne.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007e12:	f7fd fb41 	bl	8005498 <HAL_GetTick>
 8007e16:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e18:	e00a      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e1a:	f7fd fb3d 	bl	8005498 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e02a      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e30:	4b18      	ldr	r3, [pc, #96]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0ee      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e48:	d10d      	bne.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007e4a:	4b12      	ldr	r3, [pc, #72]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e5e:	490d      	ldr	r1, [pc, #52]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	608b      	str	r3, [r1, #8]
 8007e64:	e005      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007e66:	4b0b      	ldr	r3, [pc, #44]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	4a0a      	ldr	r2, [pc, #40]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e6c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007e70:	6093      	str	r3, [r2, #8]
 8007e72:	4b08      	ldr	r3, [pc, #32]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e7e:	4905      	ldr	r1, [pc, #20]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3718      	adds	r7, #24
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	42470068 	.word	0x42470068
 8007e94:	40023800 	.word	0x40023800
 8007e98:	40007000 	.word	0x40007000
 8007e9c:	42470e40 	.word	0x42470e40

08007ea0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e066      	b.n	8007f84 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	7f5b      	ldrb	r3, [r3, #29]
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d105      	bne.n	8007ecc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7fc fb6a 	bl	80045a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	22ca      	movs	r2, #202	; 0xca
 8007ed8:	625a      	str	r2, [r3, #36]	; 0x24
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2253      	movs	r2, #83	; 0x53
 8007ee0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f927 	bl	8008136 <RTC_EnterInitMode>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d12c      	bne.n	8007f4c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	6812      	ldr	r2, [r2, #0]
 8007efc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f04:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6899      	ldr	r1, [r3, #8]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	431a      	orrs	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	68d2      	ldr	r2, [r2, #12]
 8007f2c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6919      	ldr	r1, [r3, #16]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	041a      	lsls	r2, r3, #16
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f92e 	bl	80081a4 <RTC_ExitInitMode>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d113      	bne.n	8007f7a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f60:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	699a      	ldr	r2, [r3, #24]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	22ff      	movs	r2, #255	; 0xff
 8007f80:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007fbe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007fc2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	0c1b      	lsrs	r3, r3, #16
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	0a1b      	lsrs	r3, r3, #8
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	0d9b      	lsrs	r3, r3, #22
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d11a      	bne.n	800803e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	4618      	mov	r0, r3
 800800e:	f000 f8ee 	bl	80081ee <RTC_Bcd2ToByte>
 8008012:	4603      	mov	r3, r0
 8008014:	461a      	mov	r2, r3
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	785b      	ldrb	r3, [r3, #1]
 800801e:	4618      	mov	r0, r3
 8008020:	f000 f8e5 	bl	80081ee <RTC_Bcd2ToByte>
 8008024:	4603      	mov	r3, r0
 8008026:	461a      	mov	r2, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	789b      	ldrb	r3, [r3, #2]
 8008030:	4618      	mov	r0, r3
 8008032:	f000 f8dc 	bl	80081ee <RTC_Bcd2ToByte>
 8008036:	4603      	mov	r3, r0
 8008038:	461a      	mov	r2, r3
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008054:	2300      	movs	r3, #0
 8008056:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008062:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008066:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	0c1b      	lsrs	r3, r3, #16
 800806c:	b2da      	uxtb	r2, r3
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	0a1b      	lsrs	r3, r3, #8
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 031f 	and.w	r3, r3, #31
 800807c:	b2da      	uxtb	r2, r3
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	b2db      	uxtb	r3, r3
 8008086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800808a:	b2da      	uxtb	r2, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	0b5b      	lsrs	r3, r3, #13
 8008094:	b2db      	uxtb	r3, r3
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	b2da      	uxtb	r2, r3
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d11a      	bne.n	80080dc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	78db      	ldrb	r3, [r3, #3]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 f89f 	bl	80081ee <RTC_Bcd2ToByte>
 80080b0:	4603      	mov	r3, r0
 80080b2:	461a      	mov	r2, r3
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	785b      	ldrb	r3, [r3, #1]
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 f896 	bl	80081ee <RTC_Bcd2ToByte>
 80080c2:	4603      	mov	r3, r0
 80080c4:	461a      	mov	r2, r3
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	789b      	ldrb	r3, [r3, #2]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 f88d 	bl	80081ee <RTC_Bcd2ToByte>
 80080d4:	4603      	mov	r3, r0
 80080d6:	461a      	mov	r2, r3
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68da      	ldr	r2, [r3, #12]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008100:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008102:	f7fd f9c9 	bl	8005498 <HAL_GetTick>
 8008106:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008108:	e009      	b.n	800811e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800810a:	f7fd f9c5 	bl	8005498 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008118:	d901      	bls.n	800811e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e007      	b.n	800812e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f003 0320 	and.w	r3, r3, #32
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0ee      	beq.n	800810a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008150:	2b00      	cmp	r3, #0
 8008152:	d122      	bne.n	800819a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008162:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008164:	f7fd f998 	bl	8005498 <HAL_GetTick>
 8008168:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800816a:	e00c      	b.n	8008186 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800816c:	f7fd f994 	bl	8005498 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800817a:	d904      	bls.n	8008186 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2204      	movs	r2, #4
 8008180:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008190:	2b00      	cmp	r3, #0
 8008192:	d102      	bne.n	800819a <RTC_EnterInitMode+0x64>
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d1e8      	bne.n	800816c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800819a:	7bfb      	ldrb	r3, [r7, #15]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081be:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10a      	bne.n	80081e4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff ff89 	bl	80080e6 <HAL_RTC_WaitForSynchro>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d004      	beq.n	80081e4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2204      	movs	r2, #4
 80081de:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b085      	sub	sp, #20
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	4603      	mov	r3, r0
 80081f6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	091b      	lsrs	r3, r3, #4
 8008200:	b2db      	uxtb	r3, r3
 8008202:	461a      	mov	r2, r3
 8008204:	0092      	lsls	r2, r2, #2
 8008206:	4413      	add	r3, r2
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	b2da      	uxtb	r2, r3
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	4413      	add	r3, r2
 8008218:	b2db      	uxtb	r3, r3
}
 800821a:	4618      	mov	r0, r3
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e07b      	b.n	8008330 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	2b00      	cmp	r3, #0
 800823e:	d108      	bne.n	8008252 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008248:	d009      	beq.n	800825e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	61da      	str	r2, [r3, #28]
 8008250:	e005      	b.n	800825e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	d106      	bne.n	800827e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7fc f9bb 	bl	80045f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2202      	movs	r2, #2
 8008282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008294:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80082a6:	431a      	orrs	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082b0:	431a      	orrs	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	431a      	orrs	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	431a      	orrs	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082ce:	431a      	orrs	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082d8:	431a      	orrs	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e2:	ea42 0103 	orr.w	r1, r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	430a      	orrs	r2, r1
 80082f4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	0c1b      	lsrs	r3, r3, #16
 80082fc:	f003 0104 	and.w	r1, r3, #4
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	f003 0210 	and.w	r2, r3, #16
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	430a      	orrs	r2, r1
 800830e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	69da      	ldr	r2, [r3, #28]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800831e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	603b      	str	r3, [r7, #0]
 8008344:	4613      	mov	r3, r2
 8008346:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008352:	2b01      	cmp	r3, #1
 8008354:	d101      	bne.n	800835a <HAL_SPI_Transmit+0x22>
 8008356:	2302      	movs	r3, #2
 8008358:	e126      	b.n	80085a8 <HAL_SPI_Transmit+0x270>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008362:	f7fd f899 	bl	8005498 <HAL_GetTick>
 8008366:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008368:	88fb      	ldrh	r3, [r7, #6]
 800836a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b01      	cmp	r3, #1
 8008376:	d002      	beq.n	800837e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008378:	2302      	movs	r3, #2
 800837a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800837c:	e10b      	b.n	8008596 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <HAL_SPI_Transmit+0x52>
 8008384:	88fb      	ldrh	r3, [r7, #6]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d102      	bne.n	8008390 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800838e:	e102      	b.n	8008596 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2203      	movs	r2, #3
 8008394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	88fa      	ldrh	r2, [r7, #6]
 80083a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	88fa      	ldrh	r2, [r7, #6]
 80083ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083d6:	d10f      	bne.n	80083f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008402:	2b40      	cmp	r3, #64	; 0x40
 8008404:	d007      	beq.n	8008416 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008414:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800841e:	d14b      	bne.n	80084b8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d002      	beq.n	800842e <HAL_SPI_Transmit+0xf6>
 8008428:	8afb      	ldrh	r3, [r7, #22]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d13e      	bne.n	80084ac <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008432:	881a      	ldrh	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843e:	1c9a      	adds	r2, r3, #2
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008448:	b29b      	uxth	r3, r3
 800844a:	3b01      	subs	r3, #1
 800844c:	b29a      	uxth	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008452:	e02b      	b.n	80084ac <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b02      	cmp	r3, #2
 8008460:	d112      	bne.n	8008488 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008466:	881a      	ldrh	r2, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008472:	1c9a      	adds	r2, r3, #2
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800847c:	b29b      	uxth	r3, r3
 800847e:	3b01      	subs	r3, #1
 8008480:	b29a      	uxth	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	86da      	strh	r2, [r3, #54]	; 0x36
 8008486:	e011      	b.n	80084ac <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008488:	f7fd f806 	bl	8005498 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	d803      	bhi.n	80084a0 <HAL_SPI_Transmit+0x168>
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849e:	d102      	bne.n	80084a6 <HAL_SPI_Transmit+0x16e>
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d102      	bne.n	80084ac <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80084aa:	e074      	b.n	8008596 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1ce      	bne.n	8008454 <HAL_SPI_Transmit+0x11c>
 80084b6:	e04c      	b.n	8008552 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <HAL_SPI_Transmit+0x18e>
 80084c0:	8afb      	ldrh	r3, [r7, #22]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d140      	bne.n	8008548 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	330c      	adds	r3, #12
 80084d0:	7812      	ldrb	r2, [r2, #0]
 80084d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d8:	1c5a      	adds	r2, r3, #1
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	3b01      	subs	r3, #1
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80084ec:	e02c      	b.n	8008548 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f003 0302 	and.w	r3, r3, #2
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d113      	bne.n	8008524 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	330c      	adds	r3, #12
 8008506:	7812      	ldrb	r2, [r2, #0]
 8008508:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008518:	b29b      	uxth	r3, r3
 800851a:	3b01      	subs	r3, #1
 800851c:	b29a      	uxth	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	86da      	strh	r2, [r3, #54]	; 0x36
 8008522:	e011      	b.n	8008548 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008524:	f7fc ffb8 	bl	8005498 <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	429a      	cmp	r2, r3
 8008532:	d803      	bhi.n	800853c <HAL_SPI_Transmit+0x204>
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800853a:	d102      	bne.n	8008542 <HAL_SPI_Transmit+0x20a>
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d102      	bne.n	8008548 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008546:	e026      	b.n	8008596 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800854c:	b29b      	uxth	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1cd      	bne.n	80084ee <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008552:	69ba      	ldr	r2, [r7, #24]
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 fbda 	bl	8008d10 <SPI_EndRxTxTransaction>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2220      	movs	r2, #32
 8008566:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10a      	bne.n	8008586 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008570:	2300      	movs	r3, #0
 8008572:	613b      	str	r3, [r7, #16]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	613b      	str	r3, [r7, #16]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	613b      	str	r3, [r7, #16]
 8008584:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	77fb      	strb	r3, [r7, #31]
 8008592:	e000      	b.n	8008596 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008594:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80085a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3720      	adds	r7, #32
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af02      	add	r7, sp, #8
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	4613      	mov	r3, r2
 80085be:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085cc:	d112      	bne.n	80085f4 <HAL_SPI_Receive+0x44>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10e      	bne.n	80085f4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2204      	movs	r2, #4
 80085da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80085de:	88fa      	ldrh	r2, [r7, #6]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	4613      	mov	r3, r2
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	68b9      	ldr	r1, [r7, #8]
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 f8f1 	bl	80087d2 <HAL_SPI_TransmitReceive>
 80085f0:	4603      	mov	r3, r0
 80085f2:	e0ea      	b.n	80087ca <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d101      	bne.n	8008602 <HAL_SPI_Receive+0x52>
 80085fe:	2302      	movs	r3, #2
 8008600:	e0e3      	b.n	80087ca <HAL_SPI_Receive+0x21a>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800860a:	f7fc ff45 	bl	8005498 <HAL_GetTick>
 800860e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b01      	cmp	r3, #1
 800861a:	d002      	beq.n	8008622 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800861c:	2302      	movs	r3, #2
 800861e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008620:	e0ca      	b.n	80087b8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <HAL_SPI_Receive+0x7e>
 8008628:	88fb      	ldrh	r3, [r7, #6]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d102      	bne.n	8008634 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008632:	e0c1      	b.n	80087b8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2204      	movs	r2, #4
 8008638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	88fa      	ldrh	r2, [r7, #6]
 800864c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	88fa      	ldrh	r2, [r7, #6]
 8008652:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800867a:	d10f      	bne.n	800869c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800868a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800869a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a6:	2b40      	cmp	r3, #64	; 0x40
 80086a8:	d007      	beq.n	80086ba <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d162      	bne.n	8008788 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80086c2:	e02e      	b.n	8008722 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d115      	bne.n	80086fe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f103 020c 	add.w	r2, r3, #12
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086de:	7812      	ldrb	r2, [r2, #0]
 80086e0:	b2d2      	uxtb	r2, r2
 80086e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	1c5a      	adds	r2, r3, #1
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	3b01      	subs	r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80086fc:	e011      	b.n	8008722 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086fe:	f7fc fecb 	bl	8005498 <HAL_GetTick>
 8008702:	4602      	mov	r2, r0
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	429a      	cmp	r2, r3
 800870c:	d803      	bhi.n	8008716 <HAL_SPI_Receive+0x166>
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008714:	d102      	bne.n	800871c <HAL_SPI_Receive+0x16c>
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d102      	bne.n	8008722 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008720:	e04a      	b.n	80087b8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008726:	b29b      	uxth	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1cb      	bne.n	80086c4 <HAL_SPI_Receive+0x114>
 800872c:	e031      	b.n	8008792 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b01      	cmp	r3, #1
 800873a:	d113      	bne.n	8008764 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68da      	ldr	r2, [r3, #12]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008746:	b292      	uxth	r2, r2
 8008748:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874e:	1c9a      	adds	r2, r3, #2
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008758:	b29b      	uxth	r3, r3
 800875a:	3b01      	subs	r3, #1
 800875c:	b29a      	uxth	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008762:	e011      	b.n	8008788 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008764:	f7fc fe98 	bl	8005498 <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	429a      	cmp	r2, r3
 8008772:	d803      	bhi.n	800877c <HAL_SPI_Receive+0x1cc>
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877a:	d102      	bne.n	8008782 <HAL_SPI_Receive+0x1d2>
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d102      	bne.n	8008788 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008786:	e017      	b.n	80087b8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800878c:	b29b      	uxth	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1cd      	bne.n	800872e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 fa54 	bl	8008c44 <SPI_EndRxTransaction>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d002      	beq.n	80087a8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2220      	movs	r2, #32
 80087a6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	75fb      	strb	r3, [r7, #23]
 80087b4:	e000      	b.n	80087b8 <HAL_SPI_Receive+0x208>
  }

error :
 80087b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b08c      	sub	sp, #48	; 0x30
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	607a      	str	r2, [r7, #4]
 80087de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80087e0:	2301      	movs	r3, #1
 80087e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80087e4:	2300      	movs	r3, #0
 80087e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_SPI_TransmitReceive+0x26>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e18a      	b.n	8008b0e <HAL_SPI_TransmitReceive+0x33c>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008800:	f7fc fe4a 	bl	8005498 <HAL_GetTick>
 8008804:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800880c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008816:	887b      	ldrh	r3, [r7, #2]
 8008818:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800881a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800881e:	2b01      	cmp	r3, #1
 8008820:	d00f      	beq.n	8008842 <HAL_SPI_TransmitReceive+0x70>
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008828:	d107      	bne.n	800883a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d103      	bne.n	800883a <HAL_SPI_TransmitReceive+0x68>
 8008832:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008836:	2b04      	cmp	r3, #4
 8008838:	d003      	beq.n	8008842 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800883a:	2302      	movs	r3, #2
 800883c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008840:	e15b      	b.n	8008afa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d005      	beq.n	8008854 <HAL_SPI_TransmitReceive+0x82>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <HAL_SPI_TransmitReceive+0x82>
 800884e:	887b      	ldrh	r3, [r7, #2]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d103      	bne.n	800885c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800885a:	e14e      	b.n	8008afa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008862:	b2db      	uxtb	r3, r3
 8008864:	2b04      	cmp	r3, #4
 8008866:	d003      	beq.n	8008870 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2205      	movs	r2, #5
 800886c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	887a      	ldrh	r2, [r7, #2]
 8008880:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	887a      	ldrh	r2, [r7, #2]
 8008886:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	887a      	ldrh	r2, [r7, #2]
 8008892:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	887a      	ldrh	r2, [r7, #2]
 8008898:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b0:	2b40      	cmp	r3, #64	; 0x40
 80088b2:	d007      	beq.n	80088c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088cc:	d178      	bne.n	80089c0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <HAL_SPI_TransmitReceive+0x10a>
 80088d6:	8b7b      	ldrh	r3, [r7, #26]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d166      	bne.n	80089aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e0:	881a      	ldrh	r2, [r3, #0]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ec:	1c9a      	adds	r2, r3, #2
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	3b01      	subs	r3, #1
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008900:	e053      	b.n	80089aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b02      	cmp	r3, #2
 800890e:	d11b      	bne.n	8008948 <HAL_SPI_TransmitReceive+0x176>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008914:	b29b      	uxth	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d016      	beq.n	8008948 <HAL_SPI_TransmitReceive+0x176>
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	2b01      	cmp	r3, #1
 800891e:	d113      	bne.n	8008948 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008924:	881a      	ldrh	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008930:	1c9a      	adds	r2, r3, #2
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800893a:	b29b      	uxth	r3, r3
 800893c:	3b01      	subs	r3, #1
 800893e:	b29a      	uxth	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008944:	2300      	movs	r3, #0
 8008946:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b01      	cmp	r3, #1
 8008954:	d119      	bne.n	800898a <HAL_SPI_TransmitReceive+0x1b8>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800895a:	b29b      	uxth	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	d014      	beq.n	800898a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896a:	b292      	uxth	r2, r2
 800896c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008972:	1c9a      	adds	r2, r3, #2
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800897c:	b29b      	uxth	r3, r3
 800897e:	3b01      	subs	r3, #1
 8008980:	b29a      	uxth	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008986:	2301      	movs	r3, #1
 8008988:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800898a:	f7fc fd85 	bl	8005498 <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008996:	429a      	cmp	r2, r3
 8008998:	d807      	bhi.n	80089aa <HAL_SPI_TransmitReceive+0x1d8>
 800899a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a0:	d003      	beq.n	80089aa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80089a8:	e0a7      	b.n	8008afa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1a6      	bne.n	8008902 <HAL_SPI_TransmitReceive+0x130>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1a1      	bne.n	8008902 <HAL_SPI_TransmitReceive+0x130>
 80089be:	e07c      	b.n	8008aba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <HAL_SPI_TransmitReceive+0x1fc>
 80089c8:	8b7b      	ldrh	r3, [r7, #26]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d16b      	bne.n	8008aa6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	330c      	adds	r3, #12
 80089d8:	7812      	ldrb	r2, [r2, #0]
 80089da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	3b01      	subs	r3, #1
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089f4:	e057      	b.n	8008aa6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d11c      	bne.n	8008a3e <HAL_SPI_TransmitReceive+0x26c>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d017      	beq.n	8008a3e <HAL_SPI_TransmitReceive+0x26c>
 8008a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d114      	bne.n	8008a3e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	330c      	adds	r3, #12
 8008a1e:	7812      	ldrb	r2, [r2, #0]
 8008a20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a26:	1c5a      	adds	r2, r3, #1
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	3b01      	subs	r3, #1
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d119      	bne.n	8008a80 <HAL_SPI_TransmitReceive+0x2ae>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d014      	beq.n	8008a80 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a60:	b2d2      	uxtb	r2, r2
 8008a62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	3b01      	subs	r3, #1
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008a80:	f7fc fd0a 	bl	8005498 <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d803      	bhi.n	8008a98 <HAL_SPI_TransmitReceive+0x2c6>
 8008a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a96:	d102      	bne.n	8008a9e <HAL_SPI_TransmitReceive+0x2cc>
 8008a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d103      	bne.n	8008aa6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008aa4:	e029      	b.n	8008afa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1a2      	bne.n	80089f6 <HAL_SPI_TransmitReceive+0x224>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d19d      	bne.n	80089f6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008abc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f000 f926 	bl	8008d10 <SPI_EndRxTxTransaction>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d006      	beq.n	8008ad8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2220      	movs	r2, #32
 8008ad4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008ad6:	e010      	b.n	8008afa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10b      	bne.n	8008af8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	e000      	b.n	8008afa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008af8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3730      	adds	r7, #48	; 0x30
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b083      	sub	sp, #12
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b24:	b2db      	uxtb	r3, r3
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
	...

08008b34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b088      	sub	sp, #32
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	603b      	str	r3, [r7, #0]
 8008b40:	4613      	mov	r3, r2
 8008b42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008b44:	f7fc fca8 	bl	8005498 <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4c:	1a9b      	subs	r3, r3, r2
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	4413      	add	r3, r2
 8008b52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008b54:	f7fc fca0 	bl	8005498 <HAL_GetTick>
 8008b58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008b5a:	4b39      	ldr	r3, [pc, #228]	; (8008c40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	015b      	lsls	r3, r3, #5
 8008b60:	0d1b      	lsrs	r3, r3, #20
 8008b62:	69fa      	ldr	r2, [r7, #28]
 8008b64:	fb02 f303 	mul.w	r3, r2, r3
 8008b68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b6a:	e054      	b.n	8008c16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b72:	d050      	beq.n	8008c16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b74:	f7fc fc90 	bl	8005498 <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	69fa      	ldr	r2, [r7, #28]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d902      	bls.n	8008b8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d13d      	bne.n	8008c06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ba2:	d111      	bne.n	8008bc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bac:	d004      	beq.n	8008bb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bb6:	d107      	bne.n	8008bc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bd0:	d10f      	bne.n	8008bf2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bf0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e017      	b.n	8008c36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	689a      	ldr	r2, [r3, #8]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	4013      	ands	r3, r2
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	bf0c      	ite	eq
 8008c26:	2301      	moveq	r3, #1
 8008c28:	2300      	movne	r3, #0
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d19b      	bne.n	8008b6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3720      	adds	r7, #32
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	20000004 	.word	0x20000004

08008c44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af02      	add	r7, sp, #8
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c58:	d111      	bne.n	8008c7e <SPI_EndRxTransaction+0x3a>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c62:	d004      	beq.n	8008c6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c6c:	d107      	bne.n	8008c7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c7c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c86:	d12a      	bne.n	8008cde <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c90:	d012      	beq.n	8008cb8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	2180      	movs	r1, #128	; 0x80
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f7ff ff49 	bl	8008b34 <SPI_WaitFlagStateUntilTimeout>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d02d      	beq.n	8008d04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cac:	f043 0220 	orr.w	r2, r3, #32
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e026      	b.n	8008d06 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f7ff ff36 	bl	8008b34 <SPI_WaitFlagStateUntilTimeout>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d01a      	beq.n	8008d04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd2:	f043 0220 	orr.w	r2, r3, #32
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e013      	b.n	8008d06 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7ff ff23 	bl	8008b34 <SPI_WaitFlagStateUntilTimeout>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d007      	beq.n	8008d04 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf8:	f043 0220 	orr.w	r2, r3, #32
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e000      	b.n	8008d06 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
	...

08008d10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b088      	sub	sp, #32
 8008d14:	af02      	add	r7, sp, #8
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008d1c:	4b1b      	ldr	r3, [pc, #108]	; (8008d8c <SPI_EndRxTxTransaction+0x7c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a1b      	ldr	r2, [pc, #108]	; (8008d90 <SPI_EndRxTxTransaction+0x80>)
 8008d22:	fba2 2303 	umull	r2, r3, r2, r3
 8008d26:	0d5b      	lsrs	r3, r3, #21
 8008d28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d2c:	fb02 f303 	mul.w	r3, r2, r3
 8008d30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d3a:	d112      	bne.n	8008d62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2200      	movs	r2, #0
 8008d44:	2180      	movs	r1, #128	; 0x80
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff fef4 	bl	8008b34 <SPI_WaitFlagStateUntilTimeout>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d016      	beq.n	8008d80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d56:	f043 0220 	orr.w	r2, r3, #32
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e00f      	b.n	8008d82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00a      	beq.n	8008d7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d78:	2b80      	cmp	r3, #128	; 0x80
 8008d7a:	d0f2      	beq.n	8008d62 <SPI_EndRxTxTransaction+0x52>
 8008d7c:	e000      	b.n	8008d80 <SPI_EndRxTxTransaction+0x70>
        break;
 8008d7e:	bf00      	nop
  }

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3718      	adds	r7, #24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000004 	.word	0x20000004
 8008d90:	165e9f81 	.word	0x165e9f81

08008d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e041      	b.n	8008e2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d106      	bne.n	8008dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7fb fcb6 	bl	800472c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3304      	adds	r3, #4
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	f000 fb2c 	bl	8009430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
	...

08008e34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d001      	beq.n	8008e4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e046      	b.n	8008eda <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a23      	ldr	r2, [pc, #140]	; (8008ee8 <HAL_TIM_Base_Start+0xb4>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d022      	beq.n	8008ea4 <HAL_TIM_Base_Start+0x70>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e66:	d01d      	beq.n	8008ea4 <HAL_TIM_Base_Start+0x70>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a1f      	ldr	r2, [pc, #124]	; (8008eec <HAL_TIM_Base_Start+0xb8>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d018      	beq.n	8008ea4 <HAL_TIM_Base_Start+0x70>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a1e      	ldr	r2, [pc, #120]	; (8008ef0 <HAL_TIM_Base_Start+0xbc>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d013      	beq.n	8008ea4 <HAL_TIM_Base_Start+0x70>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a1c      	ldr	r2, [pc, #112]	; (8008ef4 <HAL_TIM_Base_Start+0xc0>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d00e      	beq.n	8008ea4 <HAL_TIM_Base_Start+0x70>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a1b      	ldr	r2, [pc, #108]	; (8008ef8 <HAL_TIM_Base_Start+0xc4>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d009      	beq.n	8008ea4 <HAL_TIM_Base_Start+0x70>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a19      	ldr	r2, [pc, #100]	; (8008efc <HAL_TIM_Base_Start+0xc8>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d004      	beq.n	8008ea4 <HAL_TIM_Base_Start+0x70>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a18      	ldr	r2, [pc, #96]	; (8008f00 <HAL_TIM_Base_Start+0xcc>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d111      	bne.n	8008ec8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f003 0307 	and.w	r3, r3, #7
 8008eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2b06      	cmp	r3, #6
 8008eb4:	d010      	beq.n	8008ed8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f042 0201 	orr.w	r2, r2, #1
 8008ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ec6:	e007      	b.n	8008ed8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0201 	orr.w	r2, r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	40010000 	.word	0x40010000
 8008eec:	40000400 	.word	0x40000400
 8008ef0:	40000800 	.word	0x40000800
 8008ef4:	40000c00 	.word	0x40000c00
 8008ef8:	40010400 	.word	0x40010400
 8008efc:	40014000 	.word	0x40014000
 8008f00:	40001800 	.word	0x40001800

08008f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d001      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e04e      	b.n	8008fba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f042 0201 	orr.w	r2, r2, #1
 8008f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a23      	ldr	r2, [pc, #140]	; (8008fc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d022      	beq.n	8008f84 <HAL_TIM_Base_Start_IT+0x80>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f46:	d01d      	beq.n	8008f84 <HAL_TIM_Base_Start_IT+0x80>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a1f      	ldr	r2, [pc, #124]	; (8008fcc <HAL_TIM_Base_Start_IT+0xc8>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d018      	beq.n	8008f84 <HAL_TIM_Base_Start_IT+0x80>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a1e      	ldr	r2, [pc, #120]	; (8008fd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d013      	beq.n	8008f84 <HAL_TIM_Base_Start_IT+0x80>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a1c      	ldr	r2, [pc, #112]	; (8008fd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d00e      	beq.n	8008f84 <HAL_TIM_Base_Start_IT+0x80>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a1b      	ldr	r2, [pc, #108]	; (8008fd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d009      	beq.n	8008f84 <HAL_TIM_Base_Start_IT+0x80>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a19      	ldr	r2, [pc, #100]	; (8008fdc <HAL_TIM_Base_Start_IT+0xd8>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d004      	beq.n	8008f84 <HAL_TIM_Base_Start_IT+0x80>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a18      	ldr	r2, [pc, #96]	; (8008fe0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d111      	bne.n	8008fa8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f003 0307 	and.w	r3, r3, #7
 8008f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b06      	cmp	r3, #6
 8008f94:	d010      	beq.n	8008fb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f042 0201 	orr.w	r2, r2, #1
 8008fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fa6:	e007      	b.n	8008fb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f042 0201 	orr.w	r2, r2, #1
 8008fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	40010000 	.word	0x40010000
 8008fcc:	40000400 	.word	0x40000400
 8008fd0:	40000800 	.word	0x40000800
 8008fd4:	40000c00 	.word	0x40000c00
 8008fd8:	40010400 	.word	0x40010400
 8008fdc:	40014000 	.word	0x40014000
 8008fe0:	40001800 	.word	0x40001800

08008fe4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0201 	bic.w	r2, r2, #1
 8008ffa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6a1a      	ldr	r2, [r3, #32]
 8009002:	f241 1311 	movw	r3, #4369	; 0x1111
 8009006:	4013      	ands	r3, r2
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10f      	bne.n	800902c <HAL_TIM_Base_Stop_IT+0x48>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6a1a      	ldr	r2, [r3, #32]
 8009012:	f240 4344 	movw	r3, #1092	; 0x444
 8009016:	4013      	ands	r3, r2
 8009018:	2b00      	cmp	r3, #0
 800901a:	d107      	bne.n	800902c <HAL_TIM_Base_Stop_IT+0x48>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f022 0201 	bic.w	r2, r2, #1
 800902a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b082      	sub	sp, #8
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b02      	cmp	r3, #2
 8009056:	d122      	bne.n	800909e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	f003 0302 	and.w	r3, r3, #2
 8009062:	2b02      	cmp	r3, #2
 8009064:	d11b      	bne.n	800909e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f06f 0202 	mvn.w	r2, #2
 800906e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	f003 0303 	and.w	r3, r3, #3
 8009080:	2b00      	cmp	r3, #0
 8009082:	d003      	beq.n	800908c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f9b5 	bl	80093f4 <HAL_TIM_IC_CaptureCallback>
 800908a:	e005      	b.n	8009098 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f9a7 	bl	80093e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f9b8 	bl	8009408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	2b04      	cmp	r3, #4
 80090aa:	d122      	bne.n	80090f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	f003 0304 	and.w	r3, r3, #4
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	d11b      	bne.n	80090f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f06f 0204 	mvn.w	r2, #4
 80090c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d003      	beq.n	80090e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f98b 	bl	80093f4 <HAL_TIM_IC_CaptureCallback>
 80090de:	e005      	b.n	80090ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f97d 	bl	80093e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f98e 	bl	8009408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	f003 0308 	and.w	r3, r3, #8
 80090fc:	2b08      	cmp	r3, #8
 80090fe:	d122      	bne.n	8009146 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	f003 0308 	and.w	r3, r3, #8
 800910a:	2b08      	cmp	r3, #8
 800910c:	d11b      	bne.n	8009146 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f06f 0208 	mvn.w	r2, #8
 8009116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2204      	movs	r2, #4
 800911c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	69db      	ldr	r3, [r3, #28]
 8009124:	f003 0303 	and.w	r3, r3, #3
 8009128:	2b00      	cmp	r3, #0
 800912a:	d003      	beq.n	8009134 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f961 	bl	80093f4 <HAL_TIM_IC_CaptureCallback>
 8009132:	e005      	b.n	8009140 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f953 	bl	80093e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f964 	bl	8009408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	f003 0310 	and.w	r3, r3, #16
 8009150:	2b10      	cmp	r3, #16
 8009152:	d122      	bne.n	800919a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	f003 0310 	and.w	r3, r3, #16
 800915e:	2b10      	cmp	r3, #16
 8009160:	d11b      	bne.n	800919a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f06f 0210 	mvn.w	r2, #16
 800916a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2208      	movs	r2, #8
 8009170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f937 	bl	80093f4 <HAL_TIM_IC_CaptureCallback>
 8009186:	e005      	b.n	8009194 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f929 	bl	80093e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f93a 	bl	8009408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	f003 0301 	and.w	r3, r3, #1
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d10e      	bne.n	80091c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d107      	bne.n	80091c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f06f 0201 	mvn.w	r2, #1
 80091be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7fa fa4b 	bl	800365c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091d0:	2b80      	cmp	r3, #128	; 0x80
 80091d2:	d10e      	bne.n	80091f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091de:	2b80      	cmp	r3, #128	; 0x80
 80091e0:	d107      	bne.n	80091f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80091ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fadf 	bl	80097b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091fc:	2b40      	cmp	r3, #64	; 0x40
 80091fe:	d10e      	bne.n	800921e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920a:	2b40      	cmp	r3, #64	; 0x40
 800920c:	d107      	bne.n	800921e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f8ff 	bl	800941c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	f003 0320 	and.w	r3, r3, #32
 8009228:	2b20      	cmp	r3, #32
 800922a:	d10e      	bne.n	800924a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f003 0320 	and.w	r3, r3, #32
 8009236:	2b20      	cmp	r3, #32
 8009238:	d107      	bne.n	800924a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f06f 0220 	mvn.w	r2, #32
 8009242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 faa9 	bl	800979c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800924a:	bf00      	nop
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b084      	sub	sp, #16
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800925c:	2300      	movs	r3, #0
 800925e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <HAL_TIM_ConfigClockSource+0x1c>
 800926a:	2302      	movs	r3, #2
 800926c:	e0b4      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x186>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2202      	movs	r2, #2
 800927a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800928c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009294:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092a6:	d03e      	beq.n	8009326 <HAL_TIM_ConfigClockSource+0xd4>
 80092a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ac:	f200 8087 	bhi.w	80093be <HAL_TIM_ConfigClockSource+0x16c>
 80092b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092b4:	f000 8086 	beq.w	80093c4 <HAL_TIM_ConfigClockSource+0x172>
 80092b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092bc:	d87f      	bhi.n	80093be <HAL_TIM_ConfigClockSource+0x16c>
 80092be:	2b70      	cmp	r3, #112	; 0x70
 80092c0:	d01a      	beq.n	80092f8 <HAL_TIM_ConfigClockSource+0xa6>
 80092c2:	2b70      	cmp	r3, #112	; 0x70
 80092c4:	d87b      	bhi.n	80093be <HAL_TIM_ConfigClockSource+0x16c>
 80092c6:	2b60      	cmp	r3, #96	; 0x60
 80092c8:	d050      	beq.n	800936c <HAL_TIM_ConfigClockSource+0x11a>
 80092ca:	2b60      	cmp	r3, #96	; 0x60
 80092cc:	d877      	bhi.n	80093be <HAL_TIM_ConfigClockSource+0x16c>
 80092ce:	2b50      	cmp	r3, #80	; 0x50
 80092d0:	d03c      	beq.n	800934c <HAL_TIM_ConfigClockSource+0xfa>
 80092d2:	2b50      	cmp	r3, #80	; 0x50
 80092d4:	d873      	bhi.n	80093be <HAL_TIM_ConfigClockSource+0x16c>
 80092d6:	2b40      	cmp	r3, #64	; 0x40
 80092d8:	d058      	beq.n	800938c <HAL_TIM_ConfigClockSource+0x13a>
 80092da:	2b40      	cmp	r3, #64	; 0x40
 80092dc:	d86f      	bhi.n	80093be <HAL_TIM_ConfigClockSource+0x16c>
 80092de:	2b30      	cmp	r3, #48	; 0x30
 80092e0:	d064      	beq.n	80093ac <HAL_TIM_ConfigClockSource+0x15a>
 80092e2:	2b30      	cmp	r3, #48	; 0x30
 80092e4:	d86b      	bhi.n	80093be <HAL_TIM_ConfigClockSource+0x16c>
 80092e6:	2b20      	cmp	r3, #32
 80092e8:	d060      	beq.n	80093ac <HAL_TIM_ConfigClockSource+0x15a>
 80092ea:	2b20      	cmp	r3, #32
 80092ec:	d867      	bhi.n	80093be <HAL_TIM_ConfigClockSource+0x16c>
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d05c      	beq.n	80093ac <HAL_TIM_ConfigClockSource+0x15a>
 80092f2:	2b10      	cmp	r3, #16
 80092f4:	d05a      	beq.n	80093ac <HAL_TIM_ConfigClockSource+0x15a>
 80092f6:	e062      	b.n	80093be <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6818      	ldr	r0, [r3, #0]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	6899      	ldr	r1, [r3, #8]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	f000 f9ac 	bl	8009664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800931a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	609a      	str	r2, [r3, #8]
      break;
 8009324:	e04f      	b.n	80093c6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6818      	ldr	r0, [r3, #0]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	6899      	ldr	r1, [r3, #8]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	f000 f995 	bl	8009664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	689a      	ldr	r2, [r3, #8]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009348:	609a      	str	r2, [r3, #8]
      break;
 800934a:	e03c      	b.n	80093c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6818      	ldr	r0, [r3, #0]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	6859      	ldr	r1, [r3, #4]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	461a      	mov	r2, r3
 800935a:	f000 f909 	bl	8009570 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2150      	movs	r1, #80	; 0x50
 8009364:	4618      	mov	r0, r3
 8009366:	f000 f962 	bl	800962e <TIM_ITRx_SetConfig>
      break;
 800936a:	e02c      	b.n	80093c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6818      	ldr	r0, [r3, #0]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	6859      	ldr	r1, [r3, #4]
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	461a      	mov	r2, r3
 800937a:	f000 f928 	bl	80095ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2160      	movs	r1, #96	; 0x60
 8009384:	4618      	mov	r0, r3
 8009386:	f000 f952 	bl	800962e <TIM_ITRx_SetConfig>
      break;
 800938a:	e01c      	b.n	80093c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6818      	ldr	r0, [r3, #0]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	6859      	ldr	r1, [r3, #4]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	461a      	mov	r2, r3
 800939a:	f000 f8e9 	bl	8009570 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2140      	movs	r1, #64	; 0x40
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 f942 	bl	800962e <TIM_ITRx_SetConfig>
      break;
 80093aa:	e00c      	b.n	80093c6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4619      	mov	r1, r3
 80093b6:	4610      	mov	r0, r2
 80093b8:	f000 f939 	bl	800962e <TIM_ITRx_SetConfig>
      break;
 80093bc:	e003      	b.n	80093c6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	73fb      	strb	r3, [r7, #15]
      break;
 80093c2:	e000      	b.n	80093c6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80093c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009424:	bf00      	nop
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a40      	ldr	r2, [pc, #256]	; (8009544 <TIM_Base_SetConfig+0x114>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d013      	beq.n	8009470 <TIM_Base_SetConfig+0x40>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800944e:	d00f      	beq.n	8009470 <TIM_Base_SetConfig+0x40>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a3d      	ldr	r2, [pc, #244]	; (8009548 <TIM_Base_SetConfig+0x118>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d00b      	beq.n	8009470 <TIM_Base_SetConfig+0x40>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a3c      	ldr	r2, [pc, #240]	; (800954c <TIM_Base_SetConfig+0x11c>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d007      	beq.n	8009470 <TIM_Base_SetConfig+0x40>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a3b      	ldr	r2, [pc, #236]	; (8009550 <TIM_Base_SetConfig+0x120>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d003      	beq.n	8009470 <TIM_Base_SetConfig+0x40>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a3a      	ldr	r2, [pc, #232]	; (8009554 <TIM_Base_SetConfig+0x124>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d108      	bne.n	8009482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	4313      	orrs	r3, r2
 8009480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a2f      	ldr	r2, [pc, #188]	; (8009544 <TIM_Base_SetConfig+0x114>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d02b      	beq.n	80094e2 <TIM_Base_SetConfig+0xb2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009490:	d027      	beq.n	80094e2 <TIM_Base_SetConfig+0xb2>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a2c      	ldr	r2, [pc, #176]	; (8009548 <TIM_Base_SetConfig+0x118>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d023      	beq.n	80094e2 <TIM_Base_SetConfig+0xb2>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a2b      	ldr	r2, [pc, #172]	; (800954c <TIM_Base_SetConfig+0x11c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d01f      	beq.n	80094e2 <TIM_Base_SetConfig+0xb2>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a2a      	ldr	r2, [pc, #168]	; (8009550 <TIM_Base_SetConfig+0x120>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d01b      	beq.n	80094e2 <TIM_Base_SetConfig+0xb2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a29      	ldr	r2, [pc, #164]	; (8009554 <TIM_Base_SetConfig+0x124>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d017      	beq.n	80094e2 <TIM_Base_SetConfig+0xb2>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a28      	ldr	r2, [pc, #160]	; (8009558 <TIM_Base_SetConfig+0x128>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d013      	beq.n	80094e2 <TIM_Base_SetConfig+0xb2>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a27      	ldr	r2, [pc, #156]	; (800955c <TIM_Base_SetConfig+0x12c>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d00f      	beq.n	80094e2 <TIM_Base_SetConfig+0xb2>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a26      	ldr	r2, [pc, #152]	; (8009560 <TIM_Base_SetConfig+0x130>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d00b      	beq.n	80094e2 <TIM_Base_SetConfig+0xb2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a25      	ldr	r2, [pc, #148]	; (8009564 <TIM_Base_SetConfig+0x134>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d007      	beq.n	80094e2 <TIM_Base_SetConfig+0xb2>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a24      	ldr	r2, [pc, #144]	; (8009568 <TIM_Base_SetConfig+0x138>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d003      	beq.n	80094e2 <TIM_Base_SetConfig+0xb2>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a23      	ldr	r2, [pc, #140]	; (800956c <TIM_Base_SetConfig+0x13c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d108      	bne.n	80094f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	4313      	orrs	r3, r2
 8009500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	689a      	ldr	r2, [r3, #8]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a0a      	ldr	r2, [pc, #40]	; (8009544 <TIM_Base_SetConfig+0x114>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d003      	beq.n	8009528 <TIM_Base_SetConfig+0xf8>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a0c      	ldr	r2, [pc, #48]	; (8009554 <TIM_Base_SetConfig+0x124>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d103      	bne.n	8009530 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	691a      	ldr	r2, [r3, #16]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	615a      	str	r2, [r3, #20]
}
 8009536:	bf00      	nop
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	40010000 	.word	0x40010000
 8009548:	40000400 	.word	0x40000400
 800954c:	40000800 	.word	0x40000800
 8009550:	40000c00 	.word	0x40000c00
 8009554:	40010400 	.word	0x40010400
 8009558:	40014000 	.word	0x40014000
 800955c:	40014400 	.word	0x40014400
 8009560:	40014800 	.word	0x40014800
 8009564:	40001800 	.word	0x40001800
 8009568:	40001c00 	.word	0x40001c00
 800956c:	40002000 	.word	0x40002000

08009570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009570:	b480      	push	{r7}
 8009572:	b087      	sub	sp, #28
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	f023 0201 	bic.w	r2, r3, #1
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800959a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	011b      	lsls	r3, r3, #4
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f023 030a 	bic.w	r3, r3, #10
 80095ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	621a      	str	r2, [r3, #32]
}
 80095c2:	bf00      	nop
 80095c4:	371c      	adds	r7, #28
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b087      	sub	sp, #28
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	60f8      	str	r0, [r7, #12]
 80095d6:	60b9      	str	r1, [r7, #8]
 80095d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	f023 0210 	bic.w	r2, r3, #16
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	699b      	ldr	r3, [r3, #24]
 80095ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6a1b      	ldr	r3, [r3, #32]
 80095f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	031b      	lsls	r3, r3, #12
 80095fe:	697a      	ldr	r2, [r7, #20]
 8009600:	4313      	orrs	r3, r2
 8009602:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800960a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	011b      	lsls	r3, r3, #4
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	4313      	orrs	r3, r2
 8009614:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	621a      	str	r2, [r3, #32]
}
 8009622:	bf00      	nop
 8009624:	371c      	adds	r7, #28
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800962e:	b480      	push	{r7}
 8009630:	b085      	sub	sp, #20
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
 8009636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	4313      	orrs	r3, r2
 800964c:	f043 0307 	orr.w	r3, r3, #7
 8009650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	609a      	str	r2, [r3, #8]
}
 8009658:	bf00      	nop
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009664:	b480      	push	{r7}
 8009666:	b087      	sub	sp, #28
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800967e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	021a      	lsls	r2, r3, #8
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	431a      	orrs	r2, r3
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	4313      	orrs	r3, r2
 800968c:	697a      	ldr	r2, [r7, #20]
 800968e:	4313      	orrs	r3, r2
 8009690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	609a      	str	r2, [r3, #8]
}
 8009698:	bf00      	nop
 800969a:	371c      	adds	r7, #28
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d101      	bne.n	80096bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096b8:	2302      	movs	r3, #2
 80096ba:	e05a      	b.n	8009772 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2202      	movs	r2, #2
 80096c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a21      	ldr	r2, [pc, #132]	; (8009780 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d022      	beq.n	8009746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009708:	d01d      	beq.n	8009746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a1d      	ldr	r2, [pc, #116]	; (8009784 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d018      	beq.n	8009746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a1b      	ldr	r2, [pc, #108]	; (8009788 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d013      	beq.n	8009746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a1a      	ldr	r2, [pc, #104]	; (800978c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d00e      	beq.n	8009746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a18      	ldr	r2, [pc, #96]	; (8009790 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d009      	beq.n	8009746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a17      	ldr	r2, [pc, #92]	; (8009794 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d004      	beq.n	8009746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a15      	ldr	r2, [pc, #84]	; (8009798 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d10c      	bne.n	8009760 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800974c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	4313      	orrs	r3, r2
 8009756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	40010000 	.word	0x40010000
 8009784:	40000400 	.word	0x40000400
 8009788:	40000800 	.word	0x40000800
 800978c:	40000c00 	.word	0x40000c00
 8009790:	40010400 	.word	0x40010400
 8009794:	40014000 	.word	0x40014000
 8009798:	40001800 	.word	0x40001800

0800979c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e03f      	b.n	8009856 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d106      	bne.n	80097f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7fa ffdc 	bl	80047a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2224      	movs	r2, #36	; 0x24
 80097f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68da      	ldr	r2, [r3, #12]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 ff9b 	bl	800a744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	691a      	ldr	r2, [r3, #16]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800981c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	695a      	ldr	r2, [r3, #20]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800982c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68da      	ldr	r2, [r3, #12]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800983c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2220      	movs	r2, #32
 8009848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2220      	movs	r2, #32
 8009850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b08a      	sub	sp, #40	; 0x28
 8009862:	af02      	add	r7, sp, #8
 8009864:	60f8      	str	r0, [r7, #12]
 8009866:	60b9      	str	r1, [r7, #8]
 8009868:	603b      	str	r3, [r7, #0]
 800986a:	4613      	mov	r3, r2
 800986c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800986e:	2300      	movs	r3, #0
 8009870:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b20      	cmp	r3, #32
 800987c:	d17c      	bne.n	8009978 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d002      	beq.n	800988a <HAL_UART_Transmit+0x2c>
 8009884:	88fb      	ldrh	r3, [r7, #6]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d101      	bne.n	800988e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e075      	b.n	800997a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009894:	2b01      	cmp	r3, #1
 8009896:	d101      	bne.n	800989c <HAL_UART_Transmit+0x3e>
 8009898:	2302      	movs	r3, #2
 800989a:	e06e      	b.n	800997a <HAL_UART_Transmit+0x11c>
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2221      	movs	r2, #33	; 0x21
 80098ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098b2:	f7fb fdf1 	bl	8005498 <HAL_GetTick>
 80098b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	88fa      	ldrh	r2, [r7, #6]
 80098bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	88fa      	ldrh	r2, [r7, #6]
 80098c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098cc:	d108      	bne.n	80098e0 <HAL_UART_Transmit+0x82>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d104      	bne.n	80098e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80098d6:	2300      	movs	r3, #0
 80098d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	61bb      	str	r3, [r7, #24]
 80098de:	e003      	b.n	80098e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80098e4:	2300      	movs	r3, #0
 80098e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80098f0:	e02a      	b.n	8009948 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	2200      	movs	r2, #0
 80098fa:	2180      	movs	r1, #128	; 0x80
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 fc53 	bl	800a1a8 <UART_WaitOnFlagUntilTimeout>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009908:	2303      	movs	r3, #3
 800990a:	e036      	b.n	800997a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10b      	bne.n	800992a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	881b      	ldrh	r3, [r3, #0]
 8009916:	461a      	mov	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009920:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	3302      	adds	r3, #2
 8009926:	61bb      	str	r3, [r7, #24]
 8009928:	e007      	b.n	800993a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	781a      	ldrb	r2, [r3, #0]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	3301      	adds	r3, #1
 8009938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800993e:	b29b      	uxth	r3, r3
 8009940:	3b01      	subs	r3, #1
 8009942:	b29a      	uxth	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800994c:	b29b      	uxth	r3, r3
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1cf      	bne.n	80098f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	2200      	movs	r2, #0
 800995a:	2140      	movs	r1, #64	; 0x40
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f000 fc23 	bl	800a1a8 <UART_WaitOnFlagUntilTimeout>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009968:	2303      	movs	r3, #3
 800996a:	e006      	b.n	800997a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2220      	movs	r2, #32
 8009970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	e000      	b.n	800997a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009978:	2302      	movs	r3, #2
  }
}
 800997a:	4618      	mov	r0, r3
 800997c:	3720      	adds	r7, #32
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b08c      	sub	sp, #48	; 0x30
 8009986:	af00      	add	r7, sp, #0
 8009988:	60f8      	str	r0, [r7, #12]
 800998a:	60b9      	str	r1, [r7, #8]
 800998c:	4613      	mov	r3, r2
 800998e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b20      	cmp	r3, #32
 800999a:	d152      	bne.n	8009a42 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d002      	beq.n	80099a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80099a2:	88fb      	ldrh	r3, [r7, #6]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e04b      	b.n	8009a44 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d101      	bne.n	80099ba <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80099b6:	2302      	movs	r3, #2
 80099b8:	e044      	b.n	8009a44 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80099c8:	88fb      	ldrh	r3, [r7, #6]
 80099ca:	461a      	mov	r2, r3
 80099cc:	68b9      	ldr	r1, [r7, #8]
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 fc58 	bl	800a284 <UART_Start_Receive_DMA>
 80099d4:	4603      	mov	r3, r0
 80099d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80099da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d12c      	bne.n	8009a3c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d125      	bne.n	8009a36 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80099ea:	2300      	movs	r3, #0
 80099ec:	613b      	str	r3, [r7, #16]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	613b      	str	r3, [r7, #16]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	613b      	str	r3, [r7, #16]
 80099fe:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	330c      	adds	r3, #12
 8009a06:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	e853 3f00 	ldrex	r3, [r3]
 8009a0e:	617b      	str	r3, [r7, #20]
   return(result);
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f043 0310 	orr.w	r3, r3, #16
 8009a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	330c      	adds	r3, #12
 8009a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a20:	627a      	str	r2, [r7, #36]	; 0x24
 8009a22:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a24:	6a39      	ldr	r1, [r7, #32]
 8009a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a28:	e841 2300 	strex	r3, r2, [r1]
 8009a2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1e5      	bne.n	8009a00 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8009a34:	e002      	b.n	8009a3c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a40:	e000      	b.n	8009a44 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8009a42:	2302      	movs	r3, #2
  }
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3730      	adds	r7, #48	; 0x30
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b0ba      	sub	sp, #232	; 0xe8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	695b      	ldr	r3, [r3, #20]
 8009a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a82:	f003 030f 	and.w	r3, r3, #15
 8009a86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10f      	bne.n	8009ab2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a96:	f003 0320 	and.w	r3, r3, #32
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d009      	beq.n	8009ab2 <HAL_UART_IRQHandler+0x66>
 8009a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aa2:	f003 0320 	and.w	r3, r3, #32
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d003      	beq.n	8009ab2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fd8f 	bl	800a5ce <UART_Receive_IT>
      return;
 8009ab0:	e256      	b.n	8009f60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009ab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 80de 	beq.w	8009c78 <HAL_UART_IRQHandler+0x22c>
 8009abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d106      	bne.n	8009ad6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009acc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 80d1 	beq.w	8009c78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00b      	beq.n	8009afa <HAL_UART_IRQHandler+0xae>
 8009ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d005      	beq.n	8009afa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af2:	f043 0201 	orr.w	r2, r3, #1
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009afe:	f003 0304 	and.w	r3, r3, #4
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00b      	beq.n	8009b1e <HAL_UART_IRQHandler+0xd2>
 8009b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d005      	beq.n	8009b1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b16:	f043 0202 	orr.w	r2, r3, #2
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b22:	f003 0302 	and.w	r3, r3, #2
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00b      	beq.n	8009b42 <HAL_UART_IRQHandler+0xf6>
 8009b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d005      	beq.n	8009b42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3a:	f043 0204 	orr.w	r2, r3, #4
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b46:	f003 0308 	and.w	r3, r3, #8
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d011      	beq.n	8009b72 <HAL_UART_IRQHandler+0x126>
 8009b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b52:	f003 0320 	and.w	r3, r3, #32
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d105      	bne.n	8009b66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d005      	beq.n	8009b72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6a:	f043 0208 	orr.w	r2, r3, #8
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 81ed 	beq.w	8009f56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b80:	f003 0320 	and.w	r3, r3, #32
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d008      	beq.n	8009b9a <HAL_UART_IRQHandler+0x14e>
 8009b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b8c:	f003 0320 	and.w	r3, r3, #32
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fd1a 	bl	800a5ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	695b      	ldr	r3, [r3, #20]
 8009ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba4:	2b40      	cmp	r3, #64	; 0x40
 8009ba6:	bf0c      	ite	eq
 8009ba8:	2301      	moveq	r3, #1
 8009baa:	2300      	movne	r3, #0
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb6:	f003 0308 	and.w	r3, r3, #8
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d103      	bne.n	8009bc6 <HAL_UART_IRQHandler+0x17a>
 8009bbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d04f      	beq.n	8009c66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fc22 	bl	800a410 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	695b      	ldr	r3, [r3, #20]
 8009bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd6:	2b40      	cmp	r3, #64	; 0x40
 8009bd8:	d141      	bne.n	8009c5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3314      	adds	r3, #20
 8009be0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009be8:	e853 3f00 	ldrex	r3, [r3]
 8009bec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009bf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	3314      	adds	r3, #20
 8009c02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009c06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009c12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009c16:	e841 2300 	strex	r3, r2, [r1]
 8009c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009c1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1d9      	bne.n	8009bda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d013      	beq.n	8009c56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c32:	4a7d      	ldr	r2, [pc, #500]	; (8009e28 <HAL_UART_IRQHandler+0x3dc>)
 8009c34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fc fae4 	bl	8006208 <HAL_DMA_Abort_IT>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d016      	beq.n	8009c74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009c50:	4610      	mov	r0, r2
 8009c52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c54:	e00e      	b.n	8009c74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f9a4 	bl	8009fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c5c:	e00a      	b.n	8009c74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f9a0 	bl	8009fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c64:	e006      	b.n	8009c74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f99c 	bl	8009fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009c72:	e170      	b.n	8009f56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c74:	bf00      	nop
    return;
 8009c76:	e16e      	b.n	8009f56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	f040 814a 	bne.w	8009f16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c86:	f003 0310 	and.w	r3, r3, #16
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f000 8143 	beq.w	8009f16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c94:	f003 0310 	and.w	r3, r3, #16
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f000 813c 	beq.w	8009f16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60bb      	str	r3, [r7, #8]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	60bb      	str	r3, [r7, #8]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	60bb      	str	r3, [r7, #8]
 8009cb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cbe:	2b40      	cmp	r3, #64	; 0x40
 8009cc0:	f040 80b4 	bne.w	8009e2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009cd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 8140 	beq.w	8009f5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009cde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	f080 8139 	bcs.w	8009f5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf4:	69db      	ldr	r3, [r3, #28]
 8009cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cfa:	f000 8088 	beq.w	8009e0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	330c      	adds	r3, #12
 8009d04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d0c:	e853 3f00 	ldrex	r3, [r3]
 8009d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	330c      	adds	r3, #12
 8009d26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009d2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009d36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d3a:	e841 2300 	strex	r3, r2, [r1]
 8009d3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1d9      	bne.n	8009cfe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3314      	adds	r3, #20
 8009d50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d5c:	f023 0301 	bic.w	r3, r3, #1
 8009d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	3314      	adds	r3, #20
 8009d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e1      	bne.n	8009d4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3314      	adds	r3, #20
 8009d8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d90:	e853 3f00 	ldrex	r3, [r3]
 8009d94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3314      	adds	r3, #20
 8009da6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009daa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009dac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009db0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009db2:	e841 2300 	strex	r3, r2, [r1]
 8009db6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1e3      	bne.n	8009d86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2220      	movs	r2, #32
 8009dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	330c      	adds	r3, #12
 8009dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dd6:	e853 3f00 	ldrex	r3, [r3]
 8009dda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dde:	f023 0310 	bic.w	r3, r3, #16
 8009de2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	330c      	adds	r3, #12
 8009dec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009df0:	65ba      	str	r2, [r7, #88]	; 0x58
 8009df2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009df6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009df8:	e841 2300 	strex	r3, r2, [r1]
 8009dfc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1e3      	bne.n	8009dcc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fc f98d 	bl	8006128 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7f8 ffee 	bl	8002e00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e24:	e099      	b.n	8009f5a <HAL_UART_IRQHandler+0x50e>
 8009e26:	bf00      	nop
 8009e28:	0800a4d7 	.word	0x0800a4d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f000 808b 	beq.w	8009f5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009e48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 8086 	beq.w	8009f5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	330c      	adds	r3, #12
 8009e58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	330c      	adds	r3, #12
 8009e72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009e76:	647a      	str	r2, [r7, #68]	; 0x44
 8009e78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e7e:	e841 2300 	strex	r3, r2, [r1]
 8009e82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1e3      	bne.n	8009e52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3314      	adds	r3, #20
 8009e90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	623b      	str	r3, [r7, #32]
   return(result);
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	f023 0301 	bic.w	r3, r3, #1
 8009ea0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3314      	adds	r3, #20
 8009eaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009eae:	633a      	str	r2, [r7, #48]	; 0x30
 8009eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eb6:	e841 2300 	strex	r3, r2, [r1]
 8009eba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1e3      	bne.n	8009e8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2220      	movs	r2, #32
 8009ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	330c      	adds	r3, #12
 8009ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	e853 3f00 	ldrex	r3, [r3]
 8009ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f023 0310 	bic.w	r3, r3, #16
 8009ee6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	330c      	adds	r3, #12
 8009ef0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009ef4:	61fa      	str	r2, [r7, #28]
 8009ef6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef8:	69b9      	ldr	r1, [r7, #24]
 8009efa:	69fa      	ldr	r2, [r7, #28]
 8009efc:	e841 2300 	strex	r3, r2, [r1]
 8009f00:	617b      	str	r3, [r7, #20]
   return(result);
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1e3      	bne.n	8009ed0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7f8 ff76 	bl	8002e00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f14:	e023      	b.n	8009f5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d009      	beq.n	8009f36 <HAL_UART_IRQHandler+0x4ea>
 8009f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d003      	beq.n	8009f36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fae5 	bl	800a4fe <UART_Transmit_IT>
    return;
 8009f34:	e014      	b.n	8009f60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00e      	beq.n	8009f60 <HAL_UART_IRQHandler+0x514>
 8009f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d008      	beq.n	8009f60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fb25 	bl	800a59e <UART_EndTransmit_IT>
    return;
 8009f54:	e004      	b.n	8009f60 <HAL_UART_IRQHandler+0x514>
    return;
 8009f56:	bf00      	nop
 8009f58:	e002      	b.n	8009f60 <HAL_UART_IRQHandler+0x514>
      return;
 8009f5a:	bf00      	nop
 8009f5c:	e000      	b.n	8009f60 <HAL_UART_IRQHandler+0x514>
      return;
 8009f5e:	bf00      	nop
  }
}
 8009f60:	37e8      	adds	r7, #232	; 0xe8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop

08009f68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b09c      	sub	sp, #112	; 0x70
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d172      	bne.n	800a0ba <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	330c      	adds	r3, #12
 8009fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fe4:	e853 3f00 	ldrex	r3, [r3]
 8009fe8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ff0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	330c      	adds	r3, #12
 8009ff8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ffa:	65ba      	str	r2, [r7, #88]	; 0x58
 8009ffc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a000:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a002:	e841 2300 	strex	r3, r2, [r1]
 800a006:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1e5      	bne.n	8009fda <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a00e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	3314      	adds	r3, #20
 800a014:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a018:	e853 3f00 	ldrex	r3, [r3]
 800a01c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a020:	f023 0301 	bic.w	r3, r3, #1
 800a024:	667b      	str	r3, [r7, #100]	; 0x64
 800a026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3314      	adds	r3, #20
 800a02c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a02e:	647a      	str	r2, [r7, #68]	; 0x44
 800a030:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a032:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a034:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a036:	e841 2300 	strex	r3, r2, [r1]
 800a03a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1e5      	bne.n	800a00e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	3314      	adds	r3, #20
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04c:	e853 3f00 	ldrex	r3, [r3]
 800a050:	623b      	str	r3, [r7, #32]
   return(result);
 800a052:	6a3b      	ldr	r3, [r7, #32]
 800a054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a058:	663b      	str	r3, [r7, #96]	; 0x60
 800a05a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3314      	adds	r3, #20
 800a060:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a062:	633a      	str	r2, [r7, #48]	; 0x30
 800a064:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a06a:	e841 2300 	strex	r3, r2, [r1]
 800a06e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1e5      	bne.n	800a042 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a078:	2220      	movs	r2, #32
 800a07a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a07e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a082:	2b01      	cmp	r3, #1
 800a084:	d119      	bne.n	800a0ba <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	330c      	adds	r3, #12
 800a08c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	e853 3f00 	ldrex	r3, [r3]
 800a094:	60fb      	str	r3, [r7, #12]
   return(result);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f023 0310 	bic.w	r3, r3, #16
 800a09c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a09e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	330c      	adds	r3, #12
 800a0a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a0a6:	61fa      	str	r2, [r7, #28]
 800a0a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0aa:	69b9      	ldr	r1, [r7, #24]
 800a0ac:	69fa      	ldr	r2, [r7, #28]
 800a0ae:	e841 2300 	strex	r3, r2, [r1]
 800a0b2:	617b      	str	r3, [r7, #20]
   return(result);
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1e5      	bne.n	800a086 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d106      	bne.n	800a0d0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a0ca:	f7f8 fe99 	bl	8002e00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0ce:	e002      	b.n	800a0d6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a0d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a0d2:	f7ff ff53 	bl	8009f7c <HAL_UART_RxCpltCallback>
}
 800a0d6:	bf00      	nop
 800a0d8:	3770      	adds	r7, #112	; 0x70
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b084      	sub	sp, #16
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ea:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d108      	bne.n	800a106 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a0f8:	085b      	lsrs	r3, r3, #1
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f7f8 fe7e 	bl	8002e00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a104:	e002      	b.n	800a10c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f7ff ff42 	bl	8009f90 <HAL_UART_RxHalfCpltCallback>
}
 800a10c:	bf00      	nop
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a11c:	2300      	movs	r3, #0
 800a11e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a124:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a130:	2b80      	cmp	r3, #128	; 0x80
 800a132:	bf0c      	ite	eq
 800a134:	2301      	moveq	r3, #1
 800a136:	2300      	movne	r3, #0
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b21      	cmp	r3, #33	; 0x21
 800a146:	d108      	bne.n	800a15a <UART_DMAError+0x46>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d005      	beq.n	800a15a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	2200      	movs	r2, #0
 800a152:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a154:	68b8      	ldr	r0, [r7, #8]
 800a156:	f000 f933 	bl	800a3c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	695b      	ldr	r3, [r3, #20]
 800a160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a164:	2b40      	cmp	r3, #64	; 0x40
 800a166:	bf0c      	ite	eq
 800a168:	2301      	moveq	r3, #1
 800a16a:	2300      	movne	r3, #0
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a176:	b2db      	uxtb	r3, r3
 800a178:	2b22      	cmp	r3, #34	; 0x22
 800a17a:	d108      	bne.n	800a18e <UART_DMAError+0x7a>
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d005      	beq.n	800a18e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2200      	movs	r2, #0
 800a186:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a188:	68b8      	ldr	r0, [r7, #8]
 800a18a:	f000 f941 	bl	800a410 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a192:	f043 0210 	orr.w	r2, r3, #16
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a19a:	68b8      	ldr	r0, [r7, #8]
 800a19c:	f7ff ff02 	bl	8009fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1a0:	bf00      	nop
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b090      	sub	sp, #64	; 0x40
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	603b      	str	r3, [r7, #0]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1b8:	e050      	b.n	800a25c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c0:	d04c      	beq.n	800a25c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a1c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d007      	beq.n	800a1d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1c8:	f7fb f966 	bl	8005498 <HAL_GetTick>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	1ad3      	subs	r3, r2, r3
 800a1d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d241      	bcs.n	800a25c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	330c      	adds	r3, #12
 800a1de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e2:	e853 3f00 	ldrex	r3, [r3]
 800a1e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	330c      	adds	r3, #12
 800a1f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1f8:	637a      	str	r2, [r7, #52]	; 0x34
 800a1fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a200:	e841 2300 	strex	r3, r2, [r1]
 800a204:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1e5      	bne.n	800a1d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	3314      	adds	r3, #20
 800a212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	e853 3f00 	ldrex	r3, [r3]
 800a21a:	613b      	str	r3, [r7, #16]
   return(result);
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f023 0301 	bic.w	r3, r3, #1
 800a222:	63bb      	str	r3, [r7, #56]	; 0x38
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3314      	adds	r3, #20
 800a22a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a22c:	623a      	str	r2, [r7, #32]
 800a22e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a230:	69f9      	ldr	r1, [r7, #28]
 800a232:	6a3a      	ldr	r2, [r7, #32]
 800a234:	e841 2300 	strex	r3, r2, [r1]
 800a238:	61bb      	str	r3, [r7, #24]
   return(result);
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1e5      	bne.n	800a20c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2220      	movs	r2, #32
 800a244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2220      	movs	r2, #32
 800a24c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a258:	2303      	movs	r3, #3
 800a25a:	e00f      	b.n	800a27c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	4013      	ands	r3, r2
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	429a      	cmp	r2, r3
 800a26a:	bf0c      	ite	eq
 800a26c:	2301      	moveq	r3, #1
 800a26e:	2300      	movne	r3, #0
 800a270:	b2db      	uxtb	r3, r3
 800a272:	461a      	mov	r2, r3
 800a274:	79fb      	ldrb	r3, [r7, #7]
 800a276:	429a      	cmp	r2, r3
 800a278:	d09f      	beq.n	800a1ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3740      	adds	r7, #64	; 0x40
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b098      	sub	sp, #96	; 0x60
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	4613      	mov	r3, r2
 800a290:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	88fa      	ldrh	r2, [r7, #6]
 800a29c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2222      	movs	r2, #34	; 0x22
 800a2a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b0:	4a40      	ldr	r2, [pc, #256]	; (800a3b4 <UART_Start_Receive_DMA+0x130>)
 800a2b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b8:	4a3f      	ldr	r2, [pc, #252]	; (800a3b8 <UART_Start_Receive_DMA+0x134>)
 800a2ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c0:	4a3e      	ldr	r2, [pc, #248]	; (800a3bc <UART_Start_Receive_DMA+0x138>)
 800a2c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a2cc:	f107 0308 	add.w	r3, r7, #8
 800a2d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	3304      	adds	r3, #4
 800a2dc:	4619      	mov	r1, r3
 800a2de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	88fb      	ldrh	r3, [r7, #6]
 800a2e4:	f7fb fec8 	bl	8006078 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	613b      	str	r3, [r7, #16]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	613b      	str	r3, [r7, #16]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	613b      	str	r3, [r7, #16]
 800a2fc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d019      	beq.n	800a342 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	330c      	adds	r3, #12
 800a314:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a318:	e853 3f00 	ldrex	r3, [r3]
 800a31c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a324:	65bb      	str	r3, [r7, #88]	; 0x58
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	330c      	adds	r3, #12
 800a32c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a32e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a330:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a332:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a336:	e841 2300 	strex	r3, r2, [r1]
 800a33a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a33c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1e5      	bne.n	800a30e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	3314      	adds	r3, #20
 800a348:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	e853 3f00 	ldrex	r3, [r3]
 800a350:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	f043 0301 	orr.w	r3, r3, #1
 800a358:	657b      	str	r3, [r7, #84]	; 0x54
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	3314      	adds	r3, #20
 800a360:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a362:	63ba      	str	r2, [r7, #56]	; 0x38
 800a364:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a366:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a36a:	e841 2300 	strex	r3, r2, [r1]
 800a36e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1e5      	bne.n	800a342 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3314      	adds	r3, #20
 800a37c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	e853 3f00 	ldrex	r3, [r3]
 800a384:	617b      	str	r3, [r7, #20]
   return(result);
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a38c:	653b      	str	r3, [r7, #80]	; 0x50
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3314      	adds	r3, #20
 800a394:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a396:	627a      	str	r2, [r7, #36]	; 0x24
 800a398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39a:	6a39      	ldr	r1, [r7, #32]
 800a39c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39e:	e841 2300 	strex	r3, r2, [r1]
 800a3a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1e5      	bne.n	800a376 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3760      	adds	r7, #96	; 0x60
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	08009fb9 	.word	0x08009fb9
 800a3b8:	0800a0df 	.word	0x0800a0df
 800a3bc:	0800a115 	.word	0x0800a115

0800a3c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b089      	sub	sp, #36	; 0x24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	330c      	adds	r3, #12
 800a3ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	e853 3f00 	ldrex	r3, [r3]
 800a3d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a3de:	61fb      	str	r3, [r7, #28]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	330c      	adds	r3, #12
 800a3e6:	69fa      	ldr	r2, [r7, #28]
 800a3e8:	61ba      	str	r2, [r7, #24]
 800a3ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ec:	6979      	ldr	r1, [r7, #20]
 800a3ee:	69ba      	ldr	r2, [r7, #24]
 800a3f0:	e841 2300 	strex	r3, r2, [r1]
 800a3f4:	613b      	str	r3, [r7, #16]
   return(result);
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1e5      	bne.n	800a3c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2220      	movs	r2, #32
 800a400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a404:	bf00      	nop
 800a406:	3724      	adds	r7, #36	; 0x24
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a410:	b480      	push	{r7}
 800a412:	b095      	sub	sp, #84	; 0x54
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	330c      	adds	r3, #12
 800a41e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a422:	e853 3f00 	ldrex	r3, [r3]
 800a426:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a42e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	330c      	adds	r3, #12
 800a436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a438:	643a      	str	r2, [r7, #64]	; 0x40
 800a43a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a43e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a440:	e841 2300 	strex	r3, r2, [r1]
 800a444:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1e5      	bne.n	800a418 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3314      	adds	r3, #20
 800a452:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	e853 3f00 	ldrex	r3, [r3]
 800a45a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	f023 0301 	bic.w	r3, r3, #1
 800a462:	64bb      	str	r3, [r7, #72]	; 0x48
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	3314      	adds	r3, #20
 800a46a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a46c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a46e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a474:	e841 2300 	strex	r3, r2, [r1]
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1e5      	bne.n	800a44c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a484:	2b01      	cmp	r3, #1
 800a486:	d119      	bne.n	800a4bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	330c      	adds	r3, #12
 800a48e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	e853 3f00 	ldrex	r3, [r3]
 800a496:	60bb      	str	r3, [r7, #8]
   return(result);
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	f023 0310 	bic.w	r3, r3, #16
 800a49e:	647b      	str	r3, [r7, #68]	; 0x44
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	330c      	adds	r3, #12
 800a4a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4a8:	61ba      	str	r2, [r7, #24]
 800a4aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ac:	6979      	ldr	r1, [r7, #20]
 800a4ae:	69ba      	ldr	r2, [r7, #24]
 800a4b0:	e841 2300 	strex	r3, r2, [r1]
 800a4b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1e5      	bne.n	800a488 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2220      	movs	r2, #32
 800a4c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a4ca:	bf00      	nop
 800a4cc:	3754      	adds	r7, #84	; 0x54
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b084      	sub	sp, #16
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f7ff fd57 	bl	8009fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4f6:	bf00      	nop
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b085      	sub	sp, #20
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b21      	cmp	r3, #33	; 0x21
 800a510:	d13e      	bne.n	800a590 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a51a:	d114      	bne.n	800a546 <UART_Transmit_IT+0x48>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d110      	bne.n	800a546 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a1b      	ldr	r3, [r3, #32]
 800a528:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	881b      	ldrh	r3, [r3, #0]
 800a52e:	461a      	mov	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a538:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a1b      	ldr	r3, [r3, #32]
 800a53e:	1c9a      	adds	r2, r3, #2
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	621a      	str	r2, [r3, #32]
 800a544:	e008      	b.n	800a558 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	1c59      	adds	r1, r3, #1
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	6211      	str	r1, [r2, #32]
 800a550:	781a      	ldrb	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	3b01      	subs	r3, #1
 800a560:	b29b      	uxth	r3, r3
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	4619      	mov	r1, r3
 800a566:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10f      	bne.n	800a58c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68da      	ldr	r2, [r3, #12]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a57a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68da      	ldr	r2, [r3, #12]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a58a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	e000      	b.n	800a592 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a590:	2302      	movs	r3, #2
  }
}
 800a592:	4618      	mov	r0, r3
 800a594:	3714      	adds	r7, #20
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b082      	sub	sp, #8
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68da      	ldr	r2, [r3, #12]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2220      	movs	r2, #32
 800a5ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7ff fcd2 	bl	8009f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b08c      	sub	sp, #48	; 0x30
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	2b22      	cmp	r3, #34	; 0x22
 800a5e0:	f040 80ab 	bne.w	800a73a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ec:	d117      	bne.n	800a61e <UART_Receive_IT+0x50>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d113      	bne.n	800a61e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	b29b      	uxth	r3, r3
 800a608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a60c:	b29a      	uxth	r2, r3
 800a60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a610:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a616:	1c9a      	adds	r2, r3, #2
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	629a      	str	r2, [r3, #40]	; 0x28
 800a61c:	e026      	b.n	800a66c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a622:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a624:	2300      	movs	r3, #0
 800a626:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a630:	d007      	beq.n	800a642 <UART_Receive_IT+0x74>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10a      	bne.n	800a650 <UART_Receive_IT+0x82>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d106      	bne.n	800a650 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	e008      	b.n	800a662 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	b2db      	uxtb	r3, r3
 800a658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a660:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a666:	1c5a      	adds	r2, r3, #1
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a670:	b29b      	uxth	r3, r3
 800a672:	3b01      	subs	r3, #1
 800a674:	b29b      	uxth	r3, r3
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	4619      	mov	r1, r3
 800a67a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d15a      	bne.n	800a736 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68da      	ldr	r2, [r3, #12]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f022 0220 	bic.w	r2, r2, #32
 800a68e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a69e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	695a      	ldr	r2, [r3, #20]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f022 0201 	bic.w	r2, r2, #1
 800a6ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2220      	movs	r2, #32
 800a6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d135      	bne.n	800a72c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	330c      	adds	r3, #12
 800a6cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	e853 3f00 	ldrex	r3, [r3]
 800a6d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	f023 0310 	bic.w	r3, r3, #16
 800a6dc:	627b      	str	r3, [r7, #36]	; 0x24
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	330c      	adds	r3, #12
 800a6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6e6:	623a      	str	r2, [r7, #32]
 800a6e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ea:	69f9      	ldr	r1, [r7, #28]
 800a6ec:	6a3a      	ldr	r2, [r7, #32]
 800a6ee:	e841 2300 	strex	r3, r2, [r1]
 800a6f2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1e5      	bne.n	800a6c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 0310 	and.w	r3, r3, #16
 800a704:	2b10      	cmp	r3, #16
 800a706:	d10a      	bne.n	800a71e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a708:	2300      	movs	r3, #0
 800a70a:	60fb      	str	r3, [r7, #12]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	60fb      	str	r3, [r7, #12]
 800a71c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7f8 fb6b 	bl	8002e00 <HAL_UARTEx_RxEventCallback>
 800a72a:	e002      	b.n	800a732 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff fc25 	bl	8009f7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	e002      	b.n	800a73c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	e000      	b.n	800a73c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a73a:	2302      	movs	r3, #2
  }
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3730      	adds	r7, #48	; 0x30
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a748:	b0c0      	sub	sp, #256	; 0x100
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a760:	68d9      	ldr	r1, [r3, #12]
 800a762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	ea40 0301 	orr.w	r3, r0, r1
 800a76c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a76e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a772:	689a      	ldr	r2, [r3, #8]
 800a774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	431a      	orrs	r2, r3
 800a77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	431a      	orrs	r2, r3
 800a784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a788:	69db      	ldr	r3, [r3, #28]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a79c:	f021 010c 	bic.w	r1, r1, #12
 800a7a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7aa:	430b      	orrs	r3, r1
 800a7ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a7ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a7ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7be:	6999      	ldr	r1, [r3, #24]
 800a7c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	ea40 0301 	orr.w	r3, r0, r1
 800a7ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	4b8f      	ldr	r3, [pc, #572]	; (800aa10 <UART_SetConfig+0x2cc>)
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d005      	beq.n	800a7e4 <UART_SetConfig+0xa0>
 800a7d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	4b8d      	ldr	r3, [pc, #564]	; (800aa14 <UART_SetConfig+0x2d0>)
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d104      	bne.n	800a7ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a7e4:	f7fd fa66 	bl	8007cb4 <HAL_RCC_GetPCLK2Freq>
 800a7e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a7ec:	e003      	b.n	800a7f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a7ee:	f7fd fa4d 	bl	8007c8c <HAL_RCC_GetPCLK1Freq>
 800a7f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7fa:	69db      	ldr	r3, [r3, #28]
 800a7fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a800:	f040 810c 	bne.w	800aa1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a808:	2200      	movs	r2, #0
 800a80a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a80e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a812:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a816:	4622      	mov	r2, r4
 800a818:	462b      	mov	r3, r5
 800a81a:	1891      	adds	r1, r2, r2
 800a81c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a81e:	415b      	adcs	r3, r3
 800a820:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a822:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a826:	4621      	mov	r1, r4
 800a828:	eb12 0801 	adds.w	r8, r2, r1
 800a82c:	4629      	mov	r1, r5
 800a82e:	eb43 0901 	adc.w	r9, r3, r1
 800a832:	f04f 0200 	mov.w	r2, #0
 800a836:	f04f 0300 	mov.w	r3, #0
 800a83a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a83e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a846:	4690      	mov	r8, r2
 800a848:	4699      	mov	r9, r3
 800a84a:	4623      	mov	r3, r4
 800a84c:	eb18 0303 	adds.w	r3, r8, r3
 800a850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a854:	462b      	mov	r3, r5
 800a856:	eb49 0303 	adc.w	r3, r9, r3
 800a85a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a85e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a86a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a86e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a872:	460b      	mov	r3, r1
 800a874:	18db      	adds	r3, r3, r3
 800a876:	653b      	str	r3, [r7, #80]	; 0x50
 800a878:	4613      	mov	r3, r2
 800a87a:	eb42 0303 	adc.w	r3, r2, r3
 800a87e:	657b      	str	r3, [r7, #84]	; 0x54
 800a880:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a884:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a888:	f7f6 fa0e 	bl	8000ca8 <__aeabi_uldivmod>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	4b61      	ldr	r3, [pc, #388]	; (800aa18 <UART_SetConfig+0x2d4>)
 800a892:	fba3 2302 	umull	r2, r3, r3, r2
 800a896:	095b      	lsrs	r3, r3, #5
 800a898:	011c      	lsls	r4, r3, #4
 800a89a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a8a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a8ac:	4642      	mov	r2, r8
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	1891      	adds	r1, r2, r2
 800a8b2:	64b9      	str	r1, [r7, #72]	; 0x48
 800a8b4:	415b      	adcs	r3, r3
 800a8b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a8bc:	4641      	mov	r1, r8
 800a8be:	eb12 0a01 	adds.w	sl, r2, r1
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	eb43 0b01 	adc.w	fp, r3, r1
 800a8c8:	f04f 0200 	mov.w	r2, #0
 800a8cc:	f04f 0300 	mov.w	r3, #0
 800a8d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a8d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a8d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8dc:	4692      	mov	sl, r2
 800a8de:	469b      	mov	fp, r3
 800a8e0:	4643      	mov	r3, r8
 800a8e2:	eb1a 0303 	adds.w	r3, sl, r3
 800a8e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a8ea:	464b      	mov	r3, r9
 800a8ec:	eb4b 0303 	adc.w	r3, fp, r3
 800a8f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a8f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a900:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a904:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a908:	460b      	mov	r3, r1
 800a90a:	18db      	adds	r3, r3, r3
 800a90c:	643b      	str	r3, [r7, #64]	; 0x40
 800a90e:	4613      	mov	r3, r2
 800a910:	eb42 0303 	adc.w	r3, r2, r3
 800a914:	647b      	str	r3, [r7, #68]	; 0x44
 800a916:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a91a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a91e:	f7f6 f9c3 	bl	8000ca8 <__aeabi_uldivmod>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	4611      	mov	r1, r2
 800a928:	4b3b      	ldr	r3, [pc, #236]	; (800aa18 <UART_SetConfig+0x2d4>)
 800a92a:	fba3 2301 	umull	r2, r3, r3, r1
 800a92e:	095b      	lsrs	r3, r3, #5
 800a930:	2264      	movs	r2, #100	; 0x64
 800a932:	fb02 f303 	mul.w	r3, r2, r3
 800a936:	1acb      	subs	r3, r1, r3
 800a938:	00db      	lsls	r3, r3, #3
 800a93a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a93e:	4b36      	ldr	r3, [pc, #216]	; (800aa18 <UART_SetConfig+0x2d4>)
 800a940:	fba3 2302 	umull	r2, r3, r3, r2
 800a944:	095b      	lsrs	r3, r3, #5
 800a946:	005b      	lsls	r3, r3, #1
 800a948:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a94c:	441c      	add	r4, r3
 800a94e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a952:	2200      	movs	r2, #0
 800a954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a958:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a95c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a960:	4642      	mov	r2, r8
 800a962:	464b      	mov	r3, r9
 800a964:	1891      	adds	r1, r2, r2
 800a966:	63b9      	str	r1, [r7, #56]	; 0x38
 800a968:	415b      	adcs	r3, r3
 800a96a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a96c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a970:	4641      	mov	r1, r8
 800a972:	1851      	adds	r1, r2, r1
 800a974:	6339      	str	r1, [r7, #48]	; 0x30
 800a976:	4649      	mov	r1, r9
 800a978:	414b      	adcs	r3, r1
 800a97a:	637b      	str	r3, [r7, #52]	; 0x34
 800a97c:	f04f 0200 	mov.w	r2, #0
 800a980:	f04f 0300 	mov.w	r3, #0
 800a984:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a988:	4659      	mov	r1, fp
 800a98a:	00cb      	lsls	r3, r1, #3
 800a98c:	4651      	mov	r1, sl
 800a98e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a992:	4651      	mov	r1, sl
 800a994:	00ca      	lsls	r2, r1, #3
 800a996:	4610      	mov	r0, r2
 800a998:	4619      	mov	r1, r3
 800a99a:	4603      	mov	r3, r0
 800a99c:	4642      	mov	r2, r8
 800a99e:	189b      	adds	r3, r3, r2
 800a9a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9a4:	464b      	mov	r3, r9
 800a9a6:	460a      	mov	r2, r1
 800a9a8:	eb42 0303 	adc.w	r3, r2, r3
 800a9ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a9b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a9bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a9c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	18db      	adds	r3, r3, r3
 800a9c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	eb42 0303 	adc.w	r3, r2, r3
 800a9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a9d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a9da:	f7f6 f965 	bl	8000ca8 <__aeabi_uldivmod>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	4b0d      	ldr	r3, [pc, #52]	; (800aa18 <UART_SetConfig+0x2d4>)
 800a9e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a9e8:	095b      	lsrs	r3, r3, #5
 800a9ea:	2164      	movs	r1, #100	; 0x64
 800a9ec:	fb01 f303 	mul.w	r3, r1, r3
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	3332      	adds	r3, #50	; 0x32
 800a9f6:	4a08      	ldr	r2, [pc, #32]	; (800aa18 <UART_SetConfig+0x2d4>)
 800a9f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a9fc:	095b      	lsrs	r3, r3, #5
 800a9fe:	f003 0207 	and.w	r2, r3, #7
 800aa02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4422      	add	r2, r4
 800aa0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aa0c:	e105      	b.n	800ac1a <UART_SetConfig+0x4d6>
 800aa0e:	bf00      	nop
 800aa10:	40011000 	.word	0x40011000
 800aa14:	40011400 	.word	0x40011400
 800aa18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa20:	2200      	movs	r2, #0
 800aa22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aa26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aa2e:	4642      	mov	r2, r8
 800aa30:	464b      	mov	r3, r9
 800aa32:	1891      	adds	r1, r2, r2
 800aa34:	6239      	str	r1, [r7, #32]
 800aa36:	415b      	adcs	r3, r3
 800aa38:	627b      	str	r3, [r7, #36]	; 0x24
 800aa3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aa3e:	4641      	mov	r1, r8
 800aa40:	1854      	adds	r4, r2, r1
 800aa42:	4649      	mov	r1, r9
 800aa44:	eb43 0501 	adc.w	r5, r3, r1
 800aa48:	f04f 0200 	mov.w	r2, #0
 800aa4c:	f04f 0300 	mov.w	r3, #0
 800aa50:	00eb      	lsls	r3, r5, #3
 800aa52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aa56:	00e2      	lsls	r2, r4, #3
 800aa58:	4614      	mov	r4, r2
 800aa5a:	461d      	mov	r5, r3
 800aa5c:	4643      	mov	r3, r8
 800aa5e:	18e3      	adds	r3, r4, r3
 800aa60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aa64:	464b      	mov	r3, r9
 800aa66:	eb45 0303 	adc.w	r3, r5, r3
 800aa6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aa6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa7e:	f04f 0200 	mov.w	r2, #0
 800aa82:	f04f 0300 	mov.w	r3, #0
 800aa86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	008b      	lsls	r3, r1, #2
 800aa8e:	4621      	mov	r1, r4
 800aa90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa94:	4621      	mov	r1, r4
 800aa96:	008a      	lsls	r2, r1, #2
 800aa98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aa9c:	f7f6 f904 	bl	8000ca8 <__aeabi_uldivmod>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	4b60      	ldr	r3, [pc, #384]	; (800ac28 <UART_SetConfig+0x4e4>)
 800aaa6:	fba3 2302 	umull	r2, r3, r3, r2
 800aaaa:	095b      	lsrs	r3, r3, #5
 800aaac:	011c      	lsls	r4, r3, #4
 800aaae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aab2:	2200      	movs	r2, #0
 800aab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aab8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aabc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800aac0:	4642      	mov	r2, r8
 800aac2:	464b      	mov	r3, r9
 800aac4:	1891      	adds	r1, r2, r2
 800aac6:	61b9      	str	r1, [r7, #24]
 800aac8:	415b      	adcs	r3, r3
 800aaca:	61fb      	str	r3, [r7, #28]
 800aacc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aad0:	4641      	mov	r1, r8
 800aad2:	1851      	adds	r1, r2, r1
 800aad4:	6139      	str	r1, [r7, #16]
 800aad6:	4649      	mov	r1, r9
 800aad8:	414b      	adcs	r3, r1
 800aada:	617b      	str	r3, [r7, #20]
 800aadc:	f04f 0200 	mov.w	r2, #0
 800aae0:	f04f 0300 	mov.w	r3, #0
 800aae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aae8:	4659      	mov	r1, fp
 800aaea:	00cb      	lsls	r3, r1, #3
 800aaec:	4651      	mov	r1, sl
 800aaee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aaf2:	4651      	mov	r1, sl
 800aaf4:	00ca      	lsls	r2, r1, #3
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4603      	mov	r3, r0
 800aafc:	4642      	mov	r2, r8
 800aafe:	189b      	adds	r3, r3, r2
 800ab00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab04:	464b      	mov	r3, r9
 800ab06:	460a      	mov	r2, r1
 800ab08:	eb42 0303 	adc.w	r3, r2, r3
 800ab0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ab1c:	f04f 0200 	mov.w	r2, #0
 800ab20:	f04f 0300 	mov.w	r3, #0
 800ab24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ab28:	4649      	mov	r1, r9
 800ab2a:	008b      	lsls	r3, r1, #2
 800ab2c:	4641      	mov	r1, r8
 800ab2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab32:	4641      	mov	r1, r8
 800ab34:	008a      	lsls	r2, r1, #2
 800ab36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ab3a:	f7f6 f8b5 	bl	8000ca8 <__aeabi_uldivmod>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4b39      	ldr	r3, [pc, #228]	; (800ac28 <UART_SetConfig+0x4e4>)
 800ab44:	fba3 1302 	umull	r1, r3, r3, r2
 800ab48:	095b      	lsrs	r3, r3, #5
 800ab4a:	2164      	movs	r1, #100	; 0x64
 800ab4c:	fb01 f303 	mul.w	r3, r1, r3
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	011b      	lsls	r3, r3, #4
 800ab54:	3332      	adds	r3, #50	; 0x32
 800ab56:	4a34      	ldr	r2, [pc, #208]	; (800ac28 <UART_SetConfig+0x4e4>)
 800ab58:	fba2 2303 	umull	r2, r3, r2, r3
 800ab5c:	095b      	lsrs	r3, r3, #5
 800ab5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab62:	441c      	add	r4, r3
 800ab64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab68:	2200      	movs	r2, #0
 800ab6a:	673b      	str	r3, [r7, #112]	; 0x70
 800ab6c:	677a      	str	r2, [r7, #116]	; 0x74
 800ab6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ab72:	4642      	mov	r2, r8
 800ab74:	464b      	mov	r3, r9
 800ab76:	1891      	adds	r1, r2, r2
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	415b      	adcs	r3, r3
 800ab7c:	60fb      	str	r3, [r7, #12]
 800ab7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab82:	4641      	mov	r1, r8
 800ab84:	1851      	adds	r1, r2, r1
 800ab86:	6039      	str	r1, [r7, #0]
 800ab88:	4649      	mov	r1, r9
 800ab8a:	414b      	adcs	r3, r1
 800ab8c:	607b      	str	r3, [r7, #4]
 800ab8e:	f04f 0200 	mov.w	r2, #0
 800ab92:	f04f 0300 	mov.w	r3, #0
 800ab96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ab9a:	4659      	mov	r1, fp
 800ab9c:	00cb      	lsls	r3, r1, #3
 800ab9e:	4651      	mov	r1, sl
 800aba0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aba4:	4651      	mov	r1, sl
 800aba6:	00ca      	lsls	r2, r1, #3
 800aba8:	4610      	mov	r0, r2
 800abaa:	4619      	mov	r1, r3
 800abac:	4603      	mov	r3, r0
 800abae:	4642      	mov	r2, r8
 800abb0:	189b      	adds	r3, r3, r2
 800abb2:	66bb      	str	r3, [r7, #104]	; 0x68
 800abb4:	464b      	mov	r3, r9
 800abb6:	460a      	mov	r2, r1
 800abb8:	eb42 0303 	adc.w	r3, r2, r3
 800abbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800abbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	663b      	str	r3, [r7, #96]	; 0x60
 800abc8:	667a      	str	r2, [r7, #100]	; 0x64
 800abca:	f04f 0200 	mov.w	r2, #0
 800abce:	f04f 0300 	mov.w	r3, #0
 800abd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800abd6:	4649      	mov	r1, r9
 800abd8:	008b      	lsls	r3, r1, #2
 800abda:	4641      	mov	r1, r8
 800abdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abe0:	4641      	mov	r1, r8
 800abe2:	008a      	lsls	r2, r1, #2
 800abe4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800abe8:	f7f6 f85e 	bl	8000ca8 <__aeabi_uldivmod>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4b0d      	ldr	r3, [pc, #52]	; (800ac28 <UART_SetConfig+0x4e4>)
 800abf2:	fba3 1302 	umull	r1, r3, r3, r2
 800abf6:	095b      	lsrs	r3, r3, #5
 800abf8:	2164      	movs	r1, #100	; 0x64
 800abfa:	fb01 f303 	mul.w	r3, r1, r3
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	011b      	lsls	r3, r3, #4
 800ac02:	3332      	adds	r3, #50	; 0x32
 800ac04:	4a08      	ldr	r2, [pc, #32]	; (800ac28 <UART_SetConfig+0x4e4>)
 800ac06:	fba2 2303 	umull	r2, r3, r2, r3
 800ac0a:	095b      	lsrs	r3, r3, #5
 800ac0c:	f003 020f 	and.w	r2, r3, #15
 800ac10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4422      	add	r2, r4
 800ac18:	609a      	str	r2, [r3, #8]
}
 800ac1a:	bf00      	nop
 800ac1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ac20:	46bd      	mov	sp, r7
 800ac22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac26:	bf00      	nop
 800ac28:	51eb851f 	.word	0x51eb851f

0800ac2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ac30:	4904      	ldr	r1, [pc, #16]	; (800ac44 <MX_FATFS_Init+0x18>)
 800ac32:	4805      	ldr	r0, [pc, #20]	; (800ac48 <MX_FATFS_Init+0x1c>)
 800ac34:	f003 f952 	bl	800dedc <FATFS_LinkDriver>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	4b03      	ldr	r3, [pc, #12]	; (800ac4c <MX_FATFS_Init+0x20>)
 800ac3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ac40:	bf00      	nop
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	20001658 	.word	0x20001658
 800ac48:	20000010 	.word	0x20000010
 800ac4c:	20001654 	.word	0x20001654

0800ac50 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ac50:	b480      	push	{r7}
 800ac52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ac54:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	4603      	mov	r3, r0
 800ac68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800ac6a:	79fb      	ldrb	r3, [r7, #7]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7f6 fbbf 	bl	80013f0 <SD_disk_initialize>
 800ac72:	4603      	mov	r3, r0
 800ac74:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b082      	sub	sp, #8
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	4603      	mov	r3, r0
 800ac86:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	 return SD_disk_status(pdrv);
 800ac88:	79fb      	ldrb	r3, [r7, #7]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7f6 fc9a 	bl	80015c4 <SD_disk_status>
 800ac90:	4603      	mov	r3, r0
 800ac92:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60b9      	str	r1, [r7, #8]
 800aca4:	607a      	str	r2, [r7, #4]
 800aca6:	603b      	str	r3, [r7, #0]
 800aca8:	4603      	mov	r3, r0
 800acaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800acac:	7bf8      	ldrb	r0, [r7, #15]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	68b9      	ldr	r1, [r7, #8]
 800acb4:	f7f6 fc9c 	bl	80015f0 <SD_disk_read>
 800acb8:	4603      	mov	r3, r0
 800acba:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60b9      	str	r1, [r7, #8]
 800accc:	607a      	str	r2, [r7, #4]
 800acce:	603b      	str	r3, [r7, #0]
 800acd0:	4603      	mov	r3, r0
 800acd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800acd4:	7bf8      	ldrb	r0, [r7, #15]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	68b9      	ldr	r1, [r7, #8]
 800acdc:	f7f6 fcf2 	bl	80016c4 <SD_disk_write>
 800ace0:	4603      	mov	r3, r0
 800ace2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	4603      	mov	r3, r0
 800acf4:	603a      	str	r2, [r7, #0]
 800acf6:	71fb      	strb	r3, [r7, #7]
 800acf8:	460b      	mov	r3, r1
 800acfa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800acfc:	79fb      	ldrb	r3, [r7, #7]
 800acfe:	79b9      	ldrb	r1, [r7, #6]
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7f6 fd62 	bl	80017cc <SD_disk_ioctl>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ad1e:	79fb      	ldrb	r3, [r7, #7]
 800ad20:	4a08      	ldr	r2, [pc, #32]	; (800ad44 <disk_status+0x30>)
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	79fa      	ldrb	r2, [r7, #7]
 800ad2c:	4905      	ldr	r1, [pc, #20]	; (800ad44 <disk_status+0x30>)
 800ad2e:	440a      	add	r2, r1
 800ad30:	7a12      	ldrb	r2, [r2, #8]
 800ad32:	4610      	mov	r0, r2
 800ad34:	4798      	blx	r3
 800ad36:	4603      	mov	r3, r0
 800ad38:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ad3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20001884 	.word	0x20001884

0800ad48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	4603      	mov	r3, r0
 800ad50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ad56:	79fb      	ldrb	r3, [r7, #7]
 800ad58:	4a0d      	ldr	r2, [pc, #52]	; (800ad90 <disk_initialize+0x48>)
 800ad5a:	5cd3      	ldrb	r3, [r2, r3]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d111      	bne.n	800ad84 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ad60:	79fb      	ldrb	r3, [r7, #7]
 800ad62:	4a0b      	ldr	r2, [pc, #44]	; (800ad90 <disk_initialize+0x48>)
 800ad64:	2101      	movs	r1, #1
 800ad66:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ad68:	79fb      	ldrb	r3, [r7, #7]
 800ad6a:	4a09      	ldr	r2, [pc, #36]	; (800ad90 <disk_initialize+0x48>)
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	4413      	add	r3, r2
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	79fa      	ldrb	r2, [r7, #7]
 800ad76:	4906      	ldr	r1, [pc, #24]	; (800ad90 <disk_initialize+0x48>)
 800ad78:	440a      	add	r2, r1
 800ad7a:	7a12      	ldrb	r2, [r2, #8]
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	4798      	blx	r3
 800ad80:	4603      	mov	r3, r0
 800ad82:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	20001884 	.word	0x20001884

0800ad94 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ad94:	b590      	push	{r4, r7, lr}
 800ad96:	b087      	sub	sp, #28
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60b9      	str	r1, [r7, #8]
 800ad9c:	607a      	str	r2, [r7, #4]
 800ad9e:	603b      	str	r3, [r7, #0]
 800ada0:	4603      	mov	r3, r0
 800ada2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ada4:	7bfb      	ldrb	r3, [r7, #15]
 800ada6:	4a0a      	ldr	r2, [pc, #40]	; (800add0 <disk_read+0x3c>)
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	689c      	ldr	r4, [r3, #8]
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	4a07      	ldr	r2, [pc, #28]	; (800add0 <disk_read+0x3c>)
 800adb4:	4413      	add	r3, r2
 800adb6:	7a18      	ldrb	r0, [r3, #8]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	68b9      	ldr	r1, [r7, #8]
 800adbe:	47a0      	blx	r4
 800adc0:	4603      	mov	r3, r0
 800adc2:	75fb      	strb	r3, [r7, #23]
  return res;
 800adc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	371c      	adds	r7, #28
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd90      	pop	{r4, r7, pc}
 800adce:	bf00      	nop
 800add0:	20001884 	.word	0x20001884

0800add4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800add4:	b590      	push	{r4, r7, lr}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
 800adda:	60b9      	str	r1, [r7, #8]
 800addc:	607a      	str	r2, [r7, #4]
 800adde:	603b      	str	r3, [r7, #0]
 800ade0:	4603      	mov	r3, r0
 800ade2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
 800ade6:	4a0a      	ldr	r2, [pc, #40]	; (800ae10 <disk_write+0x3c>)
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	68dc      	ldr	r4, [r3, #12]
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
 800adf2:	4a07      	ldr	r2, [pc, #28]	; (800ae10 <disk_write+0x3c>)
 800adf4:	4413      	add	r3, r2
 800adf6:	7a18      	ldrb	r0, [r3, #8]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	68b9      	ldr	r1, [r7, #8]
 800adfe:	47a0      	blx	r4
 800ae00:	4603      	mov	r3, r0
 800ae02:	75fb      	strb	r3, [r7, #23]
  return res;
 800ae04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	371c      	adds	r7, #28
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd90      	pop	{r4, r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	20001884 	.word	0x20001884

0800ae14 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	603a      	str	r2, [r7, #0]
 800ae1e:	71fb      	strb	r3, [r7, #7]
 800ae20:	460b      	mov	r3, r1
 800ae22:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ae24:	79fb      	ldrb	r3, [r7, #7]
 800ae26:	4a09      	ldr	r2, [pc, #36]	; (800ae4c <disk_ioctl+0x38>)
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	79fa      	ldrb	r2, [r7, #7]
 800ae32:	4906      	ldr	r1, [pc, #24]	; (800ae4c <disk_ioctl+0x38>)
 800ae34:	440a      	add	r2, r1
 800ae36:	7a10      	ldrb	r0, [r2, #8]
 800ae38:	79b9      	ldrb	r1, [r7, #6]
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	4798      	blx	r3
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73fb      	strb	r3, [r7, #15]
  return res;
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	20001884 	.word	0x20001884

0800ae50 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ae60:	89fb      	ldrh	r3, [r7, #14]
 800ae62:	021b      	lsls	r3, r3, #8
 800ae64:	b21a      	sxth	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	b21b      	sxth	r3, r3
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	b21b      	sxth	r3, r3
 800ae70:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ae72:	89fb      	ldrh	r3, [r7, #14]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	3303      	adds	r3, #3
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	021b      	lsls	r3, r3, #8
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	3202      	adds	r2, #2
 800ae98:	7812      	ldrb	r2, [r2, #0]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	021b      	lsls	r3, r3, #8
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	3201      	adds	r2, #1
 800aea6:	7812      	ldrb	r2, [r2, #0]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	021b      	lsls	r3, r3, #8
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	7812      	ldrb	r2, [r2, #0]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	60fb      	str	r3, [r7, #12]
	return rv;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800aec6:	b480      	push	{r7}
 800aec8:	b083      	sub	sp, #12
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	460b      	mov	r3, r1
 800aed0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	1c5a      	adds	r2, r3, #1
 800aed6:	607a      	str	r2, [r7, #4]
 800aed8:	887a      	ldrh	r2, [r7, #2]
 800aeda:	b2d2      	uxtb	r2, r2
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	887b      	ldrh	r3, [r7, #2]
 800aee0:	0a1b      	lsrs	r3, r3, #8
 800aee2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	1c5a      	adds	r2, r3, #1
 800aee8:	607a      	str	r2, [r7, #4]
 800aeea:	887a      	ldrh	r2, [r7, #2]
 800aeec:	b2d2      	uxtb	r2, r2
 800aeee:	701a      	strb	r2, [r3, #0]
}
 800aef0:	bf00      	nop
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	1c5a      	adds	r2, r3, #1
 800af0a:	607a      	str	r2, [r7, #4]
 800af0c:	683a      	ldr	r2, [r7, #0]
 800af0e:	b2d2      	uxtb	r2, r2
 800af10:	701a      	strb	r2, [r3, #0]
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	0a1b      	lsrs	r3, r3, #8
 800af16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	1c5a      	adds	r2, r3, #1
 800af1c:	607a      	str	r2, [r7, #4]
 800af1e:	683a      	ldr	r2, [r7, #0]
 800af20:	b2d2      	uxtb	r2, r2
 800af22:	701a      	strb	r2, [r3, #0]
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	0a1b      	lsrs	r3, r3, #8
 800af28:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	1c5a      	adds	r2, r3, #1
 800af2e:	607a      	str	r2, [r7, #4]
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	b2d2      	uxtb	r2, r2
 800af34:	701a      	strb	r2, [r3, #0]
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	0a1b      	lsrs	r3, r3, #8
 800af3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	1c5a      	adds	r2, r3, #1
 800af40:	607a      	str	r2, [r7, #4]
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	b2d2      	uxtb	r2, r2
 800af46:	701a      	strb	r2, [r3, #0]
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800af54:	b480      	push	{r7}
 800af56:	b087      	sub	sp, #28
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00d      	beq.n	800af8a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800af6e:	693a      	ldr	r2, [r7, #16]
 800af70:	1c53      	adds	r3, r2, #1
 800af72:	613b      	str	r3, [r7, #16]
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	1c59      	adds	r1, r3, #1
 800af78:	6179      	str	r1, [r7, #20]
 800af7a:	7812      	ldrb	r2, [r2, #0]
 800af7c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3b01      	subs	r3, #1
 800af82:	607b      	str	r3, [r7, #4]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1f1      	bne.n	800af6e <mem_cpy+0x1a>
	}
}
 800af8a:	bf00      	nop
 800af8c:	371c      	adds	r7, #28
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800af96:	b480      	push	{r7}
 800af98:	b087      	sub	sp, #28
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	60f8      	str	r0, [r7, #12]
 800af9e:	60b9      	str	r1, [r7, #8]
 800afa0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	617a      	str	r2, [r7, #20]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	b2d2      	uxtb	r2, r2
 800afb0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3b01      	subs	r3, #1
 800afb6:	607b      	str	r3, [r7, #4]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1f3      	bne.n	800afa6 <mem_set+0x10>
}
 800afbe:	bf00      	nop
 800afc0:	bf00      	nop
 800afc2:	371c      	adds	r7, #28
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800afcc:	b480      	push	{r7}
 800afce:	b089      	sub	sp, #36	; 0x24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	61fb      	str	r3, [r7, #28]
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800afe0:	2300      	movs	r3, #0
 800afe2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	1c5a      	adds	r2, r3, #1
 800afe8:	61fa      	str	r2, [r7, #28]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	4619      	mov	r1, r3
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	1c5a      	adds	r2, r3, #1
 800aff2:	61ba      	str	r2, [r7, #24]
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	1acb      	subs	r3, r1, r3
 800aff8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	3b01      	subs	r3, #1
 800affe:	607b      	str	r3, [r7, #4]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d002      	beq.n	800b00c <mem_cmp+0x40>
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d0eb      	beq.n	800afe4 <mem_cmp+0x18>

	return r;
 800b00c:	697b      	ldr	r3, [r7, #20]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3724      	adds	r7, #36	; 0x24
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b01a:	b480      	push	{r7}
 800b01c:	b083      	sub	sp, #12
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b024:	e002      	b.n	800b02c <chk_chr+0x12>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	3301      	adds	r3, #1
 800b02a:	607b      	str	r3, [r7, #4]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d005      	beq.n	800b040 <chk_chr+0x26>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	461a      	mov	r2, r3
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d1f2      	bne.n	800b026 <chk_chr+0xc>
	return *str;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	781b      	ldrb	r3, [r3, #0]
}
 800b044:	4618      	mov	r0, r3
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b05a:	2300      	movs	r3, #0
 800b05c:	60bb      	str	r3, [r7, #8]
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	60fb      	str	r3, [r7, #12]
 800b062:	e029      	b.n	800b0b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b064:	4a27      	ldr	r2, [pc, #156]	; (800b104 <chk_lock+0xb4>)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	011b      	lsls	r3, r3, #4
 800b06a:	4413      	add	r3, r2
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d01d      	beq.n	800b0ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b072:	4a24      	ldr	r2, [pc, #144]	; (800b104 <chk_lock+0xb4>)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	011b      	lsls	r3, r3, #4
 800b078:	4413      	add	r3, r2
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	429a      	cmp	r2, r3
 800b082:	d116      	bne.n	800b0b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b084:	4a1f      	ldr	r2, [pc, #124]	; (800b104 <chk_lock+0xb4>)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	011b      	lsls	r3, r3, #4
 800b08a:	4413      	add	r3, r2
 800b08c:	3304      	adds	r3, #4
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b094:	429a      	cmp	r2, r3
 800b096:	d10c      	bne.n	800b0b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b098:	4a1a      	ldr	r2, [pc, #104]	; (800b104 <chk_lock+0xb4>)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	011b      	lsls	r3, r3, #4
 800b09e:	4413      	add	r3, r2
 800b0a0:	3308      	adds	r3, #8
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d102      	bne.n	800b0b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b0ac:	e007      	b.n	800b0be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	60fb      	str	r3, [r7, #12]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d9d2      	bls.n	800b064 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d109      	bne.n	800b0d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d102      	bne.n	800b0d0 <chk_lock+0x80>
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d101      	bne.n	800b0d4 <chk_lock+0x84>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	e010      	b.n	800b0f6 <chk_lock+0xa6>
 800b0d4:	2312      	movs	r3, #18
 800b0d6:	e00e      	b.n	800b0f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d108      	bne.n	800b0f0 <chk_lock+0xa0>
 800b0de:	4a09      	ldr	r2, [pc, #36]	; (800b104 <chk_lock+0xb4>)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	011b      	lsls	r3, r3, #4
 800b0e4:	4413      	add	r3, r2
 800b0e6:	330c      	adds	r3, #12
 800b0e8:	881b      	ldrh	r3, [r3, #0]
 800b0ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0ee:	d101      	bne.n	800b0f4 <chk_lock+0xa4>
 800b0f0:	2310      	movs	r3, #16
 800b0f2:	e000      	b.n	800b0f6 <chk_lock+0xa6>
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3714      	adds	r7, #20
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	20001664 	.word	0x20001664

0800b108 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b10e:	2300      	movs	r3, #0
 800b110:	607b      	str	r3, [r7, #4]
 800b112:	e002      	b.n	800b11a <enq_lock+0x12>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	3301      	adds	r3, #1
 800b118:	607b      	str	r3, [r7, #4]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d806      	bhi.n	800b12e <enq_lock+0x26>
 800b120:	4a09      	ldr	r2, [pc, #36]	; (800b148 <enq_lock+0x40>)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	011b      	lsls	r3, r3, #4
 800b126:	4413      	add	r3, r2
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1f2      	bne.n	800b114 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b02      	cmp	r3, #2
 800b132:	bf14      	ite	ne
 800b134:	2301      	movne	r3, #1
 800b136:	2300      	moveq	r3, #0
 800b138:	b2db      	uxtb	r3, r3
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	370c      	adds	r7, #12
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	20001664 	.word	0x20001664

0800b14c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b156:	2300      	movs	r3, #0
 800b158:	60fb      	str	r3, [r7, #12]
 800b15a:	e01f      	b.n	800b19c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b15c:	4a41      	ldr	r2, [pc, #260]	; (800b264 <inc_lock+0x118>)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	011b      	lsls	r3, r3, #4
 800b162:	4413      	add	r3, r2
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d113      	bne.n	800b196 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b16e:	4a3d      	ldr	r2, [pc, #244]	; (800b264 <inc_lock+0x118>)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	011b      	lsls	r3, r3, #4
 800b174:	4413      	add	r3, r2
 800b176:	3304      	adds	r3, #4
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b17e:	429a      	cmp	r2, r3
 800b180:	d109      	bne.n	800b196 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b182:	4a38      	ldr	r2, [pc, #224]	; (800b264 <inc_lock+0x118>)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	011b      	lsls	r3, r3, #4
 800b188:	4413      	add	r3, r2
 800b18a:	3308      	adds	r3, #8
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b192:	429a      	cmp	r2, r3
 800b194:	d006      	beq.n	800b1a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	3301      	adds	r3, #1
 800b19a:	60fb      	str	r3, [r7, #12]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d9dc      	bls.n	800b15c <inc_lock+0x10>
 800b1a2:	e000      	b.n	800b1a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b1a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	d132      	bne.n	800b212 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	60fb      	str	r3, [r7, #12]
 800b1b0:	e002      	b.n	800b1b8 <inc_lock+0x6c>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d806      	bhi.n	800b1cc <inc_lock+0x80>
 800b1be:	4a29      	ldr	r2, [pc, #164]	; (800b264 <inc_lock+0x118>)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	011b      	lsls	r3, r3, #4
 800b1c4:	4413      	add	r3, r2
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1f2      	bne.n	800b1b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d101      	bne.n	800b1d6 <inc_lock+0x8a>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	e040      	b.n	800b258 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	4922      	ldr	r1, [pc, #136]	; (800b264 <inc_lock+0x118>)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	011b      	lsls	r3, r3, #4
 800b1e0:	440b      	add	r3, r1
 800b1e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	689a      	ldr	r2, [r3, #8]
 800b1e8:	491e      	ldr	r1, [pc, #120]	; (800b264 <inc_lock+0x118>)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	011b      	lsls	r3, r3, #4
 800b1ee:	440b      	add	r3, r1
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	695a      	ldr	r2, [r3, #20]
 800b1f8:	491a      	ldr	r1, [pc, #104]	; (800b264 <inc_lock+0x118>)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	011b      	lsls	r3, r3, #4
 800b1fe:	440b      	add	r3, r1
 800b200:	3308      	adds	r3, #8
 800b202:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b204:	4a17      	ldr	r2, [pc, #92]	; (800b264 <inc_lock+0x118>)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	011b      	lsls	r3, r3, #4
 800b20a:	4413      	add	r3, r2
 800b20c:	330c      	adds	r3, #12
 800b20e:	2200      	movs	r2, #0
 800b210:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d009      	beq.n	800b22c <inc_lock+0xe0>
 800b218:	4a12      	ldr	r2, [pc, #72]	; (800b264 <inc_lock+0x118>)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	011b      	lsls	r3, r3, #4
 800b21e:	4413      	add	r3, r2
 800b220:	330c      	adds	r3, #12
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d001      	beq.n	800b22c <inc_lock+0xe0>
 800b228:	2300      	movs	r3, #0
 800b22a:	e015      	b.n	800b258 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d108      	bne.n	800b244 <inc_lock+0xf8>
 800b232:	4a0c      	ldr	r2, [pc, #48]	; (800b264 <inc_lock+0x118>)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	011b      	lsls	r3, r3, #4
 800b238:	4413      	add	r3, r2
 800b23a:	330c      	adds	r3, #12
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	3301      	adds	r3, #1
 800b240:	b29a      	uxth	r2, r3
 800b242:	e001      	b.n	800b248 <inc_lock+0xfc>
 800b244:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b248:	4906      	ldr	r1, [pc, #24]	; (800b264 <inc_lock+0x118>)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	011b      	lsls	r3, r3, #4
 800b24e:	440b      	add	r3, r1
 800b250:	330c      	adds	r3, #12
 800b252:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	3301      	adds	r3, #1
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3714      	adds	r7, #20
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr
 800b264:	20001664 	.word	0x20001664

0800b268 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3b01      	subs	r3, #1
 800b274:	607b      	str	r3, [r7, #4]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d825      	bhi.n	800b2c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800b27c:	4a17      	ldr	r2, [pc, #92]	; (800b2dc <dec_lock+0x74>)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	011b      	lsls	r3, r3, #4
 800b282:	4413      	add	r3, r2
 800b284:	330c      	adds	r3, #12
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b28a:	89fb      	ldrh	r3, [r7, #14]
 800b28c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b290:	d101      	bne.n	800b296 <dec_lock+0x2e>
 800b292:	2300      	movs	r3, #0
 800b294:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b296:	89fb      	ldrh	r3, [r7, #14]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <dec_lock+0x3a>
 800b29c:	89fb      	ldrh	r3, [r7, #14]
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b2a2:	4a0e      	ldr	r2, [pc, #56]	; (800b2dc <dec_lock+0x74>)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	011b      	lsls	r3, r3, #4
 800b2a8:	4413      	add	r3, r2
 800b2aa:	330c      	adds	r3, #12
 800b2ac:	89fa      	ldrh	r2, [r7, #14]
 800b2ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b2b0:	89fb      	ldrh	r3, [r7, #14]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d105      	bne.n	800b2c2 <dec_lock+0x5a>
 800b2b6:	4a09      	ldr	r2, [pc, #36]	; (800b2dc <dec_lock+0x74>)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	011b      	lsls	r3, r3, #4
 800b2bc:	4413      	add	r3, r2
 800b2be:	2200      	movs	r2, #0
 800b2c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	737b      	strb	r3, [r7, #13]
 800b2c6:	e001      	b.n	800b2cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b2cc:	7b7b      	ldrb	r3, [r7, #13]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	20001664 	.word	0x20001664

0800b2e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	60fb      	str	r3, [r7, #12]
 800b2ec:	e010      	b.n	800b310 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b2ee:	4a0d      	ldr	r2, [pc, #52]	; (800b324 <clear_lock+0x44>)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	011b      	lsls	r3, r3, #4
 800b2f4:	4413      	add	r3, r2
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d105      	bne.n	800b30a <clear_lock+0x2a>
 800b2fe:	4a09      	ldr	r2, [pc, #36]	; (800b324 <clear_lock+0x44>)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	011b      	lsls	r3, r3, #4
 800b304:	4413      	add	r3, r2
 800b306:	2200      	movs	r2, #0
 800b308:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	3301      	adds	r3, #1
 800b30e:	60fb      	str	r3, [r7, #12]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b01      	cmp	r3, #1
 800b314:	d9eb      	bls.n	800b2ee <clear_lock+0xe>
	}
}
 800b316:	bf00      	nop
 800b318:	bf00      	nop
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr
 800b324:	20001664 	.word	0x20001664

0800b328 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b330:	2300      	movs	r3, #0
 800b332:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	78db      	ldrb	r3, [r3, #3]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d034      	beq.n	800b3a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b340:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	7858      	ldrb	r0, [r3, #1]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b34c:	2301      	movs	r3, #1
 800b34e:	697a      	ldr	r2, [r7, #20]
 800b350:	f7ff fd40 	bl	800add4 <disk_write>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d002      	beq.n	800b360 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	73fb      	strb	r3, [r7, #15]
 800b35e:	e022      	b.n	800b3a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	1ad2      	subs	r2, r2, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	69db      	ldr	r3, [r3, #28]
 800b372:	429a      	cmp	r2, r3
 800b374:	d217      	bcs.n	800b3a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	789b      	ldrb	r3, [r3, #2]
 800b37a:	613b      	str	r3, [r7, #16]
 800b37c:	e010      	b.n	800b3a0 <sync_window+0x78>
					wsect += fs->fsize;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	69db      	ldr	r3, [r3, #28]
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	4413      	add	r3, r2
 800b386:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	7858      	ldrb	r0, [r3, #1]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b392:	2301      	movs	r3, #1
 800b394:	697a      	ldr	r2, [r7, #20]
 800b396:	f7ff fd1d 	bl	800add4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	613b      	str	r3, [r7, #16]
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d8eb      	bhi.n	800b37e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3718      	adds	r7, #24
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d01b      	beq.n	800b400 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f7ff ffad 	bl	800b328 <sync_window>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d113      	bne.n	800b400 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	7858      	ldrb	r0, [r3, #1]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	f7ff fcd5 	bl	800ad94 <disk_read>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d004      	beq.n	800b3fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b3f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	683a      	ldr	r2, [r7, #0]
 800b3fe:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800b400:	7bfb      	ldrb	r3, [r7, #15]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
	...

0800b40c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff ff87 	bl	800b328 <sync_window>
 800b41a:	4603      	mov	r3, r0
 800b41c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d158      	bne.n	800b4d6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	2b03      	cmp	r3, #3
 800b42a:	d148      	bne.n	800b4be <sync_fs+0xb2>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	791b      	ldrb	r3, [r3, #4]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d144      	bne.n	800b4be <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	3334      	adds	r3, #52	; 0x34
 800b438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b43c:	2100      	movs	r1, #0
 800b43e:	4618      	mov	r0, r3
 800b440:	f7ff fda9 	bl	800af96 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	3334      	adds	r3, #52	; 0x34
 800b448:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b44c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b450:	4618      	mov	r0, r3
 800b452:	f7ff fd38 	bl	800aec6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	3334      	adds	r3, #52	; 0x34
 800b45a:	4921      	ldr	r1, [pc, #132]	; (800b4e0 <sync_fs+0xd4>)
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7ff fd4d 	bl	800aefc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	3334      	adds	r3, #52	; 0x34
 800b466:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b46a:	491e      	ldr	r1, [pc, #120]	; (800b4e4 <sync_fs+0xd8>)
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7ff fd45 	bl	800aefc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	3334      	adds	r3, #52	; 0x34
 800b476:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	695b      	ldr	r3, [r3, #20]
 800b47e:	4619      	mov	r1, r3
 800b480:	4610      	mov	r0, r2
 800b482:	f7ff fd3b 	bl	800aefc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	3334      	adds	r3, #52	; 0x34
 800b48a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	4619      	mov	r1, r3
 800b494:	4610      	mov	r0, r2
 800b496:	f7ff fd31 	bl	800aefc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a1b      	ldr	r3, [r3, #32]
 800b49e:	1c5a      	adds	r2, r3, #1
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	7858      	ldrb	r0, [r3, #1]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	f7ff fc8e 	bl	800add4 <disk_write>
			fs->fsi_flag = 0;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	785b      	ldrb	r3, [r3, #1]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7ff fca4 	bl	800ae14 <disk_ioctl>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <sync_fs+0xca>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	41615252 	.word	0x41615252
 800b4e4:	61417272 	.word	0x61417272

0800b4e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	3b02      	subs	r3, #2
 800b4f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	3b02      	subs	r3, #2
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	429a      	cmp	r2, r3
 800b502:	d301      	bcc.n	800b508 <clust2sect+0x20>
 800b504:	2300      	movs	r3, #0
 800b506:	e008      	b.n	800b51a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	895b      	ldrh	r3, [r3, #10]
 800b50c:	461a      	mov	r2, r3
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	fb03 f202 	mul.w	r2, r3, r2
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	4413      	add	r3, r2
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	370c      	adds	r7, #12
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr

0800b526 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b086      	sub	sp, #24
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d904      	bls.n	800b546 <get_fat+0x20>
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	683a      	ldr	r2, [r7, #0]
 800b542:	429a      	cmp	r2, r3
 800b544:	d302      	bcc.n	800b54c <get_fat+0x26>
		val = 1;	/* Internal error */
 800b546:	2301      	movs	r3, #1
 800b548:	617b      	str	r3, [r7, #20]
 800b54a:	e08f      	b.n	800b66c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b54c:	f04f 33ff 	mov.w	r3, #4294967295
 800b550:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	2b03      	cmp	r3, #3
 800b558:	d062      	beq.n	800b620 <get_fat+0xfa>
 800b55a:	2b03      	cmp	r3, #3
 800b55c:	dc7c      	bgt.n	800b658 <get_fat+0x132>
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d002      	beq.n	800b568 <get_fat+0x42>
 800b562:	2b02      	cmp	r3, #2
 800b564:	d042      	beq.n	800b5ec <get_fat+0xc6>
 800b566:	e077      	b.n	800b658 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	60fb      	str	r3, [r7, #12]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	085b      	lsrs	r3, r3, #1
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	4413      	add	r3, r2
 800b574:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	0a5b      	lsrs	r3, r3, #9
 800b57e:	4413      	add	r3, r2
 800b580:	4619      	mov	r1, r3
 800b582:	6938      	ldr	r0, [r7, #16]
 800b584:	f7ff ff14 	bl	800b3b0 <move_window>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d167      	bne.n	800b65e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	1c5a      	adds	r2, r3, #1
 800b592:	60fa      	str	r2, [r7, #12]
 800b594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b598:	693a      	ldr	r2, [r7, #16]
 800b59a:	4413      	add	r3, r2
 800b59c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b5a0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	0a5b      	lsrs	r3, r3, #9
 800b5aa:	4413      	add	r3, r2
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6938      	ldr	r0, [r7, #16]
 800b5b0:	f7ff fefe 	bl	800b3b0 <move_window>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d153      	bne.n	800b662 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5c0:	693a      	ldr	r2, [r7, #16]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b5c8:	021b      	lsls	r3, r3, #8
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d002      	beq.n	800b5e2 <get_fat+0xbc>
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	091b      	lsrs	r3, r3, #4
 800b5e0:	e002      	b.n	800b5e8 <get_fat+0xc2>
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5e8:	617b      	str	r3, [r7, #20]
			break;
 800b5ea:	e03f      	b.n	800b66c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	0a1b      	lsrs	r3, r3, #8
 800b5f4:	4413      	add	r3, r2
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	6938      	ldr	r0, [r7, #16]
 800b5fa:	f7ff fed9 	bl	800b3b0 <move_window>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d130      	bne.n	800b666 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	005b      	lsls	r3, r3, #1
 800b60e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b612:	4413      	add	r3, r2
 800b614:	4618      	mov	r0, r3
 800b616:	f7ff fc1b 	bl	800ae50 <ld_word>
 800b61a:	4603      	mov	r3, r0
 800b61c:	617b      	str	r3, [r7, #20]
			break;
 800b61e:	e025      	b.n	800b66c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	09db      	lsrs	r3, r3, #7
 800b628:	4413      	add	r3, r2
 800b62a:	4619      	mov	r1, r3
 800b62c:	6938      	ldr	r0, [r7, #16]
 800b62e:	f7ff febf 	bl	800b3b0 <move_window>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d118      	bne.n	800b66a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b646:	4413      	add	r3, r2
 800b648:	4618      	mov	r0, r3
 800b64a:	f7ff fc19 	bl	800ae80 <ld_dword>
 800b64e:	4603      	mov	r3, r0
 800b650:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b654:	617b      	str	r3, [r7, #20]
			break;
 800b656:	e009      	b.n	800b66c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b658:	2301      	movs	r3, #1
 800b65a:	617b      	str	r3, [r7, #20]
 800b65c:	e006      	b.n	800b66c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b65e:	bf00      	nop
 800b660:	e004      	b.n	800b66c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b662:	bf00      	nop
 800b664:	e002      	b.n	800b66c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b666:	bf00      	nop
 800b668:	e000      	b.n	800b66c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b66a:	bf00      	nop
		}
	}

	return val;
 800b66c:	697b      	ldr	r3, [r7, #20]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3718      	adds	r7, #24
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b676:	b590      	push	{r4, r7, lr}
 800b678:	b089      	sub	sp, #36	; 0x24
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	60f8      	str	r0, [r7, #12]
 800b67e:	60b9      	str	r1, [r7, #8]
 800b680:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b682:	2302      	movs	r3, #2
 800b684:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	f240 80d2 	bls.w	800b832 <put_fat+0x1bc>
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	429a      	cmp	r2, r3
 800b696:	f080 80cc 	bcs.w	800b832 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	f000 8096 	beq.w	800b7d0 <put_fat+0x15a>
 800b6a4:	2b03      	cmp	r3, #3
 800b6a6:	f300 80cd 	bgt.w	800b844 <put_fat+0x1ce>
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d002      	beq.n	800b6b4 <put_fat+0x3e>
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d06e      	beq.n	800b790 <put_fat+0x11a>
 800b6b2:	e0c7      	b.n	800b844 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	61bb      	str	r3, [r7, #24]
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	085b      	lsrs	r3, r3, #1
 800b6bc:	69ba      	ldr	r2, [r7, #24]
 800b6be:	4413      	add	r3, r2
 800b6c0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	0a5b      	lsrs	r3, r3, #9
 800b6ca:	4413      	add	r3, r2
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f7ff fe6e 	bl	800b3b0 <move_window>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b6d8:	7ffb      	ldrb	r3, [r7, #31]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f040 80ab 	bne.w	800b836 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	1c59      	adds	r1, r3, #1
 800b6ea:	61b9      	str	r1, [r7, #24]
 800b6ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6f0:	4413      	add	r3, r2
 800b6f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	f003 0301 	and.w	r3, r3, #1
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00d      	beq.n	800b71a <put_fat+0xa4>
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	b25b      	sxtb	r3, r3
 800b704:	f003 030f 	and.w	r3, r3, #15
 800b708:	b25a      	sxtb	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	011b      	lsls	r3, r3, #4
 800b710:	b25b      	sxtb	r3, r3
 800b712:	4313      	orrs	r3, r2
 800b714:	b25b      	sxtb	r3, r3
 800b716:	b2db      	uxtb	r3, r3
 800b718:	e001      	b.n	800b71e <put_fat+0xa8>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2201      	movs	r2, #1
 800b726:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	0a5b      	lsrs	r3, r3, #9
 800b730:	4413      	add	r3, r2
 800b732:	4619      	mov	r1, r3
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f7ff fe3b 	bl	800b3b0 <move_window>
 800b73a:	4603      	mov	r3, r0
 800b73c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b73e:	7ffb      	ldrb	r3, [r7, #31]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d17a      	bne.n	800b83a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b750:	4413      	add	r3, r2
 800b752:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	f003 0301 	and.w	r3, r3, #1
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d003      	beq.n	800b766 <put_fat+0xf0>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	091b      	lsrs	r3, r3, #4
 800b762:	b2db      	uxtb	r3, r3
 800b764:	e00e      	b.n	800b784 <put_fat+0x10e>
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	b25b      	sxtb	r3, r3
 800b76c:	f023 030f 	bic.w	r3, r3, #15
 800b770:	b25a      	sxtb	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	0a1b      	lsrs	r3, r3, #8
 800b776:	b25b      	sxtb	r3, r3
 800b778:	f003 030f 	and.w	r3, r3, #15
 800b77c:	b25b      	sxtb	r3, r3
 800b77e:	4313      	orrs	r3, r2
 800b780:	b25b      	sxtb	r3, r3
 800b782:	b2db      	uxtb	r3, r3
 800b784:	697a      	ldr	r2, [r7, #20]
 800b786:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2201      	movs	r2, #1
 800b78c:	70da      	strb	r2, [r3, #3]
			break;
 800b78e:	e059      	b.n	800b844 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	0a1b      	lsrs	r3, r3, #8
 800b798:	4413      	add	r3, r2
 800b79a:	4619      	mov	r1, r3
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f7ff fe07 	bl	800b3b0 <move_window>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b7a6:	7ffb      	ldrb	r3, [r7, #31]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d148      	bne.n	800b83e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	005b      	lsls	r3, r3, #1
 800b7b6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b7ba:	4413      	add	r3, r2
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	b292      	uxth	r2, r2
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7ff fb7f 	bl	800aec6 <st_word>
			fs->wflag = 1;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	70da      	strb	r2, [r3, #3]
			break;
 800b7ce:	e039      	b.n	800b844 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	09db      	lsrs	r3, r3, #7
 800b7d8:	4413      	add	r3, r2
 800b7da:	4619      	mov	r1, r3
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f7ff fde7 	bl	800b3b0 <move_window>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b7e6:	7ffb      	ldrb	r3, [r7, #31]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d12a      	bne.n	800b842 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b800:	4413      	add	r3, r2
 800b802:	4618      	mov	r0, r3
 800b804:	f7ff fb3c 	bl	800ae80 <ld_dword>
 800b808:	4603      	mov	r3, r0
 800b80a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b80e:	4323      	orrs	r3, r4
 800b810:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b820:	4413      	add	r3, r2
 800b822:	6879      	ldr	r1, [r7, #4]
 800b824:	4618      	mov	r0, r3
 800b826:	f7ff fb69 	bl	800aefc <st_dword>
			fs->wflag = 1;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2201      	movs	r2, #1
 800b82e:	70da      	strb	r2, [r3, #3]
			break;
 800b830:	e008      	b.n	800b844 <put_fat+0x1ce>
		}
	}
 800b832:	bf00      	nop
 800b834:	e006      	b.n	800b844 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b836:	bf00      	nop
 800b838:	e004      	b.n	800b844 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b83a:	bf00      	nop
 800b83c:	e002      	b.n	800b844 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b83e:	bf00      	nop
 800b840:	e000      	b.n	800b844 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b842:	bf00      	nop
	return res;
 800b844:	7ffb      	ldrb	r3, [r7, #31]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3724      	adds	r7, #36	; 0x24
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd90      	pop	{r4, r7, pc}

0800b84e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b088      	sub	sp, #32
 800b852:	af00      	add	r7, sp, #0
 800b854:	60f8      	str	r0, [r7, #12]
 800b856:	60b9      	str	r1, [r7, #8]
 800b858:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	2b01      	cmp	r3, #1
 800b868:	d904      	bls.n	800b874 <remove_chain+0x26>
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	699b      	ldr	r3, [r3, #24]
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	429a      	cmp	r2, r3
 800b872:	d301      	bcc.n	800b878 <remove_chain+0x2a>
 800b874:	2302      	movs	r3, #2
 800b876:	e04b      	b.n	800b910 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00c      	beq.n	800b898 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b87e:	f04f 32ff 	mov.w	r2, #4294967295
 800b882:	6879      	ldr	r1, [r7, #4]
 800b884:	69b8      	ldr	r0, [r7, #24]
 800b886:	f7ff fef6 	bl	800b676 <put_fat>
 800b88a:	4603      	mov	r3, r0
 800b88c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b88e:	7ffb      	ldrb	r3, [r7, #31]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d001      	beq.n	800b898 <remove_chain+0x4a>
 800b894:	7ffb      	ldrb	r3, [r7, #31]
 800b896:	e03b      	b.n	800b910 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b898:	68b9      	ldr	r1, [r7, #8]
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f7ff fe43 	bl	800b526 <get_fat>
 800b8a0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d031      	beq.n	800b90c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d101      	bne.n	800b8b2 <remove_chain+0x64>
 800b8ae:	2302      	movs	r3, #2
 800b8b0:	e02e      	b.n	800b910 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b8:	d101      	bne.n	800b8be <remove_chain+0x70>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e028      	b.n	800b910 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b8be:	2200      	movs	r2, #0
 800b8c0:	68b9      	ldr	r1, [r7, #8]
 800b8c2:	69b8      	ldr	r0, [r7, #24]
 800b8c4:	f7ff fed7 	bl	800b676 <put_fat>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b8cc:	7ffb      	ldrb	r3, [r7, #31]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d001      	beq.n	800b8d6 <remove_chain+0x88>
 800b8d2:	7ffb      	ldrb	r3, [r7, #31]
 800b8d4:	e01c      	b.n	800b910 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b8d6:	69bb      	ldr	r3, [r7, #24]
 800b8d8:	695a      	ldr	r2, [r3, #20]
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	699b      	ldr	r3, [r3, #24]
 800b8de:	3b02      	subs	r3, #2
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d20b      	bcs.n	800b8fc <remove_chain+0xae>
			fs->free_clst++;
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	695b      	ldr	r3, [r3, #20]
 800b8e8:	1c5a      	adds	r2, r3, #1
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	791b      	ldrb	r3, [r3, #4]
 800b8f2:	f043 0301 	orr.w	r3, r3, #1
 800b8f6:	b2da      	uxtb	r2, r3
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	68ba      	ldr	r2, [r7, #8]
 800b906:	429a      	cmp	r2, r3
 800b908:	d3c6      	bcc.n	800b898 <remove_chain+0x4a>
 800b90a:	e000      	b.n	800b90e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b90c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3720      	adds	r7, #32
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b088      	sub	sp, #32
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d10d      	bne.n	800b94a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d004      	beq.n	800b944 <create_chain+0x2c>
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	69ba      	ldr	r2, [r7, #24]
 800b940:	429a      	cmp	r2, r3
 800b942:	d31b      	bcc.n	800b97c <create_chain+0x64>
 800b944:	2301      	movs	r3, #1
 800b946:	61bb      	str	r3, [r7, #24]
 800b948:	e018      	b.n	800b97c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b94a:	6839      	ldr	r1, [r7, #0]
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f7ff fdea 	bl	800b526 <get_fat>
 800b952:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2b01      	cmp	r3, #1
 800b958:	d801      	bhi.n	800b95e <create_chain+0x46>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e070      	b.n	800ba40 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b964:	d101      	bne.n	800b96a <create_chain+0x52>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	e06a      	b.n	800ba40 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	699b      	ldr	r3, [r3, #24]
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	429a      	cmp	r2, r3
 800b972:	d201      	bcs.n	800b978 <create_chain+0x60>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	e063      	b.n	800ba40 <create_chain+0x128>
		scl = clst;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	3301      	adds	r3, #1
 800b984:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	69fa      	ldr	r2, [r7, #28]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d307      	bcc.n	800b9a0 <create_chain+0x88>
				ncl = 2;
 800b990:	2302      	movs	r3, #2
 800b992:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b994:	69fa      	ldr	r2, [r7, #28]
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d901      	bls.n	800b9a0 <create_chain+0x88>
 800b99c:	2300      	movs	r3, #0
 800b99e:	e04f      	b.n	800ba40 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b9a0:	69f9      	ldr	r1, [r7, #28]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f7ff fdbf 	bl	800b526 <get_fat>
 800b9a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00e      	beq.n	800b9ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d003      	beq.n	800b9be <create_chain+0xa6>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9bc:	d101      	bne.n	800b9c2 <create_chain+0xaa>
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	e03e      	b.n	800ba40 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b9c2:	69fa      	ldr	r2, [r7, #28]
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d1da      	bne.n	800b980 <create_chain+0x68>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	e038      	b.n	800ba40 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b9ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d4:	69f9      	ldr	r1, [r7, #28]
 800b9d6:	6938      	ldr	r0, [r7, #16]
 800b9d8:	f7ff fe4d 	bl	800b676 <put_fat>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b9e0:	7dfb      	ldrb	r3, [r7, #23]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d109      	bne.n	800b9fa <create_chain+0xe2>
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d006      	beq.n	800b9fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b9ec:	69fa      	ldr	r2, [r7, #28]
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6938      	ldr	r0, [r7, #16]
 800b9f2:	f7ff fe40 	bl	800b676 <put_fat>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d116      	bne.n	800ba2e <create_chain+0x116>
		fs->last_clst = ncl;
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	69fa      	ldr	r2, [r7, #28]
 800ba04:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	695a      	ldr	r2, [r3, #20]
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	3b02      	subs	r3, #2
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d804      	bhi.n	800ba1e <create_chain+0x106>
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	695b      	ldr	r3, [r3, #20]
 800ba18:	1e5a      	subs	r2, r3, #1
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	791b      	ldrb	r3, [r3, #4]
 800ba22:	f043 0301 	orr.w	r3, r3, #1
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	711a      	strb	r2, [r3, #4]
 800ba2c:	e007      	b.n	800ba3e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ba2e:	7dfb      	ldrb	r3, [r7, #23]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d102      	bne.n	800ba3a <create_chain+0x122>
 800ba34:	f04f 33ff 	mov.w	r3, #4294967295
 800ba38:	e000      	b.n	800ba3c <create_chain+0x124>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ba3e:	69fb      	ldr	r3, [r7, #28]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3720      	adds	r7, #32
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b087      	sub	sp, #28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	0a5b      	lsrs	r3, r3, #9
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	8952      	ldrh	r2, [r2, #10]
 800ba68:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba6c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	1d1a      	adds	r2, r3, #4
 800ba72:	613a      	str	r2, [r7, #16]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d101      	bne.n	800ba82 <clmt_clust+0x3a>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	e010      	b.n	800baa4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ba82:	697a      	ldr	r2, [r7, #20]
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d307      	bcc.n	800ba9a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ba8a:	697a      	ldr	r2, [r7, #20]
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	617b      	str	r3, [r7, #20]
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	3304      	adds	r3, #4
 800ba96:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ba98:	e7e9      	b.n	800ba6e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ba9a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	4413      	add	r3, r2
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	371c      	adds	r7, #28
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bac6:	d204      	bcs.n	800bad2 <dir_sdi+0x22>
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	f003 031f 	and.w	r3, r3, #31
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d001      	beq.n	800bad6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bad2:	2302      	movs	r3, #2
 800bad4:	e063      	b.n	800bb9e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	683a      	ldr	r2, [r7, #0]
 800bada:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d106      	bne.n	800baf6 <dir_sdi+0x46>
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	2b02      	cmp	r3, #2
 800baee:	d902      	bls.n	800baf6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10c      	bne.n	800bb16 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	095b      	lsrs	r3, r3, #5
 800bb00:	693a      	ldr	r2, [r7, #16]
 800bb02:	8912      	ldrh	r2, [r2, #8]
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d301      	bcc.n	800bb0c <dir_sdi+0x5c>
 800bb08:	2302      	movs	r3, #2
 800bb0a:	e048      	b.n	800bb9e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	61da      	str	r2, [r3, #28]
 800bb14:	e029      	b.n	800bb6a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	895b      	ldrh	r3, [r3, #10]
 800bb1a:	025b      	lsls	r3, r3, #9
 800bb1c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bb1e:	e019      	b.n	800bb54 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6979      	ldr	r1, [r7, #20]
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7ff fcfe 	bl	800b526 <get_fat>
 800bb2a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb32:	d101      	bne.n	800bb38 <dir_sdi+0x88>
 800bb34:	2301      	movs	r3, #1
 800bb36:	e032      	b.n	800bb9e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d904      	bls.n	800bb48 <dir_sdi+0x98>
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	699b      	ldr	r3, [r3, #24]
 800bb42:	697a      	ldr	r2, [r7, #20]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d301      	bcc.n	800bb4c <dir_sdi+0x9c>
 800bb48:	2302      	movs	r3, #2
 800bb4a:	e028      	b.n	800bb9e <dir_sdi+0xee>
			ofs -= csz;
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bb54:	683a      	ldr	r2, [r7, #0]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d2e1      	bcs.n	800bb20 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800bb5c:	6979      	ldr	r1, [r7, #20]
 800bb5e:	6938      	ldr	r0, [r7, #16]
 800bb60:	f7ff fcc2 	bl	800b4e8 <clust2sect>
 800bb64:	4602      	mov	r2, r0
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	697a      	ldr	r2, [r7, #20]
 800bb6e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	69db      	ldr	r3, [r3, #28]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d101      	bne.n	800bb7c <dir_sdi+0xcc>
 800bb78:	2302      	movs	r3, #2
 800bb7a:	e010      	b.n	800bb9e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	69da      	ldr	r2, [r3, #28]
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	0a5b      	lsrs	r3, r3, #9
 800bb84:	441a      	add	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb96:	441a      	add	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3718      	adds	r7, #24
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b086      	sub	sp, #24
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	695b      	ldr	r3, [r3, #20]
 800bbba:	3320      	adds	r3, #32
 800bbbc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	69db      	ldr	r3, [r3, #28]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d003      	beq.n	800bbce <dir_next+0x28>
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bbcc:	d301      	bcc.n	800bbd2 <dir_next+0x2c>
 800bbce:	2304      	movs	r3, #4
 800bbd0:	e0aa      	b.n	800bd28 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f040 8098 	bne.w	800bd0e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	69db      	ldr	r3, [r3, #28]
 800bbe2:	1c5a      	adds	r2, r3, #1
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	699b      	ldr	r3, [r3, #24]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10b      	bne.n	800bc08 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	095b      	lsrs	r3, r3, #5
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	8912      	ldrh	r2, [r2, #8]
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	f0c0 8088 	bcc.w	800bd0e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	61da      	str	r2, [r3, #28]
 800bc04:	2304      	movs	r3, #4
 800bc06:	e08f      	b.n	800bd28 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	0a5b      	lsrs	r3, r3, #9
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	8952      	ldrh	r2, [r2, #10]
 800bc10:	3a01      	subs	r2, #1
 800bc12:	4013      	ands	r3, r2
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d17a      	bne.n	800bd0e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	699b      	ldr	r3, [r3, #24]
 800bc1e:	4619      	mov	r1, r3
 800bc20:	4610      	mov	r0, r2
 800bc22:	f7ff fc80 	bl	800b526 <get_fat>
 800bc26:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d801      	bhi.n	800bc32 <dir_next+0x8c>
 800bc2e:	2302      	movs	r3, #2
 800bc30:	e07a      	b.n	800bd28 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc38:	d101      	bne.n	800bc3e <dir_next+0x98>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e074      	b.n	800bd28 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	697a      	ldr	r2, [r7, #20]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d358      	bcc.n	800bcfa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d104      	bne.n	800bc58 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	61da      	str	r2, [r3, #28]
 800bc54:	2304      	movs	r3, #4
 800bc56:	e067      	b.n	800bd28 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	699b      	ldr	r3, [r3, #24]
 800bc5e:	4619      	mov	r1, r3
 800bc60:	4610      	mov	r0, r2
 800bc62:	f7ff fe59 	bl	800b918 <create_chain>
 800bc66:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <dir_next+0xcc>
 800bc6e:	2307      	movs	r3, #7
 800bc70:	e05a      	b.n	800bd28 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d101      	bne.n	800bc7c <dir_next+0xd6>
 800bc78:	2302      	movs	r3, #2
 800bc7a:	e055      	b.n	800bd28 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc82:	d101      	bne.n	800bc88 <dir_next+0xe2>
 800bc84:	2301      	movs	r3, #1
 800bc86:	e04f      	b.n	800bd28 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f7ff fb4d 	bl	800b328 <sync_window>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d001      	beq.n	800bc98 <dir_next+0xf2>
 800bc94:	2301      	movs	r3, #1
 800bc96:	e047      	b.n	800bd28 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	3334      	adds	r3, #52	; 0x34
 800bc9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bca0:	2100      	movs	r1, #0
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7ff f977 	bl	800af96 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bca8:	2300      	movs	r3, #0
 800bcaa:	613b      	str	r3, [r7, #16]
 800bcac:	6979      	ldr	r1, [r7, #20]
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f7ff fc1a 	bl	800b4e8 <clust2sect>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	631a      	str	r2, [r3, #48]	; 0x30
 800bcba:	e012      	b.n	800bce2 <dir_next+0x13c>
						fs->wflag = 1;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bcc2:	68f8      	ldr	r0, [r7, #12]
 800bcc4:	f7ff fb30 	bl	800b328 <sync_window>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d001      	beq.n	800bcd2 <dir_next+0x12c>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e02a      	b.n	800bd28 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	613b      	str	r3, [r7, #16]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcdc:	1c5a      	adds	r2, r3, #1
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	631a      	str	r2, [r3, #48]	; 0x30
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	895b      	ldrh	r3, [r3, #10]
 800bce6:	461a      	mov	r2, r3
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d3e6      	bcc.n	800bcbc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	1ad2      	subs	r2, r2, r3
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bd00:	6979      	ldr	r1, [r7, #20]
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f7ff fbf0 	bl	800b4e8 <clust2sect>
 800bd08:	4602      	mov	r2, r0
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd20:	441a      	add	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bd40:	2100      	movs	r1, #0
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f7ff feb4 	bl	800bab0 <dir_sdi>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d12b      	bne.n	800bdaa <dir_alloc+0x7a>
		n = 0;
 800bd52:	2300      	movs	r3, #0
 800bd54:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	69db      	ldr	r3, [r3, #28]
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f7ff fb27 	bl	800b3b0 <move_window>
 800bd62:	4603      	mov	r3, r0
 800bd64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bd66:	7dfb      	ldrb	r3, [r7, #23]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d11d      	bne.n	800bda8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	2be5      	cmp	r3, #229	; 0xe5
 800bd74:	d004      	beq.n	800bd80 <dir_alloc+0x50>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a1b      	ldr	r3, [r3, #32]
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d107      	bne.n	800bd90 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	3301      	adds	r3, #1
 800bd84:	613b      	str	r3, [r7, #16]
 800bd86:	693a      	ldr	r2, [r7, #16]
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d102      	bne.n	800bd94 <dir_alloc+0x64>
 800bd8e:	e00c      	b.n	800bdaa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bd90:	2300      	movs	r3, #0
 800bd92:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bd94:	2101      	movs	r1, #1
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f7ff ff05 	bl	800bba6 <dir_next>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bda0:	7dfb      	ldrb	r3, [r7, #23]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d0d7      	beq.n	800bd56 <dir_alloc+0x26>
 800bda6:	e000      	b.n	800bdaa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bda8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bdaa:	7dfb      	ldrb	r3, [r7, #23]
 800bdac:	2b04      	cmp	r3, #4
 800bdae:	d101      	bne.n	800bdb4 <dir_alloc+0x84>
 800bdb0:	2307      	movs	r3, #7
 800bdb2:	75fb      	strb	r3, [r7, #23]
	return res;
 800bdb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3718      	adds	r7, #24
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bdbe:	b580      	push	{r7, lr}
 800bdc0:	b084      	sub	sp, #16
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
 800bdc6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	331a      	adds	r3, #26
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7ff f83f 	bl	800ae50 <ld_word>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	d109      	bne.n	800bdf2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	3314      	adds	r3, #20
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7ff f834 	bl	800ae50 <ld_word>
 800bde8:	4603      	mov	r3, r0
 800bdea:	041b      	lsls	r3, r3, #16
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	331a      	adds	r3, #26
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	b292      	uxth	r2, r2
 800be10:	4611      	mov	r1, r2
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff f857 	bl	800aec6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	2b03      	cmp	r3, #3
 800be1e:	d109      	bne.n	800be34 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	f103 0214 	add.w	r2, r3, #20
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	0c1b      	lsrs	r3, r3, #16
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	4619      	mov	r1, r3
 800be2e:	4610      	mov	r0, r2
 800be30:	f7ff f849 	bl	800aec6 <st_word>
	}
}
 800be34:	bf00      	nop
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800be3c:	b590      	push	{r4, r7, lr}
 800be3e:	b087      	sub	sp, #28
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	331a      	adds	r3, #26
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7ff f800 	bl	800ae50 <ld_word>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <cmp_lfn+0x1e>
 800be56:	2300      	movs	r3, #0
 800be58:	e059      	b.n	800bf0e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be62:	1e5a      	subs	r2, r3, #1
 800be64:	4613      	mov	r3, r2
 800be66:	005b      	lsls	r3, r3, #1
 800be68:	4413      	add	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4413      	add	r3, r2
 800be6e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800be70:	2301      	movs	r3, #1
 800be72:	81fb      	strh	r3, [r7, #14]
 800be74:	2300      	movs	r3, #0
 800be76:	613b      	str	r3, [r7, #16]
 800be78:	e033      	b.n	800bee2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800be7a:	4a27      	ldr	r2, [pc, #156]	; (800bf18 <cmp_lfn+0xdc>)
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	4413      	add	r3, r2
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	461a      	mov	r2, r3
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	4413      	add	r3, r2
 800be88:	4618      	mov	r0, r3
 800be8a:	f7fe ffe1 	bl	800ae50 <ld_word>
 800be8e:	4603      	mov	r3, r0
 800be90:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800be92:	89fb      	ldrh	r3, [r7, #14]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d01a      	beq.n	800bece <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	2bfe      	cmp	r3, #254	; 0xfe
 800be9c:	d812      	bhi.n	800bec4 <cmp_lfn+0x88>
 800be9e:	89bb      	ldrh	r3, [r7, #12]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f002 f867 	bl	800df74 <ff_wtoupper>
 800bea6:	4603      	mov	r3, r0
 800bea8:	461c      	mov	r4, r3
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	1c5a      	adds	r2, r3, #1
 800beae:	617a      	str	r2, [r7, #20]
 800beb0:	005b      	lsls	r3, r3, #1
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	4413      	add	r3, r2
 800beb6:	881b      	ldrh	r3, [r3, #0]
 800beb8:	4618      	mov	r0, r3
 800beba:	f002 f85b 	bl	800df74 <ff_wtoupper>
 800bebe:	4603      	mov	r3, r0
 800bec0:	429c      	cmp	r4, r3
 800bec2:	d001      	beq.n	800bec8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bec4:	2300      	movs	r3, #0
 800bec6:	e022      	b.n	800bf0e <cmp_lfn+0xd2>
			}
			wc = uc;
 800bec8:	89bb      	ldrh	r3, [r7, #12]
 800beca:	81fb      	strh	r3, [r7, #14]
 800becc:	e006      	b.n	800bedc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bece:	89bb      	ldrh	r3, [r7, #12]
 800bed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d001      	beq.n	800bedc <cmp_lfn+0xa0>
 800bed8:	2300      	movs	r3, #0
 800beda:	e018      	b.n	800bf0e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	3301      	adds	r3, #1
 800bee0:	613b      	str	r3, [r7, #16]
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	2b0c      	cmp	r3, #12
 800bee6:	d9c8      	bls.n	800be7a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00b      	beq.n	800bf0c <cmp_lfn+0xd0>
 800bef4:	89fb      	ldrh	r3, [r7, #14]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d008      	beq.n	800bf0c <cmp_lfn+0xd0>
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	005b      	lsls	r3, r3, #1
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	4413      	add	r3, r2
 800bf02:	881b      	ldrh	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d001      	beq.n	800bf0c <cmp_lfn+0xd0>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	e000      	b.n	800bf0e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bf0c:	2301      	movs	r3, #1
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	371c      	adds	r7, #28
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd90      	pop	{r4, r7, pc}
 800bf16:	bf00      	nop
 800bf18:	08012eac 	.word	0x08012eac

0800bf1c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b088      	sub	sp, #32
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	4611      	mov	r1, r2
 800bf28:	461a      	mov	r2, r3
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	71fb      	strb	r3, [r7, #7]
 800bf2e:	4613      	mov	r3, r2
 800bf30:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	330d      	adds	r3, #13
 800bf36:	79ba      	ldrb	r2, [r7, #6]
 800bf38:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	330b      	adds	r3, #11
 800bf3e:	220f      	movs	r2, #15
 800bf40:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	330c      	adds	r3, #12
 800bf46:	2200      	movs	r2, #0
 800bf48:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	331a      	adds	r3, #26
 800bf4e:	2100      	movs	r1, #0
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fe ffb8 	bl	800aec6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bf56:	79fb      	ldrb	r3, [r7, #7]
 800bf58:	1e5a      	subs	r2, r3, #1
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	005b      	lsls	r3, r3, #1
 800bf5e:	4413      	add	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	4413      	add	r3, r2
 800bf64:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bf66:	2300      	movs	r3, #0
 800bf68:	82fb      	strh	r3, [r7, #22]
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bf6e:	8afb      	ldrh	r3, [r7, #22]
 800bf70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d007      	beq.n	800bf88 <put_lfn+0x6c>
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	1c5a      	adds	r2, r3, #1
 800bf7c:	61fa      	str	r2, [r7, #28]
 800bf7e:	005b      	lsls	r3, r3, #1
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	4413      	add	r3, r2
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bf88:	4a17      	ldr	r2, [pc, #92]	; (800bfe8 <put_lfn+0xcc>)
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	461a      	mov	r2, r3
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	4413      	add	r3, r2
 800bf96:	8afa      	ldrh	r2, [r7, #22]
 800bf98:	4611      	mov	r1, r2
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7fe ff93 	bl	800aec6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bfa0:	8afb      	ldrh	r3, [r7, #22]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d102      	bne.n	800bfac <put_lfn+0x90>
 800bfa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfaa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	61bb      	str	r3, [r7, #24]
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	2b0c      	cmp	r3, #12
 800bfb6:	d9da      	bls.n	800bf6e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bfb8:	8afb      	ldrh	r3, [r7, #22]
 800bfba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d006      	beq.n	800bfd0 <put_lfn+0xb4>
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	005b      	lsls	r3, r3, #1
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	4413      	add	r3, r2
 800bfca:	881b      	ldrh	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d103      	bne.n	800bfd8 <put_lfn+0xbc>
 800bfd0:	79fb      	ldrb	r3, [r7, #7]
 800bfd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfd6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	79fa      	ldrb	r2, [r7, #7]
 800bfdc:	701a      	strb	r2, [r3, #0]
}
 800bfde:	bf00      	nop
 800bfe0:	3720      	adds	r7, #32
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	08012eac 	.word	0x08012eac

0800bfec <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b08c      	sub	sp, #48	; 0x30
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
 800bff8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bffa:	220b      	movs	r2, #11
 800bffc:	68b9      	ldr	r1, [r7, #8]
 800bffe:	68f8      	ldr	r0, [r7, #12]
 800c000:	f7fe ffa8 	bl	800af54 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	2b05      	cmp	r3, #5
 800c008:	d92b      	bls.n	800c062 <gen_numname+0x76>
		sr = seq;
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c00e:	e022      	b.n	800c056 <gen_numname+0x6a>
			wc = *lfn++;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	1c9a      	adds	r2, r3, #2
 800c014:	607a      	str	r2, [r7, #4]
 800c016:	881b      	ldrh	r3, [r3, #0]
 800c018:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c01a:	2300      	movs	r3, #0
 800c01c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c01e:	e017      	b.n	800c050 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	005a      	lsls	r2, r3, #1
 800c024:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c026:	f003 0301 	and.w	r3, r3, #1
 800c02a:	4413      	add	r3, r2
 800c02c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c02e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c030:	085b      	lsrs	r3, r3, #1
 800c032:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d005      	beq.n	800c04a <gen_numname+0x5e>
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c044:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c048:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04c:	3301      	adds	r3, #1
 800c04e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c052:	2b0f      	cmp	r3, #15
 800c054:	d9e4      	bls.n	800c020 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	881b      	ldrh	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1d8      	bne.n	800c010 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c062:	2307      	movs	r3, #7
 800c064:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	f003 030f 	and.w	r3, r3, #15
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	3330      	adds	r3, #48	; 0x30
 800c072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c07a:	2b39      	cmp	r3, #57	; 0x39
 800c07c:	d904      	bls.n	800c088 <gen_numname+0x9c>
 800c07e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c082:	3307      	adds	r3, #7
 800c084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08a:	1e5a      	subs	r2, r3, #1
 800c08c:	62ba      	str	r2, [r7, #40]	; 0x28
 800c08e:	3330      	adds	r3, #48	; 0x30
 800c090:	443b      	add	r3, r7
 800c092:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c096:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	091b      	lsrs	r3, r3, #4
 800c09e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1df      	bne.n	800c066 <gen_numname+0x7a>
	ns[i] = '~';
 800c0a6:	f107 0214 	add.w	r2, r7, #20
 800c0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ac:	4413      	add	r3, r2
 800c0ae:	227e      	movs	r2, #126	; 0x7e
 800c0b0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	627b      	str	r3, [r7, #36]	; 0x24
 800c0b6:	e002      	b.n	800c0be <gen_numname+0xd2>
 800c0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	627b      	str	r3, [r7, #36]	; 0x24
 800c0be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d205      	bcs.n	800c0d2 <gen_numname+0xe6>
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ca:	4413      	add	r3, r2
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	2b20      	cmp	r3, #32
 800c0d0:	d1f2      	bne.n	800c0b8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d4:	2b07      	cmp	r3, #7
 800c0d6:	d807      	bhi.n	800c0e8 <gen_numname+0xfc>
 800c0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0da:	1c5a      	adds	r2, r3, #1
 800c0dc:	62ba      	str	r2, [r7, #40]	; 0x28
 800c0de:	3330      	adds	r3, #48	; 0x30
 800c0e0:	443b      	add	r3, r7
 800c0e2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c0e6:	e000      	b.n	800c0ea <gen_numname+0xfe>
 800c0e8:	2120      	movs	r1, #32
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ec:	1c5a      	adds	r2, r3, #1
 800c0ee:	627a      	str	r2, [r7, #36]	; 0x24
 800c0f0:	68fa      	ldr	r2, [r7, #12]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	460a      	mov	r2, r1
 800c0f6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fa:	2b07      	cmp	r3, #7
 800c0fc:	d9e9      	bls.n	800c0d2 <gen_numname+0xe6>
}
 800c0fe:	bf00      	nop
 800c100:	bf00      	nop
 800c102:	3730      	adds	r7, #48	; 0x30
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c110:	2300      	movs	r3, #0
 800c112:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c114:	230b      	movs	r3, #11
 800c116:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c118:	7bfb      	ldrb	r3, [r7, #15]
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	0852      	lsrs	r2, r2, #1
 800c11e:	01db      	lsls	r3, r3, #7
 800c120:	4313      	orrs	r3, r2
 800c122:	b2da      	uxtb	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	1c59      	adds	r1, r3, #1
 800c128:	6079      	str	r1, [r7, #4]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	4413      	add	r3, r2
 800c12e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	3b01      	subs	r3, #1
 800c134:	60bb      	str	r3, [r7, #8]
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d1ed      	bne.n	800c118 <sum_sfn+0x10>
	return sum;
 800c13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3714      	adds	r7, #20
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr

0800c14a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b086      	sub	sp, #24
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c158:	2100      	movs	r1, #0
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f7ff fca8 	bl	800bab0 <dir_sdi>
 800c160:	4603      	mov	r3, r0
 800c162:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c164:	7dfb      	ldrb	r3, [r7, #23]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d001      	beq.n	800c16e <dir_find+0x24>
 800c16a:	7dfb      	ldrb	r3, [r7, #23]
 800c16c:	e0a9      	b.n	800c2c2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c16e:	23ff      	movs	r3, #255	; 0xff
 800c170:	753b      	strb	r3, [r7, #20]
 800c172:	7d3b      	ldrb	r3, [r7, #20]
 800c174:	757b      	strb	r3, [r7, #21]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f04f 32ff 	mov.w	r2, #4294967295
 800c17c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	69db      	ldr	r3, [r3, #28]
 800c182:	4619      	mov	r1, r3
 800c184:	6938      	ldr	r0, [r7, #16]
 800c186:	f7ff f913 	bl	800b3b0 <move_window>
 800c18a:	4603      	mov	r3, r0
 800c18c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c18e:	7dfb      	ldrb	r3, [r7, #23]
 800c190:	2b00      	cmp	r3, #0
 800c192:	f040 8090 	bne.w	800c2b6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c19e:	7dbb      	ldrb	r3, [r7, #22]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d102      	bne.n	800c1aa <dir_find+0x60>
 800c1a4:	2304      	movs	r3, #4
 800c1a6:	75fb      	strb	r3, [r7, #23]
 800c1a8:	e08a      	b.n	800c2c0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6a1b      	ldr	r3, [r3, #32]
 800c1ae:	330b      	adds	r3, #11
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1b6:	73fb      	strb	r3, [r7, #15]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	7bfa      	ldrb	r2, [r7, #15]
 800c1bc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c1be:	7dbb      	ldrb	r3, [r7, #22]
 800c1c0:	2be5      	cmp	r3, #229	; 0xe5
 800c1c2:	d007      	beq.n	800c1d4 <dir_find+0x8a>
 800c1c4:	7bfb      	ldrb	r3, [r7, #15]
 800c1c6:	f003 0308 	and.w	r3, r3, #8
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d009      	beq.n	800c1e2 <dir_find+0x98>
 800c1ce:	7bfb      	ldrb	r3, [r7, #15]
 800c1d0:	2b0f      	cmp	r3, #15
 800c1d2:	d006      	beq.n	800c1e2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c1d4:	23ff      	movs	r3, #255	; 0xff
 800c1d6:	757b      	strb	r3, [r7, #21]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f04f 32ff 	mov.w	r2, #4294967295
 800c1de:	631a      	str	r2, [r3, #48]	; 0x30
 800c1e0:	e05e      	b.n	800c2a0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c1e2:	7bfb      	ldrb	r3, [r7, #15]
 800c1e4:	2b0f      	cmp	r3, #15
 800c1e6:	d136      	bne.n	800c256 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d154      	bne.n	800c2a0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c1f6:	7dbb      	ldrb	r3, [r7, #22]
 800c1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00d      	beq.n	800c21c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6a1b      	ldr	r3, [r3, #32]
 800c204:	7b5b      	ldrb	r3, [r3, #13]
 800c206:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c208:	7dbb      	ldrb	r3, [r7, #22]
 800c20a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c20e:	75bb      	strb	r3, [r7, #22]
 800c210:	7dbb      	ldrb	r3, [r7, #22]
 800c212:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	695a      	ldr	r2, [r3, #20]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c21c:	7dba      	ldrb	r2, [r7, #22]
 800c21e:	7d7b      	ldrb	r3, [r7, #21]
 800c220:	429a      	cmp	r2, r3
 800c222:	d115      	bne.n	800c250 <dir_find+0x106>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6a1b      	ldr	r3, [r3, #32]
 800c228:	330d      	adds	r3, #13
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	7d3a      	ldrb	r2, [r7, #20]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d10e      	bne.n	800c250 <dir_find+0x106>
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	68da      	ldr	r2, [r3, #12]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a1b      	ldr	r3, [r3, #32]
 800c23a:	4619      	mov	r1, r3
 800c23c:	4610      	mov	r0, r2
 800c23e:	f7ff fdfd 	bl	800be3c <cmp_lfn>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d003      	beq.n	800c250 <dir_find+0x106>
 800c248:	7d7b      	ldrb	r3, [r7, #21]
 800c24a:	3b01      	subs	r3, #1
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	e000      	b.n	800c252 <dir_find+0x108>
 800c250:	23ff      	movs	r3, #255	; 0xff
 800c252:	757b      	strb	r3, [r7, #21]
 800c254:	e024      	b.n	800c2a0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c256:	7d7b      	ldrb	r3, [r7, #21]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d109      	bne.n	800c270 <dir_find+0x126>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6a1b      	ldr	r3, [r3, #32]
 800c260:	4618      	mov	r0, r3
 800c262:	f7ff ff51 	bl	800c108 <sum_sfn>
 800c266:	4603      	mov	r3, r0
 800c268:	461a      	mov	r2, r3
 800c26a:	7d3b      	ldrb	r3, [r7, #20]
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d024      	beq.n	800c2ba <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c276:	f003 0301 	and.w	r3, r3, #1
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d10a      	bne.n	800c294 <dir_find+0x14a>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a18      	ldr	r0, [r3, #32]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	3324      	adds	r3, #36	; 0x24
 800c286:	220b      	movs	r2, #11
 800c288:	4619      	mov	r1, r3
 800c28a:	f7fe fe9f 	bl	800afcc <mem_cmp>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d014      	beq.n	800c2be <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c294:	23ff      	movs	r3, #255	; 0xff
 800c296:	757b      	strb	r3, [r7, #21]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f04f 32ff 	mov.w	r2, #4294967295
 800c29e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7ff fc7f 	bl	800bba6 <dir_next>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c2ac:	7dfb      	ldrb	r3, [r7, #23]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f43f af65 	beq.w	800c17e <dir_find+0x34>
 800c2b4:	e004      	b.n	800c2c0 <dir_find+0x176>
		if (res != FR_OK) break;
 800c2b6:	bf00      	nop
 800c2b8:	e002      	b.n	800c2c0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c2ba:	bf00      	nop
 800c2bc:	e000      	b.n	800c2c0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c2be:	bf00      	nop

	return res;
 800c2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3718      	adds	r7, #24
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
	...

0800c2cc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b08c      	sub	sp, #48	; 0x30
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c2e0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d001      	beq.n	800c2ec <dir_register+0x20>
 800c2e8:	2306      	movs	r3, #6
 800c2ea:	e0e0      	b.n	800c4ae <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	627b      	str	r3, [r7, #36]	; 0x24
 800c2f0:	e002      	b.n	800c2f8 <dir_register+0x2c>
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	627b      	str	r3, [r7, #36]	; 0x24
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	68da      	ldr	r2, [r3, #12]
 800c2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fe:	005b      	lsls	r3, r3, #1
 800c300:	4413      	add	r3, r2
 800c302:	881b      	ldrh	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1f4      	bne.n	800c2f2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c30e:	f107 030c 	add.w	r3, r7, #12
 800c312:	220c      	movs	r2, #12
 800c314:	4618      	mov	r0, r3
 800c316:	f7fe fe1d 	bl	800af54 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c31a:	7dfb      	ldrb	r3, [r7, #23]
 800c31c:	f003 0301 	and.w	r3, r3, #1
 800c320:	2b00      	cmp	r3, #0
 800c322:	d032      	beq.n	800c38a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2240      	movs	r2, #64	; 0x40
 800c328:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c32c:	2301      	movs	r3, #1
 800c32e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c330:	e016      	b.n	800c360 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	68da      	ldr	r2, [r3, #12]
 800c33c:	f107 010c 	add.w	r1, r7, #12
 800c340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c342:	f7ff fe53 	bl	800bfec <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f7ff feff 	bl	800c14a <dir_find>
 800c34c:	4603      	mov	r3, r0
 800c34e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c356:	2b00      	cmp	r3, #0
 800c358:	d106      	bne.n	800c368 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35c:	3301      	adds	r3, #1
 800c35e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c362:	2b63      	cmp	r3, #99	; 0x63
 800c364:	d9e5      	bls.n	800c332 <dir_register+0x66>
 800c366:	e000      	b.n	800c36a <dir_register+0x9e>
			if (res != FR_OK) break;
 800c368:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36c:	2b64      	cmp	r3, #100	; 0x64
 800c36e:	d101      	bne.n	800c374 <dir_register+0xa8>
 800c370:	2307      	movs	r3, #7
 800c372:	e09c      	b.n	800c4ae <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c374:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c378:	2b04      	cmp	r3, #4
 800c37a:	d002      	beq.n	800c382 <dir_register+0xb6>
 800c37c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c380:	e095      	b.n	800c4ae <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c382:	7dfa      	ldrb	r2, [r7, #23]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c38a:	7dfb      	ldrb	r3, [r7, #23]
 800c38c:	f003 0302 	and.w	r3, r3, #2
 800c390:	2b00      	cmp	r3, #0
 800c392:	d007      	beq.n	800c3a4 <dir_register+0xd8>
 800c394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c396:	330c      	adds	r3, #12
 800c398:	4a47      	ldr	r2, [pc, #284]	; (800c4b8 <dir_register+0x1ec>)
 800c39a:	fba2 2303 	umull	r2, r3, r2, r3
 800c39e:	089b      	lsrs	r3, r3, #2
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	e000      	b.n	800c3a6 <dir_register+0xda>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c3a8:	6a39      	ldr	r1, [r7, #32]
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f7ff fcc0 	bl	800bd30 <dir_alloc>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c3b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d148      	bne.n	800c450 <dir_register+0x184>
 800c3be:	6a3b      	ldr	r3, [r7, #32]
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	623b      	str	r3, [r7, #32]
 800c3c4:	6a3b      	ldr	r3, [r7, #32]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d042      	beq.n	800c450 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	695a      	ldr	r2, [r3, #20]
 800c3ce:	6a3b      	ldr	r3, [r7, #32]
 800c3d0:	015b      	lsls	r3, r3, #5
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f7ff fb6a 	bl	800bab0 <dir_sdi>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c3e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d132      	bne.n	800c450 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	3324      	adds	r3, #36	; 0x24
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7ff fe8a 	bl	800c108 <sum_sfn>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	69db      	ldr	r3, [r3, #28]
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	69f8      	ldr	r0, [r7, #28]
 800c400:	f7fe ffd6 	bl	800b3b0 <move_window>
 800c404:	4603      	mov	r3, r0
 800c406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c40a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d11d      	bne.n	800c44e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	68d8      	ldr	r0, [r3, #12]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6a19      	ldr	r1, [r3, #32]
 800c41a:	6a3b      	ldr	r3, [r7, #32]
 800c41c:	b2da      	uxtb	r2, r3
 800c41e:	7efb      	ldrb	r3, [r7, #27]
 800c420:	f7ff fd7c 	bl	800bf1c <put_lfn>
				fs->wflag = 1;
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	2201      	movs	r2, #1
 800c428:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c42a:	2100      	movs	r1, #0
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f7ff fbba 	bl	800bba6 <dir_next>
 800c432:	4603      	mov	r3, r0
 800c434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d107      	bne.n	800c450 <dir_register+0x184>
 800c440:	6a3b      	ldr	r3, [r7, #32]
 800c442:	3b01      	subs	r3, #1
 800c444:	623b      	str	r3, [r7, #32]
 800c446:	6a3b      	ldr	r3, [r7, #32]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1d5      	bne.n	800c3f8 <dir_register+0x12c>
 800c44c:	e000      	b.n	800c450 <dir_register+0x184>
				if (res != FR_OK) break;
 800c44e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c454:	2b00      	cmp	r3, #0
 800c456:	d128      	bne.n	800c4aa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	69db      	ldr	r3, [r3, #28]
 800c45c:	4619      	mov	r1, r3
 800c45e:	69f8      	ldr	r0, [r7, #28]
 800c460:	f7fe ffa6 	bl	800b3b0 <move_window>
 800c464:	4603      	mov	r3, r0
 800c466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c46a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d11b      	bne.n	800c4aa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6a1b      	ldr	r3, [r3, #32]
 800c476:	2220      	movs	r2, #32
 800c478:	2100      	movs	r1, #0
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7fe fd8b 	bl	800af96 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6a18      	ldr	r0, [r3, #32]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	3324      	adds	r3, #36	; 0x24
 800c488:	220b      	movs	r2, #11
 800c48a:	4619      	mov	r1, r3
 800c48c:	f7fe fd62 	bl	800af54 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6a1b      	ldr	r3, [r3, #32]
 800c49a:	330c      	adds	r3, #12
 800c49c:	f002 0218 	and.w	r2, r2, #24
 800c4a0:	b2d2      	uxtb	r2, r2
 800c4a2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c4aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3730      	adds	r7, #48	; 0x30
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	4ec4ec4f 	.word	0x4ec4ec4f

0800c4bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08a      	sub	sp, #40	; 0x28
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	613b      	str	r3, [r7, #16]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	60fb      	str	r3, [r7, #12]
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	617b      	str	r3, [r7, #20]
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	1c5a      	adds	r2, r3, #1
 800c4e0:	61ba      	str	r2, [r7, #24]
 800c4e2:	693a      	ldr	r2, [r7, #16]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c4ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4ec:	2b1f      	cmp	r3, #31
 800c4ee:	d940      	bls.n	800c572 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c4f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4f2:	2b2f      	cmp	r3, #47	; 0x2f
 800c4f4:	d006      	beq.n	800c504 <create_name+0x48>
 800c4f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4f8:	2b5c      	cmp	r3, #92	; 0x5c
 800c4fa:	d110      	bne.n	800c51e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c4fc:	e002      	b.n	800c504 <create_name+0x48>
 800c4fe:	69bb      	ldr	r3, [r7, #24]
 800c500:	3301      	adds	r3, #1
 800c502:	61bb      	str	r3, [r7, #24]
 800c504:	693a      	ldr	r2, [r7, #16]
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	4413      	add	r3, r2
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2b2f      	cmp	r3, #47	; 0x2f
 800c50e:	d0f6      	beq.n	800c4fe <create_name+0x42>
 800c510:	693a      	ldr	r2, [r7, #16]
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	4413      	add	r3, r2
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	2b5c      	cmp	r3, #92	; 0x5c
 800c51a:	d0f0      	beq.n	800c4fe <create_name+0x42>
			break;
 800c51c:	e02a      	b.n	800c574 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2bfe      	cmp	r3, #254	; 0xfe
 800c522:	d901      	bls.n	800c528 <create_name+0x6c>
 800c524:	2306      	movs	r3, #6
 800c526:	e17d      	b.n	800c824 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c52e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c530:	2101      	movs	r1, #1
 800c532:	4618      	mov	r0, r3
 800c534:	f001 fce2 	bl	800defc <ff_convert>
 800c538:	4603      	mov	r3, r0
 800c53a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c53c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d101      	bne.n	800c546 <create_name+0x8a>
 800c542:	2306      	movs	r3, #6
 800c544:	e16e      	b.n	800c824 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c548:	2b7f      	cmp	r3, #127	; 0x7f
 800c54a:	d809      	bhi.n	800c560 <create_name+0xa4>
 800c54c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c54e:	4619      	mov	r1, r3
 800c550:	488d      	ldr	r0, [pc, #564]	; (800c788 <create_name+0x2cc>)
 800c552:	f7fe fd62 	bl	800b01a <chk_chr>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d001      	beq.n	800c560 <create_name+0xa4>
 800c55c:	2306      	movs	r3, #6
 800c55e:	e161      	b.n	800c824 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	1c5a      	adds	r2, r3, #1
 800c564:	617a      	str	r2, [r7, #20]
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	4413      	add	r3, r2
 800c56c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c56e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c570:	e7b4      	b.n	800c4dc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c572:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c574:	693a      	ldr	r2, [r7, #16]
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	441a      	add	r2, r3
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c57e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c580:	2b1f      	cmp	r3, #31
 800c582:	d801      	bhi.n	800c588 <create_name+0xcc>
 800c584:	2304      	movs	r3, #4
 800c586:	e000      	b.n	800c58a <create_name+0xce>
 800c588:	2300      	movs	r3, #0
 800c58a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c58e:	e011      	b.n	800c5b4 <create_name+0xf8>
		w = lfn[di - 1];
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c596:	3b01      	subs	r3, #1
 800c598:	005b      	lsls	r3, r3, #1
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	4413      	add	r3, r2
 800c59e:	881b      	ldrh	r3, [r3, #0]
 800c5a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c5a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5a4:	2b20      	cmp	r3, #32
 800c5a6:	d002      	beq.n	800c5ae <create_name+0xf2>
 800c5a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5aa:	2b2e      	cmp	r3, #46	; 0x2e
 800c5ac:	d106      	bne.n	800c5bc <create_name+0x100>
		di--;
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d1ea      	bne.n	800c590 <create_name+0xd4>
 800c5ba:	e000      	b.n	800c5be <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c5bc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	005b      	lsls	r3, r3, #1
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d101      	bne.n	800c5d4 <create_name+0x118>
 800c5d0:	2306      	movs	r3, #6
 800c5d2:	e127      	b.n	800c824 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	3324      	adds	r3, #36	; 0x24
 800c5d8:	220b      	movs	r2, #11
 800c5da:	2120      	movs	r1, #32
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fe fcda 	bl	800af96 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	61bb      	str	r3, [r7, #24]
 800c5e6:	e002      	b.n	800c5ee <create_name+0x132>
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	61bb      	str	r3, [r7, #24]
 800c5ee:	69bb      	ldr	r3, [r7, #24]
 800c5f0:	005b      	lsls	r3, r3, #1
 800c5f2:	68fa      	ldr	r2, [r7, #12]
 800c5f4:	4413      	add	r3, r2
 800c5f6:	881b      	ldrh	r3, [r3, #0]
 800c5f8:	2b20      	cmp	r3, #32
 800c5fa:	d0f5      	beq.n	800c5e8 <create_name+0x12c>
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	005b      	lsls	r3, r3, #1
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	4413      	add	r3, r2
 800c604:	881b      	ldrh	r3, [r3, #0]
 800c606:	2b2e      	cmp	r3, #46	; 0x2e
 800c608:	d0ee      	beq.n	800c5e8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d009      	beq.n	800c624 <create_name+0x168>
 800c610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c614:	f043 0303 	orr.w	r3, r3, #3
 800c618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c61c:	e002      	b.n	800c624 <create_name+0x168>
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	3b01      	subs	r3, #1
 800c622:	617b      	str	r3, [r7, #20]
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d009      	beq.n	800c63e <create_name+0x182>
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c630:	3b01      	subs	r3, #1
 800c632:	005b      	lsls	r3, r3, #1
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	4413      	add	r3, r2
 800c638:	881b      	ldrh	r3, [r3, #0]
 800c63a:	2b2e      	cmp	r3, #46	; 0x2e
 800c63c:	d1ef      	bne.n	800c61e <create_name+0x162>

	i = b = 0; ni = 8;
 800c63e:	2300      	movs	r3, #0
 800c640:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c644:	2300      	movs	r3, #0
 800c646:	623b      	str	r3, [r7, #32]
 800c648:	2308      	movs	r3, #8
 800c64a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c64c:	69bb      	ldr	r3, [r7, #24]
 800c64e:	1c5a      	adds	r2, r3, #1
 800c650:	61ba      	str	r2, [r7, #24]
 800c652:	005b      	lsls	r3, r3, #1
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	4413      	add	r3, r2
 800c658:	881b      	ldrh	r3, [r3, #0]
 800c65a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c65c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f000 8090 	beq.w	800c784 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c664:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c666:	2b20      	cmp	r3, #32
 800c668:	d006      	beq.n	800c678 <create_name+0x1bc>
 800c66a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c66c:	2b2e      	cmp	r3, #46	; 0x2e
 800c66e:	d10a      	bne.n	800c686 <create_name+0x1ca>
 800c670:	69ba      	ldr	r2, [r7, #24]
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	429a      	cmp	r2, r3
 800c676:	d006      	beq.n	800c686 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c67c:	f043 0303 	orr.w	r3, r3, #3
 800c680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c684:	e07d      	b.n	800c782 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c686:	6a3a      	ldr	r2, [r7, #32]
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d203      	bcs.n	800c696 <create_name+0x1da>
 800c68e:	69ba      	ldr	r2, [r7, #24]
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	429a      	cmp	r2, r3
 800c694:	d123      	bne.n	800c6de <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	2b0b      	cmp	r3, #11
 800c69a:	d106      	bne.n	800c6aa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c69c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6a0:	f043 0303 	orr.w	r3, r3, #3
 800c6a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6a8:	e075      	b.n	800c796 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c6aa:	69ba      	ldr	r2, [r7, #24]
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d005      	beq.n	800c6be <create_name+0x202>
 800c6b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6b6:	f043 0303 	orr.w	r3, r3, #3
 800c6ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c6be:	69ba      	ldr	r2, [r7, #24]
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d866      	bhi.n	800c794 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	61bb      	str	r3, [r7, #24]
 800c6ca:	2308      	movs	r3, #8
 800c6cc:	623b      	str	r3, [r7, #32]
 800c6ce:	230b      	movs	r3, #11
 800c6d0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c6d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c6dc:	e051      	b.n	800c782 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c6de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6e0:	2b7f      	cmp	r3, #127	; 0x7f
 800c6e2:	d914      	bls.n	800c70e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c6e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f001 fc07 	bl	800defc <ff_convert>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c6f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d004      	beq.n	800c702 <create_name+0x246>
 800c6f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6fa:	3b80      	subs	r3, #128	; 0x80
 800c6fc:	4a23      	ldr	r2, [pc, #140]	; (800c78c <create_name+0x2d0>)
 800c6fe:	5cd3      	ldrb	r3, [r2, r3]
 800c700:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c706:	f043 0302 	orr.w	r3, r3, #2
 800c70a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c70e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c710:	2b00      	cmp	r3, #0
 800c712:	d007      	beq.n	800c724 <create_name+0x268>
 800c714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c716:	4619      	mov	r1, r3
 800c718:	481d      	ldr	r0, [pc, #116]	; (800c790 <create_name+0x2d4>)
 800c71a:	f7fe fc7e 	bl	800b01a <chk_chr>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d008      	beq.n	800c736 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c724:	235f      	movs	r3, #95	; 0x5f
 800c726:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c72c:	f043 0303 	orr.w	r3, r3, #3
 800c730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c734:	e01b      	b.n	800c76e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c738:	2b40      	cmp	r3, #64	; 0x40
 800c73a:	d909      	bls.n	800c750 <create_name+0x294>
 800c73c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c73e:	2b5a      	cmp	r3, #90	; 0x5a
 800c740:	d806      	bhi.n	800c750 <create_name+0x294>
					b |= 2;
 800c742:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c746:	f043 0302 	orr.w	r3, r3, #2
 800c74a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c74e:	e00e      	b.n	800c76e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c752:	2b60      	cmp	r3, #96	; 0x60
 800c754:	d90b      	bls.n	800c76e <create_name+0x2b2>
 800c756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c758:	2b7a      	cmp	r3, #122	; 0x7a
 800c75a:	d808      	bhi.n	800c76e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c75c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c760:	f043 0301 	orr.w	r3, r3, #1
 800c764:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c76a:	3b20      	subs	r3, #32
 800c76c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c76e:	6a3b      	ldr	r3, [r7, #32]
 800c770:	1c5a      	adds	r2, r3, #1
 800c772:	623a      	str	r2, [r7, #32]
 800c774:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c776:	b2d1      	uxtb	r1, r2
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	4413      	add	r3, r2
 800c77c:	460a      	mov	r2, r1
 800c77e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c782:	e763      	b.n	800c64c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c784:	bf00      	nop
 800c786:	e006      	b.n	800c796 <create_name+0x2da>
 800c788:	08012dc4 	.word	0x08012dc4
 800c78c:	08012e2c 	.word	0x08012e2c
 800c790:	08012dd0 	.word	0x08012dd0
			if (si > di) break;			/* No extension */
 800c794:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c79c:	2be5      	cmp	r3, #229	; 0xe5
 800c79e:	d103      	bne.n	800c7a8 <create_name+0x2ec>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2205      	movs	r2, #5
 800c7a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	2b08      	cmp	r3, #8
 800c7ac:	d104      	bne.n	800c7b8 <create_name+0x2fc>
 800c7ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c7b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7bc:	f003 030c 	and.w	r3, r3, #12
 800c7c0:	2b0c      	cmp	r3, #12
 800c7c2:	d005      	beq.n	800c7d0 <create_name+0x314>
 800c7c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7c8:	f003 0303 	and.w	r3, r3, #3
 800c7cc:	2b03      	cmp	r3, #3
 800c7ce:	d105      	bne.n	800c7dc <create_name+0x320>
 800c7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7d4:	f043 0302 	orr.w	r3, r3, #2
 800c7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c7dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7e0:	f003 0302 	and.w	r3, r3, #2
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d117      	bne.n	800c818 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c7e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7ec:	f003 0303 	and.w	r3, r3, #3
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d105      	bne.n	800c800 <create_name+0x344>
 800c7f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7f8:	f043 0310 	orr.w	r3, r3, #16
 800c7fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c800:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c804:	f003 030c 	and.w	r3, r3, #12
 800c808:	2b04      	cmp	r3, #4
 800c80a:	d105      	bne.n	800c818 <create_name+0x35c>
 800c80c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c810:	f043 0308 	orr.w	r3, r3, #8
 800c814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c81e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c822:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c824:	4618      	mov	r0, r3
 800c826:	3728      	adds	r7, #40	; 0x28
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b086      	sub	sp, #24
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c840:	e002      	b.n	800c848 <follow_path+0x1c>
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	3301      	adds	r3, #1
 800c846:	603b      	str	r3, [r7, #0]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	2b2f      	cmp	r3, #47	; 0x2f
 800c84e:	d0f8      	beq.n	800c842 <follow_path+0x16>
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	2b5c      	cmp	r3, #92	; 0x5c
 800c856:	d0f4      	beq.n	800c842 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	2200      	movs	r2, #0
 800c85c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	2b1f      	cmp	r3, #31
 800c864:	d80a      	bhi.n	800c87c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2280      	movs	r2, #128	; 0x80
 800c86a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c86e:	2100      	movs	r1, #0
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f7ff f91d 	bl	800bab0 <dir_sdi>
 800c876:	4603      	mov	r3, r0
 800c878:	75fb      	strb	r3, [r7, #23]
 800c87a:	e043      	b.n	800c904 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c87c:	463b      	mov	r3, r7
 800c87e:	4619      	mov	r1, r3
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f7ff fe1b 	bl	800c4bc <create_name>
 800c886:	4603      	mov	r3, r0
 800c888:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c88a:	7dfb      	ldrb	r3, [r7, #23]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d134      	bne.n	800c8fa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f7ff fc5a 	bl	800c14a <dir_find>
 800c896:	4603      	mov	r3, r0
 800c898:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c8a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c8a2:	7dfb      	ldrb	r3, [r7, #23]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d00a      	beq.n	800c8be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c8a8:	7dfb      	ldrb	r3, [r7, #23]
 800c8aa:	2b04      	cmp	r3, #4
 800c8ac:	d127      	bne.n	800c8fe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c8ae:	7afb      	ldrb	r3, [r7, #11]
 800c8b0:	f003 0304 	and.w	r3, r3, #4
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d122      	bne.n	800c8fe <follow_path+0xd2>
 800c8b8:	2305      	movs	r3, #5
 800c8ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c8bc:	e01f      	b.n	800c8fe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c8be:	7afb      	ldrb	r3, [r7, #11]
 800c8c0:	f003 0304 	and.w	r3, r3, #4
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d11c      	bne.n	800c902 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	799b      	ldrb	r3, [r3, #6]
 800c8cc:	f003 0310 	and.w	r3, r3, #16
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d102      	bne.n	800c8da <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c8d4:	2305      	movs	r3, #5
 800c8d6:	75fb      	strb	r3, [r7, #23]
 800c8d8:	e014      	b.n	800c904 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	695b      	ldr	r3, [r3, #20]
 800c8e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8e8:	4413      	add	r3, r2
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	68f8      	ldr	r0, [r7, #12]
 800c8ee:	f7ff fa66 	bl	800bdbe <ld_clust>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c8f8:	e7c0      	b.n	800c87c <follow_path+0x50>
			if (res != FR_OK) break;
 800c8fa:	bf00      	nop
 800c8fc:	e002      	b.n	800c904 <follow_path+0xd8>
				break;
 800c8fe:	bf00      	nop
 800c900:	e000      	b.n	800c904 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c902:	bf00      	nop
			}
		}
	}

	return res;
 800c904:	7dfb      	ldrb	r3, [r7, #23]
}
 800c906:	4618      	mov	r0, r3
 800c908:	3718      	adds	r7, #24
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c90e:	b480      	push	{r7}
 800c910:	b087      	sub	sp, #28
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c916:	f04f 33ff 	mov.w	r3, #4294967295
 800c91a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d031      	beq.n	800c988 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	617b      	str	r3, [r7, #20]
 800c92a:	e002      	b.n	800c932 <get_ldnumber+0x24>
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	3301      	adds	r3, #1
 800c930:	617b      	str	r3, [r7, #20]
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	2b1f      	cmp	r3, #31
 800c938:	d903      	bls.n	800c942 <get_ldnumber+0x34>
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	2b3a      	cmp	r3, #58	; 0x3a
 800c940:	d1f4      	bne.n	800c92c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	2b3a      	cmp	r3, #58	; 0x3a
 800c948:	d11c      	bne.n	800c984 <get_ldnumber+0x76>
			tp = *path;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	1c5a      	adds	r2, r3, #1
 800c954:	60fa      	str	r2, [r7, #12]
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	3b30      	subs	r3, #48	; 0x30
 800c95a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	2b09      	cmp	r3, #9
 800c960:	d80e      	bhi.n	800c980 <get_ldnumber+0x72>
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	429a      	cmp	r2, r3
 800c968:	d10a      	bne.n	800c980 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d107      	bne.n	800c980 <get_ldnumber+0x72>
					vol = (int)i;
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	3301      	adds	r3, #1
 800c978:	617b      	str	r3, [r7, #20]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	e002      	b.n	800c98a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c984:	2300      	movs	r3, #0
 800c986:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c988:	693b      	ldr	r3, [r7, #16]
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	371c      	adds	r7, #28
 800c98e:	46bd      	mov	sp, r7
 800c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c994:	4770      	bx	lr
	...

0800c998 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	70da      	strb	r2, [r3, #3]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ae:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f7fe fcfc 	bl	800b3b0 <move_window>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d001      	beq.n	800c9c2 <check_fs+0x2a>
 800c9be:	2304      	movs	r3, #4
 800c9c0:	e038      	b.n	800ca34 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	3334      	adds	r3, #52	; 0x34
 800c9c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7fe fa40 	bl	800ae50 <ld_word>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d001      	beq.n	800c9e0 <check_fs+0x48>
 800c9dc:	2303      	movs	r3, #3
 800c9de:	e029      	b.n	800ca34 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c9e6:	2be9      	cmp	r3, #233	; 0xe9
 800c9e8:	d009      	beq.n	800c9fe <check_fs+0x66>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c9f0:	2beb      	cmp	r3, #235	; 0xeb
 800c9f2:	d11e      	bne.n	800ca32 <check_fs+0x9a>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c9fa:	2b90      	cmp	r3, #144	; 0x90
 800c9fc:	d119      	bne.n	800ca32 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	3334      	adds	r3, #52	; 0x34
 800ca02:	3336      	adds	r3, #54	; 0x36
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7fe fa3b 	bl	800ae80 <ld_dword>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ca10:	4a0a      	ldr	r2, [pc, #40]	; (800ca3c <check_fs+0xa4>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d101      	bne.n	800ca1a <check_fs+0x82>
 800ca16:	2300      	movs	r3, #0
 800ca18:	e00c      	b.n	800ca34 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	3334      	adds	r3, #52	; 0x34
 800ca1e:	3352      	adds	r3, #82	; 0x52
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fe fa2d 	bl	800ae80 <ld_dword>
 800ca26:	4603      	mov	r3, r0
 800ca28:	4a05      	ldr	r2, [pc, #20]	; (800ca40 <check_fs+0xa8>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d101      	bne.n	800ca32 <check_fs+0x9a>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	e000      	b.n	800ca34 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ca32:	2302      	movs	r3, #2
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	00544146 	.word	0x00544146
 800ca40:	33544146 	.word	0x33544146

0800ca44 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b096      	sub	sp, #88	; 0x58
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	4613      	mov	r3, r2
 800ca50:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	2200      	movs	r2, #0
 800ca56:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f7ff ff58 	bl	800c90e <get_ldnumber>
 800ca5e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ca60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	da01      	bge.n	800ca6a <find_volume+0x26>
 800ca66:	230b      	movs	r3, #11
 800ca68:	e230      	b.n	800cecc <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ca6a:	4aa1      	ldr	r2, [pc, #644]	; (800ccf0 <find_volume+0x2ac>)
 800ca6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca72:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ca74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d101      	bne.n	800ca7e <find_volume+0x3a>
 800ca7a:	230c      	movs	r3, #12
 800ca7c:	e226      	b.n	800cecc <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca82:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ca84:	79fb      	ldrb	r3, [r7, #7]
 800ca86:	f023 0301 	bic.w	r3, r3, #1
 800ca8a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ca8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d01a      	beq.n	800caca <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ca94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca96:	785b      	ldrb	r3, [r3, #1]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7fe f93b 	bl	800ad14 <disk_status>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800caa4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800caa8:	f003 0301 	and.w	r3, r3, #1
 800caac:	2b00      	cmp	r3, #0
 800caae:	d10c      	bne.n	800caca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cab0:	79fb      	ldrb	r3, [r7, #7]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d007      	beq.n	800cac6 <find_volume+0x82>
 800cab6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800caba:	f003 0304 	and.w	r3, r3, #4
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d001      	beq.n	800cac6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cac2:	230a      	movs	r3, #10
 800cac4:	e202      	b.n	800cecc <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800cac6:	2300      	movs	r3, #0
 800cac8:	e200      	b.n	800cecc <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800caca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cacc:	2200      	movs	r2, #0
 800cace:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cada:	785b      	ldrb	r3, [r3, #1]
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fe f933 	bl	800ad48 <disk_initialize>
 800cae2:	4603      	mov	r3, r0
 800cae4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cae8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800caec:	f003 0301 	and.w	r3, r3, #1
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d001      	beq.n	800caf8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800caf4:	2303      	movs	r3, #3
 800caf6:	e1e9      	b.n	800cecc <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800caf8:	79fb      	ldrb	r3, [r7, #7]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d007      	beq.n	800cb0e <find_volume+0xca>
 800cafe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb02:	f003 0304 	and.w	r3, r3, #4
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cb0a:	230a      	movs	r3, #10
 800cb0c:	e1de      	b.n	800cecc <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cb12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb16:	f7ff ff3f 	bl	800c998 <check_fs>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cb20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb24:	2b02      	cmp	r3, #2
 800cb26:	d149      	bne.n	800cbbc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cb28:	2300      	movs	r3, #0
 800cb2a:	643b      	str	r3, [r7, #64]	; 0x40
 800cb2c:	e01e      	b.n	800cb6c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb30:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb36:	011b      	lsls	r3, r3, #4
 800cb38:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cb3c:	4413      	add	r3, r2
 800cb3e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb42:	3304      	adds	r3, #4
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d006      	beq.n	800cb58 <find_volume+0x114>
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4c:	3308      	adds	r3, #8
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7fe f996 	bl	800ae80 <ld_dword>
 800cb54:	4602      	mov	r2, r0
 800cb56:	e000      	b.n	800cb5a <find_volume+0x116>
 800cb58:	2200      	movs	r2, #0
 800cb5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	3358      	adds	r3, #88	; 0x58
 800cb60:	443b      	add	r3, r7
 800cb62:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cb66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb68:	3301      	adds	r3, #1
 800cb6a:	643b      	str	r3, [r7, #64]	; 0x40
 800cb6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb6e:	2b03      	cmp	r3, #3
 800cb70:	d9dd      	bls.n	800cb2e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cb72:	2300      	movs	r3, #0
 800cb74:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cb76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d002      	beq.n	800cb82 <find_volume+0x13e>
 800cb7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cb82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	3358      	adds	r3, #88	; 0x58
 800cb88:	443b      	add	r3, r7
 800cb8a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cb8e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cb90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d005      	beq.n	800cba2 <find_volume+0x15e>
 800cb96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb9a:	f7ff fefd 	bl	800c998 <check_fs>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	e000      	b.n	800cba4 <find_volume+0x160>
 800cba2:	2303      	movs	r3, #3
 800cba4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d905      	bls.n	800cbbc <find_volume+0x178>
 800cbb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	643b      	str	r3, [r7, #64]	; 0x40
 800cbb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbb8:	2b03      	cmp	r3, #3
 800cbba:	d9e2      	bls.n	800cb82 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cbbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbc0:	2b04      	cmp	r3, #4
 800cbc2:	d101      	bne.n	800cbc8 <find_volume+0x184>
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e181      	b.n	800cecc <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cbc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d901      	bls.n	800cbd4 <find_volume+0x190>
 800cbd0:	230d      	movs	r3, #13
 800cbd2:	e17b      	b.n	800cecc <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd6:	3334      	adds	r3, #52	; 0x34
 800cbd8:	330b      	adds	r3, #11
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fe f938 	bl	800ae50 <ld_word>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbe6:	d001      	beq.n	800cbec <find_volume+0x1a8>
 800cbe8:	230d      	movs	r3, #13
 800cbea:	e16f      	b.n	800cecc <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbee:	3334      	adds	r3, #52	; 0x34
 800cbf0:	3316      	adds	r3, #22
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7fe f92c 	bl	800ae50 <ld_word>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cbfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d106      	bne.n	800cc10 <find_volume+0x1cc>
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	3334      	adds	r3, #52	; 0x34
 800cc06:	3324      	adds	r3, #36	; 0x24
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7fe f939 	bl	800ae80 <ld_dword>
 800cc0e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc14:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc18:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc22:	789b      	ldrb	r3, [r3, #2]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d005      	beq.n	800cc34 <find_volume+0x1f0>
 800cc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2a:	789b      	ldrb	r3, [r3, #2]
 800cc2c:	2b02      	cmp	r3, #2
 800cc2e:	d001      	beq.n	800cc34 <find_volume+0x1f0>
 800cc30:	230d      	movs	r3, #13
 800cc32:	e14b      	b.n	800cecc <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc36:	789b      	ldrb	r3, [r3, #2]
 800cc38:	461a      	mov	r2, r3
 800cc3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc3c:	fb02 f303 	mul.w	r3, r2, r3
 800cc40:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc50:	895b      	ldrh	r3, [r3, #10]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d008      	beq.n	800cc68 <find_volume+0x224>
 800cc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc58:	895b      	ldrh	r3, [r3, #10]
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5e:	895b      	ldrh	r3, [r3, #10]
 800cc60:	3b01      	subs	r3, #1
 800cc62:	4013      	ands	r3, r2
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d001      	beq.n	800cc6c <find_volume+0x228>
 800cc68:	230d      	movs	r3, #13
 800cc6a:	e12f      	b.n	800cecc <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	3334      	adds	r3, #52	; 0x34
 800cc70:	3311      	adds	r3, #17
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7fe f8ec 	bl	800ae50 <ld_word>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc82:	891b      	ldrh	r3, [r3, #8]
 800cc84:	f003 030f 	and.w	r3, r3, #15
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d001      	beq.n	800cc92 <find_volume+0x24e>
 800cc8e:	230d      	movs	r3, #13
 800cc90:	e11c      	b.n	800cecc <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc94:	3334      	adds	r3, #52	; 0x34
 800cc96:	3313      	adds	r3, #19
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fe f8d9 	bl	800ae50 <ld_word>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d106      	bne.n	800ccb6 <find_volume+0x272>
 800cca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccaa:	3334      	adds	r3, #52	; 0x34
 800ccac:	3320      	adds	r3, #32
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7fe f8e6 	bl	800ae80 <ld_dword>
 800ccb4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ccb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb8:	3334      	adds	r3, #52	; 0x34
 800ccba:	330e      	adds	r3, #14
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7fe f8c7 	bl	800ae50 <ld_word>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ccc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d101      	bne.n	800ccd0 <find_volume+0x28c>
 800cccc:	230d      	movs	r3, #13
 800ccce:	e0fd      	b.n	800cecc <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ccd0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ccd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccd4:	4413      	add	r3, r2
 800ccd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccd8:	8912      	ldrh	r2, [r2, #8]
 800ccda:	0912      	lsrs	r2, r2, #4
 800ccdc:	b292      	uxth	r2, r2
 800ccde:	4413      	add	r3, r2
 800cce0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d204      	bcs.n	800ccf4 <find_volume+0x2b0>
 800ccea:	230d      	movs	r3, #13
 800ccec:	e0ee      	b.n	800cecc <find_volume+0x488>
 800ccee:	bf00      	nop
 800ccf0:	2000165c 	.word	0x2000165c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ccf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccfc:	8952      	ldrh	r2, [r2, #10]
 800ccfe:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd02:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d101      	bne.n	800cd0e <find_volume+0x2ca>
 800cd0a:	230d      	movs	r3, #13
 800cd0c:	e0de      	b.n	800cecc <find_volume+0x488>
		fmt = FS_FAT32;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d802      	bhi.n	800cd24 <find_volume+0x2e0>
 800cd1e:	2302      	movs	r3, #2
 800cd20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd26:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d802      	bhi.n	800cd34 <find_volume+0x2f0>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd36:	1c9a      	adds	r2, r3, #2
 800cd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800cd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd40:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cd42:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cd44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd46:	441a      	add	r2, r3
 800cd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cd4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd50:	441a      	add	r2, r3
 800cd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd54:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800cd56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd5a:	2b03      	cmp	r3, #3
 800cd5c:	d11e      	bne.n	800cd9c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd60:	3334      	adds	r3, #52	; 0x34
 800cd62:	332a      	adds	r3, #42	; 0x2a
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7fe f873 	bl	800ae50 <ld_word>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d001      	beq.n	800cd74 <find_volume+0x330>
 800cd70:	230d      	movs	r3, #13
 800cd72:	e0ab      	b.n	800cecc <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd76:	891b      	ldrh	r3, [r3, #8]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <find_volume+0x33c>
 800cd7c:	230d      	movs	r3, #13
 800cd7e:	e0a5      	b.n	800cecc <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd82:	3334      	adds	r3, #52	; 0x34
 800cd84:	332c      	adds	r3, #44	; 0x2c
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fe f87a 	bl	800ae80 <ld_dword>
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd90:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd94:	699b      	ldr	r3, [r3, #24]
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	647b      	str	r3, [r7, #68]	; 0x44
 800cd9a:	e01f      	b.n	800cddc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9e:	891b      	ldrh	r3, [r3, #8]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <find_volume+0x364>
 800cda4:	230d      	movs	r3, #13
 800cda6:	e091      	b.n	800cecc <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdae:	441a      	add	r2, r3
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cdb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cdb8:	2b02      	cmp	r3, #2
 800cdba:	d103      	bne.n	800cdc4 <find_volume+0x380>
 800cdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbe:	699b      	ldr	r3, [r3, #24]
 800cdc0:	005b      	lsls	r3, r3, #1
 800cdc2:	e00a      	b.n	800cdda <find_volume+0x396>
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc6:	699a      	ldr	r2, [r3, #24]
 800cdc8:	4613      	mov	r3, r2
 800cdca:	005b      	lsls	r3, r3, #1
 800cdcc:	4413      	add	r3, r2
 800cdce:	085a      	lsrs	r2, r3, #1
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd2:	699b      	ldr	r3, [r3, #24]
 800cdd4:	f003 0301 	and.w	r3, r3, #1
 800cdd8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cdda:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdde:	69da      	ldr	r2, [r3, #28]
 800cde0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cde2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cde6:	0a5b      	lsrs	r3, r3, #9
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d201      	bcs.n	800cdf0 <find_volume+0x3ac>
 800cdec:	230d      	movs	r3, #13
 800cdee:	e06d      	b.n	800cecc <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf6:	615a      	str	r2, [r3, #20]
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfa:	695a      	ldr	r2, [r3, #20]
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfe:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ce00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce02:	2280      	movs	r2, #128	; 0x80
 800ce04:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ce06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce0a:	2b03      	cmp	r3, #3
 800ce0c:	d149      	bne.n	800cea2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ce0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce10:	3334      	adds	r3, #52	; 0x34
 800ce12:	3330      	adds	r3, #48	; 0x30
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7fe f81b 	bl	800ae50 <ld_word>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d140      	bne.n	800cea2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ce20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce22:	3301      	adds	r3, #1
 800ce24:	4619      	mov	r1, r3
 800ce26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce28:	f7fe fac2 	bl	800b3b0 <move_window>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d137      	bne.n	800cea2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ce32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce34:	2200      	movs	r2, #0
 800ce36:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ce38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3a:	3334      	adds	r3, #52	; 0x34
 800ce3c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fe f805 	bl	800ae50 <ld_word>
 800ce46:	4603      	mov	r3, r0
 800ce48:	461a      	mov	r2, r3
 800ce4a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d127      	bne.n	800cea2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ce52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce54:	3334      	adds	r3, #52	; 0x34
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7fe f812 	bl	800ae80 <ld_dword>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	4a1d      	ldr	r2, [pc, #116]	; (800ced4 <find_volume+0x490>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d11e      	bne.n	800cea2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ce64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce66:	3334      	adds	r3, #52	; 0x34
 800ce68:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fe f807 	bl	800ae80 <ld_dword>
 800ce72:	4603      	mov	r3, r0
 800ce74:	4a18      	ldr	r2, [pc, #96]	; (800ced8 <find_volume+0x494>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d113      	bne.n	800cea2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ce7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7c:	3334      	adds	r3, #52	; 0x34
 800ce7e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7fd fffc 	bl	800ae80 <ld_dword>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ce8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce90:	3334      	adds	r3, #52	; 0x34
 800ce92:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fd fff2 	bl	800ae80 <ld_dword>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cea8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ceaa:	4b0c      	ldr	r3, [pc, #48]	; (800cedc <find_volume+0x498>)
 800ceac:	881b      	ldrh	r3, [r3, #0]
 800ceae:	3301      	adds	r3, #1
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	4b0a      	ldr	r3, [pc, #40]	; (800cedc <find_volume+0x498>)
 800ceb4:	801a      	strh	r2, [r3, #0]
 800ceb6:	4b09      	ldr	r3, [pc, #36]	; (800cedc <find_volume+0x498>)
 800ceb8:	881a      	ldrh	r2, [r3, #0]
 800ceba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebc:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec0:	4a07      	ldr	r2, [pc, #28]	; (800cee0 <find_volume+0x49c>)
 800cec2:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cec4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cec6:	f7fe fa0b 	bl	800b2e0 <clear_lock>
#endif
	return FR_OK;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3758      	adds	r7, #88	; 0x58
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	41615252 	.word	0x41615252
 800ced8:	61417272 	.word	0x61417272
 800cedc:	20001660 	.word	0x20001660
 800cee0:	20001684 	.word	0x20001684

0800cee4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ceee:	2309      	movs	r3, #9
 800cef0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d01c      	beq.n	800cf32 <validate+0x4e>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d018      	beq.n	800cf32 <validate+0x4e>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d013      	beq.n	800cf32 <validate+0x4e>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	889a      	ldrh	r2, [r3, #4]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	88db      	ldrh	r3, [r3, #6]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d10c      	bne.n	800cf32 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	785b      	ldrb	r3, [r3, #1]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fd fef8 	bl	800ad14 <disk_status>
 800cf24:	4603      	mov	r3, r0
 800cf26:	f003 0301 	and.w	r3, r3, #1
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d101      	bne.n	800cf32 <validate+0x4e>
			res = FR_OK;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cf32:	7bfb      	ldrb	r3, [r7, #15]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d102      	bne.n	800cf3e <validate+0x5a>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	e000      	b.n	800cf40 <validate+0x5c>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	683a      	ldr	r2, [r7, #0]
 800cf42:	6013      	str	r3, [r2, #0]
	return res;
 800cf44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
	...

0800cf50 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b088      	sub	sp, #32
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cf62:	f107 0310 	add.w	r3, r7, #16
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7ff fcd1 	bl	800c90e <get_ldnumber>
 800cf6c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	da01      	bge.n	800cf78 <f_mount+0x28>
 800cf74:	230b      	movs	r3, #11
 800cf76:	e02b      	b.n	800cfd0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cf78:	4a17      	ldr	r2, [pc, #92]	; (800cfd8 <f_mount+0x88>)
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf80:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cf82:	69bb      	ldr	r3, [r7, #24]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d005      	beq.n	800cf94 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cf88:	69b8      	ldr	r0, [r7, #24]
 800cf8a:	f7fe f9a9 	bl	800b2e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	2200      	movs	r2, #0
 800cf92:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d002      	beq.n	800cfa0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cfa0:	68fa      	ldr	r2, [r7, #12]
 800cfa2:	490d      	ldr	r1, [pc, #52]	; (800cfd8 <f_mount+0x88>)
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d002      	beq.n	800cfb6 <f_mount+0x66>
 800cfb0:	79fb      	ldrb	r3, [r7, #7]
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d001      	beq.n	800cfba <f_mount+0x6a>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	e00a      	b.n	800cfd0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cfba:	f107 010c 	add.w	r1, r7, #12
 800cfbe:	f107 0308 	add.w	r3, r7, #8
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7ff fd3d 	bl	800ca44 <find_volume>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cfce:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3720      	adds	r7, #32
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	2000165c 	.word	0x2000165c

0800cfdc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b09a      	sub	sp, #104	; 0x68
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <f_open+0x18>
 800cff0:	2309      	movs	r3, #9
 800cff2:	e1ad      	b.n	800d350 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cff4:	79fb      	ldrb	r3, [r7, #7]
 800cff6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cffa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cffc:	79fa      	ldrb	r2, [r7, #7]
 800cffe:	f107 0114 	add.w	r1, r7, #20
 800d002:	f107 0308 	add.w	r3, r7, #8
 800d006:	4618      	mov	r0, r3
 800d008:	f7ff fd1c 	bl	800ca44 <find_volume>
 800d00c:	4603      	mov	r3, r0
 800d00e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d012:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d016:	2b00      	cmp	r3, #0
 800d018:	f040 8191 	bne.w	800d33e <f_open+0x362>
		dj.obj.fs = fs;
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d020:	68ba      	ldr	r2, [r7, #8]
 800d022:	f107 0318 	add.w	r3, r7, #24
 800d026:	4611      	mov	r1, r2
 800d028:	4618      	mov	r0, r3
 800d02a:	f7ff fbff 	bl	800c82c <follow_path>
 800d02e:	4603      	mov	r3, r0
 800d030:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d034:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d11a      	bne.n	800d072 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d03c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d040:	b25b      	sxtb	r3, r3
 800d042:	2b00      	cmp	r3, #0
 800d044:	da03      	bge.n	800d04e <f_open+0x72>
				res = FR_INVALID_NAME;
 800d046:	2306      	movs	r3, #6
 800d048:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d04c:	e011      	b.n	800d072 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d04e:	79fb      	ldrb	r3, [r7, #7]
 800d050:	f023 0301 	bic.w	r3, r3, #1
 800d054:	2b00      	cmp	r3, #0
 800d056:	bf14      	ite	ne
 800d058:	2301      	movne	r3, #1
 800d05a:	2300      	moveq	r3, #0
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	461a      	mov	r2, r3
 800d060:	f107 0318 	add.w	r3, r7, #24
 800d064:	4611      	mov	r1, r2
 800d066:	4618      	mov	r0, r3
 800d068:	f7fd fff2 	bl	800b050 <chk_lock>
 800d06c:	4603      	mov	r3, r0
 800d06e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d072:	79fb      	ldrb	r3, [r7, #7]
 800d074:	f003 031c 	and.w	r3, r3, #28
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d07f      	beq.n	800d17c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d07c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d080:	2b00      	cmp	r3, #0
 800d082:	d017      	beq.n	800d0b4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d084:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d088:	2b04      	cmp	r3, #4
 800d08a:	d10e      	bne.n	800d0aa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d08c:	f7fe f83c 	bl	800b108 <enq_lock>
 800d090:	4603      	mov	r3, r0
 800d092:	2b00      	cmp	r3, #0
 800d094:	d006      	beq.n	800d0a4 <f_open+0xc8>
 800d096:	f107 0318 	add.w	r3, r7, #24
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7ff f916 	bl	800c2cc <dir_register>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	e000      	b.n	800d0a6 <f_open+0xca>
 800d0a4:	2312      	movs	r3, #18
 800d0a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d0aa:	79fb      	ldrb	r3, [r7, #7]
 800d0ac:	f043 0308 	orr.w	r3, r3, #8
 800d0b0:	71fb      	strb	r3, [r7, #7]
 800d0b2:	e010      	b.n	800d0d6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d0b4:	7fbb      	ldrb	r3, [r7, #30]
 800d0b6:	f003 0311 	and.w	r3, r3, #17
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d003      	beq.n	800d0c6 <f_open+0xea>
					res = FR_DENIED;
 800d0be:	2307      	movs	r3, #7
 800d0c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d0c4:	e007      	b.n	800d0d6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d0c6:	79fb      	ldrb	r3, [r7, #7]
 800d0c8:	f003 0304 	and.w	r3, r3, #4
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d002      	beq.n	800d0d6 <f_open+0xfa>
 800d0d0:	2308      	movs	r3, #8
 800d0d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d0d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d168      	bne.n	800d1b0 <f_open+0x1d4>
 800d0de:	79fb      	ldrb	r3, [r7, #7]
 800d0e0:	f003 0308 	and.w	r3, r3, #8
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d063      	beq.n	800d1b0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d0e8:	f7fd fdb2 	bl	800ac50 <get_fattime>
 800d0ec:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f0:	330e      	adds	r3, #14
 800d0f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7fd ff01 	bl	800aefc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fc:	3316      	adds	r3, #22
 800d0fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d100:	4618      	mov	r0, r3
 800d102:	f7fd fefb 	bl	800aefc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d108:	330b      	adds	r3, #11
 800d10a:	2220      	movs	r2, #32
 800d10c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d112:	4611      	mov	r1, r2
 800d114:	4618      	mov	r0, r3
 800d116:	f7fe fe52 	bl	800bdbe <ld_clust>
 800d11a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d120:	2200      	movs	r2, #0
 800d122:	4618      	mov	r0, r3
 800d124:	f7fe fe6a 	bl	800bdfc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d12a:	331c      	adds	r3, #28
 800d12c:	2100      	movs	r1, #0
 800d12e:	4618      	mov	r0, r3
 800d130:	f7fd fee4 	bl	800aefc <st_dword>
					fs->wflag = 1;
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	2201      	movs	r2, #1
 800d138:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d13a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d037      	beq.n	800d1b0 <f_open+0x1d4>
						dw = fs->winsect;
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d144:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d146:	f107 0318 	add.w	r3, r7, #24
 800d14a:	2200      	movs	r2, #0
 800d14c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fe fb7d 	bl	800b84e <remove_chain>
 800d154:	4603      	mov	r3, r0
 800d156:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d15a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d126      	bne.n	800d1b0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d166:	4618      	mov	r0, r3
 800d168:	f7fe f922 	bl	800b3b0 <move_window>
 800d16c:	4603      	mov	r3, r0
 800d16e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d176:	3a01      	subs	r2, #1
 800d178:	611a      	str	r2, [r3, #16]
 800d17a:	e019      	b.n	800d1b0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d17c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d180:	2b00      	cmp	r3, #0
 800d182:	d115      	bne.n	800d1b0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d184:	7fbb      	ldrb	r3, [r7, #30]
 800d186:	f003 0310 	and.w	r3, r3, #16
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d003      	beq.n	800d196 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d18e:	2304      	movs	r3, #4
 800d190:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d194:	e00c      	b.n	800d1b0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d196:	79fb      	ldrb	r3, [r7, #7]
 800d198:	f003 0302 	and.w	r3, r3, #2
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d007      	beq.n	800d1b0 <f_open+0x1d4>
 800d1a0:	7fbb      	ldrb	r3, [r7, #30]
 800d1a2:	f003 0301 	and.w	r3, r3, #1
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d002      	beq.n	800d1b0 <f_open+0x1d4>
						res = FR_DENIED;
 800d1aa:	2307      	movs	r3, #7
 800d1ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d1b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d128      	bne.n	800d20a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d1b8:	79fb      	ldrb	r3, [r7, #7]
 800d1ba:	f003 0308 	and.w	r3, r3, #8
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d003      	beq.n	800d1ca <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d1c2:	79fb      	ldrb	r3, [r7, #7]
 800d1c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1c8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d1d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d1d8:	79fb      	ldrb	r3, [r7, #7]
 800d1da:	f023 0301 	bic.w	r3, r3, #1
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	bf14      	ite	ne
 800d1e2:	2301      	movne	r3, #1
 800d1e4:	2300      	moveq	r3, #0
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	f107 0318 	add.w	r3, r7, #24
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7fd ffab 	bl	800b14c <inc_lock>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	691b      	ldr	r3, [r3, #16]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d102      	bne.n	800d20a <f_open+0x22e>
 800d204:	2302      	movs	r3, #2
 800d206:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d20a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f040 8095 	bne.w	800d33e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d218:	4611      	mov	r1, r2
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe fdcf 	bl	800bdbe <ld_clust>
 800d220:	4602      	mov	r2, r0
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d228:	331c      	adds	r3, #28
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fd fe28 	bl	800ae80 <ld_dword>
 800d230:	4602      	mov	r2, r0
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2200      	movs	r2, #0
 800d23a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d23c:	697a      	ldr	r2, [r7, #20]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	88da      	ldrh	r2, [r3, #6]
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	79fa      	ldrb	r2, [r7, #7]
 800d24e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2200      	movs	r2, #0
 800d254:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2200      	movs	r2, #0
 800d25a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2200      	movs	r2, #0
 800d260:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	3330      	adds	r3, #48	; 0x30
 800d266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d26a:	2100      	movs	r1, #0
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7fd fe92 	bl	800af96 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d272:	79fb      	ldrb	r3, [r7, #7]
 800d274:	f003 0320 	and.w	r3, r3, #32
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d060      	beq.n	800d33e <f_open+0x362>
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d05c      	beq.n	800d33e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	68da      	ldr	r2, [r3, #12]
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	895b      	ldrh	r3, [r3, #10]
 800d290:	025b      	lsls	r3, r3, #9
 800d292:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	689b      	ldr	r3, [r3, #8]
 800d298:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	68db      	ldr	r3, [r3, #12]
 800d29e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2a0:	e016      	b.n	800d2d0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7fe f93d 	bl	800b526 <get_fat>
 800d2ac:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d2ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d802      	bhi.n	800d2ba <f_open+0x2de>
 800d2b4:	2302      	movs	r3, #2
 800d2b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d2ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2c0:	d102      	bne.n	800d2c8 <f_open+0x2ec>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d2c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d2ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2cc:	1ad3      	subs	r3, r2, r3
 800d2ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d103      	bne.n	800d2e0 <f_open+0x304>
 800d2d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d8e0      	bhi.n	800d2a2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d2e4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d2e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d127      	bne.n	800d33e <f_open+0x362>
 800d2ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d022      	beq.n	800d33e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7fe f8f3 	bl	800b4e8 <clust2sect>
 800d302:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d306:	2b00      	cmp	r3, #0
 800d308:	d103      	bne.n	800d312 <f_open+0x336>
						res = FR_INT_ERR;
 800d30a:	2302      	movs	r3, #2
 800d30c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d310:	e015      	b.n	800d33e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d314:	0a5a      	lsrs	r2, r3, #9
 800d316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d318:	441a      	add	r2, r3
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	7858      	ldrb	r0, [r3, #1]
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	6a1a      	ldr	r2, [r3, #32]
 800d32c:	2301      	movs	r3, #1
 800d32e:	f7fd fd31 	bl	800ad94 <disk_read>
 800d332:	4603      	mov	r3, r0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d002      	beq.n	800d33e <f_open+0x362>
 800d338:	2301      	movs	r3, #1
 800d33a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d33e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d342:	2b00      	cmp	r3, #0
 800d344:	d002      	beq.n	800d34c <f_open+0x370>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2200      	movs	r2, #0
 800d34a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d34c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d350:	4618      	mov	r0, r3
 800d352:	3768      	adds	r7, #104	; 0x68
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b08c      	sub	sp, #48	; 0x30
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
 800d364:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	2200      	movs	r2, #0
 800d36e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f107 0210 	add.w	r2, r7, #16
 800d376:	4611      	mov	r1, r2
 800d378:	4618      	mov	r0, r3
 800d37a:	f7ff fdb3 	bl	800cee4 <validate>
 800d37e:	4603      	mov	r3, r0
 800d380:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d384:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d107      	bne.n	800d39c <f_write+0x44>
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	7d5b      	ldrb	r3, [r3, #21]
 800d390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d394:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d002      	beq.n	800d3a2 <f_write+0x4a>
 800d39c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3a0:	e14b      	b.n	800d63a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	7d1b      	ldrb	r3, [r3, #20]
 800d3a6:	f003 0302 	and.w	r3, r3, #2
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d101      	bne.n	800d3b2 <f_write+0x5a>
 800d3ae:	2307      	movs	r3, #7
 800d3b0:	e143      	b.n	800d63a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	699a      	ldr	r2, [r3, #24]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	441a      	add	r2, r3
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	699b      	ldr	r3, [r3, #24]
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	f080 812d 	bcs.w	800d61e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	699b      	ldr	r3, [r3, #24]
 800d3c8:	43db      	mvns	r3, r3
 800d3ca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d3cc:	e127      	b.n	800d61e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	699b      	ldr	r3, [r3, #24]
 800d3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f040 80e3 	bne.w	800d5a2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	699b      	ldr	r3, [r3, #24]
 800d3e0:	0a5b      	lsrs	r3, r3, #9
 800d3e2:	693a      	ldr	r2, [r7, #16]
 800d3e4:	8952      	ldrh	r2, [r2, #10]
 800d3e6:	3a01      	subs	r2, #1
 800d3e8:	4013      	ands	r3, r2
 800d3ea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d143      	bne.n	800d47a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	699b      	ldr	r3, [r3, #24]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d10c      	bne.n	800d414 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	689b      	ldr	r3, [r3, #8]
 800d3fe:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d402:	2b00      	cmp	r3, #0
 800d404:	d11a      	bne.n	800d43c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2100      	movs	r1, #0
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7fe fa84 	bl	800b918 <create_chain>
 800d410:	62b8      	str	r0, [r7, #40]	; 0x28
 800d412:	e013      	b.n	800d43c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d007      	beq.n	800d42c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	699b      	ldr	r3, [r3, #24]
 800d420:	4619      	mov	r1, r3
 800d422:	68f8      	ldr	r0, [r7, #12]
 800d424:	f7fe fb10 	bl	800ba48 <clmt_clust>
 800d428:	62b8      	str	r0, [r7, #40]	; 0x28
 800d42a:	e007      	b.n	800d43c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	69db      	ldr	r3, [r3, #28]
 800d432:	4619      	mov	r1, r3
 800d434:	4610      	mov	r0, r2
 800d436:	f7fe fa6f 	bl	800b918 <create_chain>
 800d43a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43e:	2b00      	cmp	r3, #0
 800d440:	f000 80f2 	beq.w	800d628 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d446:	2b01      	cmp	r3, #1
 800d448:	d104      	bne.n	800d454 <f_write+0xfc>
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2202      	movs	r2, #2
 800d44e:	755a      	strb	r2, [r3, #21]
 800d450:	2302      	movs	r3, #2
 800d452:	e0f2      	b.n	800d63a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d45a:	d104      	bne.n	800d466 <f_write+0x10e>
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2201      	movs	r2, #1
 800d460:	755a      	strb	r2, [r3, #21]
 800d462:	2301      	movs	r3, #1
 800d464:	e0e9      	b.n	800d63a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d46a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	689b      	ldr	r3, [r3, #8]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d102      	bne.n	800d47a <f_write+0x122>
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d478:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	7d1b      	ldrb	r3, [r3, #20]
 800d47e:	b25b      	sxtb	r3, r3
 800d480:	2b00      	cmp	r3, #0
 800d482:	da18      	bge.n	800d4b6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	7858      	ldrb	r0, [r3, #1]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6a1a      	ldr	r2, [r3, #32]
 800d492:	2301      	movs	r3, #1
 800d494:	f7fd fc9e 	bl	800add4 <disk_write>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d004      	beq.n	800d4a8 <f_write+0x150>
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	755a      	strb	r2, [r3, #21]
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e0c8      	b.n	800d63a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	7d1b      	ldrb	r3, [r3, #20]
 800d4ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4b0:	b2da      	uxtb	r2, r3
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d4b6:	693a      	ldr	r2, [r7, #16]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	69db      	ldr	r3, [r3, #28]
 800d4bc:	4619      	mov	r1, r3
 800d4be:	4610      	mov	r0, r2
 800d4c0:	f7fe f812 	bl	800b4e8 <clust2sect>
 800d4c4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d104      	bne.n	800d4d6 <f_write+0x17e>
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2202      	movs	r2, #2
 800d4d0:	755a      	strb	r2, [r3, #21]
 800d4d2:	2302      	movs	r3, #2
 800d4d4:	e0b1      	b.n	800d63a <f_write+0x2e2>
			sect += csect;
 800d4d6:	697a      	ldr	r2, [r7, #20]
 800d4d8:	69bb      	ldr	r3, [r7, #24]
 800d4da:	4413      	add	r3, r2
 800d4dc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	0a5b      	lsrs	r3, r3, #9
 800d4e2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d4e4:	6a3b      	ldr	r3, [r7, #32]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d03c      	beq.n	800d564 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d4ea:	69ba      	ldr	r2, [r7, #24]
 800d4ec:	6a3b      	ldr	r3, [r7, #32]
 800d4ee:	4413      	add	r3, r2
 800d4f0:	693a      	ldr	r2, [r7, #16]
 800d4f2:	8952      	ldrh	r2, [r2, #10]
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d905      	bls.n	800d504 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	895b      	ldrh	r3, [r3, #10]
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	1ad3      	subs	r3, r2, r3
 800d502:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	7858      	ldrb	r0, [r3, #1]
 800d508:	6a3b      	ldr	r3, [r7, #32]
 800d50a:	697a      	ldr	r2, [r7, #20]
 800d50c:	69f9      	ldr	r1, [r7, #28]
 800d50e:	f7fd fc61 	bl	800add4 <disk_write>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d004      	beq.n	800d522 <f_write+0x1ca>
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2201      	movs	r2, #1
 800d51c:	755a      	strb	r2, [r3, #21]
 800d51e:	2301      	movs	r3, #1
 800d520:	e08b      	b.n	800d63a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	6a1a      	ldr	r2, [r3, #32]
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	1ad3      	subs	r3, r2, r3
 800d52a:	6a3a      	ldr	r2, [r7, #32]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d915      	bls.n	800d55c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6a1a      	ldr	r2, [r3, #32]
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	1ad3      	subs	r3, r2, r3
 800d53e:	025b      	lsls	r3, r3, #9
 800d540:	69fa      	ldr	r2, [r7, #28]
 800d542:	4413      	add	r3, r2
 800d544:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d548:	4619      	mov	r1, r3
 800d54a:	f7fd fd03 	bl	800af54 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	7d1b      	ldrb	r3, [r3, #20]
 800d552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d556:	b2da      	uxtb	r2, r3
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d55c:	6a3b      	ldr	r3, [r7, #32]
 800d55e:	025b      	lsls	r3, r3, #9
 800d560:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d562:	e03f      	b.n	800d5e4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	6a1b      	ldr	r3, [r3, #32]
 800d568:	697a      	ldr	r2, [r7, #20]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d016      	beq.n	800d59c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	699a      	ldr	r2, [r3, #24]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d576:	429a      	cmp	r2, r3
 800d578:	d210      	bcs.n	800d59c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	7858      	ldrb	r0, [r3, #1]
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d584:	2301      	movs	r3, #1
 800d586:	697a      	ldr	r2, [r7, #20]
 800d588:	f7fd fc04 	bl	800ad94 <disk_read>
 800d58c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d004      	beq.n	800d59c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2201      	movs	r2, #1
 800d596:	755a      	strb	r2, [r3, #21]
 800d598:	2301      	movs	r3, #1
 800d59a:	e04e      	b.n	800d63a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	699b      	ldr	r3, [r3, #24]
 800d5a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d5ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d901      	bls.n	800d5bc <f_write+0x264>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	699b      	ldr	r3, [r3, #24]
 800d5c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ca:	4413      	add	r3, r2
 800d5cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5ce:	69f9      	ldr	r1, [r7, #28]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7fd fcbf 	bl	800af54 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	7d1b      	ldrb	r3, [r3, #20]
 800d5da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d5de:	b2da      	uxtb	r2, r3
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d5e4:	69fa      	ldr	r2, [r7, #28]
 800d5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e8:	4413      	add	r3, r2
 800d5ea:	61fb      	str	r3, [r7, #28]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	699a      	ldr	r2, [r3, #24]
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f2:	441a      	add	r2, r3
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	619a      	str	r2, [r3, #24]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	68da      	ldr	r2, [r3, #12]
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	699b      	ldr	r3, [r3, #24]
 800d600:	429a      	cmp	r2, r3
 800d602:	bf38      	it	cc
 800d604:	461a      	movcc	r2, r3
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	60da      	str	r2, [r3, #12]
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d610:	441a      	add	r2, r3
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	601a      	str	r2, [r3, #0]
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61a:	1ad3      	subs	r3, r2, r3
 800d61c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2b00      	cmp	r3, #0
 800d622:	f47f aed4 	bne.w	800d3ce <f_write+0x76>
 800d626:	e000      	b.n	800d62a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d628:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	7d1b      	ldrb	r3, [r3, #20]
 800d62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d632:	b2da      	uxtb	r2, r3
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d638:	2300      	movs	r3, #0
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3730      	adds	r7, #48	; 0x30
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}

0800d642 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d642:	b580      	push	{r7, lr}
 800d644:	b086      	sub	sp, #24
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f107 0208 	add.w	r2, r7, #8
 800d650:	4611      	mov	r1, r2
 800d652:	4618      	mov	r0, r3
 800d654:	f7ff fc46 	bl	800cee4 <validate>
 800d658:	4603      	mov	r3, r0
 800d65a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d65c:	7dfb      	ldrb	r3, [r7, #23]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d168      	bne.n	800d734 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	7d1b      	ldrb	r3, [r3, #20]
 800d666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d062      	beq.n	800d734 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	7d1b      	ldrb	r3, [r3, #20]
 800d672:	b25b      	sxtb	r3, r3
 800d674:	2b00      	cmp	r3, #0
 800d676:	da15      	bge.n	800d6a4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	7858      	ldrb	r0, [r3, #1]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6a1a      	ldr	r2, [r3, #32]
 800d686:	2301      	movs	r3, #1
 800d688:	f7fd fba4 	bl	800add4 <disk_write>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d001      	beq.n	800d696 <f_sync+0x54>
 800d692:	2301      	movs	r3, #1
 800d694:	e04f      	b.n	800d736 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	7d1b      	ldrb	r3, [r3, #20]
 800d69a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d69e:	b2da      	uxtb	r2, r3
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d6a4:	f7fd fad4 	bl	800ac50 <get_fattime>
 800d6a8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d6aa:	68ba      	ldr	r2, [r7, #8]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	4610      	mov	r0, r2
 800d6b4:	f7fd fe7c 	bl	800b3b0 <move_window>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d6bc:	7dfb      	ldrb	r3, [r7, #23]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d138      	bne.n	800d734 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	330b      	adds	r3, #11
 800d6cc:	781a      	ldrb	r2, [r3, #0]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	330b      	adds	r3, #11
 800d6d2:	f042 0220 	orr.w	r2, r2, #32
 800d6d6:	b2d2      	uxtb	r2, r2
 800d6d8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6818      	ldr	r0, [r3, #0]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	689b      	ldr	r3, [r3, #8]
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	68f9      	ldr	r1, [r7, #12]
 800d6e6:	f7fe fb89 	bl	800bdfc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	f103 021c 	add.w	r2, r3, #28
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	4610      	mov	r0, r2
 800d6f8:	f7fd fc00 	bl	800aefc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	3316      	adds	r3, #22
 800d700:	6939      	ldr	r1, [r7, #16]
 800d702:	4618      	mov	r0, r3
 800d704:	f7fd fbfa 	bl	800aefc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	3312      	adds	r3, #18
 800d70c:	2100      	movs	r1, #0
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fd fbd9 	bl	800aec6 <st_word>
					fs->wflag = 1;
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	2201      	movs	r2, #1
 800d718:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7fd fe75 	bl	800b40c <sync_fs>
 800d722:	4603      	mov	r3, r0
 800d724:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	7d1b      	ldrb	r3, [r3, #20]
 800d72a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d734:	7dfb      	ldrb	r3, [r7, #23]
}
 800d736:	4618      	mov	r0, r3
 800d738:	3718      	adds	r7, #24
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}

0800d73e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	b084      	sub	sp, #16
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7ff ff7b 	bl	800d642 <f_sync>
 800d74c:	4603      	mov	r3, r0
 800d74e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d750:	7bfb      	ldrb	r3, [r7, #15]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d118      	bne.n	800d788 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f107 0208 	add.w	r2, r7, #8
 800d75c:	4611      	mov	r1, r2
 800d75e:	4618      	mov	r0, r3
 800d760:	f7ff fbc0 	bl	800cee4 <validate>
 800d764:	4603      	mov	r3, r0
 800d766:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d768:	7bfb      	ldrb	r3, [r7, #15]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10c      	bne.n	800d788 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	691b      	ldr	r3, [r3, #16]
 800d772:	4618      	mov	r0, r3
 800d774:	f7fd fd78 	bl	800b268 <dec_lock>
 800d778:	4603      	mov	r3, r0
 800d77a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d77c:	7bfb      	ldrb	r3, [r7, #15]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d102      	bne.n	800d788 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2200      	movs	r2, #0
 800d786:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d788:	7bfb      	ldrb	r3, [r7, #15]
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d792:	b580      	push	{r7, lr}
 800d794:	b090      	sub	sp, #64	; 0x40
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
 800d79a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f107 0208 	add.w	r2, r7, #8
 800d7a2:	4611      	mov	r1, r2
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7ff fb9d 	bl	800cee4 <validate>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d7b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d103      	bne.n	800d7c0 <f_lseek+0x2e>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	7d5b      	ldrb	r3, [r3, #21]
 800d7bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d7c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <f_lseek+0x3c>
 800d7c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d7cc:	e1e6      	b.n	800db9c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f000 80d1 	beq.w	800d97a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7de:	d15a      	bne.n	800d896 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e8:	1d1a      	adds	r2, r3, #4
 800d7ea:	627a      	str	r2, [r7, #36]	; 0x24
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	617b      	str	r3, [r7, #20]
 800d7f0:	2302      	movs	r3, #2
 800d7f2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	689b      	ldr	r3, [r3, #8]
 800d7f8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d03a      	beq.n	800d876 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d802:	613b      	str	r3, [r7, #16]
 800d804:	2300      	movs	r3, #0
 800d806:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80a:	3302      	adds	r3, #2
 800d80c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d810:	60fb      	str	r3, [r7, #12]
 800d812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d814:	3301      	adds	r3, #1
 800d816:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7fd fe82 	bl	800b526 <get_fat>
 800d822:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d826:	2b01      	cmp	r3, #1
 800d828:	d804      	bhi.n	800d834 <f_lseek+0xa2>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2202      	movs	r2, #2
 800d82e:	755a      	strb	r2, [r3, #21]
 800d830:	2302      	movs	r3, #2
 800d832:	e1b3      	b.n	800db9c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d83a:	d104      	bne.n	800d846 <f_lseek+0xb4>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2201      	movs	r2, #1
 800d840:	755a      	strb	r2, [r3, #21]
 800d842:	2301      	movs	r3, #1
 800d844:	e1aa      	b.n	800db9c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	3301      	adds	r3, #1
 800d84a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d0de      	beq.n	800d80e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	429a      	cmp	r2, r3
 800d856:	d809      	bhi.n	800d86c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85a:	1d1a      	adds	r2, r3, #4
 800d85c:	627a      	str	r2, [r7, #36]	; 0x24
 800d85e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d860:	601a      	str	r2, [r3, #0]
 800d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d864:	1d1a      	adds	r2, r3, #4
 800d866:	627a      	str	r2, [r7, #36]	; 0x24
 800d868:	693a      	ldr	r2, [r7, #16]
 800d86a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	699b      	ldr	r3, [r3, #24]
 800d870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d872:	429a      	cmp	r2, r3
 800d874:	d3c4      	bcc.n	800d800 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d87c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d87e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	429a      	cmp	r2, r3
 800d884:	d803      	bhi.n	800d88e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d888:	2200      	movs	r2, #0
 800d88a:	601a      	str	r2, [r3, #0]
 800d88c:	e184      	b.n	800db98 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d88e:	2311      	movs	r3, #17
 800d890:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d894:	e180      	b.n	800db98 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	683a      	ldr	r2, [r7, #0]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d902      	bls.n	800d8a6 <f_lseek+0x114>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	683a      	ldr	r2, [r7, #0]
 800d8aa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	f000 8172 	beq.w	800db98 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f7fe f8c4 	bl	800ba48 <clmt_clust>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d8c6:	68ba      	ldr	r2, [r7, #8]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	69db      	ldr	r3, [r3, #28]
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	4610      	mov	r0, r2
 800d8d0:	f7fd fe0a 	bl	800b4e8 <clust2sect>
 800d8d4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d104      	bne.n	800d8e6 <f_lseek+0x154>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2202      	movs	r2, #2
 800d8e0:	755a      	strb	r2, [r3, #21]
 800d8e2:	2302      	movs	r3, #2
 800d8e4:	e15a      	b.n	800db9c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	3b01      	subs	r3, #1
 800d8ea:	0a5b      	lsrs	r3, r3, #9
 800d8ec:	68ba      	ldr	r2, [r7, #8]
 800d8ee:	8952      	ldrh	r2, [r2, #10]
 800d8f0:	3a01      	subs	r2, #1
 800d8f2:	4013      	ands	r3, r2
 800d8f4:	69ba      	ldr	r2, [r7, #24]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	699b      	ldr	r3, [r3, #24]
 800d8fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d902:	2b00      	cmp	r3, #0
 800d904:	f000 8148 	beq.w	800db98 <f_lseek+0x406>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6a1b      	ldr	r3, [r3, #32]
 800d90c:	69ba      	ldr	r2, [r7, #24]
 800d90e:	429a      	cmp	r2, r3
 800d910:	f000 8142 	beq.w	800db98 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	7d1b      	ldrb	r3, [r3, #20]
 800d918:	b25b      	sxtb	r3, r3
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	da18      	bge.n	800d950 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	7858      	ldrb	r0, [r3, #1]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6a1a      	ldr	r2, [r3, #32]
 800d92c:	2301      	movs	r3, #1
 800d92e:	f7fd fa51 	bl	800add4 <disk_write>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d004      	beq.n	800d942 <f_lseek+0x1b0>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2201      	movs	r2, #1
 800d93c:	755a      	strb	r2, [r3, #21]
 800d93e:	2301      	movs	r3, #1
 800d940:	e12c      	b.n	800db9c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	7d1b      	ldrb	r3, [r3, #20]
 800d946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d94a:	b2da      	uxtb	r2, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	7858      	ldrb	r0, [r3, #1]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d95a:	2301      	movs	r3, #1
 800d95c:	69ba      	ldr	r2, [r7, #24]
 800d95e:	f7fd fa19 	bl	800ad94 <disk_read>
 800d962:	4603      	mov	r3, r0
 800d964:	2b00      	cmp	r3, #0
 800d966:	d004      	beq.n	800d972 <f_lseek+0x1e0>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2201      	movs	r2, #1
 800d96c:	755a      	strb	r2, [r3, #21]
 800d96e:	2301      	movs	r3, #1
 800d970:	e114      	b.n	800db9c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	69ba      	ldr	r2, [r7, #24]
 800d976:	621a      	str	r2, [r3, #32]
 800d978:	e10e      	b.n	800db98 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	683a      	ldr	r2, [r7, #0]
 800d980:	429a      	cmp	r2, r3
 800d982:	d908      	bls.n	800d996 <f_lseek+0x204>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	7d1b      	ldrb	r3, [r3, #20]
 800d988:	f003 0302 	and.w	r3, r3, #2
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d102      	bne.n	800d996 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	699b      	ldr	r3, [r3, #24]
 800d99a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d99c:	2300      	movs	r3, #0
 800d99e:	637b      	str	r3, [r7, #52]	; 0x34
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9a4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f000 80a7 	beq.w	800dafc <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	895b      	ldrh	r3, [r3, #10]
 800d9b2:	025b      	lsls	r3, r3, #9
 800d9b4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d9b6:	6a3b      	ldr	r3, [r7, #32]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d01b      	beq.n	800d9f4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	1e5a      	subs	r2, r3, #1
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	fbb2 f2f3 	udiv	r2, r2, r3
 800d9c6:	6a3b      	ldr	r3, [r7, #32]
 800d9c8:	1e59      	subs	r1, r3, #1
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d30f      	bcc.n	800d9f4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d9d4:	6a3b      	ldr	r3, [r7, #32]
 800d9d6:	1e5a      	subs	r2, r3, #1
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	425b      	negs	r3, r3
 800d9dc:	401a      	ands	r2, r3
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	699b      	ldr	r3, [r3, #24]
 800d9e6:	683a      	ldr	r2, [r7, #0]
 800d9e8:	1ad3      	subs	r3, r2, r3
 800d9ea:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	69db      	ldr	r3, [r3, #28]
 800d9f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9f2:	e022      	b.n	800da3a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	689b      	ldr	r3, [r3, #8]
 800d9f8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d119      	bne.n	800da34 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2100      	movs	r1, #0
 800da04:	4618      	mov	r0, r3
 800da06:	f7fd ff87 	bl	800b918 <create_chain>
 800da0a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800da0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d104      	bne.n	800da1c <f_lseek+0x28a>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2202      	movs	r2, #2
 800da16:	755a      	strb	r2, [r3, #21]
 800da18:	2302      	movs	r3, #2
 800da1a:	e0bf      	b.n	800db9c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da22:	d104      	bne.n	800da2e <f_lseek+0x29c>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	755a      	strb	r2, [r3, #21]
 800da2a:	2301      	movs	r3, #1
 800da2c:	e0b6      	b.n	800db9c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da32:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da38:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800da3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d05d      	beq.n	800dafc <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800da40:	e03a      	b.n	800dab8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800da42:	683a      	ldr	r2, [r7, #0]
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	1ad3      	subs	r3, r2, r3
 800da48:	603b      	str	r3, [r7, #0]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	699a      	ldr	r2, [r3, #24]
 800da4e:	69fb      	ldr	r3, [r7, #28]
 800da50:	441a      	add	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	7d1b      	ldrb	r3, [r3, #20]
 800da5a:	f003 0302 	and.w	r3, r3, #2
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00b      	beq.n	800da7a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da66:	4618      	mov	r0, r3
 800da68:	f7fd ff56 	bl	800b918 <create_chain>
 800da6c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800da6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da70:	2b00      	cmp	r3, #0
 800da72:	d108      	bne.n	800da86 <f_lseek+0x2f4>
							ofs = 0; break;
 800da74:	2300      	movs	r3, #0
 800da76:	603b      	str	r3, [r7, #0]
 800da78:	e022      	b.n	800dac0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da7e:	4618      	mov	r0, r3
 800da80:	f7fd fd51 	bl	800b526 <get_fat>
 800da84:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da8c:	d104      	bne.n	800da98 <f_lseek+0x306>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2201      	movs	r2, #1
 800da92:	755a      	strb	r2, [r3, #21]
 800da94:	2301      	movs	r3, #1
 800da96:	e081      	b.n	800db9c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800da98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d904      	bls.n	800daa8 <f_lseek+0x316>
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d304      	bcc.n	800dab2 <f_lseek+0x320>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2202      	movs	r2, #2
 800daac:	755a      	strb	r2, [r3, #21]
 800daae:	2302      	movs	r3, #2
 800dab0:	e074      	b.n	800db9c <f_lseek+0x40a>
					fp->clust = clst;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dab6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800dab8:	683a      	ldr	r2, [r7, #0]
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d8c0      	bhi.n	800da42 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	699a      	ldr	r2, [r3, #24]
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	441a      	add	r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d012      	beq.n	800dafc <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fd fd04 	bl	800b4e8 <clust2sect>
 800dae0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800dae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d104      	bne.n	800daf2 <f_lseek+0x360>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2202      	movs	r2, #2
 800daec:	755a      	strb	r2, [r3, #21]
 800daee:	2302      	movs	r3, #2
 800daf0:	e054      	b.n	800db9c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	0a5b      	lsrs	r3, r3, #9
 800daf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800daf8:	4413      	add	r3, r2
 800dafa:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	699a      	ldr	r2, [r3, #24]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	68db      	ldr	r3, [r3, #12]
 800db04:	429a      	cmp	r2, r3
 800db06:	d90a      	bls.n	800db1e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	699a      	ldr	r2, [r3, #24]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	7d1b      	ldrb	r3, [r3, #20]
 800db14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db18:	b2da      	uxtb	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	699b      	ldr	r3, [r3, #24]
 800db22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db26:	2b00      	cmp	r3, #0
 800db28:	d036      	beq.n	800db98 <f_lseek+0x406>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6a1b      	ldr	r3, [r3, #32]
 800db2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db30:	429a      	cmp	r2, r3
 800db32:	d031      	beq.n	800db98 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	7d1b      	ldrb	r3, [r3, #20]
 800db38:	b25b      	sxtb	r3, r3
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	da18      	bge.n	800db70 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	7858      	ldrb	r0, [r3, #1]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6a1a      	ldr	r2, [r3, #32]
 800db4c:	2301      	movs	r3, #1
 800db4e:	f7fd f941 	bl	800add4 <disk_write>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d004      	beq.n	800db62 <f_lseek+0x3d0>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2201      	movs	r2, #1
 800db5c:	755a      	strb	r2, [r3, #21]
 800db5e:	2301      	movs	r3, #1
 800db60:	e01c      	b.n	800db9c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	7d1b      	ldrb	r3, [r3, #20]
 800db66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db6a:	b2da      	uxtb	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	7858      	ldrb	r0, [r3, #1]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db7a:	2301      	movs	r3, #1
 800db7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db7e:	f7fd f909 	bl	800ad94 <disk_read>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d004      	beq.n	800db92 <f_lseek+0x400>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2201      	movs	r2, #1
 800db8c:	755a      	strb	r2, [r3, #21]
 800db8e:	2301      	movs	r3, #1
 800db90:	e004      	b.n	800db9c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db96:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800db98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3740      	adds	r7, #64	; 0x40
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b092      	sub	sp, #72	; 0x48
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800dbb0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800dbb4:	f107 030c 	add.w	r3, r7, #12
 800dbb8:	2200      	movs	r2, #0
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fe ff42 	bl	800ca44 <find_volume>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800dbc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f040 8099 	bne.w	800dd02 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800dbd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800dbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd8:	695a      	ldr	r2, [r3, #20]
 800dbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbdc:	699b      	ldr	r3, [r3, #24]
 800dbde:	3b02      	subs	r3, #2
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d804      	bhi.n	800dbee <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800dbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe6:	695a      	ldr	r2, [r3, #20]
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	601a      	str	r2, [r3, #0]
 800dbec:	e089      	b.n	800dd02 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800dbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d128      	bne.n	800dc4c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800dbfa:	2302      	movs	r3, #2
 800dbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc00:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800dc02:	f107 0314 	add.w	r3, r7, #20
 800dc06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fd fc8c 	bl	800b526 <get_fat>
 800dc0e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800dc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc16:	d103      	bne.n	800dc20 <f_getfree+0x7c>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dc1e:	e063      	b.n	800dce8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800dc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d103      	bne.n	800dc2e <f_getfree+0x8a>
 800dc26:	2302      	movs	r3, #2
 800dc28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dc2c:	e05c      	b.n	800dce8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800dc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d102      	bne.n	800dc3a <f_getfree+0x96>
 800dc34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc36:	3301      	adds	r3, #1
 800dc38:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800dc3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc42:	699b      	ldr	r3, [r3, #24]
 800dc44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d3db      	bcc.n	800dc02 <f_getfree+0x5e>
 800dc4a:	e04d      	b.n	800dce8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800dc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4e:	699b      	ldr	r3, [r3, #24]
 800dc50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc56:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	637b      	str	r3, [r7, #52]	; 0x34
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800dc60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d113      	bne.n	800dc8e <f_getfree+0xea>
							res = move_window(fs, sect++);
 800dc66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	63ba      	str	r2, [r7, #56]	; 0x38
 800dc6e:	4619      	mov	r1, r3
 800dc70:	f7fd fb9e 	bl	800b3b0 <move_window>
 800dc74:	4603      	mov	r3, r0
 800dc76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800dc7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d131      	bne.n	800dce6 <f_getfree+0x142>
							p = fs->win;
 800dc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc84:	3334      	adds	r3, #52	; 0x34
 800dc86:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800dc88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc8c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800dc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	2b02      	cmp	r3, #2
 800dc94:	d10f      	bne.n	800dcb6 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800dc96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc98:	f7fd f8da 	bl	800ae50 <ld_word>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d102      	bne.n	800dca8 <f_getfree+0x104>
 800dca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dca4:	3301      	adds	r3, #1
 800dca6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcaa:	3302      	adds	r3, #2
 800dcac:	633b      	str	r3, [r7, #48]	; 0x30
 800dcae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb0:	3b02      	subs	r3, #2
 800dcb2:	637b      	str	r3, [r7, #52]	; 0x34
 800dcb4:	e010      	b.n	800dcd8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800dcb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcb8:	f7fd f8e2 	bl	800ae80 <ld_dword>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d102      	bne.n	800dccc <f_getfree+0x128>
 800dcc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcc8:	3301      	adds	r3, #1
 800dcca:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800dccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcce:	3304      	adds	r3, #4
 800dcd0:	633b      	str	r3, [r7, #48]	; 0x30
 800dcd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcd4:	3b04      	subs	r3, #4
 800dcd6:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800dcd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcda:	3b01      	subs	r3, #1
 800dcdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dcde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d1bd      	bne.n	800dc60 <f_getfree+0xbc>
 800dce4:	e000      	b.n	800dce8 <f_getfree+0x144>
							if (res != FR_OK) break;
 800dce6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcec:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800dcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcf2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800dcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf6:	791a      	ldrb	r2, [r3, #4]
 800dcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfa:	f042 0201 	orr.w	r2, r2, #1
 800dcfe:	b2d2      	uxtb	r2, r2
 800dd00:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800dd02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3748      	adds	r7, #72	; 0x48
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b084      	sub	sp, #16
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	460b      	mov	r3, r1
 800dd18:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800dd1a:	78fb      	ldrb	r3, [r7, #3]
 800dd1c:	2b0a      	cmp	r3, #10
 800dd1e:	d103      	bne.n	800dd28 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800dd20:	210d      	movs	r1, #13
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f7ff fff3 	bl	800dd0e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	db25      	blt.n	800dd80 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	1c5a      	adds	r2, r3, #1
 800dd38:	60fa      	str	r2, [r7, #12]
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	78fa      	ldrb	r2, [r7, #3]
 800dd40:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2b3c      	cmp	r3, #60	; 0x3c
 800dd46:	dd12      	ble.n	800dd6e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6818      	ldr	r0, [r3, #0]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f103 010c 	add.w	r1, r3, #12
 800dd52:	68fa      	ldr	r2, [r7, #12]
 800dd54:	f107 0308 	add.w	r3, r7, #8
 800dd58:	f7ff fafe 	bl	800d358 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800dd5c:	68ba      	ldr	r2, [r7, #8]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d101      	bne.n	800dd68 <putc_bfd+0x5a>
 800dd64:	2300      	movs	r3, #0
 800dd66:	e001      	b.n	800dd6c <putc_bfd+0x5e>
 800dd68:	f04f 33ff 	mov.w	r3, #4294967295
 800dd6c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	68fa      	ldr	r2, [r7, #12]
 800dd72:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	1c5a      	adds	r2, r3, #1
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	609a      	str	r2, [r3, #8]
 800dd7e:	e000      	b.n	800dd82 <putc_bfd+0x74>
	if (i < 0) return;
 800dd80:	bf00      	nop
}
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	db16      	blt.n	800ddc6 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6818      	ldr	r0, [r3, #0]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f103 010c 	add.w	r1, r3, #12
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	461a      	mov	r2, r3
 800dda8:	f107 030c 	add.w	r3, r7, #12
 800ddac:	f7ff fad4 	bl	800d358 <f_write>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d107      	bne.n	800ddc6 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	68fa      	ldr	r2, [r7, #12]
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d102      	bne.n	800ddc6 <putc_flush+0x3e>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	689b      	ldr	r3, [r3, #8]
 800ddc4:	e001      	b.n	800ddca <putc_flush+0x42>
	return EOF;
 800ddc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800ddd2:	b480      	push	{r7}
 800ddd4:	b083      	sub	sp, #12
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2200      	movs	r2, #0
 800dde6:	605a      	str	r2, [r3, #4]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	685a      	ldr	r2, [r3, #4]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	609a      	str	r2, [r3, #8]
}
 800ddf0:	bf00      	nop
 800ddf2:	370c      	adds	r7, #12
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr

0800ddfc <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b096      	sub	sp, #88	; 0x58
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800de06:	f107 030c 	add.w	r3, r7, #12
 800de0a:	6839      	ldr	r1, [r7, #0]
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7ff ffe0 	bl	800ddd2 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800de12:	e009      	b.n	800de28 <f_puts+0x2c>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	1c5a      	adds	r2, r3, #1
 800de18:	607a      	str	r2, [r7, #4]
 800de1a:	781a      	ldrb	r2, [r3, #0]
 800de1c:	f107 030c 	add.w	r3, r7, #12
 800de20:	4611      	mov	r1, r2
 800de22:	4618      	mov	r0, r3
 800de24:	f7ff ff73 	bl	800dd0e <putc_bfd>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d1f1      	bne.n	800de14 <f_puts+0x18>
	return putc_flush(&pb);
 800de30:	f107 030c 	add.w	r3, r7, #12
 800de34:	4618      	mov	r0, r3
 800de36:	f7ff ffa7 	bl	800dd88 <putc_flush>
 800de3a:	4603      	mov	r3, r0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3758      	adds	r7, #88	; 0x58
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800de44:	b480      	push	{r7}
 800de46:	b087      	sub	sp, #28
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	4613      	mov	r3, r2
 800de50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800de52:	2301      	movs	r3, #1
 800de54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800de56:	2300      	movs	r3, #0
 800de58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800de5a:	4b1f      	ldr	r3, [pc, #124]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de5c:	7a5b      	ldrb	r3, [r3, #9]
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	2b00      	cmp	r3, #0
 800de62:	d131      	bne.n	800dec8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800de64:	4b1c      	ldr	r3, [pc, #112]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de66:	7a5b      	ldrb	r3, [r3, #9]
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	461a      	mov	r2, r3
 800de6c:	4b1a      	ldr	r3, [pc, #104]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de6e:	2100      	movs	r1, #0
 800de70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800de72:	4b19      	ldr	r3, [pc, #100]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de74:	7a5b      	ldrb	r3, [r3, #9]
 800de76:	b2db      	uxtb	r3, r3
 800de78:	4a17      	ldr	r2, [pc, #92]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	4413      	add	r3, r2
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800de82:	4b15      	ldr	r3, [pc, #84]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de84:	7a5b      	ldrb	r3, [r3, #9]
 800de86:	b2db      	uxtb	r3, r3
 800de88:	461a      	mov	r2, r3
 800de8a:	4b13      	ldr	r3, [pc, #76]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de8c:	4413      	add	r3, r2
 800de8e:	79fa      	ldrb	r2, [r7, #7]
 800de90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800de92:	4b11      	ldr	r3, [pc, #68]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de94:	7a5b      	ldrb	r3, [r3, #9]
 800de96:	b2db      	uxtb	r3, r3
 800de98:	1c5a      	adds	r2, r3, #1
 800de9a:	b2d1      	uxtb	r1, r2
 800de9c:	4a0e      	ldr	r2, [pc, #56]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de9e:	7251      	strb	r1, [r2, #9]
 800dea0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dea2:	7dbb      	ldrb	r3, [r7, #22]
 800dea4:	3330      	adds	r3, #48	; 0x30
 800dea6:	b2da      	uxtb	r2, r3
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	3301      	adds	r3, #1
 800deb0:	223a      	movs	r2, #58	; 0x3a
 800deb2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	3302      	adds	r3, #2
 800deb8:	222f      	movs	r2, #47	; 0x2f
 800deba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	3303      	adds	r3, #3
 800dec0:	2200      	movs	r2, #0
 800dec2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dec4:	2300      	movs	r3, #0
 800dec6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800deca:	4618      	mov	r0, r3
 800decc:	371c      	adds	r7, #28
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop
 800ded8:	20001884 	.word	0x20001884

0800dedc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dee6:	2200      	movs	r2, #0
 800dee8:	6839      	ldr	r1, [r7, #0]
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f7ff ffaa 	bl	800de44 <FATFS_LinkDriverEx>
 800def0:	4603      	mov	r3, r0
}
 800def2:	4618      	mov	r0, r3
 800def4:	3708      	adds	r7, #8
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
	...

0800defc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	4603      	mov	r3, r0
 800df04:	6039      	str	r1, [r7, #0]
 800df06:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800df08:	88fb      	ldrh	r3, [r7, #6]
 800df0a:	2b7f      	cmp	r3, #127	; 0x7f
 800df0c:	d802      	bhi.n	800df14 <ff_convert+0x18>
		c = chr;
 800df0e:	88fb      	ldrh	r3, [r7, #6]
 800df10:	81fb      	strh	r3, [r7, #14]
 800df12:	e025      	b.n	800df60 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00b      	beq.n	800df32 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800df1a:	88fb      	ldrh	r3, [r7, #6]
 800df1c:	2bff      	cmp	r3, #255	; 0xff
 800df1e:	d805      	bhi.n	800df2c <ff_convert+0x30>
 800df20:	88fb      	ldrh	r3, [r7, #6]
 800df22:	3b80      	subs	r3, #128	; 0x80
 800df24:	4a12      	ldr	r2, [pc, #72]	; (800df70 <ff_convert+0x74>)
 800df26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df2a:	e000      	b.n	800df2e <ff_convert+0x32>
 800df2c:	2300      	movs	r3, #0
 800df2e:	81fb      	strh	r3, [r7, #14]
 800df30:	e016      	b.n	800df60 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800df32:	2300      	movs	r3, #0
 800df34:	81fb      	strh	r3, [r7, #14]
 800df36:	e009      	b.n	800df4c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800df38:	89fb      	ldrh	r3, [r7, #14]
 800df3a:	4a0d      	ldr	r2, [pc, #52]	; (800df70 <ff_convert+0x74>)
 800df3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df40:	88fa      	ldrh	r2, [r7, #6]
 800df42:	429a      	cmp	r2, r3
 800df44:	d006      	beq.n	800df54 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800df46:	89fb      	ldrh	r3, [r7, #14]
 800df48:	3301      	adds	r3, #1
 800df4a:	81fb      	strh	r3, [r7, #14]
 800df4c:	89fb      	ldrh	r3, [r7, #14]
 800df4e:	2b7f      	cmp	r3, #127	; 0x7f
 800df50:	d9f2      	bls.n	800df38 <ff_convert+0x3c>
 800df52:	e000      	b.n	800df56 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800df54:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800df56:	89fb      	ldrh	r3, [r7, #14]
 800df58:	3380      	adds	r3, #128	; 0x80
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800df60:	89fb      	ldrh	r3, [r7, #14]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3714      	adds	r7, #20
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	08012ebc 	.word	0x08012ebc

0800df74 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800df74:	b480      	push	{r7}
 800df76:	b087      	sub	sp, #28
 800df78:	af00      	add	r7, sp, #0
 800df7a:	4603      	mov	r3, r0
 800df7c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800df7e:	88fb      	ldrh	r3, [r7, #6]
 800df80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df84:	d201      	bcs.n	800df8a <ff_wtoupper+0x16>
 800df86:	4b3e      	ldr	r3, [pc, #248]	; (800e080 <ff_wtoupper+0x10c>)
 800df88:	e000      	b.n	800df8c <ff_wtoupper+0x18>
 800df8a:	4b3e      	ldr	r3, [pc, #248]	; (800e084 <ff_wtoupper+0x110>)
 800df8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	1c9a      	adds	r2, r3, #2
 800df92:	617a      	str	r2, [r7, #20]
 800df94:	881b      	ldrh	r3, [r3, #0]
 800df96:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800df98:	8a7b      	ldrh	r3, [r7, #18]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d068      	beq.n	800e070 <ff_wtoupper+0xfc>
 800df9e:	88fa      	ldrh	r2, [r7, #6]
 800dfa0:	8a7b      	ldrh	r3, [r7, #18]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d364      	bcc.n	800e070 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	1c9a      	adds	r2, r3, #2
 800dfaa:	617a      	str	r2, [r7, #20]
 800dfac:	881b      	ldrh	r3, [r3, #0]
 800dfae:	823b      	strh	r3, [r7, #16]
 800dfb0:	8a3b      	ldrh	r3, [r7, #16]
 800dfb2:	0a1b      	lsrs	r3, r3, #8
 800dfb4:	81fb      	strh	r3, [r7, #14]
 800dfb6:	8a3b      	ldrh	r3, [r7, #16]
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800dfbc:	88fa      	ldrh	r2, [r7, #6]
 800dfbe:	8a79      	ldrh	r1, [r7, #18]
 800dfc0:	8a3b      	ldrh	r3, [r7, #16]
 800dfc2:	440b      	add	r3, r1
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	da49      	bge.n	800e05c <ff_wtoupper+0xe8>
			switch (cmd) {
 800dfc8:	89fb      	ldrh	r3, [r7, #14]
 800dfca:	2b08      	cmp	r3, #8
 800dfcc:	d84f      	bhi.n	800e06e <ff_wtoupper+0xfa>
 800dfce:	a201      	add	r2, pc, #4	; (adr r2, 800dfd4 <ff_wtoupper+0x60>)
 800dfd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd4:	0800dff9 	.word	0x0800dff9
 800dfd8:	0800e00b 	.word	0x0800e00b
 800dfdc:	0800e021 	.word	0x0800e021
 800dfe0:	0800e029 	.word	0x0800e029
 800dfe4:	0800e031 	.word	0x0800e031
 800dfe8:	0800e039 	.word	0x0800e039
 800dfec:	0800e041 	.word	0x0800e041
 800dff0:	0800e049 	.word	0x0800e049
 800dff4:	0800e051 	.word	0x0800e051
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800dff8:	88fa      	ldrh	r2, [r7, #6]
 800dffa:	8a7b      	ldrh	r3, [r7, #18]
 800dffc:	1ad3      	subs	r3, r2, r3
 800dffe:	005b      	lsls	r3, r3, #1
 800e000:	697a      	ldr	r2, [r7, #20]
 800e002:	4413      	add	r3, r2
 800e004:	881b      	ldrh	r3, [r3, #0]
 800e006:	80fb      	strh	r3, [r7, #6]
 800e008:	e027      	b.n	800e05a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e00a:	88fa      	ldrh	r2, [r7, #6]
 800e00c:	8a7b      	ldrh	r3, [r7, #18]
 800e00e:	1ad3      	subs	r3, r2, r3
 800e010:	b29b      	uxth	r3, r3
 800e012:	f003 0301 	and.w	r3, r3, #1
 800e016:	b29b      	uxth	r3, r3
 800e018:	88fa      	ldrh	r2, [r7, #6]
 800e01a:	1ad3      	subs	r3, r2, r3
 800e01c:	80fb      	strh	r3, [r7, #6]
 800e01e:	e01c      	b.n	800e05a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e020:	88fb      	ldrh	r3, [r7, #6]
 800e022:	3b10      	subs	r3, #16
 800e024:	80fb      	strh	r3, [r7, #6]
 800e026:	e018      	b.n	800e05a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e028:	88fb      	ldrh	r3, [r7, #6]
 800e02a:	3b20      	subs	r3, #32
 800e02c:	80fb      	strh	r3, [r7, #6]
 800e02e:	e014      	b.n	800e05a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e030:	88fb      	ldrh	r3, [r7, #6]
 800e032:	3b30      	subs	r3, #48	; 0x30
 800e034:	80fb      	strh	r3, [r7, #6]
 800e036:	e010      	b.n	800e05a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e038:	88fb      	ldrh	r3, [r7, #6]
 800e03a:	3b1a      	subs	r3, #26
 800e03c:	80fb      	strh	r3, [r7, #6]
 800e03e:	e00c      	b.n	800e05a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e040:	88fb      	ldrh	r3, [r7, #6]
 800e042:	3308      	adds	r3, #8
 800e044:	80fb      	strh	r3, [r7, #6]
 800e046:	e008      	b.n	800e05a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e048:	88fb      	ldrh	r3, [r7, #6]
 800e04a:	3b50      	subs	r3, #80	; 0x50
 800e04c:	80fb      	strh	r3, [r7, #6]
 800e04e:	e004      	b.n	800e05a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e050:	88fb      	ldrh	r3, [r7, #6]
 800e052:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e056:	80fb      	strh	r3, [r7, #6]
 800e058:	bf00      	nop
			}
			break;
 800e05a:	e008      	b.n	800e06e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e05c:	89fb      	ldrh	r3, [r7, #14]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d195      	bne.n	800df8e <ff_wtoupper+0x1a>
 800e062:	8a3b      	ldrh	r3, [r7, #16]
 800e064:	005b      	lsls	r3, r3, #1
 800e066:	697a      	ldr	r2, [r7, #20]
 800e068:	4413      	add	r3, r2
 800e06a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e06c:	e78f      	b.n	800df8e <ff_wtoupper+0x1a>
			break;
 800e06e:	bf00      	nop
	}

	return chr;
 800e070:	88fb      	ldrh	r3, [r7, #6]
}
 800e072:	4618      	mov	r0, r3
 800e074:	371c      	adds	r7, #28
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	08012fbc 	.word	0x08012fbc
 800e084:	080131b0 	.word	0x080131b0

0800e088 <atof>:
 800e088:	2100      	movs	r1, #0
 800e08a:	f001 bd25 	b.w	800fad8 <strtod>
	...

0800e090 <__errno>:
 800e090:	4b01      	ldr	r3, [pc, #4]	; (800e098 <__errno+0x8>)
 800e092:	6818      	ldr	r0, [r3, #0]
 800e094:	4770      	bx	lr
 800e096:	bf00      	nop
 800e098:	20000024 	.word	0x20000024

0800e09c <__libc_init_array>:
 800e09c:	b570      	push	{r4, r5, r6, lr}
 800e09e:	4d0d      	ldr	r5, [pc, #52]	; (800e0d4 <__libc_init_array+0x38>)
 800e0a0:	4c0d      	ldr	r4, [pc, #52]	; (800e0d8 <__libc_init_array+0x3c>)
 800e0a2:	1b64      	subs	r4, r4, r5
 800e0a4:	10a4      	asrs	r4, r4, #2
 800e0a6:	2600      	movs	r6, #0
 800e0a8:	42a6      	cmp	r6, r4
 800e0aa:	d109      	bne.n	800e0c0 <__libc_init_array+0x24>
 800e0ac:	4d0b      	ldr	r5, [pc, #44]	; (800e0dc <__libc_init_array+0x40>)
 800e0ae:	4c0c      	ldr	r4, [pc, #48]	; (800e0e0 <__libc_init_array+0x44>)
 800e0b0:	f004 fd16 	bl	8012ae0 <_init>
 800e0b4:	1b64      	subs	r4, r4, r5
 800e0b6:	10a4      	asrs	r4, r4, #2
 800e0b8:	2600      	movs	r6, #0
 800e0ba:	42a6      	cmp	r6, r4
 800e0bc:	d105      	bne.n	800e0ca <__libc_init_array+0x2e>
 800e0be:	bd70      	pop	{r4, r5, r6, pc}
 800e0c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0c4:	4798      	blx	r3
 800e0c6:	3601      	adds	r6, #1
 800e0c8:	e7ee      	b.n	800e0a8 <__libc_init_array+0xc>
 800e0ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0ce:	4798      	blx	r3
 800e0d0:	3601      	adds	r6, #1
 800e0d2:	e7f2      	b.n	800e0ba <__libc_init_array+0x1e>
 800e0d4:	08013778 	.word	0x08013778
 800e0d8:	08013778 	.word	0x08013778
 800e0dc:	08013778 	.word	0x08013778
 800e0e0:	0801377c 	.word	0x0801377c

0800e0e4 <memcpy>:
 800e0e4:	440a      	add	r2, r1
 800e0e6:	4291      	cmp	r1, r2
 800e0e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e0ec:	d100      	bne.n	800e0f0 <memcpy+0xc>
 800e0ee:	4770      	bx	lr
 800e0f0:	b510      	push	{r4, lr}
 800e0f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0fa:	4291      	cmp	r1, r2
 800e0fc:	d1f9      	bne.n	800e0f2 <memcpy+0xe>
 800e0fe:	bd10      	pop	{r4, pc}

0800e100 <memset>:
 800e100:	4402      	add	r2, r0
 800e102:	4603      	mov	r3, r0
 800e104:	4293      	cmp	r3, r2
 800e106:	d100      	bne.n	800e10a <memset+0xa>
 800e108:	4770      	bx	lr
 800e10a:	f803 1b01 	strb.w	r1, [r3], #1
 800e10e:	e7f9      	b.n	800e104 <memset+0x4>

0800e110 <__cvt>:
 800e110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e114:	ec55 4b10 	vmov	r4, r5, d0
 800e118:	2d00      	cmp	r5, #0
 800e11a:	460e      	mov	r6, r1
 800e11c:	4619      	mov	r1, r3
 800e11e:	462b      	mov	r3, r5
 800e120:	bfbb      	ittet	lt
 800e122:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e126:	461d      	movlt	r5, r3
 800e128:	2300      	movge	r3, #0
 800e12a:	232d      	movlt	r3, #45	; 0x2d
 800e12c:	700b      	strb	r3, [r1, #0]
 800e12e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e130:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e134:	4691      	mov	r9, r2
 800e136:	f023 0820 	bic.w	r8, r3, #32
 800e13a:	bfbc      	itt	lt
 800e13c:	4622      	movlt	r2, r4
 800e13e:	4614      	movlt	r4, r2
 800e140:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e144:	d005      	beq.n	800e152 <__cvt+0x42>
 800e146:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e14a:	d100      	bne.n	800e14e <__cvt+0x3e>
 800e14c:	3601      	adds	r6, #1
 800e14e:	2102      	movs	r1, #2
 800e150:	e000      	b.n	800e154 <__cvt+0x44>
 800e152:	2103      	movs	r1, #3
 800e154:	ab03      	add	r3, sp, #12
 800e156:	9301      	str	r3, [sp, #4]
 800e158:	ab02      	add	r3, sp, #8
 800e15a:	9300      	str	r3, [sp, #0]
 800e15c:	ec45 4b10 	vmov	d0, r4, r5
 800e160:	4653      	mov	r3, sl
 800e162:	4632      	mov	r2, r6
 800e164:	f001 fe50 	bl	800fe08 <_dtoa_r>
 800e168:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e16c:	4607      	mov	r7, r0
 800e16e:	d102      	bne.n	800e176 <__cvt+0x66>
 800e170:	f019 0f01 	tst.w	r9, #1
 800e174:	d022      	beq.n	800e1bc <__cvt+0xac>
 800e176:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e17a:	eb07 0906 	add.w	r9, r7, r6
 800e17e:	d110      	bne.n	800e1a2 <__cvt+0x92>
 800e180:	783b      	ldrb	r3, [r7, #0]
 800e182:	2b30      	cmp	r3, #48	; 0x30
 800e184:	d10a      	bne.n	800e19c <__cvt+0x8c>
 800e186:	2200      	movs	r2, #0
 800e188:	2300      	movs	r3, #0
 800e18a:	4620      	mov	r0, r4
 800e18c:	4629      	mov	r1, r5
 800e18e:	f7f2 fcab 	bl	8000ae8 <__aeabi_dcmpeq>
 800e192:	b918      	cbnz	r0, 800e19c <__cvt+0x8c>
 800e194:	f1c6 0601 	rsb	r6, r6, #1
 800e198:	f8ca 6000 	str.w	r6, [sl]
 800e19c:	f8da 3000 	ldr.w	r3, [sl]
 800e1a0:	4499      	add	r9, r3
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	f7f2 fc9d 	bl	8000ae8 <__aeabi_dcmpeq>
 800e1ae:	b108      	cbz	r0, 800e1b4 <__cvt+0xa4>
 800e1b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e1b4:	2230      	movs	r2, #48	; 0x30
 800e1b6:	9b03      	ldr	r3, [sp, #12]
 800e1b8:	454b      	cmp	r3, r9
 800e1ba:	d307      	bcc.n	800e1cc <__cvt+0xbc>
 800e1bc:	9b03      	ldr	r3, [sp, #12]
 800e1be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1c0:	1bdb      	subs	r3, r3, r7
 800e1c2:	4638      	mov	r0, r7
 800e1c4:	6013      	str	r3, [r2, #0]
 800e1c6:	b004      	add	sp, #16
 800e1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1cc:	1c59      	adds	r1, r3, #1
 800e1ce:	9103      	str	r1, [sp, #12]
 800e1d0:	701a      	strb	r2, [r3, #0]
 800e1d2:	e7f0      	b.n	800e1b6 <__cvt+0xa6>

0800e1d4 <__exponent>:
 800e1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2900      	cmp	r1, #0
 800e1da:	bfb8      	it	lt
 800e1dc:	4249      	neglt	r1, r1
 800e1de:	f803 2b02 	strb.w	r2, [r3], #2
 800e1e2:	bfb4      	ite	lt
 800e1e4:	222d      	movlt	r2, #45	; 0x2d
 800e1e6:	222b      	movge	r2, #43	; 0x2b
 800e1e8:	2909      	cmp	r1, #9
 800e1ea:	7042      	strb	r2, [r0, #1]
 800e1ec:	dd2a      	ble.n	800e244 <__exponent+0x70>
 800e1ee:	f10d 0407 	add.w	r4, sp, #7
 800e1f2:	46a4      	mov	ip, r4
 800e1f4:	270a      	movs	r7, #10
 800e1f6:	46a6      	mov	lr, r4
 800e1f8:	460a      	mov	r2, r1
 800e1fa:	fb91 f6f7 	sdiv	r6, r1, r7
 800e1fe:	fb07 1516 	mls	r5, r7, r6, r1
 800e202:	3530      	adds	r5, #48	; 0x30
 800e204:	2a63      	cmp	r2, #99	; 0x63
 800e206:	f104 34ff 	add.w	r4, r4, #4294967295
 800e20a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e20e:	4631      	mov	r1, r6
 800e210:	dcf1      	bgt.n	800e1f6 <__exponent+0x22>
 800e212:	3130      	adds	r1, #48	; 0x30
 800e214:	f1ae 0502 	sub.w	r5, lr, #2
 800e218:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e21c:	1c44      	adds	r4, r0, #1
 800e21e:	4629      	mov	r1, r5
 800e220:	4561      	cmp	r1, ip
 800e222:	d30a      	bcc.n	800e23a <__exponent+0x66>
 800e224:	f10d 0209 	add.w	r2, sp, #9
 800e228:	eba2 020e 	sub.w	r2, r2, lr
 800e22c:	4565      	cmp	r5, ip
 800e22e:	bf88      	it	hi
 800e230:	2200      	movhi	r2, #0
 800e232:	4413      	add	r3, r2
 800e234:	1a18      	subs	r0, r3, r0
 800e236:	b003      	add	sp, #12
 800e238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e23a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e23e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e242:	e7ed      	b.n	800e220 <__exponent+0x4c>
 800e244:	2330      	movs	r3, #48	; 0x30
 800e246:	3130      	adds	r1, #48	; 0x30
 800e248:	7083      	strb	r3, [r0, #2]
 800e24a:	70c1      	strb	r1, [r0, #3]
 800e24c:	1d03      	adds	r3, r0, #4
 800e24e:	e7f1      	b.n	800e234 <__exponent+0x60>

0800e250 <_printf_float>:
 800e250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e254:	ed2d 8b02 	vpush	{d8}
 800e258:	b08d      	sub	sp, #52	; 0x34
 800e25a:	460c      	mov	r4, r1
 800e25c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e260:	4616      	mov	r6, r2
 800e262:	461f      	mov	r7, r3
 800e264:	4605      	mov	r5, r0
 800e266:	f002 ff3f 	bl	80110e8 <_localeconv_r>
 800e26a:	f8d0 a000 	ldr.w	sl, [r0]
 800e26e:	4650      	mov	r0, sl
 800e270:	f7f1 ffb8 	bl	80001e4 <strlen>
 800e274:	2300      	movs	r3, #0
 800e276:	930a      	str	r3, [sp, #40]	; 0x28
 800e278:	6823      	ldr	r3, [r4, #0]
 800e27a:	9305      	str	r3, [sp, #20]
 800e27c:	f8d8 3000 	ldr.w	r3, [r8]
 800e280:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e284:	3307      	adds	r3, #7
 800e286:	f023 0307 	bic.w	r3, r3, #7
 800e28a:	f103 0208 	add.w	r2, r3, #8
 800e28e:	f8c8 2000 	str.w	r2, [r8]
 800e292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e296:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e29a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e29e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e2a2:	9307      	str	r3, [sp, #28]
 800e2a4:	f8cd 8018 	str.w	r8, [sp, #24]
 800e2a8:	ee08 0a10 	vmov	s16, r0
 800e2ac:	4b9f      	ldr	r3, [pc, #636]	; (800e52c <_printf_float+0x2dc>)
 800e2ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e2b6:	f7f2 fc49 	bl	8000b4c <__aeabi_dcmpun>
 800e2ba:	bb88      	cbnz	r0, 800e320 <_printf_float+0xd0>
 800e2bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e2c0:	4b9a      	ldr	r3, [pc, #616]	; (800e52c <_printf_float+0x2dc>)
 800e2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e2c6:	f7f2 fc23 	bl	8000b10 <__aeabi_dcmple>
 800e2ca:	bb48      	cbnz	r0, 800e320 <_printf_float+0xd0>
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	4640      	mov	r0, r8
 800e2d2:	4649      	mov	r1, r9
 800e2d4:	f7f2 fc12 	bl	8000afc <__aeabi_dcmplt>
 800e2d8:	b110      	cbz	r0, 800e2e0 <_printf_float+0x90>
 800e2da:	232d      	movs	r3, #45	; 0x2d
 800e2dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2e0:	4b93      	ldr	r3, [pc, #588]	; (800e530 <_printf_float+0x2e0>)
 800e2e2:	4894      	ldr	r0, [pc, #592]	; (800e534 <_printf_float+0x2e4>)
 800e2e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e2e8:	bf94      	ite	ls
 800e2ea:	4698      	movls	r8, r3
 800e2ec:	4680      	movhi	r8, r0
 800e2ee:	2303      	movs	r3, #3
 800e2f0:	6123      	str	r3, [r4, #16]
 800e2f2:	9b05      	ldr	r3, [sp, #20]
 800e2f4:	f023 0204 	bic.w	r2, r3, #4
 800e2f8:	6022      	str	r2, [r4, #0]
 800e2fa:	f04f 0900 	mov.w	r9, #0
 800e2fe:	9700      	str	r7, [sp, #0]
 800e300:	4633      	mov	r3, r6
 800e302:	aa0b      	add	r2, sp, #44	; 0x2c
 800e304:	4621      	mov	r1, r4
 800e306:	4628      	mov	r0, r5
 800e308:	f000 f9d8 	bl	800e6bc <_printf_common>
 800e30c:	3001      	adds	r0, #1
 800e30e:	f040 8090 	bne.w	800e432 <_printf_float+0x1e2>
 800e312:	f04f 30ff 	mov.w	r0, #4294967295
 800e316:	b00d      	add	sp, #52	; 0x34
 800e318:	ecbd 8b02 	vpop	{d8}
 800e31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e320:	4642      	mov	r2, r8
 800e322:	464b      	mov	r3, r9
 800e324:	4640      	mov	r0, r8
 800e326:	4649      	mov	r1, r9
 800e328:	f7f2 fc10 	bl	8000b4c <__aeabi_dcmpun>
 800e32c:	b140      	cbz	r0, 800e340 <_printf_float+0xf0>
 800e32e:	464b      	mov	r3, r9
 800e330:	2b00      	cmp	r3, #0
 800e332:	bfbc      	itt	lt
 800e334:	232d      	movlt	r3, #45	; 0x2d
 800e336:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e33a:	487f      	ldr	r0, [pc, #508]	; (800e538 <_printf_float+0x2e8>)
 800e33c:	4b7f      	ldr	r3, [pc, #508]	; (800e53c <_printf_float+0x2ec>)
 800e33e:	e7d1      	b.n	800e2e4 <_printf_float+0x94>
 800e340:	6863      	ldr	r3, [r4, #4]
 800e342:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e346:	9206      	str	r2, [sp, #24]
 800e348:	1c5a      	adds	r2, r3, #1
 800e34a:	d13f      	bne.n	800e3cc <_printf_float+0x17c>
 800e34c:	2306      	movs	r3, #6
 800e34e:	6063      	str	r3, [r4, #4]
 800e350:	9b05      	ldr	r3, [sp, #20]
 800e352:	6861      	ldr	r1, [r4, #4]
 800e354:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e358:	2300      	movs	r3, #0
 800e35a:	9303      	str	r3, [sp, #12]
 800e35c:	ab0a      	add	r3, sp, #40	; 0x28
 800e35e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e362:	ab09      	add	r3, sp, #36	; 0x24
 800e364:	ec49 8b10 	vmov	d0, r8, r9
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	6022      	str	r2, [r4, #0]
 800e36c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e370:	4628      	mov	r0, r5
 800e372:	f7ff fecd 	bl	800e110 <__cvt>
 800e376:	9b06      	ldr	r3, [sp, #24]
 800e378:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e37a:	2b47      	cmp	r3, #71	; 0x47
 800e37c:	4680      	mov	r8, r0
 800e37e:	d108      	bne.n	800e392 <_printf_float+0x142>
 800e380:	1cc8      	adds	r0, r1, #3
 800e382:	db02      	blt.n	800e38a <_printf_float+0x13a>
 800e384:	6863      	ldr	r3, [r4, #4]
 800e386:	4299      	cmp	r1, r3
 800e388:	dd41      	ble.n	800e40e <_printf_float+0x1be>
 800e38a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e38e:	fa5f fb8b 	uxtb.w	fp, fp
 800e392:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e396:	d820      	bhi.n	800e3da <_printf_float+0x18a>
 800e398:	3901      	subs	r1, #1
 800e39a:	465a      	mov	r2, fp
 800e39c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e3a0:	9109      	str	r1, [sp, #36]	; 0x24
 800e3a2:	f7ff ff17 	bl	800e1d4 <__exponent>
 800e3a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3a8:	1813      	adds	r3, r2, r0
 800e3aa:	2a01      	cmp	r2, #1
 800e3ac:	4681      	mov	r9, r0
 800e3ae:	6123      	str	r3, [r4, #16]
 800e3b0:	dc02      	bgt.n	800e3b8 <_printf_float+0x168>
 800e3b2:	6822      	ldr	r2, [r4, #0]
 800e3b4:	07d2      	lsls	r2, r2, #31
 800e3b6:	d501      	bpl.n	800e3bc <_printf_float+0x16c>
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	6123      	str	r3, [r4, #16]
 800e3bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d09c      	beq.n	800e2fe <_printf_float+0xae>
 800e3c4:	232d      	movs	r3, #45	; 0x2d
 800e3c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3ca:	e798      	b.n	800e2fe <_printf_float+0xae>
 800e3cc:	9a06      	ldr	r2, [sp, #24]
 800e3ce:	2a47      	cmp	r2, #71	; 0x47
 800e3d0:	d1be      	bne.n	800e350 <_printf_float+0x100>
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d1bc      	bne.n	800e350 <_printf_float+0x100>
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	e7b9      	b.n	800e34e <_printf_float+0xfe>
 800e3da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e3de:	d118      	bne.n	800e412 <_printf_float+0x1c2>
 800e3e0:	2900      	cmp	r1, #0
 800e3e2:	6863      	ldr	r3, [r4, #4]
 800e3e4:	dd0b      	ble.n	800e3fe <_printf_float+0x1ae>
 800e3e6:	6121      	str	r1, [r4, #16]
 800e3e8:	b913      	cbnz	r3, 800e3f0 <_printf_float+0x1a0>
 800e3ea:	6822      	ldr	r2, [r4, #0]
 800e3ec:	07d0      	lsls	r0, r2, #31
 800e3ee:	d502      	bpl.n	800e3f6 <_printf_float+0x1a6>
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	440b      	add	r3, r1
 800e3f4:	6123      	str	r3, [r4, #16]
 800e3f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800e3f8:	f04f 0900 	mov.w	r9, #0
 800e3fc:	e7de      	b.n	800e3bc <_printf_float+0x16c>
 800e3fe:	b913      	cbnz	r3, 800e406 <_printf_float+0x1b6>
 800e400:	6822      	ldr	r2, [r4, #0]
 800e402:	07d2      	lsls	r2, r2, #31
 800e404:	d501      	bpl.n	800e40a <_printf_float+0x1ba>
 800e406:	3302      	adds	r3, #2
 800e408:	e7f4      	b.n	800e3f4 <_printf_float+0x1a4>
 800e40a:	2301      	movs	r3, #1
 800e40c:	e7f2      	b.n	800e3f4 <_printf_float+0x1a4>
 800e40e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e414:	4299      	cmp	r1, r3
 800e416:	db05      	blt.n	800e424 <_printf_float+0x1d4>
 800e418:	6823      	ldr	r3, [r4, #0]
 800e41a:	6121      	str	r1, [r4, #16]
 800e41c:	07d8      	lsls	r0, r3, #31
 800e41e:	d5ea      	bpl.n	800e3f6 <_printf_float+0x1a6>
 800e420:	1c4b      	adds	r3, r1, #1
 800e422:	e7e7      	b.n	800e3f4 <_printf_float+0x1a4>
 800e424:	2900      	cmp	r1, #0
 800e426:	bfd4      	ite	le
 800e428:	f1c1 0202 	rsble	r2, r1, #2
 800e42c:	2201      	movgt	r2, #1
 800e42e:	4413      	add	r3, r2
 800e430:	e7e0      	b.n	800e3f4 <_printf_float+0x1a4>
 800e432:	6823      	ldr	r3, [r4, #0]
 800e434:	055a      	lsls	r2, r3, #21
 800e436:	d407      	bmi.n	800e448 <_printf_float+0x1f8>
 800e438:	6923      	ldr	r3, [r4, #16]
 800e43a:	4642      	mov	r2, r8
 800e43c:	4631      	mov	r1, r6
 800e43e:	4628      	mov	r0, r5
 800e440:	47b8      	blx	r7
 800e442:	3001      	adds	r0, #1
 800e444:	d12c      	bne.n	800e4a0 <_printf_float+0x250>
 800e446:	e764      	b.n	800e312 <_printf_float+0xc2>
 800e448:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e44c:	f240 80e0 	bls.w	800e610 <_printf_float+0x3c0>
 800e450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e454:	2200      	movs	r2, #0
 800e456:	2300      	movs	r3, #0
 800e458:	f7f2 fb46 	bl	8000ae8 <__aeabi_dcmpeq>
 800e45c:	2800      	cmp	r0, #0
 800e45e:	d034      	beq.n	800e4ca <_printf_float+0x27a>
 800e460:	4a37      	ldr	r2, [pc, #220]	; (800e540 <_printf_float+0x2f0>)
 800e462:	2301      	movs	r3, #1
 800e464:	4631      	mov	r1, r6
 800e466:	4628      	mov	r0, r5
 800e468:	47b8      	blx	r7
 800e46a:	3001      	adds	r0, #1
 800e46c:	f43f af51 	beq.w	800e312 <_printf_float+0xc2>
 800e470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e474:	429a      	cmp	r2, r3
 800e476:	db02      	blt.n	800e47e <_printf_float+0x22e>
 800e478:	6823      	ldr	r3, [r4, #0]
 800e47a:	07d8      	lsls	r0, r3, #31
 800e47c:	d510      	bpl.n	800e4a0 <_printf_float+0x250>
 800e47e:	ee18 3a10 	vmov	r3, s16
 800e482:	4652      	mov	r2, sl
 800e484:	4631      	mov	r1, r6
 800e486:	4628      	mov	r0, r5
 800e488:	47b8      	blx	r7
 800e48a:	3001      	adds	r0, #1
 800e48c:	f43f af41 	beq.w	800e312 <_printf_float+0xc2>
 800e490:	f04f 0800 	mov.w	r8, #0
 800e494:	f104 091a 	add.w	r9, r4, #26
 800e498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e49a:	3b01      	subs	r3, #1
 800e49c:	4543      	cmp	r3, r8
 800e49e:	dc09      	bgt.n	800e4b4 <_printf_float+0x264>
 800e4a0:	6823      	ldr	r3, [r4, #0]
 800e4a2:	079b      	lsls	r3, r3, #30
 800e4a4:	f100 8105 	bmi.w	800e6b2 <_printf_float+0x462>
 800e4a8:	68e0      	ldr	r0, [r4, #12]
 800e4aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4ac:	4298      	cmp	r0, r3
 800e4ae:	bfb8      	it	lt
 800e4b0:	4618      	movlt	r0, r3
 800e4b2:	e730      	b.n	800e316 <_printf_float+0xc6>
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	464a      	mov	r2, r9
 800e4b8:	4631      	mov	r1, r6
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	47b8      	blx	r7
 800e4be:	3001      	adds	r0, #1
 800e4c0:	f43f af27 	beq.w	800e312 <_printf_float+0xc2>
 800e4c4:	f108 0801 	add.w	r8, r8, #1
 800e4c8:	e7e6      	b.n	800e498 <_printf_float+0x248>
 800e4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	dc39      	bgt.n	800e544 <_printf_float+0x2f4>
 800e4d0:	4a1b      	ldr	r2, [pc, #108]	; (800e540 <_printf_float+0x2f0>)
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	4631      	mov	r1, r6
 800e4d6:	4628      	mov	r0, r5
 800e4d8:	47b8      	blx	r7
 800e4da:	3001      	adds	r0, #1
 800e4dc:	f43f af19 	beq.w	800e312 <_printf_float+0xc2>
 800e4e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	d102      	bne.n	800e4ee <_printf_float+0x29e>
 800e4e8:	6823      	ldr	r3, [r4, #0]
 800e4ea:	07d9      	lsls	r1, r3, #31
 800e4ec:	d5d8      	bpl.n	800e4a0 <_printf_float+0x250>
 800e4ee:	ee18 3a10 	vmov	r3, s16
 800e4f2:	4652      	mov	r2, sl
 800e4f4:	4631      	mov	r1, r6
 800e4f6:	4628      	mov	r0, r5
 800e4f8:	47b8      	blx	r7
 800e4fa:	3001      	adds	r0, #1
 800e4fc:	f43f af09 	beq.w	800e312 <_printf_float+0xc2>
 800e500:	f04f 0900 	mov.w	r9, #0
 800e504:	f104 0a1a 	add.w	sl, r4, #26
 800e508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e50a:	425b      	negs	r3, r3
 800e50c:	454b      	cmp	r3, r9
 800e50e:	dc01      	bgt.n	800e514 <_printf_float+0x2c4>
 800e510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e512:	e792      	b.n	800e43a <_printf_float+0x1ea>
 800e514:	2301      	movs	r3, #1
 800e516:	4652      	mov	r2, sl
 800e518:	4631      	mov	r1, r6
 800e51a:	4628      	mov	r0, r5
 800e51c:	47b8      	blx	r7
 800e51e:	3001      	adds	r0, #1
 800e520:	f43f aef7 	beq.w	800e312 <_printf_float+0xc2>
 800e524:	f109 0901 	add.w	r9, r9, #1
 800e528:	e7ee      	b.n	800e508 <_printf_float+0x2b8>
 800e52a:	bf00      	nop
 800e52c:	7fefffff 	.word	0x7fefffff
 800e530:	08013270 	.word	0x08013270
 800e534:	08013274 	.word	0x08013274
 800e538:	0801327c 	.word	0x0801327c
 800e53c:	08013278 	.word	0x08013278
 800e540:	08013280 	.word	0x08013280
 800e544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e548:	429a      	cmp	r2, r3
 800e54a:	bfa8      	it	ge
 800e54c:	461a      	movge	r2, r3
 800e54e:	2a00      	cmp	r2, #0
 800e550:	4691      	mov	r9, r2
 800e552:	dc37      	bgt.n	800e5c4 <_printf_float+0x374>
 800e554:	f04f 0b00 	mov.w	fp, #0
 800e558:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e55c:	f104 021a 	add.w	r2, r4, #26
 800e560:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e562:	9305      	str	r3, [sp, #20]
 800e564:	eba3 0309 	sub.w	r3, r3, r9
 800e568:	455b      	cmp	r3, fp
 800e56a:	dc33      	bgt.n	800e5d4 <_printf_float+0x384>
 800e56c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e570:	429a      	cmp	r2, r3
 800e572:	db3b      	blt.n	800e5ec <_printf_float+0x39c>
 800e574:	6823      	ldr	r3, [r4, #0]
 800e576:	07da      	lsls	r2, r3, #31
 800e578:	d438      	bmi.n	800e5ec <_printf_float+0x39c>
 800e57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e57c:	9a05      	ldr	r2, [sp, #20]
 800e57e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e580:	1a9a      	subs	r2, r3, r2
 800e582:	eba3 0901 	sub.w	r9, r3, r1
 800e586:	4591      	cmp	r9, r2
 800e588:	bfa8      	it	ge
 800e58a:	4691      	movge	r9, r2
 800e58c:	f1b9 0f00 	cmp.w	r9, #0
 800e590:	dc35      	bgt.n	800e5fe <_printf_float+0x3ae>
 800e592:	f04f 0800 	mov.w	r8, #0
 800e596:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e59a:	f104 0a1a 	add.w	sl, r4, #26
 800e59e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e5a2:	1a9b      	subs	r3, r3, r2
 800e5a4:	eba3 0309 	sub.w	r3, r3, r9
 800e5a8:	4543      	cmp	r3, r8
 800e5aa:	f77f af79 	ble.w	800e4a0 <_printf_float+0x250>
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	4652      	mov	r2, sl
 800e5b2:	4631      	mov	r1, r6
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	47b8      	blx	r7
 800e5b8:	3001      	adds	r0, #1
 800e5ba:	f43f aeaa 	beq.w	800e312 <_printf_float+0xc2>
 800e5be:	f108 0801 	add.w	r8, r8, #1
 800e5c2:	e7ec      	b.n	800e59e <_printf_float+0x34e>
 800e5c4:	4613      	mov	r3, r2
 800e5c6:	4631      	mov	r1, r6
 800e5c8:	4642      	mov	r2, r8
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	47b8      	blx	r7
 800e5ce:	3001      	adds	r0, #1
 800e5d0:	d1c0      	bne.n	800e554 <_printf_float+0x304>
 800e5d2:	e69e      	b.n	800e312 <_printf_float+0xc2>
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	4631      	mov	r1, r6
 800e5d8:	4628      	mov	r0, r5
 800e5da:	9205      	str	r2, [sp, #20]
 800e5dc:	47b8      	blx	r7
 800e5de:	3001      	adds	r0, #1
 800e5e0:	f43f ae97 	beq.w	800e312 <_printf_float+0xc2>
 800e5e4:	9a05      	ldr	r2, [sp, #20]
 800e5e6:	f10b 0b01 	add.w	fp, fp, #1
 800e5ea:	e7b9      	b.n	800e560 <_printf_float+0x310>
 800e5ec:	ee18 3a10 	vmov	r3, s16
 800e5f0:	4652      	mov	r2, sl
 800e5f2:	4631      	mov	r1, r6
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	47b8      	blx	r7
 800e5f8:	3001      	adds	r0, #1
 800e5fa:	d1be      	bne.n	800e57a <_printf_float+0x32a>
 800e5fc:	e689      	b.n	800e312 <_printf_float+0xc2>
 800e5fe:	9a05      	ldr	r2, [sp, #20]
 800e600:	464b      	mov	r3, r9
 800e602:	4442      	add	r2, r8
 800e604:	4631      	mov	r1, r6
 800e606:	4628      	mov	r0, r5
 800e608:	47b8      	blx	r7
 800e60a:	3001      	adds	r0, #1
 800e60c:	d1c1      	bne.n	800e592 <_printf_float+0x342>
 800e60e:	e680      	b.n	800e312 <_printf_float+0xc2>
 800e610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e612:	2a01      	cmp	r2, #1
 800e614:	dc01      	bgt.n	800e61a <_printf_float+0x3ca>
 800e616:	07db      	lsls	r3, r3, #31
 800e618:	d538      	bpl.n	800e68c <_printf_float+0x43c>
 800e61a:	2301      	movs	r3, #1
 800e61c:	4642      	mov	r2, r8
 800e61e:	4631      	mov	r1, r6
 800e620:	4628      	mov	r0, r5
 800e622:	47b8      	blx	r7
 800e624:	3001      	adds	r0, #1
 800e626:	f43f ae74 	beq.w	800e312 <_printf_float+0xc2>
 800e62a:	ee18 3a10 	vmov	r3, s16
 800e62e:	4652      	mov	r2, sl
 800e630:	4631      	mov	r1, r6
 800e632:	4628      	mov	r0, r5
 800e634:	47b8      	blx	r7
 800e636:	3001      	adds	r0, #1
 800e638:	f43f ae6b 	beq.w	800e312 <_printf_float+0xc2>
 800e63c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e640:	2200      	movs	r2, #0
 800e642:	2300      	movs	r3, #0
 800e644:	f7f2 fa50 	bl	8000ae8 <__aeabi_dcmpeq>
 800e648:	b9d8      	cbnz	r0, 800e682 <_printf_float+0x432>
 800e64a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e64c:	f108 0201 	add.w	r2, r8, #1
 800e650:	3b01      	subs	r3, #1
 800e652:	4631      	mov	r1, r6
 800e654:	4628      	mov	r0, r5
 800e656:	47b8      	blx	r7
 800e658:	3001      	adds	r0, #1
 800e65a:	d10e      	bne.n	800e67a <_printf_float+0x42a>
 800e65c:	e659      	b.n	800e312 <_printf_float+0xc2>
 800e65e:	2301      	movs	r3, #1
 800e660:	4652      	mov	r2, sl
 800e662:	4631      	mov	r1, r6
 800e664:	4628      	mov	r0, r5
 800e666:	47b8      	blx	r7
 800e668:	3001      	adds	r0, #1
 800e66a:	f43f ae52 	beq.w	800e312 <_printf_float+0xc2>
 800e66e:	f108 0801 	add.w	r8, r8, #1
 800e672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e674:	3b01      	subs	r3, #1
 800e676:	4543      	cmp	r3, r8
 800e678:	dcf1      	bgt.n	800e65e <_printf_float+0x40e>
 800e67a:	464b      	mov	r3, r9
 800e67c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e680:	e6dc      	b.n	800e43c <_printf_float+0x1ec>
 800e682:	f04f 0800 	mov.w	r8, #0
 800e686:	f104 0a1a 	add.w	sl, r4, #26
 800e68a:	e7f2      	b.n	800e672 <_printf_float+0x422>
 800e68c:	2301      	movs	r3, #1
 800e68e:	4642      	mov	r2, r8
 800e690:	e7df      	b.n	800e652 <_printf_float+0x402>
 800e692:	2301      	movs	r3, #1
 800e694:	464a      	mov	r2, r9
 800e696:	4631      	mov	r1, r6
 800e698:	4628      	mov	r0, r5
 800e69a:	47b8      	blx	r7
 800e69c:	3001      	adds	r0, #1
 800e69e:	f43f ae38 	beq.w	800e312 <_printf_float+0xc2>
 800e6a2:	f108 0801 	add.w	r8, r8, #1
 800e6a6:	68e3      	ldr	r3, [r4, #12]
 800e6a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6aa:	1a5b      	subs	r3, r3, r1
 800e6ac:	4543      	cmp	r3, r8
 800e6ae:	dcf0      	bgt.n	800e692 <_printf_float+0x442>
 800e6b0:	e6fa      	b.n	800e4a8 <_printf_float+0x258>
 800e6b2:	f04f 0800 	mov.w	r8, #0
 800e6b6:	f104 0919 	add.w	r9, r4, #25
 800e6ba:	e7f4      	b.n	800e6a6 <_printf_float+0x456>

0800e6bc <_printf_common>:
 800e6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c0:	4616      	mov	r6, r2
 800e6c2:	4699      	mov	r9, r3
 800e6c4:	688a      	ldr	r2, [r1, #8]
 800e6c6:	690b      	ldr	r3, [r1, #16]
 800e6c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	bfb8      	it	lt
 800e6d0:	4613      	movlt	r3, r2
 800e6d2:	6033      	str	r3, [r6, #0]
 800e6d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e6d8:	4607      	mov	r7, r0
 800e6da:	460c      	mov	r4, r1
 800e6dc:	b10a      	cbz	r2, 800e6e2 <_printf_common+0x26>
 800e6de:	3301      	adds	r3, #1
 800e6e0:	6033      	str	r3, [r6, #0]
 800e6e2:	6823      	ldr	r3, [r4, #0]
 800e6e4:	0699      	lsls	r1, r3, #26
 800e6e6:	bf42      	ittt	mi
 800e6e8:	6833      	ldrmi	r3, [r6, #0]
 800e6ea:	3302      	addmi	r3, #2
 800e6ec:	6033      	strmi	r3, [r6, #0]
 800e6ee:	6825      	ldr	r5, [r4, #0]
 800e6f0:	f015 0506 	ands.w	r5, r5, #6
 800e6f4:	d106      	bne.n	800e704 <_printf_common+0x48>
 800e6f6:	f104 0a19 	add.w	sl, r4, #25
 800e6fa:	68e3      	ldr	r3, [r4, #12]
 800e6fc:	6832      	ldr	r2, [r6, #0]
 800e6fe:	1a9b      	subs	r3, r3, r2
 800e700:	42ab      	cmp	r3, r5
 800e702:	dc26      	bgt.n	800e752 <_printf_common+0x96>
 800e704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e708:	1e13      	subs	r3, r2, #0
 800e70a:	6822      	ldr	r2, [r4, #0]
 800e70c:	bf18      	it	ne
 800e70e:	2301      	movne	r3, #1
 800e710:	0692      	lsls	r2, r2, #26
 800e712:	d42b      	bmi.n	800e76c <_printf_common+0xb0>
 800e714:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e718:	4649      	mov	r1, r9
 800e71a:	4638      	mov	r0, r7
 800e71c:	47c0      	blx	r8
 800e71e:	3001      	adds	r0, #1
 800e720:	d01e      	beq.n	800e760 <_printf_common+0xa4>
 800e722:	6823      	ldr	r3, [r4, #0]
 800e724:	68e5      	ldr	r5, [r4, #12]
 800e726:	6832      	ldr	r2, [r6, #0]
 800e728:	f003 0306 	and.w	r3, r3, #6
 800e72c:	2b04      	cmp	r3, #4
 800e72e:	bf08      	it	eq
 800e730:	1aad      	subeq	r5, r5, r2
 800e732:	68a3      	ldr	r3, [r4, #8]
 800e734:	6922      	ldr	r2, [r4, #16]
 800e736:	bf0c      	ite	eq
 800e738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e73c:	2500      	movne	r5, #0
 800e73e:	4293      	cmp	r3, r2
 800e740:	bfc4      	itt	gt
 800e742:	1a9b      	subgt	r3, r3, r2
 800e744:	18ed      	addgt	r5, r5, r3
 800e746:	2600      	movs	r6, #0
 800e748:	341a      	adds	r4, #26
 800e74a:	42b5      	cmp	r5, r6
 800e74c:	d11a      	bne.n	800e784 <_printf_common+0xc8>
 800e74e:	2000      	movs	r0, #0
 800e750:	e008      	b.n	800e764 <_printf_common+0xa8>
 800e752:	2301      	movs	r3, #1
 800e754:	4652      	mov	r2, sl
 800e756:	4649      	mov	r1, r9
 800e758:	4638      	mov	r0, r7
 800e75a:	47c0      	blx	r8
 800e75c:	3001      	adds	r0, #1
 800e75e:	d103      	bne.n	800e768 <_printf_common+0xac>
 800e760:	f04f 30ff 	mov.w	r0, #4294967295
 800e764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e768:	3501      	adds	r5, #1
 800e76a:	e7c6      	b.n	800e6fa <_printf_common+0x3e>
 800e76c:	18e1      	adds	r1, r4, r3
 800e76e:	1c5a      	adds	r2, r3, #1
 800e770:	2030      	movs	r0, #48	; 0x30
 800e772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e776:	4422      	add	r2, r4
 800e778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e77c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e780:	3302      	adds	r3, #2
 800e782:	e7c7      	b.n	800e714 <_printf_common+0x58>
 800e784:	2301      	movs	r3, #1
 800e786:	4622      	mov	r2, r4
 800e788:	4649      	mov	r1, r9
 800e78a:	4638      	mov	r0, r7
 800e78c:	47c0      	blx	r8
 800e78e:	3001      	adds	r0, #1
 800e790:	d0e6      	beq.n	800e760 <_printf_common+0xa4>
 800e792:	3601      	adds	r6, #1
 800e794:	e7d9      	b.n	800e74a <_printf_common+0x8e>
	...

0800e798 <_printf_i>:
 800e798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e79c:	7e0f      	ldrb	r7, [r1, #24]
 800e79e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e7a0:	2f78      	cmp	r7, #120	; 0x78
 800e7a2:	4691      	mov	r9, r2
 800e7a4:	4680      	mov	r8, r0
 800e7a6:	460c      	mov	r4, r1
 800e7a8:	469a      	mov	sl, r3
 800e7aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e7ae:	d807      	bhi.n	800e7c0 <_printf_i+0x28>
 800e7b0:	2f62      	cmp	r7, #98	; 0x62
 800e7b2:	d80a      	bhi.n	800e7ca <_printf_i+0x32>
 800e7b4:	2f00      	cmp	r7, #0
 800e7b6:	f000 80d8 	beq.w	800e96a <_printf_i+0x1d2>
 800e7ba:	2f58      	cmp	r7, #88	; 0x58
 800e7bc:	f000 80a3 	beq.w	800e906 <_printf_i+0x16e>
 800e7c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e7c8:	e03a      	b.n	800e840 <_printf_i+0xa8>
 800e7ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e7ce:	2b15      	cmp	r3, #21
 800e7d0:	d8f6      	bhi.n	800e7c0 <_printf_i+0x28>
 800e7d2:	a101      	add	r1, pc, #4	; (adr r1, 800e7d8 <_printf_i+0x40>)
 800e7d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e7d8:	0800e831 	.word	0x0800e831
 800e7dc:	0800e845 	.word	0x0800e845
 800e7e0:	0800e7c1 	.word	0x0800e7c1
 800e7e4:	0800e7c1 	.word	0x0800e7c1
 800e7e8:	0800e7c1 	.word	0x0800e7c1
 800e7ec:	0800e7c1 	.word	0x0800e7c1
 800e7f0:	0800e845 	.word	0x0800e845
 800e7f4:	0800e7c1 	.word	0x0800e7c1
 800e7f8:	0800e7c1 	.word	0x0800e7c1
 800e7fc:	0800e7c1 	.word	0x0800e7c1
 800e800:	0800e7c1 	.word	0x0800e7c1
 800e804:	0800e951 	.word	0x0800e951
 800e808:	0800e875 	.word	0x0800e875
 800e80c:	0800e933 	.word	0x0800e933
 800e810:	0800e7c1 	.word	0x0800e7c1
 800e814:	0800e7c1 	.word	0x0800e7c1
 800e818:	0800e973 	.word	0x0800e973
 800e81c:	0800e7c1 	.word	0x0800e7c1
 800e820:	0800e875 	.word	0x0800e875
 800e824:	0800e7c1 	.word	0x0800e7c1
 800e828:	0800e7c1 	.word	0x0800e7c1
 800e82c:	0800e93b 	.word	0x0800e93b
 800e830:	682b      	ldr	r3, [r5, #0]
 800e832:	1d1a      	adds	r2, r3, #4
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	602a      	str	r2, [r5, #0]
 800e838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e83c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e840:	2301      	movs	r3, #1
 800e842:	e0a3      	b.n	800e98c <_printf_i+0x1f4>
 800e844:	6820      	ldr	r0, [r4, #0]
 800e846:	6829      	ldr	r1, [r5, #0]
 800e848:	0606      	lsls	r6, r0, #24
 800e84a:	f101 0304 	add.w	r3, r1, #4
 800e84e:	d50a      	bpl.n	800e866 <_printf_i+0xce>
 800e850:	680e      	ldr	r6, [r1, #0]
 800e852:	602b      	str	r3, [r5, #0]
 800e854:	2e00      	cmp	r6, #0
 800e856:	da03      	bge.n	800e860 <_printf_i+0xc8>
 800e858:	232d      	movs	r3, #45	; 0x2d
 800e85a:	4276      	negs	r6, r6
 800e85c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e860:	485e      	ldr	r0, [pc, #376]	; (800e9dc <_printf_i+0x244>)
 800e862:	230a      	movs	r3, #10
 800e864:	e019      	b.n	800e89a <_printf_i+0x102>
 800e866:	680e      	ldr	r6, [r1, #0]
 800e868:	602b      	str	r3, [r5, #0]
 800e86a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e86e:	bf18      	it	ne
 800e870:	b236      	sxthne	r6, r6
 800e872:	e7ef      	b.n	800e854 <_printf_i+0xbc>
 800e874:	682b      	ldr	r3, [r5, #0]
 800e876:	6820      	ldr	r0, [r4, #0]
 800e878:	1d19      	adds	r1, r3, #4
 800e87a:	6029      	str	r1, [r5, #0]
 800e87c:	0601      	lsls	r1, r0, #24
 800e87e:	d501      	bpl.n	800e884 <_printf_i+0xec>
 800e880:	681e      	ldr	r6, [r3, #0]
 800e882:	e002      	b.n	800e88a <_printf_i+0xf2>
 800e884:	0646      	lsls	r6, r0, #25
 800e886:	d5fb      	bpl.n	800e880 <_printf_i+0xe8>
 800e888:	881e      	ldrh	r6, [r3, #0]
 800e88a:	4854      	ldr	r0, [pc, #336]	; (800e9dc <_printf_i+0x244>)
 800e88c:	2f6f      	cmp	r7, #111	; 0x6f
 800e88e:	bf0c      	ite	eq
 800e890:	2308      	moveq	r3, #8
 800e892:	230a      	movne	r3, #10
 800e894:	2100      	movs	r1, #0
 800e896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e89a:	6865      	ldr	r5, [r4, #4]
 800e89c:	60a5      	str	r5, [r4, #8]
 800e89e:	2d00      	cmp	r5, #0
 800e8a0:	bfa2      	ittt	ge
 800e8a2:	6821      	ldrge	r1, [r4, #0]
 800e8a4:	f021 0104 	bicge.w	r1, r1, #4
 800e8a8:	6021      	strge	r1, [r4, #0]
 800e8aa:	b90e      	cbnz	r6, 800e8b0 <_printf_i+0x118>
 800e8ac:	2d00      	cmp	r5, #0
 800e8ae:	d04d      	beq.n	800e94c <_printf_i+0x1b4>
 800e8b0:	4615      	mov	r5, r2
 800e8b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e8b6:	fb03 6711 	mls	r7, r3, r1, r6
 800e8ba:	5dc7      	ldrb	r7, [r0, r7]
 800e8bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e8c0:	4637      	mov	r7, r6
 800e8c2:	42bb      	cmp	r3, r7
 800e8c4:	460e      	mov	r6, r1
 800e8c6:	d9f4      	bls.n	800e8b2 <_printf_i+0x11a>
 800e8c8:	2b08      	cmp	r3, #8
 800e8ca:	d10b      	bne.n	800e8e4 <_printf_i+0x14c>
 800e8cc:	6823      	ldr	r3, [r4, #0]
 800e8ce:	07de      	lsls	r6, r3, #31
 800e8d0:	d508      	bpl.n	800e8e4 <_printf_i+0x14c>
 800e8d2:	6923      	ldr	r3, [r4, #16]
 800e8d4:	6861      	ldr	r1, [r4, #4]
 800e8d6:	4299      	cmp	r1, r3
 800e8d8:	bfde      	ittt	le
 800e8da:	2330      	movle	r3, #48	; 0x30
 800e8dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e8e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e8e4:	1b52      	subs	r2, r2, r5
 800e8e6:	6122      	str	r2, [r4, #16]
 800e8e8:	f8cd a000 	str.w	sl, [sp]
 800e8ec:	464b      	mov	r3, r9
 800e8ee:	aa03      	add	r2, sp, #12
 800e8f0:	4621      	mov	r1, r4
 800e8f2:	4640      	mov	r0, r8
 800e8f4:	f7ff fee2 	bl	800e6bc <_printf_common>
 800e8f8:	3001      	adds	r0, #1
 800e8fa:	d14c      	bne.n	800e996 <_printf_i+0x1fe>
 800e8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e900:	b004      	add	sp, #16
 800e902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e906:	4835      	ldr	r0, [pc, #212]	; (800e9dc <_printf_i+0x244>)
 800e908:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e90c:	6829      	ldr	r1, [r5, #0]
 800e90e:	6823      	ldr	r3, [r4, #0]
 800e910:	f851 6b04 	ldr.w	r6, [r1], #4
 800e914:	6029      	str	r1, [r5, #0]
 800e916:	061d      	lsls	r5, r3, #24
 800e918:	d514      	bpl.n	800e944 <_printf_i+0x1ac>
 800e91a:	07df      	lsls	r7, r3, #31
 800e91c:	bf44      	itt	mi
 800e91e:	f043 0320 	orrmi.w	r3, r3, #32
 800e922:	6023      	strmi	r3, [r4, #0]
 800e924:	b91e      	cbnz	r6, 800e92e <_printf_i+0x196>
 800e926:	6823      	ldr	r3, [r4, #0]
 800e928:	f023 0320 	bic.w	r3, r3, #32
 800e92c:	6023      	str	r3, [r4, #0]
 800e92e:	2310      	movs	r3, #16
 800e930:	e7b0      	b.n	800e894 <_printf_i+0xfc>
 800e932:	6823      	ldr	r3, [r4, #0]
 800e934:	f043 0320 	orr.w	r3, r3, #32
 800e938:	6023      	str	r3, [r4, #0]
 800e93a:	2378      	movs	r3, #120	; 0x78
 800e93c:	4828      	ldr	r0, [pc, #160]	; (800e9e0 <_printf_i+0x248>)
 800e93e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e942:	e7e3      	b.n	800e90c <_printf_i+0x174>
 800e944:	0659      	lsls	r1, r3, #25
 800e946:	bf48      	it	mi
 800e948:	b2b6      	uxthmi	r6, r6
 800e94a:	e7e6      	b.n	800e91a <_printf_i+0x182>
 800e94c:	4615      	mov	r5, r2
 800e94e:	e7bb      	b.n	800e8c8 <_printf_i+0x130>
 800e950:	682b      	ldr	r3, [r5, #0]
 800e952:	6826      	ldr	r6, [r4, #0]
 800e954:	6961      	ldr	r1, [r4, #20]
 800e956:	1d18      	adds	r0, r3, #4
 800e958:	6028      	str	r0, [r5, #0]
 800e95a:	0635      	lsls	r5, r6, #24
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	d501      	bpl.n	800e964 <_printf_i+0x1cc>
 800e960:	6019      	str	r1, [r3, #0]
 800e962:	e002      	b.n	800e96a <_printf_i+0x1d2>
 800e964:	0670      	lsls	r0, r6, #25
 800e966:	d5fb      	bpl.n	800e960 <_printf_i+0x1c8>
 800e968:	8019      	strh	r1, [r3, #0]
 800e96a:	2300      	movs	r3, #0
 800e96c:	6123      	str	r3, [r4, #16]
 800e96e:	4615      	mov	r5, r2
 800e970:	e7ba      	b.n	800e8e8 <_printf_i+0x150>
 800e972:	682b      	ldr	r3, [r5, #0]
 800e974:	1d1a      	adds	r2, r3, #4
 800e976:	602a      	str	r2, [r5, #0]
 800e978:	681d      	ldr	r5, [r3, #0]
 800e97a:	6862      	ldr	r2, [r4, #4]
 800e97c:	2100      	movs	r1, #0
 800e97e:	4628      	mov	r0, r5
 800e980:	f7f1 fc3e 	bl	8000200 <memchr>
 800e984:	b108      	cbz	r0, 800e98a <_printf_i+0x1f2>
 800e986:	1b40      	subs	r0, r0, r5
 800e988:	6060      	str	r0, [r4, #4]
 800e98a:	6863      	ldr	r3, [r4, #4]
 800e98c:	6123      	str	r3, [r4, #16]
 800e98e:	2300      	movs	r3, #0
 800e990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e994:	e7a8      	b.n	800e8e8 <_printf_i+0x150>
 800e996:	6923      	ldr	r3, [r4, #16]
 800e998:	462a      	mov	r2, r5
 800e99a:	4649      	mov	r1, r9
 800e99c:	4640      	mov	r0, r8
 800e99e:	47d0      	blx	sl
 800e9a0:	3001      	adds	r0, #1
 800e9a2:	d0ab      	beq.n	800e8fc <_printf_i+0x164>
 800e9a4:	6823      	ldr	r3, [r4, #0]
 800e9a6:	079b      	lsls	r3, r3, #30
 800e9a8:	d413      	bmi.n	800e9d2 <_printf_i+0x23a>
 800e9aa:	68e0      	ldr	r0, [r4, #12]
 800e9ac:	9b03      	ldr	r3, [sp, #12]
 800e9ae:	4298      	cmp	r0, r3
 800e9b0:	bfb8      	it	lt
 800e9b2:	4618      	movlt	r0, r3
 800e9b4:	e7a4      	b.n	800e900 <_printf_i+0x168>
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	4632      	mov	r2, r6
 800e9ba:	4649      	mov	r1, r9
 800e9bc:	4640      	mov	r0, r8
 800e9be:	47d0      	blx	sl
 800e9c0:	3001      	adds	r0, #1
 800e9c2:	d09b      	beq.n	800e8fc <_printf_i+0x164>
 800e9c4:	3501      	adds	r5, #1
 800e9c6:	68e3      	ldr	r3, [r4, #12]
 800e9c8:	9903      	ldr	r1, [sp, #12]
 800e9ca:	1a5b      	subs	r3, r3, r1
 800e9cc:	42ab      	cmp	r3, r5
 800e9ce:	dcf2      	bgt.n	800e9b6 <_printf_i+0x21e>
 800e9d0:	e7eb      	b.n	800e9aa <_printf_i+0x212>
 800e9d2:	2500      	movs	r5, #0
 800e9d4:	f104 0619 	add.w	r6, r4, #25
 800e9d8:	e7f5      	b.n	800e9c6 <_printf_i+0x22e>
 800e9da:	bf00      	nop
 800e9dc:	08013282 	.word	0x08013282
 800e9e0:	08013293 	.word	0x08013293

0800e9e4 <_scanf_float>:
 800e9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e8:	b087      	sub	sp, #28
 800e9ea:	4617      	mov	r7, r2
 800e9ec:	9303      	str	r3, [sp, #12]
 800e9ee:	688b      	ldr	r3, [r1, #8]
 800e9f0:	1e5a      	subs	r2, r3, #1
 800e9f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e9f6:	bf83      	ittte	hi
 800e9f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e9fc:	195b      	addhi	r3, r3, r5
 800e9fe:	9302      	strhi	r3, [sp, #8]
 800ea00:	2300      	movls	r3, #0
 800ea02:	bf86      	itte	hi
 800ea04:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ea08:	608b      	strhi	r3, [r1, #8]
 800ea0a:	9302      	strls	r3, [sp, #8]
 800ea0c:	680b      	ldr	r3, [r1, #0]
 800ea0e:	468b      	mov	fp, r1
 800ea10:	2500      	movs	r5, #0
 800ea12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ea16:	f84b 3b1c 	str.w	r3, [fp], #28
 800ea1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ea1e:	4680      	mov	r8, r0
 800ea20:	460c      	mov	r4, r1
 800ea22:	465e      	mov	r6, fp
 800ea24:	46aa      	mov	sl, r5
 800ea26:	46a9      	mov	r9, r5
 800ea28:	9501      	str	r5, [sp, #4]
 800ea2a:	68a2      	ldr	r2, [r4, #8]
 800ea2c:	b152      	cbz	r2, 800ea44 <_scanf_float+0x60>
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	2b4e      	cmp	r3, #78	; 0x4e
 800ea34:	d864      	bhi.n	800eb00 <_scanf_float+0x11c>
 800ea36:	2b40      	cmp	r3, #64	; 0x40
 800ea38:	d83c      	bhi.n	800eab4 <_scanf_float+0xd0>
 800ea3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ea3e:	b2c8      	uxtb	r0, r1
 800ea40:	280e      	cmp	r0, #14
 800ea42:	d93a      	bls.n	800eaba <_scanf_float+0xd6>
 800ea44:	f1b9 0f00 	cmp.w	r9, #0
 800ea48:	d003      	beq.n	800ea52 <_scanf_float+0x6e>
 800ea4a:	6823      	ldr	r3, [r4, #0]
 800ea4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea50:	6023      	str	r3, [r4, #0]
 800ea52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea56:	f1ba 0f01 	cmp.w	sl, #1
 800ea5a:	f200 8113 	bhi.w	800ec84 <_scanf_float+0x2a0>
 800ea5e:	455e      	cmp	r6, fp
 800ea60:	f200 8105 	bhi.w	800ec6e <_scanf_float+0x28a>
 800ea64:	2501      	movs	r5, #1
 800ea66:	4628      	mov	r0, r5
 800ea68:	b007      	add	sp, #28
 800ea6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ea72:	2a0d      	cmp	r2, #13
 800ea74:	d8e6      	bhi.n	800ea44 <_scanf_float+0x60>
 800ea76:	a101      	add	r1, pc, #4	; (adr r1, 800ea7c <_scanf_float+0x98>)
 800ea78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ea7c:	0800ebbb 	.word	0x0800ebbb
 800ea80:	0800ea45 	.word	0x0800ea45
 800ea84:	0800ea45 	.word	0x0800ea45
 800ea88:	0800ea45 	.word	0x0800ea45
 800ea8c:	0800ec1b 	.word	0x0800ec1b
 800ea90:	0800ebf3 	.word	0x0800ebf3
 800ea94:	0800ea45 	.word	0x0800ea45
 800ea98:	0800ea45 	.word	0x0800ea45
 800ea9c:	0800ebc9 	.word	0x0800ebc9
 800eaa0:	0800ea45 	.word	0x0800ea45
 800eaa4:	0800ea45 	.word	0x0800ea45
 800eaa8:	0800ea45 	.word	0x0800ea45
 800eaac:	0800ea45 	.word	0x0800ea45
 800eab0:	0800eb81 	.word	0x0800eb81
 800eab4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800eab8:	e7db      	b.n	800ea72 <_scanf_float+0x8e>
 800eaba:	290e      	cmp	r1, #14
 800eabc:	d8c2      	bhi.n	800ea44 <_scanf_float+0x60>
 800eabe:	a001      	add	r0, pc, #4	; (adr r0, 800eac4 <_scanf_float+0xe0>)
 800eac0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800eac4:	0800eb73 	.word	0x0800eb73
 800eac8:	0800ea45 	.word	0x0800ea45
 800eacc:	0800eb73 	.word	0x0800eb73
 800ead0:	0800ec07 	.word	0x0800ec07
 800ead4:	0800ea45 	.word	0x0800ea45
 800ead8:	0800eb21 	.word	0x0800eb21
 800eadc:	0800eb5d 	.word	0x0800eb5d
 800eae0:	0800eb5d 	.word	0x0800eb5d
 800eae4:	0800eb5d 	.word	0x0800eb5d
 800eae8:	0800eb5d 	.word	0x0800eb5d
 800eaec:	0800eb5d 	.word	0x0800eb5d
 800eaf0:	0800eb5d 	.word	0x0800eb5d
 800eaf4:	0800eb5d 	.word	0x0800eb5d
 800eaf8:	0800eb5d 	.word	0x0800eb5d
 800eafc:	0800eb5d 	.word	0x0800eb5d
 800eb00:	2b6e      	cmp	r3, #110	; 0x6e
 800eb02:	d809      	bhi.n	800eb18 <_scanf_float+0x134>
 800eb04:	2b60      	cmp	r3, #96	; 0x60
 800eb06:	d8b2      	bhi.n	800ea6e <_scanf_float+0x8a>
 800eb08:	2b54      	cmp	r3, #84	; 0x54
 800eb0a:	d077      	beq.n	800ebfc <_scanf_float+0x218>
 800eb0c:	2b59      	cmp	r3, #89	; 0x59
 800eb0e:	d199      	bne.n	800ea44 <_scanf_float+0x60>
 800eb10:	2d07      	cmp	r5, #7
 800eb12:	d197      	bne.n	800ea44 <_scanf_float+0x60>
 800eb14:	2508      	movs	r5, #8
 800eb16:	e029      	b.n	800eb6c <_scanf_float+0x188>
 800eb18:	2b74      	cmp	r3, #116	; 0x74
 800eb1a:	d06f      	beq.n	800ebfc <_scanf_float+0x218>
 800eb1c:	2b79      	cmp	r3, #121	; 0x79
 800eb1e:	e7f6      	b.n	800eb0e <_scanf_float+0x12a>
 800eb20:	6821      	ldr	r1, [r4, #0]
 800eb22:	05c8      	lsls	r0, r1, #23
 800eb24:	d51a      	bpl.n	800eb5c <_scanf_float+0x178>
 800eb26:	9b02      	ldr	r3, [sp, #8]
 800eb28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800eb2c:	6021      	str	r1, [r4, #0]
 800eb2e:	f109 0901 	add.w	r9, r9, #1
 800eb32:	b11b      	cbz	r3, 800eb3c <_scanf_float+0x158>
 800eb34:	3b01      	subs	r3, #1
 800eb36:	3201      	adds	r2, #1
 800eb38:	9302      	str	r3, [sp, #8]
 800eb3a:	60a2      	str	r2, [r4, #8]
 800eb3c:	68a3      	ldr	r3, [r4, #8]
 800eb3e:	3b01      	subs	r3, #1
 800eb40:	60a3      	str	r3, [r4, #8]
 800eb42:	6923      	ldr	r3, [r4, #16]
 800eb44:	3301      	adds	r3, #1
 800eb46:	6123      	str	r3, [r4, #16]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	3b01      	subs	r3, #1
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	607b      	str	r3, [r7, #4]
 800eb50:	f340 8084 	ble.w	800ec5c <_scanf_float+0x278>
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	3301      	adds	r3, #1
 800eb58:	603b      	str	r3, [r7, #0]
 800eb5a:	e766      	b.n	800ea2a <_scanf_float+0x46>
 800eb5c:	eb1a 0f05 	cmn.w	sl, r5
 800eb60:	f47f af70 	bne.w	800ea44 <_scanf_float+0x60>
 800eb64:	6822      	ldr	r2, [r4, #0]
 800eb66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800eb6a:	6022      	str	r2, [r4, #0]
 800eb6c:	f806 3b01 	strb.w	r3, [r6], #1
 800eb70:	e7e4      	b.n	800eb3c <_scanf_float+0x158>
 800eb72:	6822      	ldr	r2, [r4, #0]
 800eb74:	0610      	lsls	r0, r2, #24
 800eb76:	f57f af65 	bpl.w	800ea44 <_scanf_float+0x60>
 800eb7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eb7e:	e7f4      	b.n	800eb6a <_scanf_float+0x186>
 800eb80:	f1ba 0f00 	cmp.w	sl, #0
 800eb84:	d10e      	bne.n	800eba4 <_scanf_float+0x1c0>
 800eb86:	f1b9 0f00 	cmp.w	r9, #0
 800eb8a:	d10e      	bne.n	800ebaa <_scanf_float+0x1c6>
 800eb8c:	6822      	ldr	r2, [r4, #0]
 800eb8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800eb92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800eb96:	d108      	bne.n	800ebaa <_scanf_float+0x1c6>
 800eb98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eb9c:	6022      	str	r2, [r4, #0]
 800eb9e:	f04f 0a01 	mov.w	sl, #1
 800eba2:	e7e3      	b.n	800eb6c <_scanf_float+0x188>
 800eba4:	f1ba 0f02 	cmp.w	sl, #2
 800eba8:	d055      	beq.n	800ec56 <_scanf_float+0x272>
 800ebaa:	2d01      	cmp	r5, #1
 800ebac:	d002      	beq.n	800ebb4 <_scanf_float+0x1d0>
 800ebae:	2d04      	cmp	r5, #4
 800ebb0:	f47f af48 	bne.w	800ea44 <_scanf_float+0x60>
 800ebb4:	3501      	adds	r5, #1
 800ebb6:	b2ed      	uxtb	r5, r5
 800ebb8:	e7d8      	b.n	800eb6c <_scanf_float+0x188>
 800ebba:	f1ba 0f01 	cmp.w	sl, #1
 800ebbe:	f47f af41 	bne.w	800ea44 <_scanf_float+0x60>
 800ebc2:	f04f 0a02 	mov.w	sl, #2
 800ebc6:	e7d1      	b.n	800eb6c <_scanf_float+0x188>
 800ebc8:	b97d      	cbnz	r5, 800ebea <_scanf_float+0x206>
 800ebca:	f1b9 0f00 	cmp.w	r9, #0
 800ebce:	f47f af3c 	bne.w	800ea4a <_scanf_float+0x66>
 800ebd2:	6822      	ldr	r2, [r4, #0]
 800ebd4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ebd8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ebdc:	f47f af39 	bne.w	800ea52 <_scanf_float+0x6e>
 800ebe0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ebe4:	6022      	str	r2, [r4, #0]
 800ebe6:	2501      	movs	r5, #1
 800ebe8:	e7c0      	b.n	800eb6c <_scanf_float+0x188>
 800ebea:	2d03      	cmp	r5, #3
 800ebec:	d0e2      	beq.n	800ebb4 <_scanf_float+0x1d0>
 800ebee:	2d05      	cmp	r5, #5
 800ebf0:	e7de      	b.n	800ebb0 <_scanf_float+0x1cc>
 800ebf2:	2d02      	cmp	r5, #2
 800ebf4:	f47f af26 	bne.w	800ea44 <_scanf_float+0x60>
 800ebf8:	2503      	movs	r5, #3
 800ebfa:	e7b7      	b.n	800eb6c <_scanf_float+0x188>
 800ebfc:	2d06      	cmp	r5, #6
 800ebfe:	f47f af21 	bne.w	800ea44 <_scanf_float+0x60>
 800ec02:	2507      	movs	r5, #7
 800ec04:	e7b2      	b.n	800eb6c <_scanf_float+0x188>
 800ec06:	6822      	ldr	r2, [r4, #0]
 800ec08:	0591      	lsls	r1, r2, #22
 800ec0a:	f57f af1b 	bpl.w	800ea44 <_scanf_float+0x60>
 800ec0e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ec12:	6022      	str	r2, [r4, #0]
 800ec14:	f8cd 9004 	str.w	r9, [sp, #4]
 800ec18:	e7a8      	b.n	800eb6c <_scanf_float+0x188>
 800ec1a:	6822      	ldr	r2, [r4, #0]
 800ec1c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ec20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ec24:	d006      	beq.n	800ec34 <_scanf_float+0x250>
 800ec26:	0550      	lsls	r0, r2, #21
 800ec28:	f57f af0c 	bpl.w	800ea44 <_scanf_float+0x60>
 800ec2c:	f1b9 0f00 	cmp.w	r9, #0
 800ec30:	f43f af0f 	beq.w	800ea52 <_scanf_float+0x6e>
 800ec34:	0591      	lsls	r1, r2, #22
 800ec36:	bf58      	it	pl
 800ec38:	9901      	ldrpl	r1, [sp, #4]
 800ec3a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ec3e:	bf58      	it	pl
 800ec40:	eba9 0101 	subpl.w	r1, r9, r1
 800ec44:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ec48:	bf58      	it	pl
 800ec4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ec4e:	6022      	str	r2, [r4, #0]
 800ec50:	f04f 0900 	mov.w	r9, #0
 800ec54:	e78a      	b.n	800eb6c <_scanf_float+0x188>
 800ec56:	f04f 0a03 	mov.w	sl, #3
 800ec5a:	e787      	b.n	800eb6c <_scanf_float+0x188>
 800ec5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ec60:	4639      	mov	r1, r7
 800ec62:	4640      	mov	r0, r8
 800ec64:	4798      	blx	r3
 800ec66:	2800      	cmp	r0, #0
 800ec68:	f43f aedf 	beq.w	800ea2a <_scanf_float+0x46>
 800ec6c:	e6ea      	b.n	800ea44 <_scanf_float+0x60>
 800ec6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec76:	463a      	mov	r2, r7
 800ec78:	4640      	mov	r0, r8
 800ec7a:	4798      	blx	r3
 800ec7c:	6923      	ldr	r3, [r4, #16]
 800ec7e:	3b01      	subs	r3, #1
 800ec80:	6123      	str	r3, [r4, #16]
 800ec82:	e6ec      	b.n	800ea5e <_scanf_float+0x7a>
 800ec84:	1e6b      	subs	r3, r5, #1
 800ec86:	2b06      	cmp	r3, #6
 800ec88:	d825      	bhi.n	800ecd6 <_scanf_float+0x2f2>
 800ec8a:	2d02      	cmp	r5, #2
 800ec8c:	d836      	bhi.n	800ecfc <_scanf_float+0x318>
 800ec8e:	455e      	cmp	r6, fp
 800ec90:	f67f aee8 	bls.w	800ea64 <_scanf_float+0x80>
 800ec94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec9c:	463a      	mov	r2, r7
 800ec9e:	4640      	mov	r0, r8
 800eca0:	4798      	blx	r3
 800eca2:	6923      	ldr	r3, [r4, #16]
 800eca4:	3b01      	subs	r3, #1
 800eca6:	6123      	str	r3, [r4, #16]
 800eca8:	e7f1      	b.n	800ec8e <_scanf_float+0x2aa>
 800ecaa:	9802      	ldr	r0, [sp, #8]
 800ecac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ecb0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ecb4:	9002      	str	r0, [sp, #8]
 800ecb6:	463a      	mov	r2, r7
 800ecb8:	4640      	mov	r0, r8
 800ecba:	4798      	blx	r3
 800ecbc:	6923      	ldr	r3, [r4, #16]
 800ecbe:	3b01      	subs	r3, #1
 800ecc0:	6123      	str	r3, [r4, #16]
 800ecc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecc6:	fa5f fa8a 	uxtb.w	sl, sl
 800ecca:	f1ba 0f02 	cmp.w	sl, #2
 800ecce:	d1ec      	bne.n	800ecaa <_scanf_float+0x2c6>
 800ecd0:	3d03      	subs	r5, #3
 800ecd2:	b2ed      	uxtb	r5, r5
 800ecd4:	1b76      	subs	r6, r6, r5
 800ecd6:	6823      	ldr	r3, [r4, #0]
 800ecd8:	05da      	lsls	r2, r3, #23
 800ecda:	d52f      	bpl.n	800ed3c <_scanf_float+0x358>
 800ecdc:	055b      	lsls	r3, r3, #21
 800ecde:	d510      	bpl.n	800ed02 <_scanf_float+0x31e>
 800ece0:	455e      	cmp	r6, fp
 800ece2:	f67f aebf 	bls.w	800ea64 <_scanf_float+0x80>
 800ece6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ecea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ecee:	463a      	mov	r2, r7
 800ecf0:	4640      	mov	r0, r8
 800ecf2:	4798      	blx	r3
 800ecf4:	6923      	ldr	r3, [r4, #16]
 800ecf6:	3b01      	subs	r3, #1
 800ecf8:	6123      	str	r3, [r4, #16]
 800ecfa:	e7f1      	b.n	800ece0 <_scanf_float+0x2fc>
 800ecfc:	46aa      	mov	sl, r5
 800ecfe:	9602      	str	r6, [sp, #8]
 800ed00:	e7df      	b.n	800ecc2 <_scanf_float+0x2de>
 800ed02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ed06:	6923      	ldr	r3, [r4, #16]
 800ed08:	2965      	cmp	r1, #101	; 0x65
 800ed0a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ed0e:	f106 35ff 	add.w	r5, r6, #4294967295
 800ed12:	6123      	str	r3, [r4, #16]
 800ed14:	d00c      	beq.n	800ed30 <_scanf_float+0x34c>
 800ed16:	2945      	cmp	r1, #69	; 0x45
 800ed18:	d00a      	beq.n	800ed30 <_scanf_float+0x34c>
 800ed1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ed1e:	463a      	mov	r2, r7
 800ed20:	4640      	mov	r0, r8
 800ed22:	4798      	blx	r3
 800ed24:	6923      	ldr	r3, [r4, #16]
 800ed26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ed2a:	3b01      	subs	r3, #1
 800ed2c:	1eb5      	subs	r5, r6, #2
 800ed2e:	6123      	str	r3, [r4, #16]
 800ed30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ed34:	463a      	mov	r2, r7
 800ed36:	4640      	mov	r0, r8
 800ed38:	4798      	blx	r3
 800ed3a:	462e      	mov	r6, r5
 800ed3c:	6825      	ldr	r5, [r4, #0]
 800ed3e:	f015 0510 	ands.w	r5, r5, #16
 800ed42:	d159      	bne.n	800edf8 <_scanf_float+0x414>
 800ed44:	7035      	strb	r5, [r6, #0]
 800ed46:	6823      	ldr	r3, [r4, #0]
 800ed48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ed4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed50:	d11b      	bne.n	800ed8a <_scanf_float+0x3a6>
 800ed52:	9b01      	ldr	r3, [sp, #4]
 800ed54:	454b      	cmp	r3, r9
 800ed56:	eba3 0209 	sub.w	r2, r3, r9
 800ed5a:	d123      	bne.n	800eda4 <_scanf_float+0x3c0>
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	4659      	mov	r1, fp
 800ed60:	4640      	mov	r0, r8
 800ed62:	f000 feb3 	bl	800facc <_strtod_r>
 800ed66:	6822      	ldr	r2, [r4, #0]
 800ed68:	9b03      	ldr	r3, [sp, #12]
 800ed6a:	f012 0f02 	tst.w	r2, #2
 800ed6e:	ec57 6b10 	vmov	r6, r7, d0
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	d021      	beq.n	800edba <_scanf_float+0x3d6>
 800ed76:	9903      	ldr	r1, [sp, #12]
 800ed78:	1d1a      	adds	r2, r3, #4
 800ed7a:	600a      	str	r2, [r1, #0]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	e9c3 6700 	strd	r6, r7, [r3]
 800ed82:	68e3      	ldr	r3, [r4, #12]
 800ed84:	3301      	adds	r3, #1
 800ed86:	60e3      	str	r3, [r4, #12]
 800ed88:	e66d      	b.n	800ea66 <_scanf_float+0x82>
 800ed8a:	9b04      	ldr	r3, [sp, #16]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d0e5      	beq.n	800ed5c <_scanf_float+0x378>
 800ed90:	9905      	ldr	r1, [sp, #20]
 800ed92:	230a      	movs	r3, #10
 800ed94:	462a      	mov	r2, r5
 800ed96:	3101      	adds	r1, #1
 800ed98:	4640      	mov	r0, r8
 800ed9a:	f000 ff87 	bl	800fcac <_strtol_r>
 800ed9e:	9b04      	ldr	r3, [sp, #16]
 800eda0:	9e05      	ldr	r6, [sp, #20]
 800eda2:	1ac2      	subs	r2, r0, r3
 800eda4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800eda8:	429e      	cmp	r6, r3
 800edaa:	bf28      	it	cs
 800edac:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800edb0:	4912      	ldr	r1, [pc, #72]	; (800edfc <_scanf_float+0x418>)
 800edb2:	4630      	mov	r0, r6
 800edb4:	f000 f82c 	bl	800ee10 <siprintf>
 800edb8:	e7d0      	b.n	800ed5c <_scanf_float+0x378>
 800edba:	9903      	ldr	r1, [sp, #12]
 800edbc:	f012 0f04 	tst.w	r2, #4
 800edc0:	f103 0204 	add.w	r2, r3, #4
 800edc4:	600a      	str	r2, [r1, #0]
 800edc6:	d1d9      	bne.n	800ed7c <_scanf_float+0x398>
 800edc8:	f8d3 8000 	ldr.w	r8, [r3]
 800edcc:	ee10 2a10 	vmov	r2, s0
 800edd0:	ee10 0a10 	vmov	r0, s0
 800edd4:	463b      	mov	r3, r7
 800edd6:	4639      	mov	r1, r7
 800edd8:	f7f1 feb8 	bl	8000b4c <__aeabi_dcmpun>
 800eddc:	b128      	cbz	r0, 800edea <_scanf_float+0x406>
 800edde:	4808      	ldr	r0, [pc, #32]	; (800ee00 <_scanf_float+0x41c>)
 800ede0:	f000 f810 	bl	800ee04 <nanf>
 800ede4:	ed88 0a00 	vstr	s0, [r8]
 800ede8:	e7cb      	b.n	800ed82 <_scanf_float+0x39e>
 800edea:	4630      	mov	r0, r6
 800edec:	4639      	mov	r1, r7
 800edee:	f7f1 ff0b 	bl	8000c08 <__aeabi_d2f>
 800edf2:	f8c8 0000 	str.w	r0, [r8]
 800edf6:	e7c4      	b.n	800ed82 <_scanf_float+0x39e>
 800edf8:	2500      	movs	r5, #0
 800edfa:	e634      	b.n	800ea66 <_scanf_float+0x82>
 800edfc:	080132a4 	.word	0x080132a4
 800ee00:	080133af 	.word	0x080133af

0800ee04 <nanf>:
 800ee04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ee0c <nanf+0x8>
 800ee08:	4770      	bx	lr
 800ee0a:	bf00      	nop
 800ee0c:	7fc00000 	.word	0x7fc00000

0800ee10 <siprintf>:
 800ee10:	b40e      	push	{r1, r2, r3}
 800ee12:	b500      	push	{lr}
 800ee14:	b09c      	sub	sp, #112	; 0x70
 800ee16:	ab1d      	add	r3, sp, #116	; 0x74
 800ee18:	9002      	str	r0, [sp, #8]
 800ee1a:	9006      	str	r0, [sp, #24]
 800ee1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee20:	4809      	ldr	r0, [pc, #36]	; (800ee48 <siprintf+0x38>)
 800ee22:	9107      	str	r1, [sp, #28]
 800ee24:	9104      	str	r1, [sp, #16]
 800ee26:	4909      	ldr	r1, [pc, #36]	; (800ee4c <siprintf+0x3c>)
 800ee28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee2c:	9105      	str	r1, [sp, #20]
 800ee2e:	6800      	ldr	r0, [r0, #0]
 800ee30:	9301      	str	r3, [sp, #4]
 800ee32:	a902      	add	r1, sp, #8
 800ee34:	f002 ff8a 	bl	8011d4c <_svfiprintf_r>
 800ee38:	9b02      	ldr	r3, [sp, #8]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	701a      	strb	r2, [r3, #0]
 800ee3e:	b01c      	add	sp, #112	; 0x70
 800ee40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee44:	b003      	add	sp, #12
 800ee46:	4770      	bx	lr
 800ee48:	20000024 	.word	0x20000024
 800ee4c:	ffff0208 	.word	0xffff0208

0800ee50 <strcat>:
 800ee50:	b510      	push	{r4, lr}
 800ee52:	4602      	mov	r2, r0
 800ee54:	7814      	ldrb	r4, [r2, #0]
 800ee56:	4613      	mov	r3, r2
 800ee58:	3201      	adds	r2, #1
 800ee5a:	2c00      	cmp	r4, #0
 800ee5c:	d1fa      	bne.n	800ee54 <strcat+0x4>
 800ee5e:	3b01      	subs	r3, #1
 800ee60:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee64:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee68:	2a00      	cmp	r2, #0
 800ee6a:	d1f9      	bne.n	800ee60 <strcat+0x10>
 800ee6c:	bd10      	pop	{r4, pc}

0800ee6e <strchr>:
 800ee6e:	b2c9      	uxtb	r1, r1
 800ee70:	4603      	mov	r3, r0
 800ee72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee76:	b11a      	cbz	r2, 800ee80 <strchr+0x12>
 800ee78:	428a      	cmp	r2, r1
 800ee7a:	d1f9      	bne.n	800ee70 <strchr+0x2>
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	4770      	bx	lr
 800ee80:	2900      	cmp	r1, #0
 800ee82:	bf18      	it	ne
 800ee84:	2300      	movne	r3, #0
 800ee86:	e7f9      	b.n	800ee7c <strchr+0xe>

0800ee88 <sulp>:
 800ee88:	b570      	push	{r4, r5, r6, lr}
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	460d      	mov	r5, r1
 800ee8e:	ec45 4b10 	vmov	d0, r4, r5
 800ee92:	4616      	mov	r6, r2
 800ee94:	f002 fcb8 	bl	8011808 <__ulp>
 800ee98:	ec51 0b10 	vmov	r0, r1, d0
 800ee9c:	b17e      	cbz	r6, 800eebe <sulp+0x36>
 800ee9e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eea2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	dd09      	ble.n	800eebe <sulp+0x36>
 800eeaa:	051b      	lsls	r3, r3, #20
 800eeac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800eeb0:	2400      	movs	r4, #0
 800eeb2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800eeb6:	4622      	mov	r2, r4
 800eeb8:	462b      	mov	r3, r5
 800eeba:	f7f1 fbad 	bl	8000618 <__aeabi_dmul>
 800eebe:	bd70      	pop	{r4, r5, r6, pc}

0800eec0 <_strtod_l>:
 800eec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec4:	ed2d 8b02 	vpush	{d8}
 800eec8:	b09d      	sub	sp, #116	; 0x74
 800eeca:	461f      	mov	r7, r3
 800eecc:	2300      	movs	r3, #0
 800eece:	9318      	str	r3, [sp, #96]	; 0x60
 800eed0:	4ba2      	ldr	r3, [pc, #648]	; (800f15c <_strtod_l+0x29c>)
 800eed2:	9213      	str	r2, [sp, #76]	; 0x4c
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	9305      	str	r3, [sp, #20]
 800eed8:	4604      	mov	r4, r0
 800eeda:	4618      	mov	r0, r3
 800eedc:	4688      	mov	r8, r1
 800eede:	f7f1 f981 	bl	80001e4 <strlen>
 800eee2:	f04f 0a00 	mov.w	sl, #0
 800eee6:	4605      	mov	r5, r0
 800eee8:	f04f 0b00 	mov.w	fp, #0
 800eeec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800eef0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eef2:	781a      	ldrb	r2, [r3, #0]
 800eef4:	2a2b      	cmp	r2, #43	; 0x2b
 800eef6:	d04e      	beq.n	800ef96 <_strtod_l+0xd6>
 800eef8:	d83b      	bhi.n	800ef72 <_strtod_l+0xb2>
 800eefa:	2a0d      	cmp	r2, #13
 800eefc:	d834      	bhi.n	800ef68 <_strtod_l+0xa8>
 800eefe:	2a08      	cmp	r2, #8
 800ef00:	d834      	bhi.n	800ef6c <_strtod_l+0xac>
 800ef02:	2a00      	cmp	r2, #0
 800ef04:	d03e      	beq.n	800ef84 <_strtod_l+0xc4>
 800ef06:	2300      	movs	r3, #0
 800ef08:	930a      	str	r3, [sp, #40]	; 0x28
 800ef0a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ef0c:	7833      	ldrb	r3, [r6, #0]
 800ef0e:	2b30      	cmp	r3, #48	; 0x30
 800ef10:	f040 80b0 	bne.w	800f074 <_strtod_l+0x1b4>
 800ef14:	7873      	ldrb	r3, [r6, #1]
 800ef16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ef1a:	2b58      	cmp	r3, #88	; 0x58
 800ef1c:	d168      	bne.n	800eff0 <_strtod_l+0x130>
 800ef1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef20:	9301      	str	r3, [sp, #4]
 800ef22:	ab18      	add	r3, sp, #96	; 0x60
 800ef24:	9702      	str	r7, [sp, #8]
 800ef26:	9300      	str	r3, [sp, #0]
 800ef28:	4a8d      	ldr	r2, [pc, #564]	; (800f160 <_strtod_l+0x2a0>)
 800ef2a:	ab19      	add	r3, sp, #100	; 0x64
 800ef2c:	a917      	add	r1, sp, #92	; 0x5c
 800ef2e:	4620      	mov	r0, r4
 800ef30:	f001 fdd2 	bl	8010ad8 <__gethex>
 800ef34:	f010 0707 	ands.w	r7, r0, #7
 800ef38:	4605      	mov	r5, r0
 800ef3a:	d005      	beq.n	800ef48 <_strtod_l+0x88>
 800ef3c:	2f06      	cmp	r7, #6
 800ef3e:	d12c      	bne.n	800ef9a <_strtod_l+0xda>
 800ef40:	3601      	adds	r6, #1
 800ef42:	2300      	movs	r3, #0
 800ef44:	9617      	str	r6, [sp, #92]	; 0x5c
 800ef46:	930a      	str	r3, [sp, #40]	; 0x28
 800ef48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	f040 8590 	bne.w	800fa70 <_strtod_l+0xbb0>
 800ef50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef52:	b1eb      	cbz	r3, 800ef90 <_strtod_l+0xd0>
 800ef54:	4652      	mov	r2, sl
 800ef56:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ef5a:	ec43 2b10 	vmov	d0, r2, r3
 800ef5e:	b01d      	add	sp, #116	; 0x74
 800ef60:	ecbd 8b02 	vpop	{d8}
 800ef64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef68:	2a20      	cmp	r2, #32
 800ef6a:	d1cc      	bne.n	800ef06 <_strtod_l+0x46>
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ef70:	e7be      	b.n	800eef0 <_strtod_l+0x30>
 800ef72:	2a2d      	cmp	r2, #45	; 0x2d
 800ef74:	d1c7      	bne.n	800ef06 <_strtod_l+0x46>
 800ef76:	2201      	movs	r2, #1
 800ef78:	920a      	str	r2, [sp, #40]	; 0x28
 800ef7a:	1c5a      	adds	r2, r3, #1
 800ef7c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ef7e:	785b      	ldrb	r3, [r3, #1]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d1c2      	bne.n	800ef0a <_strtod_l+0x4a>
 800ef84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ef86:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	f040 856e 	bne.w	800fa6c <_strtod_l+0xbac>
 800ef90:	4652      	mov	r2, sl
 800ef92:	465b      	mov	r3, fp
 800ef94:	e7e1      	b.n	800ef5a <_strtod_l+0x9a>
 800ef96:	2200      	movs	r2, #0
 800ef98:	e7ee      	b.n	800ef78 <_strtod_l+0xb8>
 800ef9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ef9c:	b13a      	cbz	r2, 800efae <_strtod_l+0xee>
 800ef9e:	2135      	movs	r1, #53	; 0x35
 800efa0:	a81a      	add	r0, sp, #104	; 0x68
 800efa2:	f002 fd3c 	bl	8011a1e <__copybits>
 800efa6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800efa8:	4620      	mov	r0, r4
 800efaa:	f002 f8fb 	bl	80111a4 <_Bfree>
 800efae:	3f01      	subs	r7, #1
 800efb0:	2f04      	cmp	r7, #4
 800efb2:	d806      	bhi.n	800efc2 <_strtod_l+0x102>
 800efb4:	e8df f007 	tbb	[pc, r7]
 800efb8:	1714030a 	.word	0x1714030a
 800efbc:	0a          	.byte	0x0a
 800efbd:	00          	.byte	0x00
 800efbe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800efc2:	0728      	lsls	r0, r5, #28
 800efc4:	d5c0      	bpl.n	800ef48 <_strtod_l+0x88>
 800efc6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800efca:	e7bd      	b.n	800ef48 <_strtod_l+0x88>
 800efcc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800efd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800efd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800efd6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800efda:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800efde:	e7f0      	b.n	800efc2 <_strtod_l+0x102>
 800efe0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f164 <_strtod_l+0x2a4>
 800efe4:	e7ed      	b.n	800efc2 <_strtod_l+0x102>
 800efe6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800efea:	f04f 3aff 	mov.w	sl, #4294967295
 800efee:	e7e8      	b.n	800efc2 <_strtod_l+0x102>
 800eff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eff2:	1c5a      	adds	r2, r3, #1
 800eff4:	9217      	str	r2, [sp, #92]	; 0x5c
 800eff6:	785b      	ldrb	r3, [r3, #1]
 800eff8:	2b30      	cmp	r3, #48	; 0x30
 800effa:	d0f9      	beq.n	800eff0 <_strtod_l+0x130>
 800effc:	2b00      	cmp	r3, #0
 800effe:	d0a3      	beq.n	800ef48 <_strtod_l+0x88>
 800f000:	2301      	movs	r3, #1
 800f002:	f04f 0900 	mov.w	r9, #0
 800f006:	9304      	str	r3, [sp, #16]
 800f008:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f00a:	9308      	str	r3, [sp, #32]
 800f00c:	f8cd 901c 	str.w	r9, [sp, #28]
 800f010:	464f      	mov	r7, r9
 800f012:	220a      	movs	r2, #10
 800f014:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f016:	7806      	ldrb	r6, [r0, #0]
 800f018:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f01c:	b2d9      	uxtb	r1, r3
 800f01e:	2909      	cmp	r1, #9
 800f020:	d92a      	bls.n	800f078 <_strtod_l+0x1b8>
 800f022:	9905      	ldr	r1, [sp, #20]
 800f024:	462a      	mov	r2, r5
 800f026:	f003 f903 	bl	8012230 <strncmp>
 800f02a:	b398      	cbz	r0, 800f094 <_strtod_l+0x1d4>
 800f02c:	2000      	movs	r0, #0
 800f02e:	4632      	mov	r2, r6
 800f030:	463d      	mov	r5, r7
 800f032:	9005      	str	r0, [sp, #20]
 800f034:	4603      	mov	r3, r0
 800f036:	2a65      	cmp	r2, #101	; 0x65
 800f038:	d001      	beq.n	800f03e <_strtod_l+0x17e>
 800f03a:	2a45      	cmp	r2, #69	; 0x45
 800f03c:	d118      	bne.n	800f070 <_strtod_l+0x1b0>
 800f03e:	b91d      	cbnz	r5, 800f048 <_strtod_l+0x188>
 800f040:	9a04      	ldr	r2, [sp, #16]
 800f042:	4302      	orrs	r2, r0
 800f044:	d09e      	beq.n	800ef84 <_strtod_l+0xc4>
 800f046:	2500      	movs	r5, #0
 800f048:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f04c:	f108 0201 	add.w	r2, r8, #1
 800f050:	9217      	str	r2, [sp, #92]	; 0x5c
 800f052:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f056:	2a2b      	cmp	r2, #43	; 0x2b
 800f058:	d075      	beq.n	800f146 <_strtod_l+0x286>
 800f05a:	2a2d      	cmp	r2, #45	; 0x2d
 800f05c:	d07b      	beq.n	800f156 <_strtod_l+0x296>
 800f05e:	f04f 0c00 	mov.w	ip, #0
 800f062:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f066:	2909      	cmp	r1, #9
 800f068:	f240 8082 	bls.w	800f170 <_strtod_l+0x2b0>
 800f06c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f070:	2600      	movs	r6, #0
 800f072:	e09d      	b.n	800f1b0 <_strtod_l+0x2f0>
 800f074:	2300      	movs	r3, #0
 800f076:	e7c4      	b.n	800f002 <_strtod_l+0x142>
 800f078:	2f08      	cmp	r7, #8
 800f07a:	bfd8      	it	le
 800f07c:	9907      	ldrle	r1, [sp, #28]
 800f07e:	f100 0001 	add.w	r0, r0, #1
 800f082:	bfda      	itte	le
 800f084:	fb02 3301 	mlale	r3, r2, r1, r3
 800f088:	9307      	strle	r3, [sp, #28]
 800f08a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f08e:	3701      	adds	r7, #1
 800f090:	9017      	str	r0, [sp, #92]	; 0x5c
 800f092:	e7bf      	b.n	800f014 <_strtod_l+0x154>
 800f094:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f096:	195a      	adds	r2, r3, r5
 800f098:	9217      	str	r2, [sp, #92]	; 0x5c
 800f09a:	5d5a      	ldrb	r2, [r3, r5]
 800f09c:	2f00      	cmp	r7, #0
 800f09e:	d037      	beq.n	800f110 <_strtod_l+0x250>
 800f0a0:	9005      	str	r0, [sp, #20]
 800f0a2:	463d      	mov	r5, r7
 800f0a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f0a8:	2b09      	cmp	r3, #9
 800f0aa:	d912      	bls.n	800f0d2 <_strtod_l+0x212>
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	e7c2      	b.n	800f036 <_strtod_l+0x176>
 800f0b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f0b2:	1c5a      	adds	r2, r3, #1
 800f0b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f0b6:	785a      	ldrb	r2, [r3, #1]
 800f0b8:	3001      	adds	r0, #1
 800f0ba:	2a30      	cmp	r2, #48	; 0x30
 800f0bc:	d0f8      	beq.n	800f0b0 <_strtod_l+0x1f0>
 800f0be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f0c2:	2b08      	cmp	r3, #8
 800f0c4:	f200 84d9 	bhi.w	800fa7a <_strtod_l+0xbba>
 800f0c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f0ca:	9005      	str	r0, [sp, #20]
 800f0cc:	2000      	movs	r0, #0
 800f0ce:	9308      	str	r3, [sp, #32]
 800f0d0:	4605      	mov	r5, r0
 800f0d2:	3a30      	subs	r2, #48	; 0x30
 800f0d4:	f100 0301 	add.w	r3, r0, #1
 800f0d8:	d014      	beq.n	800f104 <_strtod_l+0x244>
 800f0da:	9905      	ldr	r1, [sp, #20]
 800f0dc:	4419      	add	r1, r3
 800f0de:	9105      	str	r1, [sp, #20]
 800f0e0:	462b      	mov	r3, r5
 800f0e2:	eb00 0e05 	add.w	lr, r0, r5
 800f0e6:	210a      	movs	r1, #10
 800f0e8:	4573      	cmp	r3, lr
 800f0ea:	d113      	bne.n	800f114 <_strtod_l+0x254>
 800f0ec:	182b      	adds	r3, r5, r0
 800f0ee:	2b08      	cmp	r3, #8
 800f0f0:	f105 0501 	add.w	r5, r5, #1
 800f0f4:	4405      	add	r5, r0
 800f0f6:	dc1c      	bgt.n	800f132 <_strtod_l+0x272>
 800f0f8:	9907      	ldr	r1, [sp, #28]
 800f0fa:	230a      	movs	r3, #10
 800f0fc:	fb03 2301 	mla	r3, r3, r1, r2
 800f100:	9307      	str	r3, [sp, #28]
 800f102:	2300      	movs	r3, #0
 800f104:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f106:	1c51      	adds	r1, r2, #1
 800f108:	9117      	str	r1, [sp, #92]	; 0x5c
 800f10a:	7852      	ldrb	r2, [r2, #1]
 800f10c:	4618      	mov	r0, r3
 800f10e:	e7c9      	b.n	800f0a4 <_strtod_l+0x1e4>
 800f110:	4638      	mov	r0, r7
 800f112:	e7d2      	b.n	800f0ba <_strtod_l+0x1fa>
 800f114:	2b08      	cmp	r3, #8
 800f116:	dc04      	bgt.n	800f122 <_strtod_l+0x262>
 800f118:	9e07      	ldr	r6, [sp, #28]
 800f11a:	434e      	muls	r6, r1
 800f11c:	9607      	str	r6, [sp, #28]
 800f11e:	3301      	adds	r3, #1
 800f120:	e7e2      	b.n	800f0e8 <_strtod_l+0x228>
 800f122:	f103 0c01 	add.w	ip, r3, #1
 800f126:	f1bc 0f10 	cmp.w	ip, #16
 800f12a:	bfd8      	it	le
 800f12c:	fb01 f909 	mulle.w	r9, r1, r9
 800f130:	e7f5      	b.n	800f11e <_strtod_l+0x25e>
 800f132:	2d10      	cmp	r5, #16
 800f134:	bfdc      	itt	le
 800f136:	230a      	movle	r3, #10
 800f138:	fb03 2909 	mlale	r9, r3, r9, r2
 800f13c:	e7e1      	b.n	800f102 <_strtod_l+0x242>
 800f13e:	2300      	movs	r3, #0
 800f140:	9305      	str	r3, [sp, #20]
 800f142:	2301      	movs	r3, #1
 800f144:	e77c      	b.n	800f040 <_strtod_l+0x180>
 800f146:	f04f 0c00 	mov.w	ip, #0
 800f14a:	f108 0202 	add.w	r2, r8, #2
 800f14e:	9217      	str	r2, [sp, #92]	; 0x5c
 800f150:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f154:	e785      	b.n	800f062 <_strtod_l+0x1a2>
 800f156:	f04f 0c01 	mov.w	ip, #1
 800f15a:	e7f6      	b.n	800f14a <_strtod_l+0x28a>
 800f15c:	08013590 	.word	0x08013590
 800f160:	080132ac 	.word	0x080132ac
 800f164:	7ff00000 	.word	0x7ff00000
 800f168:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f16a:	1c51      	adds	r1, r2, #1
 800f16c:	9117      	str	r1, [sp, #92]	; 0x5c
 800f16e:	7852      	ldrb	r2, [r2, #1]
 800f170:	2a30      	cmp	r2, #48	; 0x30
 800f172:	d0f9      	beq.n	800f168 <_strtod_l+0x2a8>
 800f174:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f178:	2908      	cmp	r1, #8
 800f17a:	f63f af79 	bhi.w	800f070 <_strtod_l+0x1b0>
 800f17e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f182:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f184:	9206      	str	r2, [sp, #24]
 800f186:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f188:	1c51      	adds	r1, r2, #1
 800f18a:	9117      	str	r1, [sp, #92]	; 0x5c
 800f18c:	7852      	ldrb	r2, [r2, #1]
 800f18e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f192:	2e09      	cmp	r6, #9
 800f194:	d937      	bls.n	800f206 <_strtod_l+0x346>
 800f196:	9e06      	ldr	r6, [sp, #24]
 800f198:	1b89      	subs	r1, r1, r6
 800f19a:	2908      	cmp	r1, #8
 800f19c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f1a0:	dc02      	bgt.n	800f1a8 <_strtod_l+0x2e8>
 800f1a2:	4576      	cmp	r6, lr
 800f1a4:	bfa8      	it	ge
 800f1a6:	4676      	movge	r6, lr
 800f1a8:	f1bc 0f00 	cmp.w	ip, #0
 800f1ac:	d000      	beq.n	800f1b0 <_strtod_l+0x2f0>
 800f1ae:	4276      	negs	r6, r6
 800f1b0:	2d00      	cmp	r5, #0
 800f1b2:	d14d      	bne.n	800f250 <_strtod_l+0x390>
 800f1b4:	9904      	ldr	r1, [sp, #16]
 800f1b6:	4301      	orrs	r1, r0
 800f1b8:	f47f aec6 	bne.w	800ef48 <_strtod_l+0x88>
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f47f aee1 	bne.w	800ef84 <_strtod_l+0xc4>
 800f1c2:	2a69      	cmp	r2, #105	; 0x69
 800f1c4:	d027      	beq.n	800f216 <_strtod_l+0x356>
 800f1c6:	dc24      	bgt.n	800f212 <_strtod_l+0x352>
 800f1c8:	2a49      	cmp	r2, #73	; 0x49
 800f1ca:	d024      	beq.n	800f216 <_strtod_l+0x356>
 800f1cc:	2a4e      	cmp	r2, #78	; 0x4e
 800f1ce:	f47f aed9 	bne.w	800ef84 <_strtod_l+0xc4>
 800f1d2:	499f      	ldr	r1, [pc, #636]	; (800f450 <_strtod_l+0x590>)
 800f1d4:	a817      	add	r0, sp, #92	; 0x5c
 800f1d6:	f001 fed7 	bl	8010f88 <__match>
 800f1da:	2800      	cmp	r0, #0
 800f1dc:	f43f aed2 	beq.w	800ef84 <_strtod_l+0xc4>
 800f1e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f1e2:	781b      	ldrb	r3, [r3, #0]
 800f1e4:	2b28      	cmp	r3, #40	; 0x28
 800f1e6:	d12d      	bne.n	800f244 <_strtod_l+0x384>
 800f1e8:	499a      	ldr	r1, [pc, #616]	; (800f454 <_strtod_l+0x594>)
 800f1ea:	aa1a      	add	r2, sp, #104	; 0x68
 800f1ec:	a817      	add	r0, sp, #92	; 0x5c
 800f1ee:	f001 fedf 	bl	8010fb0 <__hexnan>
 800f1f2:	2805      	cmp	r0, #5
 800f1f4:	d126      	bne.n	800f244 <_strtod_l+0x384>
 800f1f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f1f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f1fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f200:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f204:	e6a0      	b.n	800ef48 <_strtod_l+0x88>
 800f206:	210a      	movs	r1, #10
 800f208:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f20c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f210:	e7b9      	b.n	800f186 <_strtod_l+0x2c6>
 800f212:	2a6e      	cmp	r2, #110	; 0x6e
 800f214:	e7db      	b.n	800f1ce <_strtod_l+0x30e>
 800f216:	4990      	ldr	r1, [pc, #576]	; (800f458 <_strtod_l+0x598>)
 800f218:	a817      	add	r0, sp, #92	; 0x5c
 800f21a:	f001 feb5 	bl	8010f88 <__match>
 800f21e:	2800      	cmp	r0, #0
 800f220:	f43f aeb0 	beq.w	800ef84 <_strtod_l+0xc4>
 800f224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f226:	498d      	ldr	r1, [pc, #564]	; (800f45c <_strtod_l+0x59c>)
 800f228:	3b01      	subs	r3, #1
 800f22a:	a817      	add	r0, sp, #92	; 0x5c
 800f22c:	9317      	str	r3, [sp, #92]	; 0x5c
 800f22e:	f001 feab 	bl	8010f88 <__match>
 800f232:	b910      	cbnz	r0, 800f23a <_strtod_l+0x37a>
 800f234:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f236:	3301      	adds	r3, #1
 800f238:	9317      	str	r3, [sp, #92]	; 0x5c
 800f23a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f46c <_strtod_l+0x5ac>
 800f23e:	f04f 0a00 	mov.w	sl, #0
 800f242:	e681      	b.n	800ef48 <_strtod_l+0x88>
 800f244:	4886      	ldr	r0, [pc, #536]	; (800f460 <_strtod_l+0x5a0>)
 800f246:	f002 ffdb 	bl	8012200 <nan>
 800f24a:	ec5b ab10 	vmov	sl, fp, d0
 800f24e:	e67b      	b.n	800ef48 <_strtod_l+0x88>
 800f250:	9b05      	ldr	r3, [sp, #20]
 800f252:	9807      	ldr	r0, [sp, #28]
 800f254:	1af3      	subs	r3, r6, r3
 800f256:	2f00      	cmp	r7, #0
 800f258:	bf08      	it	eq
 800f25a:	462f      	moveq	r7, r5
 800f25c:	2d10      	cmp	r5, #16
 800f25e:	9306      	str	r3, [sp, #24]
 800f260:	46a8      	mov	r8, r5
 800f262:	bfa8      	it	ge
 800f264:	f04f 0810 	movge.w	r8, #16
 800f268:	f7f1 f95c 	bl	8000524 <__aeabi_ui2d>
 800f26c:	2d09      	cmp	r5, #9
 800f26e:	4682      	mov	sl, r0
 800f270:	468b      	mov	fp, r1
 800f272:	dd13      	ble.n	800f29c <_strtod_l+0x3dc>
 800f274:	4b7b      	ldr	r3, [pc, #492]	; (800f464 <_strtod_l+0x5a4>)
 800f276:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f27a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f27e:	f7f1 f9cb 	bl	8000618 <__aeabi_dmul>
 800f282:	4682      	mov	sl, r0
 800f284:	4648      	mov	r0, r9
 800f286:	468b      	mov	fp, r1
 800f288:	f7f1 f94c 	bl	8000524 <__aeabi_ui2d>
 800f28c:	4602      	mov	r2, r0
 800f28e:	460b      	mov	r3, r1
 800f290:	4650      	mov	r0, sl
 800f292:	4659      	mov	r1, fp
 800f294:	f7f1 f80a 	bl	80002ac <__adddf3>
 800f298:	4682      	mov	sl, r0
 800f29a:	468b      	mov	fp, r1
 800f29c:	2d0f      	cmp	r5, #15
 800f29e:	dc38      	bgt.n	800f312 <_strtod_l+0x452>
 800f2a0:	9b06      	ldr	r3, [sp, #24]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	f43f ae50 	beq.w	800ef48 <_strtod_l+0x88>
 800f2a8:	dd24      	ble.n	800f2f4 <_strtod_l+0x434>
 800f2aa:	2b16      	cmp	r3, #22
 800f2ac:	dc0b      	bgt.n	800f2c6 <_strtod_l+0x406>
 800f2ae:	496d      	ldr	r1, [pc, #436]	; (800f464 <_strtod_l+0x5a4>)
 800f2b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f2b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2b8:	4652      	mov	r2, sl
 800f2ba:	465b      	mov	r3, fp
 800f2bc:	f7f1 f9ac 	bl	8000618 <__aeabi_dmul>
 800f2c0:	4682      	mov	sl, r0
 800f2c2:	468b      	mov	fp, r1
 800f2c4:	e640      	b.n	800ef48 <_strtod_l+0x88>
 800f2c6:	9a06      	ldr	r2, [sp, #24]
 800f2c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	db20      	blt.n	800f312 <_strtod_l+0x452>
 800f2d0:	4c64      	ldr	r4, [pc, #400]	; (800f464 <_strtod_l+0x5a4>)
 800f2d2:	f1c5 050f 	rsb	r5, r5, #15
 800f2d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f2da:	4652      	mov	r2, sl
 800f2dc:	465b      	mov	r3, fp
 800f2de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2e2:	f7f1 f999 	bl	8000618 <__aeabi_dmul>
 800f2e6:	9b06      	ldr	r3, [sp, #24]
 800f2e8:	1b5d      	subs	r5, r3, r5
 800f2ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f2ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f2f2:	e7e3      	b.n	800f2bc <_strtod_l+0x3fc>
 800f2f4:	9b06      	ldr	r3, [sp, #24]
 800f2f6:	3316      	adds	r3, #22
 800f2f8:	db0b      	blt.n	800f312 <_strtod_l+0x452>
 800f2fa:	9b05      	ldr	r3, [sp, #20]
 800f2fc:	1b9e      	subs	r6, r3, r6
 800f2fe:	4b59      	ldr	r3, [pc, #356]	; (800f464 <_strtod_l+0x5a4>)
 800f300:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f304:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f308:	4650      	mov	r0, sl
 800f30a:	4659      	mov	r1, fp
 800f30c:	f7f1 faae 	bl	800086c <__aeabi_ddiv>
 800f310:	e7d6      	b.n	800f2c0 <_strtod_l+0x400>
 800f312:	9b06      	ldr	r3, [sp, #24]
 800f314:	eba5 0808 	sub.w	r8, r5, r8
 800f318:	4498      	add	r8, r3
 800f31a:	f1b8 0f00 	cmp.w	r8, #0
 800f31e:	dd74      	ble.n	800f40a <_strtod_l+0x54a>
 800f320:	f018 030f 	ands.w	r3, r8, #15
 800f324:	d00a      	beq.n	800f33c <_strtod_l+0x47c>
 800f326:	494f      	ldr	r1, [pc, #316]	; (800f464 <_strtod_l+0x5a4>)
 800f328:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f32c:	4652      	mov	r2, sl
 800f32e:	465b      	mov	r3, fp
 800f330:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f334:	f7f1 f970 	bl	8000618 <__aeabi_dmul>
 800f338:	4682      	mov	sl, r0
 800f33a:	468b      	mov	fp, r1
 800f33c:	f038 080f 	bics.w	r8, r8, #15
 800f340:	d04f      	beq.n	800f3e2 <_strtod_l+0x522>
 800f342:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f346:	dd22      	ble.n	800f38e <_strtod_l+0x4ce>
 800f348:	2500      	movs	r5, #0
 800f34a:	462e      	mov	r6, r5
 800f34c:	9507      	str	r5, [sp, #28]
 800f34e:	9505      	str	r5, [sp, #20]
 800f350:	2322      	movs	r3, #34	; 0x22
 800f352:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f46c <_strtod_l+0x5ac>
 800f356:	6023      	str	r3, [r4, #0]
 800f358:	f04f 0a00 	mov.w	sl, #0
 800f35c:	9b07      	ldr	r3, [sp, #28]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	f43f adf2 	beq.w	800ef48 <_strtod_l+0x88>
 800f364:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f366:	4620      	mov	r0, r4
 800f368:	f001 ff1c 	bl	80111a4 <_Bfree>
 800f36c:	9905      	ldr	r1, [sp, #20]
 800f36e:	4620      	mov	r0, r4
 800f370:	f001 ff18 	bl	80111a4 <_Bfree>
 800f374:	4631      	mov	r1, r6
 800f376:	4620      	mov	r0, r4
 800f378:	f001 ff14 	bl	80111a4 <_Bfree>
 800f37c:	9907      	ldr	r1, [sp, #28]
 800f37e:	4620      	mov	r0, r4
 800f380:	f001 ff10 	bl	80111a4 <_Bfree>
 800f384:	4629      	mov	r1, r5
 800f386:	4620      	mov	r0, r4
 800f388:	f001 ff0c 	bl	80111a4 <_Bfree>
 800f38c:	e5dc      	b.n	800ef48 <_strtod_l+0x88>
 800f38e:	4b36      	ldr	r3, [pc, #216]	; (800f468 <_strtod_l+0x5a8>)
 800f390:	9304      	str	r3, [sp, #16]
 800f392:	2300      	movs	r3, #0
 800f394:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f398:	4650      	mov	r0, sl
 800f39a:	4659      	mov	r1, fp
 800f39c:	4699      	mov	r9, r3
 800f39e:	f1b8 0f01 	cmp.w	r8, #1
 800f3a2:	dc21      	bgt.n	800f3e8 <_strtod_l+0x528>
 800f3a4:	b10b      	cbz	r3, 800f3aa <_strtod_l+0x4ea>
 800f3a6:	4682      	mov	sl, r0
 800f3a8:	468b      	mov	fp, r1
 800f3aa:	4b2f      	ldr	r3, [pc, #188]	; (800f468 <_strtod_l+0x5a8>)
 800f3ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f3b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f3b4:	4652      	mov	r2, sl
 800f3b6:	465b      	mov	r3, fp
 800f3b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f3bc:	f7f1 f92c 	bl	8000618 <__aeabi_dmul>
 800f3c0:	4b2a      	ldr	r3, [pc, #168]	; (800f46c <_strtod_l+0x5ac>)
 800f3c2:	460a      	mov	r2, r1
 800f3c4:	400b      	ands	r3, r1
 800f3c6:	492a      	ldr	r1, [pc, #168]	; (800f470 <_strtod_l+0x5b0>)
 800f3c8:	428b      	cmp	r3, r1
 800f3ca:	4682      	mov	sl, r0
 800f3cc:	d8bc      	bhi.n	800f348 <_strtod_l+0x488>
 800f3ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f3d2:	428b      	cmp	r3, r1
 800f3d4:	bf86      	itte	hi
 800f3d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f474 <_strtod_l+0x5b4>
 800f3da:	f04f 3aff 	movhi.w	sl, #4294967295
 800f3de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	9304      	str	r3, [sp, #16]
 800f3e6:	e084      	b.n	800f4f2 <_strtod_l+0x632>
 800f3e8:	f018 0f01 	tst.w	r8, #1
 800f3ec:	d005      	beq.n	800f3fa <_strtod_l+0x53a>
 800f3ee:	9b04      	ldr	r3, [sp, #16]
 800f3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f4:	f7f1 f910 	bl	8000618 <__aeabi_dmul>
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	9a04      	ldr	r2, [sp, #16]
 800f3fc:	3208      	adds	r2, #8
 800f3fe:	f109 0901 	add.w	r9, r9, #1
 800f402:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f406:	9204      	str	r2, [sp, #16]
 800f408:	e7c9      	b.n	800f39e <_strtod_l+0x4de>
 800f40a:	d0ea      	beq.n	800f3e2 <_strtod_l+0x522>
 800f40c:	f1c8 0800 	rsb	r8, r8, #0
 800f410:	f018 020f 	ands.w	r2, r8, #15
 800f414:	d00a      	beq.n	800f42c <_strtod_l+0x56c>
 800f416:	4b13      	ldr	r3, [pc, #76]	; (800f464 <_strtod_l+0x5a4>)
 800f418:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f41c:	4650      	mov	r0, sl
 800f41e:	4659      	mov	r1, fp
 800f420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f424:	f7f1 fa22 	bl	800086c <__aeabi_ddiv>
 800f428:	4682      	mov	sl, r0
 800f42a:	468b      	mov	fp, r1
 800f42c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f430:	d0d7      	beq.n	800f3e2 <_strtod_l+0x522>
 800f432:	f1b8 0f1f 	cmp.w	r8, #31
 800f436:	dd1f      	ble.n	800f478 <_strtod_l+0x5b8>
 800f438:	2500      	movs	r5, #0
 800f43a:	462e      	mov	r6, r5
 800f43c:	9507      	str	r5, [sp, #28]
 800f43e:	9505      	str	r5, [sp, #20]
 800f440:	2322      	movs	r3, #34	; 0x22
 800f442:	f04f 0a00 	mov.w	sl, #0
 800f446:	f04f 0b00 	mov.w	fp, #0
 800f44a:	6023      	str	r3, [r4, #0]
 800f44c:	e786      	b.n	800f35c <_strtod_l+0x49c>
 800f44e:	bf00      	nop
 800f450:	0801327d 	.word	0x0801327d
 800f454:	080132c0 	.word	0x080132c0
 800f458:	08013275 	.word	0x08013275
 800f45c:	080134b4 	.word	0x080134b4
 800f460:	080133af 	.word	0x080133af
 800f464:	08013628 	.word	0x08013628
 800f468:	08013600 	.word	0x08013600
 800f46c:	7ff00000 	.word	0x7ff00000
 800f470:	7ca00000 	.word	0x7ca00000
 800f474:	7fefffff 	.word	0x7fefffff
 800f478:	f018 0310 	ands.w	r3, r8, #16
 800f47c:	bf18      	it	ne
 800f47e:	236a      	movne	r3, #106	; 0x6a
 800f480:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f830 <_strtod_l+0x970>
 800f484:	9304      	str	r3, [sp, #16]
 800f486:	4650      	mov	r0, sl
 800f488:	4659      	mov	r1, fp
 800f48a:	2300      	movs	r3, #0
 800f48c:	f018 0f01 	tst.w	r8, #1
 800f490:	d004      	beq.n	800f49c <_strtod_l+0x5dc>
 800f492:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f496:	f7f1 f8bf 	bl	8000618 <__aeabi_dmul>
 800f49a:	2301      	movs	r3, #1
 800f49c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f4a0:	f109 0908 	add.w	r9, r9, #8
 800f4a4:	d1f2      	bne.n	800f48c <_strtod_l+0x5cc>
 800f4a6:	b10b      	cbz	r3, 800f4ac <_strtod_l+0x5ec>
 800f4a8:	4682      	mov	sl, r0
 800f4aa:	468b      	mov	fp, r1
 800f4ac:	9b04      	ldr	r3, [sp, #16]
 800f4ae:	b1c3      	cbz	r3, 800f4e2 <_strtod_l+0x622>
 800f4b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f4b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	4659      	mov	r1, fp
 800f4bc:	dd11      	ble.n	800f4e2 <_strtod_l+0x622>
 800f4be:	2b1f      	cmp	r3, #31
 800f4c0:	f340 8124 	ble.w	800f70c <_strtod_l+0x84c>
 800f4c4:	2b34      	cmp	r3, #52	; 0x34
 800f4c6:	bfde      	ittt	le
 800f4c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f4cc:	f04f 33ff 	movle.w	r3, #4294967295
 800f4d0:	fa03 f202 	lslle.w	r2, r3, r2
 800f4d4:	f04f 0a00 	mov.w	sl, #0
 800f4d8:	bfcc      	ite	gt
 800f4da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f4de:	ea02 0b01 	andle.w	fp, r2, r1
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	4650      	mov	r0, sl
 800f4e8:	4659      	mov	r1, fp
 800f4ea:	f7f1 fafd 	bl	8000ae8 <__aeabi_dcmpeq>
 800f4ee:	2800      	cmp	r0, #0
 800f4f0:	d1a2      	bne.n	800f438 <_strtod_l+0x578>
 800f4f2:	9b07      	ldr	r3, [sp, #28]
 800f4f4:	9300      	str	r3, [sp, #0]
 800f4f6:	9908      	ldr	r1, [sp, #32]
 800f4f8:	462b      	mov	r3, r5
 800f4fa:	463a      	mov	r2, r7
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	f001 feb9 	bl	8011274 <__s2b>
 800f502:	9007      	str	r0, [sp, #28]
 800f504:	2800      	cmp	r0, #0
 800f506:	f43f af1f 	beq.w	800f348 <_strtod_l+0x488>
 800f50a:	9b05      	ldr	r3, [sp, #20]
 800f50c:	1b9e      	subs	r6, r3, r6
 800f50e:	9b06      	ldr	r3, [sp, #24]
 800f510:	2b00      	cmp	r3, #0
 800f512:	bfb4      	ite	lt
 800f514:	4633      	movlt	r3, r6
 800f516:	2300      	movge	r3, #0
 800f518:	930c      	str	r3, [sp, #48]	; 0x30
 800f51a:	9b06      	ldr	r3, [sp, #24]
 800f51c:	2500      	movs	r5, #0
 800f51e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f522:	9312      	str	r3, [sp, #72]	; 0x48
 800f524:	462e      	mov	r6, r5
 800f526:	9b07      	ldr	r3, [sp, #28]
 800f528:	4620      	mov	r0, r4
 800f52a:	6859      	ldr	r1, [r3, #4]
 800f52c:	f001 fdfa 	bl	8011124 <_Balloc>
 800f530:	9005      	str	r0, [sp, #20]
 800f532:	2800      	cmp	r0, #0
 800f534:	f43f af0c 	beq.w	800f350 <_strtod_l+0x490>
 800f538:	9b07      	ldr	r3, [sp, #28]
 800f53a:	691a      	ldr	r2, [r3, #16]
 800f53c:	3202      	adds	r2, #2
 800f53e:	f103 010c 	add.w	r1, r3, #12
 800f542:	0092      	lsls	r2, r2, #2
 800f544:	300c      	adds	r0, #12
 800f546:	f7fe fdcd 	bl	800e0e4 <memcpy>
 800f54a:	ec4b ab10 	vmov	d0, sl, fp
 800f54e:	aa1a      	add	r2, sp, #104	; 0x68
 800f550:	a919      	add	r1, sp, #100	; 0x64
 800f552:	4620      	mov	r0, r4
 800f554:	f002 f9d4 	bl	8011900 <__d2b>
 800f558:	ec4b ab18 	vmov	d8, sl, fp
 800f55c:	9018      	str	r0, [sp, #96]	; 0x60
 800f55e:	2800      	cmp	r0, #0
 800f560:	f43f aef6 	beq.w	800f350 <_strtod_l+0x490>
 800f564:	2101      	movs	r1, #1
 800f566:	4620      	mov	r0, r4
 800f568:	f001 ff1e 	bl	80113a8 <__i2b>
 800f56c:	4606      	mov	r6, r0
 800f56e:	2800      	cmp	r0, #0
 800f570:	f43f aeee 	beq.w	800f350 <_strtod_l+0x490>
 800f574:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f576:	9904      	ldr	r1, [sp, #16]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	bfab      	itete	ge
 800f57c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f57e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f580:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f582:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f586:	bfac      	ite	ge
 800f588:	eb03 0902 	addge.w	r9, r3, r2
 800f58c:	1ad7      	sublt	r7, r2, r3
 800f58e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f590:	eba3 0801 	sub.w	r8, r3, r1
 800f594:	4490      	add	r8, r2
 800f596:	4ba1      	ldr	r3, [pc, #644]	; (800f81c <_strtod_l+0x95c>)
 800f598:	f108 38ff 	add.w	r8, r8, #4294967295
 800f59c:	4598      	cmp	r8, r3
 800f59e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f5a2:	f280 80c7 	bge.w	800f734 <_strtod_l+0x874>
 800f5a6:	eba3 0308 	sub.w	r3, r3, r8
 800f5aa:	2b1f      	cmp	r3, #31
 800f5ac:	eba2 0203 	sub.w	r2, r2, r3
 800f5b0:	f04f 0101 	mov.w	r1, #1
 800f5b4:	f300 80b1 	bgt.w	800f71a <_strtod_l+0x85a>
 800f5b8:	fa01 f303 	lsl.w	r3, r1, r3
 800f5bc:	930d      	str	r3, [sp, #52]	; 0x34
 800f5be:	2300      	movs	r3, #0
 800f5c0:	9308      	str	r3, [sp, #32]
 800f5c2:	eb09 0802 	add.w	r8, r9, r2
 800f5c6:	9b04      	ldr	r3, [sp, #16]
 800f5c8:	45c1      	cmp	r9, r8
 800f5ca:	4417      	add	r7, r2
 800f5cc:	441f      	add	r7, r3
 800f5ce:	464b      	mov	r3, r9
 800f5d0:	bfa8      	it	ge
 800f5d2:	4643      	movge	r3, r8
 800f5d4:	42bb      	cmp	r3, r7
 800f5d6:	bfa8      	it	ge
 800f5d8:	463b      	movge	r3, r7
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	bfc2      	ittt	gt
 800f5de:	eba8 0803 	subgt.w	r8, r8, r3
 800f5e2:	1aff      	subgt	r7, r7, r3
 800f5e4:	eba9 0903 	subgt.w	r9, r9, r3
 800f5e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	dd17      	ble.n	800f61e <_strtod_l+0x75e>
 800f5ee:	4631      	mov	r1, r6
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f001 ff98 	bl	8011528 <__pow5mult>
 800f5f8:	4606      	mov	r6, r0
 800f5fa:	2800      	cmp	r0, #0
 800f5fc:	f43f aea8 	beq.w	800f350 <_strtod_l+0x490>
 800f600:	4601      	mov	r1, r0
 800f602:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f604:	4620      	mov	r0, r4
 800f606:	f001 fee5 	bl	80113d4 <__multiply>
 800f60a:	900b      	str	r0, [sp, #44]	; 0x2c
 800f60c:	2800      	cmp	r0, #0
 800f60e:	f43f ae9f 	beq.w	800f350 <_strtod_l+0x490>
 800f612:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f614:	4620      	mov	r0, r4
 800f616:	f001 fdc5 	bl	80111a4 <_Bfree>
 800f61a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f61c:	9318      	str	r3, [sp, #96]	; 0x60
 800f61e:	f1b8 0f00 	cmp.w	r8, #0
 800f622:	f300 808c 	bgt.w	800f73e <_strtod_l+0x87e>
 800f626:	9b06      	ldr	r3, [sp, #24]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	dd08      	ble.n	800f63e <_strtod_l+0x77e>
 800f62c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f62e:	9905      	ldr	r1, [sp, #20]
 800f630:	4620      	mov	r0, r4
 800f632:	f001 ff79 	bl	8011528 <__pow5mult>
 800f636:	9005      	str	r0, [sp, #20]
 800f638:	2800      	cmp	r0, #0
 800f63a:	f43f ae89 	beq.w	800f350 <_strtod_l+0x490>
 800f63e:	2f00      	cmp	r7, #0
 800f640:	dd08      	ble.n	800f654 <_strtod_l+0x794>
 800f642:	9905      	ldr	r1, [sp, #20]
 800f644:	463a      	mov	r2, r7
 800f646:	4620      	mov	r0, r4
 800f648:	f001 ffc8 	bl	80115dc <__lshift>
 800f64c:	9005      	str	r0, [sp, #20]
 800f64e:	2800      	cmp	r0, #0
 800f650:	f43f ae7e 	beq.w	800f350 <_strtod_l+0x490>
 800f654:	f1b9 0f00 	cmp.w	r9, #0
 800f658:	dd08      	ble.n	800f66c <_strtod_l+0x7ac>
 800f65a:	4631      	mov	r1, r6
 800f65c:	464a      	mov	r2, r9
 800f65e:	4620      	mov	r0, r4
 800f660:	f001 ffbc 	bl	80115dc <__lshift>
 800f664:	4606      	mov	r6, r0
 800f666:	2800      	cmp	r0, #0
 800f668:	f43f ae72 	beq.w	800f350 <_strtod_l+0x490>
 800f66c:	9a05      	ldr	r2, [sp, #20]
 800f66e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f670:	4620      	mov	r0, r4
 800f672:	f002 f83f 	bl	80116f4 <__mdiff>
 800f676:	4605      	mov	r5, r0
 800f678:	2800      	cmp	r0, #0
 800f67a:	f43f ae69 	beq.w	800f350 <_strtod_l+0x490>
 800f67e:	68c3      	ldr	r3, [r0, #12]
 800f680:	930b      	str	r3, [sp, #44]	; 0x2c
 800f682:	2300      	movs	r3, #0
 800f684:	60c3      	str	r3, [r0, #12]
 800f686:	4631      	mov	r1, r6
 800f688:	f002 f818 	bl	80116bc <__mcmp>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	da60      	bge.n	800f752 <_strtod_l+0x892>
 800f690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f692:	ea53 030a 	orrs.w	r3, r3, sl
 800f696:	f040 8082 	bne.w	800f79e <_strtod_l+0x8de>
 800f69a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d17d      	bne.n	800f79e <_strtod_l+0x8de>
 800f6a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f6a6:	0d1b      	lsrs	r3, r3, #20
 800f6a8:	051b      	lsls	r3, r3, #20
 800f6aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f6ae:	d976      	bls.n	800f79e <_strtod_l+0x8de>
 800f6b0:	696b      	ldr	r3, [r5, #20]
 800f6b2:	b913      	cbnz	r3, 800f6ba <_strtod_l+0x7fa>
 800f6b4:	692b      	ldr	r3, [r5, #16]
 800f6b6:	2b01      	cmp	r3, #1
 800f6b8:	dd71      	ble.n	800f79e <_strtod_l+0x8de>
 800f6ba:	4629      	mov	r1, r5
 800f6bc:	2201      	movs	r2, #1
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f001 ff8c 	bl	80115dc <__lshift>
 800f6c4:	4631      	mov	r1, r6
 800f6c6:	4605      	mov	r5, r0
 800f6c8:	f001 fff8 	bl	80116bc <__mcmp>
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	dd66      	ble.n	800f79e <_strtod_l+0x8de>
 800f6d0:	9904      	ldr	r1, [sp, #16]
 800f6d2:	4a53      	ldr	r2, [pc, #332]	; (800f820 <_strtod_l+0x960>)
 800f6d4:	465b      	mov	r3, fp
 800f6d6:	2900      	cmp	r1, #0
 800f6d8:	f000 8081 	beq.w	800f7de <_strtod_l+0x91e>
 800f6dc:	ea02 010b 	and.w	r1, r2, fp
 800f6e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f6e4:	dc7b      	bgt.n	800f7de <_strtod_l+0x91e>
 800f6e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f6ea:	f77f aea9 	ble.w	800f440 <_strtod_l+0x580>
 800f6ee:	4b4d      	ldr	r3, [pc, #308]	; (800f824 <_strtod_l+0x964>)
 800f6f0:	4650      	mov	r0, sl
 800f6f2:	4659      	mov	r1, fp
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	f7f0 ff8f 	bl	8000618 <__aeabi_dmul>
 800f6fa:	460b      	mov	r3, r1
 800f6fc:	4303      	orrs	r3, r0
 800f6fe:	bf08      	it	eq
 800f700:	2322      	moveq	r3, #34	; 0x22
 800f702:	4682      	mov	sl, r0
 800f704:	468b      	mov	fp, r1
 800f706:	bf08      	it	eq
 800f708:	6023      	streq	r3, [r4, #0]
 800f70a:	e62b      	b.n	800f364 <_strtod_l+0x4a4>
 800f70c:	f04f 32ff 	mov.w	r2, #4294967295
 800f710:	fa02 f303 	lsl.w	r3, r2, r3
 800f714:	ea03 0a0a 	and.w	sl, r3, sl
 800f718:	e6e3      	b.n	800f4e2 <_strtod_l+0x622>
 800f71a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f71e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f722:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f726:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f72a:	fa01 f308 	lsl.w	r3, r1, r8
 800f72e:	9308      	str	r3, [sp, #32]
 800f730:	910d      	str	r1, [sp, #52]	; 0x34
 800f732:	e746      	b.n	800f5c2 <_strtod_l+0x702>
 800f734:	2300      	movs	r3, #0
 800f736:	9308      	str	r3, [sp, #32]
 800f738:	2301      	movs	r3, #1
 800f73a:	930d      	str	r3, [sp, #52]	; 0x34
 800f73c:	e741      	b.n	800f5c2 <_strtod_l+0x702>
 800f73e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f740:	4642      	mov	r2, r8
 800f742:	4620      	mov	r0, r4
 800f744:	f001 ff4a 	bl	80115dc <__lshift>
 800f748:	9018      	str	r0, [sp, #96]	; 0x60
 800f74a:	2800      	cmp	r0, #0
 800f74c:	f47f af6b 	bne.w	800f626 <_strtod_l+0x766>
 800f750:	e5fe      	b.n	800f350 <_strtod_l+0x490>
 800f752:	465f      	mov	r7, fp
 800f754:	d16e      	bne.n	800f834 <_strtod_l+0x974>
 800f756:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f758:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f75c:	b342      	cbz	r2, 800f7b0 <_strtod_l+0x8f0>
 800f75e:	4a32      	ldr	r2, [pc, #200]	; (800f828 <_strtod_l+0x968>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d128      	bne.n	800f7b6 <_strtod_l+0x8f6>
 800f764:	9b04      	ldr	r3, [sp, #16]
 800f766:	4651      	mov	r1, sl
 800f768:	b1eb      	cbz	r3, 800f7a6 <_strtod_l+0x8e6>
 800f76a:	4b2d      	ldr	r3, [pc, #180]	; (800f820 <_strtod_l+0x960>)
 800f76c:	403b      	ands	r3, r7
 800f76e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f772:	f04f 32ff 	mov.w	r2, #4294967295
 800f776:	d819      	bhi.n	800f7ac <_strtod_l+0x8ec>
 800f778:	0d1b      	lsrs	r3, r3, #20
 800f77a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f77e:	fa02 f303 	lsl.w	r3, r2, r3
 800f782:	4299      	cmp	r1, r3
 800f784:	d117      	bne.n	800f7b6 <_strtod_l+0x8f6>
 800f786:	4b29      	ldr	r3, [pc, #164]	; (800f82c <_strtod_l+0x96c>)
 800f788:	429f      	cmp	r7, r3
 800f78a:	d102      	bne.n	800f792 <_strtod_l+0x8d2>
 800f78c:	3101      	adds	r1, #1
 800f78e:	f43f addf 	beq.w	800f350 <_strtod_l+0x490>
 800f792:	4b23      	ldr	r3, [pc, #140]	; (800f820 <_strtod_l+0x960>)
 800f794:	403b      	ands	r3, r7
 800f796:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f79a:	f04f 0a00 	mov.w	sl, #0
 800f79e:	9b04      	ldr	r3, [sp, #16]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d1a4      	bne.n	800f6ee <_strtod_l+0x82e>
 800f7a4:	e5de      	b.n	800f364 <_strtod_l+0x4a4>
 800f7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f7aa:	e7ea      	b.n	800f782 <_strtod_l+0x8c2>
 800f7ac:	4613      	mov	r3, r2
 800f7ae:	e7e8      	b.n	800f782 <_strtod_l+0x8c2>
 800f7b0:	ea53 030a 	orrs.w	r3, r3, sl
 800f7b4:	d08c      	beq.n	800f6d0 <_strtod_l+0x810>
 800f7b6:	9b08      	ldr	r3, [sp, #32]
 800f7b8:	b1db      	cbz	r3, 800f7f2 <_strtod_l+0x932>
 800f7ba:	423b      	tst	r3, r7
 800f7bc:	d0ef      	beq.n	800f79e <_strtod_l+0x8de>
 800f7be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7c0:	9a04      	ldr	r2, [sp, #16]
 800f7c2:	4650      	mov	r0, sl
 800f7c4:	4659      	mov	r1, fp
 800f7c6:	b1c3      	cbz	r3, 800f7fa <_strtod_l+0x93a>
 800f7c8:	f7ff fb5e 	bl	800ee88 <sulp>
 800f7cc:	4602      	mov	r2, r0
 800f7ce:	460b      	mov	r3, r1
 800f7d0:	ec51 0b18 	vmov	r0, r1, d8
 800f7d4:	f7f0 fd6a 	bl	80002ac <__adddf3>
 800f7d8:	4682      	mov	sl, r0
 800f7da:	468b      	mov	fp, r1
 800f7dc:	e7df      	b.n	800f79e <_strtod_l+0x8de>
 800f7de:	4013      	ands	r3, r2
 800f7e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f7e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f7e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f7ec:	f04f 3aff 	mov.w	sl, #4294967295
 800f7f0:	e7d5      	b.n	800f79e <_strtod_l+0x8de>
 800f7f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7f4:	ea13 0f0a 	tst.w	r3, sl
 800f7f8:	e7e0      	b.n	800f7bc <_strtod_l+0x8fc>
 800f7fa:	f7ff fb45 	bl	800ee88 <sulp>
 800f7fe:	4602      	mov	r2, r0
 800f800:	460b      	mov	r3, r1
 800f802:	ec51 0b18 	vmov	r0, r1, d8
 800f806:	f7f0 fd4f 	bl	80002a8 <__aeabi_dsub>
 800f80a:	2200      	movs	r2, #0
 800f80c:	2300      	movs	r3, #0
 800f80e:	4682      	mov	sl, r0
 800f810:	468b      	mov	fp, r1
 800f812:	f7f1 f969 	bl	8000ae8 <__aeabi_dcmpeq>
 800f816:	2800      	cmp	r0, #0
 800f818:	d0c1      	beq.n	800f79e <_strtod_l+0x8de>
 800f81a:	e611      	b.n	800f440 <_strtod_l+0x580>
 800f81c:	fffffc02 	.word	0xfffffc02
 800f820:	7ff00000 	.word	0x7ff00000
 800f824:	39500000 	.word	0x39500000
 800f828:	000fffff 	.word	0x000fffff
 800f82c:	7fefffff 	.word	0x7fefffff
 800f830:	080132d8 	.word	0x080132d8
 800f834:	4631      	mov	r1, r6
 800f836:	4628      	mov	r0, r5
 800f838:	f002 f8be 	bl	80119b8 <__ratio>
 800f83c:	ec59 8b10 	vmov	r8, r9, d0
 800f840:	ee10 0a10 	vmov	r0, s0
 800f844:	2200      	movs	r2, #0
 800f846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f84a:	4649      	mov	r1, r9
 800f84c:	f7f1 f960 	bl	8000b10 <__aeabi_dcmple>
 800f850:	2800      	cmp	r0, #0
 800f852:	d07a      	beq.n	800f94a <_strtod_l+0xa8a>
 800f854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f856:	2b00      	cmp	r3, #0
 800f858:	d04a      	beq.n	800f8f0 <_strtod_l+0xa30>
 800f85a:	4b95      	ldr	r3, [pc, #596]	; (800fab0 <_strtod_l+0xbf0>)
 800f85c:	2200      	movs	r2, #0
 800f85e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f862:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fab0 <_strtod_l+0xbf0>
 800f866:	f04f 0800 	mov.w	r8, #0
 800f86a:	4b92      	ldr	r3, [pc, #584]	; (800fab4 <_strtod_l+0xbf4>)
 800f86c:	403b      	ands	r3, r7
 800f86e:	930d      	str	r3, [sp, #52]	; 0x34
 800f870:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f872:	4b91      	ldr	r3, [pc, #580]	; (800fab8 <_strtod_l+0xbf8>)
 800f874:	429a      	cmp	r2, r3
 800f876:	f040 80b0 	bne.w	800f9da <_strtod_l+0xb1a>
 800f87a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f87e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f882:	ec4b ab10 	vmov	d0, sl, fp
 800f886:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f88a:	f001 ffbd 	bl	8011808 <__ulp>
 800f88e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f892:	ec53 2b10 	vmov	r2, r3, d0
 800f896:	f7f0 febf 	bl	8000618 <__aeabi_dmul>
 800f89a:	4652      	mov	r2, sl
 800f89c:	465b      	mov	r3, fp
 800f89e:	f7f0 fd05 	bl	80002ac <__adddf3>
 800f8a2:	460b      	mov	r3, r1
 800f8a4:	4983      	ldr	r1, [pc, #524]	; (800fab4 <_strtod_l+0xbf4>)
 800f8a6:	4a85      	ldr	r2, [pc, #532]	; (800fabc <_strtod_l+0xbfc>)
 800f8a8:	4019      	ands	r1, r3
 800f8aa:	4291      	cmp	r1, r2
 800f8ac:	4682      	mov	sl, r0
 800f8ae:	d960      	bls.n	800f972 <_strtod_l+0xab2>
 800f8b0:	ee18 3a90 	vmov	r3, s17
 800f8b4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d104      	bne.n	800f8c6 <_strtod_l+0xa06>
 800f8bc:	ee18 3a10 	vmov	r3, s16
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	f43f ad45 	beq.w	800f350 <_strtod_l+0x490>
 800f8c6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800fac8 <_strtod_l+0xc08>
 800f8ca:	f04f 3aff 	mov.w	sl, #4294967295
 800f8ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f001 fc67 	bl	80111a4 <_Bfree>
 800f8d6:	9905      	ldr	r1, [sp, #20]
 800f8d8:	4620      	mov	r0, r4
 800f8da:	f001 fc63 	bl	80111a4 <_Bfree>
 800f8de:	4631      	mov	r1, r6
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f001 fc5f 	bl	80111a4 <_Bfree>
 800f8e6:	4629      	mov	r1, r5
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	f001 fc5b 	bl	80111a4 <_Bfree>
 800f8ee:	e61a      	b.n	800f526 <_strtod_l+0x666>
 800f8f0:	f1ba 0f00 	cmp.w	sl, #0
 800f8f4:	d11b      	bne.n	800f92e <_strtod_l+0xa6e>
 800f8f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f8fa:	b9f3      	cbnz	r3, 800f93a <_strtod_l+0xa7a>
 800f8fc:	4b6c      	ldr	r3, [pc, #432]	; (800fab0 <_strtod_l+0xbf0>)
 800f8fe:	2200      	movs	r2, #0
 800f900:	4640      	mov	r0, r8
 800f902:	4649      	mov	r1, r9
 800f904:	f7f1 f8fa 	bl	8000afc <__aeabi_dcmplt>
 800f908:	b9d0      	cbnz	r0, 800f940 <_strtod_l+0xa80>
 800f90a:	4640      	mov	r0, r8
 800f90c:	4649      	mov	r1, r9
 800f90e:	4b6c      	ldr	r3, [pc, #432]	; (800fac0 <_strtod_l+0xc00>)
 800f910:	2200      	movs	r2, #0
 800f912:	f7f0 fe81 	bl	8000618 <__aeabi_dmul>
 800f916:	4680      	mov	r8, r0
 800f918:	4689      	mov	r9, r1
 800f91a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f91e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f922:	9315      	str	r3, [sp, #84]	; 0x54
 800f924:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f928:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f92c:	e79d      	b.n	800f86a <_strtod_l+0x9aa>
 800f92e:	f1ba 0f01 	cmp.w	sl, #1
 800f932:	d102      	bne.n	800f93a <_strtod_l+0xa7a>
 800f934:	2f00      	cmp	r7, #0
 800f936:	f43f ad83 	beq.w	800f440 <_strtod_l+0x580>
 800f93a:	4b62      	ldr	r3, [pc, #392]	; (800fac4 <_strtod_l+0xc04>)
 800f93c:	2200      	movs	r2, #0
 800f93e:	e78e      	b.n	800f85e <_strtod_l+0x99e>
 800f940:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800fac0 <_strtod_l+0xc00>
 800f944:	f04f 0800 	mov.w	r8, #0
 800f948:	e7e7      	b.n	800f91a <_strtod_l+0xa5a>
 800f94a:	4b5d      	ldr	r3, [pc, #372]	; (800fac0 <_strtod_l+0xc00>)
 800f94c:	4640      	mov	r0, r8
 800f94e:	4649      	mov	r1, r9
 800f950:	2200      	movs	r2, #0
 800f952:	f7f0 fe61 	bl	8000618 <__aeabi_dmul>
 800f956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f958:	4680      	mov	r8, r0
 800f95a:	4689      	mov	r9, r1
 800f95c:	b933      	cbnz	r3, 800f96c <_strtod_l+0xaac>
 800f95e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f962:	900e      	str	r0, [sp, #56]	; 0x38
 800f964:	930f      	str	r3, [sp, #60]	; 0x3c
 800f966:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f96a:	e7dd      	b.n	800f928 <_strtod_l+0xa68>
 800f96c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f970:	e7f9      	b.n	800f966 <_strtod_l+0xaa6>
 800f972:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f976:	9b04      	ldr	r3, [sp, #16]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d1a8      	bne.n	800f8ce <_strtod_l+0xa0e>
 800f97c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f982:	0d1b      	lsrs	r3, r3, #20
 800f984:	051b      	lsls	r3, r3, #20
 800f986:	429a      	cmp	r2, r3
 800f988:	d1a1      	bne.n	800f8ce <_strtod_l+0xa0e>
 800f98a:	4640      	mov	r0, r8
 800f98c:	4649      	mov	r1, r9
 800f98e:	f7f1 f9a3 	bl	8000cd8 <__aeabi_d2lz>
 800f992:	f7f0 fe13 	bl	80005bc <__aeabi_l2d>
 800f996:	4602      	mov	r2, r0
 800f998:	460b      	mov	r3, r1
 800f99a:	4640      	mov	r0, r8
 800f99c:	4649      	mov	r1, r9
 800f99e:	f7f0 fc83 	bl	80002a8 <__aeabi_dsub>
 800f9a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f9a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f9a8:	ea43 030a 	orr.w	r3, r3, sl
 800f9ac:	4313      	orrs	r3, r2
 800f9ae:	4680      	mov	r8, r0
 800f9b0:	4689      	mov	r9, r1
 800f9b2:	d055      	beq.n	800fa60 <_strtod_l+0xba0>
 800f9b4:	a336      	add	r3, pc, #216	; (adr r3, 800fa90 <_strtod_l+0xbd0>)
 800f9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ba:	f7f1 f89f 	bl	8000afc <__aeabi_dcmplt>
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	f47f acd0 	bne.w	800f364 <_strtod_l+0x4a4>
 800f9c4:	a334      	add	r3, pc, #208	; (adr r3, 800fa98 <_strtod_l+0xbd8>)
 800f9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ca:	4640      	mov	r0, r8
 800f9cc:	4649      	mov	r1, r9
 800f9ce:	f7f1 f8b3 	bl	8000b38 <__aeabi_dcmpgt>
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	f43f af7b 	beq.w	800f8ce <_strtod_l+0xa0e>
 800f9d8:	e4c4      	b.n	800f364 <_strtod_l+0x4a4>
 800f9da:	9b04      	ldr	r3, [sp, #16]
 800f9dc:	b333      	cbz	r3, 800fa2c <_strtod_l+0xb6c>
 800f9de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9e0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f9e4:	d822      	bhi.n	800fa2c <_strtod_l+0xb6c>
 800f9e6:	a32e      	add	r3, pc, #184	; (adr r3, 800faa0 <_strtod_l+0xbe0>)
 800f9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ec:	4640      	mov	r0, r8
 800f9ee:	4649      	mov	r1, r9
 800f9f0:	f7f1 f88e 	bl	8000b10 <__aeabi_dcmple>
 800f9f4:	b1a0      	cbz	r0, 800fa20 <_strtod_l+0xb60>
 800f9f6:	4649      	mov	r1, r9
 800f9f8:	4640      	mov	r0, r8
 800f9fa:	f7f1 f8e5 	bl	8000bc8 <__aeabi_d2uiz>
 800f9fe:	2801      	cmp	r0, #1
 800fa00:	bf38      	it	cc
 800fa02:	2001      	movcc	r0, #1
 800fa04:	f7f0 fd8e 	bl	8000524 <__aeabi_ui2d>
 800fa08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa0a:	4680      	mov	r8, r0
 800fa0c:	4689      	mov	r9, r1
 800fa0e:	bb23      	cbnz	r3, 800fa5a <_strtod_l+0xb9a>
 800fa10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa14:	9010      	str	r0, [sp, #64]	; 0x40
 800fa16:	9311      	str	r3, [sp, #68]	; 0x44
 800fa18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fa1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fa20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa24:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fa28:	1a9b      	subs	r3, r3, r2
 800fa2a:	9309      	str	r3, [sp, #36]	; 0x24
 800fa2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fa30:	eeb0 0a48 	vmov.f32	s0, s16
 800fa34:	eef0 0a68 	vmov.f32	s1, s17
 800fa38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fa3c:	f001 fee4 	bl	8011808 <__ulp>
 800fa40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fa44:	ec53 2b10 	vmov	r2, r3, d0
 800fa48:	f7f0 fde6 	bl	8000618 <__aeabi_dmul>
 800fa4c:	ec53 2b18 	vmov	r2, r3, d8
 800fa50:	f7f0 fc2c 	bl	80002ac <__adddf3>
 800fa54:	4682      	mov	sl, r0
 800fa56:	468b      	mov	fp, r1
 800fa58:	e78d      	b.n	800f976 <_strtod_l+0xab6>
 800fa5a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800fa5e:	e7db      	b.n	800fa18 <_strtod_l+0xb58>
 800fa60:	a311      	add	r3, pc, #68	; (adr r3, 800faa8 <_strtod_l+0xbe8>)
 800fa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa66:	f7f1 f849 	bl	8000afc <__aeabi_dcmplt>
 800fa6a:	e7b2      	b.n	800f9d2 <_strtod_l+0xb12>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	930a      	str	r3, [sp, #40]	; 0x28
 800fa70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fa72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa74:	6013      	str	r3, [r2, #0]
 800fa76:	f7ff ba6b 	b.w	800ef50 <_strtod_l+0x90>
 800fa7a:	2a65      	cmp	r2, #101	; 0x65
 800fa7c:	f43f ab5f 	beq.w	800f13e <_strtod_l+0x27e>
 800fa80:	2a45      	cmp	r2, #69	; 0x45
 800fa82:	f43f ab5c 	beq.w	800f13e <_strtod_l+0x27e>
 800fa86:	2301      	movs	r3, #1
 800fa88:	f7ff bb94 	b.w	800f1b4 <_strtod_l+0x2f4>
 800fa8c:	f3af 8000 	nop.w
 800fa90:	94a03595 	.word	0x94a03595
 800fa94:	3fdfffff 	.word	0x3fdfffff
 800fa98:	35afe535 	.word	0x35afe535
 800fa9c:	3fe00000 	.word	0x3fe00000
 800faa0:	ffc00000 	.word	0xffc00000
 800faa4:	41dfffff 	.word	0x41dfffff
 800faa8:	94a03595 	.word	0x94a03595
 800faac:	3fcfffff 	.word	0x3fcfffff
 800fab0:	3ff00000 	.word	0x3ff00000
 800fab4:	7ff00000 	.word	0x7ff00000
 800fab8:	7fe00000 	.word	0x7fe00000
 800fabc:	7c9fffff 	.word	0x7c9fffff
 800fac0:	3fe00000 	.word	0x3fe00000
 800fac4:	bff00000 	.word	0xbff00000
 800fac8:	7fefffff 	.word	0x7fefffff

0800facc <_strtod_r>:
 800facc:	4b01      	ldr	r3, [pc, #4]	; (800fad4 <_strtod_r+0x8>)
 800face:	f7ff b9f7 	b.w	800eec0 <_strtod_l>
 800fad2:	bf00      	nop
 800fad4:	2000008c 	.word	0x2000008c

0800fad8 <strtod>:
 800fad8:	460a      	mov	r2, r1
 800fada:	4601      	mov	r1, r0
 800fadc:	4802      	ldr	r0, [pc, #8]	; (800fae8 <strtod+0x10>)
 800fade:	4b03      	ldr	r3, [pc, #12]	; (800faec <strtod+0x14>)
 800fae0:	6800      	ldr	r0, [r0, #0]
 800fae2:	f7ff b9ed 	b.w	800eec0 <_strtod_l>
 800fae6:	bf00      	nop
 800fae8:	20000024 	.word	0x20000024
 800faec:	2000008c 	.word	0x2000008c

0800faf0 <strtok>:
 800faf0:	4b16      	ldr	r3, [pc, #88]	; (800fb4c <strtok+0x5c>)
 800faf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800faf4:	681e      	ldr	r6, [r3, #0]
 800faf6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800faf8:	4605      	mov	r5, r0
 800fafa:	b9fc      	cbnz	r4, 800fb3c <strtok+0x4c>
 800fafc:	2050      	movs	r0, #80	; 0x50
 800fafe:	9101      	str	r1, [sp, #4]
 800fb00:	f001 faf6 	bl	80110f0 <malloc>
 800fb04:	9901      	ldr	r1, [sp, #4]
 800fb06:	65b0      	str	r0, [r6, #88]	; 0x58
 800fb08:	4602      	mov	r2, r0
 800fb0a:	b920      	cbnz	r0, 800fb16 <strtok+0x26>
 800fb0c:	4b10      	ldr	r3, [pc, #64]	; (800fb50 <strtok+0x60>)
 800fb0e:	4811      	ldr	r0, [pc, #68]	; (800fb54 <strtok+0x64>)
 800fb10:	2157      	movs	r1, #87	; 0x57
 800fb12:	f000 f8cd 	bl	800fcb0 <__assert_func>
 800fb16:	e9c0 4400 	strd	r4, r4, [r0]
 800fb1a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800fb1e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800fb22:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800fb26:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800fb2a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800fb2e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800fb32:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800fb36:	6184      	str	r4, [r0, #24]
 800fb38:	7704      	strb	r4, [r0, #28]
 800fb3a:	6244      	str	r4, [r0, #36]	; 0x24
 800fb3c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800fb3e:	2301      	movs	r3, #1
 800fb40:	4628      	mov	r0, r5
 800fb42:	b002      	add	sp, #8
 800fb44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb48:	f000 b806 	b.w	800fb58 <__strtok_r>
 800fb4c:	20000024 	.word	0x20000024
 800fb50:	08013300 	.word	0x08013300
 800fb54:	08013317 	.word	0x08013317

0800fb58 <__strtok_r>:
 800fb58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb5a:	b908      	cbnz	r0, 800fb60 <__strtok_r+0x8>
 800fb5c:	6810      	ldr	r0, [r2, #0]
 800fb5e:	b188      	cbz	r0, 800fb84 <__strtok_r+0x2c>
 800fb60:	4604      	mov	r4, r0
 800fb62:	4620      	mov	r0, r4
 800fb64:	f814 5b01 	ldrb.w	r5, [r4], #1
 800fb68:	460f      	mov	r7, r1
 800fb6a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800fb6e:	b91e      	cbnz	r6, 800fb78 <__strtok_r+0x20>
 800fb70:	b965      	cbnz	r5, 800fb8c <__strtok_r+0x34>
 800fb72:	6015      	str	r5, [r2, #0]
 800fb74:	4628      	mov	r0, r5
 800fb76:	e005      	b.n	800fb84 <__strtok_r+0x2c>
 800fb78:	42b5      	cmp	r5, r6
 800fb7a:	d1f6      	bne.n	800fb6a <__strtok_r+0x12>
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d1f0      	bne.n	800fb62 <__strtok_r+0xa>
 800fb80:	6014      	str	r4, [r2, #0]
 800fb82:	7003      	strb	r3, [r0, #0]
 800fb84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb86:	461c      	mov	r4, r3
 800fb88:	e00c      	b.n	800fba4 <__strtok_r+0x4c>
 800fb8a:	b915      	cbnz	r5, 800fb92 <__strtok_r+0x3a>
 800fb8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fb90:	460e      	mov	r6, r1
 800fb92:	f816 5b01 	ldrb.w	r5, [r6], #1
 800fb96:	42ab      	cmp	r3, r5
 800fb98:	d1f7      	bne.n	800fb8a <__strtok_r+0x32>
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d0f3      	beq.n	800fb86 <__strtok_r+0x2e>
 800fb9e:	2300      	movs	r3, #0
 800fba0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800fba4:	6014      	str	r4, [r2, #0]
 800fba6:	e7ed      	b.n	800fb84 <__strtok_r+0x2c>

0800fba8 <_strtol_l.constprop.0>:
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbae:	d001      	beq.n	800fbb4 <_strtol_l.constprop.0+0xc>
 800fbb0:	2b24      	cmp	r3, #36	; 0x24
 800fbb2:	d906      	bls.n	800fbc2 <_strtol_l.constprop.0+0x1a>
 800fbb4:	f7fe fa6c 	bl	800e090 <__errno>
 800fbb8:	2316      	movs	r3, #22
 800fbba:	6003      	str	r3, [r0, #0]
 800fbbc:	2000      	movs	r0, #0
 800fbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbc2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fca8 <_strtol_l.constprop.0+0x100>
 800fbc6:	460d      	mov	r5, r1
 800fbc8:	462e      	mov	r6, r5
 800fbca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fbce:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fbd2:	f017 0708 	ands.w	r7, r7, #8
 800fbd6:	d1f7      	bne.n	800fbc8 <_strtol_l.constprop.0+0x20>
 800fbd8:	2c2d      	cmp	r4, #45	; 0x2d
 800fbda:	d132      	bne.n	800fc42 <_strtol_l.constprop.0+0x9a>
 800fbdc:	782c      	ldrb	r4, [r5, #0]
 800fbde:	2701      	movs	r7, #1
 800fbe0:	1cb5      	adds	r5, r6, #2
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d05b      	beq.n	800fc9e <_strtol_l.constprop.0+0xf6>
 800fbe6:	2b10      	cmp	r3, #16
 800fbe8:	d109      	bne.n	800fbfe <_strtol_l.constprop.0+0x56>
 800fbea:	2c30      	cmp	r4, #48	; 0x30
 800fbec:	d107      	bne.n	800fbfe <_strtol_l.constprop.0+0x56>
 800fbee:	782c      	ldrb	r4, [r5, #0]
 800fbf0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fbf4:	2c58      	cmp	r4, #88	; 0x58
 800fbf6:	d14d      	bne.n	800fc94 <_strtol_l.constprop.0+0xec>
 800fbf8:	786c      	ldrb	r4, [r5, #1]
 800fbfa:	2310      	movs	r3, #16
 800fbfc:	3502      	adds	r5, #2
 800fbfe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fc02:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc06:	f04f 0c00 	mov.w	ip, #0
 800fc0a:	fbb8 f9f3 	udiv	r9, r8, r3
 800fc0e:	4666      	mov	r6, ip
 800fc10:	fb03 8a19 	mls	sl, r3, r9, r8
 800fc14:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fc18:	f1be 0f09 	cmp.w	lr, #9
 800fc1c:	d816      	bhi.n	800fc4c <_strtol_l.constprop.0+0xa4>
 800fc1e:	4674      	mov	r4, lr
 800fc20:	42a3      	cmp	r3, r4
 800fc22:	dd24      	ble.n	800fc6e <_strtol_l.constprop.0+0xc6>
 800fc24:	f1bc 0f00 	cmp.w	ip, #0
 800fc28:	db1e      	blt.n	800fc68 <_strtol_l.constprop.0+0xc0>
 800fc2a:	45b1      	cmp	r9, r6
 800fc2c:	d31c      	bcc.n	800fc68 <_strtol_l.constprop.0+0xc0>
 800fc2e:	d101      	bne.n	800fc34 <_strtol_l.constprop.0+0x8c>
 800fc30:	45a2      	cmp	sl, r4
 800fc32:	db19      	blt.n	800fc68 <_strtol_l.constprop.0+0xc0>
 800fc34:	fb06 4603 	mla	r6, r6, r3, r4
 800fc38:	f04f 0c01 	mov.w	ip, #1
 800fc3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc40:	e7e8      	b.n	800fc14 <_strtol_l.constprop.0+0x6c>
 800fc42:	2c2b      	cmp	r4, #43	; 0x2b
 800fc44:	bf04      	itt	eq
 800fc46:	782c      	ldrbeq	r4, [r5, #0]
 800fc48:	1cb5      	addeq	r5, r6, #2
 800fc4a:	e7ca      	b.n	800fbe2 <_strtol_l.constprop.0+0x3a>
 800fc4c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fc50:	f1be 0f19 	cmp.w	lr, #25
 800fc54:	d801      	bhi.n	800fc5a <_strtol_l.constprop.0+0xb2>
 800fc56:	3c37      	subs	r4, #55	; 0x37
 800fc58:	e7e2      	b.n	800fc20 <_strtol_l.constprop.0+0x78>
 800fc5a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fc5e:	f1be 0f19 	cmp.w	lr, #25
 800fc62:	d804      	bhi.n	800fc6e <_strtol_l.constprop.0+0xc6>
 800fc64:	3c57      	subs	r4, #87	; 0x57
 800fc66:	e7db      	b.n	800fc20 <_strtol_l.constprop.0+0x78>
 800fc68:	f04f 3cff 	mov.w	ip, #4294967295
 800fc6c:	e7e6      	b.n	800fc3c <_strtol_l.constprop.0+0x94>
 800fc6e:	f1bc 0f00 	cmp.w	ip, #0
 800fc72:	da05      	bge.n	800fc80 <_strtol_l.constprop.0+0xd8>
 800fc74:	2322      	movs	r3, #34	; 0x22
 800fc76:	6003      	str	r3, [r0, #0]
 800fc78:	4646      	mov	r6, r8
 800fc7a:	b942      	cbnz	r2, 800fc8e <_strtol_l.constprop.0+0xe6>
 800fc7c:	4630      	mov	r0, r6
 800fc7e:	e79e      	b.n	800fbbe <_strtol_l.constprop.0+0x16>
 800fc80:	b107      	cbz	r7, 800fc84 <_strtol_l.constprop.0+0xdc>
 800fc82:	4276      	negs	r6, r6
 800fc84:	2a00      	cmp	r2, #0
 800fc86:	d0f9      	beq.n	800fc7c <_strtol_l.constprop.0+0xd4>
 800fc88:	f1bc 0f00 	cmp.w	ip, #0
 800fc8c:	d000      	beq.n	800fc90 <_strtol_l.constprop.0+0xe8>
 800fc8e:	1e69      	subs	r1, r5, #1
 800fc90:	6011      	str	r1, [r2, #0]
 800fc92:	e7f3      	b.n	800fc7c <_strtol_l.constprop.0+0xd4>
 800fc94:	2430      	movs	r4, #48	; 0x30
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d1b1      	bne.n	800fbfe <_strtol_l.constprop.0+0x56>
 800fc9a:	2308      	movs	r3, #8
 800fc9c:	e7af      	b.n	800fbfe <_strtol_l.constprop.0+0x56>
 800fc9e:	2c30      	cmp	r4, #48	; 0x30
 800fca0:	d0a5      	beq.n	800fbee <_strtol_l.constprop.0+0x46>
 800fca2:	230a      	movs	r3, #10
 800fca4:	e7ab      	b.n	800fbfe <_strtol_l.constprop.0+0x56>
 800fca6:	bf00      	nop
 800fca8:	080133b1 	.word	0x080133b1

0800fcac <_strtol_r>:
 800fcac:	f7ff bf7c 	b.w	800fba8 <_strtol_l.constprop.0>

0800fcb0 <__assert_func>:
 800fcb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fcb2:	4614      	mov	r4, r2
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	4b09      	ldr	r3, [pc, #36]	; (800fcdc <__assert_func+0x2c>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	4605      	mov	r5, r0
 800fcbc:	68d8      	ldr	r0, [r3, #12]
 800fcbe:	b14c      	cbz	r4, 800fcd4 <__assert_func+0x24>
 800fcc0:	4b07      	ldr	r3, [pc, #28]	; (800fce0 <__assert_func+0x30>)
 800fcc2:	9100      	str	r1, [sp, #0]
 800fcc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fcc8:	4906      	ldr	r1, [pc, #24]	; (800fce4 <__assert_func+0x34>)
 800fcca:	462b      	mov	r3, r5
 800fccc:	f000 fe8a 	bl	80109e4 <fiprintf>
 800fcd0:	f002 fb90 	bl	80123f4 <abort>
 800fcd4:	4b04      	ldr	r3, [pc, #16]	; (800fce8 <__assert_func+0x38>)
 800fcd6:	461c      	mov	r4, r3
 800fcd8:	e7f3      	b.n	800fcc2 <__assert_func+0x12>
 800fcda:	bf00      	nop
 800fcdc:	20000024 	.word	0x20000024
 800fce0:	08013374 	.word	0x08013374
 800fce4:	08013381 	.word	0x08013381
 800fce8:	080133af 	.word	0x080133af

0800fcec <quorem>:
 800fcec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf0:	6903      	ldr	r3, [r0, #16]
 800fcf2:	690c      	ldr	r4, [r1, #16]
 800fcf4:	42a3      	cmp	r3, r4
 800fcf6:	4607      	mov	r7, r0
 800fcf8:	f2c0 8081 	blt.w	800fdfe <quorem+0x112>
 800fcfc:	3c01      	subs	r4, #1
 800fcfe:	f101 0814 	add.w	r8, r1, #20
 800fd02:	f100 0514 	add.w	r5, r0, #20
 800fd06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd0a:	9301      	str	r3, [sp, #4]
 800fd0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd14:	3301      	adds	r3, #1
 800fd16:	429a      	cmp	r2, r3
 800fd18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fd1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd20:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd24:	d331      	bcc.n	800fd8a <quorem+0x9e>
 800fd26:	f04f 0e00 	mov.w	lr, #0
 800fd2a:	4640      	mov	r0, r8
 800fd2c:	46ac      	mov	ip, r5
 800fd2e:	46f2      	mov	sl, lr
 800fd30:	f850 2b04 	ldr.w	r2, [r0], #4
 800fd34:	b293      	uxth	r3, r2
 800fd36:	fb06 e303 	mla	r3, r6, r3, lr
 800fd3a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	ebaa 0303 	sub.w	r3, sl, r3
 800fd44:	f8dc a000 	ldr.w	sl, [ip]
 800fd48:	0c12      	lsrs	r2, r2, #16
 800fd4a:	fa13 f38a 	uxtah	r3, r3, sl
 800fd4e:	fb06 e202 	mla	r2, r6, r2, lr
 800fd52:	9300      	str	r3, [sp, #0]
 800fd54:	9b00      	ldr	r3, [sp, #0]
 800fd56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fd5a:	b292      	uxth	r2, r2
 800fd5c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fd60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd64:	f8bd 3000 	ldrh.w	r3, [sp]
 800fd68:	4581      	cmp	r9, r0
 800fd6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd6e:	f84c 3b04 	str.w	r3, [ip], #4
 800fd72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fd76:	d2db      	bcs.n	800fd30 <quorem+0x44>
 800fd78:	f855 300b 	ldr.w	r3, [r5, fp]
 800fd7c:	b92b      	cbnz	r3, 800fd8a <quorem+0x9e>
 800fd7e:	9b01      	ldr	r3, [sp, #4]
 800fd80:	3b04      	subs	r3, #4
 800fd82:	429d      	cmp	r5, r3
 800fd84:	461a      	mov	r2, r3
 800fd86:	d32e      	bcc.n	800fde6 <quorem+0xfa>
 800fd88:	613c      	str	r4, [r7, #16]
 800fd8a:	4638      	mov	r0, r7
 800fd8c:	f001 fc96 	bl	80116bc <__mcmp>
 800fd90:	2800      	cmp	r0, #0
 800fd92:	db24      	blt.n	800fdde <quorem+0xf2>
 800fd94:	3601      	adds	r6, #1
 800fd96:	4628      	mov	r0, r5
 800fd98:	f04f 0c00 	mov.w	ip, #0
 800fd9c:	f858 2b04 	ldr.w	r2, [r8], #4
 800fda0:	f8d0 e000 	ldr.w	lr, [r0]
 800fda4:	b293      	uxth	r3, r2
 800fda6:	ebac 0303 	sub.w	r3, ip, r3
 800fdaa:	0c12      	lsrs	r2, r2, #16
 800fdac:	fa13 f38e 	uxtah	r3, r3, lr
 800fdb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fdb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fdbe:	45c1      	cmp	r9, r8
 800fdc0:	f840 3b04 	str.w	r3, [r0], #4
 800fdc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fdc8:	d2e8      	bcs.n	800fd9c <quorem+0xb0>
 800fdca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdd2:	b922      	cbnz	r2, 800fdde <quorem+0xf2>
 800fdd4:	3b04      	subs	r3, #4
 800fdd6:	429d      	cmp	r5, r3
 800fdd8:	461a      	mov	r2, r3
 800fdda:	d30a      	bcc.n	800fdf2 <quorem+0x106>
 800fddc:	613c      	str	r4, [r7, #16]
 800fdde:	4630      	mov	r0, r6
 800fde0:	b003      	add	sp, #12
 800fde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde6:	6812      	ldr	r2, [r2, #0]
 800fde8:	3b04      	subs	r3, #4
 800fdea:	2a00      	cmp	r2, #0
 800fdec:	d1cc      	bne.n	800fd88 <quorem+0x9c>
 800fdee:	3c01      	subs	r4, #1
 800fdf0:	e7c7      	b.n	800fd82 <quorem+0x96>
 800fdf2:	6812      	ldr	r2, [r2, #0]
 800fdf4:	3b04      	subs	r3, #4
 800fdf6:	2a00      	cmp	r2, #0
 800fdf8:	d1f0      	bne.n	800fddc <quorem+0xf0>
 800fdfa:	3c01      	subs	r4, #1
 800fdfc:	e7eb      	b.n	800fdd6 <quorem+0xea>
 800fdfe:	2000      	movs	r0, #0
 800fe00:	e7ee      	b.n	800fde0 <quorem+0xf4>
 800fe02:	0000      	movs	r0, r0
 800fe04:	0000      	movs	r0, r0
	...

0800fe08 <_dtoa_r>:
 800fe08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe0c:	ed2d 8b04 	vpush	{d8-d9}
 800fe10:	ec57 6b10 	vmov	r6, r7, d0
 800fe14:	b093      	sub	sp, #76	; 0x4c
 800fe16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fe18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fe1c:	9106      	str	r1, [sp, #24]
 800fe1e:	ee10 aa10 	vmov	sl, s0
 800fe22:	4604      	mov	r4, r0
 800fe24:	9209      	str	r2, [sp, #36]	; 0x24
 800fe26:	930c      	str	r3, [sp, #48]	; 0x30
 800fe28:	46bb      	mov	fp, r7
 800fe2a:	b975      	cbnz	r5, 800fe4a <_dtoa_r+0x42>
 800fe2c:	2010      	movs	r0, #16
 800fe2e:	f001 f95f 	bl	80110f0 <malloc>
 800fe32:	4602      	mov	r2, r0
 800fe34:	6260      	str	r0, [r4, #36]	; 0x24
 800fe36:	b920      	cbnz	r0, 800fe42 <_dtoa_r+0x3a>
 800fe38:	4ba7      	ldr	r3, [pc, #668]	; (80100d8 <_dtoa_r+0x2d0>)
 800fe3a:	21ea      	movs	r1, #234	; 0xea
 800fe3c:	48a7      	ldr	r0, [pc, #668]	; (80100dc <_dtoa_r+0x2d4>)
 800fe3e:	f7ff ff37 	bl	800fcb0 <__assert_func>
 800fe42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fe46:	6005      	str	r5, [r0, #0]
 800fe48:	60c5      	str	r5, [r0, #12]
 800fe4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe4c:	6819      	ldr	r1, [r3, #0]
 800fe4e:	b151      	cbz	r1, 800fe66 <_dtoa_r+0x5e>
 800fe50:	685a      	ldr	r2, [r3, #4]
 800fe52:	604a      	str	r2, [r1, #4]
 800fe54:	2301      	movs	r3, #1
 800fe56:	4093      	lsls	r3, r2
 800fe58:	608b      	str	r3, [r1, #8]
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f001 f9a2 	bl	80111a4 <_Bfree>
 800fe60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe62:	2200      	movs	r2, #0
 800fe64:	601a      	str	r2, [r3, #0]
 800fe66:	1e3b      	subs	r3, r7, #0
 800fe68:	bfaa      	itet	ge
 800fe6a:	2300      	movge	r3, #0
 800fe6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fe70:	f8c8 3000 	strge.w	r3, [r8]
 800fe74:	4b9a      	ldr	r3, [pc, #616]	; (80100e0 <_dtoa_r+0x2d8>)
 800fe76:	bfbc      	itt	lt
 800fe78:	2201      	movlt	r2, #1
 800fe7a:	f8c8 2000 	strlt.w	r2, [r8]
 800fe7e:	ea33 030b 	bics.w	r3, r3, fp
 800fe82:	d11b      	bne.n	800febc <_dtoa_r+0xb4>
 800fe84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe86:	f242 730f 	movw	r3, #9999	; 0x270f
 800fe8a:	6013      	str	r3, [r2, #0]
 800fe8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe90:	4333      	orrs	r3, r6
 800fe92:	f000 8592 	beq.w	80109ba <_dtoa_r+0xbb2>
 800fe96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe98:	b963      	cbnz	r3, 800feb4 <_dtoa_r+0xac>
 800fe9a:	4b92      	ldr	r3, [pc, #584]	; (80100e4 <_dtoa_r+0x2dc>)
 800fe9c:	e022      	b.n	800fee4 <_dtoa_r+0xdc>
 800fe9e:	4b92      	ldr	r3, [pc, #584]	; (80100e8 <_dtoa_r+0x2e0>)
 800fea0:	9301      	str	r3, [sp, #4]
 800fea2:	3308      	adds	r3, #8
 800fea4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fea6:	6013      	str	r3, [r2, #0]
 800fea8:	9801      	ldr	r0, [sp, #4]
 800feaa:	b013      	add	sp, #76	; 0x4c
 800feac:	ecbd 8b04 	vpop	{d8-d9}
 800feb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb4:	4b8b      	ldr	r3, [pc, #556]	; (80100e4 <_dtoa_r+0x2dc>)
 800feb6:	9301      	str	r3, [sp, #4]
 800feb8:	3303      	adds	r3, #3
 800feba:	e7f3      	b.n	800fea4 <_dtoa_r+0x9c>
 800febc:	2200      	movs	r2, #0
 800febe:	2300      	movs	r3, #0
 800fec0:	4650      	mov	r0, sl
 800fec2:	4659      	mov	r1, fp
 800fec4:	f7f0 fe10 	bl	8000ae8 <__aeabi_dcmpeq>
 800fec8:	ec4b ab19 	vmov	d9, sl, fp
 800fecc:	4680      	mov	r8, r0
 800fece:	b158      	cbz	r0, 800fee8 <_dtoa_r+0xe0>
 800fed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fed2:	2301      	movs	r3, #1
 800fed4:	6013      	str	r3, [r2, #0]
 800fed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fed8:	2b00      	cmp	r3, #0
 800feda:	f000 856b 	beq.w	80109b4 <_dtoa_r+0xbac>
 800fede:	4883      	ldr	r0, [pc, #524]	; (80100ec <_dtoa_r+0x2e4>)
 800fee0:	6018      	str	r0, [r3, #0]
 800fee2:	1e43      	subs	r3, r0, #1
 800fee4:	9301      	str	r3, [sp, #4]
 800fee6:	e7df      	b.n	800fea8 <_dtoa_r+0xa0>
 800fee8:	ec4b ab10 	vmov	d0, sl, fp
 800feec:	aa10      	add	r2, sp, #64	; 0x40
 800feee:	a911      	add	r1, sp, #68	; 0x44
 800fef0:	4620      	mov	r0, r4
 800fef2:	f001 fd05 	bl	8011900 <__d2b>
 800fef6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fefa:	ee08 0a10 	vmov	s16, r0
 800fefe:	2d00      	cmp	r5, #0
 800ff00:	f000 8084 	beq.w	801000c <_dtoa_r+0x204>
 800ff04:	ee19 3a90 	vmov	r3, s19
 800ff08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ff10:	4656      	mov	r6, sl
 800ff12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ff16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ff1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ff1e:	4b74      	ldr	r3, [pc, #464]	; (80100f0 <_dtoa_r+0x2e8>)
 800ff20:	2200      	movs	r2, #0
 800ff22:	4630      	mov	r0, r6
 800ff24:	4639      	mov	r1, r7
 800ff26:	f7f0 f9bf 	bl	80002a8 <__aeabi_dsub>
 800ff2a:	a365      	add	r3, pc, #404	; (adr r3, 80100c0 <_dtoa_r+0x2b8>)
 800ff2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff30:	f7f0 fb72 	bl	8000618 <__aeabi_dmul>
 800ff34:	a364      	add	r3, pc, #400	; (adr r3, 80100c8 <_dtoa_r+0x2c0>)
 800ff36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3a:	f7f0 f9b7 	bl	80002ac <__adddf3>
 800ff3e:	4606      	mov	r6, r0
 800ff40:	4628      	mov	r0, r5
 800ff42:	460f      	mov	r7, r1
 800ff44:	f7f0 fafe 	bl	8000544 <__aeabi_i2d>
 800ff48:	a361      	add	r3, pc, #388	; (adr r3, 80100d0 <_dtoa_r+0x2c8>)
 800ff4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4e:	f7f0 fb63 	bl	8000618 <__aeabi_dmul>
 800ff52:	4602      	mov	r2, r0
 800ff54:	460b      	mov	r3, r1
 800ff56:	4630      	mov	r0, r6
 800ff58:	4639      	mov	r1, r7
 800ff5a:	f7f0 f9a7 	bl	80002ac <__adddf3>
 800ff5e:	4606      	mov	r6, r0
 800ff60:	460f      	mov	r7, r1
 800ff62:	f7f0 fe09 	bl	8000b78 <__aeabi_d2iz>
 800ff66:	2200      	movs	r2, #0
 800ff68:	9000      	str	r0, [sp, #0]
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	4630      	mov	r0, r6
 800ff6e:	4639      	mov	r1, r7
 800ff70:	f7f0 fdc4 	bl	8000afc <__aeabi_dcmplt>
 800ff74:	b150      	cbz	r0, 800ff8c <_dtoa_r+0x184>
 800ff76:	9800      	ldr	r0, [sp, #0]
 800ff78:	f7f0 fae4 	bl	8000544 <__aeabi_i2d>
 800ff7c:	4632      	mov	r2, r6
 800ff7e:	463b      	mov	r3, r7
 800ff80:	f7f0 fdb2 	bl	8000ae8 <__aeabi_dcmpeq>
 800ff84:	b910      	cbnz	r0, 800ff8c <_dtoa_r+0x184>
 800ff86:	9b00      	ldr	r3, [sp, #0]
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	9300      	str	r3, [sp, #0]
 800ff8c:	9b00      	ldr	r3, [sp, #0]
 800ff8e:	2b16      	cmp	r3, #22
 800ff90:	d85a      	bhi.n	8010048 <_dtoa_r+0x240>
 800ff92:	9a00      	ldr	r2, [sp, #0]
 800ff94:	4b57      	ldr	r3, [pc, #348]	; (80100f4 <_dtoa_r+0x2ec>)
 800ff96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9e:	ec51 0b19 	vmov	r0, r1, d9
 800ffa2:	f7f0 fdab 	bl	8000afc <__aeabi_dcmplt>
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	d050      	beq.n	801004c <_dtoa_r+0x244>
 800ffaa:	9b00      	ldr	r3, [sp, #0]
 800ffac:	3b01      	subs	r3, #1
 800ffae:	9300      	str	r3, [sp, #0]
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ffb6:	1b5d      	subs	r5, r3, r5
 800ffb8:	1e6b      	subs	r3, r5, #1
 800ffba:	9305      	str	r3, [sp, #20]
 800ffbc:	bf45      	ittet	mi
 800ffbe:	f1c5 0301 	rsbmi	r3, r5, #1
 800ffc2:	9304      	strmi	r3, [sp, #16]
 800ffc4:	2300      	movpl	r3, #0
 800ffc6:	2300      	movmi	r3, #0
 800ffc8:	bf4c      	ite	mi
 800ffca:	9305      	strmi	r3, [sp, #20]
 800ffcc:	9304      	strpl	r3, [sp, #16]
 800ffce:	9b00      	ldr	r3, [sp, #0]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	db3d      	blt.n	8010050 <_dtoa_r+0x248>
 800ffd4:	9b05      	ldr	r3, [sp, #20]
 800ffd6:	9a00      	ldr	r2, [sp, #0]
 800ffd8:	920a      	str	r2, [sp, #40]	; 0x28
 800ffda:	4413      	add	r3, r2
 800ffdc:	9305      	str	r3, [sp, #20]
 800ffde:	2300      	movs	r3, #0
 800ffe0:	9307      	str	r3, [sp, #28]
 800ffe2:	9b06      	ldr	r3, [sp, #24]
 800ffe4:	2b09      	cmp	r3, #9
 800ffe6:	f200 8089 	bhi.w	80100fc <_dtoa_r+0x2f4>
 800ffea:	2b05      	cmp	r3, #5
 800ffec:	bfc4      	itt	gt
 800ffee:	3b04      	subgt	r3, #4
 800fff0:	9306      	strgt	r3, [sp, #24]
 800fff2:	9b06      	ldr	r3, [sp, #24]
 800fff4:	f1a3 0302 	sub.w	r3, r3, #2
 800fff8:	bfcc      	ite	gt
 800fffa:	2500      	movgt	r5, #0
 800fffc:	2501      	movle	r5, #1
 800fffe:	2b03      	cmp	r3, #3
 8010000:	f200 8087 	bhi.w	8010112 <_dtoa_r+0x30a>
 8010004:	e8df f003 	tbb	[pc, r3]
 8010008:	59383a2d 	.word	0x59383a2d
 801000c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010010:	441d      	add	r5, r3
 8010012:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010016:	2b20      	cmp	r3, #32
 8010018:	bfc1      	itttt	gt
 801001a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801001e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010022:	fa0b f303 	lslgt.w	r3, fp, r3
 8010026:	fa26 f000 	lsrgt.w	r0, r6, r0
 801002a:	bfda      	itte	le
 801002c:	f1c3 0320 	rsble	r3, r3, #32
 8010030:	fa06 f003 	lslle.w	r0, r6, r3
 8010034:	4318      	orrgt	r0, r3
 8010036:	f7f0 fa75 	bl	8000524 <__aeabi_ui2d>
 801003a:	2301      	movs	r3, #1
 801003c:	4606      	mov	r6, r0
 801003e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010042:	3d01      	subs	r5, #1
 8010044:	930e      	str	r3, [sp, #56]	; 0x38
 8010046:	e76a      	b.n	800ff1e <_dtoa_r+0x116>
 8010048:	2301      	movs	r3, #1
 801004a:	e7b2      	b.n	800ffb2 <_dtoa_r+0x1aa>
 801004c:	900b      	str	r0, [sp, #44]	; 0x2c
 801004e:	e7b1      	b.n	800ffb4 <_dtoa_r+0x1ac>
 8010050:	9b04      	ldr	r3, [sp, #16]
 8010052:	9a00      	ldr	r2, [sp, #0]
 8010054:	1a9b      	subs	r3, r3, r2
 8010056:	9304      	str	r3, [sp, #16]
 8010058:	4253      	negs	r3, r2
 801005a:	9307      	str	r3, [sp, #28]
 801005c:	2300      	movs	r3, #0
 801005e:	930a      	str	r3, [sp, #40]	; 0x28
 8010060:	e7bf      	b.n	800ffe2 <_dtoa_r+0x1da>
 8010062:	2300      	movs	r3, #0
 8010064:	9308      	str	r3, [sp, #32]
 8010066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010068:	2b00      	cmp	r3, #0
 801006a:	dc55      	bgt.n	8010118 <_dtoa_r+0x310>
 801006c:	2301      	movs	r3, #1
 801006e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010072:	461a      	mov	r2, r3
 8010074:	9209      	str	r2, [sp, #36]	; 0x24
 8010076:	e00c      	b.n	8010092 <_dtoa_r+0x28a>
 8010078:	2301      	movs	r3, #1
 801007a:	e7f3      	b.n	8010064 <_dtoa_r+0x25c>
 801007c:	2300      	movs	r3, #0
 801007e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010080:	9308      	str	r3, [sp, #32]
 8010082:	9b00      	ldr	r3, [sp, #0]
 8010084:	4413      	add	r3, r2
 8010086:	9302      	str	r3, [sp, #8]
 8010088:	3301      	adds	r3, #1
 801008a:	2b01      	cmp	r3, #1
 801008c:	9303      	str	r3, [sp, #12]
 801008e:	bfb8      	it	lt
 8010090:	2301      	movlt	r3, #1
 8010092:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010094:	2200      	movs	r2, #0
 8010096:	6042      	str	r2, [r0, #4]
 8010098:	2204      	movs	r2, #4
 801009a:	f102 0614 	add.w	r6, r2, #20
 801009e:	429e      	cmp	r6, r3
 80100a0:	6841      	ldr	r1, [r0, #4]
 80100a2:	d93d      	bls.n	8010120 <_dtoa_r+0x318>
 80100a4:	4620      	mov	r0, r4
 80100a6:	f001 f83d 	bl	8011124 <_Balloc>
 80100aa:	9001      	str	r0, [sp, #4]
 80100ac:	2800      	cmp	r0, #0
 80100ae:	d13b      	bne.n	8010128 <_dtoa_r+0x320>
 80100b0:	4b11      	ldr	r3, [pc, #68]	; (80100f8 <_dtoa_r+0x2f0>)
 80100b2:	4602      	mov	r2, r0
 80100b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80100b8:	e6c0      	b.n	800fe3c <_dtoa_r+0x34>
 80100ba:	2301      	movs	r3, #1
 80100bc:	e7df      	b.n	801007e <_dtoa_r+0x276>
 80100be:	bf00      	nop
 80100c0:	636f4361 	.word	0x636f4361
 80100c4:	3fd287a7 	.word	0x3fd287a7
 80100c8:	8b60c8b3 	.word	0x8b60c8b3
 80100cc:	3fc68a28 	.word	0x3fc68a28
 80100d0:	509f79fb 	.word	0x509f79fb
 80100d4:	3fd34413 	.word	0x3fd34413
 80100d8:	08013300 	.word	0x08013300
 80100dc:	080134be 	.word	0x080134be
 80100e0:	7ff00000 	.word	0x7ff00000
 80100e4:	080134ba 	.word	0x080134ba
 80100e8:	080134b1 	.word	0x080134b1
 80100ec:	08013281 	.word	0x08013281
 80100f0:	3ff80000 	.word	0x3ff80000
 80100f4:	08013628 	.word	0x08013628
 80100f8:	08013519 	.word	0x08013519
 80100fc:	2501      	movs	r5, #1
 80100fe:	2300      	movs	r3, #0
 8010100:	9306      	str	r3, [sp, #24]
 8010102:	9508      	str	r5, [sp, #32]
 8010104:	f04f 33ff 	mov.w	r3, #4294967295
 8010108:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801010c:	2200      	movs	r2, #0
 801010e:	2312      	movs	r3, #18
 8010110:	e7b0      	b.n	8010074 <_dtoa_r+0x26c>
 8010112:	2301      	movs	r3, #1
 8010114:	9308      	str	r3, [sp, #32]
 8010116:	e7f5      	b.n	8010104 <_dtoa_r+0x2fc>
 8010118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801011a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801011e:	e7b8      	b.n	8010092 <_dtoa_r+0x28a>
 8010120:	3101      	adds	r1, #1
 8010122:	6041      	str	r1, [r0, #4]
 8010124:	0052      	lsls	r2, r2, #1
 8010126:	e7b8      	b.n	801009a <_dtoa_r+0x292>
 8010128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801012a:	9a01      	ldr	r2, [sp, #4]
 801012c:	601a      	str	r2, [r3, #0]
 801012e:	9b03      	ldr	r3, [sp, #12]
 8010130:	2b0e      	cmp	r3, #14
 8010132:	f200 809d 	bhi.w	8010270 <_dtoa_r+0x468>
 8010136:	2d00      	cmp	r5, #0
 8010138:	f000 809a 	beq.w	8010270 <_dtoa_r+0x468>
 801013c:	9b00      	ldr	r3, [sp, #0]
 801013e:	2b00      	cmp	r3, #0
 8010140:	dd32      	ble.n	80101a8 <_dtoa_r+0x3a0>
 8010142:	4ab7      	ldr	r2, [pc, #732]	; (8010420 <_dtoa_r+0x618>)
 8010144:	f003 030f 	and.w	r3, r3, #15
 8010148:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801014c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010150:	9b00      	ldr	r3, [sp, #0]
 8010152:	05d8      	lsls	r0, r3, #23
 8010154:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010158:	d516      	bpl.n	8010188 <_dtoa_r+0x380>
 801015a:	4bb2      	ldr	r3, [pc, #712]	; (8010424 <_dtoa_r+0x61c>)
 801015c:	ec51 0b19 	vmov	r0, r1, d9
 8010160:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010164:	f7f0 fb82 	bl	800086c <__aeabi_ddiv>
 8010168:	f007 070f 	and.w	r7, r7, #15
 801016c:	4682      	mov	sl, r0
 801016e:	468b      	mov	fp, r1
 8010170:	2503      	movs	r5, #3
 8010172:	4eac      	ldr	r6, [pc, #688]	; (8010424 <_dtoa_r+0x61c>)
 8010174:	b957      	cbnz	r7, 801018c <_dtoa_r+0x384>
 8010176:	4642      	mov	r2, r8
 8010178:	464b      	mov	r3, r9
 801017a:	4650      	mov	r0, sl
 801017c:	4659      	mov	r1, fp
 801017e:	f7f0 fb75 	bl	800086c <__aeabi_ddiv>
 8010182:	4682      	mov	sl, r0
 8010184:	468b      	mov	fp, r1
 8010186:	e028      	b.n	80101da <_dtoa_r+0x3d2>
 8010188:	2502      	movs	r5, #2
 801018a:	e7f2      	b.n	8010172 <_dtoa_r+0x36a>
 801018c:	07f9      	lsls	r1, r7, #31
 801018e:	d508      	bpl.n	80101a2 <_dtoa_r+0x39a>
 8010190:	4640      	mov	r0, r8
 8010192:	4649      	mov	r1, r9
 8010194:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010198:	f7f0 fa3e 	bl	8000618 <__aeabi_dmul>
 801019c:	3501      	adds	r5, #1
 801019e:	4680      	mov	r8, r0
 80101a0:	4689      	mov	r9, r1
 80101a2:	107f      	asrs	r7, r7, #1
 80101a4:	3608      	adds	r6, #8
 80101a6:	e7e5      	b.n	8010174 <_dtoa_r+0x36c>
 80101a8:	f000 809b 	beq.w	80102e2 <_dtoa_r+0x4da>
 80101ac:	9b00      	ldr	r3, [sp, #0]
 80101ae:	4f9d      	ldr	r7, [pc, #628]	; (8010424 <_dtoa_r+0x61c>)
 80101b0:	425e      	negs	r6, r3
 80101b2:	4b9b      	ldr	r3, [pc, #620]	; (8010420 <_dtoa_r+0x618>)
 80101b4:	f006 020f 	and.w	r2, r6, #15
 80101b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c0:	ec51 0b19 	vmov	r0, r1, d9
 80101c4:	f7f0 fa28 	bl	8000618 <__aeabi_dmul>
 80101c8:	1136      	asrs	r6, r6, #4
 80101ca:	4682      	mov	sl, r0
 80101cc:	468b      	mov	fp, r1
 80101ce:	2300      	movs	r3, #0
 80101d0:	2502      	movs	r5, #2
 80101d2:	2e00      	cmp	r6, #0
 80101d4:	d17a      	bne.n	80102cc <_dtoa_r+0x4c4>
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d1d3      	bne.n	8010182 <_dtoa_r+0x37a>
 80101da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101dc:	2b00      	cmp	r3, #0
 80101de:	f000 8082 	beq.w	80102e6 <_dtoa_r+0x4de>
 80101e2:	4b91      	ldr	r3, [pc, #580]	; (8010428 <_dtoa_r+0x620>)
 80101e4:	2200      	movs	r2, #0
 80101e6:	4650      	mov	r0, sl
 80101e8:	4659      	mov	r1, fp
 80101ea:	f7f0 fc87 	bl	8000afc <__aeabi_dcmplt>
 80101ee:	2800      	cmp	r0, #0
 80101f0:	d079      	beq.n	80102e6 <_dtoa_r+0x4de>
 80101f2:	9b03      	ldr	r3, [sp, #12]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d076      	beq.n	80102e6 <_dtoa_r+0x4de>
 80101f8:	9b02      	ldr	r3, [sp, #8]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	dd36      	ble.n	801026c <_dtoa_r+0x464>
 80101fe:	9b00      	ldr	r3, [sp, #0]
 8010200:	4650      	mov	r0, sl
 8010202:	4659      	mov	r1, fp
 8010204:	1e5f      	subs	r7, r3, #1
 8010206:	2200      	movs	r2, #0
 8010208:	4b88      	ldr	r3, [pc, #544]	; (801042c <_dtoa_r+0x624>)
 801020a:	f7f0 fa05 	bl	8000618 <__aeabi_dmul>
 801020e:	9e02      	ldr	r6, [sp, #8]
 8010210:	4682      	mov	sl, r0
 8010212:	468b      	mov	fp, r1
 8010214:	3501      	adds	r5, #1
 8010216:	4628      	mov	r0, r5
 8010218:	f7f0 f994 	bl	8000544 <__aeabi_i2d>
 801021c:	4652      	mov	r2, sl
 801021e:	465b      	mov	r3, fp
 8010220:	f7f0 f9fa 	bl	8000618 <__aeabi_dmul>
 8010224:	4b82      	ldr	r3, [pc, #520]	; (8010430 <_dtoa_r+0x628>)
 8010226:	2200      	movs	r2, #0
 8010228:	f7f0 f840 	bl	80002ac <__adddf3>
 801022c:	46d0      	mov	r8, sl
 801022e:	46d9      	mov	r9, fp
 8010230:	4682      	mov	sl, r0
 8010232:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010236:	2e00      	cmp	r6, #0
 8010238:	d158      	bne.n	80102ec <_dtoa_r+0x4e4>
 801023a:	4b7e      	ldr	r3, [pc, #504]	; (8010434 <_dtoa_r+0x62c>)
 801023c:	2200      	movs	r2, #0
 801023e:	4640      	mov	r0, r8
 8010240:	4649      	mov	r1, r9
 8010242:	f7f0 f831 	bl	80002a8 <__aeabi_dsub>
 8010246:	4652      	mov	r2, sl
 8010248:	465b      	mov	r3, fp
 801024a:	4680      	mov	r8, r0
 801024c:	4689      	mov	r9, r1
 801024e:	f7f0 fc73 	bl	8000b38 <__aeabi_dcmpgt>
 8010252:	2800      	cmp	r0, #0
 8010254:	f040 8295 	bne.w	8010782 <_dtoa_r+0x97a>
 8010258:	4652      	mov	r2, sl
 801025a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801025e:	4640      	mov	r0, r8
 8010260:	4649      	mov	r1, r9
 8010262:	f7f0 fc4b 	bl	8000afc <__aeabi_dcmplt>
 8010266:	2800      	cmp	r0, #0
 8010268:	f040 8289 	bne.w	801077e <_dtoa_r+0x976>
 801026c:	ec5b ab19 	vmov	sl, fp, d9
 8010270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010272:	2b00      	cmp	r3, #0
 8010274:	f2c0 8148 	blt.w	8010508 <_dtoa_r+0x700>
 8010278:	9a00      	ldr	r2, [sp, #0]
 801027a:	2a0e      	cmp	r2, #14
 801027c:	f300 8144 	bgt.w	8010508 <_dtoa_r+0x700>
 8010280:	4b67      	ldr	r3, [pc, #412]	; (8010420 <_dtoa_r+0x618>)
 8010282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010286:	e9d3 8900 	ldrd	r8, r9, [r3]
 801028a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801028c:	2b00      	cmp	r3, #0
 801028e:	f280 80d5 	bge.w	801043c <_dtoa_r+0x634>
 8010292:	9b03      	ldr	r3, [sp, #12]
 8010294:	2b00      	cmp	r3, #0
 8010296:	f300 80d1 	bgt.w	801043c <_dtoa_r+0x634>
 801029a:	f040 826f 	bne.w	801077c <_dtoa_r+0x974>
 801029e:	4b65      	ldr	r3, [pc, #404]	; (8010434 <_dtoa_r+0x62c>)
 80102a0:	2200      	movs	r2, #0
 80102a2:	4640      	mov	r0, r8
 80102a4:	4649      	mov	r1, r9
 80102a6:	f7f0 f9b7 	bl	8000618 <__aeabi_dmul>
 80102aa:	4652      	mov	r2, sl
 80102ac:	465b      	mov	r3, fp
 80102ae:	f7f0 fc39 	bl	8000b24 <__aeabi_dcmpge>
 80102b2:	9e03      	ldr	r6, [sp, #12]
 80102b4:	4637      	mov	r7, r6
 80102b6:	2800      	cmp	r0, #0
 80102b8:	f040 8245 	bne.w	8010746 <_dtoa_r+0x93e>
 80102bc:	9d01      	ldr	r5, [sp, #4]
 80102be:	2331      	movs	r3, #49	; 0x31
 80102c0:	f805 3b01 	strb.w	r3, [r5], #1
 80102c4:	9b00      	ldr	r3, [sp, #0]
 80102c6:	3301      	adds	r3, #1
 80102c8:	9300      	str	r3, [sp, #0]
 80102ca:	e240      	b.n	801074e <_dtoa_r+0x946>
 80102cc:	07f2      	lsls	r2, r6, #31
 80102ce:	d505      	bpl.n	80102dc <_dtoa_r+0x4d4>
 80102d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102d4:	f7f0 f9a0 	bl	8000618 <__aeabi_dmul>
 80102d8:	3501      	adds	r5, #1
 80102da:	2301      	movs	r3, #1
 80102dc:	1076      	asrs	r6, r6, #1
 80102de:	3708      	adds	r7, #8
 80102e0:	e777      	b.n	80101d2 <_dtoa_r+0x3ca>
 80102e2:	2502      	movs	r5, #2
 80102e4:	e779      	b.n	80101da <_dtoa_r+0x3d2>
 80102e6:	9f00      	ldr	r7, [sp, #0]
 80102e8:	9e03      	ldr	r6, [sp, #12]
 80102ea:	e794      	b.n	8010216 <_dtoa_r+0x40e>
 80102ec:	9901      	ldr	r1, [sp, #4]
 80102ee:	4b4c      	ldr	r3, [pc, #304]	; (8010420 <_dtoa_r+0x618>)
 80102f0:	4431      	add	r1, r6
 80102f2:	910d      	str	r1, [sp, #52]	; 0x34
 80102f4:	9908      	ldr	r1, [sp, #32]
 80102f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80102fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80102fe:	2900      	cmp	r1, #0
 8010300:	d043      	beq.n	801038a <_dtoa_r+0x582>
 8010302:	494d      	ldr	r1, [pc, #308]	; (8010438 <_dtoa_r+0x630>)
 8010304:	2000      	movs	r0, #0
 8010306:	f7f0 fab1 	bl	800086c <__aeabi_ddiv>
 801030a:	4652      	mov	r2, sl
 801030c:	465b      	mov	r3, fp
 801030e:	f7ef ffcb 	bl	80002a8 <__aeabi_dsub>
 8010312:	9d01      	ldr	r5, [sp, #4]
 8010314:	4682      	mov	sl, r0
 8010316:	468b      	mov	fp, r1
 8010318:	4649      	mov	r1, r9
 801031a:	4640      	mov	r0, r8
 801031c:	f7f0 fc2c 	bl	8000b78 <__aeabi_d2iz>
 8010320:	4606      	mov	r6, r0
 8010322:	f7f0 f90f 	bl	8000544 <__aeabi_i2d>
 8010326:	4602      	mov	r2, r0
 8010328:	460b      	mov	r3, r1
 801032a:	4640      	mov	r0, r8
 801032c:	4649      	mov	r1, r9
 801032e:	f7ef ffbb 	bl	80002a8 <__aeabi_dsub>
 8010332:	3630      	adds	r6, #48	; 0x30
 8010334:	f805 6b01 	strb.w	r6, [r5], #1
 8010338:	4652      	mov	r2, sl
 801033a:	465b      	mov	r3, fp
 801033c:	4680      	mov	r8, r0
 801033e:	4689      	mov	r9, r1
 8010340:	f7f0 fbdc 	bl	8000afc <__aeabi_dcmplt>
 8010344:	2800      	cmp	r0, #0
 8010346:	d163      	bne.n	8010410 <_dtoa_r+0x608>
 8010348:	4642      	mov	r2, r8
 801034a:	464b      	mov	r3, r9
 801034c:	4936      	ldr	r1, [pc, #216]	; (8010428 <_dtoa_r+0x620>)
 801034e:	2000      	movs	r0, #0
 8010350:	f7ef ffaa 	bl	80002a8 <__aeabi_dsub>
 8010354:	4652      	mov	r2, sl
 8010356:	465b      	mov	r3, fp
 8010358:	f7f0 fbd0 	bl	8000afc <__aeabi_dcmplt>
 801035c:	2800      	cmp	r0, #0
 801035e:	f040 80b5 	bne.w	80104cc <_dtoa_r+0x6c4>
 8010362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010364:	429d      	cmp	r5, r3
 8010366:	d081      	beq.n	801026c <_dtoa_r+0x464>
 8010368:	4b30      	ldr	r3, [pc, #192]	; (801042c <_dtoa_r+0x624>)
 801036a:	2200      	movs	r2, #0
 801036c:	4650      	mov	r0, sl
 801036e:	4659      	mov	r1, fp
 8010370:	f7f0 f952 	bl	8000618 <__aeabi_dmul>
 8010374:	4b2d      	ldr	r3, [pc, #180]	; (801042c <_dtoa_r+0x624>)
 8010376:	4682      	mov	sl, r0
 8010378:	468b      	mov	fp, r1
 801037a:	4640      	mov	r0, r8
 801037c:	4649      	mov	r1, r9
 801037e:	2200      	movs	r2, #0
 8010380:	f7f0 f94a 	bl	8000618 <__aeabi_dmul>
 8010384:	4680      	mov	r8, r0
 8010386:	4689      	mov	r9, r1
 8010388:	e7c6      	b.n	8010318 <_dtoa_r+0x510>
 801038a:	4650      	mov	r0, sl
 801038c:	4659      	mov	r1, fp
 801038e:	f7f0 f943 	bl	8000618 <__aeabi_dmul>
 8010392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010394:	9d01      	ldr	r5, [sp, #4]
 8010396:	930f      	str	r3, [sp, #60]	; 0x3c
 8010398:	4682      	mov	sl, r0
 801039a:	468b      	mov	fp, r1
 801039c:	4649      	mov	r1, r9
 801039e:	4640      	mov	r0, r8
 80103a0:	f7f0 fbea 	bl	8000b78 <__aeabi_d2iz>
 80103a4:	4606      	mov	r6, r0
 80103a6:	f7f0 f8cd 	bl	8000544 <__aeabi_i2d>
 80103aa:	3630      	adds	r6, #48	; 0x30
 80103ac:	4602      	mov	r2, r0
 80103ae:	460b      	mov	r3, r1
 80103b0:	4640      	mov	r0, r8
 80103b2:	4649      	mov	r1, r9
 80103b4:	f7ef ff78 	bl	80002a8 <__aeabi_dsub>
 80103b8:	f805 6b01 	strb.w	r6, [r5], #1
 80103bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103be:	429d      	cmp	r5, r3
 80103c0:	4680      	mov	r8, r0
 80103c2:	4689      	mov	r9, r1
 80103c4:	f04f 0200 	mov.w	r2, #0
 80103c8:	d124      	bne.n	8010414 <_dtoa_r+0x60c>
 80103ca:	4b1b      	ldr	r3, [pc, #108]	; (8010438 <_dtoa_r+0x630>)
 80103cc:	4650      	mov	r0, sl
 80103ce:	4659      	mov	r1, fp
 80103d0:	f7ef ff6c 	bl	80002ac <__adddf3>
 80103d4:	4602      	mov	r2, r0
 80103d6:	460b      	mov	r3, r1
 80103d8:	4640      	mov	r0, r8
 80103da:	4649      	mov	r1, r9
 80103dc:	f7f0 fbac 	bl	8000b38 <__aeabi_dcmpgt>
 80103e0:	2800      	cmp	r0, #0
 80103e2:	d173      	bne.n	80104cc <_dtoa_r+0x6c4>
 80103e4:	4652      	mov	r2, sl
 80103e6:	465b      	mov	r3, fp
 80103e8:	4913      	ldr	r1, [pc, #76]	; (8010438 <_dtoa_r+0x630>)
 80103ea:	2000      	movs	r0, #0
 80103ec:	f7ef ff5c 	bl	80002a8 <__aeabi_dsub>
 80103f0:	4602      	mov	r2, r0
 80103f2:	460b      	mov	r3, r1
 80103f4:	4640      	mov	r0, r8
 80103f6:	4649      	mov	r1, r9
 80103f8:	f7f0 fb80 	bl	8000afc <__aeabi_dcmplt>
 80103fc:	2800      	cmp	r0, #0
 80103fe:	f43f af35 	beq.w	801026c <_dtoa_r+0x464>
 8010402:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010404:	1e6b      	subs	r3, r5, #1
 8010406:	930f      	str	r3, [sp, #60]	; 0x3c
 8010408:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801040c:	2b30      	cmp	r3, #48	; 0x30
 801040e:	d0f8      	beq.n	8010402 <_dtoa_r+0x5fa>
 8010410:	9700      	str	r7, [sp, #0]
 8010412:	e049      	b.n	80104a8 <_dtoa_r+0x6a0>
 8010414:	4b05      	ldr	r3, [pc, #20]	; (801042c <_dtoa_r+0x624>)
 8010416:	f7f0 f8ff 	bl	8000618 <__aeabi_dmul>
 801041a:	4680      	mov	r8, r0
 801041c:	4689      	mov	r9, r1
 801041e:	e7bd      	b.n	801039c <_dtoa_r+0x594>
 8010420:	08013628 	.word	0x08013628
 8010424:	08013600 	.word	0x08013600
 8010428:	3ff00000 	.word	0x3ff00000
 801042c:	40240000 	.word	0x40240000
 8010430:	401c0000 	.word	0x401c0000
 8010434:	40140000 	.word	0x40140000
 8010438:	3fe00000 	.word	0x3fe00000
 801043c:	9d01      	ldr	r5, [sp, #4]
 801043e:	4656      	mov	r6, sl
 8010440:	465f      	mov	r7, fp
 8010442:	4642      	mov	r2, r8
 8010444:	464b      	mov	r3, r9
 8010446:	4630      	mov	r0, r6
 8010448:	4639      	mov	r1, r7
 801044a:	f7f0 fa0f 	bl	800086c <__aeabi_ddiv>
 801044e:	f7f0 fb93 	bl	8000b78 <__aeabi_d2iz>
 8010452:	4682      	mov	sl, r0
 8010454:	f7f0 f876 	bl	8000544 <__aeabi_i2d>
 8010458:	4642      	mov	r2, r8
 801045a:	464b      	mov	r3, r9
 801045c:	f7f0 f8dc 	bl	8000618 <__aeabi_dmul>
 8010460:	4602      	mov	r2, r0
 8010462:	460b      	mov	r3, r1
 8010464:	4630      	mov	r0, r6
 8010466:	4639      	mov	r1, r7
 8010468:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801046c:	f7ef ff1c 	bl	80002a8 <__aeabi_dsub>
 8010470:	f805 6b01 	strb.w	r6, [r5], #1
 8010474:	9e01      	ldr	r6, [sp, #4]
 8010476:	9f03      	ldr	r7, [sp, #12]
 8010478:	1bae      	subs	r6, r5, r6
 801047a:	42b7      	cmp	r7, r6
 801047c:	4602      	mov	r2, r0
 801047e:	460b      	mov	r3, r1
 8010480:	d135      	bne.n	80104ee <_dtoa_r+0x6e6>
 8010482:	f7ef ff13 	bl	80002ac <__adddf3>
 8010486:	4642      	mov	r2, r8
 8010488:	464b      	mov	r3, r9
 801048a:	4606      	mov	r6, r0
 801048c:	460f      	mov	r7, r1
 801048e:	f7f0 fb53 	bl	8000b38 <__aeabi_dcmpgt>
 8010492:	b9d0      	cbnz	r0, 80104ca <_dtoa_r+0x6c2>
 8010494:	4642      	mov	r2, r8
 8010496:	464b      	mov	r3, r9
 8010498:	4630      	mov	r0, r6
 801049a:	4639      	mov	r1, r7
 801049c:	f7f0 fb24 	bl	8000ae8 <__aeabi_dcmpeq>
 80104a0:	b110      	cbz	r0, 80104a8 <_dtoa_r+0x6a0>
 80104a2:	f01a 0f01 	tst.w	sl, #1
 80104a6:	d110      	bne.n	80104ca <_dtoa_r+0x6c2>
 80104a8:	4620      	mov	r0, r4
 80104aa:	ee18 1a10 	vmov	r1, s16
 80104ae:	f000 fe79 	bl	80111a4 <_Bfree>
 80104b2:	2300      	movs	r3, #0
 80104b4:	9800      	ldr	r0, [sp, #0]
 80104b6:	702b      	strb	r3, [r5, #0]
 80104b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104ba:	3001      	adds	r0, #1
 80104bc:	6018      	str	r0, [r3, #0]
 80104be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f43f acf1 	beq.w	800fea8 <_dtoa_r+0xa0>
 80104c6:	601d      	str	r5, [r3, #0]
 80104c8:	e4ee      	b.n	800fea8 <_dtoa_r+0xa0>
 80104ca:	9f00      	ldr	r7, [sp, #0]
 80104cc:	462b      	mov	r3, r5
 80104ce:	461d      	mov	r5, r3
 80104d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104d4:	2a39      	cmp	r2, #57	; 0x39
 80104d6:	d106      	bne.n	80104e6 <_dtoa_r+0x6de>
 80104d8:	9a01      	ldr	r2, [sp, #4]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d1f7      	bne.n	80104ce <_dtoa_r+0x6c6>
 80104de:	9901      	ldr	r1, [sp, #4]
 80104e0:	2230      	movs	r2, #48	; 0x30
 80104e2:	3701      	adds	r7, #1
 80104e4:	700a      	strb	r2, [r1, #0]
 80104e6:	781a      	ldrb	r2, [r3, #0]
 80104e8:	3201      	adds	r2, #1
 80104ea:	701a      	strb	r2, [r3, #0]
 80104ec:	e790      	b.n	8010410 <_dtoa_r+0x608>
 80104ee:	4ba6      	ldr	r3, [pc, #664]	; (8010788 <_dtoa_r+0x980>)
 80104f0:	2200      	movs	r2, #0
 80104f2:	f7f0 f891 	bl	8000618 <__aeabi_dmul>
 80104f6:	2200      	movs	r2, #0
 80104f8:	2300      	movs	r3, #0
 80104fa:	4606      	mov	r6, r0
 80104fc:	460f      	mov	r7, r1
 80104fe:	f7f0 faf3 	bl	8000ae8 <__aeabi_dcmpeq>
 8010502:	2800      	cmp	r0, #0
 8010504:	d09d      	beq.n	8010442 <_dtoa_r+0x63a>
 8010506:	e7cf      	b.n	80104a8 <_dtoa_r+0x6a0>
 8010508:	9a08      	ldr	r2, [sp, #32]
 801050a:	2a00      	cmp	r2, #0
 801050c:	f000 80d7 	beq.w	80106be <_dtoa_r+0x8b6>
 8010510:	9a06      	ldr	r2, [sp, #24]
 8010512:	2a01      	cmp	r2, #1
 8010514:	f300 80ba 	bgt.w	801068c <_dtoa_r+0x884>
 8010518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801051a:	2a00      	cmp	r2, #0
 801051c:	f000 80b2 	beq.w	8010684 <_dtoa_r+0x87c>
 8010520:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010524:	9e07      	ldr	r6, [sp, #28]
 8010526:	9d04      	ldr	r5, [sp, #16]
 8010528:	9a04      	ldr	r2, [sp, #16]
 801052a:	441a      	add	r2, r3
 801052c:	9204      	str	r2, [sp, #16]
 801052e:	9a05      	ldr	r2, [sp, #20]
 8010530:	2101      	movs	r1, #1
 8010532:	441a      	add	r2, r3
 8010534:	4620      	mov	r0, r4
 8010536:	9205      	str	r2, [sp, #20]
 8010538:	f000 ff36 	bl	80113a8 <__i2b>
 801053c:	4607      	mov	r7, r0
 801053e:	2d00      	cmp	r5, #0
 8010540:	dd0c      	ble.n	801055c <_dtoa_r+0x754>
 8010542:	9b05      	ldr	r3, [sp, #20]
 8010544:	2b00      	cmp	r3, #0
 8010546:	dd09      	ble.n	801055c <_dtoa_r+0x754>
 8010548:	42ab      	cmp	r3, r5
 801054a:	9a04      	ldr	r2, [sp, #16]
 801054c:	bfa8      	it	ge
 801054e:	462b      	movge	r3, r5
 8010550:	1ad2      	subs	r2, r2, r3
 8010552:	9204      	str	r2, [sp, #16]
 8010554:	9a05      	ldr	r2, [sp, #20]
 8010556:	1aed      	subs	r5, r5, r3
 8010558:	1ad3      	subs	r3, r2, r3
 801055a:	9305      	str	r3, [sp, #20]
 801055c:	9b07      	ldr	r3, [sp, #28]
 801055e:	b31b      	cbz	r3, 80105a8 <_dtoa_r+0x7a0>
 8010560:	9b08      	ldr	r3, [sp, #32]
 8010562:	2b00      	cmp	r3, #0
 8010564:	f000 80af 	beq.w	80106c6 <_dtoa_r+0x8be>
 8010568:	2e00      	cmp	r6, #0
 801056a:	dd13      	ble.n	8010594 <_dtoa_r+0x78c>
 801056c:	4639      	mov	r1, r7
 801056e:	4632      	mov	r2, r6
 8010570:	4620      	mov	r0, r4
 8010572:	f000 ffd9 	bl	8011528 <__pow5mult>
 8010576:	ee18 2a10 	vmov	r2, s16
 801057a:	4601      	mov	r1, r0
 801057c:	4607      	mov	r7, r0
 801057e:	4620      	mov	r0, r4
 8010580:	f000 ff28 	bl	80113d4 <__multiply>
 8010584:	ee18 1a10 	vmov	r1, s16
 8010588:	4680      	mov	r8, r0
 801058a:	4620      	mov	r0, r4
 801058c:	f000 fe0a 	bl	80111a4 <_Bfree>
 8010590:	ee08 8a10 	vmov	s16, r8
 8010594:	9b07      	ldr	r3, [sp, #28]
 8010596:	1b9a      	subs	r2, r3, r6
 8010598:	d006      	beq.n	80105a8 <_dtoa_r+0x7a0>
 801059a:	ee18 1a10 	vmov	r1, s16
 801059e:	4620      	mov	r0, r4
 80105a0:	f000 ffc2 	bl	8011528 <__pow5mult>
 80105a4:	ee08 0a10 	vmov	s16, r0
 80105a8:	2101      	movs	r1, #1
 80105aa:	4620      	mov	r0, r4
 80105ac:	f000 fefc 	bl	80113a8 <__i2b>
 80105b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	4606      	mov	r6, r0
 80105b6:	f340 8088 	ble.w	80106ca <_dtoa_r+0x8c2>
 80105ba:	461a      	mov	r2, r3
 80105bc:	4601      	mov	r1, r0
 80105be:	4620      	mov	r0, r4
 80105c0:	f000 ffb2 	bl	8011528 <__pow5mult>
 80105c4:	9b06      	ldr	r3, [sp, #24]
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	4606      	mov	r6, r0
 80105ca:	f340 8081 	ble.w	80106d0 <_dtoa_r+0x8c8>
 80105ce:	f04f 0800 	mov.w	r8, #0
 80105d2:	6933      	ldr	r3, [r6, #16]
 80105d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80105d8:	6918      	ldr	r0, [r3, #16]
 80105da:	f000 fe95 	bl	8011308 <__hi0bits>
 80105de:	f1c0 0020 	rsb	r0, r0, #32
 80105e2:	9b05      	ldr	r3, [sp, #20]
 80105e4:	4418      	add	r0, r3
 80105e6:	f010 001f 	ands.w	r0, r0, #31
 80105ea:	f000 8092 	beq.w	8010712 <_dtoa_r+0x90a>
 80105ee:	f1c0 0320 	rsb	r3, r0, #32
 80105f2:	2b04      	cmp	r3, #4
 80105f4:	f340 808a 	ble.w	801070c <_dtoa_r+0x904>
 80105f8:	f1c0 001c 	rsb	r0, r0, #28
 80105fc:	9b04      	ldr	r3, [sp, #16]
 80105fe:	4403      	add	r3, r0
 8010600:	9304      	str	r3, [sp, #16]
 8010602:	9b05      	ldr	r3, [sp, #20]
 8010604:	4403      	add	r3, r0
 8010606:	4405      	add	r5, r0
 8010608:	9305      	str	r3, [sp, #20]
 801060a:	9b04      	ldr	r3, [sp, #16]
 801060c:	2b00      	cmp	r3, #0
 801060e:	dd07      	ble.n	8010620 <_dtoa_r+0x818>
 8010610:	ee18 1a10 	vmov	r1, s16
 8010614:	461a      	mov	r2, r3
 8010616:	4620      	mov	r0, r4
 8010618:	f000 ffe0 	bl	80115dc <__lshift>
 801061c:	ee08 0a10 	vmov	s16, r0
 8010620:	9b05      	ldr	r3, [sp, #20]
 8010622:	2b00      	cmp	r3, #0
 8010624:	dd05      	ble.n	8010632 <_dtoa_r+0x82a>
 8010626:	4631      	mov	r1, r6
 8010628:	461a      	mov	r2, r3
 801062a:	4620      	mov	r0, r4
 801062c:	f000 ffd6 	bl	80115dc <__lshift>
 8010630:	4606      	mov	r6, r0
 8010632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010634:	2b00      	cmp	r3, #0
 8010636:	d06e      	beq.n	8010716 <_dtoa_r+0x90e>
 8010638:	ee18 0a10 	vmov	r0, s16
 801063c:	4631      	mov	r1, r6
 801063e:	f001 f83d 	bl	80116bc <__mcmp>
 8010642:	2800      	cmp	r0, #0
 8010644:	da67      	bge.n	8010716 <_dtoa_r+0x90e>
 8010646:	9b00      	ldr	r3, [sp, #0]
 8010648:	3b01      	subs	r3, #1
 801064a:	ee18 1a10 	vmov	r1, s16
 801064e:	9300      	str	r3, [sp, #0]
 8010650:	220a      	movs	r2, #10
 8010652:	2300      	movs	r3, #0
 8010654:	4620      	mov	r0, r4
 8010656:	f000 fdc7 	bl	80111e8 <__multadd>
 801065a:	9b08      	ldr	r3, [sp, #32]
 801065c:	ee08 0a10 	vmov	s16, r0
 8010660:	2b00      	cmp	r3, #0
 8010662:	f000 81b1 	beq.w	80109c8 <_dtoa_r+0xbc0>
 8010666:	2300      	movs	r3, #0
 8010668:	4639      	mov	r1, r7
 801066a:	220a      	movs	r2, #10
 801066c:	4620      	mov	r0, r4
 801066e:	f000 fdbb 	bl	80111e8 <__multadd>
 8010672:	9b02      	ldr	r3, [sp, #8]
 8010674:	2b00      	cmp	r3, #0
 8010676:	4607      	mov	r7, r0
 8010678:	f300 808e 	bgt.w	8010798 <_dtoa_r+0x990>
 801067c:	9b06      	ldr	r3, [sp, #24]
 801067e:	2b02      	cmp	r3, #2
 8010680:	dc51      	bgt.n	8010726 <_dtoa_r+0x91e>
 8010682:	e089      	b.n	8010798 <_dtoa_r+0x990>
 8010684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010686:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801068a:	e74b      	b.n	8010524 <_dtoa_r+0x71c>
 801068c:	9b03      	ldr	r3, [sp, #12]
 801068e:	1e5e      	subs	r6, r3, #1
 8010690:	9b07      	ldr	r3, [sp, #28]
 8010692:	42b3      	cmp	r3, r6
 8010694:	bfbf      	itttt	lt
 8010696:	9b07      	ldrlt	r3, [sp, #28]
 8010698:	9607      	strlt	r6, [sp, #28]
 801069a:	1af2      	sublt	r2, r6, r3
 801069c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801069e:	bfb6      	itet	lt
 80106a0:	189b      	addlt	r3, r3, r2
 80106a2:	1b9e      	subge	r6, r3, r6
 80106a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80106a6:	9b03      	ldr	r3, [sp, #12]
 80106a8:	bfb8      	it	lt
 80106aa:	2600      	movlt	r6, #0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	bfb7      	itett	lt
 80106b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80106b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80106b8:	1a9d      	sublt	r5, r3, r2
 80106ba:	2300      	movlt	r3, #0
 80106bc:	e734      	b.n	8010528 <_dtoa_r+0x720>
 80106be:	9e07      	ldr	r6, [sp, #28]
 80106c0:	9d04      	ldr	r5, [sp, #16]
 80106c2:	9f08      	ldr	r7, [sp, #32]
 80106c4:	e73b      	b.n	801053e <_dtoa_r+0x736>
 80106c6:	9a07      	ldr	r2, [sp, #28]
 80106c8:	e767      	b.n	801059a <_dtoa_r+0x792>
 80106ca:	9b06      	ldr	r3, [sp, #24]
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	dc18      	bgt.n	8010702 <_dtoa_r+0x8fa>
 80106d0:	f1ba 0f00 	cmp.w	sl, #0
 80106d4:	d115      	bne.n	8010702 <_dtoa_r+0x8fa>
 80106d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80106da:	b993      	cbnz	r3, 8010702 <_dtoa_r+0x8fa>
 80106dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80106e0:	0d1b      	lsrs	r3, r3, #20
 80106e2:	051b      	lsls	r3, r3, #20
 80106e4:	b183      	cbz	r3, 8010708 <_dtoa_r+0x900>
 80106e6:	9b04      	ldr	r3, [sp, #16]
 80106e8:	3301      	adds	r3, #1
 80106ea:	9304      	str	r3, [sp, #16]
 80106ec:	9b05      	ldr	r3, [sp, #20]
 80106ee:	3301      	adds	r3, #1
 80106f0:	9305      	str	r3, [sp, #20]
 80106f2:	f04f 0801 	mov.w	r8, #1
 80106f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f47f af6a 	bne.w	80105d2 <_dtoa_r+0x7ca>
 80106fe:	2001      	movs	r0, #1
 8010700:	e76f      	b.n	80105e2 <_dtoa_r+0x7da>
 8010702:	f04f 0800 	mov.w	r8, #0
 8010706:	e7f6      	b.n	80106f6 <_dtoa_r+0x8ee>
 8010708:	4698      	mov	r8, r3
 801070a:	e7f4      	b.n	80106f6 <_dtoa_r+0x8ee>
 801070c:	f43f af7d 	beq.w	801060a <_dtoa_r+0x802>
 8010710:	4618      	mov	r0, r3
 8010712:	301c      	adds	r0, #28
 8010714:	e772      	b.n	80105fc <_dtoa_r+0x7f4>
 8010716:	9b03      	ldr	r3, [sp, #12]
 8010718:	2b00      	cmp	r3, #0
 801071a:	dc37      	bgt.n	801078c <_dtoa_r+0x984>
 801071c:	9b06      	ldr	r3, [sp, #24]
 801071e:	2b02      	cmp	r3, #2
 8010720:	dd34      	ble.n	801078c <_dtoa_r+0x984>
 8010722:	9b03      	ldr	r3, [sp, #12]
 8010724:	9302      	str	r3, [sp, #8]
 8010726:	9b02      	ldr	r3, [sp, #8]
 8010728:	b96b      	cbnz	r3, 8010746 <_dtoa_r+0x93e>
 801072a:	4631      	mov	r1, r6
 801072c:	2205      	movs	r2, #5
 801072e:	4620      	mov	r0, r4
 8010730:	f000 fd5a 	bl	80111e8 <__multadd>
 8010734:	4601      	mov	r1, r0
 8010736:	4606      	mov	r6, r0
 8010738:	ee18 0a10 	vmov	r0, s16
 801073c:	f000 ffbe 	bl	80116bc <__mcmp>
 8010740:	2800      	cmp	r0, #0
 8010742:	f73f adbb 	bgt.w	80102bc <_dtoa_r+0x4b4>
 8010746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010748:	9d01      	ldr	r5, [sp, #4]
 801074a:	43db      	mvns	r3, r3
 801074c:	9300      	str	r3, [sp, #0]
 801074e:	f04f 0800 	mov.w	r8, #0
 8010752:	4631      	mov	r1, r6
 8010754:	4620      	mov	r0, r4
 8010756:	f000 fd25 	bl	80111a4 <_Bfree>
 801075a:	2f00      	cmp	r7, #0
 801075c:	f43f aea4 	beq.w	80104a8 <_dtoa_r+0x6a0>
 8010760:	f1b8 0f00 	cmp.w	r8, #0
 8010764:	d005      	beq.n	8010772 <_dtoa_r+0x96a>
 8010766:	45b8      	cmp	r8, r7
 8010768:	d003      	beq.n	8010772 <_dtoa_r+0x96a>
 801076a:	4641      	mov	r1, r8
 801076c:	4620      	mov	r0, r4
 801076e:	f000 fd19 	bl	80111a4 <_Bfree>
 8010772:	4639      	mov	r1, r7
 8010774:	4620      	mov	r0, r4
 8010776:	f000 fd15 	bl	80111a4 <_Bfree>
 801077a:	e695      	b.n	80104a8 <_dtoa_r+0x6a0>
 801077c:	2600      	movs	r6, #0
 801077e:	4637      	mov	r7, r6
 8010780:	e7e1      	b.n	8010746 <_dtoa_r+0x93e>
 8010782:	9700      	str	r7, [sp, #0]
 8010784:	4637      	mov	r7, r6
 8010786:	e599      	b.n	80102bc <_dtoa_r+0x4b4>
 8010788:	40240000 	.word	0x40240000
 801078c:	9b08      	ldr	r3, [sp, #32]
 801078e:	2b00      	cmp	r3, #0
 8010790:	f000 80ca 	beq.w	8010928 <_dtoa_r+0xb20>
 8010794:	9b03      	ldr	r3, [sp, #12]
 8010796:	9302      	str	r3, [sp, #8]
 8010798:	2d00      	cmp	r5, #0
 801079a:	dd05      	ble.n	80107a8 <_dtoa_r+0x9a0>
 801079c:	4639      	mov	r1, r7
 801079e:	462a      	mov	r2, r5
 80107a0:	4620      	mov	r0, r4
 80107a2:	f000 ff1b 	bl	80115dc <__lshift>
 80107a6:	4607      	mov	r7, r0
 80107a8:	f1b8 0f00 	cmp.w	r8, #0
 80107ac:	d05b      	beq.n	8010866 <_dtoa_r+0xa5e>
 80107ae:	6879      	ldr	r1, [r7, #4]
 80107b0:	4620      	mov	r0, r4
 80107b2:	f000 fcb7 	bl	8011124 <_Balloc>
 80107b6:	4605      	mov	r5, r0
 80107b8:	b928      	cbnz	r0, 80107c6 <_dtoa_r+0x9be>
 80107ba:	4b87      	ldr	r3, [pc, #540]	; (80109d8 <_dtoa_r+0xbd0>)
 80107bc:	4602      	mov	r2, r0
 80107be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80107c2:	f7ff bb3b 	b.w	800fe3c <_dtoa_r+0x34>
 80107c6:	693a      	ldr	r2, [r7, #16]
 80107c8:	3202      	adds	r2, #2
 80107ca:	0092      	lsls	r2, r2, #2
 80107cc:	f107 010c 	add.w	r1, r7, #12
 80107d0:	300c      	adds	r0, #12
 80107d2:	f7fd fc87 	bl	800e0e4 <memcpy>
 80107d6:	2201      	movs	r2, #1
 80107d8:	4629      	mov	r1, r5
 80107da:	4620      	mov	r0, r4
 80107dc:	f000 fefe 	bl	80115dc <__lshift>
 80107e0:	9b01      	ldr	r3, [sp, #4]
 80107e2:	f103 0901 	add.w	r9, r3, #1
 80107e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80107ea:	4413      	add	r3, r2
 80107ec:	9305      	str	r3, [sp, #20]
 80107ee:	f00a 0301 	and.w	r3, sl, #1
 80107f2:	46b8      	mov	r8, r7
 80107f4:	9304      	str	r3, [sp, #16]
 80107f6:	4607      	mov	r7, r0
 80107f8:	4631      	mov	r1, r6
 80107fa:	ee18 0a10 	vmov	r0, s16
 80107fe:	f7ff fa75 	bl	800fcec <quorem>
 8010802:	4641      	mov	r1, r8
 8010804:	9002      	str	r0, [sp, #8]
 8010806:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801080a:	ee18 0a10 	vmov	r0, s16
 801080e:	f000 ff55 	bl	80116bc <__mcmp>
 8010812:	463a      	mov	r2, r7
 8010814:	9003      	str	r0, [sp, #12]
 8010816:	4631      	mov	r1, r6
 8010818:	4620      	mov	r0, r4
 801081a:	f000 ff6b 	bl	80116f4 <__mdiff>
 801081e:	68c2      	ldr	r2, [r0, #12]
 8010820:	f109 3bff 	add.w	fp, r9, #4294967295
 8010824:	4605      	mov	r5, r0
 8010826:	bb02      	cbnz	r2, 801086a <_dtoa_r+0xa62>
 8010828:	4601      	mov	r1, r0
 801082a:	ee18 0a10 	vmov	r0, s16
 801082e:	f000 ff45 	bl	80116bc <__mcmp>
 8010832:	4602      	mov	r2, r0
 8010834:	4629      	mov	r1, r5
 8010836:	4620      	mov	r0, r4
 8010838:	9207      	str	r2, [sp, #28]
 801083a:	f000 fcb3 	bl	80111a4 <_Bfree>
 801083e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010842:	ea43 0102 	orr.w	r1, r3, r2
 8010846:	9b04      	ldr	r3, [sp, #16]
 8010848:	430b      	orrs	r3, r1
 801084a:	464d      	mov	r5, r9
 801084c:	d10f      	bne.n	801086e <_dtoa_r+0xa66>
 801084e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010852:	d02a      	beq.n	80108aa <_dtoa_r+0xaa2>
 8010854:	9b03      	ldr	r3, [sp, #12]
 8010856:	2b00      	cmp	r3, #0
 8010858:	dd02      	ble.n	8010860 <_dtoa_r+0xa58>
 801085a:	9b02      	ldr	r3, [sp, #8]
 801085c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010860:	f88b a000 	strb.w	sl, [fp]
 8010864:	e775      	b.n	8010752 <_dtoa_r+0x94a>
 8010866:	4638      	mov	r0, r7
 8010868:	e7ba      	b.n	80107e0 <_dtoa_r+0x9d8>
 801086a:	2201      	movs	r2, #1
 801086c:	e7e2      	b.n	8010834 <_dtoa_r+0xa2c>
 801086e:	9b03      	ldr	r3, [sp, #12]
 8010870:	2b00      	cmp	r3, #0
 8010872:	db04      	blt.n	801087e <_dtoa_r+0xa76>
 8010874:	9906      	ldr	r1, [sp, #24]
 8010876:	430b      	orrs	r3, r1
 8010878:	9904      	ldr	r1, [sp, #16]
 801087a:	430b      	orrs	r3, r1
 801087c:	d122      	bne.n	80108c4 <_dtoa_r+0xabc>
 801087e:	2a00      	cmp	r2, #0
 8010880:	ddee      	ble.n	8010860 <_dtoa_r+0xa58>
 8010882:	ee18 1a10 	vmov	r1, s16
 8010886:	2201      	movs	r2, #1
 8010888:	4620      	mov	r0, r4
 801088a:	f000 fea7 	bl	80115dc <__lshift>
 801088e:	4631      	mov	r1, r6
 8010890:	ee08 0a10 	vmov	s16, r0
 8010894:	f000 ff12 	bl	80116bc <__mcmp>
 8010898:	2800      	cmp	r0, #0
 801089a:	dc03      	bgt.n	80108a4 <_dtoa_r+0xa9c>
 801089c:	d1e0      	bne.n	8010860 <_dtoa_r+0xa58>
 801089e:	f01a 0f01 	tst.w	sl, #1
 80108a2:	d0dd      	beq.n	8010860 <_dtoa_r+0xa58>
 80108a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80108a8:	d1d7      	bne.n	801085a <_dtoa_r+0xa52>
 80108aa:	2339      	movs	r3, #57	; 0x39
 80108ac:	f88b 3000 	strb.w	r3, [fp]
 80108b0:	462b      	mov	r3, r5
 80108b2:	461d      	mov	r5, r3
 80108b4:	3b01      	subs	r3, #1
 80108b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80108ba:	2a39      	cmp	r2, #57	; 0x39
 80108bc:	d071      	beq.n	80109a2 <_dtoa_r+0xb9a>
 80108be:	3201      	adds	r2, #1
 80108c0:	701a      	strb	r2, [r3, #0]
 80108c2:	e746      	b.n	8010752 <_dtoa_r+0x94a>
 80108c4:	2a00      	cmp	r2, #0
 80108c6:	dd07      	ble.n	80108d8 <_dtoa_r+0xad0>
 80108c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80108cc:	d0ed      	beq.n	80108aa <_dtoa_r+0xaa2>
 80108ce:	f10a 0301 	add.w	r3, sl, #1
 80108d2:	f88b 3000 	strb.w	r3, [fp]
 80108d6:	e73c      	b.n	8010752 <_dtoa_r+0x94a>
 80108d8:	9b05      	ldr	r3, [sp, #20]
 80108da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80108de:	4599      	cmp	r9, r3
 80108e0:	d047      	beq.n	8010972 <_dtoa_r+0xb6a>
 80108e2:	ee18 1a10 	vmov	r1, s16
 80108e6:	2300      	movs	r3, #0
 80108e8:	220a      	movs	r2, #10
 80108ea:	4620      	mov	r0, r4
 80108ec:	f000 fc7c 	bl	80111e8 <__multadd>
 80108f0:	45b8      	cmp	r8, r7
 80108f2:	ee08 0a10 	vmov	s16, r0
 80108f6:	f04f 0300 	mov.w	r3, #0
 80108fa:	f04f 020a 	mov.w	r2, #10
 80108fe:	4641      	mov	r1, r8
 8010900:	4620      	mov	r0, r4
 8010902:	d106      	bne.n	8010912 <_dtoa_r+0xb0a>
 8010904:	f000 fc70 	bl	80111e8 <__multadd>
 8010908:	4680      	mov	r8, r0
 801090a:	4607      	mov	r7, r0
 801090c:	f109 0901 	add.w	r9, r9, #1
 8010910:	e772      	b.n	80107f8 <_dtoa_r+0x9f0>
 8010912:	f000 fc69 	bl	80111e8 <__multadd>
 8010916:	4639      	mov	r1, r7
 8010918:	4680      	mov	r8, r0
 801091a:	2300      	movs	r3, #0
 801091c:	220a      	movs	r2, #10
 801091e:	4620      	mov	r0, r4
 8010920:	f000 fc62 	bl	80111e8 <__multadd>
 8010924:	4607      	mov	r7, r0
 8010926:	e7f1      	b.n	801090c <_dtoa_r+0xb04>
 8010928:	9b03      	ldr	r3, [sp, #12]
 801092a:	9302      	str	r3, [sp, #8]
 801092c:	9d01      	ldr	r5, [sp, #4]
 801092e:	ee18 0a10 	vmov	r0, s16
 8010932:	4631      	mov	r1, r6
 8010934:	f7ff f9da 	bl	800fcec <quorem>
 8010938:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801093c:	9b01      	ldr	r3, [sp, #4]
 801093e:	f805 ab01 	strb.w	sl, [r5], #1
 8010942:	1aea      	subs	r2, r5, r3
 8010944:	9b02      	ldr	r3, [sp, #8]
 8010946:	4293      	cmp	r3, r2
 8010948:	dd09      	ble.n	801095e <_dtoa_r+0xb56>
 801094a:	ee18 1a10 	vmov	r1, s16
 801094e:	2300      	movs	r3, #0
 8010950:	220a      	movs	r2, #10
 8010952:	4620      	mov	r0, r4
 8010954:	f000 fc48 	bl	80111e8 <__multadd>
 8010958:	ee08 0a10 	vmov	s16, r0
 801095c:	e7e7      	b.n	801092e <_dtoa_r+0xb26>
 801095e:	9b02      	ldr	r3, [sp, #8]
 8010960:	2b00      	cmp	r3, #0
 8010962:	bfc8      	it	gt
 8010964:	461d      	movgt	r5, r3
 8010966:	9b01      	ldr	r3, [sp, #4]
 8010968:	bfd8      	it	le
 801096a:	2501      	movle	r5, #1
 801096c:	441d      	add	r5, r3
 801096e:	f04f 0800 	mov.w	r8, #0
 8010972:	ee18 1a10 	vmov	r1, s16
 8010976:	2201      	movs	r2, #1
 8010978:	4620      	mov	r0, r4
 801097a:	f000 fe2f 	bl	80115dc <__lshift>
 801097e:	4631      	mov	r1, r6
 8010980:	ee08 0a10 	vmov	s16, r0
 8010984:	f000 fe9a 	bl	80116bc <__mcmp>
 8010988:	2800      	cmp	r0, #0
 801098a:	dc91      	bgt.n	80108b0 <_dtoa_r+0xaa8>
 801098c:	d102      	bne.n	8010994 <_dtoa_r+0xb8c>
 801098e:	f01a 0f01 	tst.w	sl, #1
 8010992:	d18d      	bne.n	80108b0 <_dtoa_r+0xaa8>
 8010994:	462b      	mov	r3, r5
 8010996:	461d      	mov	r5, r3
 8010998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801099c:	2a30      	cmp	r2, #48	; 0x30
 801099e:	d0fa      	beq.n	8010996 <_dtoa_r+0xb8e>
 80109a0:	e6d7      	b.n	8010752 <_dtoa_r+0x94a>
 80109a2:	9a01      	ldr	r2, [sp, #4]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d184      	bne.n	80108b2 <_dtoa_r+0xaaa>
 80109a8:	9b00      	ldr	r3, [sp, #0]
 80109aa:	3301      	adds	r3, #1
 80109ac:	9300      	str	r3, [sp, #0]
 80109ae:	2331      	movs	r3, #49	; 0x31
 80109b0:	7013      	strb	r3, [r2, #0]
 80109b2:	e6ce      	b.n	8010752 <_dtoa_r+0x94a>
 80109b4:	4b09      	ldr	r3, [pc, #36]	; (80109dc <_dtoa_r+0xbd4>)
 80109b6:	f7ff ba95 	b.w	800fee4 <_dtoa_r+0xdc>
 80109ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109bc:	2b00      	cmp	r3, #0
 80109be:	f47f aa6e 	bne.w	800fe9e <_dtoa_r+0x96>
 80109c2:	4b07      	ldr	r3, [pc, #28]	; (80109e0 <_dtoa_r+0xbd8>)
 80109c4:	f7ff ba8e 	b.w	800fee4 <_dtoa_r+0xdc>
 80109c8:	9b02      	ldr	r3, [sp, #8]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	dcae      	bgt.n	801092c <_dtoa_r+0xb24>
 80109ce:	9b06      	ldr	r3, [sp, #24]
 80109d0:	2b02      	cmp	r3, #2
 80109d2:	f73f aea8 	bgt.w	8010726 <_dtoa_r+0x91e>
 80109d6:	e7a9      	b.n	801092c <_dtoa_r+0xb24>
 80109d8:	08013519 	.word	0x08013519
 80109dc:	08013280 	.word	0x08013280
 80109e0:	080134b1 	.word	0x080134b1

080109e4 <fiprintf>:
 80109e4:	b40e      	push	{r1, r2, r3}
 80109e6:	b503      	push	{r0, r1, lr}
 80109e8:	4601      	mov	r1, r0
 80109ea:	ab03      	add	r3, sp, #12
 80109ec:	4805      	ldr	r0, [pc, #20]	; (8010a04 <fiprintf+0x20>)
 80109ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80109f2:	6800      	ldr	r0, [r0, #0]
 80109f4:	9301      	str	r3, [sp, #4]
 80109f6:	f001 fad3 	bl	8011fa0 <_vfiprintf_r>
 80109fa:	b002      	add	sp, #8
 80109fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a00:	b003      	add	sp, #12
 8010a02:	4770      	bx	lr
 8010a04:	20000024 	.word	0x20000024

08010a08 <rshift>:
 8010a08:	6903      	ldr	r3, [r0, #16]
 8010a0a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010a0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a12:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010a16:	f100 0414 	add.w	r4, r0, #20
 8010a1a:	dd45      	ble.n	8010aa8 <rshift+0xa0>
 8010a1c:	f011 011f 	ands.w	r1, r1, #31
 8010a20:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010a24:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010a28:	d10c      	bne.n	8010a44 <rshift+0x3c>
 8010a2a:	f100 0710 	add.w	r7, r0, #16
 8010a2e:	4629      	mov	r1, r5
 8010a30:	42b1      	cmp	r1, r6
 8010a32:	d334      	bcc.n	8010a9e <rshift+0x96>
 8010a34:	1a9b      	subs	r3, r3, r2
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	1eea      	subs	r2, r5, #3
 8010a3a:	4296      	cmp	r6, r2
 8010a3c:	bf38      	it	cc
 8010a3e:	2300      	movcc	r3, #0
 8010a40:	4423      	add	r3, r4
 8010a42:	e015      	b.n	8010a70 <rshift+0x68>
 8010a44:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010a48:	f1c1 0820 	rsb	r8, r1, #32
 8010a4c:	40cf      	lsrs	r7, r1
 8010a4e:	f105 0e04 	add.w	lr, r5, #4
 8010a52:	46a1      	mov	r9, r4
 8010a54:	4576      	cmp	r6, lr
 8010a56:	46f4      	mov	ip, lr
 8010a58:	d815      	bhi.n	8010a86 <rshift+0x7e>
 8010a5a:	1a9a      	subs	r2, r3, r2
 8010a5c:	0092      	lsls	r2, r2, #2
 8010a5e:	3a04      	subs	r2, #4
 8010a60:	3501      	adds	r5, #1
 8010a62:	42ae      	cmp	r6, r5
 8010a64:	bf38      	it	cc
 8010a66:	2200      	movcc	r2, #0
 8010a68:	18a3      	adds	r3, r4, r2
 8010a6a:	50a7      	str	r7, [r4, r2]
 8010a6c:	b107      	cbz	r7, 8010a70 <rshift+0x68>
 8010a6e:	3304      	adds	r3, #4
 8010a70:	1b1a      	subs	r2, r3, r4
 8010a72:	42a3      	cmp	r3, r4
 8010a74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010a78:	bf08      	it	eq
 8010a7a:	2300      	moveq	r3, #0
 8010a7c:	6102      	str	r2, [r0, #16]
 8010a7e:	bf08      	it	eq
 8010a80:	6143      	streq	r3, [r0, #20]
 8010a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a86:	f8dc c000 	ldr.w	ip, [ip]
 8010a8a:	fa0c fc08 	lsl.w	ip, ip, r8
 8010a8e:	ea4c 0707 	orr.w	r7, ip, r7
 8010a92:	f849 7b04 	str.w	r7, [r9], #4
 8010a96:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010a9a:	40cf      	lsrs	r7, r1
 8010a9c:	e7da      	b.n	8010a54 <rshift+0x4c>
 8010a9e:	f851 cb04 	ldr.w	ip, [r1], #4
 8010aa2:	f847 cf04 	str.w	ip, [r7, #4]!
 8010aa6:	e7c3      	b.n	8010a30 <rshift+0x28>
 8010aa8:	4623      	mov	r3, r4
 8010aaa:	e7e1      	b.n	8010a70 <rshift+0x68>

08010aac <__hexdig_fun>:
 8010aac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010ab0:	2b09      	cmp	r3, #9
 8010ab2:	d802      	bhi.n	8010aba <__hexdig_fun+0xe>
 8010ab4:	3820      	subs	r0, #32
 8010ab6:	b2c0      	uxtb	r0, r0
 8010ab8:	4770      	bx	lr
 8010aba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010abe:	2b05      	cmp	r3, #5
 8010ac0:	d801      	bhi.n	8010ac6 <__hexdig_fun+0x1a>
 8010ac2:	3847      	subs	r0, #71	; 0x47
 8010ac4:	e7f7      	b.n	8010ab6 <__hexdig_fun+0xa>
 8010ac6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010aca:	2b05      	cmp	r3, #5
 8010acc:	d801      	bhi.n	8010ad2 <__hexdig_fun+0x26>
 8010ace:	3827      	subs	r0, #39	; 0x27
 8010ad0:	e7f1      	b.n	8010ab6 <__hexdig_fun+0xa>
 8010ad2:	2000      	movs	r0, #0
 8010ad4:	4770      	bx	lr
	...

08010ad8 <__gethex>:
 8010ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010adc:	ed2d 8b02 	vpush	{d8}
 8010ae0:	b089      	sub	sp, #36	; 0x24
 8010ae2:	ee08 0a10 	vmov	s16, r0
 8010ae6:	9304      	str	r3, [sp, #16]
 8010ae8:	4bb4      	ldr	r3, [pc, #720]	; (8010dbc <__gethex+0x2e4>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	9301      	str	r3, [sp, #4]
 8010aee:	4618      	mov	r0, r3
 8010af0:	468b      	mov	fp, r1
 8010af2:	4690      	mov	r8, r2
 8010af4:	f7ef fb76 	bl	80001e4 <strlen>
 8010af8:	9b01      	ldr	r3, [sp, #4]
 8010afa:	f8db 2000 	ldr.w	r2, [fp]
 8010afe:	4403      	add	r3, r0
 8010b00:	4682      	mov	sl, r0
 8010b02:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010b06:	9305      	str	r3, [sp, #20]
 8010b08:	1c93      	adds	r3, r2, #2
 8010b0a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010b0e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010b12:	32fe      	adds	r2, #254	; 0xfe
 8010b14:	18d1      	adds	r1, r2, r3
 8010b16:	461f      	mov	r7, r3
 8010b18:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010b1c:	9100      	str	r1, [sp, #0]
 8010b1e:	2830      	cmp	r0, #48	; 0x30
 8010b20:	d0f8      	beq.n	8010b14 <__gethex+0x3c>
 8010b22:	f7ff ffc3 	bl	8010aac <__hexdig_fun>
 8010b26:	4604      	mov	r4, r0
 8010b28:	2800      	cmp	r0, #0
 8010b2a:	d13a      	bne.n	8010ba2 <__gethex+0xca>
 8010b2c:	9901      	ldr	r1, [sp, #4]
 8010b2e:	4652      	mov	r2, sl
 8010b30:	4638      	mov	r0, r7
 8010b32:	f001 fb7d 	bl	8012230 <strncmp>
 8010b36:	4605      	mov	r5, r0
 8010b38:	2800      	cmp	r0, #0
 8010b3a:	d168      	bne.n	8010c0e <__gethex+0x136>
 8010b3c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010b40:	eb07 060a 	add.w	r6, r7, sl
 8010b44:	f7ff ffb2 	bl	8010aac <__hexdig_fun>
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	d062      	beq.n	8010c12 <__gethex+0x13a>
 8010b4c:	4633      	mov	r3, r6
 8010b4e:	7818      	ldrb	r0, [r3, #0]
 8010b50:	2830      	cmp	r0, #48	; 0x30
 8010b52:	461f      	mov	r7, r3
 8010b54:	f103 0301 	add.w	r3, r3, #1
 8010b58:	d0f9      	beq.n	8010b4e <__gethex+0x76>
 8010b5a:	f7ff ffa7 	bl	8010aac <__hexdig_fun>
 8010b5e:	2301      	movs	r3, #1
 8010b60:	fab0 f480 	clz	r4, r0
 8010b64:	0964      	lsrs	r4, r4, #5
 8010b66:	4635      	mov	r5, r6
 8010b68:	9300      	str	r3, [sp, #0]
 8010b6a:	463a      	mov	r2, r7
 8010b6c:	4616      	mov	r6, r2
 8010b6e:	3201      	adds	r2, #1
 8010b70:	7830      	ldrb	r0, [r6, #0]
 8010b72:	f7ff ff9b 	bl	8010aac <__hexdig_fun>
 8010b76:	2800      	cmp	r0, #0
 8010b78:	d1f8      	bne.n	8010b6c <__gethex+0x94>
 8010b7a:	9901      	ldr	r1, [sp, #4]
 8010b7c:	4652      	mov	r2, sl
 8010b7e:	4630      	mov	r0, r6
 8010b80:	f001 fb56 	bl	8012230 <strncmp>
 8010b84:	b980      	cbnz	r0, 8010ba8 <__gethex+0xd0>
 8010b86:	b94d      	cbnz	r5, 8010b9c <__gethex+0xc4>
 8010b88:	eb06 050a 	add.w	r5, r6, sl
 8010b8c:	462a      	mov	r2, r5
 8010b8e:	4616      	mov	r6, r2
 8010b90:	3201      	adds	r2, #1
 8010b92:	7830      	ldrb	r0, [r6, #0]
 8010b94:	f7ff ff8a 	bl	8010aac <__hexdig_fun>
 8010b98:	2800      	cmp	r0, #0
 8010b9a:	d1f8      	bne.n	8010b8e <__gethex+0xb6>
 8010b9c:	1bad      	subs	r5, r5, r6
 8010b9e:	00ad      	lsls	r5, r5, #2
 8010ba0:	e004      	b.n	8010bac <__gethex+0xd4>
 8010ba2:	2400      	movs	r4, #0
 8010ba4:	4625      	mov	r5, r4
 8010ba6:	e7e0      	b.n	8010b6a <__gethex+0x92>
 8010ba8:	2d00      	cmp	r5, #0
 8010baa:	d1f7      	bne.n	8010b9c <__gethex+0xc4>
 8010bac:	7833      	ldrb	r3, [r6, #0]
 8010bae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010bb2:	2b50      	cmp	r3, #80	; 0x50
 8010bb4:	d13b      	bne.n	8010c2e <__gethex+0x156>
 8010bb6:	7873      	ldrb	r3, [r6, #1]
 8010bb8:	2b2b      	cmp	r3, #43	; 0x2b
 8010bba:	d02c      	beq.n	8010c16 <__gethex+0x13e>
 8010bbc:	2b2d      	cmp	r3, #45	; 0x2d
 8010bbe:	d02e      	beq.n	8010c1e <__gethex+0x146>
 8010bc0:	1c71      	adds	r1, r6, #1
 8010bc2:	f04f 0900 	mov.w	r9, #0
 8010bc6:	7808      	ldrb	r0, [r1, #0]
 8010bc8:	f7ff ff70 	bl	8010aac <__hexdig_fun>
 8010bcc:	1e43      	subs	r3, r0, #1
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	2b18      	cmp	r3, #24
 8010bd2:	d82c      	bhi.n	8010c2e <__gethex+0x156>
 8010bd4:	f1a0 0210 	sub.w	r2, r0, #16
 8010bd8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010bdc:	f7ff ff66 	bl	8010aac <__hexdig_fun>
 8010be0:	1e43      	subs	r3, r0, #1
 8010be2:	b2db      	uxtb	r3, r3
 8010be4:	2b18      	cmp	r3, #24
 8010be6:	d91d      	bls.n	8010c24 <__gethex+0x14c>
 8010be8:	f1b9 0f00 	cmp.w	r9, #0
 8010bec:	d000      	beq.n	8010bf0 <__gethex+0x118>
 8010bee:	4252      	negs	r2, r2
 8010bf0:	4415      	add	r5, r2
 8010bf2:	f8cb 1000 	str.w	r1, [fp]
 8010bf6:	b1e4      	cbz	r4, 8010c32 <__gethex+0x15a>
 8010bf8:	9b00      	ldr	r3, [sp, #0]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	bf14      	ite	ne
 8010bfe:	2700      	movne	r7, #0
 8010c00:	2706      	moveq	r7, #6
 8010c02:	4638      	mov	r0, r7
 8010c04:	b009      	add	sp, #36	; 0x24
 8010c06:	ecbd 8b02 	vpop	{d8}
 8010c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c0e:	463e      	mov	r6, r7
 8010c10:	4625      	mov	r5, r4
 8010c12:	2401      	movs	r4, #1
 8010c14:	e7ca      	b.n	8010bac <__gethex+0xd4>
 8010c16:	f04f 0900 	mov.w	r9, #0
 8010c1a:	1cb1      	adds	r1, r6, #2
 8010c1c:	e7d3      	b.n	8010bc6 <__gethex+0xee>
 8010c1e:	f04f 0901 	mov.w	r9, #1
 8010c22:	e7fa      	b.n	8010c1a <__gethex+0x142>
 8010c24:	230a      	movs	r3, #10
 8010c26:	fb03 0202 	mla	r2, r3, r2, r0
 8010c2a:	3a10      	subs	r2, #16
 8010c2c:	e7d4      	b.n	8010bd8 <__gethex+0x100>
 8010c2e:	4631      	mov	r1, r6
 8010c30:	e7df      	b.n	8010bf2 <__gethex+0x11a>
 8010c32:	1bf3      	subs	r3, r6, r7
 8010c34:	3b01      	subs	r3, #1
 8010c36:	4621      	mov	r1, r4
 8010c38:	2b07      	cmp	r3, #7
 8010c3a:	dc0b      	bgt.n	8010c54 <__gethex+0x17c>
 8010c3c:	ee18 0a10 	vmov	r0, s16
 8010c40:	f000 fa70 	bl	8011124 <_Balloc>
 8010c44:	4604      	mov	r4, r0
 8010c46:	b940      	cbnz	r0, 8010c5a <__gethex+0x182>
 8010c48:	4b5d      	ldr	r3, [pc, #372]	; (8010dc0 <__gethex+0x2e8>)
 8010c4a:	4602      	mov	r2, r0
 8010c4c:	21de      	movs	r1, #222	; 0xde
 8010c4e:	485d      	ldr	r0, [pc, #372]	; (8010dc4 <__gethex+0x2ec>)
 8010c50:	f7ff f82e 	bl	800fcb0 <__assert_func>
 8010c54:	3101      	adds	r1, #1
 8010c56:	105b      	asrs	r3, r3, #1
 8010c58:	e7ee      	b.n	8010c38 <__gethex+0x160>
 8010c5a:	f100 0914 	add.w	r9, r0, #20
 8010c5e:	f04f 0b00 	mov.w	fp, #0
 8010c62:	f1ca 0301 	rsb	r3, sl, #1
 8010c66:	f8cd 9008 	str.w	r9, [sp, #8]
 8010c6a:	f8cd b000 	str.w	fp, [sp]
 8010c6e:	9306      	str	r3, [sp, #24]
 8010c70:	42b7      	cmp	r7, r6
 8010c72:	d340      	bcc.n	8010cf6 <__gethex+0x21e>
 8010c74:	9802      	ldr	r0, [sp, #8]
 8010c76:	9b00      	ldr	r3, [sp, #0]
 8010c78:	f840 3b04 	str.w	r3, [r0], #4
 8010c7c:	eba0 0009 	sub.w	r0, r0, r9
 8010c80:	1080      	asrs	r0, r0, #2
 8010c82:	0146      	lsls	r6, r0, #5
 8010c84:	6120      	str	r0, [r4, #16]
 8010c86:	4618      	mov	r0, r3
 8010c88:	f000 fb3e 	bl	8011308 <__hi0bits>
 8010c8c:	1a30      	subs	r0, r6, r0
 8010c8e:	f8d8 6000 	ldr.w	r6, [r8]
 8010c92:	42b0      	cmp	r0, r6
 8010c94:	dd63      	ble.n	8010d5e <__gethex+0x286>
 8010c96:	1b87      	subs	r7, r0, r6
 8010c98:	4639      	mov	r1, r7
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f000 fee2 	bl	8011a64 <__any_on>
 8010ca0:	4682      	mov	sl, r0
 8010ca2:	b1a8      	cbz	r0, 8010cd0 <__gethex+0x1f8>
 8010ca4:	1e7b      	subs	r3, r7, #1
 8010ca6:	1159      	asrs	r1, r3, #5
 8010ca8:	f003 021f 	and.w	r2, r3, #31
 8010cac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010cb0:	f04f 0a01 	mov.w	sl, #1
 8010cb4:	fa0a f202 	lsl.w	r2, sl, r2
 8010cb8:	420a      	tst	r2, r1
 8010cba:	d009      	beq.n	8010cd0 <__gethex+0x1f8>
 8010cbc:	4553      	cmp	r3, sl
 8010cbe:	dd05      	ble.n	8010ccc <__gethex+0x1f4>
 8010cc0:	1eb9      	subs	r1, r7, #2
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	f000 fece 	bl	8011a64 <__any_on>
 8010cc8:	2800      	cmp	r0, #0
 8010cca:	d145      	bne.n	8010d58 <__gethex+0x280>
 8010ccc:	f04f 0a02 	mov.w	sl, #2
 8010cd0:	4639      	mov	r1, r7
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	f7ff fe98 	bl	8010a08 <rshift>
 8010cd8:	443d      	add	r5, r7
 8010cda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010cde:	42ab      	cmp	r3, r5
 8010ce0:	da4c      	bge.n	8010d7c <__gethex+0x2a4>
 8010ce2:	ee18 0a10 	vmov	r0, s16
 8010ce6:	4621      	mov	r1, r4
 8010ce8:	f000 fa5c 	bl	80111a4 <_Bfree>
 8010cec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010cee:	2300      	movs	r3, #0
 8010cf0:	6013      	str	r3, [r2, #0]
 8010cf2:	27a3      	movs	r7, #163	; 0xa3
 8010cf4:	e785      	b.n	8010c02 <__gethex+0x12a>
 8010cf6:	1e73      	subs	r3, r6, #1
 8010cf8:	9a05      	ldr	r2, [sp, #20]
 8010cfa:	9303      	str	r3, [sp, #12]
 8010cfc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010d00:	4293      	cmp	r3, r2
 8010d02:	d019      	beq.n	8010d38 <__gethex+0x260>
 8010d04:	f1bb 0f20 	cmp.w	fp, #32
 8010d08:	d107      	bne.n	8010d1a <__gethex+0x242>
 8010d0a:	9b02      	ldr	r3, [sp, #8]
 8010d0c:	9a00      	ldr	r2, [sp, #0]
 8010d0e:	f843 2b04 	str.w	r2, [r3], #4
 8010d12:	9302      	str	r3, [sp, #8]
 8010d14:	2300      	movs	r3, #0
 8010d16:	9300      	str	r3, [sp, #0]
 8010d18:	469b      	mov	fp, r3
 8010d1a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010d1e:	f7ff fec5 	bl	8010aac <__hexdig_fun>
 8010d22:	9b00      	ldr	r3, [sp, #0]
 8010d24:	f000 000f 	and.w	r0, r0, #15
 8010d28:	fa00 f00b 	lsl.w	r0, r0, fp
 8010d2c:	4303      	orrs	r3, r0
 8010d2e:	9300      	str	r3, [sp, #0]
 8010d30:	f10b 0b04 	add.w	fp, fp, #4
 8010d34:	9b03      	ldr	r3, [sp, #12]
 8010d36:	e00d      	b.n	8010d54 <__gethex+0x27c>
 8010d38:	9b03      	ldr	r3, [sp, #12]
 8010d3a:	9a06      	ldr	r2, [sp, #24]
 8010d3c:	4413      	add	r3, r2
 8010d3e:	42bb      	cmp	r3, r7
 8010d40:	d3e0      	bcc.n	8010d04 <__gethex+0x22c>
 8010d42:	4618      	mov	r0, r3
 8010d44:	9901      	ldr	r1, [sp, #4]
 8010d46:	9307      	str	r3, [sp, #28]
 8010d48:	4652      	mov	r2, sl
 8010d4a:	f001 fa71 	bl	8012230 <strncmp>
 8010d4e:	9b07      	ldr	r3, [sp, #28]
 8010d50:	2800      	cmp	r0, #0
 8010d52:	d1d7      	bne.n	8010d04 <__gethex+0x22c>
 8010d54:	461e      	mov	r6, r3
 8010d56:	e78b      	b.n	8010c70 <__gethex+0x198>
 8010d58:	f04f 0a03 	mov.w	sl, #3
 8010d5c:	e7b8      	b.n	8010cd0 <__gethex+0x1f8>
 8010d5e:	da0a      	bge.n	8010d76 <__gethex+0x29e>
 8010d60:	1a37      	subs	r7, r6, r0
 8010d62:	4621      	mov	r1, r4
 8010d64:	ee18 0a10 	vmov	r0, s16
 8010d68:	463a      	mov	r2, r7
 8010d6a:	f000 fc37 	bl	80115dc <__lshift>
 8010d6e:	1bed      	subs	r5, r5, r7
 8010d70:	4604      	mov	r4, r0
 8010d72:	f100 0914 	add.w	r9, r0, #20
 8010d76:	f04f 0a00 	mov.w	sl, #0
 8010d7a:	e7ae      	b.n	8010cda <__gethex+0x202>
 8010d7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010d80:	42a8      	cmp	r0, r5
 8010d82:	dd72      	ble.n	8010e6a <__gethex+0x392>
 8010d84:	1b45      	subs	r5, r0, r5
 8010d86:	42ae      	cmp	r6, r5
 8010d88:	dc36      	bgt.n	8010df8 <__gethex+0x320>
 8010d8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d8e:	2b02      	cmp	r3, #2
 8010d90:	d02a      	beq.n	8010de8 <__gethex+0x310>
 8010d92:	2b03      	cmp	r3, #3
 8010d94:	d02c      	beq.n	8010df0 <__gethex+0x318>
 8010d96:	2b01      	cmp	r3, #1
 8010d98:	d11c      	bne.n	8010dd4 <__gethex+0x2fc>
 8010d9a:	42ae      	cmp	r6, r5
 8010d9c:	d11a      	bne.n	8010dd4 <__gethex+0x2fc>
 8010d9e:	2e01      	cmp	r6, #1
 8010da0:	d112      	bne.n	8010dc8 <__gethex+0x2f0>
 8010da2:	9a04      	ldr	r2, [sp, #16]
 8010da4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010da8:	6013      	str	r3, [r2, #0]
 8010daa:	2301      	movs	r3, #1
 8010dac:	6123      	str	r3, [r4, #16]
 8010dae:	f8c9 3000 	str.w	r3, [r9]
 8010db2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010db4:	2762      	movs	r7, #98	; 0x62
 8010db6:	601c      	str	r4, [r3, #0]
 8010db8:	e723      	b.n	8010c02 <__gethex+0x12a>
 8010dba:	bf00      	nop
 8010dbc:	08013590 	.word	0x08013590
 8010dc0:	08013519 	.word	0x08013519
 8010dc4:	0801352a 	.word	0x0801352a
 8010dc8:	1e71      	subs	r1, r6, #1
 8010dca:	4620      	mov	r0, r4
 8010dcc:	f000 fe4a 	bl	8011a64 <__any_on>
 8010dd0:	2800      	cmp	r0, #0
 8010dd2:	d1e6      	bne.n	8010da2 <__gethex+0x2ca>
 8010dd4:	ee18 0a10 	vmov	r0, s16
 8010dd8:	4621      	mov	r1, r4
 8010dda:	f000 f9e3 	bl	80111a4 <_Bfree>
 8010dde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010de0:	2300      	movs	r3, #0
 8010de2:	6013      	str	r3, [r2, #0]
 8010de4:	2750      	movs	r7, #80	; 0x50
 8010de6:	e70c      	b.n	8010c02 <__gethex+0x12a>
 8010de8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d1f2      	bne.n	8010dd4 <__gethex+0x2fc>
 8010dee:	e7d8      	b.n	8010da2 <__gethex+0x2ca>
 8010df0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d1d5      	bne.n	8010da2 <__gethex+0x2ca>
 8010df6:	e7ed      	b.n	8010dd4 <__gethex+0x2fc>
 8010df8:	1e6f      	subs	r7, r5, #1
 8010dfa:	f1ba 0f00 	cmp.w	sl, #0
 8010dfe:	d131      	bne.n	8010e64 <__gethex+0x38c>
 8010e00:	b127      	cbz	r7, 8010e0c <__gethex+0x334>
 8010e02:	4639      	mov	r1, r7
 8010e04:	4620      	mov	r0, r4
 8010e06:	f000 fe2d 	bl	8011a64 <__any_on>
 8010e0a:	4682      	mov	sl, r0
 8010e0c:	117b      	asrs	r3, r7, #5
 8010e0e:	2101      	movs	r1, #1
 8010e10:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010e14:	f007 071f 	and.w	r7, r7, #31
 8010e18:	fa01 f707 	lsl.w	r7, r1, r7
 8010e1c:	421f      	tst	r7, r3
 8010e1e:	4629      	mov	r1, r5
 8010e20:	4620      	mov	r0, r4
 8010e22:	bf18      	it	ne
 8010e24:	f04a 0a02 	orrne.w	sl, sl, #2
 8010e28:	1b76      	subs	r6, r6, r5
 8010e2a:	f7ff fded 	bl	8010a08 <rshift>
 8010e2e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010e32:	2702      	movs	r7, #2
 8010e34:	f1ba 0f00 	cmp.w	sl, #0
 8010e38:	d048      	beq.n	8010ecc <__gethex+0x3f4>
 8010e3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e3e:	2b02      	cmp	r3, #2
 8010e40:	d015      	beq.n	8010e6e <__gethex+0x396>
 8010e42:	2b03      	cmp	r3, #3
 8010e44:	d017      	beq.n	8010e76 <__gethex+0x39e>
 8010e46:	2b01      	cmp	r3, #1
 8010e48:	d109      	bne.n	8010e5e <__gethex+0x386>
 8010e4a:	f01a 0f02 	tst.w	sl, #2
 8010e4e:	d006      	beq.n	8010e5e <__gethex+0x386>
 8010e50:	f8d9 0000 	ldr.w	r0, [r9]
 8010e54:	ea4a 0a00 	orr.w	sl, sl, r0
 8010e58:	f01a 0f01 	tst.w	sl, #1
 8010e5c:	d10e      	bne.n	8010e7c <__gethex+0x3a4>
 8010e5e:	f047 0710 	orr.w	r7, r7, #16
 8010e62:	e033      	b.n	8010ecc <__gethex+0x3f4>
 8010e64:	f04f 0a01 	mov.w	sl, #1
 8010e68:	e7d0      	b.n	8010e0c <__gethex+0x334>
 8010e6a:	2701      	movs	r7, #1
 8010e6c:	e7e2      	b.n	8010e34 <__gethex+0x35c>
 8010e6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e70:	f1c3 0301 	rsb	r3, r3, #1
 8010e74:	9315      	str	r3, [sp, #84]	; 0x54
 8010e76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d0f0      	beq.n	8010e5e <__gethex+0x386>
 8010e7c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010e80:	f104 0314 	add.w	r3, r4, #20
 8010e84:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010e88:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010e8c:	f04f 0c00 	mov.w	ip, #0
 8010e90:	4618      	mov	r0, r3
 8010e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e96:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010e9a:	d01c      	beq.n	8010ed6 <__gethex+0x3fe>
 8010e9c:	3201      	adds	r2, #1
 8010e9e:	6002      	str	r2, [r0, #0]
 8010ea0:	2f02      	cmp	r7, #2
 8010ea2:	f104 0314 	add.w	r3, r4, #20
 8010ea6:	d13f      	bne.n	8010f28 <__gethex+0x450>
 8010ea8:	f8d8 2000 	ldr.w	r2, [r8]
 8010eac:	3a01      	subs	r2, #1
 8010eae:	42b2      	cmp	r2, r6
 8010eb0:	d10a      	bne.n	8010ec8 <__gethex+0x3f0>
 8010eb2:	1171      	asrs	r1, r6, #5
 8010eb4:	2201      	movs	r2, #1
 8010eb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010eba:	f006 061f 	and.w	r6, r6, #31
 8010ebe:	fa02 f606 	lsl.w	r6, r2, r6
 8010ec2:	421e      	tst	r6, r3
 8010ec4:	bf18      	it	ne
 8010ec6:	4617      	movne	r7, r2
 8010ec8:	f047 0720 	orr.w	r7, r7, #32
 8010ecc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ece:	601c      	str	r4, [r3, #0]
 8010ed0:	9b04      	ldr	r3, [sp, #16]
 8010ed2:	601d      	str	r5, [r3, #0]
 8010ed4:	e695      	b.n	8010c02 <__gethex+0x12a>
 8010ed6:	4299      	cmp	r1, r3
 8010ed8:	f843 cc04 	str.w	ip, [r3, #-4]
 8010edc:	d8d8      	bhi.n	8010e90 <__gethex+0x3b8>
 8010ede:	68a3      	ldr	r3, [r4, #8]
 8010ee0:	459b      	cmp	fp, r3
 8010ee2:	db19      	blt.n	8010f18 <__gethex+0x440>
 8010ee4:	6861      	ldr	r1, [r4, #4]
 8010ee6:	ee18 0a10 	vmov	r0, s16
 8010eea:	3101      	adds	r1, #1
 8010eec:	f000 f91a 	bl	8011124 <_Balloc>
 8010ef0:	4681      	mov	r9, r0
 8010ef2:	b918      	cbnz	r0, 8010efc <__gethex+0x424>
 8010ef4:	4b1a      	ldr	r3, [pc, #104]	; (8010f60 <__gethex+0x488>)
 8010ef6:	4602      	mov	r2, r0
 8010ef8:	2184      	movs	r1, #132	; 0x84
 8010efa:	e6a8      	b.n	8010c4e <__gethex+0x176>
 8010efc:	6922      	ldr	r2, [r4, #16]
 8010efe:	3202      	adds	r2, #2
 8010f00:	f104 010c 	add.w	r1, r4, #12
 8010f04:	0092      	lsls	r2, r2, #2
 8010f06:	300c      	adds	r0, #12
 8010f08:	f7fd f8ec 	bl	800e0e4 <memcpy>
 8010f0c:	4621      	mov	r1, r4
 8010f0e:	ee18 0a10 	vmov	r0, s16
 8010f12:	f000 f947 	bl	80111a4 <_Bfree>
 8010f16:	464c      	mov	r4, r9
 8010f18:	6923      	ldr	r3, [r4, #16]
 8010f1a:	1c5a      	adds	r2, r3, #1
 8010f1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010f20:	6122      	str	r2, [r4, #16]
 8010f22:	2201      	movs	r2, #1
 8010f24:	615a      	str	r2, [r3, #20]
 8010f26:	e7bb      	b.n	8010ea0 <__gethex+0x3c8>
 8010f28:	6922      	ldr	r2, [r4, #16]
 8010f2a:	455a      	cmp	r2, fp
 8010f2c:	dd0b      	ble.n	8010f46 <__gethex+0x46e>
 8010f2e:	2101      	movs	r1, #1
 8010f30:	4620      	mov	r0, r4
 8010f32:	f7ff fd69 	bl	8010a08 <rshift>
 8010f36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f3a:	3501      	adds	r5, #1
 8010f3c:	42ab      	cmp	r3, r5
 8010f3e:	f6ff aed0 	blt.w	8010ce2 <__gethex+0x20a>
 8010f42:	2701      	movs	r7, #1
 8010f44:	e7c0      	b.n	8010ec8 <__gethex+0x3f0>
 8010f46:	f016 061f 	ands.w	r6, r6, #31
 8010f4a:	d0fa      	beq.n	8010f42 <__gethex+0x46a>
 8010f4c:	4453      	add	r3, sl
 8010f4e:	f1c6 0620 	rsb	r6, r6, #32
 8010f52:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010f56:	f000 f9d7 	bl	8011308 <__hi0bits>
 8010f5a:	42b0      	cmp	r0, r6
 8010f5c:	dbe7      	blt.n	8010f2e <__gethex+0x456>
 8010f5e:	e7f0      	b.n	8010f42 <__gethex+0x46a>
 8010f60:	08013519 	.word	0x08013519

08010f64 <L_shift>:
 8010f64:	f1c2 0208 	rsb	r2, r2, #8
 8010f68:	0092      	lsls	r2, r2, #2
 8010f6a:	b570      	push	{r4, r5, r6, lr}
 8010f6c:	f1c2 0620 	rsb	r6, r2, #32
 8010f70:	6843      	ldr	r3, [r0, #4]
 8010f72:	6804      	ldr	r4, [r0, #0]
 8010f74:	fa03 f506 	lsl.w	r5, r3, r6
 8010f78:	432c      	orrs	r4, r5
 8010f7a:	40d3      	lsrs	r3, r2
 8010f7c:	6004      	str	r4, [r0, #0]
 8010f7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010f82:	4288      	cmp	r0, r1
 8010f84:	d3f4      	bcc.n	8010f70 <L_shift+0xc>
 8010f86:	bd70      	pop	{r4, r5, r6, pc}

08010f88 <__match>:
 8010f88:	b530      	push	{r4, r5, lr}
 8010f8a:	6803      	ldr	r3, [r0, #0]
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f92:	b914      	cbnz	r4, 8010f9a <__match+0x12>
 8010f94:	6003      	str	r3, [r0, #0]
 8010f96:	2001      	movs	r0, #1
 8010f98:	bd30      	pop	{r4, r5, pc}
 8010f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010fa2:	2d19      	cmp	r5, #25
 8010fa4:	bf98      	it	ls
 8010fa6:	3220      	addls	r2, #32
 8010fa8:	42a2      	cmp	r2, r4
 8010faa:	d0f0      	beq.n	8010f8e <__match+0x6>
 8010fac:	2000      	movs	r0, #0
 8010fae:	e7f3      	b.n	8010f98 <__match+0x10>

08010fb0 <__hexnan>:
 8010fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb4:	680b      	ldr	r3, [r1, #0]
 8010fb6:	115e      	asrs	r6, r3, #5
 8010fb8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010fbc:	f013 031f 	ands.w	r3, r3, #31
 8010fc0:	b087      	sub	sp, #28
 8010fc2:	bf18      	it	ne
 8010fc4:	3604      	addne	r6, #4
 8010fc6:	2500      	movs	r5, #0
 8010fc8:	1f37      	subs	r7, r6, #4
 8010fca:	4690      	mov	r8, r2
 8010fcc:	6802      	ldr	r2, [r0, #0]
 8010fce:	9301      	str	r3, [sp, #4]
 8010fd0:	4682      	mov	sl, r0
 8010fd2:	f846 5c04 	str.w	r5, [r6, #-4]
 8010fd6:	46b9      	mov	r9, r7
 8010fd8:	463c      	mov	r4, r7
 8010fda:	9502      	str	r5, [sp, #8]
 8010fdc:	46ab      	mov	fp, r5
 8010fde:	7851      	ldrb	r1, [r2, #1]
 8010fe0:	1c53      	adds	r3, r2, #1
 8010fe2:	9303      	str	r3, [sp, #12]
 8010fe4:	b341      	cbz	r1, 8011038 <__hexnan+0x88>
 8010fe6:	4608      	mov	r0, r1
 8010fe8:	9205      	str	r2, [sp, #20]
 8010fea:	9104      	str	r1, [sp, #16]
 8010fec:	f7ff fd5e 	bl	8010aac <__hexdig_fun>
 8010ff0:	2800      	cmp	r0, #0
 8010ff2:	d14f      	bne.n	8011094 <__hexnan+0xe4>
 8010ff4:	9904      	ldr	r1, [sp, #16]
 8010ff6:	9a05      	ldr	r2, [sp, #20]
 8010ff8:	2920      	cmp	r1, #32
 8010ffa:	d818      	bhi.n	801102e <__hexnan+0x7e>
 8010ffc:	9b02      	ldr	r3, [sp, #8]
 8010ffe:	459b      	cmp	fp, r3
 8011000:	dd13      	ble.n	801102a <__hexnan+0x7a>
 8011002:	454c      	cmp	r4, r9
 8011004:	d206      	bcs.n	8011014 <__hexnan+0x64>
 8011006:	2d07      	cmp	r5, #7
 8011008:	dc04      	bgt.n	8011014 <__hexnan+0x64>
 801100a:	462a      	mov	r2, r5
 801100c:	4649      	mov	r1, r9
 801100e:	4620      	mov	r0, r4
 8011010:	f7ff ffa8 	bl	8010f64 <L_shift>
 8011014:	4544      	cmp	r4, r8
 8011016:	d950      	bls.n	80110ba <__hexnan+0x10a>
 8011018:	2300      	movs	r3, #0
 801101a:	f1a4 0904 	sub.w	r9, r4, #4
 801101e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011022:	f8cd b008 	str.w	fp, [sp, #8]
 8011026:	464c      	mov	r4, r9
 8011028:	461d      	mov	r5, r3
 801102a:	9a03      	ldr	r2, [sp, #12]
 801102c:	e7d7      	b.n	8010fde <__hexnan+0x2e>
 801102e:	2929      	cmp	r1, #41	; 0x29
 8011030:	d156      	bne.n	80110e0 <__hexnan+0x130>
 8011032:	3202      	adds	r2, #2
 8011034:	f8ca 2000 	str.w	r2, [sl]
 8011038:	f1bb 0f00 	cmp.w	fp, #0
 801103c:	d050      	beq.n	80110e0 <__hexnan+0x130>
 801103e:	454c      	cmp	r4, r9
 8011040:	d206      	bcs.n	8011050 <__hexnan+0xa0>
 8011042:	2d07      	cmp	r5, #7
 8011044:	dc04      	bgt.n	8011050 <__hexnan+0xa0>
 8011046:	462a      	mov	r2, r5
 8011048:	4649      	mov	r1, r9
 801104a:	4620      	mov	r0, r4
 801104c:	f7ff ff8a 	bl	8010f64 <L_shift>
 8011050:	4544      	cmp	r4, r8
 8011052:	d934      	bls.n	80110be <__hexnan+0x10e>
 8011054:	f1a8 0204 	sub.w	r2, r8, #4
 8011058:	4623      	mov	r3, r4
 801105a:	f853 1b04 	ldr.w	r1, [r3], #4
 801105e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011062:	429f      	cmp	r7, r3
 8011064:	d2f9      	bcs.n	801105a <__hexnan+0xaa>
 8011066:	1b3b      	subs	r3, r7, r4
 8011068:	f023 0303 	bic.w	r3, r3, #3
 801106c:	3304      	adds	r3, #4
 801106e:	3401      	adds	r4, #1
 8011070:	3e03      	subs	r6, #3
 8011072:	42b4      	cmp	r4, r6
 8011074:	bf88      	it	hi
 8011076:	2304      	movhi	r3, #4
 8011078:	4443      	add	r3, r8
 801107a:	2200      	movs	r2, #0
 801107c:	f843 2b04 	str.w	r2, [r3], #4
 8011080:	429f      	cmp	r7, r3
 8011082:	d2fb      	bcs.n	801107c <__hexnan+0xcc>
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	b91b      	cbnz	r3, 8011090 <__hexnan+0xe0>
 8011088:	4547      	cmp	r7, r8
 801108a:	d127      	bne.n	80110dc <__hexnan+0x12c>
 801108c:	2301      	movs	r3, #1
 801108e:	603b      	str	r3, [r7, #0]
 8011090:	2005      	movs	r0, #5
 8011092:	e026      	b.n	80110e2 <__hexnan+0x132>
 8011094:	3501      	adds	r5, #1
 8011096:	2d08      	cmp	r5, #8
 8011098:	f10b 0b01 	add.w	fp, fp, #1
 801109c:	dd06      	ble.n	80110ac <__hexnan+0xfc>
 801109e:	4544      	cmp	r4, r8
 80110a0:	d9c3      	bls.n	801102a <__hexnan+0x7a>
 80110a2:	2300      	movs	r3, #0
 80110a4:	f844 3c04 	str.w	r3, [r4, #-4]
 80110a8:	2501      	movs	r5, #1
 80110aa:	3c04      	subs	r4, #4
 80110ac:	6822      	ldr	r2, [r4, #0]
 80110ae:	f000 000f 	and.w	r0, r0, #15
 80110b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80110b6:	6022      	str	r2, [r4, #0]
 80110b8:	e7b7      	b.n	801102a <__hexnan+0x7a>
 80110ba:	2508      	movs	r5, #8
 80110bc:	e7b5      	b.n	801102a <__hexnan+0x7a>
 80110be:	9b01      	ldr	r3, [sp, #4]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d0df      	beq.n	8011084 <__hexnan+0xd4>
 80110c4:	f04f 32ff 	mov.w	r2, #4294967295
 80110c8:	f1c3 0320 	rsb	r3, r3, #32
 80110cc:	fa22 f303 	lsr.w	r3, r2, r3
 80110d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80110d4:	401a      	ands	r2, r3
 80110d6:	f846 2c04 	str.w	r2, [r6, #-4]
 80110da:	e7d3      	b.n	8011084 <__hexnan+0xd4>
 80110dc:	3f04      	subs	r7, #4
 80110de:	e7d1      	b.n	8011084 <__hexnan+0xd4>
 80110e0:	2004      	movs	r0, #4
 80110e2:	b007      	add	sp, #28
 80110e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110e8 <_localeconv_r>:
 80110e8:	4800      	ldr	r0, [pc, #0]	; (80110ec <_localeconv_r+0x4>)
 80110ea:	4770      	bx	lr
 80110ec:	2000017c 	.word	0x2000017c

080110f0 <malloc>:
 80110f0:	4b02      	ldr	r3, [pc, #8]	; (80110fc <malloc+0xc>)
 80110f2:	4601      	mov	r1, r0
 80110f4:	6818      	ldr	r0, [r3, #0]
 80110f6:	f000 bd59 	b.w	8011bac <_malloc_r>
 80110fa:	bf00      	nop
 80110fc:	20000024 	.word	0x20000024

08011100 <__ascii_mbtowc>:
 8011100:	b082      	sub	sp, #8
 8011102:	b901      	cbnz	r1, 8011106 <__ascii_mbtowc+0x6>
 8011104:	a901      	add	r1, sp, #4
 8011106:	b142      	cbz	r2, 801111a <__ascii_mbtowc+0x1a>
 8011108:	b14b      	cbz	r3, 801111e <__ascii_mbtowc+0x1e>
 801110a:	7813      	ldrb	r3, [r2, #0]
 801110c:	600b      	str	r3, [r1, #0]
 801110e:	7812      	ldrb	r2, [r2, #0]
 8011110:	1e10      	subs	r0, r2, #0
 8011112:	bf18      	it	ne
 8011114:	2001      	movne	r0, #1
 8011116:	b002      	add	sp, #8
 8011118:	4770      	bx	lr
 801111a:	4610      	mov	r0, r2
 801111c:	e7fb      	b.n	8011116 <__ascii_mbtowc+0x16>
 801111e:	f06f 0001 	mvn.w	r0, #1
 8011122:	e7f8      	b.n	8011116 <__ascii_mbtowc+0x16>

08011124 <_Balloc>:
 8011124:	b570      	push	{r4, r5, r6, lr}
 8011126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011128:	4604      	mov	r4, r0
 801112a:	460d      	mov	r5, r1
 801112c:	b976      	cbnz	r6, 801114c <_Balloc+0x28>
 801112e:	2010      	movs	r0, #16
 8011130:	f7ff ffde 	bl	80110f0 <malloc>
 8011134:	4602      	mov	r2, r0
 8011136:	6260      	str	r0, [r4, #36]	; 0x24
 8011138:	b920      	cbnz	r0, 8011144 <_Balloc+0x20>
 801113a:	4b18      	ldr	r3, [pc, #96]	; (801119c <_Balloc+0x78>)
 801113c:	4818      	ldr	r0, [pc, #96]	; (80111a0 <_Balloc+0x7c>)
 801113e:	2166      	movs	r1, #102	; 0x66
 8011140:	f7fe fdb6 	bl	800fcb0 <__assert_func>
 8011144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011148:	6006      	str	r6, [r0, #0]
 801114a:	60c6      	str	r6, [r0, #12]
 801114c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801114e:	68f3      	ldr	r3, [r6, #12]
 8011150:	b183      	cbz	r3, 8011174 <_Balloc+0x50>
 8011152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011154:	68db      	ldr	r3, [r3, #12]
 8011156:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801115a:	b9b8      	cbnz	r0, 801118c <_Balloc+0x68>
 801115c:	2101      	movs	r1, #1
 801115e:	fa01 f605 	lsl.w	r6, r1, r5
 8011162:	1d72      	adds	r2, r6, #5
 8011164:	0092      	lsls	r2, r2, #2
 8011166:	4620      	mov	r0, r4
 8011168:	f000 fc9d 	bl	8011aa6 <_calloc_r>
 801116c:	b160      	cbz	r0, 8011188 <_Balloc+0x64>
 801116e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011172:	e00e      	b.n	8011192 <_Balloc+0x6e>
 8011174:	2221      	movs	r2, #33	; 0x21
 8011176:	2104      	movs	r1, #4
 8011178:	4620      	mov	r0, r4
 801117a:	f000 fc94 	bl	8011aa6 <_calloc_r>
 801117e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011180:	60f0      	str	r0, [r6, #12]
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d1e4      	bne.n	8011152 <_Balloc+0x2e>
 8011188:	2000      	movs	r0, #0
 801118a:	bd70      	pop	{r4, r5, r6, pc}
 801118c:	6802      	ldr	r2, [r0, #0]
 801118e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011192:	2300      	movs	r3, #0
 8011194:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011198:	e7f7      	b.n	801118a <_Balloc+0x66>
 801119a:	bf00      	nop
 801119c:	08013300 	.word	0x08013300
 80111a0:	080135a4 	.word	0x080135a4

080111a4 <_Bfree>:
 80111a4:	b570      	push	{r4, r5, r6, lr}
 80111a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80111a8:	4605      	mov	r5, r0
 80111aa:	460c      	mov	r4, r1
 80111ac:	b976      	cbnz	r6, 80111cc <_Bfree+0x28>
 80111ae:	2010      	movs	r0, #16
 80111b0:	f7ff ff9e 	bl	80110f0 <malloc>
 80111b4:	4602      	mov	r2, r0
 80111b6:	6268      	str	r0, [r5, #36]	; 0x24
 80111b8:	b920      	cbnz	r0, 80111c4 <_Bfree+0x20>
 80111ba:	4b09      	ldr	r3, [pc, #36]	; (80111e0 <_Bfree+0x3c>)
 80111bc:	4809      	ldr	r0, [pc, #36]	; (80111e4 <_Bfree+0x40>)
 80111be:	218a      	movs	r1, #138	; 0x8a
 80111c0:	f7fe fd76 	bl	800fcb0 <__assert_func>
 80111c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111c8:	6006      	str	r6, [r0, #0]
 80111ca:	60c6      	str	r6, [r0, #12]
 80111cc:	b13c      	cbz	r4, 80111de <_Bfree+0x3a>
 80111ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80111d0:	6862      	ldr	r2, [r4, #4]
 80111d2:	68db      	ldr	r3, [r3, #12]
 80111d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80111d8:	6021      	str	r1, [r4, #0]
 80111da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80111de:	bd70      	pop	{r4, r5, r6, pc}
 80111e0:	08013300 	.word	0x08013300
 80111e4:	080135a4 	.word	0x080135a4

080111e8 <__multadd>:
 80111e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111ec:	690d      	ldr	r5, [r1, #16]
 80111ee:	4607      	mov	r7, r0
 80111f0:	460c      	mov	r4, r1
 80111f2:	461e      	mov	r6, r3
 80111f4:	f101 0c14 	add.w	ip, r1, #20
 80111f8:	2000      	movs	r0, #0
 80111fa:	f8dc 3000 	ldr.w	r3, [ip]
 80111fe:	b299      	uxth	r1, r3
 8011200:	fb02 6101 	mla	r1, r2, r1, r6
 8011204:	0c1e      	lsrs	r6, r3, #16
 8011206:	0c0b      	lsrs	r3, r1, #16
 8011208:	fb02 3306 	mla	r3, r2, r6, r3
 801120c:	b289      	uxth	r1, r1
 801120e:	3001      	adds	r0, #1
 8011210:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011214:	4285      	cmp	r5, r0
 8011216:	f84c 1b04 	str.w	r1, [ip], #4
 801121a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801121e:	dcec      	bgt.n	80111fa <__multadd+0x12>
 8011220:	b30e      	cbz	r6, 8011266 <__multadd+0x7e>
 8011222:	68a3      	ldr	r3, [r4, #8]
 8011224:	42ab      	cmp	r3, r5
 8011226:	dc19      	bgt.n	801125c <__multadd+0x74>
 8011228:	6861      	ldr	r1, [r4, #4]
 801122a:	4638      	mov	r0, r7
 801122c:	3101      	adds	r1, #1
 801122e:	f7ff ff79 	bl	8011124 <_Balloc>
 8011232:	4680      	mov	r8, r0
 8011234:	b928      	cbnz	r0, 8011242 <__multadd+0x5a>
 8011236:	4602      	mov	r2, r0
 8011238:	4b0c      	ldr	r3, [pc, #48]	; (801126c <__multadd+0x84>)
 801123a:	480d      	ldr	r0, [pc, #52]	; (8011270 <__multadd+0x88>)
 801123c:	21b5      	movs	r1, #181	; 0xb5
 801123e:	f7fe fd37 	bl	800fcb0 <__assert_func>
 8011242:	6922      	ldr	r2, [r4, #16]
 8011244:	3202      	adds	r2, #2
 8011246:	f104 010c 	add.w	r1, r4, #12
 801124a:	0092      	lsls	r2, r2, #2
 801124c:	300c      	adds	r0, #12
 801124e:	f7fc ff49 	bl	800e0e4 <memcpy>
 8011252:	4621      	mov	r1, r4
 8011254:	4638      	mov	r0, r7
 8011256:	f7ff ffa5 	bl	80111a4 <_Bfree>
 801125a:	4644      	mov	r4, r8
 801125c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011260:	3501      	adds	r5, #1
 8011262:	615e      	str	r6, [r3, #20]
 8011264:	6125      	str	r5, [r4, #16]
 8011266:	4620      	mov	r0, r4
 8011268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801126c:	08013519 	.word	0x08013519
 8011270:	080135a4 	.word	0x080135a4

08011274 <__s2b>:
 8011274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011278:	460c      	mov	r4, r1
 801127a:	4615      	mov	r5, r2
 801127c:	461f      	mov	r7, r3
 801127e:	2209      	movs	r2, #9
 8011280:	3308      	adds	r3, #8
 8011282:	4606      	mov	r6, r0
 8011284:	fb93 f3f2 	sdiv	r3, r3, r2
 8011288:	2100      	movs	r1, #0
 801128a:	2201      	movs	r2, #1
 801128c:	429a      	cmp	r2, r3
 801128e:	db09      	blt.n	80112a4 <__s2b+0x30>
 8011290:	4630      	mov	r0, r6
 8011292:	f7ff ff47 	bl	8011124 <_Balloc>
 8011296:	b940      	cbnz	r0, 80112aa <__s2b+0x36>
 8011298:	4602      	mov	r2, r0
 801129a:	4b19      	ldr	r3, [pc, #100]	; (8011300 <__s2b+0x8c>)
 801129c:	4819      	ldr	r0, [pc, #100]	; (8011304 <__s2b+0x90>)
 801129e:	21ce      	movs	r1, #206	; 0xce
 80112a0:	f7fe fd06 	bl	800fcb0 <__assert_func>
 80112a4:	0052      	lsls	r2, r2, #1
 80112a6:	3101      	adds	r1, #1
 80112a8:	e7f0      	b.n	801128c <__s2b+0x18>
 80112aa:	9b08      	ldr	r3, [sp, #32]
 80112ac:	6143      	str	r3, [r0, #20]
 80112ae:	2d09      	cmp	r5, #9
 80112b0:	f04f 0301 	mov.w	r3, #1
 80112b4:	6103      	str	r3, [r0, #16]
 80112b6:	dd16      	ble.n	80112e6 <__s2b+0x72>
 80112b8:	f104 0909 	add.w	r9, r4, #9
 80112bc:	46c8      	mov	r8, r9
 80112be:	442c      	add	r4, r5
 80112c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80112c4:	4601      	mov	r1, r0
 80112c6:	3b30      	subs	r3, #48	; 0x30
 80112c8:	220a      	movs	r2, #10
 80112ca:	4630      	mov	r0, r6
 80112cc:	f7ff ff8c 	bl	80111e8 <__multadd>
 80112d0:	45a0      	cmp	r8, r4
 80112d2:	d1f5      	bne.n	80112c0 <__s2b+0x4c>
 80112d4:	f1a5 0408 	sub.w	r4, r5, #8
 80112d8:	444c      	add	r4, r9
 80112da:	1b2d      	subs	r5, r5, r4
 80112dc:	1963      	adds	r3, r4, r5
 80112de:	42bb      	cmp	r3, r7
 80112e0:	db04      	blt.n	80112ec <__s2b+0x78>
 80112e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112e6:	340a      	adds	r4, #10
 80112e8:	2509      	movs	r5, #9
 80112ea:	e7f6      	b.n	80112da <__s2b+0x66>
 80112ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80112f0:	4601      	mov	r1, r0
 80112f2:	3b30      	subs	r3, #48	; 0x30
 80112f4:	220a      	movs	r2, #10
 80112f6:	4630      	mov	r0, r6
 80112f8:	f7ff ff76 	bl	80111e8 <__multadd>
 80112fc:	e7ee      	b.n	80112dc <__s2b+0x68>
 80112fe:	bf00      	nop
 8011300:	08013519 	.word	0x08013519
 8011304:	080135a4 	.word	0x080135a4

08011308 <__hi0bits>:
 8011308:	0c03      	lsrs	r3, r0, #16
 801130a:	041b      	lsls	r3, r3, #16
 801130c:	b9d3      	cbnz	r3, 8011344 <__hi0bits+0x3c>
 801130e:	0400      	lsls	r0, r0, #16
 8011310:	2310      	movs	r3, #16
 8011312:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011316:	bf04      	itt	eq
 8011318:	0200      	lsleq	r0, r0, #8
 801131a:	3308      	addeq	r3, #8
 801131c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011320:	bf04      	itt	eq
 8011322:	0100      	lsleq	r0, r0, #4
 8011324:	3304      	addeq	r3, #4
 8011326:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801132a:	bf04      	itt	eq
 801132c:	0080      	lsleq	r0, r0, #2
 801132e:	3302      	addeq	r3, #2
 8011330:	2800      	cmp	r0, #0
 8011332:	db05      	blt.n	8011340 <__hi0bits+0x38>
 8011334:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011338:	f103 0301 	add.w	r3, r3, #1
 801133c:	bf08      	it	eq
 801133e:	2320      	moveq	r3, #32
 8011340:	4618      	mov	r0, r3
 8011342:	4770      	bx	lr
 8011344:	2300      	movs	r3, #0
 8011346:	e7e4      	b.n	8011312 <__hi0bits+0xa>

08011348 <__lo0bits>:
 8011348:	6803      	ldr	r3, [r0, #0]
 801134a:	f013 0207 	ands.w	r2, r3, #7
 801134e:	4601      	mov	r1, r0
 8011350:	d00b      	beq.n	801136a <__lo0bits+0x22>
 8011352:	07da      	lsls	r2, r3, #31
 8011354:	d423      	bmi.n	801139e <__lo0bits+0x56>
 8011356:	0798      	lsls	r0, r3, #30
 8011358:	bf49      	itett	mi
 801135a:	085b      	lsrmi	r3, r3, #1
 801135c:	089b      	lsrpl	r3, r3, #2
 801135e:	2001      	movmi	r0, #1
 8011360:	600b      	strmi	r3, [r1, #0]
 8011362:	bf5c      	itt	pl
 8011364:	600b      	strpl	r3, [r1, #0]
 8011366:	2002      	movpl	r0, #2
 8011368:	4770      	bx	lr
 801136a:	b298      	uxth	r0, r3
 801136c:	b9a8      	cbnz	r0, 801139a <__lo0bits+0x52>
 801136e:	0c1b      	lsrs	r3, r3, #16
 8011370:	2010      	movs	r0, #16
 8011372:	b2da      	uxtb	r2, r3
 8011374:	b90a      	cbnz	r2, 801137a <__lo0bits+0x32>
 8011376:	3008      	adds	r0, #8
 8011378:	0a1b      	lsrs	r3, r3, #8
 801137a:	071a      	lsls	r2, r3, #28
 801137c:	bf04      	itt	eq
 801137e:	091b      	lsreq	r3, r3, #4
 8011380:	3004      	addeq	r0, #4
 8011382:	079a      	lsls	r2, r3, #30
 8011384:	bf04      	itt	eq
 8011386:	089b      	lsreq	r3, r3, #2
 8011388:	3002      	addeq	r0, #2
 801138a:	07da      	lsls	r2, r3, #31
 801138c:	d403      	bmi.n	8011396 <__lo0bits+0x4e>
 801138e:	085b      	lsrs	r3, r3, #1
 8011390:	f100 0001 	add.w	r0, r0, #1
 8011394:	d005      	beq.n	80113a2 <__lo0bits+0x5a>
 8011396:	600b      	str	r3, [r1, #0]
 8011398:	4770      	bx	lr
 801139a:	4610      	mov	r0, r2
 801139c:	e7e9      	b.n	8011372 <__lo0bits+0x2a>
 801139e:	2000      	movs	r0, #0
 80113a0:	4770      	bx	lr
 80113a2:	2020      	movs	r0, #32
 80113a4:	4770      	bx	lr
	...

080113a8 <__i2b>:
 80113a8:	b510      	push	{r4, lr}
 80113aa:	460c      	mov	r4, r1
 80113ac:	2101      	movs	r1, #1
 80113ae:	f7ff feb9 	bl	8011124 <_Balloc>
 80113b2:	4602      	mov	r2, r0
 80113b4:	b928      	cbnz	r0, 80113c2 <__i2b+0x1a>
 80113b6:	4b05      	ldr	r3, [pc, #20]	; (80113cc <__i2b+0x24>)
 80113b8:	4805      	ldr	r0, [pc, #20]	; (80113d0 <__i2b+0x28>)
 80113ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80113be:	f7fe fc77 	bl	800fcb0 <__assert_func>
 80113c2:	2301      	movs	r3, #1
 80113c4:	6144      	str	r4, [r0, #20]
 80113c6:	6103      	str	r3, [r0, #16]
 80113c8:	bd10      	pop	{r4, pc}
 80113ca:	bf00      	nop
 80113cc:	08013519 	.word	0x08013519
 80113d0:	080135a4 	.word	0x080135a4

080113d4 <__multiply>:
 80113d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d8:	4691      	mov	r9, r2
 80113da:	690a      	ldr	r2, [r1, #16]
 80113dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	bfb8      	it	lt
 80113e4:	460b      	movlt	r3, r1
 80113e6:	460c      	mov	r4, r1
 80113e8:	bfbc      	itt	lt
 80113ea:	464c      	movlt	r4, r9
 80113ec:	4699      	movlt	r9, r3
 80113ee:	6927      	ldr	r7, [r4, #16]
 80113f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80113f4:	68a3      	ldr	r3, [r4, #8]
 80113f6:	6861      	ldr	r1, [r4, #4]
 80113f8:	eb07 060a 	add.w	r6, r7, sl
 80113fc:	42b3      	cmp	r3, r6
 80113fe:	b085      	sub	sp, #20
 8011400:	bfb8      	it	lt
 8011402:	3101      	addlt	r1, #1
 8011404:	f7ff fe8e 	bl	8011124 <_Balloc>
 8011408:	b930      	cbnz	r0, 8011418 <__multiply+0x44>
 801140a:	4602      	mov	r2, r0
 801140c:	4b44      	ldr	r3, [pc, #272]	; (8011520 <__multiply+0x14c>)
 801140e:	4845      	ldr	r0, [pc, #276]	; (8011524 <__multiply+0x150>)
 8011410:	f240 115d 	movw	r1, #349	; 0x15d
 8011414:	f7fe fc4c 	bl	800fcb0 <__assert_func>
 8011418:	f100 0514 	add.w	r5, r0, #20
 801141c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011420:	462b      	mov	r3, r5
 8011422:	2200      	movs	r2, #0
 8011424:	4543      	cmp	r3, r8
 8011426:	d321      	bcc.n	801146c <__multiply+0x98>
 8011428:	f104 0314 	add.w	r3, r4, #20
 801142c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011430:	f109 0314 	add.w	r3, r9, #20
 8011434:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011438:	9202      	str	r2, [sp, #8]
 801143a:	1b3a      	subs	r2, r7, r4
 801143c:	3a15      	subs	r2, #21
 801143e:	f022 0203 	bic.w	r2, r2, #3
 8011442:	3204      	adds	r2, #4
 8011444:	f104 0115 	add.w	r1, r4, #21
 8011448:	428f      	cmp	r7, r1
 801144a:	bf38      	it	cc
 801144c:	2204      	movcc	r2, #4
 801144e:	9201      	str	r2, [sp, #4]
 8011450:	9a02      	ldr	r2, [sp, #8]
 8011452:	9303      	str	r3, [sp, #12]
 8011454:	429a      	cmp	r2, r3
 8011456:	d80c      	bhi.n	8011472 <__multiply+0x9e>
 8011458:	2e00      	cmp	r6, #0
 801145a:	dd03      	ble.n	8011464 <__multiply+0x90>
 801145c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011460:	2b00      	cmp	r3, #0
 8011462:	d05a      	beq.n	801151a <__multiply+0x146>
 8011464:	6106      	str	r6, [r0, #16]
 8011466:	b005      	add	sp, #20
 8011468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801146c:	f843 2b04 	str.w	r2, [r3], #4
 8011470:	e7d8      	b.n	8011424 <__multiply+0x50>
 8011472:	f8b3 a000 	ldrh.w	sl, [r3]
 8011476:	f1ba 0f00 	cmp.w	sl, #0
 801147a:	d024      	beq.n	80114c6 <__multiply+0xf2>
 801147c:	f104 0e14 	add.w	lr, r4, #20
 8011480:	46a9      	mov	r9, r5
 8011482:	f04f 0c00 	mov.w	ip, #0
 8011486:	f85e 2b04 	ldr.w	r2, [lr], #4
 801148a:	f8d9 1000 	ldr.w	r1, [r9]
 801148e:	fa1f fb82 	uxth.w	fp, r2
 8011492:	b289      	uxth	r1, r1
 8011494:	fb0a 110b 	mla	r1, sl, fp, r1
 8011498:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801149c:	f8d9 2000 	ldr.w	r2, [r9]
 80114a0:	4461      	add	r1, ip
 80114a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80114a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80114aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80114ae:	b289      	uxth	r1, r1
 80114b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80114b4:	4577      	cmp	r7, lr
 80114b6:	f849 1b04 	str.w	r1, [r9], #4
 80114ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80114be:	d8e2      	bhi.n	8011486 <__multiply+0xb2>
 80114c0:	9a01      	ldr	r2, [sp, #4]
 80114c2:	f845 c002 	str.w	ip, [r5, r2]
 80114c6:	9a03      	ldr	r2, [sp, #12]
 80114c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80114cc:	3304      	adds	r3, #4
 80114ce:	f1b9 0f00 	cmp.w	r9, #0
 80114d2:	d020      	beq.n	8011516 <__multiply+0x142>
 80114d4:	6829      	ldr	r1, [r5, #0]
 80114d6:	f104 0c14 	add.w	ip, r4, #20
 80114da:	46ae      	mov	lr, r5
 80114dc:	f04f 0a00 	mov.w	sl, #0
 80114e0:	f8bc b000 	ldrh.w	fp, [ip]
 80114e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80114e8:	fb09 220b 	mla	r2, r9, fp, r2
 80114ec:	4492      	add	sl, r2
 80114ee:	b289      	uxth	r1, r1
 80114f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80114f4:	f84e 1b04 	str.w	r1, [lr], #4
 80114f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80114fc:	f8be 1000 	ldrh.w	r1, [lr]
 8011500:	0c12      	lsrs	r2, r2, #16
 8011502:	fb09 1102 	mla	r1, r9, r2, r1
 8011506:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801150a:	4567      	cmp	r7, ip
 801150c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011510:	d8e6      	bhi.n	80114e0 <__multiply+0x10c>
 8011512:	9a01      	ldr	r2, [sp, #4]
 8011514:	50a9      	str	r1, [r5, r2]
 8011516:	3504      	adds	r5, #4
 8011518:	e79a      	b.n	8011450 <__multiply+0x7c>
 801151a:	3e01      	subs	r6, #1
 801151c:	e79c      	b.n	8011458 <__multiply+0x84>
 801151e:	bf00      	nop
 8011520:	08013519 	.word	0x08013519
 8011524:	080135a4 	.word	0x080135a4

08011528 <__pow5mult>:
 8011528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801152c:	4615      	mov	r5, r2
 801152e:	f012 0203 	ands.w	r2, r2, #3
 8011532:	4606      	mov	r6, r0
 8011534:	460f      	mov	r7, r1
 8011536:	d007      	beq.n	8011548 <__pow5mult+0x20>
 8011538:	4c25      	ldr	r4, [pc, #148]	; (80115d0 <__pow5mult+0xa8>)
 801153a:	3a01      	subs	r2, #1
 801153c:	2300      	movs	r3, #0
 801153e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011542:	f7ff fe51 	bl	80111e8 <__multadd>
 8011546:	4607      	mov	r7, r0
 8011548:	10ad      	asrs	r5, r5, #2
 801154a:	d03d      	beq.n	80115c8 <__pow5mult+0xa0>
 801154c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801154e:	b97c      	cbnz	r4, 8011570 <__pow5mult+0x48>
 8011550:	2010      	movs	r0, #16
 8011552:	f7ff fdcd 	bl	80110f0 <malloc>
 8011556:	4602      	mov	r2, r0
 8011558:	6270      	str	r0, [r6, #36]	; 0x24
 801155a:	b928      	cbnz	r0, 8011568 <__pow5mult+0x40>
 801155c:	4b1d      	ldr	r3, [pc, #116]	; (80115d4 <__pow5mult+0xac>)
 801155e:	481e      	ldr	r0, [pc, #120]	; (80115d8 <__pow5mult+0xb0>)
 8011560:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011564:	f7fe fba4 	bl	800fcb0 <__assert_func>
 8011568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801156c:	6004      	str	r4, [r0, #0]
 801156e:	60c4      	str	r4, [r0, #12]
 8011570:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011578:	b94c      	cbnz	r4, 801158e <__pow5mult+0x66>
 801157a:	f240 2171 	movw	r1, #625	; 0x271
 801157e:	4630      	mov	r0, r6
 8011580:	f7ff ff12 	bl	80113a8 <__i2b>
 8011584:	2300      	movs	r3, #0
 8011586:	f8c8 0008 	str.w	r0, [r8, #8]
 801158a:	4604      	mov	r4, r0
 801158c:	6003      	str	r3, [r0, #0]
 801158e:	f04f 0900 	mov.w	r9, #0
 8011592:	07eb      	lsls	r3, r5, #31
 8011594:	d50a      	bpl.n	80115ac <__pow5mult+0x84>
 8011596:	4639      	mov	r1, r7
 8011598:	4622      	mov	r2, r4
 801159a:	4630      	mov	r0, r6
 801159c:	f7ff ff1a 	bl	80113d4 <__multiply>
 80115a0:	4639      	mov	r1, r7
 80115a2:	4680      	mov	r8, r0
 80115a4:	4630      	mov	r0, r6
 80115a6:	f7ff fdfd 	bl	80111a4 <_Bfree>
 80115aa:	4647      	mov	r7, r8
 80115ac:	106d      	asrs	r5, r5, #1
 80115ae:	d00b      	beq.n	80115c8 <__pow5mult+0xa0>
 80115b0:	6820      	ldr	r0, [r4, #0]
 80115b2:	b938      	cbnz	r0, 80115c4 <__pow5mult+0x9c>
 80115b4:	4622      	mov	r2, r4
 80115b6:	4621      	mov	r1, r4
 80115b8:	4630      	mov	r0, r6
 80115ba:	f7ff ff0b 	bl	80113d4 <__multiply>
 80115be:	6020      	str	r0, [r4, #0]
 80115c0:	f8c0 9000 	str.w	r9, [r0]
 80115c4:	4604      	mov	r4, r0
 80115c6:	e7e4      	b.n	8011592 <__pow5mult+0x6a>
 80115c8:	4638      	mov	r0, r7
 80115ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115ce:	bf00      	nop
 80115d0:	080136f0 	.word	0x080136f0
 80115d4:	08013300 	.word	0x08013300
 80115d8:	080135a4 	.word	0x080135a4

080115dc <__lshift>:
 80115dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115e0:	460c      	mov	r4, r1
 80115e2:	6849      	ldr	r1, [r1, #4]
 80115e4:	6923      	ldr	r3, [r4, #16]
 80115e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80115ea:	68a3      	ldr	r3, [r4, #8]
 80115ec:	4607      	mov	r7, r0
 80115ee:	4691      	mov	r9, r2
 80115f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80115f4:	f108 0601 	add.w	r6, r8, #1
 80115f8:	42b3      	cmp	r3, r6
 80115fa:	db0b      	blt.n	8011614 <__lshift+0x38>
 80115fc:	4638      	mov	r0, r7
 80115fe:	f7ff fd91 	bl	8011124 <_Balloc>
 8011602:	4605      	mov	r5, r0
 8011604:	b948      	cbnz	r0, 801161a <__lshift+0x3e>
 8011606:	4602      	mov	r2, r0
 8011608:	4b2a      	ldr	r3, [pc, #168]	; (80116b4 <__lshift+0xd8>)
 801160a:	482b      	ldr	r0, [pc, #172]	; (80116b8 <__lshift+0xdc>)
 801160c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011610:	f7fe fb4e 	bl	800fcb0 <__assert_func>
 8011614:	3101      	adds	r1, #1
 8011616:	005b      	lsls	r3, r3, #1
 8011618:	e7ee      	b.n	80115f8 <__lshift+0x1c>
 801161a:	2300      	movs	r3, #0
 801161c:	f100 0114 	add.w	r1, r0, #20
 8011620:	f100 0210 	add.w	r2, r0, #16
 8011624:	4618      	mov	r0, r3
 8011626:	4553      	cmp	r3, sl
 8011628:	db37      	blt.n	801169a <__lshift+0xbe>
 801162a:	6920      	ldr	r0, [r4, #16]
 801162c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011630:	f104 0314 	add.w	r3, r4, #20
 8011634:	f019 091f 	ands.w	r9, r9, #31
 8011638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801163c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011640:	d02f      	beq.n	80116a2 <__lshift+0xc6>
 8011642:	f1c9 0e20 	rsb	lr, r9, #32
 8011646:	468a      	mov	sl, r1
 8011648:	f04f 0c00 	mov.w	ip, #0
 801164c:	681a      	ldr	r2, [r3, #0]
 801164e:	fa02 f209 	lsl.w	r2, r2, r9
 8011652:	ea42 020c 	orr.w	r2, r2, ip
 8011656:	f84a 2b04 	str.w	r2, [sl], #4
 801165a:	f853 2b04 	ldr.w	r2, [r3], #4
 801165e:	4298      	cmp	r0, r3
 8011660:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011664:	d8f2      	bhi.n	801164c <__lshift+0x70>
 8011666:	1b03      	subs	r3, r0, r4
 8011668:	3b15      	subs	r3, #21
 801166a:	f023 0303 	bic.w	r3, r3, #3
 801166e:	3304      	adds	r3, #4
 8011670:	f104 0215 	add.w	r2, r4, #21
 8011674:	4290      	cmp	r0, r2
 8011676:	bf38      	it	cc
 8011678:	2304      	movcc	r3, #4
 801167a:	f841 c003 	str.w	ip, [r1, r3]
 801167e:	f1bc 0f00 	cmp.w	ip, #0
 8011682:	d001      	beq.n	8011688 <__lshift+0xac>
 8011684:	f108 0602 	add.w	r6, r8, #2
 8011688:	3e01      	subs	r6, #1
 801168a:	4638      	mov	r0, r7
 801168c:	612e      	str	r6, [r5, #16]
 801168e:	4621      	mov	r1, r4
 8011690:	f7ff fd88 	bl	80111a4 <_Bfree>
 8011694:	4628      	mov	r0, r5
 8011696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801169a:	f842 0f04 	str.w	r0, [r2, #4]!
 801169e:	3301      	adds	r3, #1
 80116a0:	e7c1      	b.n	8011626 <__lshift+0x4a>
 80116a2:	3904      	subs	r1, #4
 80116a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80116a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80116ac:	4298      	cmp	r0, r3
 80116ae:	d8f9      	bhi.n	80116a4 <__lshift+0xc8>
 80116b0:	e7ea      	b.n	8011688 <__lshift+0xac>
 80116b2:	bf00      	nop
 80116b4:	08013519 	.word	0x08013519
 80116b8:	080135a4 	.word	0x080135a4

080116bc <__mcmp>:
 80116bc:	b530      	push	{r4, r5, lr}
 80116be:	6902      	ldr	r2, [r0, #16]
 80116c0:	690c      	ldr	r4, [r1, #16]
 80116c2:	1b12      	subs	r2, r2, r4
 80116c4:	d10e      	bne.n	80116e4 <__mcmp+0x28>
 80116c6:	f100 0314 	add.w	r3, r0, #20
 80116ca:	3114      	adds	r1, #20
 80116cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80116d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80116d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80116d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80116dc:	42a5      	cmp	r5, r4
 80116de:	d003      	beq.n	80116e8 <__mcmp+0x2c>
 80116e0:	d305      	bcc.n	80116ee <__mcmp+0x32>
 80116e2:	2201      	movs	r2, #1
 80116e4:	4610      	mov	r0, r2
 80116e6:	bd30      	pop	{r4, r5, pc}
 80116e8:	4283      	cmp	r3, r0
 80116ea:	d3f3      	bcc.n	80116d4 <__mcmp+0x18>
 80116ec:	e7fa      	b.n	80116e4 <__mcmp+0x28>
 80116ee:	f04f 32ff 	mov.w	r2, #4294967295
 80116f2:	e7f7      	b.n	80116e4 <__mcmp+0x28>

080116f4 <__mdiff>:
 80116f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116f8:	460c      	mov	r4, r1
 80116fa:	4606      	mov	r6, r0
 80116fc:	4611      	mov	r1, r2
 80116fe:	4620      	mov	r0, r4
 8011700:	4690      	mov	r8, r2
 8011702:	f7ff ffdb 	bl	80116bc <__mcmp>
 8011706:	1e05      	subs	r5, r0, #0
 8011708:	d110      	bne.n	801172c <__mdiff+0x38>
 801170a:	4629      	mov	r1, r5
 801170c:	4630      	mov	r0, r6
 801170e:	f7ff fd09 	bl	8011124 <_Balloc>
 8011712:	b930      	cbnz	r0, 8011722 <__mdiff+0x2e>
 8011714:	4b3a      	ldr	r3, [pc, #232]	; (8011800 <__mdiff+0x10c>)
 8011716:	4602      	mov	r2, r0
 8011718:	f240 2132 	movw	r1, #562	; 0x232
 801171c:	4839      	ldr	r0, [pc, #228]	; (8011804 <__mdiff+0x110>)
 801171e:	f7fe fac7 	bl	800fcb0 <__assert_func>
 8011722:	2301      	movs	r3, #1
 8011724:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011728:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801172c:	bfa4      	itt	ge
 801172e:	4643      	movge	r3, r8
 8011730:	46a0      	movge	r8, r4
 8011732:	4630      	mov	r0, r6
 8011734:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011738:	bfa6      	itte	ge
 801173a:	461c      	movge	r4, r3
 801173c:	2500      	movge	r5, #0
 801173e:	2501      	movlt	r5, #1
 8011740:	f7ff fcf0 	bl	8011124 <_Balloc>
 8011744:	b920      	cbnz	r0, 8011750 <__mdiff+0x5c>
 8011746:	4b2e      	ldr	r3, [pc, #184]	; (8011800 <__mdiff+0x10c>)
 8011748:	4602      	mov	r2, r0
 801174a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801174e:	e7e5      	b.n	801171c <__mdiff+0x28>
 8011750:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011754:	6926      	ldr	r6, [r4, #16]
 8011756:	60c5      	str	r5, [r0, #12]
 8011758:	f104 0914 	add.w	r9, r4, #20
 801175c:	f108 0514 	add.w	r5, r8, #20
 8011760:	f100 0e14 	add.w	lr, r0, #20
 8011764:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011768:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801176c:	f108 0210 	add.w	r2, r8, #16
 8011770:	46f2      	mov	sl, lr
 8011772:	2100      	movs	r1, #0
 8011774:	f859 3b04 	ldr.w	r3, [r9], #4
 8011778:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801177c:	fa1f f883 	uxth.w	r8, r3
 8011780:	fa11 f18b 	uxtah	r1, r1, fp
 8011784:	0c1b      	lsrs	r3, r3, #16
 8011786:	eba1 0808 	sub.w	r8, r1, r8
 801178a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801178e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011792:	fa1f f888 	uxth.w	r8, r8
 8011796:	1419      	asrs	r1, r3, #16
 8011798:	454e      	cmp	r6, r9
 801179a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801179e:	f84a 3b04 	str.w	r3, [sl], #4
 80117a2:	d8e7      	bhi.n	8011774 <__mdiff+0x80>
 80117a4:	1b33      	subs	r3, r6, r4
 80117a6:	3b15      	subs	r3, #21
 80117a8:	f023 0303 	bic.w	r3, r3, #3
 80117ac:	3304      	adds	r3, #4
 80117ae:	3415      	adds	r4, #21
 80117b0:	42a6      	cmp	r6, r4
 80117b2:	bf38      	it	cc
 80117b4:	2304      	movcc	r3, #4
 80117b6:	441d      	add	r5, r3
 80117b8:	4473      	add	r3, lr
 80117ba:	469e      	mov	lr, r3
 80117bc:	462e      	mov	r6, r5
 80117be:	4566      	cmp	r6, ip
 80117c0:	d30e      	bcc.n	80117e0 <__mdiff+0xec>
 80117c2:	f10c 0203 	add.w	r2, ip, #3
 80117c6:	1b52      	subs	r2, r2, r5
 80117c8:	f022 0203 	bic.w	r2, r2, #3
 80117cc:	3d03      	subs	r5, #3
 80117ce:	45ac      	cmp	ip, r5
 80117d0:	bf38      	it	cc
 80117d2:	2200      	movcc	r2, #0
 80117d4:	441a      	add	r2, r3
 80117d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80117da:	b17b      	cbz	r3, 80117fc <__mdiff+0x108>
 80117dc:	6107      	str	r7, [r0, #16]
 80117de:	e7a3      	b.n	8011728 <__mdiff+0x34>
 80117e0:	f856 8b04 	ldr.w	r8, [r6], #4
 80117e4:	fa11 f288 	uxtah	r2, r1, r8
 80117e8:	1414      	asrs	r4, r2, #16
 80117ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80117ee:	b292      	uxth	r2, r2
 80117f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80117f4:	f84e 2b04 	str.w	r2, [lr], #4
 80117f8:	1421      	asrs	r1, r4, #16
 80117fa:	e7e0      	b.n	80117be <__mdiff+0xca>
 80117fc:	3f01      	subs	r7, #1
 80117fe:	e7ea      	b.n	80117d6 <__mdiff+0xe2>
 8011800:	08013519 	.word	0x08013519
 8011804:	080135a4 	.word	0x080135a4

08011808 <__ulp>:
 8011808:	b082      	sub	sp, #8
 801180a:	ed8d 0b00 	vstr	d0, [sp]
 801180e:	9b01      	ldr	r3, [sp, #4]
 8011810:	4912      	ldr	r1, [pc, #72]	; (801185c <__ulp+0x54>)
 8011812:	4019      	ands	r1, r3
 8011814:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011818:	2900      	cmp	r1, #0
 801181a:	dd05      	ble.n	8011828 <__ulp+0x20>
 801181c:	2200      	movs	r2, #0
 801181e:	460b      	mov	r3, r1
 8011820:	ec43 2b10 	vmov	d0, r2, r3
 8011824:	b002      	add	sp, #8
 8011826:	4770      	bx	lr
 8011828:	4249      	negs	r1, r1
 801182a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801182e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011832:	f04f 0200 	mov.w	r2, #0
 8011836:	f04f 0300 	mov.w	r3, #0
 801183a:	da04      	bge.n	8011846 <__ulp+0x3e>
 801183c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011840:	fa41 f300 	asr.w	r3, r1, r0
 8011844:	e7ec      	b.n	8011820 <__ulp+0x18>
 8011846:	f1a0 0114 	sub.w	r1, r0, #20
 801184a:	291e      	cmp	r1, #30
 801184c:	bfda      	itte	le
 801184e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011852:	fa20 f101 	lsrle.w	r1, r0, r1
 8011856:	2101      	movgt	r1, #1
 8011858:	460a      	mov	r2, r1
 801185a:	e7e1      	b.n	8011820 <__ulp+0x18>
 801185c:	7ff00000 	.word	0x7ff00000

08011860 <__b2d>:
 8011860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011862:	6905      	ldr	r5, [r0, #16]
 8011864:	f100 0714 	add.w	r7, r0, #20
 8011868:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801186c:	1f2e      	subs	r6, r5, #4
 801186e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011872:	4620      	mov	r0, r4
 8011874:	f7ff fd48 	bl	8011308 <__hi0bits>
 8011878:	f1c0 0320 	rsb	r3, r0, #32
 801187c:	280a      	cmp	r0, #10
 801187e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80118fc <__b2d+0x9c>
 8011882:	600b      	str	r3, [r1, #0]
 8011884:	dc14      	bgt.n	80118b0 <__b2d+0x50>
 8011886:	f1c0 0e0b 	rsb	lr, r0, #11
 801188a:	fa24 f10e 	lsr.w	r1, r4, lr
 801188e:	42b7      	cmp	r7, r6
 8011890:	ea41 030c 	orr.w	r3, r1, ip
 8011894:	bf34      	ite	cc
 8011896:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801189a:	2100      	movcs	r1, #0
 801189c:	3015      	adds	r0, #21
 801189e:	fa04 f000 	lsl.w	r0, r4, r0
 80118a2:	fa21 f10e 	lsr.w	r1, r1, lr
 80118a6:	ea40 0201 	orr.w	r2, r0, r1
 80118aa:	ec43 2b10 	vmov	d0, r2, r3
 80118ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118b0:	42b7      	cmp	r7, r6
 80118b2:	bf3a      	itte	cc
 80118b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80118b8:	f1a5 0608 	subcc.w	r6, r5, #8
 80118bc:	2100      	movcs	r1, #0
 80118be:	380b      	subs	r0, #11
 80118c0:	d017      	beq.n	80118f2 <__b2d+0x92>
 80118c2:	f1c0 0c20 	rsb	ip, r0, #32
 80118c6:	fa04 f500 	lsl.w	r5, r4, r0
 80118ca:	42be      	cmp	r6, r7
 80118cc:	fa21 f40c 	lsr.w	r4, r1, ip
 80118d0:	ea45 0504 	orr.w	r5, r5, r4
 80118d4:	bf8c      	ite	hi
 80118d6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80118da:	2400      	movls	r4, #0
 80118dc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80118e0:	fa01 f000 	lsl.w	r0, r1, r0
 80118e4:	fa24 f40c 	lsr.w	r4, r4, ip
 80118e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80118ec:	ea40 0204 	orr.w	r2, r0, r4
 80118f0:	e7db      	b.n	80118aa <__b2d+0x4a>
 80118f2:	ea44 030c 	orr.w	r3, r4, ip
 80118f6:	460a      	mov	r2, r1
 80118f8:	e7d7      	b.n	80118aa <__b2d+0x4a>
 80118fa:	bf00      	nop
 80118fc:	3ff00000 	.word	0x3ff00000

08011900 <__d2b>:
 8011900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011904:	4689      	mov	r9, r1
 8011906:	2101      	movs	r1, #1
 8011908:	ec57 6b10 	vmov	r6, r7, d0
 801190c:	4690      	mov	r8, r2
 801190e:	f7ff fc09 	bl	8011124 <_Balloc>
 8011912:	4604      	mov	r4, r0
 8011914:	b930      	cbnz	r0, 8011924 <__d2b+0x24>
 8011916:	4602      	mov	r2, r0
 8011918:	4b25      	ldr	r3, [pc, #148]	; (80119b0 <__d2b+0xb0>)
 801191a:	4826      	ldr	r0, [pc, #152]	; (80119b4 <__d2b+0xb4>)
 801191c:	f240 310a 	movw	r1, #778	; 0x30a
 8011920:	f7fe f9c6 	bl	800fcb0 <__assert_func>
 8011924:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011928:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801192c:	bb35      	cbnz	r5, 801197c <__d2b+0x7c>
 801192e:	2e00      	cmp	r6, #0
 8011930:	9301      	str	r3, [sp, #4]
 8011932:	d028      	beq.n	8011986 <__d2b+0x86>
 8011934:	4668      	mov	r0, sp
 8011936:	9600      	str	r6, [sp, #0]
 8011938:	f7ff fd06 	bl	8011348 <__lo0bits>
 801193c:	9900      	ldr	r1, [sp, #0]
 801193e:	b300      	cbz	r0, 8011982 <__d2b+0x82>
 8011940:	9a01      	ldr	r2, [sp, #4]
 8011942:	f1c0 0320 	rsb	r3, r0, #32
 8011946:	fa02 f303 	lsl.w	r3, r2, r3
 801194a:	430b      	orrs	r3, r1
 801194c:	40c2      	lsrs	r2, r0
 801194e:	6163      	str	r3, [r4, #20]
 8011950:	9201      	str	r2, [sp, #4]
 8011952:	9b01      	ldr	r3, [sp, #4]
 8011954:	61a3      	str	r3, [r4, #24]
 8011956:	2b00      	cmp	r3, #0
 8011958:	bf14      	ite	ne
 801195a:	2202      	movne	r2, #2
 801195c:	2201      	moveq	r2, #1
 801195e:	6122      	str	r2, [r4, #16]
 8011960:	b1d5      	cbz	r5, 8011998 <__d2b+0x98>
 8011962:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011966:	4405      	add	r5, r0
 8011968:	f8c9 5000 	str.w	r5, [r9]
 801196c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011970:	f8c8 0000 	str.w	r0, [r8]
 8011974:	4620      	mov	r0, r4
 8011976:	b003      	add	sp, #12
 8011978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801197c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011980:	e7d5      	b.n	801192e <__d2b+0x2e>
 8011982:	6161      	str	r1, [r4, #20]
 8011984:	e7e5      	b.n	8011952 <__d2b+0x52>
 8011986:	a801      	add	r0, sp, #4
 8011988:	f7ff fcde 	bl	8011348 <__lo0bits>
 801198c:	9b01      	ldr	r3, [sp, #4]
 801198e:	6163      	str	r3, [r4, #20]
 8011990:	2201      	movs	r2, #1
 8011992:	6122      	str	r2, [r4, #16]
 8011994:	3020      	adds	r0, #32
 8011996:	e7e3      	b.n	8011960 <__d2b+0x60>
 8011998:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801199c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80119a0:	f8c9 0000 	str.w	r0, [r9]
 80119a4:	6918      	ldr	r0, [r3, #16]
 80119a6:	f7ff fcaf 	bl	8011308 <__hi0bits>
 80119aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80119ae:	e7df      	b.n	8011970 <__d2b+0x70>
 80119b0:	08013519 	.word	0x08013519
 80119b4:	080135a4 	.word	0x080135a4

080119b8 <__ratio>:
 80119b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119bc:	4688      	mov	r8, r1
 80119be:	4669      	mov	r1, sp
 80119c0:	4681      	mov	r9, r0
 80119c2:	f7ff ff4d 	bl	8011860 <__b2d>
 80119c6:	a901      	add	r1, sp, #4
 80119c8:	4640      	mov	r0, r8
 80119ca:	ec55 4b10 	vmov	r4, r5, d0
 80119ce:	f7ff ff47 	bl	8011860 <__b2d>
 80119d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80119d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80119da:	eba3 0c02 	sub.w	ip, r3, r2
 80119de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80119e2:	1a9b      	subs	r3, r3, r2
 80119e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80119e8:	ec51 0b10 	vmov	r0, r1, d0
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	bfd6      	itet	le
 80119f0:	460a      	movle	r2, r1
 80119f2:	462a      	movgt	r2, r5
 80119f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80119f8:	468b      	mov	fp, r1
 80119fa:	462f      	mov	r7, r5
 80119fc:	bfd4      	ite	le
 80119fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011a02:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011a06:	4620      	mov	r0, r4
 8011a08:	ee10 2a10 	vmov	r2, s0
 8011a0c:	465b      	mov	r3, fp
 8011a0e:	4639      	mov	r1, r7
 8011a10:	f7ee ff2c 	bl	800086c <__aeabi_ddiv>
 8011a14:	ec41 0b10 	vmov	d0, r0, r1
 8011a18:	b003      	add	sp, #12
 8011a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a1e <__copybits>:
 8011a1e:	3901      	subs	r1, #1
 8011a20:	b570      	push	{r4, r5, r6, lr}
 8011a22:	1149      	asrs	r1, r1, #5
 8011a24:	6914      	ldr	r4, [r2, #16]
 8011a26:	3101      	adds	r1, #1
 8011a28:	f102 0314 	add.w	r3, r2, #20
 8011a2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011a34:	1f05      	subs	r5, r0, #4
 8011a36:	42a3      	cmp	r3, r4
 8011a38:	d30c      	bcc.n	8011a54 <__copybits+0x36>
 8011a3a:	1aa3      	subs	r3, r4, r2
 8011a3c:	3b11      	subs	r3, #17
 8011a3e:	f023 0303 	bic.w	r3, r3, #3
 8011a42:	3211      	adds	r2, #17
 8011a44:	42a2      	cmp	r2, r4
 8011a46:	bf88      	it	hi
 8011a48:	2300      	movhi	r3, #0
 8011a4a:	4418      	add	r0, r3
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	4288      	cmp	r0, r1
 8011a50:	d305      	bcc.n	8011a5e <__copybits+0x40>
 8011a52:	bd70      	pop	{r4, r5, r6, pc}
 8011a54:	f853 6b04 	ldr.w	r6, [r3], #4
 8011a58:	f845 6f04 	str.w	r6, [r5, #4]!
 8011a5c:	e7eb      	b.n	8011a36 <__copybits+0x18>
 8011a5e:	f840 3b04 	str.w	r3, [r0], #4
 8011a62:	e7f4      	b.n	8011a4e <__copybits+0x30>

08011a64 <__any_on>:
 8011a64:	f100 0214 	add.w	r2, r0, #20
 8011a68:	6900      	ldr	r0, [r0, #16]
 8011a6a:	114b      	asrs	r3, r1, #5
 8011a6c:	4298      	cmp	r0, r3
 8011a6e:	b510      	push	{r4, lr}
 8011a70:	db11      	blt.n	8011a96 <__any_on+0x32>
 8011a72:	dd0a      	ble.n	8011a8a <__any_on+0x26>
 8011a74:	f011 011f 	ands.w	r1, r1, #31
 8011a78:	d007      	beq.n	8011a8a <__any_on+0x26>
 8011a7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011a7e:	fa24 f001 	lsr.w	r0, r4, r1
 8011a82:	fa00 f101 	lsl.w	r1, r0, r1
 8011a86:	428c      	cmp	r4, r1
 8011a88:	d10b      	bne.n	8011aa2 <__any_on+0x3e>
 8011a8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a8e:	4293      	cmp	r3, r2
 8011a90:	d803      	bhi.n	8011a9a <__any_on+0x36>
 8011a92:	2000      	movs	r0, #0
 8011a94:	bd10      	pop	{r4, pc}
 8011a96:	4603      	mov	r3, r0
 8011a98:	e7f7      	b.n	8011a8a <__any_on+0x26>
 8011a9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a9e:	2900      	cmp	r1, #0
 8011aa0:	d0f5      	beq.n	8011a8e <__any_on+0x2a>
 8011aa2:	2001      	movs	r0, #1
 8011aa4:	e7f6      	b.n	8011a94 <__any_on+0x30>

08011aa6 <_calloc_r>:
 8011aa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011aa8:	fba1 2402 	umull	r2, r4, r1, r2
 8011aac:	b94c      	cbnz	r4, 8011ac2 <_calloc_r+0x1c>
 8011aae:	4611      	mov	r1, r2
 8011ab0:	9201      	str	r2, [sp, #4]
 8011ab2:	f000 f87b 	bl	8011bac <_malloc_r>
 8011ab6:	9a01      	ldr	r2, [sp, #4]
 8011ab8:	4605      	mov	r5, r0
 8011aba:	b930      	cbnz	r0, 8011aca <_calloc_r+0x24>
 8011abc:	4628      	mov	r0, r5
 8011abe:	b003      	add	sp, #12
 8011ac0:	bd30      	pop	{r4, r5, pc}
 8011ac2:	220c      	movs	r2, #12
 8011ac4:	6002      	str	r2, [r0, #0]
 8011ac6:	2500      	movs	r5, #0
 8011ac8:	e7f8      	b.n	8011abc <_calloc_r+0x16>
 8011aca:	4621      	mov	r1, r4
 8011acc:	f7fc fb18 	bl	800e100 <memset>
 8011ad0:	e7f4      	b.n	8011abc <_calloc_r+0x16>
	...

08011ad4 <_free_r>:
 8011ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ad6:	2900      	cmp	r1, #0
 8011ad8:	d044      	beq.n	8011b64 <_free_r+0x90>
 8011ada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ade:	9001      	str	r0, [sp, #4]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	f1a1 0404 	sub.w	r4, r1, #4
 8011ae6:	bfb8      	it	lt
 8011ae8:	18e4      	addlt	r4, r4, r3
 8011aea:	f000 fec5 	bl	8012878 <__malloc_lock>
 8011aee:	4a1e      	ldr	r2, [pc, #120]	; (8011b68 <_free_r+0x94>)
 8011af0:	9801      	ldr	r0, [sp, #4]
 8011af2:	6813      	ldr	r3, [r2, #0]
 8011af4:	b933      	cbnz	r3, 8011b04 <_free_r+0x30>
 8011af6:	6063      	str	r3, [r4, #4]
 8011af8:	6014      	str	r4, [r2, #0]
 8011afa:	b003      	add	sp, #12
 8011afc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b00:	f000 bec0 	b.w	8012884 <__malloc_unlock>
 8011b04:	42a3      	cmp	r3, r4
 8011b06:	d908      	bls.n	8011b1a <_free_r+0x46>
 8011b08:	6825      	ldr	r5, [r4, #0]
 8011b0a:	1961      	adds	r1, r4, r5
 8011b0c:	428b      	cmp	r3, r1
 8011b0e:	bf01      	itttt	eq
 8011b10:	6819      	ldreq	r1, [r3, #0]
 8011b12:	685b      	ldreq	r3, [r3, #4]
 8011b14:	1949      	addeq	r1, r1, r5
 8011b16:	6021      	streq	r1, [r4, #0]
 8011b18:	e7ed      	b.n	8011af6 <_free_r+0x22>
 8011b1a:	461a      	mov	r2, r3
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	b10b      	cbz	r3, 8011b24 <_free_r+0x50>
 8011b20:	42a3      	cmp	r3, r4
 8011b22:	d9fa      	bls.n	8011b1a <_free_r+0x46>
 8011b24:	6811      	ldr	r1, [r2, #0]
 8011b26:	1855      	adds	r5, r2, r1
 8011b28:	42a5      	cmp	r5, r4
 8011b2a:	d10b      	bne.n	8011b44 <_free_r+0x70>
 8011b2c:	6824      	ldr	r4, [r4, #0]
 8011b2e:	4421      	add	r1, r4
 8011b30:	1854      	adds	r4, r2, r1
 8011b32:	42a3      	cmp	r3, r4
 8011b34:	6011      	str	r1, [r2, #0]
 8011b36:	d1e0      	bne.n	8011afa <_free_r+0x26>
 8011b38:	681c      	ldr	r4, [r3, #0]
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	6053      	str	r3, [r2, #4]
 8011b3e:	4421      	add	r1, r4
 8011b40:	6011      	str	r1, [r2, #0]
 8011b42:	e7da      	b.n	8011afa <_free_r+0x26>
 8011b44:	d902      	bls.n	8011b4c <_free_r+0x78>
 8011b46:	230c      	movs	r3, #12
 8011b48:	6003      	str	r3, [r0, #0]
 8011b4a:	e7d6      	b.n	8011afa <_free_r+0x26>
 8011b4c:	6825      	ldr	r5, [r4, #0]
 8011b4e:	1961      	adds	r1, r4, r5
 8011b50:	428b      	cmp	r3, r1
 8011b52:	bf04      	itt	eq
 8011b54:	6819      	ldreq	r1, [r3, #0]
 8011b56:	685b      	ldreq	r3, [r3, #4]
 8011b58:	6063      	str	r3, [r4, #4]
 8011b5a:	bf04      	itt	eq
 8011b5c:	1949      	addeq	r1, r1, r5
 8011b5e:	6021      	streq	r1, [r4, #0]
 8011b60:	6054      	str	r4, [r2, #4]
 8011b62:	e7ca      	b.n	8011afa <_free_r+0x26>
 8011b64:	b003      	add	sp, #12
 8011b66:	bd30      	pop	{r4, r5, pc}
 8011b68:	20001890 	.word	0x20001890

08011b6c <sbrk_aligned>:
 8011b6c:	b570      	push	{r4, r5, r6, lr}
 8011b6e:	4e0e      	ldr	r6, [pc, #56]	; (8011ba8 <sbrk_aligned+0x3c>)
 8011b70:	460c      	mov	r4, r1
 8011b72:	6831      	ldr	r1, [r6, #0]
 8011b74:	4605      	mov	r5, r0
 8011b76:	b911      	cbnz	r1, 8011b7e <sbrk_aligned+0x12>
 8011b78:	f000 fb4a 	bl	8012210 <_sbrk_r>
 8011b7c:	6030      	str	r0, [r6, #0]
 8011b7e:	4621      	mov	r1, r4
 8011b80:	4628      	mov	r0, r5
 8011b82:	f000 fb45 	bl	8012210 <_sbrk_r>
 8011b86:	1c43      	adds	r3, r0, #1
 8011b88:	d00a      	beq.n	8011ba0 <sbrk_aligned+0x34>
 8011b8a:	1cc4      	adds	r4, r0, #3
 8011b8c:	f024 0403 	bic.w	r4, r4, #3
 8011b90:	42a0      	cmp	r0, r4
 8011b92:	d007      	beq.n	8011ba4 <sbrk_aligned+0x38>
 8011b94:	1a21      	subs	r1, r4, r0
 8011b96:	4628      	mov	r0, r5
 8011b98:	f000 fb3a 	bl	8012210 <_sbrk_r>
 8011b9c:	3001      	adds	r0, #1
 8011b9e:	d101      	bne.n	8011ba4 <sbrk_aligned+0x38>
 8011ba0:	f04f 34ff 	mov.w	r4, #4294967295
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	bd70      	pop	{r4, r5, r6, pc}
 8011ba8:	20001894 	.word	0x20001894

08011bac <_malloc_r>:
 8011bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bb0:	1ccd      	adds	r5, r1, #3
 8011bb2:	f025 0503 	bic.w	r5, r5, #3
 8011bb6:	3508      	adds	r5, #8
 8011bb8:	2d0c      	cmp	r5, #12
 8011bba:	bf38      	it	cc
 8011bbc:	250c      	movcc	r5, #12
 8011bbe:	2d00      	cmp	r5, #0
 8011bc0:	4607      	mov	r7, r0
 8011bc2:	db01      	blt.n	8011bc8 <_malloc_r+0x1c>
 8011bc4:	42a9      	cmp	r1, r5
 8011bc6:	d905      	bls.n	8011bd4 <_malloc_r+0x28>
 8011bc8:	230c      	movs	r3, #12
 8011bca:	603b      	str	r3, [r7, #0]
 8011bcc:	2600      	movs	r6, #0
 8011bce:	4630      	mov	r0, r6
 8011bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bd4:	4e2e      	ldr	r6, [pc, #184]	; (8011c90 <_malloc_r+0xe4>)
 8011bd6:	f000 fe4f 	bl	8012878 <__malloc_lock>
 8011bda:	6833      	ldr	r3, [r6, #0]
 8011bdc:	461c      	mov	r4, r3
 8011bde:	bb34      	cbnz	r4, 8011c2e <_malloc_r+0x82>
 8011be0:	4629      	mov	r1, r5
 8011be2:	4638      	mov	r0, r7
 8011be4:	f7ff ffc2 	bl	8011b6c <sbrk_aligned>
 8011be8:	1c43      	adds	r3, r0, #1
 8011bea:	4604      	mov	r4, r0
 8011bec:	d14d      	bne.n	8011c8a <_malloc_r+0xde>
 8011bee:	6834      	ldr	r4, [r6, #0]
 8011bf0:	4626      	mov	r6, r4
 8011bf2:	2e00      	cmp	r6, #0
 8011bf4:	d140      	bne.n	8011c78 <_malloc_r+0xcc>
 8011bf6:	6823      	ldr	r3, [r4, #0]
 8011bf8:	4631      	mov	r1, r6
 8011bfa:	4638      	mov	r0, r7
 8011bfc:	eb04 0803 	add.w	r8, r4, r3
 8011c00:	f000 fb06 	bl	8012210 <_sbrk_r>
 8011c04:	4580      	cmp	r8, r0
 8011c06:	d13a      	bne.n	8011c7e <_malloc_r+0xd2>
 8011c08:	6821      	ldr	r1, [r4, #0]
 8011c0a:	3503      	adds	r5, #3
 8011c0c:	1a6d      	subs	r5, r5, r1
 8011c0e:	f025 0503 	bic.w	r5, r5, #3
 8011c12:	3508      	adds	r5, #8
 8011c14:	2d0c      	cmp	r5, #12
 8011c16:	bf38      	it	cc
 8011c18:	250c      	movcc	r5, #12
 8011c1a:	4629      	mov	r1, r5
 8011c1c:	4638      	mov	r0, r7
 8011c1e:	f7ff ffa5 	bl	8011b6c <sbrk_aligned>
 8011c22:	3001      	adds	r0, #1
 8011c24:	d02b      	beq.n	8011c7e <_malloc_r+0xd2>
 8011c26:	6823      	ldr	r3, [r4, #0]
 8011c28:	442b      	add	r3, r5
 8011c2a:	6023      	str	r3, [r4, #0]
 8011c2c:	e00e      	b.n	8011c4c <_malloc_r+0xa0>
 8011c2e:	6822      	ldr	r2, [r4, #0]
 8011c30:	1b52      	subs	r2, r2, r5
 8011c32:	d41e      	bmi.n	8011c72 <_malloc_r+0xc6>
 8011c34:	2a0b      	cmp	r2, #11
 8011c36:	d916      	bls.n	8011c66 <_malloc_r+0xba>
 8011c38:	1961      	adds	r1, r4, r5
 8011c3a:	42a3      	cmp	r3, r4
 8011c3c:	6025      	str	r5, [r4, #0]
 8011c3e:	bf18      	it	ne
 8011c40:	6059      	strne	r1, [r3, #4]
 8011c42:	6863      	ldr	r3, [r4, #4]
 8011c44:	bf08      	it	eq
 8011c46:	6031      	streq	r1, [r6, #0]
 8011c48:	5162      	str	r2, [r4, r5]
 8011c4a:	604b      	str	r3, [r1, #4]
 8011c4c:	4638      	mov	r0, r7
 8011c4e:	f104 060b 	add.w	r6, r4, #11
 8011c52:	f000 fe17 	bl	8012884 <__malloc_unlock>
 8011c56:	f026 0607 	bic.w	r6, r6, #7
 8011c5a:	1d23      	adds	r3, r4, #4
 8011c5c:	1af2      	subs	r2, r6, r3
 8011c5e:	d0b6      	beq.n	8011bce <_malloc_r+0x22>
 8011c60:	1b9b      	subs	r3, r3, r6
 8011c62:	50a3      	str	r3, [r4, r2]
 8011c64:	e7b3      	b.n	8011bce <_malloc_r+0x22>
 8011c66:	6862      	ldr	r2, [r4, #4]
 8011c68:	42a3      	cmp	r3, r4
 8011c6a:	bf0c      	ite	eq
 8011c6c:	6032      	streq	r2, [r6, #0]
 8011c6e:	605a      	strne	r2, [r3, #4]
 8011c70:	e7ec      	b.n	8011c4c <_malloc_r+0xa0>
 8011c72:	4623      	mov	r3, r4
 8011c74:	6864      	ldr	r4, [r4, #4]
 8011c76:	e7b2      	b.n	8011bde <_malloc_r+0x32>
 8011c78:	4634      	mov	r4, r6
 8011c7a:	6876      	ldr	r6, [r6, #4]
 8011c7c:	e7b9      	b.n	8011bf2 <_malloc_r+0x46>
 8011c7e:	230c      	movs	r3, #12
 8011c80:	603b      	str	r3, [r7, #0]
 8011c82:	4638      	mov	r0, r7
 8011c84:	f000 fdfe 	bl	8012884 <__malloc_unlock>
 8011c88:	e7a1      	b.n	8011bce <_malloc_r+0x22>
 8011c8a:	6025      	str	r5, [r4, #0]
 8011c8c:	e7de      	b.n	8011c4c <_malloc_r+0xa0>
 8011c8e:	bf00      	nop
 8011c90:	20001890 	.word	0x20001890

08011c94 <__ssputs_r>:
 8011c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c98:	688e      	ldr	r6, [r1, #8]
 8011c9a:	429e      	cmp	r6, r3
 8011c9c:	4682      	mov	sl, r0
 8011c9e:	460c      	mov	r4, r1
 8011ca0:	4690      	mov	r8, r2
 8011ca2:	461f      	mov	r7, r3
 8011ca4:	d838      	bhi.n	8011d18 <__ssputs_r+0x84>
 8011ca6:	898a      	ldrh	r2, [r1, #12]
 8011ca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011cac:	d032      	beq.n	8011d14 <__ssputs_r+0x80>
 8011cae:	6825      	ldr	r5, [r4, #0]
 8011cb0:	6909      	ldr	r1, [r1, #16]
 8011cb2:	eba5 0901 	sub.w	r9, r5, r1
 8011cb6:	6965      	ldr	r5, [r4, #20]
 8011cb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011cbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011cc0:	3301      	adds	r3, #1
 8011cc2:	444b      	add	r3, r9
 8011cc4:	106d      	asrs	r5, r5, #1
 8011cc6:	429d      	cmp	r5, r3
 8011cc8:	bf38      	it	cc
 8011cca:	461d      	movcc	r5, r3
 8011ccc:	0553      	lsls	r3, r2, #21
 8011cce:	d531      	bpl.n	8011d34 <__ssputs_r+0xa0>
 8011cd0:	4629      	mov	r1, r5
 8011cd2:	f7ff ff6b 	bl	8011bac <_malloc_r>
 8011cd6:	4606      	mov	r6, r0
 8011cd8:	b950      	cbnz	r0, 8011cf0 <__ssputs_r+0x5c>
 8011cda:	230c      	movs	r3, #12
 8011cdc:	f8ca 3000 	str.w	r3, [sl]
 8011ce0:	89a3      	ldrh	r3, [r4, #12]
 8011ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ce6:	81a3      	strh	r3, [r4, #12]
 8011ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8011cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cf0:	6921      	ldr	r1, [r4, #16]
 8011cf2:	464a      	mov	r2, r9
 8011cf4:	f7fc f9f6 	bl	800e0e4 <memcpy>
 8011cf8:	89a3      	ldrh	r3, [r4, #12]
 8011cfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d02:	81a3      	strh	r3, [r4, #12]
 8011d04:	6126      	str	r6, [r4, #16]
 8011d06:	6165      	str	r5, [r4, #20]
 8011d08:	444e      	add	r6, r9
 8011d0a:	eba5 0509 	sub.w	r5, r5, r9
 8011d0e:	6026      	str	r6, [r4, #0]
 8011d10:	60a5      	str	r5, [r4, #8]
 8011d12:	463e      	mov	r6, r7
 8011d14:	42be      	cmp	r6, r7
 8011d16:	d900      	bls.n	8011d1a <__ssputs_r+0x86>
 8011d18:	463e      	mov	r6, r7
 8011d1a:	6820      	ldr	r0, [r4, #0]
 8011d1c:	4632      	mov	r2, r6
 8011d1e:	4641      	mov	r1, r8
 8011d20:	f000 fd90 	bl	8012844 <memmove>
 8011d24:	68a3      	ldr	r3, [r4, #8]
 8011d26:	1b9b      	subs	r3, r3, r6
 8011d28:	60a3      	str	r3, [r4, #8]
 8011d2a:	6823      	ldr	r3, [r4, #0]
 8011d2c:	4433      	add	r3, r6
 8011d2e:	6023      	str	r3, [r4, #0]
 8011d30:	2000      	movs	r0, #0
 8011d32:	e7db      	b.n	8011cec <__ssputs_r+0x58>
 8011d34:	462a      	mov	r2, r5
 8011d36:	f000 fdab 	bl	8012890 <_realloc_r>
 8011d3a:	4606      	mov	r6, r0
 8011d3c:	2800      	cmp	r0, #0
 8011d3e:	d1e1      	bne.n	8011d04 <__ssputs_r+0x70>
 8011d40:	6921      	ldr	r1, [r4, #16]
 8011d42:	4650      	mov	r0, sl
 8011d44:	f7ff fec6 	bl	8011ad4 <_free_r>
 8011d48:	e7c7      	b.n	8011cda <__ssputs_r+0x46>
	...

08011d4c <_svfiprintf_r>:
 8011d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d50:	4698      	mov	r8, r3
 8011d52:	898b      	ldrh	r3, [r1, #12]
 8011d54:	061b      	lsls	r3, r3, #24
 8011d56:	b09d      	sub	sp, #116	; 0x74
 8011d58:	4607      	mov	r7, r0
 8011d5a:	460d      	mov	r5, r1
 8011d5c:	4614      	mov	r4, r2
 8011d5e:	d50e      	bpl.n	8011d7e <_svfiprintf_r+0x32>
 8011d60:	690b      	ldr	r3, [r1, #16]
 8011d62:	b963      	cbnz	r3, 8011d7e <_svfiprintf_r+0x32>
 8011d64:	2140      	movs	r1, #64	; 0x40
 8011d66:	f7ff ff21 	bl	8011bac <_malloc_r>
 8011d6a:	6028      	str	r0, [r5, #0]
 8011d6c:	6128      	str	r0, [r5, #16]
 8011d6e:	b920      	cbnz	r0, 8011d7a <_svfiprintf_r+0x2e>
 8011d70:	230c      	movs	r3, #12
 8011d72:	603b      	str	r3, [r7, #0]
 8011d74:	f04f 30ff 	mov.w	r0, #4294967295
 8011d78:	e0d1      	b.n	8011f1e <_svfiprintf_r+0x1d2>
 8011d7a:	2340      	movs	r3, #64	; 0x40
 8011d7c:	616b      	str	r3, [r5, #20]
 8011d7e:	2300      	movs	r3, #0
 8011d80:	9309      	str	r3, [sp, #36]	; 0x24
 8011d82:	2320      	movs	r3, #32
 8011d84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d88:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d8c:	2330      	movs	r3, #48	; 0x30
 8011d8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011f38 <_svfiprintf_r+0x1ec>
 8011d92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d96:	f04f 0901 	mov.w	r9, #1
 8011d9a:	4623      	mov	r3, r4
 8011d9c:	469a      	mov	sl, r3
 8011d9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011da2:	b10a      	cbz	r2, 8011da8 <_svfiprintf_r+0x5c>
 8011da4:	2a25      	cmp	r2, #37	; 0x25
 8011da6:	d1f9      	bne.n	8011d9c <_svfiprintf_r+0x50>
 8011da8:	ebba 0b04 	subs.w	fp, sl, r4
 8011dac:	d00b      	beq.n	8011dc6 <_svfiprintf_r+0x7a>
 8011dae:	465b      	mov	r3, fp
 8011db0:	4622      	mov	r2, r4
 8011db2:	4629      	mov	r1, r5
 8011db4:	4638      	mov	r0, r7
 8011db6:	f7ff ff6d 	bl	8011c94 <__ssputs_r>
 8011dba:	3001      	adds	r0, #1
 8011dbc:	f000 80aa 	beq.w	8011f14 <_svfiprintf_r+0x1c8>
 8011dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011dc2:	445a      	add	r2, fp
 8011dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8011dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	f000 80a2 	beq.w	8011f14 <_svfiprintf_r+0x1c8>
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8011dd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dda:	f10a 0a01 	add.w	sl, sl, #1
 8011dde:	9304      	str	r3, [sp, #16]
 8011de0:	9307      	str	r3, [sp, #28]
 8011de2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011de6:	931a      	str	r3, [sp, #104]	; 0x68
 8011de8:	4654      	mov	r4, sl
 8011dea:	2205      	movs	r2, #5
 8011dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011df0:	4851      	ldr	r0, [pc, #324]	; (8011f38 <_svfiprintf_r+0x1ec>)
 8011df2:	f7ee fa05 	bl	8000200 <memchr>
 8011df6:	9a04      	ldr	r2, [sp, #16]
 8011df8:	b9d8      	cbnz	r0, 8011e32 <_svfiprintf_r+0xe6>
 8011dfa:	06d0      	lsls	r0, r2, #27
 8011dfc:	bf44      	itt	mi
 8011dfe:	2320      	movmi	r3, #32
 8011e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e04:	0711      	lsls	r1, r2, #28
 8011e06:	bf44      	itt	mi
 8011e08:	232b      	movmi	r3, #43	; 0x2b
 8011e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8011e12:	2b2a      	cmp	r3, #42	; 0x2a
 8011e14:	d015      	beq.n	8011e42 <_svfiprintf_r+0xf6>
 8011e16:	9a07      	ldr	r2, [sp, #28]
 8011e18:	4654      	mov	r4, sl
 8011e1a:	2000      	movs	r0, #0
 8011e1c:	f04f 0c0a 	mov.w	ip, #10
 8011e20:	4621      	mov	r1, r4
 8011e22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e26:	3b30      	subs	r3, #48	; 0x30
 8011e28:	2b09      	cmp	r3, #9
 8011e2a:	d94e      	bls.n	8011eca <_svfiprintf_r+0x17e>
 8011e2c:	b1b0      	cbz	r0, 8011e5c <_svfiprintf_r+0x110>
 8011e2e:	9207      	str	r2, [sp, #28]
 8011e30:	e014      	b.n	8011e5c <_svfiprintf_r+0x110>
 8011e32:	eba0 0308 	sub.w	r3, r0, r8
 8011e36:	fa09 f303 	lsl.w	r3, r9, r3
 8011e3a:	4313      	orrs	r3, r2
 8011e3c:	9304      	str	r3, [sp, #16]
 8011e3e:	46a2      	mov	sl, r4
 8011e40:	e7d2      	b.n	8011de8 <_svfiprintf_r+0x9c>
 8011e42:	9b03      	ldr	r3, [sp, #12]
 8011e44:	1d19      	adds	r1, r3, #4
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	9103      	str	r1, [sp, #12]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	bfbb      	ittet	lt
 8011e4e:	425b      	neglt	r3, r3
 8011e50:	f042 0202 	orrlt.w	r2, r2, #2
 8011e54:	9307      	strge	r3, [sp, #28]
 8011e56:	9307      	strlt	r3, [sp, #28]
 8011e58:	bfb8      	it	lt
 8011e5a:	9204      	strlt	r2, [sp, #16]
 8011e5c:	7823      	ldrb	r3, [r4, #0]
 8011e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8011e60:	d10c      	bne.n	8011e7c <_svfiprintf_r+0x130>
 8011e62:	7863      	ldrb	r3, [r4, #1]
 8011e64:	2b2a      	cmp	r3, #42	; 0x2a
 8011e66:	d135      	bne.n	8011ed4 <_svfiprintf_r+0x188>
 8011e68:	9b03      	ldr	r3, [sp, #12]
 8011e6a:	1d1a      	adds	r2, r3, #4
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	9203      	str	r2, [sp, #12]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	bfb8      	it	lt
 8011e74:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e78:	3402      	adds	r4, #2
 8011e7a:	9305      	str	r3, [sp, #20]
 8011e7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011f48 <_svfiprintf_r+0x1fc>
 8011e80:	7821      	ldrb	r1, [r4, #0]
 8011e82:	2203      	movs	r2, #3
 8011e84:	4650      	mov	r0, sl
 8011e86:	f7ee f9bb 	bl	8000200 <memchr>
 8011e8a:	b140      	cbz	r0, 8011e9e <_svfiprintf_r+0x152>
 8011e8c:	2340      	movs	r3, #64	; 0x40
 8011e8e:	eba0 000a 	sub.w	r0, r0, sl
 8011e92:	fa03 f000 	lsl.w	r0, r3, r0
 8011e96:	9b04      	ldr	r3, [sp, #16]
 8011e98:	4303      	orrs	r3, r0
 8011e9a:	3401      	adds	r4, #1
 8011e9c:	9304      	str	r3, [sp, #16]
 8011e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ea2:	4826      	ldr	r0, [pc, #152]	; (8011f3c <_svfiprintf_r+0x1f0>)
 8011ea4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ea8:	2206      	movs	r2, #6
 8011eaa:	f7ee f9a9 	bl	8000200 <memchr>
 8011eae:	2800      	cmp	r0, #0
 8011eb0:	d038      	beq.n	8011f24 <_svfiprintf_r+0x1d8>
 8011eb2:	4b23      	ldr	r3, [pc, #140]	; (8011f40 <_svfiprintf_r+0x1f4>)
 8011eb4:	bb1b      	cbnz	r3, 8011efe <_svfiprintf_r+0x1b2>
 8011eb6:	9b03      	ldr	r3, [sp, #12]
 8011eb8:	3307      	adds	r3, #7
 8011eba:	f023 0307 	bic.w	r3, r3, #7
 8011ebe:	3308      	adds	r3, #8
 8011ec0:	9303      	str	r3, [sp, #12]
 8011ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ec4:	4433      	add	r3, r6
 8011ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ec8:	e767      	b.n	8011d9a <_svfiprintf_r+0x4e>
 8011eca:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ece:	460c      	mov	r4, r1
 8011ed0:	2001      	movs	r0, #1
 8011ed2:	e7a5      	b.n	8011e20 <_svfiprintf_r+0xd4>
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	3401      	adds	r4, #1
 8011ed8:	9305      	str	r3, [sp, #20]
 8011eda:	4619      	mov	r1, r3
 8011edc:	f04f 0c0a 	mov.w	ip, #10
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ee6:	3a30      	subs	r2, #48	; 0x30
 8011ee8:	2a09      	cmp	r2, #9
 8011eea:	d903      	bls.n	8011ef4 <_svfiprintf_r+0x1a8>
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d0c5      	beq.n	8011e7c <_svfiprintf_r+0x130>
 8011ef0:	9105      	str	r1, [sp, #20]
 8011ef2:	e7c3      	b.n	8011e7c <_svfiprintf_r+0x130>
 8011ef4:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ef8:	4604      	mov	r4, r0
 8011efa:	2301      	movs	r3, #1
 8011efc:	e7f0      	b.n	8011ee0 <_svfiprintf_r+0x194>
 8011efe:	ab03      	add	r3, sp, #12
 8011f00:	9300      	str	r3, [sp, #0]
 8011f02:	462a      	mov	r2, r5
 8011f04:	4b0f      	ldr	r3, [pc, #60]	; (8011f44 <_svfiprintf_r+0x1f8>)
 8011f06:	a904      	add	r1, sp, #16
 8011f08:	4638      	mov	r0, r7
 8011f0a:	f7fc f9a1 	bl	800e250 <_printf_float>
 8011f0e:	1c42      	adds	r2, r0, #1
 8011f10:	4606      	mov	r6, r0
 8011f12:	d1d6      	bne.n	8011ec2 <_svfiprintf_r+0x176>
 8011f14:	89ab      	ldrh	r3, [r5, #12]
 8011f16:	065b      	lsls	r3, r3, #25
 8011f18:	f53f af2c 	bmi.w	8011d74 <_svfiprintf_r+0x28>
 8011f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f1e:	b01d      	add	sp, #116	; 0x74
 8011f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f24:	ab03      	add	r3, sp, #12
 8011f26:	9300      	str	r3, [sp, #0]
 8011f28:	462a      	mov	r2, r5
 8011f2a:	4b06      	ldr	r3, [pc, #24]	; (8011f44 <_svfiprintf_r+0x1f8>)
 8011f2c:	a904      	add	r1, sp, #16
 8011f2e:	4638      	mov	r0, r7
 8011f30:	f7fc fc32 	bl	800e798 <_printf_i>
 8011f34:	e7eb      	b.n	8011f0e <_svfiprintf_r+0x1c2>
 8011f36:	bf00      	nop
 8011f38:	080136fc 	.word	0x080136fc
 8011f3c:	08013706 	.word	0x08013706
 8011f40:	0800e251 	.word	0x0800e251
 8011f44:	08011c95 	.word	0x08011c95
 8011f48:	08013702 	.word	0x08013702

08011f4c <__sfputc_r>:
 8011f4c:	6893      	ldr	r3, [r2, #8]
 8011f4e:	3b01      	subs	r3, #1
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	b410      	push	{r4}
 8011f54:	6093      	str	r3, [r2, #8]
 8011f56:	da08      	bge.n	8011f6a <__sfputc_r+0x1e>
 8011f58:	6994      	ldr	r4, [r2, #24]
 8011f5a:	42a3      	cmp	r3, r4
 8011f5c:	db01      	blt.n	8011f62 <__sfputc_r+0x16>
 8011f5e:	290a      	cmp	r1, #10
 8011f60:	d103      	bne.n	8011f6a <__sfputc_r+0x1e>
 8011f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f66:	f000 b977 	b.w	8012258 <__swbuf_r>
 8011f6a:	6813      	ldr	r3, [r2, #0]
 8011f6c:	1c58      	adds	r0, r3, #1
 8011f6e:	6010      	str	r0, [r2, #0]
 8011f70:	7019      	strb	r1, [r3, #0]
 8011f72:	4608      	mov	r0, r1
 8011f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f78:	4770      	bx	lr

08011f7a <__sfputs_r>:
 8011f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f7c:	4606      	mov	r6, r0
 8011f7e:	460f      	mov	r7, r1
 8011f80:	4614      	mov	r4, r2
 8011f82:	18d5      	adds	r5, r2, r3
 8011f84:	42ac      	cmp	r4, r5
 8011f86:	d101      	bne.n	8011f8c <__sfputs_r+0x12>
 8011f88:	2000      	movs	r0, #0
 8011f8a:	e007      	b.n	8011f9c <__sfputs_r+0x22>
 8011f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f90:	463a      	mov	r2, r7
 8011f92:	4630      	mov	r0, r6
 8011f94:	f7ff ffda 	bl	8011f4c <__sfputc_r>
 8011f98:	1c43      	adds	r3, r0, #1
 8011f9a:	d1f3      	bne.n	8011f84 <__sfputs_r+0xa>
 8011f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011fa0 <_vfiprintf_r>:
 8011fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa4:	460d      	mov	r5, r1
 8011fa6:	b09d      	sub	sp, #116	; 0x74
 8011fa8:	4614      	mov	r4, r2
 8011faa:	4698      	mov	r8, r3
 8011fac:	4606      	mov	r6, r0
 8011fae:	b118      	cbz	r0, 8011fb8 <_vfiprintf_r+0x18>
 8011fb0:	6983      	ldr	r3, [r0, #24]
 8011fb2:	b90b      	cbnz	r3, 8011fb8 <_vfiprintf_r+0x18>
 8011fb4:	f000 fb40 	bl	8012638 <__sinit>
 8011fb8:	4b89      	ldr	r3, [pc, #548]	; (80121e0 <_vfiprintf_r+0x240>)
 8011fba:	429d      	cmp	r5, r3
 8011fbc:	d11b      	bne.n	8011ff6 <_vfiprintf_r+0x56>
 8011fbe:	6875      	ldr	r5, [r6, #4]
 8011fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fc2:	07d9      	lsls	r1, r3, #31
 8011fc4:	d405      	bmi.n	8011fd2 <_vfiprintf_r+0x32>
 8011fc6:	89ab      	ldrh	r3, [r5, #12]
 8011fc8:	059a      	lsls	r2, r3, #22
 8011fca:	d402      	bmi.n	8011fd2 <_vfiprintf_r+0x32>
 8011fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fce:	f000 fbd1 	bl	8012774 <__retarget_lock_acquire_recursive>
 8011fd2:	89ab      	ldrh	r3, [r5, #12]
 8011fd4:	071b      	lsls	r3, r3, #28
 8011fd6:	d501      	bpl.n	8011fdc <_vfiprintf_r+0x3c>
 8011fd8:	692b      	ldr	r3, [r5, #16]
 8011fda:	b9eb      	cbnz	r3, 8012018 <_vfiprintf_r+0x78>
 8011fdc:	4629      	mov	r1, r5
 8011fde:	4630      	mov	r0, r6
 8011fe0:	f000 f99a 	bl	8012318 <__swsetup_r>
 8011fe4:	b1c0      	cbz	r0, 8012018 <_vfiprintf_r+0x78>
 8011fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fe8:	07dc      	lsls	r4, r3, #31
 8011fea:	d50e      	bpl.n	801200a <_vfiprintf_r+0x6a>
 8011fec:	f04f 30ff 	mov.w	r0, #4294967295
 8011ff0:	b01d      	add	sp, #116	; 0x74
 8011ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ff6:	4b7b      	ldr	r3, [pc, #492]	; (80121e4 <_vfiprintf_r+0x244>)
 8011ff8:	429d      	cmp	r5, r3
 8011ffa:	d101      	bne.n	8012000 <_vfiprintf_r+0x60>
 8011ffc:	68b5      	ldr	r5, [r6, #8]
 8011ffe:	e7df      	b.n	8011fc0 <_vfiprintf_r+0x20>
 8012000:	4b79      	ldr	r3, [pc, #484]	; (80121e8 <_vfiprintf_r+0x248>)
 8012002:	429d      	cmp	r5, r3
 8012004:	bf08      	it	eq
 8012006:	68f5      	ldreq	r5, [r6, #12]
 8012008:	e7da      	b.n	8011fc0 <_vfiprintf_r+0x20>
 801200a:	89ab      	ldrh	r3, [r5, #12]
 801200c:	0598      	lsls	r0, r3, #22
 801200e:	d4ed      	bmi.n	8011fec <_vfiprintf_r+0x4c>
 8012010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012012:	f000 fbb0 	bl	8012776 <__retarget_lock_release_recursive>
 8012016:	e7e9      	b.n	8011fec <_vfiprintf_r+0x4c>
 8012018:	2300      	movs	r3, #0
 801201a:	9309      	str	r3, [sp, #36]	; 0x24
 801201c:	2320      	movs	r3, #32
 801201e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012022:	f8cd 800c 	str.w	r8, [sp, #12]
 8012026:	2330      	movs	r3, #48	; 0x30
 8012028:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80121ec <_vfiprintf_r+0x24c>
 801202c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012030:	f04f 0901 	mov.w	r9, #1
 8012034:	4623      	mov	r3, r4
 8012036:	469a      	mov	sl, r3
 8012038:	f813 2b01 	ldrb.w	r2, [r3], #1
 801203c:	b10a      	cbz	r2, 8012042 <_vfiprintf_r+0xa2>
 801203e:	2a25      	cmp	r2, #37	; 0x25
 8012040:	d1f9      	bne.n	8012036 <_vfiprintf_r+0x96>
 8012042:	ebba 0b04 	subs.w	fp, sl, r4
 8012046:	d00b      	beq.n	8012060 <_vfiprintf_r+0xc0>
 8012048:	465b      	mov	r3, fp
 801204a:	4622      	mov	r2, r4
 801204c:	4629      	mov	r1, r5
 801204e:	4630      	mov	r0, r6
 8012050:	f7ff ff93 	bl	8011f7a <__sfputs_r>
 8012054:	3001      	adds	r0, #1
 8012056:	f000 80aa 	beq.w	80121ae <_vfiprintf_r+0x20e>
 801205a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801205c:	445a      	add	r2, fp
 801205e:	9209      	str	r2, [sp, #36]	; 0x24
 8012060:	f89a 3000 	ldrb.w	r3, [sl]
 8012064:	2b00      	cmp	r3, #0
 8012066:	f000 80a2 	beq.w	80121ae <_vfiprintf_r+0x20e>
 801206a:	2300      	movs	r3, #0
 801206c:	f04f 32ff 	mov.w	r2, #4294967295
 8012070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012074:	f10a 0a01 	add.w	sl, sl, #1
 8012078:	9304      	str	r3, [sp, #16]
 801207a:	9307      	str	r3, [sp, #28]
 801207c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012080:	931a      	str	r3, [sp, #104]	; 0x68
 8012082:	4654      	mov	r4, sl
 8012084:	2205      	movs	r2, #5
 8012086:	f814 1b01 	ldrb.w	r1, [r4], #1
 801208a:	4858      	ldr	r0, [pc, #352]	; (80121ec <_vfiprintf_r+0x24c>)
 801208c:	f7ee f8b8 	bl	8000200 <memchr>
 8012090:	9a04      	ldr	r2, [sp, #16]
 8012092:	b9d8      	cbnz	r0, 80120cc <_vfiprintf_r+0x12c>
 8012094:	06d1      	lsls	r1, r2, #27
 8012096:	bf44      	itt	mi
 8012098:	2320      	movmi	r3, #32
 801209a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801209e:	0713      	lsls	r3, r2, #28
 80120a0:	bf44      	itt	mi
 80120a2:	232b      	movmi	r3, #43	; 0x2b
 80120a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120a8:	f89a 3000 	ldrb.w	r3, [sl]
 80120ac:	2b2a      	cmp	r3, #42	; 0x2a
 80120ae:	d015      	beq.n	80120dc <_vfiprintf_r+0x13c>
 80120b0:	9a07      	ldr	r2, [sp, #28]
 80120b2:	4654      	mov	r4, sl
 80120b4:	2000      	movs	r0, #0
 80120b6:	f04f 0c0a 	mov.w	ip, #10
 80120ba:	4621      	mov	r1, r4
 80120bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120c0:	3b30      	subs	r3, #48	; 0x30
 80120c2:	2b09      	cmp	r3, #9
 80120c4:	d94e      	bls.n	8012164 <_vfiprintf_r+0x1c4>
 80120c6:	b1b0      	cbz	r0, 80120f6 <_vfiprintf_r+0x156>
 80120c8:	9207      	str	r2, [sp, #28]
 80120ca:	e014      	b.n	80120f6 <_vfiprintf_r+0x156>
 80120cc:	eba0 0308 	sub.w	r3, r0, r8
 80120d0:	fa09 f303 	lsl.w	r3, r9, r3
 80120d4:	4313      	orrs	r3, r2
 80120d6:	9304      	str	r3, [sp, #16]
 80120d8:	46a2      	mov	sl, r4
 80120da:	e7d2      	b.n	8012082 <_vfiprintf_r+0xe2>
 80120dc:	9b03      	ldr	r3, [sp, #12]
 80120de:	1d19      	adds	r1, r3, #4
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	9103      	str	r1, [sp, #12]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	bfbb      	ittet	lt
 80120e8:	425b      	neglt	r3, r3
 80120ea:	f042 0202 	orrlt.w	r2, r2, #2
 80120ee:	9307      	strge	r3, [sp, #28]
 80120f0:	9307      	strlt	r3, [sp, #28]
 80120f2:	bfb8      	it	lt
 80120f4:	9204      	strlt	r2, [sp, #16]
 80120f6:	7823      	ldrb	r3, [r4, #0]
 80120f8:	2b2e      	cmp	r3, #46	; 0x2e
 80120fa:	d10c      	bne.n	8012116 <_vfiprintf_r+0x176>
 80120fc:	7863      	ldrb	r3, [r4, #1]
 80120fe:	2b2a      	cmp	r3, #42	; 0x2a
 8012100:	d135      	bne.n	801216e <_vfiprintf_r+0x1ce>
 8012102:	9b03      	ldr	r3, [sp, #12]
 8012104:	1d1a      	adds	r2, r3, #4
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	9203      	str	r2, [sp, #12]
 801210a:	2b00      	cmp	r3, #0
 801210c:	bfb8      	it	lt
 801210e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012112:	3402      	adds	r4, #2
 8012114:	9305      	str	r3, [sp, #20]
 8012116:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80121fc <_vfiprintf_r+0x25c>
 801211a:	7821      	ldrb	r1, [r4, #0]
 801211c:	2203      	movs	r2, #3
 801211e:	4650      	mov	r0, sl
 8012120:	f7ee f86e 	bl	8000200 <memchr>
 8012124:	b140      	cbz	r0, 8012138 <_vfiprintf_r+0x198>
 8012126:	2340      	movs	r3, #64	; 0x40
 8012128:	eba0 000a 	sub.w	r0, r0, sl
 801212c:	fa03 f000 	lsl.w	r0, r3, r0
 8012130:	9b04      	ldr	r3, [sp, #16]
 8012132:	4303      	orrs	r3, r0
 8012134:	3401      	adds	r4, #1
 8012136:	9304      	str	r3, [sp, #16]
 8012138:	f814 1b01 	ldrb.w	r1, [r4], #1
 801213c:	482c      	ldr	r0, [pc, #176]	; (80121f0 <_vfiprintf_r+0x250>)
 801213e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012142:	2206      	movs	r2, #6
 8012144:	f7ee f85c 	bl	8000200 <memchr>
 8012148:	2800      	cmp	r0, #0
 801214a:	d03f      	beq.n	80121cc <_vfiprintf_r+0x22c>
 801214c:	4b29      	ldr	r3, [pc, #164]	; (80121f4 <_vfiprintf_r+0x254>)
 801214e:	bb1b      	cbnz	r3, 8012198 <_vfiprintf_r+0x1f8>
 8012150:	9b03      	ldr	r3, [sp, #12]
 8012152:	3307      	adds	r3, #7
 8012154:	f023 0307 	bic.w	r3, r3, #7
 8012158:	3308      	adds	r3, #8
 801215a:	9303      	str	r3, [sp, #12]
 801215c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801215e:	443b      	add	r3, r7
 8012160:	9309      	str	r3, [sp, #36]	; 0x24
 8012162:	e767      	b.n	8012034 <_vfiprintf_r+0x94>
 8012164:	fb0c 3202 	mla	r2, ip, r2, r3
 8012168:	460c      	mov	r4, r1
 801216a:	2001      	movs	r0, #1
 801216c:	e7a5      	b.n	80120ba <_vfiprintf_r+0x11a>
 801216e:	2300      	movs	r3, #0
 8012170:	3401      	adds	r4, #1
 8012172:	9305      	str	r3, [sp, #20]
 8012174:	4619      	mov	r1, r3
 8012176:	f04f 0c0a 	mov.w	ip, #10
 801217a:	4620      	mov	r0, r4
 801217c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012180:	3a30      	subs	r2, #48	; 0x30
 8012182:	2a09      	cmp	r2, #9
 8012184:	d903      	bls.n	801218e <_vfiprintf_r+0x1ee>
 8012186:	2b00      	cmp	r3, #0
 8012188:	d0c5      	beq.n	8012116 <_vfiprintf_r+0x176>
 801218a:	9105      	str	r1, [sp, #20]
 801218c:	e7c3      	b.n	8012116 <_vfiprintf_r+0x176>
 801218e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012192:	4604      	mov	r4, r0
 8012194:	2301      	movs	r3, #1
 8012196:	e7f0      	b.n	801217a <_vfiprintf_r+0x1da>
 8012198:	ab03      	add	r3, sp, #12
 801219a:	9300      	str	r3, [sp, #0]
 801219c:	462a      	mov	r2, r5
 801219e:	4b16      	ldr	r3, [pc, #88]	; (80121f8 <_vfiprintf_r+0x258>)
 80121a0:	a904      	add	r1, sp, #16
 80121a2:	4630      	mov	r0, r6
 80121a4:	f7fc f854 	bl	800e250 <_printf_float>
 80121a8:	4607      	mov	r7, r0
 80121aa:	1c78      	adds	r0, r7, #1
 80121ac:	d1d6      	bne.n	801215c <_vfiprintf_r+0x1bc>
 80121ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121b0:	07d9      	lsls	r1, r3, #31
 80121b2:	d405      	bmi.n	80121c0 <_vfiprintf_r+0x220>
 80121b4:	89ab      	ldrh	r3, [r5, #12]
 80121b6:	059a      	lsls	r2, r3, #22
 80121b8:	d402      	bmi.n	80121c0 <_vfiprintf_r+0x220>
 80121ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121bc:	f000 fadb 	bl	8012776 <__retarget_lock_release_recursive>
 80121c0:	89ab      	ldrh	r3, [r5, #12]
 80121c2:	065b      	lsls	r3, r3, #25
 80121c4:	f53f af12 	bmi.w	8011fec <_vfiprintf_r+0x4c>
 80121c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121ca:	e711      	b.n	8011ff0 <_vfiprintf_r+0x50>
 80121cc:	ab03      	add	r3, sp, #12
 80121ce:	9300      	str	r3, [sp, #0]
 80121d0:	462a      	mov	r2, r5
 80121d2:	4b09      	ldr	r3, [pc, #36]	; (80121f8 <_vfiprintf_r+0x258>)
 80121d4:	a904      	add	r1, sp, #16
 80121d6:	4630      	mov	r0, r6
 80121d8:	f7fc fade 	bl	800e798 <_printf_i>
 80121dc:	e7e4      	b.n	80121a8 <_vfiprintf_r+0x208>
 80121de:	bf00      	nop
 80121e0:	08013730 	.word	0x08013730
 80121e4:	08013750 	.word	0x08013750
 80121e8:	08013710 	.word	0x08013710
 80121ec:	080136fc 	.word	0x080136fc
 80121f0:	08013706 	.word	0x08013706
 80121f4:	0800e251 	.word	0x0800e251
 80121f8:	08011f7b 	.word	0x08011f7b
 80121fc:	08013702 	.word	0x08013702

08012200 <nan>:
 8012200:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012208 <nan+0x8>
 8012204:	4770      	bx	lr
 8012206:	bf00      	nop
 8012208:	00000000 	.word	0x00000000
 801220c:	7ff80000 	.word	0x7ff80000

08012210 <_sbrk_r>:
 8012210:	b538      	push	{r3, r4, r5, lr}
 8012212:	4d06      	ldr	r5, [pc, #24]	; (801222c <_sbrk_r+0x1c>)
 8012214:	2300      	movs	r3, #0
 8012216:	4604      	mov	r4, r0
 8012218:	4608      	mov	r0, r1
 801221a:	602b      	str	r3, [r5, #0]
 801221c:	f7f2 fc56 	bl	8004acc <_sbrk>
 8012220:	1c43      	adds	r3, r0, #1
 8012222:	d102      	bne.n	801222a <_sbrk_r+0x1a>
 8012224:	682b      	ldr	r3, [r5, #0]
 8012226:	b103      	cbz	r3, 801222a <_sbrk_r+0x1a>
 8012228:	6023      	str	r3, [r4, #0]
 801222a:	bd38      	pop	{r3, r4, r5, pc}
 801222c:	2000189c 	.word	0x2000189c

08012230 <strncmp>:
 8012230:	b510      	push	{r4, lr}
 8012232:	b17a      	cbz	r2, 8012254 <strncmp+0x24>
 8012234:	4603      	mov	r3, r0
 8012236:	3901      	subs	r1, #1
 8012238:	1884      	adds	r4, r0, r2
 801223a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801223e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012242:	4290      	cmp	r0, r2
 8012244:	d101      	bne.n	801224a <strncmp+0x1a>
 8012246:	42a3      	cmp	r3, r4
 8012248:	d101      	bne.n	801224e <strncmp+0x1e>
 801224a:	1a80      	subs	r0, r0, r2
 801224c:	bd10      	pop	{r4, pc}
 801224e:	2800      	cmp	r0, #0
 8012250:	d1f3      	bne.n	801223a <strncmp+0xa>
 8012252:	e7fa      	b.n	801224a <strncmp+0x1a>
 8012254:	4610      	mov	r0, r2
 8012256:	e7f9      	b.n	801224c <strncmp+0x1c>

08012258 <__swbuf_r>:
 8012258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801225a:	460e      	mov	r6, r1
 801225c:	4614      	mov	r4, r2
 801225e:	4605      	mov	r5, r0
 8012260:	b118      	cbz	r0, 801226a <__swbuf_r+0x12>
 8012262:	6983      	ldr	r3, [r0, #24]
 8012264:	b90b      	cbnz	r3, 801226a <__swbuf_r+0x12>
 8012266:	f000 f9e7 	bl	8012638 <__sinit>
 801226a:	4b21      	ldr	r3, [pc, #132]	; (80122f0 <__swbuf_r+0x98>)
 801226c:	429c      	cmp	r4, r3
 801226e:	d12b      	bne.n	80122c8 <__swbuf_r+0x70>
 8012270:	686c      	ldr	r4, [r5, #4]
 8012272:	69a3      	ldr	r3, [r4, #24]
 8012274:	60a3      	str	r3, [r4, #8]
 8012276:	89a3      	ldrh	r3, [r4, #12]
 8012278:	071a      	lsls	r2, r3, #28
 801227a:	d52f      	bpl.n	80122dc <__swbuf_r+0x84>
 801227c:	6923      	ldr	r3, [r4, #16]
 801227e:	b36b      	cbz	r3, 80122dc <__swbuf_r+0x84>
 8012280:	6923      	ldr	r3, [r4, #16]
 8012282:	6820      	ldr	r0, [r4, #0]
 8012284:	1ac0      	subs	r0, r0, r3
 8012286:	6963      	ldr	r3, [r4, #20]
 8012288:	b2f6      	uxtb	r6, r6
 801228a:	4283      	cmp	r3, r0
 801228c:	4637      	mov	r7, r6
 801228e:	dc04      	bgt.n	801229a <__swbuf_r+0x42>
 8012290:	4621      	mov	r1, r4
 8012292:	4628      	mov	r0, r5
 8012294:	f000 f93c 	bl	8012510 <_fflush_r>
 8012298:	bb30      	cbnz	r0, 80122e8 <__swbuf_r+0x90>
 801229a:	68a3      	ldr	r3, [r4, #8]
 801229c:	3b01      	subs	r3, #1
 801229e:	60a3      	str	r3, [r4, #8]
 80122a0:	6823      	ldr	r3, [r4, #0]
 80122a2:	1c5a      	adds	r2, r3, #1
 80122a4:	6022      	str	r2, [r4, #0]
 80122a6:	701e      	strb	r6, [r3, #0]
 80122a8:	6963      	ldr	r3, [r4, #20]
 80122aa:	3001      	adds	r0, #1
 80122ac:	4283      	cmp	r3, r0
 80122ae:	d004      	beq.n	80122ba <__swbuf_r+0x62>
 80122b0:	89a3      	ldrh	r3, [r4, #12]
 80122b2:	07db      	lsls	r3, r3, #31
 80122b4:	d506      	bpl.n	80122c4 <__swbuf_r+0x6c>
 80122b6:	2e0a      	cmp	r6, #10
 80122b8:	d104      	bne.n	80122c4 <__swbuf_r+0x6c>
 80122ba:	4621      	mov	r1, r4
 80122bc:	4628      	mov	r0, r5
 80122be:	f000 f927 	bl	8012510 <_fflush_r>
 80122c2:	b988      	cbnz	r0, 80122e8 <__swbuf_r+0x90>
 80122c4:	4638      	mov	r0, r7
 80122c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122c8:	4b0a      	ldr	r3, [pc, #40]	; (80122f4 <__swbuf_r+0x9c>)
 80122ca:	429c      	cmp	r4, r3
 80122cc:	d101      	bne.n	80122d2 <__swbuf_r+0x7a>
 80122ce:	68ac      	ldr	r4, [r5, #8]
 80122d0:	e7cf      	b.n	8012272 <__swbuf_r+0x1a>
 80122d2:	4b09      	ldr	r3, [pc, #36]	; (80122f8 <__swbuf_r+0xa0>)
 80122d4:	429c      	cmp	r4, r3
 80122d6:	bf08      	it	eq
 80122d8:	68ec      	ldreq	r4, [r5, #12]
 80122da:	e7ca      	b.n	8012272 <__swbuf_r+0x1a>
 80122dc:	4621      	mov	r1, r4
 80122de:	4628      	mov	r0, r5
 80122e0:	f000 f81a 	bl	8012318 <__swsetup_r>
 80122e4:	2800      	cmp	r0, #0
 80122e6:	d0cb      	beq.n	8012280 <__swbuf_r+0x28>
 80122e8:	f04f 37ff 	mov.w	r7, #4294967295
 80122ec:	e7ea      	b.n	80122c4 <__swbuf_r+0x6c>
 80122ee:	bf00      	nop
 80122f0:	08013730 	.word	0x08013730
 80122f4:	08013750 	.word	0x08013750
 80122f8:	08013710 	.word	0x08013710

080122fc <__ascii_wctomb>:
 80122fc:	b149      	cbz	r1, 8012312 <__ascii_wctomb+0x16>
 80122fe:	2aff      	cmp	r2, #255	; 0xff
 8012300:	bf85      	ittet	hi
 8012302:	238a      	movhi	r3, #138	; 0x8a
 8012304:	6003      	strhi	r3, [r0, #0]
 8012306:	700a      	strbls	r2, [r1, #0]
 8012308:	f04f 30ff 	movhi.w	r0, #4294967295
 801230c:	bf98      	it	ls
 801230e:	2001      	movls	r0, #1
 8012310:	4770      	bx	lr
 8012312:	4608      	mov	r0, r1
 8012314:	4770      	bx	lr
	...

08012318 <__swsetup_r>:
 8012318:	4b32      	ldr	r3, [pc, #200]	; (80123e4 <__swsetup_r+0xcc>)
 801231a:	b570      	push	{r4, r5, r6, lr}
 801231c:	681d      	ldr	r5, [r3, #0]
 801231e:	4606      	mov	r6, r0
 8012320:	460c      	mov	r4, r1
 8012322:	b125      	cbz	r5, 801232e <__swsetup_r+0x16>
 8012324:	69ab      	ldr	r3, [r5, #24]
 8012326:	b913      	cbnz	r3, 801232e <__swsetup_r+0x16>
 8012328:	4628      	mov	r0, r5
 801232a:	f000 f985 	bl	8012638 <__sinit>
 801232e:	4b2e      	ldr	r3, [pc, #184]	; (80123e8 <__swsetup_r+0xd0>)
 8012330:	429c      	cmp	r4, r3
 8012332:	d10f      	bne.n	8012354 <__swsetup_r+0x3c>
 8012334:	686c      	ldr	r4, [r5, #4]
 8012336:	89a3      	ldrh	r3, [r4, #12]
 8012338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801233c:	0719      	lsls	r1, r3, #28
 801233e:	d42c      	bmi.n	801239a <__swsetup_r+0x82>
 8012340:	06dd      	lsls	r5, r3, #27
 8012342:	d411      	bmi.n	8012368 <__swsetup_r+0x50>
 8012344:	2309      	movs	r3, #9
 8012346:	6033      	str	r3, [r6, #0]
 8012348:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801234c:	81a3      	strh	r3, [r4, #12]
 801234e:	f04f 30ff 	mov.w	r0, #4294967295
 8012352:	e03e      	b.n	80123d2 <__swsetup_r+0xba>
 8012354:	4b25      	ldr	r3, [pc, #148]	; (80123ec <__swsetup_r+0xd4>)
 8012356:	429c      	cmp	r4, r3
 8012358:	d101      	bne.n	801235e <__swsetup_r+0x46>
 801235a:	68ac      	ldr	r4, [r5, #8]
 801235c:	e7eb      	b.n	8012336 <__swsetup_r+0x1e>
 801235e:	4b24      	ldr	r3, [pc, #144]	; (80123f0 <__swsetup_r+0xd8>)
 8012360:	429c      	cmp	r4, r3
 8012362:	bf08      	it	eq
 8012364:	68ec      	ldreq	r4, [r5, #12]
 8012366:	e7e6      	b.n	8012336 <__swsetup_r+0x1e>
 8012368:	0758      	lsls	r0, r3, #29
 801236a:	d512      	bpl.n	8012392 <__swsetup_r+0x7a>
 801236c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801236e:	b141      	cbz	r1, 8012382 <__swsetup_r+0x6a>
 8012370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012374:	4299      	cmp	r1, r3
 8012376:	d002      	beq.n	801237e <__swsetup_r+0x66>
 8012378:	4630      	mov	r0, r6
 801237a:	f7ff fbab 	bl	8011ad4 <_free_r>
 801237e:	2300      	movs	r3, #0
 8012380:	6363      	str	r3, [r4, #52]	; 0x34
 8012382:	89a3      	ldrh	r3, [r4, #12]
 8012384:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012388:	81a3      	strh	r3, [r4, #12]
 801238a:	2300      	movs	r3, #0
 801238c:	6063      	str	r3, [r4, #4]
 801238e:	6923      	ldr	r3, [r4, #16]
 8012390:	6023      	str	r3, [r4, #0]
 8012392:	89a3      	ldrh	r3, [r4, #12]
 8012394:	f043 0308 	orr.w	r3, r3, #8
 8012398:	81a3      	strh	r3, [r4, #12]
 801239a:	6923      	ldr	r3, [r4, #16]
 801239c:	b94b      	cbnz	r3, 80123b2 <__swsetup_r+0x9a>
 801239e:	89a3      	ldrh	r3, [r4, #12]
 80123a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80123a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123a8:	d003      	beq.n	80123b2 <__swsetup_r+0x9a>
 80123aa:	4621      	mov	r1, r4
 80123ac:	4630      	mov	r0, r6
 80123ae:	f000 fa09 	bl	80127c4 <__smakebuf_r>
 80123b2:	89a0      	ldrh	r0, [r4, #12]
 80123b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80123b8:	f010 0301 	ands.w	r3, r0, #1
 80123bc:	d00a      	beq.n	80123d4 <__swsetup_r+0xbc>
 80123be:	2300      	movs	r3, #0
 80123c0:	60a3      	str	r3, [r4, #8]
 80123c2:	6963      	ldr	r3, [r4, #20]
 80123c4:	425b      	negs	r3, r3
 80123c6:	61a3      	str	r3, [r4, #24]
 80123c8:	6923      	ldr	r3, [r4, #16]
 80123ca:	b943      	cbnz	r3, 80123de <__swsetup_r+0xc6>
 80123cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80123d0:	d1ba      	bne.n	8012348 <__swsetup_r+0x30>
 80123d2:	bd70      	pop	{r4, r5, r6, pc}
 80123d4:	0781      	lsls	r1, r0, #30
 80123d6:	bf58      	it	pl
 80123d8:	6963      	ldrpl	r3, [r4, #20]
 80123da:	60a3      	str	r3, [r4, #8]
 80123dc:	e7f4      	b.n	80123c8 <__swsetup_r+0xb0>
 80123de:	2000      	movs	r0, #0
 80123e0:	e7f7      	b.n	80123d2 <__swsetup_r+0xba>
 80123e2:	bf00      	nop
 80123e4:	20000024 	.word	0x20000024
 80123e8:	08013730 	.word	0x08013730
 80123ec:	08013750 	.word	0x08013750
 80123f0:	08013710 	.word	0x08013710

080123f4 <abort>:
 80123f4:	b508      	push	{r3, lr}
 80123f6:	2006      	movs	r0, #6
 80123f8:	f000 faa2 	bl	8012940 <raise>
 80123fc:	2001      	movs	r0, #1
 80123fe:	f7f2 faed 	bl	80049dc <_exit>
	...

08012404 <__sflush_r>:
 8012404:	898a      	ldrh	r2, [r1, #12]
 8012406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801240a:	4605      	mov	r5, r0
 801240c:	0710      	lsls	r0, r2, #28
 801240e:	460c      	mov	r4, r1
 8012410:	d458      	bmi.n	80124c4 <__sflush_r+0xc0>
 8012412:	684b      	ldr	r3, [r1, #4]
 8012414:	2b00      	cmp	r3, #0
 8012416:	dc05      	bgt.n	8012424 <__sflush_r+0x20>
 8012418:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801241a:	2b00      	cmp	r3, #0
 801241c:	dc02      	bgt.n	8012424 <__sflush_r+0x20>
 801241e:	2000      	movs	r0, #0
 8012420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012426:	2e00      	cmp	r6, #0
 8012428:	d0f9      	beq.n	801241e <__sflush_r+0x1a>
 801242a:	2300      	movs	r3, #0
 801242c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012430:	682f      	ldr	r7, [r5, #0]
 8012432:	602b      	str	r3, [r5, #0]
 8012434:	d032      	beq.n	801249c <__sflush_r+0x98>
 8012436:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012438:	89a3      	ldrh	r3, [r4, #12]
 801243a:	075a      	lsls	r2, r3, #29
 801243c:	d505      	bpl.n	801244a <__sflush_r+0x46>
 801243e:	6863      	ldr	r3, [r4, #4]
 8012440:	1ac0      	subs	r0, r0, r3
 8012442:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012444:	b10b      	cbz	r3, 801244a <__sflush_r+0x46>
 8012446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012448:	1ac0      	subs	r0, r0, r3
 801244a:	2300      	movs	r3, #0
 801244c:	4602      	mov	r2, r0
 801244e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012450:	6a21      	ldr	r1, [r4, #32]
 8012452:	4628      	mov	r0, r5
 8012454:	47b0      	blx	r6
 8012456:	1c43      	adds	r3, r0, #1
 8012458:	89a3      	ldrh	r3, [r4, #12]
 801245a:	d106      	bne.n	801246a <__sflush_r+0x66>
 801245c:	6829      	ldr	r1, [r5, #0]
 801245e:	291d      	cmp	r1, #29
 8012460:	d82c      	bhi.n	80124bc <__sflush_r+0xb8>
 8012462:	4a2a      	ldr	r2, [pc, #168]	; (801250c <__sflush_r+0x108>)
 8012464:	40ca      	lsrs	r2, r1
 8012466:	07d6      	lsls	r6, r2, #31
 8012468:	d528      	bpl.n	80124bc <__sflush_r+0xb8>
 801246a:	2200      	movs	r2, #0
 801246c:	6062      	str	r2, [r4, #4]
 801246e:	04d9      	lsls	r1, r3, #19
 8012470:	6922      	ldr	r2, [r4, #16]
 8012472:	6022      	str	r2, [r4, #0]
 8012474:	d504      	bpl.n	8012480 <__sflush_r+0x7c>
 8012476:	1c42      	adds	r2, r0, #1
 8012478:	d101      	bne.n	801247e <__sflush_r+0x7a>
 801247a:	682b      	ldr	r3, [r5, #0]
 801247c:	b903      	cbnz	r3, 8012480 <__sflush_r+0x7c>
 801247e:	6560      	str	r0, [r4, #84]	; 0x54
 8012480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012482:	602f      	str	r7, [r5, #0]
 8012484:	2900      	cmp	r1, #0
 8012486:	d0ca      	beq.n	801241e <__sflush_r+0x1a>
 8012488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801248c:	4299      	cmp	r1, r3
 801248e:	d002      	beq.n	8012496 <__sflush_r+0x92>
 8012490:	4628      	mov	r0, r5
 8012492:	f7ff fb1f 	bl	8011ad4 <_free_r>
 8012496:	2000      	movs	r0, #0
 8012498:	6360      	str	r0, [r4, #52]	; 0x34
 801249a:	e7c1      	b.n	8012420 <__sflush_r+0x1c>
 801249c:	6a21      	ldr	r1, [r4, #32]
 801249e:	2301      	movs	r3, #1
 80124a0:	4628      	mov	r0, r5
 80124a2:	47b0      	blx	r6
 80124a4:	1c41      	adds	r1, r0, #1
 80124a6:	d1c7      	bne.n	8012438 <__sflush_r+0x34>
 80124a8:	682b      	ldr	r3, [r5, #0]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d0c4      	beq.n	8012438 <__sflush_r+0x34>
 80124ae:	2b1d      	cmp	r3, #29
 80124b0:	d001      	beq.n	80124b6 <__sflush_r+0xb2>
 80124b2:	2b16      	cmp	r3, #22
 80124b4:	d101      	bne.n	80124ba <__sflush_r+0xb6>
 80124b6:	602f      	str	r7, [r5, #0]
 80124b8:	e7b1      	b.n	801241e <__sflush_r+0x1a>
 80124ba:	89a3      	ldrh	r3, [r4, #12]
 80124bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124c0:	81a3      	strh	r3, [r4, #12]
 80124c2:	e7ad      	b.n	8012420 <__sflush_r+0x1c>
 80124c4:	690f      	ldr	r7, [r1, #16]
 80124c6:	2f00      	cmp	r7, #0
 80124c8:	d0a9      	beq.n	801241e <__sflush_r+0x1a>
 80124ca:	0793      	lsls	r3, r2, #30
 80124cc:	680e      	ldr	r6, [r1, #0]
 80124ce:	bf08      	it	eq
 80124d0:	694b      	ldreq	r3, [r1, #20]
 80124d2:	600f      	str	r7, [r1, #0]
 80124d4:	bf18      	it	ne
 80124d6:	2300      	movne	r3, #0
 80124d8:	eba6 0807 	sub.w	r8, r6, r7
 80124dc:	608b      	str	r3, [r1, #8]
 80124de:	f1b8 0f00 	cmp.w	r8, #0
 80124e2:	dd9c      	ble.n	801241e <__sflush_r+0x1a>
 80124e4:	6a21      	ldr	r1, [r4, #32]
 80124e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80124e8:	4643      	mov	r3, r8
 80124ea:	463a      	mov	r2, r7
 80124ec:	4628      	mov	r0, r5
 80124ee:	47b0      	blx	r6
 80124f0:	2800      	cmp	r0, #0
 80124f2:	dc06      	bgt.n	8012502 <__sflush_r+0xfe>
 80124f4:	89a3      	ldrh	r3, [r4, #12]
 80124f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124fa:	81a3      	strh	r3, [r4, #12]
 80124fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012500:	e78e      	b.n	8012420 <__sflush_r+0x1c>
 8012502:	4407      	add	r7, r0
 8012504:	eba8 0800 	sub.w	r8, r8, r0
 8012508:	e7e9      	b.n	80124de <__sflush_r+0xda>
 801250a:	bf00      	nop
 801250c:	20400001 	.word	0x20400001

08012510 <_fflush_r>:
 8012510:	b538      	push	{r3, r4, r5, lr}
 8012512:	690b      	ldr	r3, [r1, #16]
 8012514:	4605      	mov	r5, r0
 8012516:	460c      	mov	r4, r1
 8012518:	b913      	cbnz	r3, 8012520 <_fflush_r+0x10>
 801251a:	2500      	movs	r5, #0
 801251c:	4628      	mov	r0, r5
 801251e:	bd38      	pop	{r3, r4, r5, pc}
 8012520:	b118      	cbz	r0, 801252a <_fflush_r+0x1a>
 8012522:	6983      	ldr	r3, [r0, #24]
 8012524:	b90b      	cbnz	r3, 801252a <_fflush_r+0x1a>
 8012526:	f000 f887 	bl	8012638 <__sinit>
 801252a:	4b14      	ldr	r3, [pc, #80]	; (801257c <_fflush_r+0x6c>)
 801252c:	429c      	cmp	r4, r3
 801252e:	d11b      	bne.n	8012568 <_fflush_r+0x58>
 8012530:	686c      	ldr	r4, [r5, #4]
 8012532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d0ef      	beq.n	801251a <_fflush_r+0xa>
 801253a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801253c:	07d0      	lsls	r0, r2, #31
 801253e:	d404      	bmi.n	801254a <_fflush_r+0x3a>
 8012540:	0599      	lsls	r1, r3, #22
 8012542:	d402      	bmi.n	801254a <_fflush_r+0x3a>
 8012544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012546:	f000 f915 	bl	8012774 <__retarget_lock_acquire_recursive>
 801254a:	4628      	mov	r0, r5
 801254c:	4621      	mov	r1, r4
 801254e:	f7ff ff59 	bl	8012404 <__sflush_r>
 8012552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012554:	07da      	lsls	r2, r3, #31
 8012556:	4605      	mov	r5, r0
 8012558:	d4e0      	bmi.n	801251c <_fflush_r+0xc>
 801255a:	89a3      	ldrh	r3, [r4, #12]
 801255c:	059b      	lsls	r3, r3, #22
 801255e:	d4dd      	bmi.n	801251c <_fflush_r+0xc>
 8012560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012562:	f000 f908 	bl	8012776 <__retarget_lock_release_recursive>
 8012566:	e7d9      	b.n	801251c <_fflush_r+0xc>
 8012568:	4b05      	ldr	r3, [pc, #20]	; (8012580 <_fflush_r+0x70>)
 801256a:	429c      	cmp	r4, r3
 801256c:	d101      	bne.n	8012572 <_fflush_r+0x62>
 801256e:	68ac      	ldr	r4, [r5, #8]
 8012570:	e7df      	b.n	8012532 <_fflush_r+0x22>
 8012572:	4b04      	ldr	r3, [pc, #16]	; (8012584 <_fflush_r+0x74>)
 8012574:	429c      	cmp	r4, r3
 8012576:	bf08      	it	eq
 8012578:	68ec      	ldreq	r4, [r5, #12]
 801257a:	e7da      	b.n	8012532 <_fflush_r+0x22>
 801257c:	08013730 	.word	0x08013730
 8012580:	08013750 	.word	0x08013750
 8012584:	08013710 	.word	0x08013710

08012588 <std>:
 8012588:	2300      	movs	r3, #0
 801258a:	b510      	push	{r4, lr}
 801258c:	4604      	mov	r4, r0
 801258e:	e9c0 3300 	strd	r3, r3, [r0]
 8012592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012596:	6083      	str	r3, [r0, #8]
 8012598:	8181      	strh	r1, [r0, #12]
 801259a:	6643      	str	r3, [r0, #100]	; 0x64
 801259c:	81c2      	strh	r2, [r0, #14]
 801259e:	6183      	str	r3, [r0, #24]
 80125a0:	4619      	mov	r1, r3
 80125a2:	2208      	movs	r2, #8
 80125a4:	305c      	adds	r0, #92	; 0x5c
 80125a6:	f7fb fdab 	bl	800e100 <memset>
 80125aa:	4b05      	ldr	r3, [pc, #20]	; (80125c0 <std+0x38>)
 80125ac:	6263      	str	r3, [r4, #36]	; 0x24
 80125ae:	4b05      	ldr	r3, [pc, #20]	; (80125c4 <std+0x3c>)
 80125b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80125b2:	4b05      	ldr	r3, [pc, #20]	; (80125c8 <std+0x40>)
 80125b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80125b6:	4b05      	ldr	r3, [pc, #20]	; (80125cc <std+0x44>)
 80125b8:	6224      	str	r4, [r4, #32]
 80125ba:	6323      	str	r3, [r4, #48]	; 0x30
 80125bc:	bd10      	pop	{r4, pc}
 80125be:	bf00      	nop
 80125c0:	08012979 	.word	0x08012979
 80125c4:	0801299b 	.word	0x0801299b
 80125c8:	080129d3 	.word	0x080129d3
 80125cc:	080129f7 	.word	0x080129f7

080125d0 <_cleanup_r>:
 80125d0:	4901      	ldr	r1, [pc, #4]	; (80125d8 <_cleanup_r+0x8>)
 80125d2:	f000 b8af 	b.w	8012734 <_fwalk_reent>
 80125d6:	bf00      	nop
 80125d8:	08012511 	.word	0x08012511

080125dc <__sfmoreglue>:
 80125dc:	b570      	push	{r4, r5, r6, lr}
 80125de:	2268      	movs	r2, #104	; 0x68
 80125e0:	1e4d      	subs	r5, r1, #1
 80125e2:	4355      	muls	r5, r2
 80125e4:	460e      	mov	r6, r1
 80125e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80125ea:	f7ff fadf 	bl	8011bac <_malloc_r>
 80125ee:	4604      	mov	r4, r0
 80125f0:	b140      	cbz	r0, 8012604 <__sfmoreglue+0x28>
 80125f2:	2100      	movs	r1, #0
 80125f4:	e9c0 1600 	strd	r1, r6, [r0]
 80125f8:	300c      	adds	r0, #12
 80125fa:	60a0      	str	r0, [r4, #8]
 80125fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012600:	f7fb fd7e 	bl	800e100 <memset>
 8012604:	4620      	mov	r0, r4
 8012606:	bd70      	pop	{r4, r5, r6, pc}

08012608 <__sfp_lock_acquire>:
 8012608:	4801      	ldr	r0, [pc, #4]	; (8012610 <__sfp_lock_acquire+0x8>)
 801260a:	f000 b8b3 	b.w	8012774 <__retarget_lock_acquire_recursive>
 801260e:	bf00      	nop
 8012610:	20001899 	.word	0x20001899

08012614 <__sfp_lock_release>:
 8012614:	4801      	ldr	r0, [pc, #4]	; (801261c <__sfp_lock_release+0x8>)
 8012616:	f000 b8ae 	b.w	8012776 <__retarget_lock_release_recursive>
 801261a:	bf00      	nop
 801261c:	20001899 	.word	0x20001899

08012620 <__sinit_lock_acquire>:
 8012620:	4801      	ldr	r0, [pc, #4]	; (8012628 <__sinit_lock_acquire+0x8>)
 8012622:	f000 b8a7 	b.w	8012774 <__retarget_lock_acquire_recursive>
 8012626:	bf00      	nop
 8012628:	2000189a 	.word	0x2000189a

0801262c <__sinit_lock_release>:
 801262c:	4801      	ldr	r0, [pc, #4]	; (8012634 <__sinit_lock_release+0x8>)
 801262e:	f000 b8a2 	b.w	8012776 <__retarget_lock_release_recursive>
 8012632:	bf00      	nop
 8012634:	2000189a 	.word	0x2000189a

08012638 <__sinit>:
 8012638:	b510      	push	{r4, lr}
 801263a:	4604      	mov	r4, r0
 801263c:	f7ff fff0 	bl	8012620 <__sinit_lock_acquire>
 8012640:	69a3      	ldr	r3, [r4, #24]
 8012642:	b11b      	cbz	r3, 801264c <__sinit+0x14>
 8012644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012648:	f7ff bff0 	b.w	801262c <__sinit_lock_release>
 801264c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012650:	6523      	str	r3, [r4, #80]	; 0x50
 8012652:	4b13      	ldr	r3, [pc, #76]	; (80126a0 <__sinit+0x68>)
 8012654:	4a13      	ldr	r2, [pc, #76]	; (80126a4 <__sinit+0x6c>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	62a2      	str	r2, [r4, #40]	; 0x28
 801265a:	42a3      	cmp	r3, r4
 801265c:	bf04      	itt	eq
 801265e:	2301      	moveq	r3, #1
 8012660:	61a3      	streq	r3, [r4, #24]
 8012662:	4620      	mov	r0, r4
 8012664:	f000 f820 	bl	80126a8 <__sfp>
 8012668:	6060      	str	r0, [r4, #4]
 801266a:	4620      	mov	r0, r4
 801266c:	f000 f81c 	bl	80126a8 <__sfp>
 8012670:	60a0      	str	r0, [r4, #8]
 8012672:	4620      	mov	r0, r4
 8012674:	f000 f818 	bl	80126a8 <__sfp>
 8012678:	2200      	movs	r2, #0
 801267a:	60e0      	str	r0, [r4, #12]
 801267c:	2104      	movs	r1, #4
 801267e:	6860      	ldr	r0, [r4, #4]
 8012680:	f7ff ff82 	bl	8012588 <std>
 8012684:	68a0      	ldr	r0, [r4, #8]
 8012686:	2201      	movs	r2, #1
 8012688:	2109      	movs	r1, #9
 801268a:	f7ff ff7d 	bl	8012588 <std>
 801268e:	68e0      	ldr	r0, [r4, #12]
 8012690:	2202      	movs	r2, #2
 8012692:	2112      	movs	r1, #18
 8012694:	f7ff ff78 	bl	8012588 <std>
 8012698:	2301      	movs	r3, #1
 801269a:	61a3      	str	r3, [r4, #24]
 801269c:	e7d2      	b.n	8012644 <__sinit+0xc>
 801269e:	bf00      	nop
 80126a0:	0801326c 	.word	0x0801326c
 80126a4:	080125d1 	.word	0x080125d1

080126a8 <__sfp>:
 80126a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126aa:	4607      	mov	r7, r0
 80126ac:	f7ff ffac 	bl	8012608 <__sfp_lock_acquire>
 80126b0:	4b1e      	ldr	r3, [pc, #120]	; (801272c <__sfp+0x84>)
 80126b2:	681e      	ldr	r6, [r3, #0]
 80126b4:	69b3      	ldr	r3, [r6, #24]
 80126b6:	b913      	cbnz	r3, 80126be <__sfp+0x16>
 80126b8:	4630      	mov	r0, r6
 80126ba:	f7ff ffbd 	bl	8012638 <__sinit>
 80126be:	3648      	adds	r6, #72	; 0x48
 80126c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80126c4:	3b01      	subs	r3, #1
 80126c6:	d503      	bpl.n	80126d0 <__sfp+0x28>
 80126c8:	6833      	ldr	r3, [r6, #0]
 80126ca:	b30b      	cbz	r3, 8012710 <__sfp+0x68>
 80126cc:	6836      	ldr	r6, [r6, #0]
 80126ce:	e7f7      	b.n	80126c0 <__sfp+0x18>
 80126d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80126d4:	b9d5      	cbnz	r5, 801270c <__sfp+0x64>
 80126d6:	4b16      	ldr	r3, [pc, #88]	; (8012730 <__sfp+0x88>)
 80126d8:	60e3      	str	r3, [r4, #12]
 80126da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80126de:	6665      	str	r5, [r4, #100]	; 0x64
 80126e0:	f000 f847 	bl	8012772 <__retarget_lock_init_recursive>
 80126e4:	f7ff ff96 	bl	8012614 <__sfp_lock_release>
 80126e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80126ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80126f0:	6025      	str	r5, [r4, #0]
 80126f2:	61a5      	str	r5, [r4, #24]
 80126f4:	2208      	movs	r2, #8
 80126f6:	4629      	mov	r1, r5
 80126f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80126fc:	f7fb fd00 	bl	800e100 <memset>
 8012700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012708:	4620      	mov	r0, r4
 801270a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801270c:	3468      	adds	r4, #104	; 0x68
 801270e:	e7d9      	b.n	80126c4 <__sfp+0x1c>
 8012710:	2104      	movs	r1, #4
 8012712:	4638      	mov	r0, r7
 8012714:	f7ff ff62 	bl	80125dc <__sfmoreglue>
 8012718:	4604      	mov	r4, r0
 801271a:	6030      	str	r0, [r6, #0]
 801271c:	2800      	cmp	r0, #0
 801271e:	d1d5      	bne.n	80126cc <__sfp+0x24>
 8012720:	f7ff ff78 	bl	8012614 <__sfp_lock_release>
 8012724:	230c      	movs	r3, #12
 8012726:	603b      	str	r3, [r7, #0]
 8012728:	e7ee      	b.n	8012708 <__sfp+0x60>
 801272a:	bf00      	nop
 801272c:	0801326c 	.word	0x0801326c
 8012730:	ffff0001 	.word	0xffff0001

08012734 <_fwalk_reent>:
 8012734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012738:	4606      	mov	r6, r0
 801273a:	4688      	mov	r8, r1
 801273c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012740:	2700      	movs	r7, #0
 8012742:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012746:	f1b9 0901 	subs.w	r9, r9, #1
 801274a:	d505      	bpl.n	8012758 <_fwalk_reent+0x24>
 801274c:	6824      	ldr	r4, [r4, #0]
 801274e:	2c00      	cmp	r4, #0
 8012750:	d1f7      	bne.n	8012742 <_fwalk_reent+0xe>
 8012752:	4638      	mov	r0, r7
 8012754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012758:	89ab      	ldrh	r3, [r5, #12]
 801275a:	2b01      	cmp	r3, #1
 801275c:	d907      	bls.n	801276e <_fwalk_reent+0x3a>
 801275e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012762:	3301      	adds	r3, #1
 8012764:	d003      	beq.n	801276e <_fwalk_reent+0x3a>
 8012766:	4629      	mov	r1, r5
 8012768:	4630      	mov	r0, r6
 801276a:	47c0      	blx	r8
 801276c:	4307      	orrs	r7, r0
 801276e:	3568      	adds	r5, #104	; 0x68
 8012770:	e7e9      	b.n	8012746 <_fwalk_reent+0x12>

08012772 <__retarget_lock_init_recursive>:
 8012772:	4770      	bx	lr

08012774 <__retarget_lock_acquire_recursive>:
 8012774:	4770      	bx	lr

08012776 <__retarget_lock_release_recursive>:
 8012776:	4770      	bx	lr

08012778 <__swhatbuf_r>:
 8012778:	b570      	push	{r4, r5, r6, lr}
 801277a:	460e      	mov	r6, r1
 801277c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012780:	2900      	cmp	r1, #0
 8012782:	b096      	sub	sp, #88	; 0x58
 8012784:	4614      	mov	r4, r2
 8012786:	461d      	mov	r5, r3
 8012788:	da08      	bge.n	801279c <__swhatbuf_r+0x24>
 801278a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801278e:	2200      	movs	r2, #0
 8012790:	602a      	str	r2, [r5, #0]
 8012792:	061a      	lsls	r2, r3, #24
 8012794:	d410      	bmi.n	80127b8 <__swhatbuf_r+0x40>
 8012796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801279a:	e00e      	b.n	80127ba <__swhatbuf_r+0x42>
 801279c:	466a      	mov	r2, sp
 801279e:	f000 f951 	bl	8012a44 <_fstat_r>
 80127a2:	2800      	cmp	r0, #0
 80127a4:	dbf1      	blt.n	801278a <__swhatbuf_r+0x12>
 80127a6:	9a01      	ldr	r2, [sp, #4]
 80127a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80127ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80127b0:	425a      	negs	r2, r3
 80127b2:	415a      	adcs	r2, r3
 80127b4:	602a      	str	r2, [r5, #0]
 80127b6:	e7ee      	b.n	8012796 <__swhatbuf_r+0x1e>
 80127b8:	2340      	movs	r3, #64	; 0x40
 80127ba:	2000      	movs	r0, #0
 80127bc:	6023      	str	r3, [r4, #0]
 80127be:	b016      	add	sp, #88	; 0x58
 80127c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080127c4 <__smakebuf_r>:
 80127c4:	898b      	ldrh	r3, [r1, #12]
 80127c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80127c8:	079d      	lsls	r5, r3, #30
 80127ca:	4606      	mov	r6, r0
 80127cc:	460c      	mov	r4, r1
 80127ce:	d507      	bpl.n	80127e0 <__smakebuf_r+0x1c>
 80127d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80127d4:	6023      	str	r3, [r4, #0]
 80127d6:	6123      	str	r3, [r4, #16]
 80127d8:	2301      	movs	r3, #1
 80127da:	6163      	str	r3, [r4, #20]
 80127dc:	b002      	add	sp, #8
 80127de:	bd70      	pop	{r4, r5, r6, pc}
 80127e0:	ab01      	add	r3, sp, #4
 80127e2:	466a      	mov	r2, sp
 80127e4:	f7ff ffc8 	bl	8012778 <__swhatbuf_r>
 80127e8:	9900      	ldr	r1, [sp, #0]
 80127ea:	4605      	mov	r5, r0
 80127ec:	4630      	mov	r0, r6
 80127ee:	f7ff f9dd 	bl	8011bac <_malloc_r>
 80127f2:	b948      	cbnz	r0, 8012808 <__smakebuf_r+0x44>
 80127f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127f8:	059a      	lsls	r2, r3, #22
 80127fa:	d4ef      	bmi.n	80127dc <__smakebuf_r+0x18>
 80127fc:	f023 0303 	bic.w	r3, r3, #3
 8012800:	f043 0302 	orr.w	r3, r3, #2
 8012804:	81a3      	strh	r3, [r4, #12]
 8012806:	e7e3      	b.n	80127d0 <__smakebuf_r+0xc>
 8012808:	4b0d      	ldr	r3, [pc, #52]	; (8012840 <__smakebuf_r+0x7c>)
 801280a:	62b3      	str	r3, [r6, #40]	; 0x28
 801280c:	89a3      	ldrh	r3, [r4, #12]
 801280e:	6020      	str	r0, [r4, #0]
 8012810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012814:	81a3      	strh	r3, [r4, #12]
 8012816:	9b00      	ldr	r3, [sp, #0]
 8012818:	6163      	str	r3, [r4, #20]
 801281a:	9b01      	ldr	r3, [sp, #4]
 801281c:	6120      	str	r0, [r4, #16]
 801281e:	b15b      	cbz	r3, 8012838 <__smakebuf_r+0x74>
 8012820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012824:	4630      	mov	r0, r6
 8012826:	f000 f91f 	bl	8012a68 <_isatty_r>
 801282a:	b128      	cbz	r0, 8012838 <__smakebuf_r+0x74>
 801282c:	89a3      	ldrh	r3, [r4, #12]
 801282e:	f023 0303 	bic.w	r3, r3, #3
 8012832:	f043 0301 	orr.w	r3, r3, #1
 8012836:	81a3      	strh	r3, [r4, #12]
 8012838:	89a0      	ldrh	r0, [r4, #12]
 801283a:	4305      	orrs	r5, r0
 801283c:	81a5      	strh	r5, [r4, #12]
 801283e:	e7cd      	b.n	80127dc <__smakebuf_r+0x18>
 8012840:	080125d1 	.word	0x080125d1

08012844 <memmove>:
 8012844:	4288      	cmp	r0, r1
 8012846:	b510      	push	{r4, lr}
 8012848:	eb01 0402 	add.w	r4, r1, r2
 801284c:	d902      	bls.n	8012854 <memmove+0x10>
 801284e:	4284      	cmp	r4, r0
 8012850:	4623      	mov	r3, r4
 8012852:	d807      	bhi.n	8012864 <memmove+0x20>
 8012854:	1e43      	subs	r3, r0, #1
 8012856:	42a1      	cmp	r1, r4
 8012858:	d008      	beq.n	801286c <memmove+0x28>
 801285a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801285e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012862:	e7f8      	b.n	8012856 <memmove+0x12>
 8012864:	4402      	add	r2, r0
 8012866:	4601      	mov	r1, r0
 8012868:	428a      	cmp	r2, r1
 801286a:	d100      	bne.n	801286e <memmove+0x2a>
 801286c:	bd10      	pop	{r4, pc}
 801286e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012876:	e7f7      	b.n	8012868 <memmove+0x24>

08012878 <__malloc_lock>:
 8012878:	4801      	ldr	r0, [pc, #4]	; (8012880 <__malloc_lock+0x8>)
 801287a:	f7ff bf7b 	b.w	8012774 <__retarget_lock_acquire_recursive>
 801287e:	bf00      	nop
 8012880:	20001898 	.word	0x20001898

08012884 <__malloc_unlock>:
 8012884:	4801      	ldr	r0, [pc, #4]	; (801288c <__malloc_unlock+0x8>)
 8012886:	f7ff bf76 	b.w	8012776 <__retarget_lock_release_recursive>
 801288a:	bf00      	nop
 801288c:	20001898 	.word	0x20001898

08012890 <_realloc_r>:
 8012890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012894:	4680      	mov	r8, r0
 8012896:	4614      	mov	r4, r2
 8012898:	460e      	mov	r6, r1
 801289a:	b921      	cbnz	r1, 80128a6 <_realloc_r+0x16>
 801289c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128a0:	4611      	mov	r1, r2
 80128a2:	f7ff b983 	b.w	8011bac <_malloc_r>
 80128a6:	b92a      	cbnz	r2, 80128b4 <_realloc_r+0x24>
 80128a8:	f7ff f914 	bl	8011ad4 <_free_r>
 80128ac:	4625      	mov	r5, r4
 80128ae:	4628      	mov	r0, r5
 80128b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128b4:	f000 f8fa 	bl	8012aac <_malloc_usable_size_r>
 80128b8:	4284      	cmp	r4, r0
 80128ba:	4607      	mov	r7, r0
 80128bc:	d802      	bhi.n	80128c4 <_realloc_r+0x34>
 80128be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80128c2:	d812      	bhi.n	80128ea <_realloc_r+0x5a>
 80128c4:	4621      	mov	r1, r4
 80128c6:	4640      	mov	r0, r8
 80128c8:	f7ff f970 	bl	8011bac <_malloc_r>
 80128cc:	4605      	mov	r5, r0
 80128ce:	2800      	cmp	r0, #0
 80128d0:	d0ed      	beq.n	80128ae <_realloc_r+0x1e>
 80128d2:	42bc      	cmp	r4, r7
 80128d4:	4622      	mov	r2, r4
 80128d6:	4631      	mov	r1, r6
 80128d8:	bf28      	it	cs
 80128da:	463a      	movcs	r2, r7
 80128dc:	f7fb fc02 	bl	800e0e4 <memcpy>
 80128e0:	4631      	mov	r1, r6
 80128e2:	4640      	mov	r0, r8
 80128e4:	f7ff f8f6 	bl	8011ad4 <_free_r>
 80128e8:	e7e1      	b.n	80128ae <_realloc_r+0x1e>
 80128ea:	4635      	mov	r5, r6
 80128ec:	e7df      	b.n	80128ae <_realloc_r+0x1e>

080128ee <_raise_r>:
 80128ee:	291f      	cmp	r1, #31
 80128f0:	b538      	push	{r3, r4, r5, lr}
 80128f2:	4604      	mov	r4, r0
 80128f4:	460d      	mov	r5, r1
 80128f6:	d904      	bls.n	8012902 <_raise_r+0x14>
 80128f8:	2316      	movs	r3, #22
 80128fa:	6003      	str	r3, [r0, #0]
 80128fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012900:	bd38      	pop	{r3, r4, r5, pc}
 8012902:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012904:	b112      	cbz	r2, 801290c <_raise_r+0x1e>
 8012906:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801290a:	b94b      	cbnz	r3, 8012920 <_raise_r+0x32>
 801290c:	4620      	mov	r0, r4
 801290e:	f000 f831 	bl	8012974 <_getpid_r>
 8012912:	462a      	mov	r2, r5
 8012914:	4601      	mov	r1, r0
 8012916:	4620      	mov	r0, r4
 8012918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801291c:	f000 b818 	b.w	8012950 <_kill_r>
 8012920:	2b01      	cmp	r3, #1
 8012922:	d00a      	beq.n	801293a <_raise_r+0x4c>
 8012924:	1c59      	adds	r1, r3, #1
 8012926:	d103      	bne.n	8012930 <_raise_r+0x42>
 8012928:	2316      	movs	r3, #22
 801292a:	6003      	str	r3, [r0, #0]
 801292c:	2001      	movs	r0, #1
 801292e:	e7e7      	b.n	8012900 <_raise_r+0x12>
 8012930:	2400      	movs	r4, #0
 8012932:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012936:	4628      	mov	r0, r5
 8012938:	4798      	blx	r3
 801293a:	2000      	movs	r0, #0
 801293c:	e7e0      	b.n	8012900 <_raise_r+0x12>
	...

08012940 <raise>:
 8012940:	4b02      	ldr	r3, [pc, #8]	; (801294c <raise+0xc>)
 8012942:	4601      	mov	r1, r0
 8012944:	6818      	ldr	r0, [r3, #0]
 8012946:	f7ff bfd2 	b.w	80128ee <_raise_r>
 801294a:	bf00      	nop
 801294c:	20000024 	.word	0x20000024

08012950 <_kill_r>:
 8012950:	b538      	push	{r3, r4, r5, lr}
 8012952:	4d07      	ldr	r5, [pc, #28]	; (8012970 <_kill_r+0x20>)
 8012954:	2300      	movs	r3, #0
 8012956:	4604      	mov	r4, r0
 8012958:	4608      	mov	r0, r1
 801295a:	4611      	mov	r1, r2
 801295c:	602b      	str	r3, [r5, #0]
 801295e:	f7f2 f82d 	bl	80049bc <_kill>
 8012962:	1c43      	adds	r3, r0, #1
 8012964:	d102      	bne.n	801296c <_kill_r+0x1c>
 8012966:	682b      	ldr	r3, [r5, #0]
 8012968:	b103      	cbz	r3, 801296c <_kill_r+0x1c>
 801296a:	6023      	str	r3, [r4, #0]
 801296c:	bd38      	pop	{r3, r4, r5, pc}
 801296e:	bf00      	nop
 8012970:	2000189c 	.word	0x2000189c

08012974 <_getpid_r>:
 8012974:	f7f2 b81a 	b.w	80049ac <_getpid>

08012978 <__sread>:
 8012978:	b510      	push	{r4, lr}
 801297a:	460c      	mov	r4, r1
 801297c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012980:	f000 f89c 	bl	8012abc <_read_r>
 8012984:	2800      	cmp	r0, #0
 8012986:	bfab      	itete	ge
 8012988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801298a:	89a3      	ldrhlt	r3, [r4, #12]
 801298c:	181b      	addge	r3, r3, r0
 801298e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012992:	bfac      	ite	ge
 8012994:	6563      	strge	r3, [r4, #84]	; 0x54
 8012996:	81a3      	strhlt	r3, [r4, #12]
 8012998:	bd10      	pop	{r4, pc}

0801299a <__swrite>:
 801299a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801299e:	461f      	mov	r7, r3
 80129a0:	898b      	ldrh	r3, [r1, #12]
 80129a2:	05db      	lsls	r3, r3, #23
 80129a4:	4605      	mov	r5, r0
 80129a6:	460c      	mov	r4, r1
 80129a8:	4616      	mov	r6, r2
 80129aa:	d505      	bpl.n	80129b8 <__swrite+0x1e>
 80129ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129b0:	2302      	movs	r3, #2
 80129b2:	2200      	movs	r2, #0
 80129b4:	f000 f868 	bl	8012a88 <_lseek_r>
 80129b8:	89a3      	ldrh	r3, [r4, #12]
 80129ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80129c2:	81a3      	strh	r3, [r4, #12]
 80129c4:	4632      	mov	r2, r6
 80129c6:	463b      	mov	r3, r7
 80129c8:	4628      	mov	r0, r5
 80129ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129ce:	f000 b817 	b.w	8012a00 <_write_r>

080129d2 <__sseek>:
 80129d2:	b510      	push	{r4, lr}
 80129d4:	460c      	mov	r4, r1
 80129d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129da:	f000 f855 	bl	8012a88 <_lseek_r>
 80129de:	1c43      	adds	r3, r0, #1
 80129e0:	89a3      	ldrh	r3, [r4, #12]
 80129e2:	bf15      	itete	ne
 80129e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80129e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80129ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80129ee:	81a3      	strheq	r3, [r4, #12]
 80129f0:	bf18      	it	ne
 80129f2:	81a3      	strhne	r3, [r4, #12]
 80129f4:	bd10      	pop	{r4, pc}

080129f6 <__sclose>:
 80129f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129fa:	f000 b813 	b.w	8012a24 <_close_r>
	...

08012a00 <_write_r>:
 8012a00:	b538      	push	{r3, r4, r5, lr}
 8012a02:	4d07      	ldr	r5, [pc, #28]	; (8012a20 <_write_r+0x20>)
 8012a04:	4604      	mov	r4, r0
 8012a06:	4608      	mov	r0, r1
 8012a08:	4611      	mov	r1, r2
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	602a      	str	r2, [r5, #0]
 8012a0e:	461a      	mov	r2, r3
 8012a10:	f7f2 f80b 	bl	8004a2a <_write>
 8012a14:	1c43      	adds	r3, r0, #1
 8012a16:	d102      	bne.n	8012a1e <_write_r+0x1e>
 8012a18:	682b      	ldr	r3, [r5, #0]
 8012a1a:	b103      	cbz	r3, 8012a1e <_write_r+0x1e>
 8012a1c:	6023      	str	r3, [r4, #0]
 8012a1e:	bd38      	pop	{r3, r4, r5, pc}
 8012a20:	2000189c 	.word	0x2000189c

08012a24 <_close_r>:
 8012a24:	b538      	push	{r3, r4, r5, lr}
 8012a26:	4d06      	ldr	r5, [pc, #24]	; (8012a40 <_close_r+0x1c>)
 8012a28:	2300      	movs	r3, #0
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	4608      	mov	r0, r1
 8012a2e:	602b      	str	r3, [r5, #0]
 8012a30:	f7f2 f817 	bl	8004a62 <_close>
 8012a34:	1c43      	adds	r3, r0, #1
 8012a36:	d102      	bne.n	8012a3e <_close_r+0x1a>
 8012a38:	682b      	ldr	r3, [r5, #0]
 8012a3a:	b103      	cbz	r3, 8012a3e <_close_r+0x1a>
 8012a3c:	6023      	str	r3, [r4, #0]
 8012a3e:	bd38      	pop	{r3, r4, r5, pc}
 8012a40:	2000189c 	.word	0x2000189c

08012a44 <_fstat_r>:
 8012a44:	b538      	push	{r3, r4, r5, lr}
 8012a46:	4d07      	ldr	r5, [pc, #28]	; (8012a64 <_fstat_r+0x20>)
 8012a48:	2300      	movs	r3, #0
 8012a4a:	4604      	mov	r4, r0
 8012a4c:	4608      	mov	r0, r1
 8012a4e:	4611      	mov	r1, r2
 8012a50:	602b      	str	r3, [r5, #0]
 8012a52:	f7f2 f812 	bl	8004a7a <_fstat>
 8012a56:	1c43      	adds	r3, r0, #1
 8012a58:	d102      	bne.n	8012a60 <_fstat_r+0x1c>
 8012a5a:	682b      	ldr	r3, [r5, #0]
 8012a5c:	b103      	cbz	r3, 8012a60 <_fstat_r+0x1c>
 8012a5e:	6023      	str	r3, [r4, #0]
 8012a60:	bd38      	pop	{r3, r4, r5, pc}
 8012a62:	bf00      	nop
 8012a64:	2000189c 	.word	0x2000189c

08012a68 <_isatty_r>:
 8012a68:	b538      	push	{r3, r4, r5, lr}
 8012a6a:	4d06      	ldr	r5, [pc, #24]	; (8012a84 <_isatty_r+0x1c>)
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	4604      	mov	r4, r0
 8012a70:	4608      	mov	r0, r1
 8012a72:	602b      	str	r3, [r5, #0]
 8012a74:	f7f2 f811 	bl	8004a9a <_isatty>
 8012a78:	1c43      	adds	r3, r0, #1
 8012a7a:	d102      	bne.n	8012a82 <_isatty_r+0x1a>
 8012a7c:	682b      	ldr	r3, [r5, #0]
 8012a7e:	b103      	cbz	r3, 8012a82 <_isatty_r+0x1a>
 8012a80:	6023      	str	r3, [r4, #0]
 8012a82:	bd38      	pop	{r3, r4, r5, pc}
 8012a84:	2000189c 	.word	0x2000189c

08012a88 <_lseek_r>:
 8012a88:	b538      	push	{r3, r4, r5, lr}
 8012a8a:	4d07      	ldr	r5, [pc, #28]	; (8012aa8 <_lseek_r+0x20>)
 8012a8c:	4604      	mov	r4, r0
 8012a8e:	4608      	mov	r0, r1
 8012a90:	4611      	mov	r1, r2
 8012a92:	2200      	movs	r2, #0
 8012a94:	602a      	str	r2, [r5, #0]
 8012a96:	461a      	mov	r2, r3
 8012a98:	f7f2 f80a 	bl	8004ab0 <_lseek>
 8012a9c:	1c43      	adds	r3, r0, #1
 8012a9e:	d102      	bne.n	8012aa6 <_lseek_r+0x1e>
 8012aa0:	682b      	ldr	r3, [r5, #0]
 8012aa2:	b103      	cbz	r3, 8012aa6 <_lseek_r+0x1e>
 8012aa4:	6023      	str	r3, [r4, #0]
 8012aa6:	bd38      	pop	{r3, r4, r5, pc}
 8012aa8:	2000189c 	.word	0x2000189c

08012aac <_malloc_usable_size_r>:
 8012aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ab0:	1f18      	subs	r0, r3, #4
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	bfbc      	itt	lt
 8012ab6:	580b      	ldrlt	r3, [r1, r0]
 8012ab8:	18c0      	addlt	r0, r0, r3
 8012aba:	4770      	bx	lr

08012abc <_read_r>:
 8012abc:	b538      	push	{r3, r4, r5, lr}
 8012abe:	4d07      	ldr	r5, [pc, #28]	; (8012adc <_read_r+0x20>)
 8012ac0:	4604      	mov	r4, r0
 8012ac2:	4608      	mov	r0, r1
 8012ac4:	4611      	mov	r1, r2
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	602a      	str	r2, [r5, #0]
 8012aca:	461a      	mov	r2, r3
 8012acc:	f7f1 ff90 	bl	80049f0 <_read>
 8012ad0:	1c43      	adds	r3, r0, #1
 8012ad2:	d102      	bne.n	8012ada <_read_r+0x1e>
 8012ad4:	682b      	ldr	r3, [r5, #0]
 8012ad6:	b103      	cbz	r3, 8012ada <_read_r+0x1e>
 8012ad8:	6023      	str	r3, [r4, #0]
 8012ada:	bd38      	pop	{r3, r4, r5, pc}
 8012adc:	2000189c 	.word	0x2000189c

08012ae0 <_init>:
 8012ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ae2:	bf00      	nop
 8012ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ae6:	bc08      	pop	{r3}
 8012ae8:	469e      	mov	lr, r3
 8012aea:	4770      	bx	lr

08012aec <_fini>:
 8012aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aee:	bf00      	nop
 8012af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012af2:	bc08      	pop	{r3}
 8012af4:	469e      	mov	lr, r3
 8012af6:	4770      	bx	lr
