
LVTN_STM32F407VET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800e358  0800e358  0001e358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9a8  0800e9a8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9a8  0800e9a8  0001e9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9b0  0800e9b0  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9b0  0800e9b0  0001e9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9b4  0800e9b4  0001e9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800e9b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          000007a4  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000099c  2000099c  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018aa3  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035da  00000000  00000000  00038ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001650  00000000  00000000  0003c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001548  00000000  00000000  0003d8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004e4f  00000000  00000000  0003ee40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bc96  00000000  00000000  00043c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df16c  00000000  00000000  0005f925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013ea91  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007374  00000000  00000000  0013eae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e33c 	.word	0x0800e33c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800e33c 	.word	0x0800e33c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2110      	movs	r1, #16
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <SELECT+0x14>)
 8001002:	f004 fe05 	bl	8005c10 <HAL_GPIO_WritePin>
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40020000 	.word	0x40020000

08001010 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	2110      	movs	r1, #16
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <DESELECT+0x14>)
 800101a:	f004 fdf9 	bl	8005c10 <HAL_GPIO_WritePin>
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40020000 	.word	0x40020000

08001028 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001032:	bf00      	nop
 8001034:	4808      	ldr	r0, [pc, #32]	; (8001058 <SPI_TxByte+0x30>)
 8001036:	f006 fb8d 	bl	8007754 <HAL_SPI_GetState>
 800103a:	4603      	mov	r3, r0
 800103c:	2b01      	cmp	r3, #1
 800103e:	d1f9      	bne.n	8001034 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001040:	1df9      	adds	r1, r7, #7
 8001042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001046:	2201      	movs	r2, #1
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <SPI_TxByte+0x30>)
 800104a:	f005 ff94 	bl	8006f76 <HAL_SPI_Transmit>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000344 	.word	0x20000344

0800105c <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001062:	23ff      	movs	r3, #255	; 0xff
 8001064:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800106a:	bf00      	nop
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <SPI_RxByte+0x38>)
 800106e:	f006 fb71 	bl	8007754 <HAL_SPI_GetState>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d1f9      	bne.n	800106c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001078:	1dba      	adds	r2, r7, #6
 800107a:	1df9      	adds	r1, r7, #7
 800107c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <SPI_RxByte+0x38>)
 8001086:	f006 f9c3 	bl	8007410 <HAL_SPI_TransmitReceive>

  return data;
 800108a:	79bb      	ldrb	r3, [r7, #6]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000344 	.word	0x20000344

08001098 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80010a0:	f7ff ffdc 	bl	800105c <SPI_RxByte>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	701a      	strb	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <SD_ReadyWait+0x34>)
 80010bc:	2232      	movs	r2, #50	; 0x32
 80010be:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80010c0:	f7ff ffcc 	bl	800105c <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80010c4:	f7ff ffca 	bl	800105c <SPI_RxByte>
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2bff      	cmp	r3, #255	; 0xff
 80010d0:	d004      	beq.n	80010dc <SD_ReadyWait+0x28>
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SD_ReadyWait+0x34>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1f3      	bne.n	80010c4 <SD_ReadyWait+0x10>

  return res;
 80010dc:	79fb      	ldrb	r3, [r7, #7]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000946 	.word	0x20000946

080010ec <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80010f2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80010f6:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80010f8:	f7ff ff8a 	bl	8001010 <DESELECT>

  for(int i = 0; i < 10; i++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	e005      	b.n	800110e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001102:	20ff      	movs	r0, #255	; 0xff
 8001104:	f7ff ff90 	bl	8001028 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	3301      	adds	r3, #1
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	2b09      	cmp	r3, #9
 8001112:	ddf6      	ble.n	8001102 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001114:	f7ff ff70 	bl	8000ff8 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001118:	2340      	movs	r3, #64	; 0x40
 800111a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800112c:	2395      	movs	r3, #149	; 0x95
 800112e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	e009      	b.n	800114a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001136:	1d3a      	adds	r2, r7, #4
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff72 	bl	8001028 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3301      	adds	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2b05      	cmp	r3, #5
 800114e:	ddf2      	ble.n	8001136 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001150:	e002      	b.n	8001158 <SD_PowerOn+0x6c>
  {
    Count--;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3b01      	subs	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001158:	f7ff ff80 	bl	800105c <SPI_RxByte>
 800115c:	4603      	mov	r3, r0
 800115e:	2b01      	cmp	r3, #1
 8001160:	d002      	beq.n	8001168 <SD_PowerOn+0x7c>
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f4      	bne.n	8001152 <SD_PowerOn+0x66>
  }

  DESELECT();
 8001168:	f7ff ff52 	bl	8001010 <DESELECT>
  SPI_TxByte(0XFF);
 800116c:	20ff      	movs	r0, #255	; 0xff
 800116e:	f7ff ff5b 	bl	8001028 <SPI_TxByte>

  PowerFlag = 1;
 8001172:	4b03      	ldr	r3, [pc, #12]	; (8001180 <SD_PowerOn+0x94>)
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
}
 8001178:	bf00      	nop
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000215 	.word	0x20000215

08001184 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <SD_PowerOff+0x14>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	20000215 	.word	0x20000215

0800119c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <SD_CheckPower+0x14>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000215 	.word	0x20000215

080011b4 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <SD_RxDataBlock+0x68>)
 80011c0:	220a      	movs	r2, #10
 80011c2:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80011c4:	f7ff ff4a 	bl	800105c <SPI_RxByte>
 80011c8:	4603      	mov	r3, r0
 80011ca:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	2bff      	cmp	r3, #255	; 0xff
 80011d0:	d104      	bne.n	80011dc <SD_RxDataBlock+0x28>
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <SD_RxDataBlock+0x68>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f3      	bne.n	80011c4 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	2bfe      	cmp	r3, #254	; 0xfe
 80011e0:	d001      	beq.n	80011e6 <SD_RxDataBlock+0x32>
    return FALSE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e016      	b.n	8001214 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff53 	bl	8001098 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff4d 	bl	8001098 <SPI_RxBytePtr>
  } while(btr -= 2);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3b02      	subs	r3, #2
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1ed      	bne.n	80011e6 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800120a:	f7ff ff27 	bl	800105c <SPI_RxByte>
  SPI_RxByte();
 800120e:	f7ff ff25 	bl	800105c <SPI_RxByte>

  return TRUE;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000945 	.word	0x20000945

08001220 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001230:	f7ff ff40 	bl	80010b4 <SD_ReadyWait>
 8001234:	4603      	mov	r3, r0
 8001236:	2bff      	cmp	r3, #255	; 0xff
 8001238:	d001      	beq.n	800123e <SD_TxDataBlock+0x1e>
    return FALSE;
 800123a:	2300      	movs	r3, #0
 800123c:	e040      	b.n	80012c0 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fef1 	bl	8001028 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	2bfd      	cmp	r3, #253	; 0xfd
 800124a:	d031      	beq.n	80012b0 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fee5 	bl	8001028 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fede 	bl	8001028 <SPI_TxByte>
    } while (--wc);
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	3b01      	subs	r3, #1
 8001270:	73bb      	strb	r3, [r7, #14]
 8001272:	7bbb      	ldrb	r3, [r7, #14]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1eb      	bne.n	8001250 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001278:	f7ff fef0 	bl	800105c <SPI_RxByte>
    SPI_RxByte();
 800127c:	f7ff feee 	bl	800105c <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001280:	e00b      	b.n	800129a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001282:	f7ff feeb 	bl	800105c <SPI_RxByte>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	f003 031f 	and.w	r3, r3, #31
 8001290:	2b05      	cmp	r3, #5
 8001292:	d006      	beq.n	80012a2 <SD_TxDataBlock+0x82>
        break;

      i++;
 8001294:	7b7b      	ldrb	r3, [r7, #13]
 8001296:	3301      	adds	r3, #1
 8001298:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800129a:	7b7b      	ldrb	r3, [r7, #13]
 800129c:	2b40      	cmp	r3, #64	; 0x40
 800129e:	d9f0      	bls.n	8001282 <SD_TxDataBlock+0x62>
 80012a0:	e000      	b.n	80012a4 <SD_TxDataBlock+0x84>
        break;
 80012a2:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80012a4:	bf00      	nop
 80012a6:	f7ff fed9 	bl	800105c <SPI_RxByte>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0fa      	beq.n	80012a6 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	f003 031f 	and.w	r3, r3, #31
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d101      	bne.n	80012be <SD_TxDataBlock+0x9e>
    return TRUE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80012d4:	f7ff feee 	bl	80010b4 <SD_ReadyWait>
 80012d8:	4603      	mov	r3, r0
 80012da:	2bff      	cmp	r3, #255	; 0xff
 80012dc:	d001      	beq.n	80012e2 <SD_SendCmd+0x1a>
    return 0xFF;
 80012de:	23ff      	movs	r3, #255	; 0xff
 80012e0:	e040      	b.n	8001364 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fe9f 	bl	8001028 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	0e1b      	lsrs	r3, r3, #24
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe99 	bl	8001028 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	0c1b      	lsrs	r3, r3, #16
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fe93 	bl	8001028 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fe8d 	bl	8001028 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fe88 	bl	8001028 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b40      	cmp	r3, #64	; 0x40
 8001320:	d101      	bne.n	8001326 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001322:	2395      	movs	r3, #149	; 0x95
 8001324:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b48      	cmp	r3, #72	; 0x48
 800132a:	d101      	bne.n	8001330 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800132c:	2387      	movs	r3, #135	; 0x87
 800132e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fe78 	bl	8001028 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	2b4c      	cmp	r3, #76	; 0x4c
 800133c:	d101      	bne.n	8001342 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800133e:	f7ff fe8d 	bl	800105c <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001342:	230a      	movs	r3, #10
 8001344:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001346:	f7ff fe89 	bl	800105c <SPI_RxByte>
 800134a:	4603      	mov	r3, r0
 800134c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800134e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001352:	2b00      	cmp	r3, #0
 8001354:	da05      	bge.n	8001362 <SD_SendCmd+0x9a>
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	3b01      	subs	r3, #1
 800135a:	73bb      	strb	r3, [r7, #14]
 800135c:	7bbb      	ldrb	r3, [r7, #14]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f1      	bne.n	8001346 <SD_SendCmd+0x7e>

  return res;
 8001362:	7b7b      	ldrb	r3, [r7, #13]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 800137c:	2301      	movs	r3, #1
 800137e:	e0d5      	b.n	800152c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001380:	4b6c      	ldr	r3, [pc, #432]	; (8001534 <SD_disk_initialize+0x1c8>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <SD_disk_initialize+0x2a>
    return Stat;
 800138e:	4b69      	ldr	r3, [pc, #420]	; (8001534 <SD_disk_initialize+0x1c8>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	e0ca      	b.n	800152c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001396:	f7ff fea9 	bl	80010ec <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800139a:	f7ff fe2d 	bl	8000ff8 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80013a2:	2100      	movs	r1, #0
 80013a4:	2040      	movs	r0, #64	; 0x40
 80013a6:	f7ff ff8f 	bl	80012c8 <SD_SendCmd>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	f040 80a5 	bne.w	80014fc <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80013b2:	4b61      	ldr	r3, [pc, #388]	; (8001538 <SD_disk_initialize+0x1cc>)
 80013b4:	2264      	movs	r2, #100	; 0x64
 80013b6:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013bc:	2048      	movs	r0, #72	; 0x48
 80013be:	f7ff ff83 	bl	80012c8 <SD_SendCmd>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d158      	bne.n	800147a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e00c      	b.n	80013e8 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80013ce:	7bfc      	ldrb	r4, [r7, #15]
 80013d0:	f7ff fe44 	bl	800105c <SPI_RxByte>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	f104 0310 	add.w	r3, r4, #16
 80013dc:	443b      	add	r3, r7
 80013de:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	3301      	adds	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d9ef      	bls.n	80013ce <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80013ee:	7abb      	ldrb	r3, [r7, #10]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	f040 8083 	bne.w	80014fc <SD_disk_initialize+0x190>
 80013f6:	7afb      	ldrb	r3, [r7, #11]
 80013f8:	2baa      	cmp	r3, #170	; 0xaa
 80013fa:	d17f      	bne.n	80014fc <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80013fc:	2100      	movs	r1, #0
 80013fe:	2077      	movs	r0, #119	; 0x77
 8001400:	f7ff ff62 	bl	80012c8 <SD_SendCmd>
 8001404:	4603      	mov	r3, r0
 8001406:	2b01      	cmp	r3, #1
 8001408:	d807      	bhi.n	800141a <SD_disk_initialize+0xae>
 800140a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800140e:	2069      	movs	r0, #105	; 0x69
 8001410:	f7ff ff5a 	bl	80012c8 <SD_SendCmd>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800141a:	4b47      	ldr	r3, [pc, #284]	; (8001538 <SD_disk_initialize+0x1cc>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1eb      	bne.n	80013fc <SD_disk_initialize+0x90>
 8001424:	e000      	b.n	8001428 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001426:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001428:	4b43      	ldr	r3, [pc, #268]	; (8001538 <SD_disk_initialize+0x1cc>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d064      	beq.n	80014fc <SD_disk_initialize+0x190>
 8001432:	2100      	movs	r1, #0
 8001434:	207a      	movs	r0, #122	; 0x7a
 8001436:	f7ff ff47 	bl	80012c8 <SD_SendCmd>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d15d      	bne.n	80014fc <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e00c      	b.n	8001460 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001446:	7bfc      	ldrb	r4, [r7, #15]
 8001448:	f7ff fe08 	bl	800105c <SPI_RxByte>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	f104 0310 	add.w	r3, r4, #16
 8001454:	443b      	add	r3, r7
 8001456:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	3301      	adds	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2b03      	cmp	r3, #3
 8001464:	d9ef      	bls.n	8001446 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001466:	7a3b      	ldrb	r3, [r7, #8]
 8001468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SD_disk_initialize+0x108>
 8001470:	2306      	movs	r3, #6
 8001472:	e000      	b.n	8001476 <SD_disk_initialize+0x10a>
 8001474:	2302      	movs	r3, #2
 8001476:	73bb      	strb	r3, [r7, #14]
 8001478:	e040      	b.n	80014fc <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800147a:	2100      	movs	r1, #0
 800147c:	2077      	movs	r0, #119	; 0x77
 800147e:	f7ff ff23 	bl	80012c8 <SD_SendCmd>
 8001482:	4603      	mov	r3, r0
 8001484:	2b01      	cmp	r3, #1
 8001486:	d808      	bhi.n	800149a <SD_disk_initialize+0x12e>
 8001488:	2100      	movs	r1, #0
 800148a:	2069      	movs	r0, #105	; 0x69
 800148c:	f7ff ff1c 	bl	80012c8 <SD_SendCmd>
 8001490:	4603      	mov	r3, r0
 8001492:	2b01      	cmp	r3, #1
 8001494:	d801      	bhi.n	800149a <SD_disk_initialize+0x12e>
 8001496:	2302      	movs	r3, #2
 8001498:	e000      	b.n	800149c <SD_disk_initialize+0x130>
 800149a:	2301      	movs	r3, #1
 800149c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d10e      	bne.n	80014c2 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80014a4:	2100      	movs	r1, #0
 80014a6:	2077      	movs	r0, #119	; 0x77
 80014a8:	f7ff ff0e 	bl	80012c8 <SD_SendCmd>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d80e      	bhi.n	80014d0 <SD_disk_initialize+0x164>
 80014b2:	2100      	movs	r1, #0
 80014b4:	2069      	movs	r0, #105	; 0x69
 80014b6:	f7ff ff07 	bl	80012c8 <SD_SendCmd>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d107      	bne.n	80014d0 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80014c0:	e00d      	b.n	80014de <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80014c2:	2100      	movs	r1, #0
 80014c4:	2041      	movs	r0, #65	; 0x41
 80014c6:	f7ff feff 	bl	80012c8 <SD_SendCmd>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <SD_disk_initialize+0x1cc>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1e1      	bne.n	800149e <SD_disk_initialize+0x132>
 80014da:	e000      	b.n	80014de <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80014dc:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <SD_disk_initialize+0x1cc>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d007      	beq.n	80014f8 <SD_disk_initialize+0x18c>
 80014e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ec:	2050      	movs	r0, #80	; 0x50
 80014ee:	f7ff feeb 	bl	80012c8 <SD_SendCmd>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80014fc:	4a0f      	ldr	r2, [pc, #60]	; (800153c <SD_disk_initialize+0x1d0>)
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001502:	f7ff fd85 	bl	8001010 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001506:	f7ff fda9 	bl	800105c <SPI_RxByte>

  if (type)
 800150a:	7bbb      	ldrb	r3, [r7, #14]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d008      	beq.n	8001522 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <SD_disk_initialize+0x1c8>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f023 0301 	bic.w	r3, r3, #1
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SD_disk_initialize+0x1c8>)
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e001      	b.n	8001526 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001522:	f7ff fe2f 	bl	8001184 <SD_PowerOff>
  }

  return Stat;
 8001526:	4b03      	ldr	r3, [pc, #12]	; (8001534 <SD_disk_initialize+0x1c8>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b2db      	uxtb	r3, r3
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	20000000 	.word	0x20000000
 8001538:	20000945 	.word	0x20000945
 800153c:	20000214 	.word	0x20000214

08001540 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001550:	2301      	movs	r3, #1
 8001552:	e002      	b.n	800155a <SD_disk_status+0x1a>

  return Stat;
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SD_disk_status+0x28>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000000 	.word	0x20000000

0800156c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <SD_disk_read+0x1c>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <SD_disk_read+0x20>
    return RES_PARERR;
 8001588:	2304      	movs	r3, #4
 800158a:	e051      	b.n	8001630 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <SD_disk_read+0xcc>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800159a:	2303      	movs	r3, #3
 800159c:	e048      	b.n	8001630 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800159e:	4b27      	ldr	r3, [pc, #156]	; (800163c <SD_disk_read+0xd0>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	025b      	lsls	r3, r3, #9
 80015ae:	607b      	str	r3, [r7, #4]

  SELECT();
 80015b0:	f7ff fd22 	bl	8000ff8 <SELECT>

  if (count == 1)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d111      	bne.n	80015de <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	2051      	movs	r0, #81	; 0x51
 80015be:	f7ff fe83 	bl	80012c8 <SD_SendCmd>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d129      	bne.n	800161c <SD_disk_read+0xb0>
 80015c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	f7ff fdf1 	bl	80011b4 <SD_RxDataBlock>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d021      	beq.n	800161c <SD_disk_read+0xb0>
      count = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	e01e      	b.n	800161c <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	2052      	movs	r0, #82	; 0x52
 80015e2:	f7ff fe71 	bl	80012c8 <SD_SendCmd>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d117      	bne.n	800161c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80015ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f0:	68b8      	ldr	r0, [r7, #8]
 80015f2:	f7ff fddf 	bl	80011b4 <SD_RxDataBlock>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00a      	beq.n	8001612 <SD_disk_read+0xa6>
          break;

        buff += 512;
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001602:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	3b01      	subs	r3, #1
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ed      	bne.n	80015ec <SD_disk_read+0x80>
 8001610:	e000      	b.n	8001614 <SD_disk_read+0xa8>
          break;
 8001612:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001614:	2100      	movs	r1, #0
 8001616:	204c      	movs	r0, #76	; 0x4c
 8001618:	f7ff fe56 	bl	80012c8 <SD_SendCmd>
    }
  }

  DESELECT();
 800161c:	f7ff fcf8 	bl	8001010 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001620:	f7ff fd1c 	bl	800105c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	bf14      	ite	ne
 800162a:	2301      	movne	r3, #1
 800162c:	2300      	moveq	r3, #0
 800162e:	b2db      	uxtb	r3, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000000 	.word	0x20000000
 800163c:	20000214 	.word	0x20000214

08001640 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <SD_disk_write+0x1c>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <SD_disk_write+0x20>
    return RES_PARERR;
 800165c:	2304      	movs	r3, #4
 800165e:	e06b      	b.n	8001738 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001660:	4b37      	ldr	r3, [pc, #220]	; (8001740 <SD_disk_write+0x100>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SD_disk_write+0x32>
    return RES_NOTRDY;
 800166e:	2303      	movs	r3, #3
 8001670:	e062      	b.n	8001738 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001672:	4b33      	ldr	r3, [pc, #204]	; (8001740 <SD_disk_write+0x100>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001680:	2302      	movs	r3, #2
 8001682:	e059      	b.n	8001738 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001684:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <SD_disk_write+0x104>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	025b      	lsls	r3, r3, #9
 8001694:	607b      	str	r3, [r7, #4]

  SELECT();
 8001696:	f7ff fcaf 	bl	8000ff8 <SELECT>

  if (count == 1)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d110      	bne.n	80016c2 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	2058      	movs	r0, #88	; 0x58
 80016a4:	f7ff fe10 	bl	80012c8 <SD_SendCmd>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d13a      	bne.n	8001724 <SD_disk_write+0xe4>
 80016ae:	21fe      	movs	r1, #254	; 0xfe
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f7ff fdb5 	bl	8001220 <SD_TxDataBlock>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d033      	beq.n	8001724 <SD_disk_write+0xe4>
      count = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	e030      	b.n	8001724 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <SD_disk_write+0x104>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80016ce:	2100      	movs	r1, #0
 80016d0:	2077      	movs	r0, #119	; 0x77
 80016d2:	f7ff fdf9 	bl	80012c8 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80016d6:	6839      	ldr	r1, [r7, #0]
 80016d8:	2057      	movs	r0, #87	; 0x57
 80016da:	f7ff fdf5 	bl	80012c8 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	2059      	movs	r0, #89	; 0x59
 80016e2:	f7ff fdf1 	bl	80012c8 <SD_SendCmd>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d11b      	bne.n	8001724 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80016ec:	21fc      	movs	r1, #252	; 0xfc
 80016ee:	68b8      	ldr	r0, [r7, #8]
 80016f0:	f7ff fd96 	bl	8001220 <SD_TxDataBlock>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00a      	beq.n	8001710 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001700:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	3b01      	subs	r3, #1
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ee      	bne.n	80016ec <SD_disk_write+0xac>
 800170e:	e000      	b.n	8001712 <SD_disk_write+0xd2>
          break;
 8001710:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001712:	21fd      	movs	r1, #253	; 0xfd
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff fd83 	bl	8001220 <SD_TxDataBlock>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <SD_disk_write+0xe4>
      {
        count = 1;
 8001720:	2301      	movs	r3, #1
 8001722:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001724:	f7ff fc74 	bl	8001010 <DESELECT>
  SPI_RxByte();
 8001728:	f7ff fc98 	bl	800105c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000214 	.word	0x20000214

08001748 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b08b      	sub	sp, #44	; 0x2c
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	603a      	str	r2, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	460b      	mov	r3, r1
 8001756:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001762:	2304      	movs	r3, #4
 8001764:	e11b      	b.n	800199e <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d129      	bne.n	80017c6 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d017      	beq.n	80017aa <SD_disk_ioctl+0x62>
 800177a:	2b02      	cmp	r3, #2
 800177c:	dc1f      	bgt.n	80017be <SD_disk_ioctl+0x76>
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <SD_disk_ioctl+0x40>
 8001782:	2b01      	cmp	r3, #1
 8001784:	d00b      	beq.n	800179e <SD_disk_ioctl+0x56>
 8001786:	e01a      	b.n	80017be <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001788:	f7ff fd08 	bl	800119c <SD_CheckPower>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001792:	f7ff fcf7 	bl	8001184 <SD_PowerOff>
      res = RES_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800179c:	e0fd      	b.n	800199a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800179e:	f7ff fca5 	bl	80010ec <SD_PowerOn>
      res = RES_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017a8:	e0f7      	b.n	800199a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	1c5c      	adds	r4, r3, #1
 80017ae:	f7ff fcf5 	bl	800119c <SD_CheckPower>
 80017b2:	4603      	mov	r3, r0
 80017b4:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017bc:	e0ed      	b.n	800199a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 80017be:	2304      	movs	r3, #4
 80017c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017c4:	e0e9      	b.n	800199a <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80017c6:	4b78      	ldr	r3, [pc, #480]	; (80019a8 <SD_disk_ioctl+0x260>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e0e2      	b.n	800199e <SD_disk_ioctl+0x256>

    SELECT();
 80017d8:	f7ff fc0e 	bl	8000ff8 <SELECT>

    switch (ctrl)
 80017dc:	79bb      	ldrb	r3, [r7, #6]
 80017de:	2b0d      	cmp	r3, #13
 80017e0:	f200 80cc 	bhi.w	800197c <SD_disk_ioctl+0x234>
 80017e4:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <SD_disk_ioctl+0xa4>)
 80017e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	080018e7 	.word	0x080018e7
 80017f0:	08001825 	.word	0x08001825
 80017f4:	080018d7 	.word	0x080018d7
 80017f8:	0800197d 	.word	0x0800197d
 80017fc:	0800197d 	.word	0x0800197d
 8001800:	0800197d 	.word	0x0800197d
 8001804:	0800197d 	.word	0x0800197d
 8001808:	0800197d 	.word	0x0800197d
 800180c:	0800197d 	.word	0x0800197d
 8001810:	0800197d 	.word	0x0800197d
 8001814:	0800197d 	.word	0x0800197d
 8001818:	080018f9 	.word	0x080018f9
 800181c:	0800191d 	.word	0x0800191d
 8001820:	08001941 	.word	0x08001941
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001824:	2100      	movs	r1, #0
 8001826:	2049      	movs	r0, #73	; 0x49
 8001828:	f7ff fd4e 	bl	80012c8 <SD_SendCmd>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	f040 80a8 	bne.w	8001984 <SD_disk_ioctl+0x23c>
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	2110      	movs	r1, #16
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fcba 	bl	80011b4 <SD_RxDataBlock>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 809e 	beq.w	8001984 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001848:	7b3b      	ldrb	r3, [r7, #12]
 800184a:	099b      	lsrs	r3, r3, #6
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b01      	cmp	r3, #1
 8001850:	d10e      	bne.n	8001870 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001852:	7d7b      	ldrb	r3, [r7, #21]
 8001854:	b29a      	uxth	r2, r3
 8001856:	7d3b      	ldrb	r3, [r7, #20]
 8001858:	b29b      	uxth	r3, r3
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	b29b      	uxth	r3, r3
 800185e:	4413      	add	r3, r2
 8001860:	b29b      	uxth	r3, r3
 8001862:	3301      	adds	r3, #1
 8001864:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001866:	8bfb      	ldrh	r3, [r7, #30]
 8001868:	029a      	lsls	r2, r3, #10
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e02e      	b.n	80018ce <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001870:	7c7b      	ldrb	r3, [r7, #17]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	b2da      	uxtb	r2, r3
 8001878:	7dbb      	ldrb	r3, [r7, #22]
 800187a:	09db      	lsrs	r3, r3, #7
 800187c:	b2db      	uxtb	r3, r3
 800187e:	4413      	add	r3, r2
 8001880:	b2da      	uxtb	r2, r3
 8001882:	7d7b      	ldrb	r3, [r7, #21]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f003 0306 	and.w	r3, r3, #6
 800188c:	b2db      	uxtb	r3, r3
 800188e:	4413      	add	r3, r2
 8001890:	b2db      	uxtb	r3, r3
 8001892:	3302      	adds	r3, #2
 8001894:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001898:	7d3b      	ldrb	r3, [r7, #20]
 800189a:	099b      	lsrs	r3, r3, #6
 800189c:	b2db      	uxtb	r3, r3
 800189e:	b29a      	uxth	r2, r3
 80018a0:	7cfb      	ldrb	r3, [r7, #19]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	7cbb      	ldrb	r3, [r7, #18]
 80018ae:	029b      	lsls	r3, r3, #10
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	3301      	adds	r3, #1
 80018be:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80018c0:	8bfa      	ldrh	r2, [r7, #30]
 80018c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018c6:	3b09      	subs	r3, #9
 80018c8:	409a      	lsls	r2, r3
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80018d4:	e056      	b.n	8001984 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018dc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80018e4:	e055      	b.n	8001992 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80018e6:	f7ff fbe5 	bl	80010b4 <SD_ReadyWait>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2bff      	cmp	r3, #255	; 0xff
 80018ee:	d14b      	bne.n	8001988 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80018f6:	e047      	b.n	8001988 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80018f8:	2100      	movs	r1, #0
 80018fa:	2049      	movs	r0, #73	; 0x49
 80018fc:	f7ff fce4 	bl	80012c8 <SD_SendCmd>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d142      	bne.n	800198c <SD_disk_ioctl+0x244>
 8001906:	2110      	movs	r1, #16
 8001908:	6a38      	ldr	r0, [r7, #32]
 800190a:	f7ff fc53 	bl	80011b4 <SD_RxDataBlock>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d03b      	beq.n	800198c <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800191a:	e037      	b.n	800198c <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800191c:	2100      	movs	r1, #0
 800191e:	204a      	movs	r0, #74	; 0x4a
 8001920:	f7ff fcd2 	bl	80012c8 <SD_SendCmd>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d132      	bne.n	8001990 <SD_disk_ioctl+0x248>
 800192a:	2110      	movs	r1, #16
 800192c:	6a38      	ldr	r0, [r7, #32]
 800192e:	f7ff fc41 	bl	80011b4 <SD_RxDataBlock>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d02b      	beq.n	8001990 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800193e:	e027      	b.n	8001990 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001940:	2100      	movs	r1, #0
 8001942:	207a      	movs	r0, #122	; 0x7a
 8001944:	f7ff fcc0 	bl	80012c8 <SD_SendCmd>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 800194e:	2300      	movs	r3, #0
 8001950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001954:	e00b      	b.n	800196e <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001956:	6a3c      	ldr	r4, [r7, #32]
 8001958:	1c63      	adds	r3, r4, #1
 800195a:	623b      	str	r3, [r7, #32]
 800195c:	f7ff fb7e 	bl	800105c <SPI_RxByte>
 8001960:	4603      	mov	r3, r0
 8001962:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001964:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001968:	3301      	adds	r3, #1
 800196a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800196e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001972:	2b03      	cmp	r3, #3
 8001974:	d9ef      	bls.n	8001956 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 800197c:	2304      	movs	r3, #4
 800197e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001982:	e006      	b.n	8001992 <SD_disk_ioctl+0x24a>
      break;
 8001984:	bf00      	nop
 8001986:	e004      	b.n	8001992 <SD_disk_ioctl+0x24a>
      break;
 8001988:	bf00      	nop
 800198a:	e002      	b.n	8001992 <SD_disk_ioctl+0x24a>
      break;
 800198c:	bf00      	nop
 800198e:	e000      	b.n	8001992 <SD_disk_ioctl+0x24a>
      break;
 8001990:	bf00      	nop
    }

    DESELECT();
 8001992:	f7ff fb3d 	bl	8001010 <DESELECT>
    SPI_RxByte();
 8001996:	f7ff fb61 	bl	800105c <SPI_RxByte>
  }

  return res;
 800199a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800199e:	4618      	mov	r0, r3
 80019a0:	372c      	adds	r7, #44	; 0x2c
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd90      	pop	{r4, r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000000 	.word	0x20000000

080019ac <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	f023 030f 	bic.w	r3, r3, #15
 80019bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	f043 030c 	orr.w	r3, r3, #12
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	f043 0308 	orr.w	r3, r3, #8
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80019d8:	7bbb      	ldrb	r3, [r7, #14]
 80019da:	f043 030c 	orr.w	r3, r3, #12
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80019e2:	7bbb      	ldrb	r3, [r7, #14]
 80019e4:	f043 0308 	orr.w	r3, r3, #8
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019ec:	f107 0208 	add.w	r2, r7, #8
 80019f0:	2364      	movs	r3, #100	; 0x64
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2304      	movs	r3, #4
 80019f6:	214e      	movs	r1, #78	; 0x4e
 80019f8:	4803      	ldr	r0, [pc, #12]	; (8001a08 <lcd_send_cmd+0x5c>)
 80019fa:	f004 fa81 	bl	8005f00 <HAL_I2C_Master_Transmit>
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200002e4 	.word	0x200002e4

08001a0c <lcd_send_data>:

void lcd_send_data (char data)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	f023 030f 	bic.w	r3, r3, #15
 8001a1c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	f043 030d 	orr.w	r3, r3, #13
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	f043 0309 	orr.w	r3, r3, #9
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001a38:	7bbb      	ldrb	r3, [r7, #14]
 8001a3a:	f043 030d 	orr.w	r3, r3, #13
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1sssssssss
 8001a42:	7bbb      	ldrb	r3, [r7, #14]
 8001a44:	f043 0309 	orr.w	r3, r3, #9
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a4c:	f107 0208 	add.w	r2, r7, #8
 8001a50:	2364      	movs	r3, #100	; 0x64
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2304      	movs	r3, #4
 8001a56:	214e      	movs	r1, #78	; 0x4e
 8001a58:	4803      	ldr	r0, [pc, #12]	; (8001a68 <lcd_send_data+0x5c>)
 8001a5a:	f004 fa51 	bl	8005f00 <HAL_I2C_Master_Transmit>
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200002e4 	.word	0x200002e4

08001a6c <lcd_clear>:

void lcd_clear (void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff ff9a 	bl	80019ac <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	e005      	b.n	8001a8a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001a7e:	2020      	movs	r0, #32
 8001a80:	f7ff ffc4 	bl	8001a0c <lcd_send_data>
	for (int i=0; i<100; i++)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3301      	adds	r3, #1
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b63      	cmp	r3, #99	; 0x63
 8001a8e:	ddf6      	ble.n	8001a7e <lcd_clear+0x12>
	}
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <lcd_init>:

void lcd_init (void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001a9e:	2032      	movs	r0, #50	; 0x32
 8001aa0:	f002 fdb8 	bl	8004614 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001aa4:	2030      	movs	r0, #48	; 0x30
 8001aa6:	f7ff ff81 	bl	80019ac <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001aaa:	2005      	movs	r0, #5
 8001aac:	f002 fdb2 	bl	8004614 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001ab0:	2030      	movs	r0, #48	; 0x30
 8001ab2:	f7ff ff7b 	bl	80019ac <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f002 fdac 	bl	8004614 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001abc:	2030      	movs	r0, #48	; 0x30
 8001abe:	f7ff ff75 	bl	80019ac <lcd_send_cmd>
	HAL_Delay(10);
 8001ac2:	200a      	movs	r0, #10
 8001ac4:	f002 fda6 	bl	8004614 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001ac8:	2020      	movs	r0, #32
 8001aca:	f7ff ff6f 	bl	80019ac <lcd_send_cmd>
	HAL_Delay(10);
 8001ace:	200a      	movs	r0, #10
 8001ad0:	f002 fda0 	bl	8004614 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001ad4:	2028      	movs	r0, #40	; 0x28
 8001ad6:	f7ff ff69 	bl	80019ac <lcd_send_cmd>
	HAL_Delay(1);
 8001ada:	2001      	movs	r0, #1
 8001adc:	f002 fd9a 	bl	8004614 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001ae0:	2008      	movs	r0, #8
 8001ae2:	f7ff ff63 	bl	80019ac <lcd_send_cmd>
	HAL_Delay(1);
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f002 fd94 	bl	8004614 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001aec:	2001      	movs	r0, #1
 8001aee:	f7ff ff5d 	bl	80019ac <lcd_send_cmd>
	HAL_Delay(1);
 8001af2:	2001      	movs	r0, #1
 8001af4:	f002 fd8e 	bl	8004614 <HAL_Delay>
	HAL_Delay(1);
 8001af8:	2001      	movs	r0, #1
 8001afa:	f002 fd8b 	bl	8004614 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001afe:	2006      	movs	r0, #6
 8001b00:	f7ff ff54 	bl	80019ac <lcd_send_cmd>
	HAL_Delay(1);
 8001b04:	2001      	movs	r0, #1
 8001b06:	f002 fd85 	bl	8004614 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001b0a:	200c      	movs	r0, #12
 8001b0c:	f7ff ff4e 	bl	80019ac <lcd_send_cmd>
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001b1c:	e006      	b.n	8001b2c <lcd_send_string+0x18>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff70 	bl	8001a0c <lcd_send_data>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f4      	bne.n	8001b1e <lcd_send_string+0xa>
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <Rotary_init>:
extern float PH_Calculator(float A, float B, uint16_t adc);
extern void  PH_Calibration();
extern void TDS_Calibration();
extern float TDS_Calculator(float k , uint16_t adc);
void Rotary_init()
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	rotary_first_value = HAL_GPIO_ReadPin(GPIOE, Rotary_CLK_Pin);
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	4804      	ldr	r0, [pc, #16]	; (8001b58 <Rotary_init+0x18>)
 8001b48:	f004 f84a 	bl	8005be0 <HAL_GPIO_ReadPin>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b02      	ldr	r3, [pc, #8]	; (8001b5c <Rotary_init+0x1c>)
 8001b52:	601a      	str	r2, [r3, #0]
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	20000234 	.word	0x20000234

08001b60 <Rotary_volum>:
int  Rotary_volum()
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	rotary_curent_value = HAL_GPIO_ReadPin(GPIOE, Rotary_CLK_Pin);
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	4817      	ldr	r0, [pc, #92]	; (8001bc4 <Rotary_volum+0x64>)
 8001b68:	f004 f83a 	bl	8005be0 <HAL_GPIO_ReadPin>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <Rotary_volum+0x68>)
 8001b72:	601a      	str	r2, [r3, #0]
	if (rotary_curent_value != rotary_first_value)
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <Rotary_volum+0x68>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <Rotary_volum+0x6c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d019      	beq.n	8001bb4 <Rotary_volum+0x54>
	   {
	     if (HAL_GPIO_ReadPin(GPIOE, Rotary_DT_Pin) != rotary_curent_value)
 8001b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b84:	480f      	ldr	r0, [pc, #60]	; (8001bc4 <Rotary_volum+0x64>)
 8001b86:	f004 f82b 	bl	8005be0 <HAL_GPIO_ReadPin>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <Rotary_volum+0x68>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d007      	beq.n	8001ba6 <Rotary_volum+0x46>
	     {
	    	 lcd_clear();
 8001b96:	f7ff ff69 	bl	8001a6c <lcd_clear>
	    	 lcd_pointer_1 +=1;
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <Rotary_volum+0x70>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <Rotary_volum+0x70>)
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e006      	b.n	8001bb4 <Rotary_volum+0x54>

	     }
	     else
	     {
	    	 lcd_clear();
 8001ba6:	f7ff ff61 	bl	8001a6c <lcd_clear>
	    	 lcd_pointer_1 -=1;
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <Rotary_volum+0x70>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <Rotary_volum+0x70>)
 8001bb2:	6013      	str	r3, [r2, #0]
	     }
	   }
	rotary_first_value = rotary_curent_value;
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <Rotary_volum+0x68>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <Rotary_volum+0x6c>)
 8001bba:	6013      	str	r3, [r2, #0]
	return lcd_pointer_1;
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <Rotary_volum+0x70>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	20000238 	.word	0x20000238
 8001bcc:	20000234 	.word	0x20000234
 8001bd0:	2000022c 	.word	0x2000022c

08001bd4 <Push_Slect>:
void Push_Slect()
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	  if(HAL_GPIO_ReadPin(GPIOE, Rotary_SW_Pin) == 0)
 8001bd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bdc:	4813      	ldr	r0, [pc, #76]	; (8001c2c <Push_Slect+0x58>)
 8001bde:	f003 ffff 	bl	8005be0 <HAL_GPIO_ReadPin>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d11c      	bne.n	8001c22 <Push_Slect+0x4e>
	  		{
	  			HAL_Delay(20);
 8001be8:	2014      	movs	r0, #20
 8001bea:	f002 fd13 	bl	8004614 <HAL_Delay>
	  			if((HAL_GPIO_ReadPin(GPIOE, Rotary_SW_Pin) == 0) && (isPress == 0)) // nut nhan da bam
 8001bee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf2:	480e      	ldr	r0, [pc, #56]	; (8001c2c <Push_Slect+0x58>)
 8001bf4:	f003 fff4 	bl	8005be0 <HAL_GPIO_ReadPin>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d114      	bne.n	8001c28 <Push_Slect+0x54>
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <Push_Slect+0x5c>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d110      	bne.n	8001c28 <Push_Slect+0x54>
	  			{
	  				lcd_clear();
 8001c06:	f7ff ff31 	bl	8001a6c <lcd_clear>
	  				Rpush_number++;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <Push_Slect+0x60>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <Push_Slect+0x60>)
 8001c12:	6013      	str	r3, [r2, #0]
	  				isPress = 1;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <Push_Slect+0x5c>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
	  				button_flag = 0;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <Push_Slect+0x64>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
	  			}
	  		}
	  		else{isPress = 0;}
}
 8001c20:	e002      	b.n	8001c28 <Push_Slect+0x54>
	  		else{isPress = 0;}
 8001c22:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <Push_Slect+0x5c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	20000230 	.word	0x20000230
 8001c34:	20000220 	.word	0x20000220
 8001c38:	20000224 	.word	0x20000224

08001c3c <Pointer_Status>:
void Pointer_Status(uint32_t volume)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	if(volume > last)
 8001c44:	4b33      	ldr	r3, [pc, #204]	; (8001d14 <Pointer_Status+0xd8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d905      	bls.n	8001c5a <Pointer_Status+0x1e>
	{
		pointer_position++;
 8001c4e:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <Pointer_Status+0xdc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3301      	adds	r3, #1
 8001c54:	4a30      	ldr	r2, [pc, #192]	; (8001d18 <Pointer_Status+0xdc>)
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	e009      	b.n	8001c6e <Pointer_Status+0x32>
	}
	else if(volume < last)
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <Pointer_Status+0xd8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d204      	bcs.n	8001c6e <Pointer_Status+0x32>
	{
		pointer_position--;
 8001c64:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <Pointer_Status+0xdc>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	4a2b      	ldr	r2, [pc, #172]	; (8001d18 <Pointer_Status+0xdc>)
 8001c6c:	6013      	str	r3, [r2, #0]
	}
	last = volume;
 8001c6e:	4a29      	ldr	r2, [pc, #164]	; (8001d14 <Pointer_Status+0xd8>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6013      	str	r3, [r2, #0]

	switch(pointer_position)
 8001c74:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <Pointer_Status+0xdc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d838      	bhi.n	8001cee <Pointer_Status+0xb2>
 8001c7c:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <Pointer_Status+0x48>)
 8001c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c82:	bf00      	nop
 8001c84:	08001ca9 	.word	0x08001ca9
 8001c88:	08001cef 	.word	0x08001cef
 8001c8c:	08001cb7 	.word	0x08001cb7
 8001c90:	08001cef 	.word	0x08001cef
 8001c94:	08001cc5 	.word	0x08001cc5
 8001c98:	08001cef 	.word	0x08001cef
 8001c9c:	08001cd3 	.word	0x08001cd3
 8001ca0:	08001cef 	.word	0x08001cef
 8001ca4:	08001ce1 	.word	0x08001ce1
	{
		case 0:
			lcd_send_cmd(0x80 | 0x00); //PH
 8001ca8:	2080      	movs	r0, #128	; 0x80
 8001caa:	f7ff fe7f 	bl	80019ac <lcd_send_cmd>
			lcd_send_string("->");
 8001cae:	481b      	ldr	r0, [pc, #108]	; (8001d1c <Pointer_Status+0xe0>)
 8001cb0:	f7ff ff30 	bl	8001b14 <lcd_send_string>
			break;
 8001cb4:	e029      	b.n	8001d0a <Pointer_Status+0xce>
		case 2:
			lcd_send_cmd(0x80 | 0x40); //PH
 8001cb6:	20c0      	movs	r0, #192	; 0xc0
 8001cb8:	f7ff fe78 	bl	80019ac <lcd_send_cmd>
			lcd_send_string("->");
 8001cbc:	4817      	ldr	r0, [pc, #92]	; (8001d1c <Pointer_Status+0xe0>)
 8001cbe:	f7ff ff29 	bl	8001b14 <lcd_send_string>
			break;
 8001cc2:	e022      	b.n	8001d0a <Pointer_Status+0xce>
		case 4:
			lcd_send_cmd(0x80 | 0x14); //PH
 8001cc4:	2094      	movs	r0, #148	; 0x94
 8001cc6:	f7ff fe71 	bl	80019ac <lcd_send_cmd>
			lcd_send_string("->");
 8001cca:	4814      	ldr	r0, [pc, #80]	; (8001d1c <Pointer_Status+0xe0>)
 8001ccc:	f7ff ff22 	bl	8001b14 <lcd_send_string>
			break;
 8001cd0:	e01b      	b.n	8001d0a <Pointer_Status+0xce>
		case 6:
			lcd_send_cmd(0x80 | 0x54); //PH
 8001cd2:	20d4      	movs	r0, #212	; 0xd4
 8001cd4:	f7ff fe6a 	bl	80019ac <lcd_send_cmd>
			lcd_send_string("->");
 8001cd8:	4810      	ldr	r0, [pc, #64]	; (8001d1c <Pointer_Status+0xe0>)
 8001cda:	f7ff ff1b 	bl	8001b14 <lcd_send_string>
			break;
 8001cde:	e014      	b.n	8001d0a <Pointer_Status+0xce>
		case 8:
			if(Rpush_number == 2||3)
			{
				lcd_send_cmd(0x80 | 0x66);
 8001ce0:	20e6      	movs	r0, #230	; 0xe6
 8001ce2:	f7ff fe63 	bl	80019ac <lcd_send_cmd>
				lcd_send_string(">>");
 8001ce6:	480e      	ldr	r0, [pc, #56]	; (8001d20 <Pointer_Status+0xe4>)
 8001ce8:	f7ff ff14 	bl	8001b14 <lcd_send_string>
			}
			break;
 8001cec:	e00d      	b.n	8001d0a <Pointer_Status+0xce>
		default:
			if(pointer_position>9)
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <Pointer_Status+0xdc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b09      	cmp	r3, #9
 8001cf4:	d908      	bls.n	8001d08 <Pointer_Status+0xcc>
			{
				pointer_position = 0;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <Pointer_Status+0xdc>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(0x80 | 0x00); //PH
 8001cfc:	2080      	movs	r0, #128	; 0x80
 8001cfe:	f7ff fe55 	bl	80019ac <lcd_send_cmd>
				lcd_send_string("->");
 8001d02:	4806      	ldr	r0, [pc, #24]	; (8001d1c <Pointer_Status+0xe0>)
 8001d04:	f7ff ff06 	bl	8001b14 <lcd_send_string>
			}
			break;
 8001d08:	bf00      	nop
	}
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000218 	.word	0x20000218
 8001d18:	2000021c 	.word	0x2000021c
 8001d1c:	0800e358 	.word	0x0800e358
 8001d20:	0800e35c 	.word	0x0800e35c

08001d24 <Pointer_2_Status>:
void Pointer_2_Status(uint32_t line)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	if(line == 0)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <Pointer_2_Status+0x1c>
		{
		lcd_send_cmd(0x80 | 0x0A); //PH
 8001d32:	208a      	movs	r0, #138	; 0x8a
 8001d34:	f7ff fe3a 	bl	80019ac <lcd_send_cmd>
		lcd_send_string("<");
 8001d38:	4812      	ldr	r0, [pc, #72]	; (8001d84 <Pointer_2_Status+0x60>)
 8001d3a:	f7ff feeb 	bl	8001b14 <lcd_send_string>
		else if(line == 6)
		{
		lcd_send_cmd(0x80 | 0x5E); //PH
		lcd_send_string("<");
		}
}
 8001d3e:	e01c      	b.n	8001d7a <Pointer_2_Status+0x56>
		else if(line == 2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d106      	bne.n	8001d54 <Pointer_2_Status+0x30>
		lcd_send_cmd(0x80 | 0x4A); //PH
 8001d46:	20ca      	movs	r0, #202	; 0xca
 8001d48:	f7ff fe30 	bl	80019ac <lcd_send_cmd>
		lcd_send_string("<");
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <Pointer_2_Status+0x60>)
 8001d4e:	f7ff fee1 	bl	8001b14 <lcd_send_string>
}
 8001d52:	e012      	b.n	8001d7a <Pointer_2_Status+0x56>
		else if(line == 4)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d106      	bne.n	8001d68 <Pointer_2_Status+0x44>
		lcd_send_cmd(0x80 | 0x1E); //PH
 8001d5a:	209e      	movs	r0, #158	; 0x9e
 8001d5c:	f7ff fe26 	bl	80019ac <lcd_send_cmd>
		lcd_send_string("<");
 8001d60:	4808      	ldr	r0, [pc, #32]	; (8001d84 <Pointer_2_Status+0x60>)
 8001d62:	f7ff fed7 	bl	8001b14 <lcd_send_string>
}
 8001d66:	e008      	b.n	8001d7a <Pointer_2_Status+0x56>
		else if(line == 6)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d105      	bne.n	8001d7a <Pointer_2_Status+0x56>
		lcd_send_cmd(0x80 | 0x5E); //PH
 8001d6e:	20de      	movs	r0, #222	; 0xde
 8001d70:	f7ff fe1c 	bl	80019ac <lcd_send_cmd>
		lcd_send_string("<");
 8001d74:	4803      	ldr	r0, [pc, #12]	; (8001d84 <Pointer_2_Status+0x60>)
 8001d76:	f7ff fecd 	bl	8001b14 <lcd_send_string>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	0800e360 	.word	0x0800e360

08001d88 <LCD_Menu_2_1>:
void LCD_Menu_2_1()
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b09a      	sub	sp, #104	; 0x68
 8001d8c:	af00      	add	r7, sp, #0
	char buffer_string[100];
	lcd_send_cmd(0x80 | 0x02); //PH
 8001d8e:	2082      	movs	r0, #130	; 0x82
 8001d90:	f7ff fe0c 	bl	80019ac <lcd_send_cmd>
	lcd_send_string("PH:");
 8001d94:	4844      	ldr	r0, [pc, #272]	; (8001ea8 <LCD_Menu_2_1+0x120>)
 8001d96:	f7ff febd 	bl	8001b14 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x42); //PH
 8001d9a:	20c2      	movs	r0, #194	; 0xc2
 8001d9c:	f7ff fe06 	bl	80019ac <lcd_send_cmd>
	lcd_send_string("PH_Thr:");
 8001da0:	4842      	ldr	r0, [pc, #264]	; (8001eac <LCD_Menu_2_1+0x124>)
 8001da2:	f7ff feb7 	bl	8001b14 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x16); //PH
 8001da6:	2096      	movs	r0, #150	; 0x96
 8001da8:	f7ff fe00 	bl	80019ac <lcd_send_cmd>
	lcd_send_string("TDS:");
 8001dac:	4840      	ldr	r0, [pc, #256]	; (8001eb0 <LCD_Menu_2_1+0x128>)
 8001dae:	f7ff feb1 	bl	8001b14 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x56); //PH
 8001db2:	20d6      	movs	r0, #214	; 0xd6
 8001db4:	f7ff fdfa 	bl	80019ac <lcd_send_cmd>
	lcd_send_string("TDS_Thr:");
 8001db8:	483e      	ldr	r0, [pc, #248]	; (8001eb4 <LCD_Menu_2_1+0x12c>)
 8001dba:	f7ff feab 	bl	8001b14 <lcd_send_string>


	lcd_send_cmd(0x80 | 0x0B); //PH_Setpoint
 8001dbe:	208b      	movs	r0, #139	; 0x8b
 8001dc0:	f7ff fdf4 	bl	80019ac <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",PH_SetPoint);
 8001dc4:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <LCD_Menu_2_1+0x130>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbbd 	bl	8000548 <__aeabi_f2d>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	1d38      	adds	r0, r7, #4
 8001dd4:	4939      	ldr	r1, [pc, #228]	; (8001ebc <LCD_Menu_2_1+0x134>)
 8001dd6:	f008 fccf 	bl	800a778 <siprintf>
	lcd_send_string(buffer_string);
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fe99 	bl	8001b14 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe f9f3 	bl	80001d0 <strlen>
 8001dea:	4602      	mov	r2, r0
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f007 fe39 	bl	8009a68 <memset>


	lcd_send_cmd(0x80 | 0x4B); //PH_THR_Setpoint
 8001df6:	20cb      	movs	r0, #203	; 0xcb
 8001df8:	f7ff fdd8 	bl	80019ac <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",PH_THR_SetPoint);
 8001dfc:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <LCD_Menu_2_1+0x138>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fba1 	bl	8000548 <__aeabi_f2d>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	1d38      	adds	r0, r7, #4
 8001e0c:	492b      	ldr	r1, [pc, #172]	; (8001ebc <LCD_Menu_2_1+0x134>)
 8001e0e:	f008 fcb3 	bl	800a778 <siprintf>
	lcd_send_string(buffer_string);
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fe7d 	bl	8001b14 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe f9d7 	bl	80001d0 <strlen>
 8001e22:	4602      	mov	r2, r0
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f007 fe1d 	bl	8009a68 <memset>

	lcd_send_cmd(0x80 | 0x1F); //TDS_Setpoint
 8001e2e:	209f      	movs	r0, #159	; 0x9f
 8001e30:	f7ff fdbc 	bl	80019ac <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",TDS_SetPoint);
 8001e34:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <LCD_Menu_2_1+0x13c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fb85 	bl	8000548 <__aeabi_f2d>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	1d38      	adds	r0, r7, #4
 8001e44:	491d      	ldr	r1, [pc, #116]	; (8001ebc <LCD_Menu_2_1+0x134>)
 8001e46:	f008 fc97 	bl	800a778 <siprintf>
	lcd_send_string(buffer_string);
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fe61 	bl	8001b14 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe f9bb 	bl	80001d0 <strlen>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f007 fe01 	bl	8009a68 <memset>


	lcd_send_cmd(0x80 | 0x5F); //TDS_THR_Setpoint
 8001e66:	20df      	movs	r0, #223	; 0xdf
 8001e68:	f7ff fda0 	bl	80019ac <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",TDS_THR_SetPoint);
 8001e6c:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <LCD_Menu_2_1+0x140>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fb69 	bl	8000548 <__aeabi_f2d>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	1d38      	adds	r0, r7, #4
 8001e7c:	490f      	ldr	r1, [pc, #60]	; (8001ebc <LCD_Menu_2_1+0x134>)
 8001e7e:	f008 fc7b 	bl	800a778 <siprintf>
	lcd_send_string(buffer_string);
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fe45 	bl	8001b14 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe f99f 	bl	80001d0 <strlen>
 8001e92:	4602      	mov	r2, r0
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f007 fde5 	bl	8009a68 <memset>
}
 8001e9e:	bf00      	nop
 8001ea0:	3768      	adds	r7, #104	; 0x68
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	0800e364 	.word	0x0800e364
 8001eac:	0800e368 	.word	0x0800e368
 8001eb0:	0800e370 	.word	0x0800e370
 8001eb4:	0800e378 	.word	0x0800e378
 8001eb8:	200004e8 	.word	0x200004e8
 8001ebc:	0800e384 	.word	0x0800e384
 8001ec0:	200004e4 	.word	0x200004e4
 8001ec4:	200004dc 	.word	0x200004dc
 8001ec8:	200004e0 	.word	0x200004e0

08001ecc <LCD_Menu_2_2>:
void LCD_Menu_2_2()
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x02); //PH
 8001ed0:	2082      	movs	r0, #130	; 0x82
 8001ed2:	f7ff fd6b 	bl	80019ac <lcd_send_cmd>
	lcd_send_string("Pump 1:");
 8001ed6:	480b      	ldr	r0, [pc, #44]	; (8001f04 <LCD_Menu_2_2+0x38>)
 8001ed8:	f7ff fe1c 	bl	8001b14 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x42); //PH
 8001edc:	20c2      	movs	r0, #194	; 0xc2
 8001ede:	f7ff fd65 	bl	80019ac <lcd_send_cmd>
	lcd_send_string("Pump 2:");
 8001ee2:	4809      	ldr	r0, [pc, #36]	; (8001f08 <LCD_Menu_2_2+0x3c>)
 8001ee4:	f7ff fe16 	bl	8001b14 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x16); //PH
 8001ee8:	2096      	movs	r0, #150	; 0x96
 8001eea:	f7ff fd5f 	bl	80019ac <lcd_send_cmd>
	lcd_send_string("Pump 3:");
 8001eee:	4807      	ldr	r0, [pc, #28]	; (8001f0c <LCD_Menu_2_2+0x40>)
 8001ef0:	f7ff fe10 	bl	8001b14 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x56); //PH
 8001ef4:	20d6      	movs	r0, #214	; 0xd6
 8001ef6:	f7ff fd59 	bl	80019ac <lcd_send_cmd>
	lcd_send_string("Pump 4:");
 8001efa:	4805      	ldr	r0, [pc, #20]	; (8001f10 <LCD_Menu_2_2+0x44>)
 8001efc:	f7ff fe0a 	bl	8001b14 <lcd_send_string>
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	0800e38c 	.word	0x0800e38c
 8001f08:	0800e394 	.word	0x0800e394
 8001f0c:	0800e39c 	.word	0x0800e39c
 8001f10:	0800e3a4 	.word	0x0800e3a4

08001f14 <LCD_Menu_2_3>:
void LCD_Menu_2_3(uint8_t isCalib)
{
 8001f14:	b5b0      	push	{r4, r5, r7, lr}
 8001f16:	b0a0      	sub	sp, #128	; 0x80
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
	char buffer_String[100] = {0};
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	f107 0310 	add.w	r3, r7, #16
 8001f26:	2260      	movs	r2, #96	; 0x60
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f007 fd9c 	bl	8009a68 <memset>
	float PH_Calib = 0;
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	677b      	str	r3, [r7, #116]	; 0x74
	float TDS_Calib = 0;
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	673b      	str	r3, [r7, #112]	; 0x70
	if(isCalib == 0)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d15c      	bne.n	8001ffc <LCD_Menu_2_3+0xe8>
	{
		/*PH:*/
		lcd_send_cmd(0x80 | 0x02); //PH
 8001f42:	2082      	movs	r0, #130	; 0x82
 8001f44:	f7ff fd32 	bl	80019ac <lcd_send_cmd>
		sprintf(buffer_String,"PH:%.2f",PH);
 8001f48:	4b61      	ldr	r3, [pc, #388]	; (80020d0 <LCD_Menu_2_3+0x1bc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fafb 	bl	8000548 <__aeabi_f2d>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	f107 000c 	add.w	r0, r7, #12
 8001f5a:	495e      	ldr	r1, [pc, #376]	; (80020d4 <LCD_Menu_2_3+0x1c0>)
 8001f5c:	f008 fc0c 	bl	800a778 <siprintf>
		lcd_send_string(buffer_String);
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fdd5 	bl	8001b14 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x43); //PH
 8001f6a:	20c3      	movs	r0, #195	; 0xc3
 8001f6c:	f7ff fd1e 	bl	80019ac <lcd_send_cmd>
		sprintf(buffer_String,"=>%.4f|%.4f",ph_a_value,ph_b_value);
 8001f70:	4b59      	ldr	r3, [pc, #356]	; (80020d8 <LCD_Menu_2_3+0x1c4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fae7 	bl	8000548 <__aeabi_f2d>
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	460d      	mov	r5, r1
 8001f7e:	4b57      	ldr	r3, [pc, #348]	; (80020dc <LCD_Menu_2_3+0x1c8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fae0 	bl	8000548 <__aeabi_f2d>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	f107 000c 	add.w	r0, r7, #12
 8001f90:	e9cd 2300 	strd	r2, r3, [sp]
 8001f94:	4622      	mov	r2, r4
 8001f96:	462b      	mov	r3, r5
 8001f98:	4951      	ldr	r1, [pc, #324]	; (80020e0 <LCD_Menu_2_3+0x1cc>)
 8001f9a:	f008 fbed 	bl	800a778 <siprintf>
		lcd_send_string(buffer_String);
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fdb6 	bl	8001b14 <lcd_send_string>

		/*TDS*/
		lcd_send_cmd(0x80 | 0x16); //PH
 8001fa8:	2096      	movs	r0, #150	; 0x96
 8001faa:	f7ff fcff 	bl	80019ac <lcd_send_cmd>
		sprintf(buffer_String,"TDS:%d",(int)TDS);
 8001fae:	4b4d      	ldr	r3, [pc, #308]	; (80020e4 <LCD_Menu_2_3+0x1d0>)
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	ee17 2a90 	vmov	r2, s15
 8001fc0:	4949      	ldr	r1, [pc, #292]	; (80020e8 <LCD_Menu_2_3+0x1d4>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f008 fbd8 	bl	800a778 <siprintf>
		lcd_send_string(buffer_String);
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fda1 	bl	8001b14 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x57); //PH
 8001fd2:	20d7      	movs	r0, #215	; 0xd7
 8001fd4:	f7ff fcea 	bl	80019ac <lcd_send_cmd>
		sprintf(buffer_String,"=>%.2f",tds_k_value);
 8001fd8:	4b44      	ldr	r3, [pc, #272]	; (80020ec <LCD_Menu_2_3+0x1d8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fab3 	bl	8000548 <__aeabi_f2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	f107 000c 	add.w	r0, r7, #12
 8001fea:	4941      	ldr	r1, [pc, #260]	; (80020f0 <LCD_Menu_2_3+0x1dc>)
 8001fec:	f008 fbc4 	bl	800a778 <siprintf>
		lcd_send_string(buffer_String);
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fd8d 	bl	8001b14 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x41);
		lcd_send_string(buffer_String);
		lcd_send_cmd(0x80 | 0x54);
		lcd_send_string("tds_400 or ph_900");
	}
}
 8001ffa:	e065      	b.n	80020c8 <LCD_Menu_2_3+0x1b4>
	else if(isCalib == 1)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d132      	bne.n	8002068 <LCD_Menu_2_3+0x154>
		lcd_send_cmd(0x80 | 0x02);
 8002002:	2082      	movs	r0, #130	; 0x82
 8002004:	f7ff fcd2 	bl	80019ac <lcd_send_cmd>
		lcd_send_string("Calib PH mode...");
 8002008:	483a      	ldr	r0, [pc, #232]	; (80020f4 <LCD_Menu_2_3+0x1e0>)
 800200a:	f7ff fd83 	bl	8001b14 <lcd_send_string>
		PH_Calib = PH_Calculator(ph_a_value, ph_b_value, ADC_Value[0]);
 800200e:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <LCD_Menu_2_3+0x1c4>)
 8002010:	edd3 7a00 	vldr	s15, [r3]
 8002014:	4b31      	ldr	r3, [pc, #196]	; (80020dc <LCD_Menu_2_3+0x1c8>)
 8002016:	ed93 7a00 	vldr	s14, [r3]
 800201a:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <LCD_Menu_2_3+0x1e4>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	eef0 0a47 	vmov.f32	s1, s14
 8002024:	eeb0 0a67 	vmov.f32	s0, s15
 8002028:	f000 fd62 	bl	8002af0 <PH_Calculator>
 800202c:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
		sprintf(buffer_String,"%.2f---%d",PH_Calib,ADC_Value[0]);
 8002030:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002032:	f7fe fa89 	bl	8000548 <__aeabi_f2d>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	492f      	ldr	r1, [pc, #188]	; (80020f8 <LCD_Menu_2_3+0x1e4>)
 800203c:	8809      	ldrh	r1, [r1, #0]
 800203e:	f107 000c 	add.w	r0, r7, #12
 8002042:	9100      	str	r1, [sp, #0]
 8002044:	492d      	ldr	r1, [pc, #180]	; (80020fc <LCD_Menu_2_3+0x1e8>)
 8002046:	f008 fb97 	bl	800a778 <siprintf>
		lcd_send_cmd(0x80 | 0x41);
 800204a:	20c1      	movs	r0, #193	; 0xc1
 800204c:	f7ff fcae 	bl	80019ac <lcd_send_cmd>
		lcd_send_string(buffer_String);
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fd5d 	bl	8001b14 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800205a:	20d4      	movs	r0, #212	; 0xd4
 800205c:	f7ff fca6 	bl	80019ac <lcd_send_cmd>
		lcd_send_string("ph_7 or ph_4");
 8002060:	4827      	ldr	r0, [pc, #156]	; (8002100 <LCD_Menu_2_3+0x1ec>)
 8002062:	f7ff fd57 	bl	8001b14 <lcd_send_string>
}
 8002066:	e02f      	b.n	80020c8 <LCD_Menu_2_3+0x1b4>
	else if(isCalib == 2)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d12c      	bne.n	80020c8 <LCD_Menu_2_3+0x1b4>
		lcd_send_cmd(0x80 | 0x02);
 800206e:	2082      	movs	r0, #130	; 0x82
 8002070:	f7ff fc9c 	bl	80019ac <lcd_send_cmd>
		lcd_send_string("Calib TDS mode...");
 8002074:	4823      	ldr	r0, [pc, #140]	; (8002104 <LCD_Menu_2_3+0x1f0>)
 8002076:	f7ff fd4d 	bl	8001b14 <lcd_send_string>
		TDS_Calib = TDS_Calculator(tds_k_value, ADC_Value[1]);
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <LCD_Menu_2_3+0x1d8>)
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <LCD_Menu_2_3+0x1e4>)
 8002082:	885b      	ldrh	r3, [r3, #2]
 8002084:	4618      	mov	r0, r3
 8002086:	eeb0 0a67 	vmov.f32	s0, s15
 800208a:	f000 fd6d 	bl	8002b68 <TDS_Calculator>
 800208e:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		sprintf(buffer_String,"%.1f-%d",(float)TDS_Calib,ADC_Value[1]);
 8002092:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002094:	f7fe fa58 	bl	8000548 <__aeabi_f2d>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4916      	ldr	r1, [pc, #88]	; (80020f8 <LCD_Menu_2_3+0x1e4>)
 800209e:	8849      	ldrh	r1, [r1, #2]
 80020a0:	f107 000c 	add.w	r0, r7, #12
 80020a4:	9100      	str	r1, [sp, #0]
 80020a6:	4918      	ldr	r1, [pc, #96]	; (8002108 <LCD_Menu_2_3+0x1f4>)
 80020a8:	f008 fb66 	bl	800a778 <siprintf>
		lcd_send_cmd(0x80 | 0x41);
 80020ac:	20c1      	movs	r0, #193	; 0xc1
 80020ae:	f7ff fc7d 	bl	80019ac <lcd_send_cmd>
		lcd_send_string(buffer_String);
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fd2c 	bl	8001b14 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80020bc:	20d4      	movs	r0, #212	; 0xd4
 80020be:	f7ff fc75 	bl	80019ac <lcd_send_cmd>
		lcd_send_string("tds_400 or ph_900");
 80020c2:	4812      	ldr	r0, [pc, #72]	; (800210c <LCD_Menu_2_3+0x1f8>)
 80020c4:	f7ff fd26 	bl	8001b14 <lcd_send_string>
}
 80020c8:	bf00      	nop
 80020ca:	3778      	adds	r7, #120	; 0x78
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bdb0      	pop	{r4, r5, r7, pc}
 80020d0:	200004d4 	.word	0x200004d4
 80020d4:	0800e3ac 	.word	0x0800e3ac
 80020d8:	20000934 	.word	0x20000934
 80020dc:	20000938 	.word	0x20000938
 80020e0:	0800e3b4 	.word	0x0800e3b4
 80020e4:	200004d0 	.word	0x200004d0
 80020e8:	0800e3c0 	.word	0x0800e3c0
 80020ec:	2000093c 	.word	0x2000093c
 80020f0:	0800e3c8 	.word	0x0800e3c8
 80020f4:	0800e3d0 	.word	0x0800e3d0
 80020f8:	20000928 	.word	0x20000928
 80020fc:	0800e3e4 	.word	0x0800e3e4
 8002100:	0800e3f0 	.word	0x0800e3f0
 8002104:	0800e400 	.word	0x0800e400
 8002108:	0800e414 	.word	0x0800e414
 800210c:	0800e41c 	.word	0x0800e41c

08002110 <LCD_Menu_2_4>:
void LCD_Menu_2_4()
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x02); //PH
 8002114:	2082      	movs	r0, #130	; 0x82
 8002116:	f7ff fc49 	bl	80019ac <lcd_send_cmd>
	lcd_send_string("Go to the link:");
 800211a:	480b      	ldr	r0, [pc, #44]	; (8002148 <LCD_Menu_2_4+0x38>)
 800211c:	f7ff fcfa 	bl	8001b14 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x42); //PH
 8002120:	20c2      	movs	r0, #194	; 0xc2
 8002122:	f7ff fc43 	bl	80019ac <lcd_send_cmd>
	lcd_send_string("setupwifi.com.vn");
 8002126:	4809      	ldr	r0, [pc, #36]	; (800214c <LCD_Menu_2_4+0x3c>)
 8002128:	f7ff fcf4 	bl	8001b14 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x16); //PH
 800212c:	2096      	movs	r0, #150	; 0x96
 800212e:	f7ff fc3d 	bl	80019ac <lcd_send_cmd>
	lcd_send_string("Start");
 8002132:	4807      	ldr	r0, [pc, #28]	; (8002150 <LCD_Menu_2_4+0x40>)
 8002134:	f7ff fcee 	bl	8001b14 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x56); //PH
 8002138:	20d6      	movs	r0, #214	; 0xd6
 800213a:	f7ff fc37 	bl	80019ac <lcd_send_cmd>
	lcd_send_string("End");
 800213e:	4805      	ldr	r0, [pc, #20]	; (8002154 <LCD_Menu_2_4+0x44>)
 8002140:	f7ff fce8 	bl	8001b14 <lcd_send_string>
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}
 8002148:	0800e430 	.word	0x0800e430
 800214c:	0800e440 	.word	0x0800e440
 8002150:	0800e454 	.word	0x0800e454
 8002154:	0800e45c 	.word	0x0800e45c

08002158 <LCD_Menu_1>:
void LCD_Menu_1()
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x02);
 800215c:	2082      	movs	r0, #130	; 0x82
 800215e:	f7ff fc25 	bl	80019ac <lcd_send_cmd>
		lcd_send_string("Set point");
 8002162:	480b      	ldr	r0, [pc, #44]	; (8002190 <LCD_Menu_1+0x38>)
 8002164:	f7ff fcd6 	bl	8001b14 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x42);
 8002168:	20c2      	movs	r0, #194	; 0xc2
 800216a:	f7ff fc1f 	bl	80019ac <lcd_send_cmd>
		lcd_send_string("Testing");
 800216e:	4809      	ldr	r0, [pc, #36]	; (8002194 <LCD_Menu_1+0x3c>)
 8002170:	f7ff fcd0 	bl	8001b14 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x16);
 8002174:	2096      	movs	r0, #150	; 0x96
 8002176:	f7ff fc19 	bl	80019ac <lcd_send_cmd>
		lcd_send_string("Calibration sensor");
 800217a:	4807      	ldr	r0, [pc, #28]	; (8002198 <LCD_Menu_1+0x40>)
 800217c:	f7ff fcca 	bl	8001b14 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x56);
 8002180:	20d6      	movs	r0, #214	; 0xd6
 8002182:	f7ff fc13 	bl	80019ac <lcd_send_cmd>
		lcd_send_string("Wifi Config");
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <LCD_Menu_1+0x44>)
 8002188:	f7ff fcc4 	bl	8001b14 <lcd_send_string>
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	0800e460 	.word	0x0800e460
 8002194:	0800e46c 	.word	0x0800e46c
 8002198:	0800e474 	.word	0x0800e474
 800219c:	0800e488 	.word	0x0800e488

080021a0 <LCD_Normal_Mode>:
void LCD_Normal_Mode()
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b09a      	sub	sp, #104	; 0x68
 80021a4:	af00      	add	r7, sp, #0
	char String[100];
	sprintf(String,"PH  :%.2f   ",PH);
 80021a6:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <LCD_Normal_Mode+0xc4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f9cc 	bl	8000548 <__aeabi_f2d>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	1d38      	adds	r0, r7, #4
 80021b6:	492c      	ldr	r1, [pc, #176]	; (8002268 <LCD_Normal_Mode+0xc8>)
 80021b8:	f008 fade 	bl	800a778 <siprintf>
	lcd_send_cmd(0x80 | 0x03); //PH
 80021bc:	2083      	movs	r0, #131	; 0x83
 80021be:	f7ff fbf5 	bl	80019ac <lcd_send_cmd>
	lcd_send_string(String) ;
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fca5 	bl	8001b14 <lcd_send_string>
	memset(String,0,strlen(String));
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fd ffff 	bl	80001d0 <strlen>
 80021d2:	4602      	mov	r2, r0
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f007 fc45 	bl	8009a68 <memset>

	sprintf(String,"TDS :%.0f   ",TDS);
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <LCD_Normal_Mode+0xcc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9b0 	bl	8000548 <__aeabi_f2d>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	1d38      	adds	r0, r7, #4
 80021ee:	4920      	ldr	r1, [pc, #128]	; (8002270 <LCD_Normal_Mode+0xd0>)
 80021f0:	f008 fac2 	bl	800a778 <siprintf>
	lcd_send_cmd(0x80 | 0x43); //PH
 80021f4:	20c3      	movs	r0, #195	; 0xc3
 80021f6:	f7ff fbd9 	bl	80019ac <lcd_send_cmd>
	lcd_send_string(String);
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fc89 	bl	8001b14 <lcd_send_string>
	memset(String,0,strlen(String));
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	4618      	mov	r0, r3
 8002206:	f7fd ffe3 	bl	80001d0 <strlen>
 800220a:	4602      	mov	r2, r0
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f007 fc29 	bl	8009a68 <memset>

	sprintf(String,"TEMP:%.2f   ",Temperature);
 8002216:	4b17      	ldr	r3, [pc, #92]	; (8002274 <LCD_Normal_Mode+0xd4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe f994 	bl	8000548 <__aeabi_f2d>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	1d38      	adds	r0, r7, #4
 8002226:	4914      	ldr	r1, [pc, #80]	; (8002278 <LCD_Normal_Mode+0xd8>)
 8002228:	f008 faa6 	bl	800a778 <siprintf>
	lcd_send_cmd(0x80 | 0x17); //PH
 800222c:	2097      	movs	r0, #151	; 0x97
 800222e:	f7ff fbbd 	bl	80019ac <lcd_send_cmd>
	lcd_send_string(String);
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fc6d 	bl	8001b14 <lcd_send_string>
	memset(String,0,strlen(String));
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	4618      	mov	r0, r3
 800223e:	f7fd ffc7 	bl	80001d0 <strlen>
 8002242:	4602      	mov	r2, r0
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f007 fc0d 	bl	8009a68 <memset>
	lcd_send_cmd(0x80 | 0x54); //PH
 800224e:	20d4      	movs	r0, #212	; 0xd4
 8002250:	f7ff fbac 	bl	80019ac <lcd_send_cmd>
	lcd_send_string("PRESS TO CONFIG MODE");
 8002254:	4809      	ldr	r0, [pc, #36]	; (800227c <LCD_Normal_Mode+0xdc>)
 8002256:	f7ff fc5d 	bl	8001b14 <lcd_send_string>
}
 800225a:	bf00      	nop
 800225c:	3768      	adds	r7, #104	; 0x68
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200004d4 	.word	0x200004d4
 8002268:	0800e494 	.word	0x0800e494
 800226c:	200004d0 	.word	0x200004d0
 8002270:	0800e4a4 	.word	0x0800e4a4
 8002274:	200004d8 	.word	0x200004d8
 8002278:	0800e4b4 	.word	0x0800e4b4
 800227c:	0800e4c4 	.word	0x0800e4c4

08002280 <LCD_Display>:
void LCD_Display()
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
	float tamp  = 0;
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	607b      	str	r3, [r7, #4]
	float tamp2 = 0;
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	603b      	str	r3, [r7, #0]
	{
	Push_Slect();
 8002292:	f7ff fc9f 	bl	8001bd4 <Push_Slect>
	if(Rpush_number == 0)
 8002296:	4b91      	ldr	r3, [pc, #580]	; (80024dc <LCD_Display+0x25c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d103      	bne.n	80022a6 <LCD_Display+0x26>
	{
		Page = 0;
 800229e:	4b90      	ldr	r3, [pc, #576]	; (80024e0 <LCD_Display+0x260>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e145      	b.n	8002532 <LCD_Display+0x2b2>
	}
	else if(Rpush_number == 1)
 80022a6:	4b8d      	ldr	r3, [pc, #564]	; (80024dc <LCD_Display+0x25c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d103      	bne.n	80022b6 <LCD_Display+0x36>
	{
		Page = 1;
 80022ae:	4b8c      	ldr	r3, [pc, #560]	; (80024e0 <LCD_Display+0x260>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e13d      	b.n	8002532 <LCD_Display+0x2b2>
	}
	else if(Rpush_number == 2)
 80022b6:	4b89      	ldr	r3, [pc, #548]	; (80024dc <LCD_Display+0x25c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d144      	bne.n	8002348 <LCD_Display+0xc8>
	{
		if(button_flag == 0)
 80022be:	4b89      	ldr	r3, [pc, #548]	; (80024e4 <LCD_Display+0x264>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 8135 	bne.w	8002532 <LCD_Display+0x2b2>
		{
			switch(pointer_position)
 80022c8:	4b87      	ldr	r3, [pc, #540]	; (80024e8 <LCD_Display+0x268>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b06      	cmp	r3, #6
 80022ce:	d82d      	bhi.n	800232c <LCD_Display+0xac>
 80022d0:	a201      	add	r2, pc, #4	; (adr r2, 80022d8 <LCD_Display+0x58>)
 80022d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d6:	bf00      	nop
 80022d8:	080022f5 	.word	0x080022f5
 80022dc:	0800232d 	.word	0x0800232d
 80022e0:	08002303 	.word	0x08002303
 80022e4:	0800232d 	.word	0x0800232d
 80022e8:	08002311 	.word	0x08002311
 80022ec:	0800232d 	.word	0x0800232d
 80022f0:	0800231f 	.word	0x0800231f
		  {
			case 0:
				option_page_1 = Page1_SetPoint;
 80022f4:	4b7d      	ldr	r3, [pc, #500]	; (80024ec <LCD_Display+0x26c>)
 80022f6:	2202      	movs	r2, #2
 80022f8:	701a      	strb	r2, [r3, #0]
				Page = 2;
 80022fa:	4b79      	ldr	r3, [pc, #484]	; (80024e0 <LCD_Display+0x260>)
 80022fc:	2202      	movs	r2, #2
 80022fe:	601a      	str	r2, [r3, #0]
				break;
 8002300:	e01e      	b.n	8002340 <LCD_Display+0xc0>
			case 2:
				option_page_1 = Page1_Testing;
 8002302:	4b7a      	ldr	r3, [pc, #488]	; (80024ec <LCD_Display+0x26c>)
 8002304:	2203      	movs	r2, #3
 8002306:	701a      	strb	r2, [r3, #0]
				Page = 2;
 8002308:	4b75      	ldr	r3, [pc, #468]	; (80024e0 <LCD_Display+0x260>)
 800230a:	2202      	movs	r2, #2
 800230c:	601a      	str	r2, [r3, #0]
				break;
 800230e:	e017      	b.n	8002340 <LCD_Display+0xc0>
			case 4:
				option_page_1 = Page1_Calbration_sensor;
 8002310:	4b76      	ldr	r3, [pc, #472]	; (80024ec <LCD_Display+0x26c>)
 8002312:	2204      	movs	r2, #4
 8002314:	701a      	strb	r2, [r3, #0]
				Page = 2;
 8002316:	4b72      	ldr	r3, [pc, #456]	; (80024e0 <LCD_Display+0x260>)
 8002318:	2202      	movs	r2, #2
 800231a:	601a      	str	r2, [r3, #0]
				break;
 800231c:	e010      	b.n	8002340 <LCD_Display+0xc0>
			case 6:
				option_page_1 = Page1_WifiConfig;
 800231e:	4b73      	ldr	r3, [pc, #460]	; (80024ec <LCD_Display+0x26c>)
 8002320:	2205      	movs	r2, #5
 8002322:	701a      	strb	r2, [r3, #0]
				Page = 2;
 8002324:	4b6e      	ldr	r3, [pc, #440]	; (80024e0 <LCD_Display+0x260>)
 8002326:	2202      	movs	r2, #2
 8002328:	601a      	str	r2, [r3, #0]
				break;
 800232a:	e009      	b.n	8002340 <LCD_Display+0xc0>
			default:
				option_page_1 = Page1_Back;
 800232c:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <LCD_Display+0x26c>)
 800232e:	2206      	movs	r2, #6
 8002330:	701a      	strb	r2, [r3, #0]
				Page = 0;
 8002332:	4b6b      	ldr	r3, [pc, #428]	; (80024e0 <LCD_Display+0x260>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
				Rpush_number = 0;
 8002338:	4b68      	ldr	r3, [pc, #416]	; (80024dc <LCD_Display+0x25c>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
				break;
 800233e:	bf00      	nop
			}
			button_flag =1;
 8002340:	4b68      	ldr	r3, [pc, #416]	; (80024e4 <LCD_Display+0x264>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	e0f4      	b.n	8002532 <LCD_Display+0x2b2>
		}
	}
	else if(Rpush_number == 3)
 8002348:	4b64      	ldr	r3, [pc, #400]	; (80024dc <LCD_Display+0x25c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b03      	cmp	r3, #3
 800234e:	f040 8084 	bne.w	800245a <LCD_Display+0x1da>
	{
			// OPTION SETPOINT AT PAGE 1
			if(option_page_1 == Page1_SetPoint)
 8002352:	4b66      	ldr	r3, [pc, #408]	; (80024ec <LCD_Display+0x26c>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d123      	bne.n	80023a2 <LCD_Display+0x122>
			{
				if(pointer_position == 0)
 800235a:	4b63      	ldr	r3, [pc, #396]	; (80024e8 <LCD_Display+0x268>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d103      	bne.n	800236a <LCD_Display+0xea>
				{
					option_page_2 = Page2_ph;
 8002362:	4b63      	ldr	r3, [pc, #396]	; (80024f0 <LCD_Display+0x270>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e0e3      	b.n	8002532 <LCD_Display+0x2b2>
				}
				else if(pointer_position == 2)
 800236a:	4b5f      	ldr	r3, [pc, #380]	; (80024e8 <LCD_Display+0x268>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d103      	bne.n	800237a <LCD_Display+0xfa>
				{
					option_page_2 = Page2_ph_thr;
 8002372:	4b5f      	ldr	r3, [pc, #380]	; (80024f0 <LCD_Display+0x270>)
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
 8002378:	e0db      	b.n	8002532 <LCD_Display+0x2b2>
				}
				else if(pointer_position == 4)
 800237a:	4b5b      	ldr	r3, [pc, #364]	; (80024e8 <LCD_Display+0x268>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b04      	cmp	r3, #4
 8002380:	d103      	bne.n	800238a <LCD_Display+0x10a>
				{
					option_page_2 = Page2_tds;
 8002382:	4b5b      	ldr	r3, [pc, #364]	; (80024f0 <LCD_Display+0x270>)
 8002384:	2202      	movs	r2, #2
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	e0d3      	b.n	8002532 <LCD_Display+0x2b2>
				}
				else if(pointer_position == 6)
 800238a:	4b57      	ldr	r3, [pc, #348]	; (80024e8 <LCD_Display+0x268>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b06      	cmp	r3, #6
 8002390:	d103      	bne.n	800239a <LCD_Display+0x11a>
				{
					option_page_2 = Page2_tds_thr;
 8002392:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <LCD_Display+0x270>)
 8002394:	2203      	movs	r2, #3
 8002396:	701a      	strb	r2, [r3, #0]
 8002398:	e0cb      	b.n	8002532 <LCD_Display+0x2b2>
				}
				else
				{
					option_page_2 = Page2_Back;
 800239a:	4b55      	ldr	r3, [pc, #340]	; (80024f0 <LCD_Display+0x270>)
 800239c:	220c      	movs	r2, #12
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e0c7      	b.n	8002532 <LCD_Display+0x2b2>
				}

			}
			//// OPTION TESTING AT PAGE 1
			else if (option_page_1 ==Page1_Testing)
 80023a2:	4b52      	ldr	r3, [pc, #328]	; (80024ec <LCD_Display+0x26c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d123      	bne.n	80023f2 <LCD_Display+0x172>
			{
				if(pointer_position == 0)
 80023aa:	4b4f      	ldr	r3, [pc, #316]	; (80024e8 <LCD_Display+0x268>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d103      	bne.n	80023ba <LCD_Display+0x13a>
				{
					option_page_2 = Page2_pump_1;
 80023b2:	4b4f      	ldr	r3, [pc, #316]	; (80024f0 <LCD_Display+0x270>)
 80023b4:	2204      	movs	r2, #4
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	e0bb      	b.n	8002532 <LCD_Display+0x2b2>
				}
				else if(pointer_position == 2)
 80023ba:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <LCD_Display+0x268>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d103      	bne.n	80023ca <LCD_Display+0x14a>
				{
					option_page_2 = Page2_pump_2;
 80023c2:	4b4b      	ldr	r3, [pc, #300]	; (80024f0 <LCD_Display+0x270>)
 80023c4:	2205      	movs	r2, #5
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e0b3      	b.n	8002532 <LCD_Display+0x2b2>
				}
				else if(pointer_position == 4)
 80023ca:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <LCD_Display+0x268>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d103      	bne.n	80023da <LCD_Display+0x15a>
				{
					option_page_2 = Page2_pump_3;
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <LCD_Display+0x270>)
 80023d4:	2206      	movs	r2, #6
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	e0ab      	b.n	8002532 <LCD_Display+0x2b2>
				}
				else if(pointer_position == 6)
 80023da:	4b43      	ldr	r3, [pc, #268]	; (80024e8 <LCD_Display+0x268>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d103      	bne.n	80023ea <LCD_Display+0x16a>
				{
					option_page_2 = Page2_pump_4;
 80023e2:	4b43      	ldr	r3, [pc, #268]	; (80024f0 <LCD_Display+0x270>)
 80023e4:	2207      	movs	r2, #7
 80023e6:	701a      	strb	r2, [r3, #0]
 80023e8:	e0a3      	b.n	8002532 <LCD_Display+0x2b2>
				}
				else
				{
					option_page_2 = Page2_Back;
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <LCD_Display+0x270>)
 80023ec:	220c      	movs	r2, #12
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e09f      	b.n	8002532 <LCD_Display+0x2b2>
				}

			}
			///// OPTION CALIB AT PAGE 1
			else if(option_page_1 == Page1_Calbration_sensor)
 80023f2:	4b3e      	ldr	r3, [pc, #248]	; (80024ec <LCD_Display+0x26c>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d117      	bne.n	800242a <LCD_Display+0x1aa>
			{

				if(pointer_position == 0)
 80023fa:	4b3b      	ldr	r3, [pc, #236]	; (80024e8 <LCD_Display+0x268>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d105      	bne.n	800240e <LCD_Display+0x18e>
				{
					option_page_2 = Page2_calib_ph;
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <LCD_Display+0x270>)
 8002404:	2208      	movs	r2, #8
 8002406:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 8002408:	f7ff fb30 	bl	8001a6c <lcd_clear>
 800240c:	e091      	b.n	8002532 <LCD_Display+0x2b2>
				}
				else if(pointer_position == 4)
 800240e:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <LCD_Display+0x268>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b04      	cmp	r3, #4
 8002414:	d105      	bne.n	8002422 <LCD_Display+0x1a2>
				{
					option_page_2 = Page2_calib_tds;
 8002416:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <LCD_Display+0x270>)
 8002418:	2209      	movs	r2, #9
 800241a:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 800241c:	f7ff fb26 	bl	8001a6c <lcd_clear>
 8002420:	e087      	b.n	8002532 <LCD_Display+0x2b2>
				}
				else
				{
					option_page_2 = Page2_Back;
 8002422:	4b33      	ldr	r3, [pc, #204]	; (80024f0 <LCD_Display+0x270>)
 8002424:	220c      	movs	r2, #12
 8002426:	701a      	strb	r2, [r3, #0]
 8002428:	e083      	b.n	8002532 <LCD_Display+0x2b2>
				}
			}
			///OPTION WIFICONFIG PAGE 1
			else if(option_page_1 == Page1_WifiConfig)
 800242a:	4b30      	ldr	r3, [pc, #192]	; (80024ec <LCD_Display+0x26c>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b05      	cmp	r3, #5
 8002430:	d17f      	bne.n	8002532 <LCD_Display+0x2b2>
			{
				if(pointer_position == 4)
 8002432:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <LCD_Display+0x268>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b04      	cmp	r3, #4
 8002438:	d103      	bne.n	8002442 <LCD_Display+0x1c2>
				{
					option_page_2 = Page2_start;
 800243a:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <LCD_Display+0x270>)
 800243c:	220a      	movs	r2, #10
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	e077      	b.n	8002532 <LCD_Display+0x2b2>
				}
				else if(pointer_position == 6)
 8002442:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <LCD_Display+0x268>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b06      	cmp	r3, #6
 8002448:	d103      	bne.n	8002452 <LCD_Display+0x1d2>
				{
					option_page_2 = Page2_end;
 800244a:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <LCD_Display+0x270>)
 800244c:	220b      	movs	r2, #11
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	e06f      	b.n	8002532 <LCD_Display+0x2b2>
				}
				else
				{
					option_page_2 = Page2_Back;
 8002452:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <LCD_Display+0x270>)
 8002454:	220c      	movs	r2, #12
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	e06b      	b.n	8002532 <LCD_Display+0x2b2>
				}
			}
		}
		else if(Rpush_number == 4)  // Only for Set up value
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <LCD_Display+0x25c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b04      	cmp	r3, #4
 8002460:	d167      	bne.n	8002532 <LCD_Display+0x2b2>
		{
			if(option_page_1 == Page1_SetPoint)
 8002462:	4b22      	ldr	r3, [pc, #136]	; (80024ec <LCD_Display+0x26c>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d116      	bne.n	8002498 <LCD_Display+0x218>
			{
				option_page_2 = Page2_Nothing;
 800246a:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <LCD_Display+0x270>)
 800246c:	220d      	movs	r2, #13
 800246e:	701a      	strb	r2, [r3, #0]
				Rpush_number = 2;
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <LCD_Display+0x25c>)
 8002472:	2202      	movs	r2, #2
 8002474:	601a      	str	r2, [r3, #0]
				button_flag = 1;
 8002476:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <LCD_Display+0x264>)
 8002478:	2201      	movs	r2, #1
 800247a:	601a      	str	r2, [r3, #0]
				pointer_position = pointer_position + 1;
 800247c:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <LCD_Display+0x268>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <LCD_Display+0x268>)
 8002484:	6013      	str	r3, [r2, #0]
				Save_SetPoint(flash_setpoint);
 8002486:	2000      	movs	r0, #0
 8002488:	f000 fb86 	bl	8002b98 <Save_SetPoint>
				HAL_TIM_Base_Start_IT(&htim4);
 800248c:	4819      	ldr	r0, [pc, #100]	; (80024f4 <LCD_Display+0x274>)
 800248e:	f005 fb57 	bl	8007b40 <HAL_TIM_Base_Start_IT>
				lcd_clear();
 8002492:	f7ff faeb 	bl	8001a6c <lcd_clear>
 8002496:	e04c      	b.n	8002532 <LCD_Display+0x2b2>
			}
			else if(option_page_1 == Page1_Calbration_sensor)
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <LCD_Display+0x26c>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b04      	cmp	r3, #4
 800249e:	d148      	bne.n	8002532 <LCD_Display+0x2b2>
			{
				if(option_page_2 == Page2_calib_ph)
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <LCD_Display+0x270>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d127      	bne.n	80024f8 <LCD_Display+0x278>
				{
					option_page_2 = Page2_Nothing;
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <LCD_Display+0x270>)
 80024aa:	220d      	movs	r2, #13
 80024ac:	701a      	strb	r2, [r3, #0]
					Rpush_number = 2;
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <LCD_Display+0x25c>)
 80024b0:	2202      	movs	r2, #2
 80024b2:	601a      	str	r2, [r3, #0]
					button_flag = 1;
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <LCD_Display+0x264>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
					pointer_position = pointer_position + 1;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <LCD_Display+0x268>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3301      	adds	r3, #1
 80024c0:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <LCD_Display+0x268>)
 80024c2:	6013      	str	r3, [r2, #0]
					Save_SetPoint(flash_calibration_ph);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f000 fb67 	bl	8002b98 <Save_SetPoint>
					Read_SetPoint(flash_calibration_ph);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f000 fbc6 	bl	8002c5c <Read_SetPoint>
					HAL_TIM_Base_Start_IT(&htim4);
 80024d0:	4808      	ldr	r0, [pc, #32]	; (80024f4 <LCD_Display+0x274>)
 80024d2:	f005 fb35 	bl	8007b40 <HAL_TIM_Base_Start_IT>
					lcd_clear();
 80024d6:	f7ff fac9 	bl	8001a6c <lcd_clear>
 80024da:	e02a      	b.n	8002532 <LCD_Display+0x2b2>
 80024dc:	20000220 	.word	0x20000220
 80024e0:	20000228 	.word	0x20000228
 80024e4:	20000224 	.word	0x20000224
 80024e8:	2000021c 	.word	0x2000021c
 80024ec:	20000001 	.word	0x20000001
 80024f0:	20000002 	.word	0x20000002
 80024f4:	2000039c 	.word	0x2000039c
				}
				else if(option_page_2 ==Page2_calib_tds)
 80024f8:	4bb1      	ldr	r3, [pc, #708]	; (80027c0 <LCD_Display+0x540>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b09      	cmp	r3, #9
 80024fe:	d118      	bne.n	8002532 <LCD_Display+0x2b2>
				{
					option_page_2 = Page2_Nothing;
 8002500:	4baf      	ldr	r3, [pc, #700]	; (80027c0 <LCD_Display+0x540>)
 8002502:	220d      	movs	r2, #13
 8002504:	701a      	strb	r2, [r3, #0]
					Rpush_number = 2;
 8002506:	4baf      	ldr	r3, [pc, #700]	; (80027c4 <LCD_Display+0x544>)
 8002508:	2202      	movs	r2, #2
 800250a:	601a      	str	r2, [r3, #0]
					button_flag = 1;
 800250c:	4bae      	ldr	r3, [pc, #696]	; (80027c8 <LCD_Display+0x548>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]
					pointer_position = pointer_position + 1;
 8002512:	4bae      	ldr	r3, [pc, #696]	; (80027cc <LCD_Display+0x54c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	3301      	adds	r3, #1
 8002518:	4aac      	ldr	r2, [pc, #688]	; (80027cc <LCD_Display+0x54c>)
 800251a:	6013      	str	r3, [r2, #0]
					Save_SetPoint(flash_calibration_tds);
 800251c:	2002      	movs	r0, #2
 800251e:	f000 fb3b 	bl	8002b98 <Save_SetPoint>
					Read_SetPoint(flash_calibration_tds);
 8002522:	2002      	movs	r0, #2
 8002524:	f000 fb9a 	bl	8002c5c <Read_SetPoint>
					HAL_TIM_Base_Start_IT(&htim4);
 8002528:	48a9      	ldr	r0, [pc, #676]	; (80027d0 <LCD_Display+0x550>)
 800252a:	f005 fb09 	bl	8007b40 <HAL_TIM_Base_Start_IT>
					lcd_clear();
 800252e:	f7ff fa9d 	bl	8001a6c <lcd_clear>
	}




	switch(Page)
 8002532:	4ba8      	ldr	r3, [pc, #672]	; (80027d4 <LCD_Display+0x554>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d017      	beq.n	800256a <LCD_Display+0x2ea>
 800253a:	2b02      	cmp	r3, #2
 800253c:	f200 8203 	bhi.w	8002946 <LCD_Display+0x6c6>
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <LCD_Display+0x2ca>
 8002544:	2b01      	cmp	r3, #1
 8002546:	d003      	beq.n	8002550 <LCD_Display+0x2d0>
				}
			}
			break;

		default:
			break;
 8002548:	e1fd      	b.n	8002946 <LCD_Display+0x6c6>
			LCD_Normal_Mode();
 800254a:	f7ff fe29 	bl	80021a0 <LCD_Normal_Mode>
			break;
 800254e:	e1fd      	b.n	800294c <LCD_Display+0x6cc>
			Pointer_Status(Rotary_volum());
 8002550:	f7ff fb06 	bl	8001b60 <Rotary_volum>
 8002554:	4603      	mov	r3, r0
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fb70 	bl	8001c3c <Pointer_Status>
			LCD_Menu_1(Rotary_volum());
 800255c:	f7ff fb00 	bl	8001b60 <Rotary_volum>
 8002560:	4603      	mov	r3, r0
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fdf8 	bl	8002158 <LCD_Menu_1>
			break;
 8002568:	e1f0      	b.n	800294c <LCD_Display+0x6cc>
			Pointer_Status(Rotary_volum());
 800256a:	f7ff faf9 	bl	8001b60 <Rotary_volum>
 800256e:	4603      	mov	r3, r0
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fb63 	bl	8001c3c <Pointer_Status>
			if(option_page_1 == Page1_SetPoint)
 8002576:	4b98      	ldr	r3, [pc, #608]	; (80027d8 <LCD_Display+0x558>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b02      	cmp	r3, #2
 800257c:	f040 813a 	bne.w	80027f4 <LCD_Display+0x574>
				  Read_SetPoint(flash_setpoint);
 8002580:	2000      	movs	r0, #0
 8002582:	f000 fb6b 	bl	8002c5c <Read_SetPoint>
				  LCD_Menu_2_1();
 8002586:	f7ff fbff 	bl	8001d88 <LCD_Menu_2_1>
				  if(option_page_2 == Page2_ph)
 800258a:	4b8d      	ldr	r3, [pc, #564]	; (80027c0 <LCD_Display+0x540>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d137      	bne.n	8002602 <LCD_Display+0x382>
					  lcd_pointer_1 = PH_SetPoint;
 8002592:	4b92      	ldr	r3, [pc, #584]	; (80027dc <LCD_Display+0x55c>)
 8002594:	edd3 7a00 	vldr	s15, [r3]
 8002598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800259c:	ee17 2a90 	vmov	r2, s15
 80025a0:	4b8f      	ldr	r3, [pc, #572]	; (80027e0 <LCD_Display+0x560>)
 80025a2:	601a      	str	r2, [r3, #0]
					  tamp = PH_SetPoint;
 80025a4:	4b8d      	ldr	r3, [pc, #564]	; (80027dc <LCD_Display+0x55c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	607b      	str	r3, [r7, #4]
					  HAL_TIM_Base_Stop_IT(&htim4);
 80025aa:	4889      	ldr	r0, [pc, #548]	; (80027d0 <LCD_Display+0x550>)
 80025ac:	f005 fb38 	bl	8007c20 <HAL_TIM_Base_Stop_IT>
						while(Rpush_number == 3) 		// Setting setpoint for PH
 80025b0:	e022      	b.n	80025f8 <LCD_Display+0x378>
											LCD_Menu_2_1();
 80025b2:	f7ff fbe9 	bl	8001d88 <LCD_Menu_2_1>
											Push_Slect();
 80025b6:	f7ff fb0d 	bl	8001bd4 <Push_Slect>
											Pointer_2_Status(0);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7ff fbb2 	bl	8001d24 <Pointer_2_Status>
											tamp2= (float)((Rotary_volum()- tamp)/10);
 80025c0:	f7ff face 	bl	8001b60 <Rotary_volum>
 80025c4:	ee07 0a90 	vmov	s15, r0
 80025c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025d4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80025d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025dc:	edc7 7a00 	vstr	s15, [r7]
											PH_SetPoint = tamp2 + tamp;
 80025e0:	ed97 7a00 	vldr	s14, [r7]
 80025e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80025e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ec:	4b7b      	ldr	r3, [pc, #492]	; (80027dc <LCD_Display+0x55c>)
 80025ee:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 80025f2:	487c      	ldr	r0, [pc, #496]	; (80027e4 <LCD_Display+0x564>)
 80025f4:	f003 ffcd 	bl	8006592 <HAL_IWDG_Refresh>
						while(Rpush_number == 3) 		// Setting setpoint for PH
 80025f8:	4b72      	ldr	r3, [pc, #456]	; (80027c4 <LCD_Display+0x544>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d0d8      	beq.n	80025b2 <LCD_Display+0x332>
			break;
 8002600:	e1a3      	b.n	800294a <LCD_Display+0x6ca>
				  else if(option_page_2== Page2_ph_thr) // Setting setpoint for PH_THR
 8002602:	4b6f      	ldr	r3, [pc, #444]	; (80027c0 <LCD_Display+0x540>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d137      	bne.n	800267a <LCD_Display+0x3fa>
					  lcd_pointer_1 = PH_THR_SetPoint;
 800260a:	4b77      	ldr	r3, [pc, #476]	; (80027e8 <LCD_Display+0x568>)
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002614:	ee17 2a90 	vmov	r2, s15
 8002618:	4b71      	ldr	r3, [pc, #452]	; (80027e0 <LCD_Display+0x560>)
 800261a:	601a      	str	r2, [r3, #0]
				  	  tamp = PH_THR_SetPoint;
 800261c:	4b72      	ldr	r3, [pc, #456]	; (80027e8 <LCD_Display+0x568>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	607b      	str	r3, [r7, #4]
					  HAL_TIM_Base_Stop_IT(&htim4);
 8002622:	486b      	ldr	r0, [pc, #428]	; (80027d0 <LCD_Display+0x550>)
 8002624:	f005 fafc 	bl	8007c20 <HAL_TIM_Base_Stop_IT>
						while(Rpush_number== 3)
 8002628:	e022      	b.n	8002670 <LCD_Display+0x3f0>
											LCD_Menu_2_1();
 800262a:	f7ff fbad 	bl	8001d88 <LCD_Menu_2_1>
											Push_Slect();
 800262e:	f7ff fad1 	bl	8001bd4 <Push_Slect>
											Pointer_2_Status(2);
 8002632:	2002      	movs	r0, #2
 8002634:	f7ff fb76 	bl	8001d24 <Pointer_2_Status>
											tamp2 = (float)((Rotary_volum()- tamp)/10);
 8002638:	f7ff fa92 	bl	8001b60 <Rotary_volum>
 800263c:	ee07 0a90 	vmov	s15, r0
 8002640:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002644:	edd7 7a01 	vldr	s15, [r7, #4]
 8002648:	ee37 7a67 	vsub.f32	s14, s14, s15
 800264c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002650:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002654:	edc7 7a00 	vstr	s15, [r7]
											PH_THR_SetPoint =  tamp2 + tamp;
 8002658:	ed97 7a00 	vldr	s14, [r7]
 800265c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002664:	4b60      	ldr	r3, [pc, #384]	; (80027e8 <LCD_Display+0x568>)
 8002666:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 800266a:	485e      	ldr	r0, [pc, #376]	; (80027e4 <LCD_Display+0x564>)
 800266c:	f003 ff91 	bl	8006592 <HAL_IWDG_Refresh>
						while(Rpush_number== 3)
 8002670:	4b54      	ldr	r3, [pc, #336]	; (80027c4 <LCD_Display+0x544>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d0d8      	beq.n	800262a <LCD_Display+0x3aa>
			break;
 8002678:	e167      	b.n	800294a <LCD_Display+0x6ca>
				  else if(option_page_2==Page2_tds)		// Setting setpoint for TDS
 800267a:	4b51      	ldr	r3, [pc, #324]	; (80027c0 <LCD_Display+0x540>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d142      	bne.n	8002708 <LCD_Display+0x488>
					  lcd_pointer_1 = TDS_SetPoint;
 8002682:	4b5a      	ldr	r3, [pc, #360]	; (80027ec <LCD_Display+0x56c>)
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800268c:	ee17 2a90 	vmov	r2, s15
 8002690:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <LCD_Display+0x560>)
 8002692:	601a      	str	r2, [r3, #0]
					  tamp = TDS_SetPoint;
 8002694:	4b55      	ldr	r3, [pc, #340]	; (80027ec <LCD_Display+0x56c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	607b      	str	r3, [r7, #4]
					  HAL_TIM_Base_Stop_IT(&htim4);
 800269a:	484d      	ldr	r0, [pc, #308]	; (80027d0 <LCD_Display+0x550>)
 800269c:	f005 fac0 	bl	8007c20 <HAL_TIM_Base_Stop_IT>
						while(Rpush_number== 3)
 80026a0:	e02d      	b.n	80026fe <LCD_Display+0x47e>
											LCD_Menu_2_1();
 80026a2:	f7ff fb71 	bl	8001d88 <LCD_Menu_2_1>
											Push_Slect();
 80026a6:	f7ff fa95 	bl	8001bd4 <Push_Slect>
											Pointer_2_Status(4);
 80026aa:	2004      	movs	r0, #4
 80026ac:	f7ff fb3a 	bl	8001d24 <Pointer_2_Status>
											tamp2 = ((Rotary_volum()- tamp)*10);
 80026b0:	f7ff fa56 	bl	8001b60 <Rotary_volum>
 80026b4:	ee07 0a90 	vmov	s15, r0
 80026b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80026c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80026c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026cc:	edc7 7a00 	vstr	s15, [r7]
											TDS_SetPoint =  (int)tamp2 + (int)tamp;
 80026d0:	edd7 7a00 	vldr	s15, [r7]
 80026d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026d8:	ee17 2a90 	vmov	r2, s15
 80026dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80026e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e4:	ee17 3a90 	vmov	r3, s15
 80026e8:	4413      	add	r3, r2
 80026ea:	ee07 3a90 	vmov	s15, r3
 80026ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f2:	4b3e      	ldr	r3, [pc, #248]	; (80027ec <LCD_Display+0x56c>)
 80026f4:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 80026f8:	483a      	ldr	r0, [pc, #232]	; (80027e4 <LCD_Display+0x564>)
 80026fa:	f003 ff4a 	bl	8006592 <HAL_IWDG_Refresh>
						while(Rpush_number== 3)
 80026fe:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <LCD_Display+0x544>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b03      	cmp	r3, #3
 8002704:	d0cd      	beq.n	80026a2 <LCD_Display+0x422>
			break;
 8002706:	e120      	b.n	800294a <LCD_Display+0x6ca>
				  else if(option_page_2==Page2_tds_thr)	// Setting setpoint for TDS_thr
 8002708:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <LCD_Display+0x540>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d142      	bne.n	8002796 <LCD_Display+0x516>
					  	HAL_TIM_Base_Stop_IT(&htim4);
 8002710:	482f      	ldr	r0, [pc, #188]	; (80027d0 <LCD_Display+0x550>)
 8002712:	f005 fa85 	bl	8007c20 <HAL_TIM_Base_Stop_IT>
					  	tamp = TDS_THR_SetPoint;
 8002716:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <LCD_Display+0x570>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	607b      	str	r3, [r7, #4]
					    lcd_pointer_1 = TDS_THR_SetPoint;
 800271c:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <LCD_Display+0x570>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002726:	ee17 2a90 	vmov	r2, s15
 800272a:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <LCD_Display+0x560>)
 800272c:	601a      	str	r2, [r3, #0]
						while(Rpush_number == 3)
 800272e:	e02d      	b.n	800278c <LCD_Display+0x50c>
											LCD_Menu_2_1();
 8002730:	f7ff fb2a 	bl	8001d88 <LCD_Menu_2_1>
											Push_Slect();
 8002734:	f7ff fa4e 	bl	8001bd4 <Push_Slect>
											Pointer_2_Status(6);
 8002738:	2006      	movs	r0, #6
 800273a:	f7ff faf3 	bl	8001d24 <Pointer_2_Status>
											tamp2 = ((Rotary_volum()- tamp)*10);
 800273e:	f7ff fa0f 	bl	8001b60 <Rotary_volum>
 8002742:	ee07 0a90 	vmov	s15, r0
 8002746:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800274a:	edd7 7a01 	vldr	s15, [r7, #4]
 800274e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002752:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800275a:	edc7 7a00 	vstr	s15, [r7]
											TDS_THR_SetPoint = (int)tamp2 + (int)tamp;
 800275e:	edd7 7a00 	vldr	s15, [r7]
 8002762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002766:	ee17 2a90 	vmov	r2, s15
 800276a:	edd7 7a01 	vldr	s15, [r7, #4]
 800276e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002772:	ee17 3a90 	vmov	r3, s15
 8002776:	4413      	add	r3, r2
 8002778:	ee07 3a90 	vmov	s15, r3
 800277c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <LCD_Display+0x570>)
 8002782:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 8002786:	4817      	ldr	r0, [pc, #92]	; (80027e4 <LCD_Display+0x564>)
 8002788:	f003 ff03 	bl	8006592 <HAL_IWDG_Refresh>
						while(Rpush_number == 3)
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <LCD_Display+0x544>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d0cd      	beq.n	8002730 <LCD_Display+0x4b0>
			break;
 8002794:	e0d9      	b.n	800294a <LCD_Display+0x6ca>
				  else if(option_page_2 == Page2_Back)	//Back option
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <LCD_Display+0x540>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b0c      	cmp	r3, #12
 800279c:	f040 80d5 	bne.w	800294a <LCD_Display+0x6ca>
					  Page = 1;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <LCD_Display+0x554>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
					  Rpush_number = 1;
 80027a6:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <LCD_Display+0x544>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
					  button_flag = 0;
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <LCD_Display+0x548>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
					  option_page_2 = Page2_Nothing;
 80027b2:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <LCD_Display+0x540>)
 80027b4:	220d      	movs	r2, #13
 80027b6:	701a      	strb	r2, [r3, #0]
					  lcd_clear();
 80027b8:	f7ff f958 	bl	8001a6c <lcd_clear>
			break;
 80027bc:	e0c5      	b.n	800294a <LCD_Display+0x6ca>
 80027be:	bf00      	nop
 80027c0:	20000002 	.word	0x20000002
 80027c4:	20000220 	.word	0x20000220
 80027c8:	20000224 	.word	0x20000224
 80027cc:	2000021c 	.word	0x2000021c
 80027d0:	2000039c 	.word	0x2000039c
 80027d4:	20000228 	.word	0x20000228
 80027d8:	20000001 	.word	0x20000001
 80027dc:	200004e8 	.word	0x200004e8
 80027e0:	2000022c 	.word	0x2000022c
 80027e4:	20000338 	.word	0x20000338
 80027e8:	200004e4 	.word	0x200004e4
 80027ec:	200004dc 	.word	0x200004dc
 80027f0:	200004e0 	.word	0x200004e0
			else if(option_page_1 == Page1_Testing) // Display with option testing
 80027f4:	4b57      	ldr	r3, [pc, #348]	; (8002954 <LCD_Display+0x6d4>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d129      	bne.n	8002850 <LCD_Display+0x5d0>
				 LCD_Menu_2_2();
 80027fc:	f7ff fb66 	bl	8001ecc <LCD_Menu_2_2>
				  if(option_page_2 == Page2_pump_1)
 8002800:	4b55      	ldr	r3, [pc, #340]	; (8002958 <LCD_Display+0x6d8>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b04      	cmp	r3, #4
 8002806:	f000 80a0 	beq.w	800294a <LCD_Display+0x6ca>
				  else if(option_page_2== Page2_pump_2)
 800280a:	4b53      	ldr	r3, [pc, #332]	; (8002958 <LCD_Display+0x6d8>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b05      	cmp	r3, #5
 8002810:	f000 809b 	beq.w	800294a <LCD_Display+0x6ca>
				  else if(option_page_2==Page2_pump_3)
 8002814:	4b50      	ldr	r3, [pc, #320]	; (8002958 <LCD_Display+0x6d8>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b06      	cmp	r3, #6
 800281a:	f000 8096 	beq.w	800294a <LCD_Display+0x6ca>
				  else if(option_page_2==Page2_pump_4)
 800281e:	4b4e      	ldr	r3, [pc, #312]	; (8002958 <LCD_Display+0x6d8>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b07      	cmp	r3, #7
 8002824:	f000 8091 	beq.w	800294a <LCD_Display+0x6ca>
				  else if(option_page_2 == Page2_Back)
 8002828:	4b4b      	ldr	r3, [pc, #300]	; (8002958 <LCD_Display+0x6d8>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b0c      	cmp	r3, #12
 800282e:	f040 808c 	bne.w	800294a <LCD_Display+0x6ca>
					  Page = 1;
 8002832:	4b4a      	ldr	r3, [pc, #296]	; (800295c <LCD_Display+0x6dc>)
 8002834:	2201      	movs	r2, #1
 8002836:	601a      	str	r2, [r3, #0]
					  Rpush_number = 1;
 8002838:	4b49      	ldr	r3, [pc, #292]	; (8002960 <LCD_Display+0x6e0>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]
					  button_flag = 0;
 800283e:	4b49      	ldr	r3, [pc, #292]	; (8002964 <LCD_Display+0x6e4>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
					  option_page_2 = Page2_Nothing;
 8002844:	4b44      	ldr	r3, [pc, #272]	; (8002958 <LCD_Display+0x6d8>)
 8002846:	220d      	movs	r2, #13
 8002848:	701a      	strb	r2, [r3, #0]
					  lcd_clear();
 800284a:	f7ff f90f 	bl	8001a6c <lcd_clear>
			break;
 800284e:	e07c      	b.n	800294a <LCD_Display+0x6ca>
			else if(option_page_1 == Page1_Calbration_sensor) // Display with calibration
 8002850:	4b40      	ldr	r3, [pc, #256]	; (8002954 <LCD_Display+0x6d4>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d155      	bne.n	8002904 <LCD_Display+0x684>
					Read_SetPoint(flash_calibration_ph);
 8002858:	2001      	movs	r0, #1
 800285a:	f000 f9ff 	bl	8002c5c <Read_SetPoint>
					Read_SetPoint(flash_calibration_tds);
 800285e:	2002      	movs	r0, #2
 8002860:	f000 f9fc 	bl	8002c5c <Read_SetPoint>
					LCD_Menu_2_3(0);
 8002864:	2000      	movs	r0, #0
 8002866:	f7ff fb55 	bl	8001f14 <LCD_Menu_2_3>
					if(option_page_2 == Page2_calib_ph)
 800286a:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <LCD_Display+0x6d8>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b08      	cmp	r3, #8
 8002870:	d118      	bne.n	80028a4 <LCD_Display+0x624>
						HAL_TIM_Base_Stop_IT(&htim4);
 8002872:	483d      	ldr	r0, [pc, #244]	; (8002968 <LCD_Display+0x6e8>)
 8002874:	f005 f9d4 	bl	8007c20 <HAL_TIM_Base_Stop_IT>
						while(Rpush_number == 3)
 8002878:	e00f      	b.n	800289a <LCD_Display+0x61a>
											PH_Calibration();
 800287a:	f000 f8d3 	bl	8002a24 <PH_Calibration>
											LCD_Menu_2_3(1);
 800287e:	2001      	movs	r0, #1
 8002880:	f7ff fb48 	bl	8001f14 <LCD_Menu_2_3>
											Push_Slect();
 8002884:	f7ff f9a6 	bl	8001bd4 <Push_Slect>
											HAL_Delay(500);
 8002888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800288c:	f001 fec2 	bl	8004614 <HAL_Delay>
											lcd_clear();
 8002890:	f7ff f8ec 	bl	8001a6c <lcd_clear>
											HAL_IWDG_Refresh(&hiwdg);
 8002894:	4835      	ldr	r0, [pc, #212]	; (800296c <LCD_Display+0x6ec>)
 8002896:	f003 fe7c 	bl	8006592 <HAL_IWDG_Refresh>
						while(Rpush_number == 3)
 800289a:	4b31      	ldr	r3, [pc, #196]	; (8002960 <LCD_Display+0x6e0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d0eb      	beq.n	800287a <LCD_Display+0x5fa>
			break;
 80028a2:	e052      	b.n	800294a <LCD_Display+0x6ca>
					else if(option_page_2 == Page2_calib_tds)
 80028a4:	4b2c      	ldr	r3, [pc, #176]	; (8002958 <LCD_Display+0x6d8>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b09      	cmp	r3, #9
 80028aa:	d118      	bne.n	80028de <LCD_Display+0x65e>
						HAL_TIM_Base_Stop_IT(&htim4);
 80028ac:	482e      	ldr	r0, [pc, #184]	; (8002968 <LCD_Display+0x6e8>)
 80028ae:	f005 f9b7 	bl	8007c20 <HAL_TIM_Base_Stop_IT>
						while(Rpush_number == 3)
 80028b2:	e00f      	b.n	80028d4 <LCD_Display+0x654>
											TDS_Calibration();
 80028b4:	f000 f93a 	bl	8002b2c <TDS_Calibration>
											LCD_Menu_2_3(2);
 80028b8:	2002      	movs	r0, #2
 80028ba:	f7ff fb2b 	bl	8001f14 <LCD_Menu_2_3>
											Push_Slect();
 80028be:	f7ff f989 	bl	8001bd4 <Push_Slect>
											HAL_Delay(500);
 80028c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028c6:	f001 fea5 	bl	8004614 <HAL_Delay>
											lcd_clear();
 80028ca:	f7ff f8cf 	bl	8001a6c <lcd_clear>
											HAL_IWDG_Refresh(&hiwdg);
 80028ce:	4827      	ldr	r0, [pc, #156]	; (800296c <LCD_Display+0x6ec>)
 80028d0:	f003 fe5f 	bl	8006592 <HAL_IWDG_Refresh>
						while(Rpush_number == 3)
 80028d4:	4b22      	ldr	r3, [pc, #136]	; (8002960 <LCD_Display+0x6e0>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d0eb      	beq.n	80028b4 <LCD_Display+0x634>
			break;
 80028dc:	e035      	b.n	800294a <LCD_Display+0x6ca>
					else if(option_page_2 == Page2_Back)
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <LCD_Display+0x6d8>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d131      	bne.n	800294a <LCD_Display+0x6ca>
					  Page = 1;
 80028e6:	4b1d      	ldr	r3, [pc, #116]	; (800295c <LCD_Display+0x6dc>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
					  Rpush_number = 1;
 80028ec:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <LCD_Display+0x6e0>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
					  button_flag = 0;
 80028f2:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <LCD_Display+0x6e4>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
					  option_page_2 = Page2_Nothing;
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <LCD_Display+0x6d8>)
 80028fa:	220d      	movs	r2, #13
 80028fc:	701a      	strb	r2, [r3, #0]
					  lcd_clear();
 80028fe:	f7ff f8b5 	bl	8001a6c <lcd_clear>
			break;
 8002902:	e022      	b.n	800294a <LCD_Display+0x6ca>
			else if(option_page_1 == Page1_WifiConfig)
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <LCD_Display+0x6d4>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b05      	cmp	r3, #5
 800290a:	d11e      	bne.n	800294a <LCD_Display+0x6ca>
				LCD_Menu_2_4();
 800290c:	f7ff fc00 	bl	8002110 <LCD_Menu_2_4>
				if(option_page_2 == Page2_start)
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <LCD_Display+0x6d8>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b0a      	cmp	r3, #10
 8002916:	d018      	beq.n	800294a <LCD_Display+0x6ca>
				else if(option_page_2 == Page2_end)
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <LCD_Display+0x6d8>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b0b      	cmp	r3, #11
 800291e:	d014      	beq.n	800294a <LCD_Display+0x6ca>
				else if(option_page_2 == Page2_Back)
 8002920:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <LCD_Display+0x6d8>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b0c      	cmp	r3, #12
 8002926:	d110      	bne.n	800294a <LCD_Display+0x6ca>
				  Page = 1;
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <LCD_Display+0x6dc>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]
				  Rpush_number = 1;
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <LCD_Display+0x6e0>)
 8002930:	2201      	movs	r2, #1
 8002932:	601a      	str	r2, [r3, #0]
				  button_flag = 0;
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <LCD_Display+0x6e4>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
				  option_page_2 = Page2_Nothing;
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <LCD_Display+0x6d8>)
 800293c:	220d      	movs	r2, #13
 800293e:	701a      	strb	r2, [r3, #0]
				  lcd_clear();
 8002940:	f7ff f894 	bl	8001a6c <lcd_clear>
			break;
 8002944:	e001      	b.n	800294a <LCD_Display+0x6ca>
			break;
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <LCD_Display+0x6cc>
			break;
 800294a:	bf00      	nop
	}
 }
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000001 	.word	0x20000001
 8002958:	20000002 	.word	0x20000002
 800295c:	20000228 	.word	0x20000228
 8002960:	20000220 	.word	0x20000220
 8002964:	20000224 	.word	0x20000224
 8002968:	2000039c 	.word	0x2000039c
 800296c:	20000338 	.word	0x20000338

08002970 <delay_us>:
uint8_t FileName[20];							//Name of File namme
uint8_t UART1_TEMPBUFFER[SIZEOF_COMMAND];		//Temp buffer when receive data UART1
uint8_t UART1_MAINBUFFER[UART1_BUFFER_SIZE];	//MAIN buffer store data UART1

void delay_us(uint16_t time)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim6,0);
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <delay_us+0x30>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2200      	movs	r2, #0
 8002980:	625a      	str	r2, [r3, #36]	; 0x24
    while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8002982:	bf00      	nop
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <delay_us+0x30>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	429a      	cmp	r2, r3
 800298e:	d3f9      	bcc.n	8002984 <delay_us+0x14>
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	200003e4 	.word	0x200003e4

080029a4 <HAL_UARTEx_RxEventCallback>:
	Value,
	Volume
}Message_type;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	807b      	strh	r3, [r7, #2]
	memset(UART1_MAINBUFFER,0,strlen((char*)UART1_MAINBUFFER));
 80029b0:	4817      	ldr	r0, [pc, #92]	; (8002a10 <HAL_UARTEx_RxEventCallback+0x6c>)
 80029b2:	f7fd fc0d 	bl	80001d0 <strlen>
 80029b6:	4603      	mov	r3, r0
 80029b8:	461a      	mov	r2, r3
 80029ba:	2100      	movs	r1, #0
 80029bc:	4814      	ldr	r0, [pc, #80]	; (8002a10 <HAL_UARTEx_RxEventCallback+0x6c>)
 80029be:	f007 f853 	bl	8009a68 <memset>
	if(huart->Instance == USART1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <HAL_UARTEx_RxEventCallback+0x70>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d112      	bne.n	80029f2 <HAL_UARTEx_RxEventCallback+0x4e>
	{
		memcpy(UART1_MAINBUFFER,UART1_TEMPBUFFER, Size);
 80029cc:	887b      	ldrh	r3, [r7, #2]
 80029ce:	461a      	mov	r2, r3
 80029d0:	4911      	ldr	r1, [pc, #68]	; (8002a18 <HAL_UARTEx_RxEventCallback+0x74>)
 80029d2:	480f      	ldr	r0, [pc, #60]	; (8002a10 <HAL_UARTEx_RxEventCallback+0x6c>)
 80029d4:	f007 f83a 	bl	8009a4c <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,UART1_TEMPBUFFER,SIZEOF_COMMAND);
 80029d8:	223c      	movs	r2, #60	; 0x3c
 80029da:	490f      	ldr	r1, [pc, #60]	; (8002a18 <HAL_UARTEx_RxEventCallback+0x74>)
 80029dc:	480f      	ldr	r0, [pc, #60]	; (8002a1c <HAL_UARTEx_RxEventCallback+0x78>)
 80029de:	f005 fdee 	bl	80085be <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 80029e2:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <HAL_UARTEx_RxEventCallback+0x7c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <HAL_UARTEx_RxEventCallback+0x7c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0208 	bic.w	r2, r2, #8
 80029f0:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart1, UART1_MAINBUFFER,strlen((char*)UART1_MAINBUFFER), 500);
 80029f2:	4807      	ldr	r0, [pc, #28]	; (8002a10 <HAL_UARTEx_RxEventCallback+0x6c>)
 80029f4:	f7fd fbec 	bl	80001d0 <strlen>
 80029f8:	4603      	mov	r3, r0
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a00:	4903      	ldr	r1, [pc, #12]	; (8002a10 <HAL_UARTEx_RxEventCallback+0x6c>)
 8002a02:	4806      	ldr	r0, [pc, #24]	; (8002a1c <HAL_UARTEx_RxEventCallback+0x78>)
 8002a04:	f005 fd49 	bl	800849a <HAL_UART_Transmit>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20000528 	.word	0x20000528
 8002a14:	40011000 	.word	0x40011000
 8002a18:	200004ec 	.word	0x200004ec
 8002a1c:	2000042c 	.word	0x2000042c
 8002a20:	20000470 	.word	0x20000470

08002a24 <PH_Calibration>:
uint16_t ADC_Value[2] = {0};
int ADC_PH_4 = 0, ADC_PH_7 = 0;
float 	ph_a_value = 0,ph_b_value = 0,tds_k_value = 0;

void PH_Calibration()
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
		//Ax+B = y => ADC_PH_4 - ADC_PH_7 = 640
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Value, 2);
 8002a28:	2202      	movs	r2, #2
 8002a2a:	492b      	ldr	r1, [pc, #172]	; (8002ad8 <PH_Calibration+0xb4>)
 8002a2c:	482b      	ldr	r0, [pc, #172]	; (8002adc <PH_Calibration+0xb8>)
 8002a2e:	f001 fe59 	bl	80046e4 <HAL_ADC_Start_DMA>

	  if(ADC_Value[0] > 1540 && ADC_Value[0] < 2180)
 8002a32:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <PH_Calibration+0xb4>)
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	f240 6204 	movw	r2, #1540	; 0x604
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d911      	bls.n	8002a62 <PH_Calibration+0x3e>
 8002a3e:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <PH_Calibration+0xb4>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	f640 0283 	movw	r2, #2179	; 0x883
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d80b      	bhi.n	8002a62 <PH_Calibration+0x3e>
	  {
		  ADC_PH_7 = ADC_Value[0];
 8002a4a:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <PH_Calibration+0xb4>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <PH_Calibration+0xbc>)
 8002a52:	601a      	str	r2, [r3, #0]
		  ADC_PH_4 = ADC_PH_7 + 640;
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <PH_Calibration+0xbc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a5c:	4a21      	ldr	r2, [pc, #132]	; (8002ae4 <PH_Calibration+0xc0>)
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	e016      	b.n	8002a90 <PH_Calibration+0x6c>
	    }
	    else if(ADC_Value[0] < 2820 && ADC_Value[0] > 2180)
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <PH_Calibration+0xb4>)
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	f640 3203 	movw	r2, #2819	; 0xb03
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d810      	bhi.n	8002a90 <PH_Calibration+0x6c>
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <PH_Calibration+0xb4>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	f640 0284 	movw	r2, #2180	; 0x884
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d90a      	bls.n	8002a90 <PH_Calibration+0x6c>
	    {
	    	ADC_PH_4 = ADC_Value[0];
 8002a7a:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <PH_Calibration+0xb4>)
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <PH_Calibration+0xc0>)
 8002a82:	601a      	str	r2, [r3, #0]
	    	ADC_PH_7 = ADC_PH_4 - 640;
 8002a84:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <PH_Calibration+0xc0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8002a8c:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <PH_Calibration+0xbc>)
 8002a8e:	6013      	str	r3, [r2, #0]
	      }

	  ph_a_value = (float)(3/(float)(ADC_PH_7 - ADC_PH_4));
 8002a90:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <PH_Calibration+0xbc>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <PH_Calibration+0xc0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <PH_Calibration+0xc4>)
 8002aac:	edc3 7a00 	vstr	s15, [r3]
	  ph_b_value = (float)((4 - (ph_a_value*(float)ADC_PH_4)));
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <PH_Calibration+0xc0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	ee07 3a90 	vmov	s15, r3
 8002ab8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <PH_Calibration+0xc4>)
 8002abe:	edd3 7a00 	vldr	s15, [r3]
 8002ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ace:	4b07      	ldr	r3, [pc, #28]	; (8002aec <PH_Calibration+0xc8>)
 8002ad0:	edc3 7a00 	vstr	s15, [r3]

}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000928 	.word	0x20000928
 8002adc:	2000023c 	.word	0x2000023c
 8002ae0:	20000930 	.word	0x20000930
 8002ae4:	2000092c 	.word	0x2000092c
 8002ae8:	20000934 	.word	0x20000934
 8002aec:	20000938 	.word	0x20000938

08002af0 <PH_Calculator>:
float PH_Calculator(float A, float B, uint16_t adc)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	ed87 0a03 	vstr	s0, [r7, #12]
 8002afa:	edc7 0a02 	vstr	s1, [r7, #8]
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
	return (float)(adc*A + B);
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b14:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b18:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <TDS_Calibration>:

void TDS_Calibration()
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Value, 2);
 8002b30:	2202      	movs	r2, #2
 8002b32:	4909      	ldr	r1, [pc, #36]	; (8002b58 <TDS_Calibration+0x2c>)
 8002b34:	4809      	ldr	r0, [pc, #36]	; (8002b5c <TDS_Calibration+0x30>)
 8002b36:	f001 fdd5 	bl	80046e4 <HAL_ADC_Start_DMA>

	tds_k_value = (1000/(float)ADC_Value[1]);
 8002b3a:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <TDS_Calibration+0x2c>)
 8002b3c:	885b      	ldrh	r3, [r3, #2]
 8002b3e:	ee07 3a90 	vmov	s15, r3
 8002b42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b46:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002b60 <TDS_Calibration+0x34>
 8002b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <TDS_Calibration+0x38>)
 8002b50:	edc3 7a00 	vstr	s15, [r3]
}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000928 	.word	0x20000928
 8002b5c:	2000023c 	.word	0x2000023c
 8002b60:	447a0000 	.word	0x447a0000
 8002b64:	2000093c 	.word	0x2000093c

08002b68 <TDS_Calculator>:

float TDS_Calculator(float k, uint16_t adc)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b72:	4603      	mov	r3, r0
 8002b74:	807b      	strh	r3, [r7, #2]
	return (float)(k*adc);
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b80:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b84:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002b88:	eeb0 0a67 	vmov.f32	s0, s15
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <Save_SetPoint>:

/*=====================================Flash_Start=================================*/
float *save_data_flash_ptr = NULL;

void Save_SetPoint(Save_Flash_Type tp)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
	if(tp == flash_setpoint)
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d124      	bne.n	8002bf2 <Save_SetPoint+0x5a>
	{
		W25qxx_EraseSector(1);
 8002ba8:	2001      	movs	r0, #1
 8002baa:	f001 fa63 	bl	8004074 <W25qxx_EraseSector>
		W25qxx_EraseSector(2);
 8002bae:	2002      	movs	r0, #2
 8002bb0:	f001 fa60 	bl	8004074 <W25qxx_EraseSector>
		W25qxx_EraseSector(3);
 8002bb4:	2003      	movs	r0, #3
 8002bb6:	f001 fa5d 	bl	8004074 <W25qxx_EraseSector>
		W25qxx_EraseSector(4);
 8002bba:	2004      	movs	r0, #4
 8002bbc:	f001 fa5a 	bl	8004074 <W25qxx_EraseSector>
		W25qxx_WriteSector(&PH_SetPoint, 1, 0, 4);
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	481e      	ldr	r0, [pc, #120]	; (8002c40 <Save_SetPoint+0xa8>)
 8002bc8:	f001 fb46 	bl	8004258 <W25qxx_WriteSector>
		W25qxx_WriteSector(&PH_THR_SetPoint, 2, 0, 4);
 8002bcc:	2304      	movs	r3, #4
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	481c      	ldr	r0, [pc, #112]	; (8002c44 <Save_SetPoint+0xac>)
 8002bd4:	f001 fb40 	bl	8004258 <W25qxx_WriteSector>
		W25qxx_WriteSector(&TDS_SetPoint, 3, 0, 4);
 8002bd8:	2304      	movs	r3, #4
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2103      	movs	r1, #3
 8002bde:	481a      	ldr	r0, [pc, #104]	; (8002c48 <Save_SetPoint+0xb0>)
 8002be0:	f001 fb3a 	bl	8004258 <W25qxx_WriteSector>
		W25qxx_WriteSector(&TDS_THR_SetPoint, 4, 0, 4);
 8002be4:	2304      	movs	r3, #4
 8002be6:	2200      	movs	r2, #0
 8002be8:	2104      	movs	r1, #4
 8002bea:	4818      	ldr	r0, [pc, #96]	; (8002c4c <Save_SetPoint+0xb4>)
 8002bec:	f001 fb34 	bl	8004258 <W25qxx_WriteSector>
		W25qxx_EraseSector(7);
		W25qxx_WriteSector(&tds_k_value, 7, 0, 4);

	}

}
 8002bf0:	e021      	b.n	8002c36 <Save_SetPoint+0x9e>
	else if(tp ==flash_calibration_ph)
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d112      	bne.n	8002c1e <Save_SetPoint+0x86>
		W25qxx_EraseSector(5);
 8002bf8:	2005      	movs	r0, #5
 8002bfa:	f001 fa3b 	bl	8004074 <W25qxx_EraseSector>
		W25qxx_EraseSector(6);
 8002bfe:	2006      	movs	r0, #6
 8002c00:	f001 fa38 	bl	8004074 <W25qxx_EraseSector>
		W25qxx_WriteSector(&ph_a_value, 5, 0, 4);
 8002c04:	2304      	movs	r3, #4
 8002c06:	2200      	movs	r2, #0
 8002c08:	2105      	movs	r1, #5
 8002c0a:	4811      	ldr	r0, [pc, #68]	; (8002c50 <Save_SetPoint+0xb8>)
 8002c0c:	f001 fb24 	bl	8004258 <W25qxx_WriteSector>
		W25qxx_WriteSector(&ph_b_value, 6, 0, 4);
 8002c10:	2304      	movs	r3, #4
 8002c12:	2200      	movs	r2, #0
 8002c14:	2106      	movs	r1, #6
 8002c16:	480f      	ldr	r0, [pc, #60]	; (8002c54 <Save_SetPoint+0xbc>)
 8002c18:	f001 fb1e 	bl	8004258 <W25qxx_WriteSector>
}
 8002c1c:	e00b      	b.n	8002c36 <Save_SetPoint+0x9e>
	else if (tp == flash_calibration_tds)
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d108      	bne.n	8002c36 <Save_SetPoint+0x9e>
		W25qxx_EraseSector(7);
 8002c24:	2007      	movs	r0, #7
 8002c26:	f001 fa25 	bl	8004074 <W25qxx_EraseSector>
		W25qxx_WriteSector(&tds_k_value, 7, 0, 4);
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2107      	movs	r1, #7
 8002c30:	4809      	ldr	r0, [pc, #36]	; (8002c58 <Save_SetPoint+0xc0>)
 8002c32:	f001 fb11 	bl	8004258 <W25qxx_WriteSector>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200004e8 	.word	0x200004e8
 8002c44:	200004e4 	.word	0x200004e4
 8002c48:	200004dc 	.word	0x200004dc
 8002c4c:	200004e0 	.word	0x200004e0
 8002c50:	20000934 	.word	0x20000934
 8002c54:	20000938 	.word	0x20000938
 8002c58:	2000093c 	.word	0x2000093c

08002c5c <Read_SetPoint>:
void Read_SetPoint(Save_Flash_Type tp)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
	if(tp == flash_setpoint)
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d118      	bne.n	8002c9e <Read_SetPoint+0x42>
	{
		W25qxx_ReadSector(&PH_SetPoint, 1, 0, 4);
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2101      	movs	r1, #1
 8002c72:	4819      	ldr	r0, [pc, #100]	; (8002cd8 <Read_SetPoint+0x7c>)
 8002c74:	f001 fbd0 	bl	8004418 <W25qxx_ReadSector>
		W25qxx_ReadSector(&PH_THR_SetPoint, 2, 0, 4);
 8002c78:	2304      	movs	r3, #4
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	4817      	ldr	r0, [pc, #92]	; (8002cdc <Read_SetPoint+0x80>)
 8002c80:	f001 fbca 	bl	8004418 <W25qxx_ReadSector>
		W25qxx_ReadSector(&TDS_SetPoint, 3, 0, 4);
 8002c84:	2304      	movs	r3, #4
 8002c86:	2200      	movs	r2, #0
 8002c88:	2103      	movs	r1, #3
 8002c8a:	4815      	ldr	r0, [pc, #84]	; (8002ce0 <Read_SetPoint+0x84>)
 8002c8c:	f001 fbc4 	bl	8004418 <W25qxx_ReadSector>
		W25qxx_ReadSector(&TDS_THR_SetPoint, 4, 0, 4);
 8002c90:	2304      	movs	r3, #4
 8002c92:	2200      	movs	r2, #0
 8002c94:	2104      	movs	r1, #4
 8002c96:	4813      	ldr	r0, [pc, #76]	; (8002ce4 <Read_SetPoint+0x88>)
 8002c98:	f001 fbbe 	bl	8004418 <W25qxx_ReadSector>
	}
	else if (tp == flash_calibration_tds)
	{
		W25qxx_ReadSector(&tds_k_value, 7, 0, 4);
	}
}
 8002c9c:	e018      	b.n	8002cd0 <Read_SetPoint+0x74>
	else if(tp == flash_calibration_ph)
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d10c      	bne.n	8002cbe <Read_SetPoint+0x62>
		W25qxx_ReadSector(&ph_a_value, 5, 0, 4);
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2105      	movs	r1, #5
 8002caa:	480f      	ldr	r0, [pc, #60]	; (8002ce8 <Read_SetPoint+0x8c>)
 8002cac:	f001 fbb4 	bl	8004418 <W25qxx_ReadSector>
		W25qxx_ReadSector(&ph_b_value, 6, 0, 4);
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2106      	movs	r1, #6
 8002cb6:	480d      	ldr	r0, [pc, #52]	; (8002cec <Read_SetPoint+0x90>)
 8002cb8:	f001 fbae 	bl	8004418 <W25qxx_ReadSector>
}
 8002cbc:	e008      	b.n	8002cd0 <Read_SetPoint+0x74>
	else if (tp == flash_calibration_tds)
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d105      	bne.n	8002cd0 <Read_SetPoint+0x74>
		W25qxx_ReadSector(&tds_k_value, 7, 0, 4);
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2107      	movs	r1, #7
 8002cca:	4809      	ldr	r0, [pc, #36]	; (8002cf0 <Read_SetPoint+0x94>)
 8002ccc:	f001 fba4 	bl	8004418 <W25qxx_ReadSector>
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	200004e8 	.word	0x200004e8
 8002cdc:	200004e4 	.word	0x200004e4
 8002ce0:	200004dc 	.word	0x200004dc
 8002ce4:	200004e0 	.word	0x200004e0
 8002ce8:	20000934 	.word	0x20000934
 8002cec:	20000938 	.word	0x20000938
 8002cf0:	2000093c 	.word	0x2000093c

08002cf4 <Set_Pin_Output>:
uint16_t TEMP;
#define DS18B20_PORT Temperature_Pin_GPIO_Port
#define DS18B20_PIN Temperature_Pin_Pin

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 030c 	add.w	r3, r7, #12
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002d10:	887b      	ldrh	r3, [r7, #2]
 8002d12:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d14:	2301      	movs	r3, #1
 8002d16:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002d1c:	f107 030c 	add.w	r3, r7, #12
 8002d20:	4619      	mov	r1, r3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f002 fdc0 	bl	80058a8 <HAL_GPIO_Init>
}
 8002d28:	bf00      	nop
 8002d2a:	3720      	adds	r7, #32
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <Set_Pin_Input>:
void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 030c 	add.w	r3, r7, #12
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d50:	2300      	movs	r3, #0
 8002d52:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d54:	2301      	movs	r3, #1
 8002d56:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002d58:	f107 030c 	add.w	r3, r7, #12
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f002 fda2 	bl	80058a8 <HAL_GPIO_Init>
}
 8002d64:	bf00      	nop
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8002d76:	2104      	movs	r1, #4
 8002d78:	4813      	ldr	r0, [pc, #76]	; (8002dc8 <DS18B20_Start+0x5c>)
 8002d7a:	f7ff ffbb 	bl	8002cf4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2104      	movs	r1, #4
 8002d82:	4811      	ldr	r0, [pc, #68]	; (8002dc8 <DS18B20_Start+0x5c>)
 8002d84:	f002 ff44 	bl	8005c10 <HAL_GPIO_WritePin>
	delay_us(480);   // delay according to datasheet
 8002d88:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002d8c:	f7ff fdf0 	bl	8002970 <delay_us>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8002d90:	2104      	movs	r1, #4
 8002d92:	480d      	ldr	r0, [pc, #52]	; (8002dc8 <DS18B20_Start+0x5c>)
 8002d94:	f7ff ffcc 	bl	8002d30 <Set_Pin_Input>
	delay_us(80);    // delay according to datasheet
 8002d98:	2050      	movs	r0, #80	; 0x50
 8002d9a:	f7ff fde9 	bl	8002970 <delay_us>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8002d9e:	2104      	movs	r1, #4
 8002da0:	4809      	ldr	r0, [pc, #36]	; (8002dc8 <DS18B20_Start+0x5c>)
 8002da2:	f002 ff1d 	bl	8005be0 <HAL_GPIO_ReadPin>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <DS18B20_Start+0x46>
 8002dac:	2301      	movs	r3, #1
 8002dae:	71fb      	strb	r3, [r7, #7]
 8002db0:	e001      	b.n	8002db6 <DS18B20_Start+0x4a>
	else Response = -1;
 8002db2:	23ff      	movs	r3, #255	; 0xff
 8002db4:	71fb      	strb	r3, [r7, #7]

	delay_us(400); // 480 us delay totally.
 8002db6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002dba:	f7ff fdd9 	bl	8002970 <delay_us>

	return Response;
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40020000 	.word	0x40020000

08002dcc <DS18B20_Write>:


void DS18B20_Write (uint8_t data)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8002dd6:	2104      	movs	r1, #4
 8002dd8:	481e      	ldr	r0, [pc, #120]	; (8002e54 <DS18B20_Write+0x88>)
 8002dda:	f7ff ff8b 	bl	8002cf4 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	e02e      	b.n	8002e42 <DS18B20_Write+0x76>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 8002de4:	79fa      	ldrb	r2, [r7, #7]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	fa42 f303 	asr.w	r3, r2, r3
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d013      	beq.n	8002e1c <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8002df4:	2104      	movs	r1, #4
 8002df6:	4817      	ldr	r0, [pc, #92]	; (8002e54 <DS18B20_Write+0x88>)
 8002df8:	f7ff ff7c 	bl	8002cf4 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2104      	movs	r1, #4
 8002e00:	4814      	ldr	r0, [pc, #80]	; (8002e54 <DS18B20_Write+0x88>)
 8002e02:	f002 ff05 	bl	8005c10 <HAL_GPIO_WritePin>
			delay_us(1);  // wait for 1 us
 8002e06:	2001      	movs	r0, #1
 8002e08:	f7ff fdb2 	bl	8002970 <delay_us>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8002e0c:	2104      	movs	r1, #4
 8002e0e:	4811      	ldr	r0, [pc, #68]	; (8002e54 <DS18B20_Write+0x88>)
 8002e10:	f7ff ff8e 	bl	8002d30 <Set_Pin_Input>
			delay_us(50);  // wait for 60 us
 8002e14:	2032      	movs	r0, #50	; 0x32
 8002e16:	f7ff fdab 	bl	8002970 <delay_us>
 8002e1a:	e00f      	b.n	8002e3c <DS18B20_Write+0x70>
		}

		else  // if the bit is low
		{
			// write 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8002e1c:	2104      	movs	r1, #4
 8002e1e:	480d      	ldr	r0, [pc, #52]	; (8002e54 <DS18B20_Write+0x88>)
 8002e20:	f7ff ff68 	bl	8002cf4 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8002e24:	2200      	movs	r2, #0
 8002e26:	2104      	movs	r1, #4
 8002e28:	480a      	ldr	r0, [pc, #40]	; (8002e54 <DS18B20_Write+0x88>)
 8002e2a:	f002 fef1 	bl	8005c10 <HAL_GPIO_WritePin>
			delay_us(50);  // wait for 60 us
 8002e2e:	2032      	movs	r0, #50	; 0x32
 8002e30:	f7ff fd9e 	bl	8002970 <delay_us>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8002e34:	2104      	movs	r1, #4
 8002e36:	4807      	ldr	r0, [pc, #28]	; (8002e54 <DS18B20_Write+0x88>)
 8002e38:	f7ff ff7a 	bl	8002d30 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b07      	cmp	r3, #7
 8002e46:	ddcd      	ble.n	8002de4 <DS18B20_Write+0x18>
		}
	}
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40020000 	.word	0x40020000

08002e58 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8002e62:	2104      	movs	r1, #4
 8002e64:	481a      	ldr	r0, [pc, #104]	; (8002ed0 <DS18B20_Read+0x78>)
 8002e66:	f7ff ff63 	bl	8002d30 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	603b      	str	r3, [r7, #0]
 8002e6e:	e026      	b.n	8002ebe <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8002e70:	2104      	movs	r1, #4
 8002e72:	4817      	ldr	r0, [pc, #92]	; (8002ed0 <DS18B20_Read+0x78>)
 8002e74:	f7ff ff3e 	bl	8002cf4 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2104      	movs	r1, #4
 8002e7c:	4814      	ldr	r0, [pc, #80]	; (8002ed0 <DS18B20_Read+0x78>)
 8002e7e:	f002 fec7 	bl	8005c10 <HAL_GPIO_WritePin>
		delay_us(1);  // wait for > 1us
 8002e82:	2001      	movs	r0, #1
 8002e84:	f7ff fd74 	bl	8002970 <delay_us>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8002e88:	2104      	movs	r1, #4
 8002e8a:	4811      	ldr	r0, [pc, #68]	; (8002ed0 <DS18B20_Read+0x78>)
 8002e8c:	f7ff ff50 	bl	8002d30 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8002e90:	2104      	movs	r1, #4
 8002e92:	480f      	ldr	r0, [pc, #60]	; (8002ed0 <DS18B20_Read+0x78>)
 8002e94:	f002 fea4 	bl	8005be0 <HAL_GPIO_ReadPin>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	b25a      	sxtb	r2, r3
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	71fb      	strb	r3, [r7, #7]
		}
		delay_us(50);  // wait for 60 us
 8002eb2:	2032      	movs	r0, #50	; 0x32
 8002eb4:	f7ff fd5c 	bl	8002970 <delay_us>
	for (int i=0;i<8;i++)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b07      	cmp	r3, #7
 8002ec2:	ddd5      	ble.n	8002e70 <DS18B20_Read+0x18>
	}
	return value;
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40020000 	.word	0x40020000

08002ed4 <Get_Temperature_DS18B20>:

float Get_Temperature_DS18B20()
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
		  DS18B20_Start ();
 8002ed8:	f7ff ff48 	bl	8002d6c <DS18B20_Start>
		  HAL_Delay(1);
 8002edc:	2001      	movs	r0, #1
 8002ede:	f001 fb99 	bl	8004614 <HAL_Delay>
		  DS18B20_Write (0xCC);  // skip ROM
 8002ee2:	20cc      	movs	r0, #204	; 0xcc
 8002ee4:	f7ff ff72 	bl	8002dcc <DS18B20_Write>
		  DS18B20_Write (0x44);  // convert t
 8002ee8:	2044      	movs	r0, #68	; 0x44
 8002eea:	f7ff ff6f 	bl	8002dcc <DS18B20_Write>
		  HAL_Delay (800);
 8002eee:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002ef2:	f001 fb8f 	bl	8004614 <HAL_Delay>

		  DS18B20_Start ();
 8002ef6:	f7ff ff39 	bl	8002d6c <DS18B20_Start>
	      HAL_Delay(1);
 8002efa:	2001      	movs	r0, #1
 8002efc:	f001 fb8a 	bl	8004614 <HAL_Delay>
	      DS18B20_Write (0xCC);  // skip ROM
 8002f00:	20cc      	movs	r0, #204	; 0xcc
 8002f02:	f7ff ff63 	bl	8002dcc <DS18B20_Write>
	      DS18B20_Write (0xBE);  // Read Scratch-pad
 8002f06:	20be      	movs	r0, #190	; 0xbe
 8002f08:	f7ff ff60 	bl	8002dcc <DS18B20_Write>
	      Temp_byte1 = DS18B20_Read();
 8002f0c:	f7ff ffa4 	bl	8002e58 <DS18B20_Read>
 8002f10:	4603      	mov	r3, r0
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <Get_Temperature_DS18B20+0x88>)
 8002f16:	701a      	strb	r2, [r3, #0]
		  Temp_byte2 = DS18B20_Read();
 8002f18:	f7ff ff9e 	bl	8002e58 <DS18B20_Read>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <Get_Temperature_DS18B20+0x8c>)
 8002f22:	701a      	strb	r2, [r3, #0]
		  TEMP = (Temp_byte2<<8)|Temp_byte1;
 8002f24:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <Get_Temperature_DS18B20+0x8c>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	b21a      	sxth	r2, r3
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <Get_Temperature_DS18B20+0x88>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	b21b      	sxth	r3, r3
 8002f32:	4313      	orrs	r3, r2
 8002f34:	b21b      	sxth	r3, r3
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <Get_Temperature_DS18B20+0x90>)
 8002f3a:	801a      	strh	r2, [r3, #0]
		  return (float)TEMP/16;
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <Get_Temperature_DS18B20+0x90>)
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	ee07 3a90 	vmov	s15, r3
 8002f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f48:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002f4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f50:	eef0 7a66 	vmov.f32	s15, s13
}
 8002f54:	eeb0 0a67 	vmov.f32	s0, s15
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000940 	.word	0x20000940
 8002f60:	20000941 	.word	0x20000941
 8002f64:	20000942 	.word	0x20000942

08002f68 <HAL_TIM_PeriodElapsedCallback>:
/*=====================================DS18B20_End=================================*/

/*=====================================Interrupt_Start=========================*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
	 if(htim->Instance == htim4.Instance)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d103      	bne.n	8002f84 <HAL_TIM_PeriodElapsedCallback+0x1c>
	 {
	   HAL_GPIO_TogglePin(test_pin_GPIO_Port,test_pin_Pin);
 8002f7c:	2140      	movs	r1, #64	; 0x40
 8002f7e:	4804      	ldr	r0, [pc, #16]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002f80:	f002 fe5f 	bl	8005c42 <HAL_GPIO_TogglePin>
	 }
}
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	2000039c 	.word	0x2000039c
 8002f90:	40020000 	.word	0x40020000

08002f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f9a:	f001 fac9 	bl	8004530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f9e:	f000 f895 	bl	80030cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fa2:	f000 fab3 	bl	800350c <MX_GPIO_Init>
  MX_DMA_Init();
 8002fa6:	f000 fa89 	bl	80034bc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002faa:	f000 fa5d 	bl	8003468 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002fae:	f000 f9a1 	bl	80032f4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002fb2:	f006 fc59 	bl	8009868 <MX_FATFS_Init>
  MX_ADC1_Init();
 8002fb6:	f000 f8f3 	bl	80031a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002fba:	f000 f953 	bl	8003264 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002fbe:	f000 f9cf 	bl	8003360 <MX_TIM4_Init>
  MX_IWDG_Init();
 8002fc2:	f000 f97d 	bl	80032c0 <MX_IWDG_Init>
  MX_TIM6_Init();
 8002fc6:	f000 fa19 	bl	80033fc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8002fca:	4834      	ldr	r0, [pc, #208]	; (800309c <main+0x108>)
 8002fcc:	f004 fdb8 	bl	8007b40 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 8002fd0:	4833      	ldr	r0, [pc, #204]	; (80030a0 <main+0x10c>)
 8002fd2:	f004 fd4d 	bl	8007a70 <HAL_TIM_Base_Start>
//  HAL_UARTEx_ReceiveToIdle_DMA(&huart1,UART1_TEMPBUFFER,SIZEOF_COMMAND);
//  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);



  for(int i =0;i<5;i++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	e009      	b.n	8002ff0 <main+0x5c>
  {
	  HAL_GPIO_TogglePin(test_pin_GPIO_Port,test_pin_Pin);
 8002fdc:	2140      	movs	r1, #64	; 0x40
 8002fde:	4831      	ldr	r0, [pc, #196]	; (80030a4 <main+0x110>)
 8002fe0:	f002 fe2f 	bl	8005c42 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8002fe4:	20c8      	movs	r0, #200	; 0xc8
 8002fe6:	f001 fb15 	bl	8004614 <HAL_Delay>
  for(int i =0;i<5;i++)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3301      	adds	r3, #1
 8002fee:	607b      	str	r3, [r7, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	ddf2      	ble.n	8002fdc <main+0x48>
  }

  //HAL_Delay(50);
  lcd_init();
 8002ff6:	f7fe fd50 	bl	8001a9a <lcd_init>
  Rotary_init();
 8002ffa:	f7fe fda1 	bl	8001b40 <Rotary_init>
  lcd_clear();
 8002ffe:	f7fe fd35 	bl	8001a6c <lcd_clear>

  W25qxx_Init();
 8003002:	f000 ff65 	bl	8003ed0 <W25qxx_Init>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_Value, 2);
 8003006:	2202      	movs	r2, #2
 8003008:	4927      	ldr	r1, [pc, #156]	; (80030a8 <main+0x114>)
 800300a:	4828      	ldr	r0, [pc, #160]	; (80030ac <main+0x118>)
 800300c:	f001 fb6a 	bl	80046e4 <HAL_ADC_Start_DMA>
  Read_SetPoint(flash_calibration_tds);
 8003010:	2002      	movs	r0, #2
 8003012:	f7ff fe23 	bl	8002c5c <Read_SetPoint>
  Read_SetPoint(flash_calibration_ph);
 8003016:	2001      	movs	r0, #1
 8003018:	f7ff fe20 	bl	8002c5c <Read_SetPoint>

  uint32_t time_read = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  LCD_Display();
 8003020:	f7ff f92e 	bl	8002280 <LCD_Display>
	  if(time_read == 100)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d130      	bne.n	800308c <main+0xf8>
	  {
		  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_Value, 2);
 800302a:	2202      	movs	r2, #2
 800302c:	491e      	ldr	r1, [pc, #120]	; (80030a8 <main+0x114>)
 800302e:	481f      	ldr	r0, [pc, #124]	; (80030ac <main+0x118>)
 8003030:	f001 fb58 	bl	80046e4 <HAL_ADC_Start_DMA>
		  PH = PH_Calculator(ph_a_value, ph_b_value, ADC_Value[0]);
 8003034:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <main+0x11c>)
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <main+0x120>)
 800303c:	ed93 7a00 	vldr	s14, [r3]
 8003040:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <main+0x114>)
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	eef0 0a47 	vmov.f32	s1, s14
 800304a:	eeb0 0a67 	vmov.f32	s0, s15
 800304e:	f7ff fd4f 	bl	8002af0 <PH_Calculator>
 8003052:	eef0 7a40 	vmov.f32	s15, s0
 8003056:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <main+0x124>)
 8003058:	edc3 7a00 	vstr	s15, [r3]
		  TDS = TDS_Calculator(tds_k_value, ADC_Value[1]);
 800305c:	4b17      	ldr	r3, [pc, #92]	; (80030bc <main+0x128>)
 800305e:	edd3 7a00 	vldr	s15, [r3]
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <main+0x114>)
 8003064:	885b      	ldrh	r3, [r3, #2]
 8003066:	4618      	mov	r0, r3
 8003068:	eeb0 0a67 	vmov.f32	s0, s15
 800306c:	f7ff fd7c 	bl	8002b68 <TDS_Calculator>
 8003070:	eef0 7a40 	vmov.f32	s15, s0
 8003074:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <main+0x12c>)
 8003076:	edc3 7a00 	vstr	s15, [r3]

		  Temperature = Get_Temperature_DS18B20();
 800307a:	f7ff ff2b 	bl	8002ed4 <Get_Temperature_DS18B20>
 800307e:	eef0 7a40 	vmov.f32	s15, s0
 8003082:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <main+0x130>)
 8003084:	edc3 7a00 	vstr	s15, [r3]
		  time_read = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	603b      	str	r3, [r7, #0]
	  }
	  time_read++;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	3301      	adds	r3, #1
 8003090:	603b      	str	r3, [r7, #0]
	  HAL_IWDG_Refresh(&hiwdg);
 8003092:	480d      	ldr	r0, [pc, #52]	; (80030c8 <main+0x134>)
 8003094:	f003 fa7d 	bl	8006592 <HAL_IWDG_Refresh>
	  LCD_Display();
 8003098:	e7c2      	b.n	8003020 <main+0x8c>
 800309a:	bf00      	nop
 800309c:	2000039c 	.word	0x2000039c
 80030a0:	200003e4 	.word	0x200003e4
 80030a4:	40020000 	.word	0x40020000
 80030a8:	20000928 	.word	0x20000928
 80030ac:	2000023c 	.word	0x2000023c
 80030b0:	20000934 	.word	0x20000934
 80030b4:	20000938 	.word	0x20000938
 80030b8:	200004d4 	.word	0x200004d4
 80030bc:	2000093c 	.word	0x2000093c
 80030c0:	200004d0 	.word	0x200004d0
 80030c4:	200004d8 	.word	0x200004d8
 80030c8:	20000338 	.word	0x20000338

080030cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b094      	sub	sp, #80	; 0x50
 80030d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030d2:	f107 0320 	add.w	r3, r7, #32
 80030d6:	2230      	movs	r2, #48	; 0x30
 80030d8:	2100      	movs	r1, #0
 80030da:	4618      	mov	r0, r3
 80030dc:	f006 fcc4 	bl	8009a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030e0:	f107 030c 	add.w	r3, r7, #12
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030f0:	2300      	movs	r3, #0
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	4b28      	ldr	r3, [pc, #160]	; (8003198 <SystemClock_Config+0xcc>)
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	4a27      	ldr	r2, [pc, #156]	; (8003198 <SystemClock_Config+0xcc>)
 80030fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003100:	4b25      	ldr	r3, [pc, #148]	; (8003198 <SystemClock_Config+0xcc>)
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800310c:	2300      	movs	r3, #0
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	4b22      	ldr	r3, [pc, #136]	; (800319c <SystemClock_Config+0xd0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a21      	ldr	r2, [pc, #132]	; (800319c <SystemClock_Config+0xd0>)
 8003116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b1f      	ldr	r3, [pc, #124]	; (800319c <SystemClock_Config+0xd0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003128:	230a      	movs	r3, #10
 800312a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800312c:	2301      	movs	r3, #1
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003130:	2310      	movs	r3, #16
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003134:	2301      	movs	r3, #1
 8003136:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003138:	2302      	movs	r3, #2
 800313a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800313c:	2300      	movs	r3, #0
 800313e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003140:	2308      	movs	r3, #8
 8003142:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003144:	2348      	movs	r3, #72	; 0x48
 8003146:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003148:	2302      	movs	r3, #2
 800314a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800314c:	2304      	movs	r3, #4
 800314e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003150:	f107 0320 	add.w	r3, r7, #32
 8003154:	4618      	mov	r0, r3
 8003156:	f003 fa2d 	bl	80065b4 <HAL_RCC_OscConfig>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003160:	f000 fa56 	bl	8003610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003164:	230f      	movs	r3, #15
 8003166:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003168:	2302      	movs	r3, #2
 800316a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003174:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800317a:	f107 030c 	add.w	r3, r7, #12
 800317e:	2102      	movs	r1, #2
 8003180:	4618      	mov	r0, r3
 8003182:	f003 fc8f 	bl	8006aa4 <HAL_RCC_ClockConfig>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800318c:	f000 fa40 	bl	8003610 <Error_Handler>
  }
}
 8003190:	bf00      	nop
 8003192:	3750      	adds	r7, #80	; 0x50
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40023800 	.word	0x40023800
 800319c:	40007000 	.word	0x40007000

080031a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031a6:	463b      	mov	r3, r7
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80031b2:	4b29      	ldr	r3, [pc, #164]	; (8003258 <MX_ADC1_Init+0xb8>)
 80031b4:	4a29      	ldr	r2, [pc, #164]	; (800325c <MX_ADC1_Init+0xbc>)
 80031b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80031b8:	4b27      	ldr	r3, [pc, #156]	; (8003258 <MX_ADC1_Init+0xb8>)
 80031ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <MX_ADC1_Init+0xb8>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80031c6:	4b24      	ldr	r3, [pc, #144]	; (8003258 <MX_ADC1_Init+0xb8>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80031cc:	4b22      	ldr	r3, [pc, #136]	; (8003258 <MX_ADC1_Init+0xb8>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031d2:	4b21      	ldr	r3, [pc, #132]	; (8003258 <MX_ADC1_Init+0xb8>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031da:	4b1f      	ldr	r3, [pc, #124]	; (8003258 <MX_ADC1_Init+0xb8>)
 80031dc:	2200      	movs	r2, #0
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031e0:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <MX_ADC1_Init+0xb8>)
 80031e2:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <MX_ADC1_Init+0xc0>)
 80031e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031e6:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <MX_ADC1_Init+0xb8>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80031ec:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <MX_ADC1_Init+0xb8>)
 80031ee:	2202      	movs	r2, #2
 80031f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80031f2:	4b19      	ldr	r3, [pc, #100]	; (8003258 <MX_ADC1_Init+0xb8>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031fa:	4b17      	ldr	r3, [pc, #92]	; (8003258 <MX_ADC1_Init+0xb8>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003200:	4815      	ldr	r0, [pc, #84]	; (8003258 <MX_ADC1_Init+0xb8>)
 8003202:	f001 fa2b 	bl	800465c <HAL_ADC_Init>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800320c:	f000 fa00 	bl	8003610 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003210:	2300      	movs	r3, #0
 8003212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003214:	2301      	movs	r3, #1
 8003216:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003218:	2306      	movs	r3, #6
 800321a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800321c:	463b      	mov	r3, r7
 800321e:	4619      	mov	r1, r3
 8003220:	480d      	ldr	r0, [pc, #52]	; (8003258 <MX_ADC1_Init+0xb8>)
 8003222:	f001 fb8d 	bl	8004940 <HAL_ADC_ConfigChannel>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800322c:	f000 f9f0 	bl	8003610 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003230:	2301      	movs	r3, #1
 8003232:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003234:	2302      	movs	r3, #2
 8003236:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8003238:	2302      	movs	r3, #2
 800323a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800323c:	463b      	mov	r3, r7
 800323e:	4619      	mov	r1, r3
 8003240:	4805      	ldr	r0, [pc, #20]	; (8003258 <MX_ADC1_Init+0xb8>)
 8003242:	f001 fb7d 	bl	8004940 <HAL_ADC_ConfigChannel>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800324c:	f000 f9e0 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	2000023c 	.word	0x2000023c
 800325c:	40012000 	.word	0x40012000
 8003260:	0f000001 	.word	0x0f000001

08003264 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003268:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <MX_I2C1_Init+0x50>)
 800326a:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <MX_I2C1_Init+0x54>)
 800326c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800326e:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <MX_I2C1_Init+0x50>)
 8003270:	4a12      	ldr	r2, [pc, #72]	; (80032bc <MX_I2C1_Init+0x58>)
 8003272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003274:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <MX_I2C1_Init+0x50>)
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800327a:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <MX_I2C1_Init+0x50>)
 800327c:	2200      	movs	r2, #0
 800327e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <MX_I2C1_Init+0x50>)
 8003282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <MX_I2C1_Init+0x50>)
 800328a:	2200      	movs	r2, #0
 800328c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <MX_I2C1_Init+0x50>)
 8003290:	2200      	movs	r2, #0
 8003292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003294:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <MX_I2C1_Init+0x50>)
 8003296:	2200      	movs	r2, #0
 8003298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <MX_I2C1_Init+0x50>)
 800329c:	2200      	movs	r2, #0
 800329e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032a0:	4804      	ldr	r0, [pc, #16]	; (80032b4 <MX_I2C1_Init+0x50>)
 80032a2:	f002 fce9 	bl	8005c78 <HAL_I2C_Init>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80032ac:	f000 f9b0 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	200002e4 	.word	0x200002e4
 80032b8:	40005400 	.word	0x40005400
 80032bc:	000186a0 	.word	0x000186a0

080032c0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <MX_IWDG_Init+0x2c>)
 80032c6:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <MX_IWDG_Init+0x30>)
 80032c8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80032ca:	4b08      	ldr	r3, [pc, #32]	; (80032ec <MX_IWDG_Init+0x2c>)
 80032cc:	2206      	movs	r2, #6
 80032ce:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <MX_IWDG_Init+0x2c>)
 80032d2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80032d6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80032d8:	4804      	ldr	r0, [pc, #16]	; (80032ec <MX_IWDG_Init+0x2c>)
 80032da:	f003 f918 	bl	800650e <HAL_IWDG_Init>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80032e4:	f000 f994 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80032e8:	bf00      	nop
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000338 	.word	0x20000338
 80032f0:	40003000 	.word	0x40003000

080032f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80032f8:	4b17      	ldr	r3, [pc, #92]	; (8003358 <MX_SPI1_Init+0x64>)
 80032fa:	4a18      	ldr	r2, [pc, #96]	; (800335c <MX_SPI1_Init+0x68>)
 80032fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032fe:	4b16      	ldr	r3, [pc, #88]	; (8003358 <MX_SPI1_Init+0x64>)
 8003300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003304:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <MX_SPI1_Init+0x64>)
 8003308:	2200      	movs	r2, #0
 800330a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800330c:	4b12      	ldr	r3, [pc, #72]	; (8003358 <MX_SPI1_Init+0x64>)
 800330e:	2200      	movs	r2, #0
 8003310:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <MX_SPI1_Init+0x64>)
 8003314:	2200      	movs	r2, #0
 8003316:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003318:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <MX_SPI1_Init+0x64>)
 800331a:	2200      	movs	r2, #0
 800331c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800331e:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <MX_SPI1_Init+0x64>)
 8003320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003324:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003326:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <MX_SPI1_Init+0x64>)
 8003328:	2218      	movs	r2, #24
 800332a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800332c:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <MX_SPI1_Init+0x64>)
 800332e:	2200      	movs	r2, #0
 8003330:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <MX_SPI1_Init+0x64>)
 8003334:	2200      	movs	r2, #0
 8003336:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003338:	4b07      	ldr	r3, [pc, #28]	; (8003358 <MX_SPI1_Init+0x64>)
 800333a:	2200      	movs	r2, #0
 800333c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <MX_SPI1_Init+0x64>)
 8003340:	220a      	movs	r2, #10
 8003342:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003344:	4804      	ldr	r0, [pc, #16]	; (8003358 <MX_SPI1_Init+0x64>)
 8003346:	f003 fd8d 	bl	8006e64 <HAL_SPI_Init>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003350:	f000 f95e 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003354:	bf00      	nop
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000344 	.word	0x20000344
 800335c:	40013000 	.word	0x40013000

08003360 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003366:	f107 0308 	add.w	r3, r7, #8
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	605a      	str	r2, [r3, #4]
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003374:	463b      	mov	r3, r7
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <MX_TIM4_Init+0x94>)
 800337e:	4a1e      	ldr	r2, [pc, #120]	; (80033f8 <MX_TIM4_Init+0x98>)
 8003380:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50000-1;
 8003382:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <MX_TIM4_Init+0x94>)
 8003384:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003388:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <MX_TIM4_Init+0x94>)
 800338c:	2200      	movs	r2, #0
 800338e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 14400-1;
 8003390:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <MX_TIM4_Init+0x94>)
 8003392:	f643 023f 	movw	r2, #14399	; 0x383f
 8003396:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003398:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <MX_TIM4_Init+0x94>)
 800339a:	2200      	movs	r2, #0
 800339c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800339e:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <MX_TIM4_Init+0x94>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80033a4:	4813      	ldr	r0, [pc, #76]	; (80033f4 <MX_TIM4_Init+0x94>)
 80033a6:	f004 fb13 	bl	80079d0 <HAL_TIM_Base_Init>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80033b0:	f000 f92e 	bl	8003610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80033ba:	f107 0308 	add.w	r3, r7, #8
 80033be:	4619      	mov	r1, r3
 80033c0:	480c      	ldr	r0, [pc, #48]	; (80033f4 <MX_TIM4_Init+0x94>)
 80033c2:	f004 fd64 	bl	8007e8e <HAL_TIM_ConfigClockSource>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80033cc:	f000 f920 	bl	8003610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d0:	2300      	movs	r3, #0
 80033d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80033d8:	463b      	mov	r3, r7
 80033da:	4619      	mov	r1, r3
 80033dc:	4805      	ldr	r0, [pc, #20]	; (80033f4 <MX_TIM4_Init+0x94>)
 80033de:	f004 ff7f 	bl	80082e0 <HAL_TIMEx_MasterConfigSynchronization>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80033e8:	f000 f912 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80033ec:	bf00      	nop
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	2000039c 	.word	0x2000039c
 80033f8:	40000800 	.word	0x40000800

080033fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003402:	463b      	mov	r3, r7
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800340a:	4b15      	ldr	r3, [pc, #84]	; (8003460 <MX_TIM6_Init+0x64>)
 800340c:	4a15      	ldr	r2, [pc, #84]	; (8003464 <MX_TIM6_Init+0x68>)
 800340e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8003410:	4b13      	ldr	r3, [pc, #76]	; (8003460 <MX_TIM6_Init+0x64>)
 8003412:	2247      	movs	r2, #71	; 0x47
 8003414:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003416:	4b12      	ldr	r3, [pc, #72]	; (8003460 <MX_TIM6_Init+0x64>)
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <MX_TIM6_Init+0x64>)
 800341e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003422:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003424:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <MX_TIM6_Init+0x64>)
 8003426:	2200      	movs	r2, #0
 8003428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800342a:	480d      	ldr	r0, [pc, #52]	; (8003460 <MX_TIM6_Init+0x64>)
 800342c:	f004 fad0 	bl	80079d0 <HAL_TIM_Base_Init>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003436:	f000 f8eb 	bl	8003610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800343e:	2300      	movs	r3, #0
 8003440:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003442:	463b      	mov	r3, r7
 8003444:	4619      	mov	r1, r3
 8003446:	4806      	ldr	r0, [pc, #24]	; (8003460 <MX_TIM6_Init+0x64>)
 8003448:	f004 ff4a 	bl	80082e0 <HAL_TIMEx_MasterConfigSynchronization>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003452:	f000 f8dd 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	200003e4 	.word	0x200003e4
 8003464:	40001000 	.word	0x40001000

08003468 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <MX_USART1_UART_Init+0x50>)
 8003470:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 8003474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003478:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 800347c:	2200      	movs	r2, #0
 800347e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 8003482:	2200      	movs	r2, #0
 8003484:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 8003488:	2200      	movs	r2, #0
 800348a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 800348e:	220c      	movs	r2, #12
 8003490:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800349e:	4805      	ldr	r0, [pc, #20]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 80034a0:	f004 ffae 	bl	8008400 <HAL_UART_Init>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034aa:	f000 f8b1 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	2000042c 	.word	0x2000042c
 80034b8:	40011000 	.word	0x40011000

080034bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <MX_DMA_Init+0x4c>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	4a0f      	ldr	r2, [pc, #60]	; (8003508 <MX_DMA_Init+0x4c>)
 80034cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034d0:	6313      	str	r3, [r2, #48]	; 0x30
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <MX_DMA_Init+0x4c>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034da:	607b      	str	r3, [r7, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80034de:	2200      	movs	r2, #0
 80034e0:	2100      	movs	r1, #0
 80034e2:	2038      	movs	r0, #56	; 0x38
 80034e4:	f001 fda7 	bl	8005036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80034e8:	2038      	movs	r0, #56	; 0x38
 80034ea:	f001 fdc0 	bl	800506e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80034ee:	2200      	movs	r2, #0
 80034f0:	2100      	movs	r1, #0
 80034f2:	203a      	movs	r0, #58	; 0x3a
 80034f4:	f001 fd9f 	bl	8005036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80034f8:	203a      	movs	r0, #58	; 0x3a
 80034fa:	f001 fdb8 	bl	800506e <HAL_NVIC_EnableIRQ>

}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800

0800350c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003512:	f107 0314 	add.w	r3, r7, #20
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	609a      	str	r2, [r3, #8]
 800351e:	60da      	str	r2, [r3, #12]
 8003520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	4b36      	ldr	r3, [pc, #216]	; (8003600 <MX_GPIO_Init+0xf4>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a35      	ldr	r2, [pc, #212]	; (8003600 <MX_GPIO_Init+0xf4>)
 800352c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
 8003532:	4b33      	ldr	r3, [pc, #204]	; (8003600 <MX_GPIO_Init+0xf4>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	4b2f      	ldr	r3, [pc, #188]	; (8003600 <MX_GPIO_Init+0xf4>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a2e      	ldr	r2, [pc, #184]	; (8003600 <MX_GPIO_Init+0xf4>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b2c      	ldr	r3, [pc, #176]	; (8003600 <MX_GPIO_Init+0xf4>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	4b28      	ldr	r3, [pc, #160]	; (8003600 <MX_GPIO_Init+0xf4>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a27      	ldr	r2, [pc, #156]	; (8003600 <MX_GPIO_Init+0xf4>)
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b25      	ldr	r3, [pc, #148]	; (8003600 <MX_GPIO_Init+0xf4>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	4b21      	ldr	r3, [pc, #132]	; (8003600 <MX_GPIO_Init+0xf4>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4a20      	ldr	r2, [pc, #128]	; (8003600 <MX_GPIO_Init+0xf4>)
 8003580:	f043 0310 	orr.w	r3, r3, #16
 8003584:	6313      	str	r3, [r2, #48]	; 0x30
 8003586:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <MX_GPIO_Init+0xf4>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	607b      	str	r3, [r7, #4]
 8003590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Temperature_Pin_Pin|SPI1_CS_Pin|test_pin_Pin, GPIO_PIN_RESET);
 8003592:	2200      	movs	r2, #0
 8003594:	2154      	movs	r1, #84	; 0x54
 8003596:	481b      	ldr	r0, [pc, #108]	; (8003604 <MX_GPIO_Init+0xf8>)
 8003598:	f002 fb3a 	bl	8005c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 800359c:	2200      	movs	r2, #0
 800359e:	2101      	movs	r1, #1
 80035a0:	4819      	ldr	r0, [pc, #100]	; (8003608 <MX_GPIO_Init+0xfc>)
 80035a2:	f002 fb35 	bl	8005c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Temperature_Pin_Pin SPI1_CS_Pin test_pin_Pin */
  GPIO_InitStruct.Pin = Temperature_Pin_Pin|SPI1_CS_Pin|test_pin_Pin;
 80035a6:	2354      	movs	r3, #84	; 0x54
 80035a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035aa:	2301      	movs	r3, #1
 80035ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b2:	2300      	movs	r3, #0
 80035b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b6:	f107 0314 	add.w	r3, r7, #20
 80035ba:	4619      	mov	r1, r3
 80035bc:	4811      	ldr	r0, [pc, #68]	; (8003604 <MX_GPIO_Init+0xf8>)
 80035be:	f002 f973 	bl	80058a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80035c2:	2301      	movs	r3, #1
 80035c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035c6:	2301      	movs	r3, #1
 80035c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ce:	2300      	movs	r3, #0
 80035d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80035d2:	f107 0314 	add.w	r3, r7, #20
 80035d6:	4619      	mov	r1, r3
 80035d8:	480b      	ldr	r0, [pc, #44]	; (8003608 <MX_GPIO_Init+0xfc>)
 80035da:	f002 f965 	bl	80058a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Rotary_CLK_Pin Rotary_DT_Pin Rotary_SW_Pin */
  GPIO_InitStruct.Pin = Rotary_CLK_Pin|Rotary_DT_Pin|Rotary_SW_Pin;
 80035de:	f44f 7360 	mov.w	r3, #896	; 0x380
 80035e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	4619      	mov	r1, r3
 80035f2:	4806      	ldr	r0, [pc, #24]	; (800360c <MX_GPIO_Init+0x100>)
 80035f4:	f002 f958 	bl	80058a8 <HAL_GPIO_Init>

}
 80035f8:	bf00      	nop
 80035fa:	3728      	adds	r7, #40	; 0x28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40023800 	.word	0x40023800
 8003604:	40020000 	.word	0x40020000
 8003608:	40020400 	.word	0x40020400
 800360c:	40021000 	.word	0x40021000

08003610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003614:	b672      	cpsid	i
}
 8003616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003618:	e7fe      	b.n	8003618 <Error_Handler+0x8>
	...

0800361c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	607b      	str	r3, [r7, #4]
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <HAL_MspInit+0x4c>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	4a0f      	ldr	r2, [pc, #60]	; (8003668 <HAL_MspInit+0x4c>)
 800362c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003630:	6453      	str	r3, [r2, #68]	; 0x44
 8003632:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <HAL_MspInit+0x4c>)
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <HAL_MspInit+0x4c>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	4a08      	ldr	r2, [pc, #32]	; (8003668 <HAL_MspInit+0x4c>)
 8003648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364c:	6413      	str	r3, [r2, #64]	; 0x40
 800364e:	4b06      	ldr	r3, [pc, #24]	; (8003668 <HAL_MspInit+0x4c>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800

0800366c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	f107 0314 	add.w	r3, r7, #20
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a2f      	ldr	r2, [pc, #188]	; (8003748 <HAL_ADC_MspInit+0xdc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d157      	bne.n	800373e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	4b2e      	ldr	r3, [pc, #184]	; (800374c <HAL_ADC_MspInit+0xe0>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	4a2d      	ldr	r2, [pc, #180]	; (800374c <HAL_ADC_MspInit+0xe0>)
 8003698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369c:	6453      	str	r3, [r2, #68]	; 0x44
 800369e:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_ADC_MspInit+0xe0>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	4b27      	ldr	r3, [pc, #156]	; (800374c <HAL_ADC_MspInit+0xe0>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	4a26      	ldr	r2, [pc, #152]	; (800374c <HAL_ADC_MspInit+0xe0>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ba:	4b24      	ldr	r3, [pc, #144]	; (800374c <HAL_ADC_MspInit+0xe0>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_PH_Sensor_Pin|ADC1_TDS_Sensor_Pin;
 80036c6:	2303      	movs	r3, #3
 80036c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036ca:	2303      	movs	r3, #3
 80036cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d2:	f107 0314 	add.w	r3, r7, #20
 80036d6:	4619      	mov	r1, r3
 80036d8:	481d      	ldr	r0, [pc, #116]	; (8003750 <HAL_ADC_MspInit+0xe4>)
 80036da:	f002 f8e5 	bl	80058a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_ADC_MspInit+0xe8>)
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <HAL_ADC_MspInit+0xec>)
 80036e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80036e4:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <HAL_ADC_MspInit+0xe8>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036ea:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <HAL_ADC_MspInit+0xe8>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036f0:	4b18      	ldr	r3, [pc, #96]	; (8003754 <HAL_ADC_MspInit+0xe8>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80036f6:	4b17      	ldr	r3, [pc, #92]	; (8003754 <HAL_ADC_MspInit+0xe8>)
 80036f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <HAL_ADC_MspInit+0xe8>)
 8003700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003704:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003706:	4b13      	ldr	r3, [pc, #76]	; (8003754 <HAL_ADC_MspInit+0xe8>)
 8003708:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800370c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800370e:	4b11      	ldr	r3, [pc, #68]	; (8003754 <HAL_ADC_MspInit+0xe8>)
 8003710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003714:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003716:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <HAL_ADC_MspInit+0xe8>)
 8003718:	2200      	movs	r2, #0
 800371a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800371c:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <HAL_ADC_MspInit+0xe8>)
 800371e:	2200      	movs	r2, #0
 8003720:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003722:	480c      	ldr	r0, [pc, #48]	; (8003754 <HAL_ADC_MspInit+0xe8>)
 8003724:	f001 fcbe 	bl	80050a4 <HAL_DMA_Init>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800372e:	f7ff ff6f 	bl	8003610 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a07      	ldr	r2, [pc, #28]	; (8003754 <HAL_ADC_MspInit+0xe8>)
 8003736:	639a      	str	r2, [r3, #56]	; 0x38
 8003738:	4a06      	ldr	r2, [pc, #24]	; (8003754 <HAL_ADC_MspInit+0xe8>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800373e:	bf00      	nop
 8003740:	3728      	adds	r7, #40	; 0x28
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40012000 	.word	0x40012000
 800374c:	40023800 	.word	0x40023800
 8003750:	40020000 	.word	0x40020000
 8003754:	20000284 	.word	0x20000284
 8003758:	40026410 	.word	0x40026410

0800375c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	; 0x28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003764:	f107 0314 	add.w	r3, r7, #20
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a19      	ldr	r2, [pc, #100]	; (80037e0 <HAL_I2C_MspInit+0x84>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d12b      	bne.n	80037d6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	4b18      	ldr	r3, [pc, #96]	; (80037e4 <HAL_I2C_MspInit+0x88>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	4a17      	ldr	r2, [pc, #92]	; (80037e4 <HAL_I2C_MspInit+0x88>)
 8003788:	f043 0302 	orr.w	r3, r3, #2
 800378c:	6313      	str	r3, [r2, #48]	; 0x30
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <HAL_I2C_MspInit+0x88>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C1_SCL_Pin|LCD_I2C1_SDA_Pin;
 800379a:	23c0      	movs	r3, #192	; 0xc0
 800379c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800379e:	2312      	movs	r3, #18
 80037a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a6:	2303      	movs	r3, #3
 80037a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80037aa:	2304      	movs	r3, #4
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ae:	f107 0314 	add.w	r3, r7, #20
 80037b2:	4619      	mov	r1, r3
 80037b4:	480c      	ldr	r0, [pc, #48]	; (80037e8 <HAL_I2C_MspInit+0x8c>)
 80037b6:	f002 f877 	bl	80058a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_I2C_MspInit+0x88>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <HAL_I2C_MspInit+0x88>)
 80037c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_I2C_MspInit+0x88>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80037d6:	bf00      	nop
 80037d8:	3728      	adds	r7, #40	; 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40005400 	.word	0x40005400
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40020400 	.word	0x40020400

080037ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 0314 	add.w	r3, r7, #20
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a19      	ldr	r2, [pc, #100]	; (8003870 <HAL_SPI_MspInit+0x84>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d12b      	bne.n	8003866 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	4b18      	ldr	r3, [pc, #96]	; (8003874 <HAL_SPI_MspInit+0x88>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	4a17      	ldr	r2, [pc, #92]	; (8003874 <HAL_SPI_MspInit+0x88>)
 8003818:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800381c:	6453      	str	r3, [r2, #68]	; 0x44
 800381e:	4b15      	ldr	r3, [pc, #84]	; (8003874 <HAL_SPI_MspInit+0x88>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_SPI_MspInit+0x88>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a10      	ldr	r2, [pc, #64]	; (8003874 <HAL_SPI_MspInit+0x88>)
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <HAL_SPI_MspInit+0x88>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003846:	2338      	movs	r3, #56	; 0x38
 8003848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003852:	2303      	movs	r3, #3
 8003854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003856:	2305      	movs	r3, #5
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385a:	f107 0314 	add.w	r3, r7, #20
 800385e:	4619      	mov	r1, r3
 8003860:	4805      	ldr	r0, [pc, #20]	; (8003878 <HAL_SPI_MspInit+0x8c>)
 8003862:	f002 f821 	bl	80058a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003866:	bf00      	nop
 8003868:	3728      	adds	r7, #40	; 0x28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40013000 	.word	0x40013000
 8003874:	40023800 	.word	0x40023800
 8003878:	40020400 	.word	0x40020400

0800387c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a18      	ldr	r2, [pc, #96]	; (80038ec <HAL_TIM_Base_MspInit+0x70>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d116      	bne.n	80038bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <HAL_TIM_Base_MspInit+0x74>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <HAL_TIM_Base_MspInit+0x74>)
 8003898:	f043 0304 	orr.w	r3, r3, #4
 800389c:	6413      	str	r3, [r2, #64]	; 0x40
 800389e:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <HAL_TIM_Base_MspInit+0x74>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80038aa:	2200      	movs	r2, #0
 80038ac:	2100      	movs	r1, #0
 80038ae:	201e      	movs	r0, #30
 80038b0:	f001 fbc1 	bl	8005036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80038b4:	201e      	movs	r0, #30
 80038b6:	f001 fbda 	bl	800506e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80038ba:	e012      	b.n	80038e2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0c      	ldr	r2, [pc, #48]	; (80038f4 <HAL_TIM_Base_MspInit+0x78>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d10d      	bne.n	80038e2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_TIM_Base_MspInit+0x74>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	4a08      	ldr	r2, [pc, #32]	; (80038f0 <HAL_TIM_Base_MspInit+0x74>)
 80038d0:	f043 0310 	orr.w	r3, r3, #16
 80038d4:	6413      	str	r3, [r2, #64]	; 0x40
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_TIM_Base_MspInit+0x74>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]
}
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40000800 	.word	0x40000800
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40001000 	.word	0x40001000

080038f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	; 0x28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 0314 	add.w	r3, r7, #20
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a34      	ldr	r2, [pc, #208]	; (80039e8 <HAL_UART_MspInit+0xf0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d162      	bne.n	80039e0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	4b33      	ldr	r3, [pc, #204]	; (80039ec <HAL_UART_MspInit+0xf4>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	4a32      	ldr	r2, [pc, #200]	; (80039ec <HAL_UART_MspInit+0xf4>)
 8003924:	f043 0310 	orr.w	r3, r3, #16
 8003928:	6453      	str	r3, [r2, #68]	; 0x44
 800392a:	4b30      	ldr	r3, [pc, #192]	; (80039ec <HAL_UART_MspInit+0xf4>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	4b2c      	ldr	r3, [pc, #176]	; (80039ec <HAL_UART_MspInit+0xf4>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	4a2b      	ldr	r2, [pc, #172]	; (80039ec <HAL_UART_MspInit+0xf4>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	6313      	str	r3, [r2, #48]	; 0x30
 8003946:	4b29      	ldr	r3, [pc, #164]	; (80039ec <HAL_UART_MspInit+0xf4>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003952:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	2302      	movs	r3, #2
 800395a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003960:	2303      	movs	r3, #3
 8003962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003964:	2307      	movs	r3, #7
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4619      	mov	r1, r3
 800396e:	4820      	ldr	r0, [pc, #128]	; (80039f0 <HAL_UART_MspInit+0xf8>)
 8003970:	f001 ff9a 	bl	80058a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003974:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <HAL_UART_MspInit+0xfc>)
 8003976:	4a20      	ldr	r2, [pc, #128]	; (80039f8 <HAL_UART_MspInit+0x100>)
 8003978:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800397a:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <HAL_UART_MspInit+0xfc>)
 800397c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003980:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <HAL_UART_MspInit+0xfc>)
 8003984:	2200      	movs	r2, #0
 8003986:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003988:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <HAL_UART_MspInit+0xfc>)
 800398a:	2200      	movs	r2, #0
 800398c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800398e:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_UART_MspInit+0xfc>)
 8003990:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003994:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003996:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <HAL_UART_MspInit+0xfc>)
 8003998:	2200      	movs	r2, #0
 800399a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800399c:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <HAL_UART_MspInit+0xfc>)
 800399e:	2200      	movs	r2, #0
 80039a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <HAL_UART_MspInit+0xfc>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039a8:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_UART_MspInit+0xfc>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039ae:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <HAL_UART_MspInit+0xfc>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80039b4:	480f      	ldr	r0, [pc, #60]	; (80039f4 <HAL_UART_MspInit+0xfc>)
 80039b6:	f001 fb75 	bl	80050a4 <HAL_DMA_Init>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80039c0:	f7ff fe26 	bl	8003610 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <HAL_UART_MspInit+0xfc>)
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38
 80039ca:	4a0a      	ldr	r2, [pc, #40]	; (80039f4 <HAL_UART_MspInit+0xfc>)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039d0:	2200      	movs	r2, #0
 80039d2:	2100      	movs	r1, #0
 80039d4:	2025      	movs	r0, #37	; 0x25
 80039d6:	f001 fb2e 	bl	8005036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039da:	2025      	movs	r0, #37	; 0x25
 80039dc:	f001 fb47 	bl	800506e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80039e0:	bf00      	nop
 80039e2:	3728      	adds	r7, #40	; 0x28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40011000 	.word	0x40011000
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40020000 	.word	0x40020000
 80039f4:	20000470 	.word	0x20000470
 80039f8:	40026440 	.word	0x40026440

080039fc <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1,Timer2 = 0;
void SDTimer_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
	if(Timer1>0)
 8003a00:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <SDTimer_Handler+0x40>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <SDTimer_Handler+0x1c>
	{
		Timer1--;
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <SDTimer_Handler+0x40>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <SDTimer_Handler+0x40>)
 8003a16:	701a      	strb	r2, [r3, #0]
	}

	if(Timer2>0)
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <SDTimer_Handler+0x44>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d006      	beq.n	8003a30 <SDTimer_Handler+0x34>
	{
		Timer2--;
 8003a22:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <SDTimer_Handler+0x44>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <SDTimer_Handler+0x44>)
 8003a2e:	701a      	strb	r2, [r3, #0]
	}
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	20000945 	.word	0x20000945
 8003a40:	20000946 	.word	0x20000946

08003a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a48:	e7fe      	b.n	8003a48 <NMI_Handler+0x4>

08003a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a4e:	e7fe      	b.n	8003a4e <HardFault_Handler+0x4>

08003a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a54:	e7fe      	b.n	8003a54 <MemManage_Handler+0x4>

08003a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a56:	b480      	push	{r7}
 8003a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a5a:	e7fe      	b.n	8003a5a <BusFault_Handler+0x4>

08003a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a60:	e7fe      	b.n	8003a60 <UsageFault_Handler+0x4>

08003a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003a90:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <SysTick_Handler+0x30>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	3301      	adds	r3, #1
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4b08      	ldr	r3, [pc, #32]	; (8003abc <SysTick_Handler+0x30>)
 8003a9c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <SysTick_Handler+0x30>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b09      	cmp	r3, #9
 8003aa6:	d904      	bls.n	8003ab2 <SysTick_Handler+0x26>
	{
		FatFsCnt=0;
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <SysTick_Handler+0x30>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8003aae:	f7ff ffa5 	bl	80039fc <SDTimer_Handler>

	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ab2:	f000 fd8f 	bl	80045d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000944 	.word	0x20000944

08003ac0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003ac4:	4802      	ldr	r0, [pc, #8]	; (8003ad0 <TIM4_IRQHandler+0x10>)
 8003ac6:	f004 f8da 	bl	8007c7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	2000039c 	.word	0x2000039c

08003ad4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <USART1_IRQHandler+0x10>)
 8003ada:	f004 fdd5 	bl	8008688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	2000042c 	.word	0x2000042c

08003ae8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <DMA2_Stream0_IRQHandler+0x10>)
 8003aee:	f001 fc71 	bl	80053d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000284 	.word	0x20000284

08003afc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003b00:	4802      	ldr	r0, [pc, #8]	; (8003b0c <DMA2_Stream2_IRQHandler+0x10>)
 8003b02:	f001 fc67 	bl	80053d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000470 	.word	0x20000470

08003b10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return 1;
 8003b14:	2301      	movs	r3, #1
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <_kill>:

int _kill(int pid, int sig)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b2a:	f005 ff65 	bl	80099f8 <__errno>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2216      	movs	r2, #22
 8003b32:	601a      	str	r2, [r3, #0]
  return -1;
 8003b34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <_exit>:

void _exit (int status)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b48:	f04f 31ff 	mov.w	r1, #4294967295
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff ffe7 	bl	8003b20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b52:	e7fe      	b.n	8003b52 <_exit+0x12>

08003b54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	e00a      	b.n	8003b7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b66:	f3af 8000 	nop.w
 8003b6a:	4601      	mov	r1, r0
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	60ba      	str	r2, [r7, #8]
 8003b72:	b2ca      	uxtb	r2, r1
 8003b74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	dbf0      	blt.n	8003b66 <_read+0x12>
  }

  return len;
 8003b84:	687b      	ldr	r3, [r7, #4]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b086      	sub	sp, #24
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	e009      	b.n	8003bb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	60ba      	str	r2, [r7, #8]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	dbf1      	blt.n	8003ba0 <_write+0x12>
  }
  return len;
 8003bbc:	687b      	ldr	r3, [r7, #4]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <_close>:

int _close(int file)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bee:	605a      	str	r2, [r3, #4]
  return 0;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <_isatty>:

int _isatty(int file)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c06:	2301      	movs	r3, #1
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c38:	4a14      	ldr	r2, [pc, #80]	; (8003c8c <_sbrk+0x5c>)
 8003c3a:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <_sbrk+0x60>)
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c44:	4b13      	ldr	r3, [pc, #76]	; (8003c94 <_sbrk+0x64>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d102      	bne.n	8003c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c4c:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <_sbrk+0x64>)
 8003c4e:	4a12      	ldr	r2, [pc, #72]	; (8003c98 <_sbrk+0x68>)
 8003c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c52:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <_sbrk+0x64>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4413      	add	r3, r2
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d207      	bcs.n	8003c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c60:	f005 feca 	bl	80099f8 <__errno>
 8003c64:	4603      	mov	r3, r0
 8003c66:	220c      	movs	r2, #12
 8003c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	e009      	b.n	8003c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <_sbrk+0x64>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c76:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <_sbrk+0x64>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	4a05      	ldr	r2, [pc, #20]	; (8003c94 <_sbrk+0x64>)
 8003c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c82:	68fb      	ldr	r3, [r7, #12]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20020000 	.word	0x20020000
 8003c90:	00000400 	.word	0x00000400
 8003c94:	20000948 	.word	0x20000948
 8003c98:	200009a0 	.word	0x200009a0

08003c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <SystemInit+0x20>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	4a05      	ldr	r2, [pc, #20]	; (8003cbc <SystemInit+0x20>)
 8003ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	e000ed00 	.word	0xe000ed00

08003cc0 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003cca:	f107 020f 	add.w	r2, r7, #15
 8003cce:	1df9      	adds	r1, r7, #7
 8003cd0:	2364      	movs	r3, #100	; 0x64
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	4804      	ldr	r0, [pc, #16]	; (8003ce8 <W25qxx_Spi+0x28>)
 8003cd8:	f003 fb9a 	bl	8007410 <HAL_SPI_TransmitReceive>
	return ret;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000344 	.word	0x20000344

08003cec <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003d02:	2200      	movs	r2, #0
 8003d04:	2101      	movs	r1, #1
 8003d06:	4813      	ldr	r0, [pc, #76]	; (8003d54 <W25qxx_ReadID+0x68>)
 8003d08:	f001 ff82 	bl	8005c10 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003d0c:	209f      	movs	r0, #159	; 0x9f
 8003d0e:	f7ff ffd7 	bl	8003cc0 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003d12:	20a5      	movs	r0, #165	; 0xa5
 8003d14:	f7ff ffd4 	bl	8003cc0 <W25qxx_Spi>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003d1c:	20a5      	movs	r0, #165	; 0xa5
 8003d1e:	f7ff ffcf 	bl	8003cc0 <W25qxx_Spi>
 8003d22:	4603      	mov	r3, r0
 8003d24:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003d26:	20a5      	movs	r0, #165	; 0xa5
 8003d28:	f7ff ffca 	bl	8003cc0 <W25qxx_Spi>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003d30:	2201      	movs	r2, #1
 8003d32:	2101      	movs	r1, #1
 8003d34:	4807      	ldr	r0, [pc, #28]	; (8003d54 <W25qxx_ReadID+0x68>)
 8003d36:	f001 ff6b 	bl	8005c10 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	041a      	lsls	r2, r3, #16
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	4313      	orrs	r3, r2
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40020400 	.word	0x40020400

08003d58 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2101      	movs	r1, #1
 8003d62:	4816      	ldr	r0, [pc, #88]	; (8003dbc <W25qxx_ReadUniqID+0x64>)
 8003d64:	f001 ff54 	bl	8005c10 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003d68:	204b      	movs	r0, #75	; 0x4b
 8003d6a:	f7ff ffa9 	bl	8003cc0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	71fb      	strb	r3, [r7, #7]
 8003d72:	e005      	b.n	8003d80 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003d74:	20a5      	movs	r0, #165	; 0xa5
 8003d76:	f7ff ffa3 	bl	8003cc0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	71fb      	strb	r3, [r7, #7]
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d9f6      	bls.n	8003d74 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003d86:	2300      	movs	r3, #0
 8003d88:	71bb      	strb	r3, [r7, #6]
 8003d8a:	e00b      	b.n	8003da4 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003d8c:	79bc      	ldrb	r4, [r7, #6]
 8003d8e:	20a5      	movs	r0, #165	; 0xa5
 8003d90:	f7ff ff96 	bl	8003cc0 <W25qxx_Spi>
 8003d94:	4603      	mov	r3, r0
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <W25qxx_ReadUniqID+0x68>)
 8003d9a:	4423      	add	r3, r4
 8003d9c:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003d9e:	79bb      	ldrb	r3, [r7, #6]
 8003da0:	3301      	adds	r3, #1
 8003da2:	71bb      	strb	r3, [r7, #6]
 8003da4:	79bb      	ldrb	r3, [r7, #6]
 8003da6:	2b07      	cmp	r3, #7
 8003da8:	d9f0      	bls.n	8003d8c <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003daa:	2201      	movs	r2, #1
 8003dac:	2101      	movs	r1, #1
 8003dae:	4803      	ldr	r0, [pc, #12]	; (8003dbc <W25qxx_ReadUniqID+0x64>)
 8003db0:	f001 ff2e 	bl	8005c10 <HAL_GPIO_WritePin>
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd90      	pop	{r4, r7, pc}
 8003dbc:	40020400 	.word	0x40020400
 8003dc0:	2000094c 	.word	0x2000094c

08003dc4 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4807      	ldr	r0, [pc, #28]	; (8003dec <W25qxx_WriteEnable+0x28>)
 8003dce:	f001 ff1f 	bl	8005c10 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8003dd2:	2006      	movs	r0, #6
 8003dd4:	f7ff ff74 	bl	8003cc0 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003dd8:	2201      	movs	r2, #1
 8003dda:	2101      	movs	r1, #1
 8003ddc:	4803      	ldr	r0, [pc, #12]	; (8003dec <W25qxx_WriteEnable+0x28>)
 8003dde:	f001 ff17 	bl	8005c10 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003de2:	2001      	movs	r0, #1
 8003de4:	f000 fc16 	bl	8004614 <HAL_Delay>
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40020400 	.word	0x40020400

08003df0 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2101      	movs	r1, #1
 8003e02:	481c      	ldr	r0, [pc, #112]	; (8003e74 <W25qxx_ReadStatusRegister+0x84>)
 8003e04:	f001 ff04 	bl	8005c10 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d10c      	bne.n	8003e28 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003e0e:	2005      	movs	r0, #5
 8003e10:	f7ff ff56 	bl	8003cc0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e14:	20a5      	movs	r0, #165	; 0xa5
 8003e16:	f7ff ff53 	bl	8003cc0 <W25qxx_Spi>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003e1e:	4a16      	ldr	r2, [pc, #88]	; (8003e78 <W25qxx_ReadStatusRegister+0x88>)
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003e26:	e01b      	b.n	8003e60 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d10c      	bne.n	8003e48 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003e2e:	2035      	movs	r0, #53	; 0x35
 8003e30:	f7ff ff46 	bl	8003cc0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e34:	20a5      	movs	r0, #165	; 0xa5
 8003e36:	f7ff ff43 	bl	8003cc0 <W25qxx_Spi>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003e3e:	4a0e      	ldr	r2, [pc, #56]	; (8003e78 <W25qxx_ReadStatusRegister+0x88>)
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003e46:	e00b      	b.n	8003e60 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003e48:	2015      	movs	r0, #21
 8003e4a:	f7ff ff39 	bl	8003cc0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e4e:	20a5      	movs	r0, #165	; 0xa5
 8003e50:	f7ff ff36 	bl	8003cc0 <W25qxx_Spi>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003e58:	4a07      	ldr	r2, [pc, #28]	; (8003e78 <W25qxx_ReadStatusRegister+0x88>)
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003e60:	2201      	movs	r2, #1
 8003e62:	2101      	movs	r1, #1
 8003e64:	4803      	ldr	r0, [pc, #12]	; (8003e74 <W25qxx_ReadStatusRegister+0x84>)
 8003e66:	f001 fed3 	bl	8005c10 <HAL_GPIO_WritePin>
	return status;
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40020400 	.word	0x40020400
 8003e78:	2000094c 	.word	0x2000094c

08003e7c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003e80:	2001      	movs	r0, #1
 8003e82:	f000 fbc7 	bl	8004614 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003e86:	2200      	movs	r2, #0
 8003e88:	2101      	movs	r1, #1
 8003e8a:	480f      	ldr	r0, [pc, #60]	; (8003ec8 <W25qxx_WaitForWriteEnd+0x4c>)
 8003e8c:	f001 fec0 	bl	8005c10 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003e90:	2005      	movs	r0, #5
 8003e92:	f7ff ff15 	bl	8003cc0 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e96:	20a5      	movs	r0, #165	; 0xa5
 8003e98:	f7ff ff12 	bl	8003cc0 <W25qxx_Spi>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <W25qxx_WaitForWriteEnd+0x50>)
 8003ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	f000 fbb4 	bl	8004614 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003eac:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <W25qxx_WaitForWriteEnd+0x50>)
 8003eae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1ed      	bne.n	8003e96 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003eba:	2201      	movs	r2, #1
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	4802      	ldr	r0, [pc, #8]	; (8003ec8 <W25qxx_WaitForWriteEnd+0x4c>)
 8003ec0:	f001 fea6 	bl	8005c10 <HAL_GPIO_WritePin>
}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40020400 	.word	0x40020400
 8003ecc:	2000094c 	.word	0x2000094c

08003ed0 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003ed6:	4b65      	ldr	r3, [pc, #404]	; (800406c <W25qxx_Init+0x19c>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003ede:	e002      	b.n	8003ee6 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	f000 fb97 	bl	8004614 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8003ee6:	f000 fb89 	bl	80045fc <HAL_GetTick>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b63      	cmp	r3, #99	; 0x63
 8003eee:	d9f7      	bls.n	8003ee0 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	485e      	ldr	r0, [pc, #376]	; (8004070 <W25qxx_Init+0x1a0>)
 8003ef6:	f001 fe8b 	bl	8005c10 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003efa:	2064      	movs	r0, #100	; 0x64
 8003efc:	f000 fb8a 	bl	8004614 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8003f00:	f7ff fef4 	bl	8003cec <W25qxx_ReadID>
 8003f04:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	3b11      	subs	r3, #17
 8003f0c:	2b0f      	cmp	r3, #15
 8003f0e:	d86c      	bhi.n	8003fea <W25qxx_Init+0x11a>
 8003f10:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <W25qxx_Init+0x48>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003fdd 	.word	0x08003fdd
 8003f1c:	08003fcf 	.word	0x08003fcf
 8003f20:	08003fc1 	.word	0x08003fc1
 8003f24:	08003fb3 	.word	0x08003fb3
 8003f28:	08003fa5 	.word	0x08003fa5
 8003f2c:	08003f97 	.word	0x08003f97
 8003f30:	08003f89 	.word	0x08003f89
 8003f34:	08003f79 	.word	0x08003f79
 8003f38:	08003f69 	.word	0x08003f69
 8003f3c:	08003feb 	.word	0x08003feb
 8003f40:	08003feb 	.word	0x08003feb
 8003f44:	08003feb 	.word	0x08003feb
 8003f48:	08003feb 	.word	0x08003feb
 8003f4c:	08003feb 	.word	0x08003feb
 8003f50:	08003feb 	.word	0x08003feb
 8003f54:	08003f59 	.word	0x08003f59
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8003f58:	4b44      	ldr	r3, [pc, #272]	; (800406c <W25qxx_Init+0x19c>)
 8003f5a:	220a      	movs	r2, #10
 8003f5c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8003f5e:	4b43      	ldr	r3, [pc, #268]	; (800406c <W25qxx_Init+0x19c>)
 8003f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f64:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8003f66:	e046      	b.n	8003ff6 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8003f68:	4b40      	ldr	r3, [pc, #256]	; (800406c <W25qxx_Init+0x19c>)
 8003f6a:	2209      	movs	r2, #9
 8003f6c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003f6e:	4b3f      	ldr	r3, [pc, #252]	; (800406c <W25qxx_Init+0x19c>)
 8003f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f74:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8003f76:	e03e      	b.n	8003ff6 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003f78:	4b3c      	ldr	r3, [pc, #240]	; (800406c <W25qxx_Init+0x19c>)
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003f7e:	4b3b      	ldr	r3, [pc, #236]	; (800406c <W25qxx_Init+0x19c>)
 8003f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f84:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8003f86:	e036      	b.n	8003ff6 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003f88:	4b38      	ldr	r3, [pc, #224]	; (800406c <W25qxx_Init+0x19c>)
 8003f8a:	2207      	movs	r2, #7
 8003f8c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8003f8e:	4b37      	ldr	r3, [pc, #220]	; (800406c <W25qxx_Init+0x19c>)
 8003f90:	2280      	movs	r2, #128	; 0x80
 8003f92:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8003f94:	e02f      	b.n	8003ff6 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003f96:	4b35      	ldr	r3, [pc, #212]	; (800406c <W25qxx_Init+0x19c>)
 8003f98:	2206      	movs	r2, #6
 8003f9a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003f9c:	4b33      	ldr	r3, [pc, #204]	; (800406c <W25qxx_Init+0x19c>)
 8003f9e:	2240      	movs	r2, #64	; 0x40
 8003fa0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8003fa2:	e028      	b.n	8003ff6 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8003fa4:	4b31      	ldr	r3, [pc, #196]	; (800406c <W25qxx_Init+0x19c>)
 8003fa6:	2205      	movs	r2, #5
 8003fa8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003faa:	4b30      	ldr	r3, [pc, #192]	; (800406c <W25qxx_Init+0x19c>)
 8003fac:	2220      	movs	r2, #32
 8003fae:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8003fb0:	e021      	b.n	8003ff6 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8003fb2:	4b2e      	ldr	r3, [pc, #184]	; (800406c <W25qxx_Init+0x19c>)
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003fb8:	4b2c      	ldr	r3, [pc, #176]	; (800406c <W25qxx_Init+0x19c>)
 8003fba:	2210      	movs	r2, #16
 8003fbc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8003fbe:	e01a      	b.n	8003ff6 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003fc0:	4b2a      	ldr	r3, [pc, #168]	; (800406c <W25qxx_Init+0x19c>)
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003fc6:	4b29      	ldr	r3, [pc, #164]	; (800406c <W25qxx_Init+0x19c>)
 8003fc8:	2208      	movs	r2, #8
 8003fca:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8003fcc:	e013      	b.n	8003ff6 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8003fce:	4b27      	ldr	r3, [pc, #156]	; (800406c <W25qxx_Init+0x19c>)
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003fd4:	4b25      	ldr	r3, [pc, #148]	; (800406c <W25qxx_Init+0x19c>)
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8003fda:	e00c      	b.n	8003ff6 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003fdc:	4b23      	ldr	r3, [pc, #140]	; (800406c <W25qxx_Init+0x19c>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003fe2:	4b22      	ldr	r3, [pc, #136]	; (800406c <W25qxx_Init+0x19c>)
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8003fe8:	e005      	b.n	8003ff6 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8003fea:	4b20      	ldr	r3, [pc, #128]	; (800406c <W25qxx_Init+0x19c>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e036      	b.n	8004064 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	; (800406c <W25qxx_Init+0x19c>)
 8003ff8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ffc:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	; (800406c <W25qxx_Init+0x19c>)
 8004000:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004004:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004006:	4b19      	ldr	r3, [pc, #100]	; (800406c <W25qxx_Init+0x19c>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	4a17      	ldr	r2, [pc, #92]	; (800406c <W25qxx_Init+0x19c>)
 800400e:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004010:	4b16      	ldr	r3, [pc, #88]	; (800406c <W25qxx_Init+0x19c>)
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	4a15      	ldr	r2, [pc, #84]	; (800406c <W25qxx_Init+0x19c>)
 8004016:	6912      	ldr	r2, [r2, #16]
 8004018:	fb02 f303 	mul.w	r3, r2, r3
 800401c:	4a13      	ldr	r2, [pc, #76]	; (800406c <W25qxx_Init+0x19c>)
 800401e:	8952      	ldrh	r2, [r2, #10]
 8004020:	fbb3 f3f2 	udiv	r3, r3, r2
 8004024:	4a11      	ldr	r2, [pc, #68]	; (800406c <W25qxx_Init+0x19c>)
 8004026:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004028:	4b10      	ldr	r3, [pc, #64]	; (800406c <W25qxx_Init+0x19c>)
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	4a0f      	ldr	r2, [pc, #60]	; (800406c <W25qxx_Init+0x19c>)
 8004030:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004032:	4b0e      	ldr	r3, [pc, #56]	; (800406c <W25qxx_Init+0x19c>)
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	4a0d      	ldr	r2, [pc, #52]	; (800406c <W25qxx_Init+0x19c>)
 8004038:	6912      	ldr	r2, [r2, #16]
 800403a:	fb02 f303 	mul.w	r3, r2, r3
 800403e:	0a9b      	lsrs	r3, r3, #10
 8004040:	4a0a      	ldr	r2, [pc, #40]	; (800406c <W25qxx_Init+0x19c>)
 8004042:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004044:	f7ff fe88 	bl	8003d58 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004048:	2001      	movs	r0, #1
 800404a:	f7ff fed1 	bl	8003df0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800404e:	2002      	movs	r0, #2
 8004050:	f7ff fece 	bl	8003df0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8004054:	2003      	movs	r0, #3
 8004056:	f7ff fecb 	bl	8003df0 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 800405a:	4b04      	ldr	r3, [pc, #16]	; (800406c <W25qxx_Init+0x19c>)
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004062:	2301      	movs	r3, #1
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	2000094c 	.word	0x2000094c
 8004070:	40020400 	.word	0x40020400

08004074 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 800407c:	e002      	b.n	8004084 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800407e:	2001      	movs	r0, #1
 8004080:	f000 fac8 	bl	8004614 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004084:	4b25      	ldr	r3, [pc, #148]	; (800411c <W25qxx_EraseSector+0xa8>)
 8004086:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800408a:	2b01      	cmp	r3, #1
 800408c:	d0f7      	beq.n	800407e <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800408e:	4b23      	ldr	r3, [pc, #140]	; (800411c <W25qxx_EraseSector+0xa8>)
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8004096:	f7ff fef1 	bl	8003e7c <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 800409a:	4b20      	ldr	r3, [pc, #128]	; (800411c <W25qxx_EraseSector+0xa8>)
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	fb02 f303 	mul.w	r3, r2, r3
 80040a4:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80040a6:	f7ff fe8d 	bl	8003dc4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80040aa:	2200      	movs	r2, #0
 80040ac:	2101      	movs	r1, #1
 80040ae:	481c      	ldr	r0, [pc, #112]	; (8004120 <W25qxx_EraseSector+0xac>)
 80040b0:	f001 fdae 	bl	8005c10 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <W25qxx_EraseSector+0xa8>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d909      	bls.n	80040d0 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 80040bc:	2021      	movs	r0, #33	; 0x21
 80040be:	f7ff fdff 	bl	8003cc0 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	0e1b      	lsrs	r3, r3, #24
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fdf9 	bl	8003cc0 <W25qxx_Spi>
 80040ce:	e002      	b.n	80040d6 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 80040d0:	2020      	movs	r0, #32
 80040d2:	f7ff fdf5 	bl	8003cc0 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff fdef 	bl	8003cc0 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	0a1b      	lsrs	r3, r3, #8
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fde9 	bl	8003cc0 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fde4 	bl	8003cc0 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80040f8:	2201      	movs	r2, #1
 80040fa:	2101      	movs	r1, #1
 80040fc:	4808      	ldr	r0, [pc, #32]	; (8004120 <W25qxx_EraseSector+0xac>)
 80040fe:	f001 fd87 	bl	8005c10 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004102:	f7ff febb 	bl	8003e7c <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8004106:	2001      	movs	r0, #1
 8004108:	f000 fa84 	bl	8004614 <HAL_Delay>
	w25qxx.Lock = 0;
 800410c:	4b03      	ldr	r3, [pc, #12]	; (800411c <W25qxx_EraseSector+0xa8>)
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	2000094c 	.word	0x2000094c
 8004120:	40020400 	.word	0x40020400

08004124 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <W25qxx_SectorToPage+0x28>)
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	fb02 f303 	mul.w	r3, r2, r3
 8004136:	4a05      	ldr	r2, [pc, #20]	; (800414c <W25qxx_SectorToPage+0x28>)
 8004138:	8952      	ldrh	r2, [r2, #10]
 800413a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	2000094c 	.word	0x2000094c

08004150 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800415e:	e002      	b.n	8004166 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004160:	2001      	movs	r0, #1
 8004162:	f000 fa57 	bl	8004614 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004166:	4b39      	ldr	r3, [pc, #228]	; (800424c <W25qxx_WritePage+0xfc>)
 8004168:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800416c:	2b01      	cmp	r3, #1
 800416e:	d0f7      	beq.n	8004160 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004170:	4b36      	ldr	r3, [pc, #216]	; (800424c <W25qxx_WritePage+0xfc>)
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	4a33      	ldr	r2, [pc, #204]	; (800424c <W25qxx_WritePage+0xfc>)
 8004180:	8952      	ldrh	r2, [r2, #10]
 8004182:	4293      	cmp	r3, r2
 8004184:	d802      	bhi.n	800418c <W25qxx_WritePage+0x3c>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800418c:	4b2f      	ldr	r3, [pc, #188]	; (800424c <W25qxx_WritePage+0xfc>)
 800418e:	895b      	ldrh	r3, [r3, #10]
 8004190:	461a      	mov	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	4413      	add	r3, r2
 800419e:	4a2b      	ldr	r2, [pc, #172]	; (800424c <W25qxx_WritePage+0xfc>)
 80041a0:	8952      	ldrh	r2, [r2, #10]
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d905      	bls.n	80041b2 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80041a6:	4b29      	ldr	r3, [pc, #164]	; (800424c <W25qxx_WritePage+0xfc>)
 80041a8:	895b      	ldrh	r3, [r3, #10]
 80041aa:	461a      	mov	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 80041b2:	f7ff fe63 	bl	8003e7c <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80041b6:	f7ff fe05 	bl	8003dc4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80041ba:	2200      	movs	r2, #0
 80041bc:	2101      	movs	r1, #1
 80041be:	4824      	ldr	r0, [pc, #144]	; (8004250 <W25qxx_WritePage+0x100>)
 80041c0:	f001 fd26 	bl	8005c10 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80041c4:	4b21      	ldr	r3, [pc, #132]	; (800424c <W25qxx_WritePage+0xfc>)
 80041c6:	895b      	ldrh	r3, [r3, #10]
 80041c8:	461a      	mov	r2, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	4413      	add	r3, r2
 80041d4:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80041d6:	4b1d      	ldr	r3, [pc, #116]	; (800424c <W25qxx_WritePage+0xfc>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d909      	bls.n	80041f2 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 80041de:	2012      	movs	r0, #18
 80041e0:	f7ff fd6e 	bl	8003cc0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	0e1b      	lsrs	r3, r3, #24
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fd68 	bl	8003cc0 <W25qxx_Spi>
 80041f0:	e002      	b.n	80041f8 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 80041f2:	2002      	movs	r0, #2
 80041f4:	f7ff fd64 	bl	8003cc0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	0c1b      	lsrs	r3, r3, #16
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fd5e 	bl	8003cc0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	b2db      	uxtb	r3, r3
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff fd58 	bl	8003cc0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fd53 	bl	8003cc0 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	b29a      	uxth	r2, r3
 800421e:	2364      	movs	r3, #100	; 0x64
 8004220:	68f9      	ldr	r1, [r7, #12]
 8004222:	480c      	ldr	r0, [pc, #48]	; (8004254 <W25qxx_WritePage+0x104>)
 8004224:	f002 fea7 	bl	8006f76 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004228:	2201      	movs	r2, #1
 800422a:	2101      	movs	r1, #1
 800422c:	4808      	ldr	r0, [pc, #32]	; (8004250 <W25qxx_WritePage+0x100>)
 800422e:	f001 fcef 	bl	8005c10 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004232:	f7ff fe23 	bl	8003e7c <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8004236:	2001      	movs	r0, #1
 8004238:	f000 f9ec 	bl	8004614 <HAL_Delay>
	w25qxx.Lock = 0;
 800423c:	4b03      	ldr	r3, [pc, #12]	; (800424c <W25qxx_WritePage+0xfc>)
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	2000094c 	.word	0x2000094c
 8004250:	40020400 	.word	0x40020400
 8004254:	20000344 	.word	0x20000344

08004258 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004266:	4b2c      	ldr	r3, [pc, #176]	; (8004318 <W25qxx_WriteSector+0xc0>)
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d802      	bhi.n	8004276 <W25qxx_WriteSector+0x1e>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004276:	4b28      	ldr	r3, [pc, #160]	; (8004318 <W25qxx_WriteSector+0xc0>)
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800427c:	4b26      	ldr	r3, [pc, #152]	; (8004318 <W25qxx_WriteSector+0xc0>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	429a      	cmp	r2, r3
 8004284:	d243      	bcs.n	800430e <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	441a      	add	r2, r3
 800428c:	4b22      	ldr	r3, [pc, #136]	; (8004318 <W25qxx_WriteSector+0xc0>)
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	429a      	cmp	r2, r3
 8004292:	d905      	bls.n	80042a0 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004294:	4b20      	ldr	r3, [pc, #128]	; (8004318 <W25qxx_WriteSector+0xc0>)
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	e001      	b.n	80042a4 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80042a4:	68b8      	ldr	r0, [r7, #8]
 80042a6:	f7ff ff3d 	bl	8004124 <W25qxx_SectorToPage>
 80042aa:	4602      	mov	r2, r0
 80042ac:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <W25qxx_WriteSector+0xc0>)
 80042ae:	895b      	ldrh	r3, [r3, #10]
 80042b0:	4619      	mov	r1, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80042b8:	4413      	add	r3, r2
 80042ba:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80042bc:	4b16      	ldr	r3, [pc, #88]	; (8004318 <W25qxx_WriteSector+0xc0>)
 80042be:	895b      	ldrh	r3, [r3, #10]
 80042c0:	461a      	mov	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80042c8:	fb01 f202 	mul.w	r2, r1, r2
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	69f9      	ldr	r1, [r7, #28]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f7ff ff3a 	bl	8004150 <W25qxx_WritePage>
		StartPage++;
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	3301      	adds	r3, #1
 80042e0:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80042e2:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <W25qxx_WriteSector+0xc0>)
 80042e4:	895b      	ldrh	r3, [r3, #10]
 80042e6:	461a      	mov	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	1a9a      	subs	r2, r3, r2
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	4413      	add	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <W25qxx_WriteSector+0xc0>)
 80042f4:	895b      	ldrh	r3, [r3, #10]
 80042f6:	461a      	mov	r2, r3
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4413      	add	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	2b00      	cmp	r3, #0
 800430a:	dce1      	bgt.n	80042d0 <W25qxx_WriteSector+0x78>
 800430c:	e000      	b.n	8004310 <W25qxx_WriteSector+0xb8>
		return;
 800430e:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	2000094c 	.word	0x2000094c

0800431c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800432a:	e002      	b.n	8004332 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800432c:	2001      	movs	r0, #1
 800432e:	f000 f971 	bl	8004614 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004332:	4b36      	ldr	r3, [pc, #216]	; (800440c <W25qxx_ReadPage+0xf0>)
 8004334:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004338:	2b01      	cmp	r3, #1
 800433a:	d0f7      	beq.n	800432c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800433c:	4b33      	ldr	r3, [pc, #204]	; (800440c <W25qxx_ReadPage+0xf0>)
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004344:	4b31      	ldr	r3, [pc, #196]	; (800440c <W25qxx_ReadPage+0xf0>)
 8004346:	895b      	ldrh	r3, [r3, #10]
 8004348:	461a      	mov	r2, r3
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	4293      	cmp	r3, r2
 800434e:	d802      	bhi.n	8004356 <W25qxx_ReadPage+0x3a>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004356:	4b2d      	ldr	r3, [pc, #180]	; (800440c <W25qxx_ReadPage+0xf0>)
 8004358:	895b      	ldrh	r3, [r3, #10]
 800435a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	4413      	add	r3, r2
 8004362:	4a2a      	ldr	r2, [pc, #168]	; (800440c <W25qxx_ReadPage+0xf0>)
 8004364:	8952      	ldrh	r2, [r2, #10]
 8004366:	4293      	cmp	r3, r2
 8004368:	d905      	bls.n	8004376 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800436a:	4b28      	ldr	r3, [pc, #160]	; (800440c <W25qxx_ReadPage+0xf0>)
 800436c:	895b      	ldrh	r3, [r3, #10]
 800436e:	461a      	mov	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004376:	4b25      	ldr	r3, [pc, #148]	; (800440c <W25qxx_ReadPage+0xf0>)
 8004378:	895b      	ldrh	r3, [r3, #10]
 800437a:	461a      	mov	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004388:	2200      	movs	r2, #0
 800438a:	2101      	movs	r1, #1
 800438c:	4820      	ldr	r0, [pc, #128]	; (8004410 <W25qxx_ReadPage+0xf4>)
 800438e:	f001 fc3f 	bl	8005c10 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004392:	4b1e      	ldr	r3, [pc, #120]	; (800440c <W25qxx_ReadPage+0xf0>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b08      	cmp	r3, #8
 8004398:	d909      	bls.n	80043ae <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 800439a:	200c      	movs	r0, #12
 800439c:	f7ff fc90 	bl	8003cc0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	0e1b      	lsrs	r3, r3, #24
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fc8a 	bl	8003cc0 <W25qxx_Spi>
 80043ac:	e002      	b.n	80043b4 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80043ae:	200b      	movs	r0, #11
 80043b0:	f7ff fc86 	bl	8003cc0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	0c1b      	lsrs	r3, r3, #16
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff fc80 	bl	8003cc0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff fc7a 	bl	8003cc0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fc75 	bl	8003cc0 <W25qxx_Spi>
	W25qxx_Spi(0);
 80043d6:	2000      	movs	r0, #0
 80043d8:	f7ff fc72 	bl	8003cc0 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	b29a      	uxth	r2, r3
 80043e0:	2364      	movs	r3, #100	; 0x64
 80043e2:	68f9      	ldr	r1, [r7, #12]
 80043e4:	480b      	ldr	r0, [pc, #44]	; (8004414 <W25qxx_ReadPage+0xf8>)
 80043e6:	f002 ff02 	bl	80071ee <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80043ea:	2201      	movs	r2, #1
 80043ec:	2101      	movs	r1, #1
 80043ee:	4808      	ldr	r0, [pc, #32]	; (8004410 <W25qxx_ReadPage+0xf4>)
 80043f0:	f001 fc0e 	bl	8005c10 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80043f4:	2001      	movs	r0, #1
 80043f6:	f000 f90d 	bl	8004614 <HAL_Delay>
	w25qxx.Lock = 0;
 80043fa:	4b04      	ldr	r3, [pc, #16]	; (800440c <W25qxx_ReadPage+0xf0>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	2000094c 	.word	0x2000094c
 8004410:	40020400 	.word	0x40020400
 8004414:	20000344 	.word	0x20000344

08004418 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004426:	4b2c      	ldr	r3, [pc, #176]	; (80044d8 <W25qxx_ReadSector+0xc0>)
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d802      	bhi.n	8004436 <W25qxx_ReadSector+0x1e>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d102      	bne.n	800443c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004436:	4b28      	ldr	r3, [pc, #160]	; (80044d8 <W25qxx_ReadSector+0xc0>)
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800443c:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <W25qxx_ReadSector+0xc0>)
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	429a      	cmp	r2, r3
 8004444:	d243      	bcs.n	80044ce <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	441a      	add	r2, r3
 800444c:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <W25qxx_ReadSector+0xc0>)
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	429a      	cmp	r2, r3
 8004452:	d905      	bls.n	8004460 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004454:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <W25qxx_ReadSector+0xc0>)
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	e001      	b.n	8004464 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004464:	68b8      	ldr	r0, [r7, #8]
 8004466:	f7ff fe5d 	bl	8004124 <W25qxx_SectorToPage>
 800446a:	4602      	mov	r2, r0
 800446c:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <W25qxx_ReadSector+0xc0>)
 800446e:	895b      	ldrh	r3, [r3, #10]
 8004470:	4619      	mov	r1, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	fbb3 f3f1 	udiv	r3, r3, r1
 8004478:	4413      	add	r3, r2
 800447a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800447c:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <W25qxx_ReadSector+0xc0>)
 800447e:	895b      	ldrh	r3, [r3, #10]
 8004480:	461a      	mov	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	fbb3 f1f2 	udiv	r1, r3, r2
 8004488:	fb01 f202 	mul.w	r2, r1, r2
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	69f9      	ldr	r1, [r7, #28]
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f7ff ff40 	bl	800431c <W25qxx_ReadPage>
		StartPage++;
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	3301      	adds	r3, #1
 80044a0:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80044a2:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <W25qxx_ReadSector+0xc0>)
 80044a4:	895b      	ldrh	r3, [r3, #10]
 80044a6:	461a      	mov	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	1a9a      	subs	r2, r3, r2
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	4413      	add	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <W25qxx_ReadSector+0xc0>)
 80044b4:	895b      	ldrh	r3, [r3, #10]
 80044b6:	461a      	mov	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	dce1      	bgt.n	8004490 <W25qxx_ReadSector+0x78>
 80044cc:	e000      	b.n	80044d0 <W25qxx_ReadSector+0xb8>
		return;
 80044ce:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80044d0:	3720      	adds	r7, #32
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	2000094c 	.word	0x2000094c

080044dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044e0:	480d      	ldr	r0, [pc, #52]	; (8004518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044e2:	490e      	ldr	r1, [pc, #56]	; (800451c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044e4:	4a0e      	ldr	r2, [pc, #56]	; (8004520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044e8:	e002      	b.n	80044f0 <LoopCopyDataInit>

080044ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044ee:	3304      	adds	r3, #4

080044f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044f4:	d3f9      	bcc.n	80044ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044f6:	4a0b      	ldr	r2, [pc, #44]	; (8004524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044f8:	4c0b      	ldr	r4, [pc, #44]	; (8004528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80044fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044fc:	e001      	b.n	8004502 <LoopFillZerobss>

080044fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004500:	3204      	adds	r2, #4

08004502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004504:	d3fb      	bcc.n	80044fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004506:	f7ff fbc9 	bl	8003c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800450a:	f005 fa7b 	bl	8009a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800450e:	f7fe fd41 	bl	8002f94 <main>
  bx  lr    
 8004512:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800451c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8004520:	0800e9b8 	.word	0x0800e9b8
  ldr r2, =_sbss
 8004524:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004528:	2000099c 	.word	0x2000099c

0800452c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800452c:	e7fe      	b.n	800452c <ADC_IRQHandler>
	...

08004530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004534:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <HAL_Init+0x40>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a0d      	ldr	r2, [pc, #52]	; (8004570 <HAL_Init+0x40>)
 800453a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800453e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_Init+0x40>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <HAL_Init+0x40>)
 8004546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800454a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800454c:	4b08      	ldr	r3, [pc, #32]	; (8004570 <HAL_Init+0x40>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a07      	ldr	r2, [pc, #28]	; (8004570 <HAL_Init+0x40>)
 8004552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004558:	2003      	movs	r0, #3
 800455a:	f000 fd61 	bl	8005020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800455e:	200f      	movs	r0, #15
 8004560:	f000 f808 	bl	8004574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004564:	f7ff f85a 	bl	800361c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40023c00 	.word	0x40023c00

08004574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800457c:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <HAL_InitTick+0x54>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_InitTick+0x58>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	4619      	mov	r1, r3
 8004586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800458a:	fbb3 f3f1 	udiv	r3, r3, r1
 800458e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fd79 	bl	800508a <HAL_SYSTICK_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e00e      	b.n	80045c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b0f      	cmp	r3, #15
 80045a6:	d80a      	bhi.n	80045be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045a8:	2200      	movs	r2, #0
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295
 80045b0:	f000 fd41 	bl	8005036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045b4:	4a06      	ldr	r2, [pc, #24]	; (80045d0 <HAL_InitTick+0x5c>)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e000      	b.n	80045c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000004 	.word	0x20000004
 80045cc:	2000000c 	.word	0x2000000c
 80045d0:	20000008 	.word	0x20000008

080045d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <HAL_IncTick+0x20>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_IncTick+0x24>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4413      	add	r3, r2
 80045e4:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <HAL_IncTick+0x24>)
 80045e6:	6013      	str	r3, [r2, #0]
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	2000000c 	.word	0x2000000c
 80045f8:	20000974 	.word	0x20000974

080045fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <HAL_GetTick+0x14>)
 8004602:	681b      	ldr	r3, [r3, #0]
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000974 	.word	0x20000974

08004614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800461c:	f7ff ffee 	bl	80045fc <HAL_GetTick>
 8004620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462c:	d005      	beq.n	800463a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <HAL_Delay+0x44>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800463a:	bf00      	nop
 800463c:	f7ff ffde 	bl	80045fc <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	429a      	cmp	r2, r3
 800464a:	d8f7      	bhi.n	800463c <HAL_Delay+0x28>
  {
  }
}
 800464c:	bf00      	nop
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	2000000c 	.word	0x2000000c

0800465c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e033      	b.n	80046da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fe fff6 	bl	800366c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f003 0310 	and.w	r3, r3, #16
 8004696:	2b00      	cmp	r3, #0
 8004698:	d118      	bne.n	80046cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80046a2:	f023 0302 	bic.w	r3, r3, #2
 80046a6:	f043 0202 	orr.w	r2, r3, #2
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fa68 	bl	8004b84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	f043 0201 	orr.w	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	641a      	str	r2, [r3, #64]	; 0x40
 80046ca:	e001      	b.n	80046d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_ADC_Start_DMA+0x1e>
 80046fe:	2302      	movs	r3, #2
 8004700:	e0e9      	b.n	80048d6 <HAL_ADC_Start_DMA+0x1f2>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b01      	cmp	r3, #1
 8004716:	d018      	beq.n	800474a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004728:	4b6d      	ldr	r3, [pc, #436]	; (80048e0 <HAL_ADC_Start_DMA+0x1fc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a6d      	ldr	r2, [pc, #436]	; (80048e4 <HAL_ADC_Start_DMA+0x200>)
 800472e:	fba2 2303 	umull	r2, r3, r2, r3
 8004732:	0c9a      	lsrs	r2, r3, #18
 8004734:	4613      	mov	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800473c:	e002      	b.n	8004744 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	3b01      	subs	r3, #1
 8004742:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f9      	bne.n	800473e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004758:	d107      	bne.n	800476a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004768:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b01      	cmp	r3, #1
 8004776:	f040 80a1 	bne.w	80048bc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004798:	2b00      	cmp	r3, #0
 800479a:	d007      	beq.n	80047ac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b8:	d106      	bne.n	80047c8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	f023 0206 	bic.w	r2, r3, #6
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	645a      	str	r2, [r3, #68]	; 0x44
 80047c6:	e002      	b.n	80047ce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047d6:	4b44      	ldr	r3, [pc, #272]	; (80048e8 <HAL_ADC_Start_DMA+0x204>)
 80047d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	4a43      	ldr	r2, [pc, #268]	; (80048ec <HAL_ADC_Start_DMA+0x208>)
 80047e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	4a42      	ldr	r2, [pc, #264]	; (80048f0 <HAL_ADC_Start_DMA+0x20c>)
 80047e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	4a41      	ldr	r2, [pc, #260]	; (80048f4 <HAL_ADC_Start_DMA+0x210>)
 80047f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80047fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800480a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800481a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	334c      	adds	r3, #76	; 0x4c
 8004826:	4619      	mov	r1, r3
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f000 fce8 	bl	8005200 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	2b00      	cmp	r3, #0
 800483a:	d12a      	bne.n	8004892 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a2d      	ldr	r2, [pc, #180]	; (80048f8 <HAL_ADC_Start_DMA+0x214>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d015      	beq.n	8004872 <HAL_ADC_Start_DMA+0x18e>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a2c      	ldr	r2, [pc, #176]	; (80048fc <HAL_ADC_Start_DMA+0x218>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d105      	bne.n	800485c <HAL_ADC_Start_DMA+0x178>
 8004850:	4b25      	ldr	r3, [pc, #148]	; (80048e8 <HAL_ADC_Start_DMA+0x204>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a27      	ldr	r2, [pc, #156]	; (8004900 <HAL_ADC_Start_DMA+0x21c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d136      	bne.n	80048d4 <HAL_ADC_Start_DMA+0x1f0>
 8004866:	4b20      	ldr	r3, [pc, #128]	; (80048e8 <HAL_ADC_Start_DMA+0x204>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 0310 	and.w	r3, r3, #16
 800486e:	2b00      	cmp	r3, #0
 8004870:	d130      	bne.n	80048d4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d129      	bne.n	80048d4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	e020      	b.n	80048d4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a18      	ldr	r2, [pc, #96]	; (80048f8 <HAL_ADC_Start_DMA+0x214>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d11b      	bne.n	80048d4 <HAL_ADC_Start_DMA+0x1f0>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d114      	bne.n	80048d4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048b8:	609a      	str	r2, [r3, #8]
 80048ba:	e00b      	b.n	80048d4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	f043 0210 	orr.w	r2, r3, #16
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	f043 0201 	orr.w	r2, r3, #1
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000004 	.word	0x20000004
 80048e4:	431bde83 	.word	0x431bde83
 80048e8:	40012300 	.word	0x40012300
 80048ec:	08004d7d 	.word	0x08004d7d
 80048f0:	08004e37 	.word	0x08004e37
 80048f4:	08004e53 	.word	0x08004e53
 80048f8:	40012000 	.word	0x40012000
 80048fc:	40012100 	.word	0x40012100
 8004900:	40012200 	.word	0x40012200

08004904 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_ADC_ConfigChannel+0x1c>
 8004958:	2302      	movs	r3, #2
 800495a:	e105      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x228>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b09      	cmp	r3, #9
 800496a:	d925      	bls.n	80049b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68d9      	ldr	r1, [r3, #12]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	b29b      	uxth	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	4613      	mov	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4413      	add	r3, r2
 8004980:	3b1e      	subs	r3, #30
 8004982:	2207      	movs	r2, #7
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	43da      	mvns	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	400a      	ands	r2, r1
 8004990:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68d9      	ldr	r1, [r3, #12]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	4618      	mov	r0, r3
 80049a4:	4603      	mov	r3, r0
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	4403      	add	r3, r0
 80049aa:	3b1e      	subs	r3, #30
 80049ac:	409a      	lsls	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	60da      	str	r2, [r3, #12]
 80049b6:	e022      	b.n	80049fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6919      	ldr	r1, [r3, #16]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	4613      	mov	r3, r2
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	4413      	add	r3, r2
 80049cc:	2207      	movs	r2, #7
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43da      	mvns	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	400a      	ands	r2, r1
 80049da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6919      	ldr	r1, [r3, #16]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	4618      	mov	r0, r3
 80049ee:	4603      	mov	r3, r0
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	4403      	add	r3, r0
 80049f4:	409a      	lsls	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b06      	cmp	r3, #6
 8004a04:	d824      	bhi.n	8004a50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	3b05      	subs	r3, #5
 8004a18:	221f      	movs	r2, #31
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	400a      	ands	r2, r1
 8004a26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	4618      	mov	r0, r3
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	3b05      	subs	r3, #5
 8004a42:	fa00 f203 	lsl.w	r2, r0, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8004a4e:	e04c      	b.n	8004aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b0c      	cmp	r3, #12
 8004a56:	d824      	bhi.n	8004aa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	3b23      	subs	r3, #35	; 0x23
 8004a6a:	221f      	movs	r2, #31
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	43da      	mvns	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	400a      	ands	r2, r1
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	4618      	mov	r0, r3
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	3b23      	subs	r3, #35	; 0x23
 8004a94:	fa00 f203 	lsl.w	r2, r0, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8004aa0:	e023      	b.n	8004aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3b41      	subs	r3, #65	; 0x41
 8004ab4:	221f      	movs	r2, #31
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	43da      	mvns	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	400a      	ands	r2, r1
 8004ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	3b41      	subs	r3, #65	; 0x41
 8004ade:	fa00 f203 	lsl.w	r2, r0, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004aea:	4b22      	ldr	r3, [pc, #136]	; (8004b74 <HAL_ADC_ConfigChannel+0x234>)
 8004aec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a21      	ldr	r2, [pc, #132]	; (8004b78 <HAL_ADC_ConfigChannel+0x238>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d109      	bne.n	8004b0c <HAL_ADC_ConfigChannel+0x1cc>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b12      	cmp	r3, #18
 8004afe:	d105      	bne.n	8004b0c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a19      	ldr	r2, [pc, #100]	; (8004b78 <HAL_ADC_ConfigChannel+0x238>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d123      	bne.n	8004b5e <HAL_ADC_ConfigChannel+0x21e>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b10      	cmp	r3, #16
 8004b1c:	d003      	beq.n	8004b26 <HAL_ADC_ConfigChannel+0x1e6>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b11      	cmp	r3, #17
 8004b24:	d11b      	bne.n	8004b5e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b10      	cmp	r3, #16
 8004b38:	d111      	bne.n	8004b5e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b3a:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <HAL_ADC_ConfigChannel+0x23c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a10      	ldr	r2, [pc, #64]	; (8004b80 <HAL_ADC_ConfigChannel+0x240>)
 8004b40:	fba2 2303 	umull	r2, r3, r2, r3
 8004b44:	0c9a      	lsrs	r2, r3, #18
 8004b46:	4613      	mov	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b50:	e002      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f9      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40012300 	.word	0x40012300
 8004b78:	40012000 	.word	0x40012000
 8004b7c:	20000004 	.word	0x20000004
 8004b80:	431bde83 	.word	0x431bde83

08004b84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b8c:	4b79      	ldr	r3, [pc, #484]	; (8004d74 <ADC_Init+0x1f0>)
 8004b8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6859      	ldr	r1, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	021a      	lsls	r2, r3, #8
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6859      	ldr	r1, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6899      	ldr	r1, [r3, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	4a58      	ldr	r2, [pc, #352]	; (8004d78 <ADC_Init+0x1f4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d022      	beq.n	8004c62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6899      	ldr	r1, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6899      	ldr	r1, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	e00f      	b.n	8004c82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0202 	bic.w	r2, r2, #2
 8004c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6899      	ldr	r1, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	7e1b      	ldrb	r3, [r3, #24]
 8004c9c:	005a      	lsls	r2, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01b      	beq.n	8004ce8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004cce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6859      	ldr	r1, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	035a      	lsls	r2, r3, #13
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
 8004ce6:	e007      	b.n	8004cf8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004d06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	051a      	lsls	r2, r3, #20
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6899      	ldr	r1, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d3a:	025a      	lsls	r2, r3, #9
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6899      	ldr	r1, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	029a      	lsls	r2, r3, #10
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	609a      	str	r2, [r3, #8]
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40012300 	.word	0x40012300
 8004d78:	0f000001 	.word	0x0f000001

08004d7c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d13c      	bne.n	8004e10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d12b      	bne.n	8004e08 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d127      	bne.n	8004e08 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d006      	beq.n	8004dd4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d119      	bne.n	8004e08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0220 	bic.w	r2, r2, #32
 8004de2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d105      	bne.n	8004e08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	f043 0201 	orr.w	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7ff fd7b 	bl	8004904 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e0e:	e00e      	b.n	8004e2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f7ff fd85 	bl	800492c <HAL_ADC_ErrorCallback>
}
 8004e22:	e004      	b.n	8004e2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	4798      	blx	r3
}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7ff fd67 	bl	8004918 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2240      	movs	r2, #64	; 0x40
 8004e64:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6a:	f043 0204 	orr.w	r2, r3, #4
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff fd5a 	bl	800492c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e90:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004eb2:	4a04      	ldr	r2, [pc, #16]	; (8004ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	60d3      	str	r3, [r2, #12]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	e000ed00 	.word	0xe000ed00

08004ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ecc:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	0a1b      	lsrs	r3, r3, #8
 8004ed2:	f003 0307 	and.w	r3, r3, #7
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	e000ed00 	.word	0xe000ed00

08004ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	db0b      	blt.n	8004f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	f003 021f 	and.w	r2, r3, #31
 8004efc:	4907      	ldr	r1, [pc, #28]	; (8004f1c <__NVIC_EnableIRQ+0x38>)
 8004efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	2001      	movs	r0, #1
 8004f06:	fa00 f202 	lsl.w	r2, r0, r2
 8004f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	e000e100 	.word	0xe000e100

08004f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	6039      	str	r1, [r7, #0]
 8004f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	db0a      	blt.n	8004f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	490c      	ldr	r1, [pc, #48]	; (8004f6c <__NVIC_SetPriority+0x4c>)
 8004f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3e:	0112      	lsls	r2, r2, #4
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	440b      	add	r3, r1
 8004f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f48:	e00a      	b.n	8004f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	4908      	ldr	r1, [pc, #32]	; (8004f70 <__NVIC_SetPriority+0x50>)
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	3b04      	subs	r3, #4
 8004f58:	0112      	lsls	r2, r2, #4
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	761a      	strb	r2, [r3, #24]
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	e000e100 	.word	0xe000e100
 8004f70:	e000ed00 	.word	0xe000ed00

08004f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b089      	sub	sp, #36	; 0x24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f1c3 0307 	rsb	r3, r3, #7
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	bf28      	it	cs
 8004f92:	2304      	movcs	r3, #4
 8004f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	2b06      	cmp	r3, #6
 8004f9c:	d902      	bls.n	8004fa4 <NVIC_EncodePriority+0x30>
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3b03      	subs	r3, #3
 8004fa2:	e000      	b.n	8004fa6 <NVIC_EncodePriority+0x32>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	43da      	mvns	r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	401a      	ands	r2, r3
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc6:	43d9      	mvns	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fcc:	4313      	orrs	r3, r2
         );
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3724      	adds	r7, #36	; 0x24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fec:	d301      	bcc.n	8004ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e00f      	b.n	8005012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ff2:	4a0a      	ldr	r2, [pc, #40]	; (800501c <SysTick_Config+0x40>)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ffa:	210f      	movs	r1, #15
 8004ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8005000:	f7ff ff8e 	bl	8004f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <SysTick_Config+0x40>)
 8005006:	2200      	movs	r2, #0
 8005008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800500a:	4b04      	ldr	r3, [pc, #16]	; (800501c <SysTick_Config+0x40>)
 800500c:	2207      	movs	r2, #7
 800500e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	e000e010 	.word	0xe000e010

08005020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff ff29 	bl	8004e80 <__NVIC_SetPriorityGrouping>
}
 800502e:	bf00      	nop
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005036:	b580      	push	{r7, lr}
 8005038:	b086      	sub	sp, #24
 800503a:	af00      	add	r7, sp, #0
 800503c:	4603      	mov	r3, r0
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	607a      	str	r2, [r7, #4]
 8005042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005048:	f7ff ff3e 	bl	8004ec8 <__NVIC_GetPriorityGrouping>
 800504c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	68b9      	ldr	r1, [r7, #8]
 8005052:	6978      	ldr	r0, [r7, #20]
 8005054:	f7ff ff8e 	bl	8004f74 <NVIC_EncodePriority>
 8005058:	4602      	mov	r2, r0
 800505a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff ff5d 	bl	8004f20 <__NVIC_SetPriority>
}
 8005066:	bf00      	nop
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	4603      	mov	r3, r0
 8005076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff ff31 	bl	8004ee4 <__NVIC_EnableIRQ>
}
 8005082:	bf00      	nop
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b082      	sub	sp, #8
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff ffa2 	bl	8004fdc <SysTick_Config>
 8005098:	4603      	mov	r3, r0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050b0:	f7ff faa4 	bl	80045fc <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e099      	b.n	80051f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0201 	bic.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050e0:	e00f      	b.n	8005102 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050e2:	f7ff fa8b 	bl	80045fc <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b05      	cmp	r3, #5
 80050ee:	d908      	bls.n	8005102 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2203      	movs	r2, #3
 80050fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e078      	b.n	80051f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e8      	bne.n	80050e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4b38      	ldr	r3, [pc, #224]	; (80051fc <HAL_DMA_Init+0x158>)
 800511c:	4013      	ands	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800512e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800513a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005146:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	2b04      	cmp	r3, #4
 800515a:	d107      	bne.n	800516c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005164:	4313      	orrs	r3, r2
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f023 0307 	bic.w	r3, r3, #7
 8005182:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	2b04      	cmp	r3, #4
 8005194:	d117      	bne.n	80051c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00e      	beq.n	80051c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fb01 	bl	80057b0 <DMA_CheckFifoParam>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2240      	movs	r2, #64	; 0x40
 80051b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80051c2:	2301      	movs	r3, #1
 80051c4:	e016      	b.n	80051f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fab8 	bl	8005744 <DMA_CalcBaseAndBitshift>
 80051d4:	4603      	mov	r3, r0
 80051d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051dc:	223f      	movs	r2, #63	; 0x3f
 80051de:	409a      	lsls	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	f010803f 	.word	0xf010803f

08005200 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005216:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_DMA_Start_IT+0x26>
 8005222:	2302      	movs	r3, #2
 8005224:	e040      	b.n	80052a8 <HAL_DMA_Start_IT+0xa8>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b01      	cmp	r3, #1
 8005238:	d12f      	bne.n	800529a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2202      	movs	r2, #2
 800523e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fa4a 	bl	80056e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005258:	223f      	movs	r2, #63	; 0x3f
 800525a:	409a      	lsls	r2, r3
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0216 	orr.w	r2, r2, #22
 800526e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0208 	orr.w	r2, r2, #8
 8005286:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	e005      	b.n	80052a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80052a2:	2302      	movs	r3, #2
 80052a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80052a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80052be:	f7ff f99d 	bl	80045fc <HAL_GetTick>
 80052c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d008      	beq.n	80052e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2280      	movs	r2, #128	; 0x80
 80052d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e052      	b.n	8005388 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0216 	bic.w	r2, r2, #22
 80052f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005300:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	2b00      	cmp	r3, #0
 8005308:	d103      	bne.n	8005312 <HAL_DMA_Abort+0x62>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800530e:	2b00      	cmp	r3, #0
 8005310:	d007      	beq.n	8005322 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0208 	bic.w	r2, r2, #8
 8005320:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0201 	bic.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005332:	e013      	b.n	800535c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005334:	f7ff f962 	bl	80045fc <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b05      	cmp	r3, #5
 8005340:	d90c      	bls.n	800535c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2203      	movs	r2, #3
 800534c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e015      	b.n	8005388 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e4      	bne.n	8005334 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536e:	223f      	movs	r2, #63	; 0x3f
 8005370:	409a      	lsls	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d004      	beq.n	80053ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2280      	movs	r2, #128	; 0x80
 80053a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e00c      	b.n	80053c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2205      	movs	r2, #5
 80053b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0201 	bic.w	r2, r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053e0:	4b8e      	ldr	r3, [pc, #568]	; (800561c <HAL_DMA_IRQHandler+0x248>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a8e      	ldr	r2, [pc, #568]	; (8005620 <HAL_DMA_IRQHandler+0x24c>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	0a9b      	lsrs	r3, r3, #10
 80053ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fe:	2208      	movs	r2, #8
 8005400:	409a      	lsls	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4013      	ands	r3, r2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d01a      	beq.n	8005440 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d013      	beq.n	8005440 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0204 	bic.w	r2, r2, #4
 8005426:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542c:	2208      	movs	r2, #8
 800542e:	409a      	lsls	r2, r3
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005438:	f043 0201 	orr.w	r2, r3, #1
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005444:	2201      	movs	r2, #1
 8005446:	409a      	lsls	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d012      	beq.n	8005476 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00b      	beq.n	8005476 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005462:	2201      	movs	r2, #1
 8005464:	409a      	lsls	r2, r3
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	f043 0202 	orr.w	r2, r3, #2
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547a:	2204      	movs	r2, #4
 800547c:	409a      	lsls	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4013      	ands	r3, r2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d012      	beq.n	80054ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00b      	beq.n	80054ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005498:	2204      	movs	r2, #4
 800549a:	409a      	lsls	r2, r3
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a4:	f043 0204 	orr.w	r2, r3, #4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b0:	2210      	movs	r2, #16
 80054b2:	409a      	lsls	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4013      	ands	r3, r2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d043      	beq.n	8005544 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d03c      	beq.n	8005544 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ce:	2210      	movs	r2, #16
 80054d0:	409a      	lsls	r2, r3
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d018      	beq.n	8005516 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d108      	bne.n	8005504 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d024      	beq.n	8005544 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	4798      	blx	r3
 8005502:	e01f      	b.n	8005544 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01b      	beq.n	8005544 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	4798      	blx	r3
 8005514:	e016      	b.n	8005544 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005520:	2b00      	cmp	r3, #0
 8005522:	d107      	bne.n	8005534 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0208 	bic.w	r2, r2, #8
 8005532:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005548:	2220      	movs	r2, #32
 800554a:	409a      	lsls	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4013      	ands	r3, r2
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 808f 	beq.w	8005674 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8087 	beq.w	8005674 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556a:	2220      	movs	r2, #32
 800556c:	409a      	lsls	r2, r3
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b05      	cmp	r3, #5
 800557c:	d136      	bne.n	80055ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0216 	bic.w	r2, r2, #22
 800558c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800559c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d103      	bne.n	80055ae <HAL_DMA_IRQHandler+0x1da>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d007      	beq.n	80055be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0208 	bic.w	r2, r2, #8
 80055bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c2:	223f      	movs	r2, #63	; 0x3f
 80055c4:	409a      	lsls	r2, r3
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d07e      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
        }
        return;
 80055ea:	e079      	b.n	80056e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d01d      	beq.n	8005636 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10d      	bne.n	8005624 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560c:	2b00      	cmp	r3, #0
 800560e:	d031      	beq.n	8005674 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	4798      	blx	r3
 8005618:	e02c      	b.n	8005674 <HAL_DMA_IRQHandler+0x2a0>
 800561a:	bf00      	nop
 800561c:	20000004 	.word	0x20000004
 8005620:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d023      	beq.n	8005674 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	4798      	blx	r3
 8005634:	e01e      	b.n	8005674 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10f      	bne.n	8005664 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0210 	bic.w	r2, r2, #16
 8005652:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005678:	2b00      	cmp	r3, #0
 800567a:	d032      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d022      	beq.n	80056ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2205      	movs	r2, #5
 800568c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0201 	bic.w	r2, r2, #1
 800569e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	3301      	adds	r3, #1
 80056a4:	60bb      	str	r3, [r7, #8]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d307      	bcc.n	80056bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1f2      	bne.n	80056a0 <HAL_DMA_IRQHandler+0x2cc>
 80056ba:	e000      	b.n	80056be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4798      	blx	r3
 80056de:	e000      	b.n	80056e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80056e0:	bf00      	nop
    }
  }
}
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005704:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b40      	cmp	r3, #64	; 0x40
 8005714:	d108      	bne.n	8005728 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005726:	e007      	b.n	8005738 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	60da      	str	r2, [r3, #12]
}
 8005738:	bf00      	nop
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	3b10      	subs	r3, #16
 8005754:	4a14      	ldr	r2, [pc, #80]	; (80057a8 <DMA_CalcBaseAndBitshift+0x64>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	091b      	lsrs	r3, r3, #4
 800575c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800575e:	4a13      	ldr	r2, [pc, #76]	; (80057ac <DMA_CalcBaseAndBitshift+0x68>)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b03      	cmp	r3, #3
 8005770:	d909      	bls.n	8005786 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	1d1a      	adds	r2, r3, #4
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	659a      	str	r2, [r3, #88]	; 0x58
 8005784:	e007      	b.n	8005796 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800578e:	f023 0303 	bic.w	r3, r3, #3
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	aaaaaaab 	.word	0xaaaaaaab
 80057ac:	0800e4f4 	.word	0x0800e4f4

080057b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d11f      	bne.n	800580a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d856      	bhi.n	800587e <DMA_CheckFifoParam+0xce>
 80057d0:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <DMA_CheckFifoParam+0x28>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	080057e9 	.word	0x080057e9
 80057dc:	080057fb 	.word	0x080057fb
 80057e0:	080057e9 	.word	0x080057e9
 80057e4:	0800587f 	.word	0x0800587f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d046      	beq.n	8005882 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f8:	e043      	b.n	8005882 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005802:	d140      	bne.n	8005886 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005808:	e03d      	b.n	8005886 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005812:	d121      	bne.n	8005858 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b03      	cmp	r3, #3
 8005818:	d837      	bhi.n	800588a <DMA_CheckFifoParam+0xda>
 800581a:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <DMA_CheckFifoParam+0x70>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005831 	.word	0x08005831
 8005824:	08005837 	.word	0x08005837
 8005828:	08005831 	.word	0x08005831
 800582c:	08005849 	.word	0x08005849
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
      break;
 8005834:	e030      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d025      	beq.n	800588e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005846:	e022      	b.n	800588e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005850:	d11f      	bne.n	8005892 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005856:	e01c      	b.n	8005892 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d903      	bls.n	8005866 <DMA_CheckFifoParam+0xb6>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d003      	beq.n	800586c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005864:	e018      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	73fb      	strb	r3, [r7, #15]
      break;
 800586a:	e015      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00e      	beq.n	8005896 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
      break;
 800587c:	e00b      	b.n	8005896 <DMA_CheckFifoParam+0xe6>
      break;
 800587e:	bf00      	nop
 8005880:	e00a      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;
 8005882:	bf00      	nop
 8005884:	e008      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;
 8005886:	bf00      	nop
 8005888:	e006      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;
 800588a:	bf00      	nop
 800588c:	e004      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;
 800588e:	bf00      	nop
 8005890:	e002      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;   
 8005892:	bf00      	nop
 8005894:	e000      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;
 8005896:	bf00      	nop
    }
  } 
  
  return status; 
 8005898:	7bfb      	ldrb	r3, [r7, #15]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop

080058a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b089      	sub	sp, #36	; 0x24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
 80058c2:	e16b      	b.n	8005b9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058c4:	2201      	movs	r2, #1
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	4013      	ands	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	429a      	cmp	r2, r3
 80058de:	f040 815a 	bne.w	8005b96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d005      	beq.n	80058fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d130      	bne.n	800595c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	2203      	movs	r2, #3
 8005906:	fa02 f303 	lsl.w	r3, r2, r3
 800590a:	43db      	mvns	r3, r3
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	4013      	ands	r3, r2
 8005910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	fa02 f303 	lsl.w	r3, r2, r3
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	4313      	orrs	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005930:	2201      	movs	r2, #1
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	43db      	mvns	r3, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4013      	ands	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	091b      	lsrs	r3, r3, #4
 8005946:	f003 0201 	and.w	r2, r3, #1
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	4313      	orrs	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	2b03      	cmp	r3, #3
 8005966:	d017      	beq.n	8005998 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	2203      	movs	r2, #3
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4313      	orrs	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f003 0303 	and.w	r3, r3, #3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d123      	bne.n	80059ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	08da      	lsrs	r2, r3, #3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3208      	adds	r2, #8
 80059ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	220f      	movs	r2, #15
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	43db      	mvns	r3, r3
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	4013      	ands	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4313      	orrs	r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	08da      	lsrs	r2, r3, #3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3208      	adds	r2, #8
 80059e6:	69b9      	ldr	r1, [r7, #24]
 80059e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	2203      	movs	r2, #3
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	43db      	mvns	r3, r3
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4013      	ands	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 0203 	and.w	r2, r3, #3
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	fa02 f303 	lsl.w	r3, r2, r3
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80b4 	beq.w	8005b96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	4b60      	ldr	r3, [pc, #384]	; (8005bb4 <HAL_GPIO_Init+0x30c>)
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	4a5f      	ldr	r2, [pc, #380]	; (8005bb4 <HAL_GPIO_Init+0x30c>)
 8005a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8005a3e:	4b5d      	ldr	r3, [pc, #372]	; (8005bb4 <HAL_GPIO_Init+0x30c>)
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a4a:	4a5b      	ldr	r2, [pc, #364]	; (8005bb8 <HAL_GPIO_Init+0x310>)
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	3302      	adds	r3, #2
 8005a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	220f      	movs	r2, #15
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43db      	mvns	r3, r3
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a52      	ldr	r2, [pc, #328]	; (8005bbc <HAL_GPIO_Init+0x314>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d02b      	beq.n	8005ace <HAL_GPIO_Init+0x226>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a51      	ldr	r2, [pc, #324]	; (8005bc0 <HAL_GPIO_Init+0x318>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d025      	beq.n	8005aca <HAL_GPIO_Init+0x222>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a50      	ldr	r2, [pc, #320]	; (8005bc4 <HAL_GPIO_Init+0x31c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d01f      	beq.n	8005ac6 <HAL_GPIO_Init+0x21e>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a4f      	ldr	r2, [pc, #316]	; (8005bc8 <HAL_GPIO_Init+0x320>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d019      	beq.n	8005ac2 <HAL_GPIO_Init+0x21a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a4e      	ldr	r2, [pc, #312]	; (8005bcc <HAL_GPIO_Init+0x324>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d013      	beq.n	8005abe <HAL_GPIO_Init+0x216>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a4d      	ldr	r2, [pc, #308]	; (8005bd0 <HAL_GPIO_Init+0x328>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00d      	beq.n	8005aba <HAL_GPIO_Init+0x212>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a4c      	ldr	r2, [pc, #304]	; (8005bd4 <HAL_GPIO_Init+0x32c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d007      	beq.n	8005ab6 <HAL_GPIO_Init+0x20e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a4b      	ldr	r2, [pc, #300]	; (8005bd8 <HAL_GPIO_Init+0x330>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d101      	bne.n	8005ab2 <HAL_GPIO_Init+0x20a>
 8005aae:	2307      	movs	r3, #7
 8005ab0:	e00e      	b.n	8005ad0 <HAL_GPIO_Init+0x228>
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	e00c      	b.n	8005ad0 <HAL_GPIO_Init+0x228>
 8005ab6:	2306      	movs	r3, #6
 8005ab8:	e00a      	b.n	8005ad0 <HAL_GPIO_Init+0x228>
 8005aba:	2305      	movs	r3, #5
 8005abc:	e008      	b.n	8005ad0 <HAL_GPIO_Init+0x228>
 8005abe:	2304      	movs	r3, #4
 8005ac0:	e006      	b.n	8005ad0 <HAL_GPIO_Init+0x228>
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e004      	b.n	8005ad0 <HAL_GPIO_Init+0x228>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e002      	b.n	8005ad0 <HAL_GPIO_Init+0x228>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <HAL_GPIO_Init+0x228>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	f002 0203 	and.w	r2, r2, #3
 8005ad6:	0092      	lsls	r2, r2, #2
 8005ad8:	4093      	lsls	r3, r2
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ae0:	4935      	ldr	r1, [pc, #212]	; (8005bb8 <HAL_GPIO_Init+0x310>)
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	089b      	lsrs	r3, r3, #2
 8005ae6:	3302      	adds	r3, #2
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005aee:	4b3b      	ldr	r3, [pc, #236]	; (8005bdc <HAL_GPIO_Init+0x334>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	43db      	mvns	r3, r3
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	4013      	ands	r3, r2
 8005afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b12:	4a32      	ldr	r2, [pc, #200]	; (8005bdc <HAL_GPIO_Init+0x334>)
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b18:	4b30      	ldr	r3, [pc, #192]	; (8005bdc <HAL_GPIO_Init+0x334>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	43db      	mvns	r3, r3
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4013      	ands	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b3c:	4a27      	ldr	r2, [pc, #156]	; (8005bdc <HAL_GPIO_Init+0x334>)
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b42:	4b26      	ldr	r3, [pc, #152]	; (8005bdc <HAL_GPIO_Init+0x334>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	43db      	mvns	r3, r3
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b66:	4a1d      	ldr	r2, [pc, #116]	; (8005bdc <HAL_GPIO_Init+0x334>)
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b6c:	4b1b      	ldr	r3, [pc, #108]	; (8005bdc <HAL_GPIO_Init+0x334>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	43db      	mvns	r3, r3
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b90:	4a12      	ldr	r2, [pc, #72]	; (8005bdc <HAL_GPIO_Init+0x334>)
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	61fb      	str	r3, [r7, #28]
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	2b0f      	cmp	r3, #15
 8005ba0:	f67f ae90 	bls.w	80058c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop
 8005ba8:	3724      	adds	r7, #36	; 0x24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	40013800 	.word	0x40013800
 8005bbc:	40020000 	.word	0x40020000
 8005bc0:	40020400 	.word	0x40020400
 8005bc4:	40020800 	.word	0x40020800
 8005bc8:	40020c00 	.word	0x40020c00
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40021400 	.word	0x40021400
 8005bd4:	40021800 	.word	0x40021800
 8005bd8:	40021c00 	.word	0x40021c00
 8005bdc:	40013c00 	.word	0x40013c00

08005be0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	887b      	ldrh	r3, [r7, #2]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	73fb      	strb	r3, [r7, #15]
 8005bfc:	e001      	b.n	8005c02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	807b      	strh	r3, [r7, #2]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c20:	787b      	ldrb	r3, [r7, #1]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c26:	887a      	ldrh	r2, [r7, #2]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c2c:	e003      	b.n	8005c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c2e:	887b      	ldrh	r3, [r7, #2]
 8005c30:	041a      	lsls	r2, r3, #16
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	619a      	str	r2, [r3, #24]
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c54:	887a      	ldrh	r2, [r7, #2]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	041a      	lsls	r2, r3, #16
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	43d9      	mvns	r1, r3
 8005c60:	887b      	ldrh	r3, [r7, #2]
 8005c62:	400b      	ands	r3, r1
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	619a      	str	r2, [r3, #24]
}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e12b      	b.n	8005ee2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fd fd5c 	bl	800375c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2224      	movs	r2, #36	; 0x24
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0201 	bic.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005cdc:	f001 f89a 	bl	8006e14 <HAL_RCC_GetPCLK1Freq>
 8005ce0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	4a81      	ldr	r2, [pc, #516]	; (8005eec <HAL_I2C_Init+0x274>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d807      	bhi.n	8005cfc <HAL_I2C_Init+0x84>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4a80      	ldr	r2, [pc, #512]	; (8005ef0 <HAL_I2C_Init+0x278>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	bf94      	ite	ls
 8005cf4:	2301      	movls	r3, #1
 8005cf6:	2300      	movhi	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	e006      	b.n	8005d0a <HAL_I2C_Init+0x92>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4a7d      	ldr	r2, [pc, #500]	; (8005ef4 <HAL_I2C_Init+0x27c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	bf94      	ite	ls
 8005d04:	2301      	movls	r3, #1
 8005d06:	2300      	movhi	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e0e7      	b.n	8005ee2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4a78      	ldr	r2, [pc, #480]	; (8005ef8 <HAL_I2C_Init+0x280>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	0c9b      	lsrs	r3, r3, #18
 8005d1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	4a6a      	ldr	r2, [pc, #424]	; (8005eec <HAL_I2C_Init+0x274>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d802      	bhi.n	8005d4c <HAL_I2C_Init+0xd4>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	e009      	b.n	8005d60 <HAL_I2C_Init+0xe8>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d52:	fb02 f303 	mul.w	r3, r2, r3
 8005d56:	4a69      	ldr	r2, [pc, #420]	; (8005efc <HAL_I2C_Init+0x284>)
 8005d58:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5c:	099b      	lsrs	r3, r3, #6
 8005d5e:	3301      	adds	r3, #1
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6812      	ldr	r2, [r2, #0]
 8005d64:	430b      	orrs	r3, r1
 8005d66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	495c      	ldr	r1, [pc, #368]	; (8005eec <HAL_I2C_Init+0x274>)
 8005d7c:	428b      	cmp	r3, r1
 8005d7e:	d819      	bhi.n	8005db4 <HAL_I2C_Init+0x13c>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	1e59      	subs	r1, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d8e:	1c59      	adds	r1, r3, #1
 8005d90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d94:	400b      	ands	r3, r1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <HAL_I2C_Init+0x138>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	1e59      	subs	r1, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005da8:	3301      	adds	r3, #1
 8005daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dae:	e051      	b.n	8005e54 <HAL_I2C_Init+0x1dc>
 8005db0:	2304      	movs	r3, #4
 8005db2:	e04f      	b.n	8005e54 <HAL_I2C_Init+0x1dc>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d111      	bne.n	8005de0 <HAL_I2C_Init+0x168>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	1e58      	subs	r0, r3, #1
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6859      	ldr	r1, [r3, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	440b      	add	r3, r1
 8005dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dce:	3301      	adds	r3, #1
 8005dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	bf0c      	ite	eq
 8005dd8:	2301      	moveq	r3, #1
 8005dda:	2300      	movne	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	e012      	b.n	8005e06 <HAL_I2C_Init+0x18e>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	1e58      	subs	r0, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6859      	ldr	r1, [r3, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	0099      	lsls	r1, r3, #2
 8005df0:	440b      	add	r3, r1
 8005df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005df6:	3301      	adds	r3, #1
 8005df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bf0c      	ite	eq
 8005e00:	2301      	moveq	r3, #1
 8005e02:	2300      	movne	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <HAL_I2C_Init+0x196>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e022      	b.n	8005e54 <HAL_I2C_Init+0x1dc>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10e      	bne.n	8005e34 <HAL_I2C_Init+0x1bc>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	1e58      	subs	r0, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6859      	ldr	r1, [r3, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	440b      	add	r3, r1
 8005e24:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e28:	3301      	adds	r3, #1
 8005e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e32:	e00f      	b.n	8005e54 <HAL_I2C_Init+0x1dc>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	1e58      	subs	r0, r3, #1
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6859      	ldr	r1, [r3, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	440b      	add	r3, r1
 8005e42:	0099      	lsls	r1, r3, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	6809      	ldr	r1, [r1, #0]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69da      	ldr	r2, [r3, #28]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6911      	ldr	r1, [r2, #16]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	68d2      	ldr	r2, [r2, #12]
 8005e8e:	4311      	orrs	r1, r2
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6812      	ldr	r2, [r2, #0]
 8005e94:	430b      	orrs	r3, r1
 8005e96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	695a      	ldr	r2, [r3, #20]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	000186a0 	.word	0x000186a0
 8005ef0:	001e847f 	.word	0x001e847f
 8005ef4:	003d08ff 	.word	0x003d08ff
 8005ef8:	431bde83 	.word	0x431bde83
 8005efc:	10624dd3 	.word	0x10624dd3

08005f00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	607a      	str	r2, [r7, #4]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	817b      	strh	r3, [r7, #10]
 8005f10:	4613      	mov	r3, r2
 8005f12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f14:	f7fe fb72 	bl	80045fc <HAL_GetTick>
 8005f18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	f040 80e0 	bne.w	80060e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	2319      	movs	r3, #25
 8005f2e:	2201      	movs	r2, #1
 8005f30:	4970      	ldr	r1, [pc, #448]	; (80060f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 f964 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e0d3      	b.n	80060ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_I2C_Master_Transmit+0x50>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e0cc      	b.n	80060ea <HAL_I2C_Master_Transmit+0x1ea>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d007      	beq.n	8005f76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 0201 	orr.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2221      	movs	r2, #33	; 0x21
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2210      	movs	r2, #16
 8005f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	893a      	ldrh	r2, [r7, #8]
 8005fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4a50      	ldr	r2, [pc, #320]	; (80060f8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005fb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005fb8:	8979      	ldrh	r1, [r7, #10]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	6a3a      	ldr	r2, [r7, #32]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f89c 	bl	80060fc <I2C_MasterRequestWrite>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e08d      	b.n	80060ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fce:	2300      	movs	r3, #0
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	613b      	str	r3, [r7, #16]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	613b      	str	r3, [r7, #16]
 8005fe2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005fe4:	e066      	b.n	80060b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	6a39      	ldr	r1, [r7, #32]
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 f9de 	bl	80063ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00d      	beq.n	8006012 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d107      	bne.n	800600e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800600c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e06b      	b.n	80060ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	781a      	ldrb	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b04      	cmp	r3, #4
 800604e:	d11b      	bne.n	8006088 <HAL_I2C_Master_Transmit+0x188>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006054:	2b00      	cmp	r3, #0
 8006056:	d017      	beq.n	8006088 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	781a      	ldrb	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	6a39      	ldr	r1, [r7, #32]
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 f9ce 	bl	800642e <I2C_WaitOnBTFFlagUntilTimeout>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00d      	beq.n	80060b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609c:	2b04      	cmp	r3, #4
 800609e:	d107      	bne.n	80060b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e01a      	b.n	80060ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d194      	bne.n	8005fe6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	e000      	b.n	80060ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80060e8:	2302      	movs	r3, #2
  }
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	00100002 	.word	0x00100002
 80060f8:	ffff0000 	.word	0xffff0000

080060fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af02      	add	r7, sp, #8
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	607a      	str	r2, [r7, #4]
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	460b      	mov	r3, r1
 800610a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b08      	cmp	r3, #8
 8006116:	d006      	beq.n	8006126 <I2C_MasterRequestWrite+0x2a>
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d003      	beq.n	8006126 <I2C_MasterRequestWrite+0x2a>
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006124:	d108      	bne.n	8006138 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	e00b      	b.n	8006150 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613c:	2b12      	cmp	r3, #18
 800613e:	d107      	bne.n	8006150 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800614e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f84f 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00d      	beq.n	8006184 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006176:	d103      	bne.n	8006180 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800617e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e035      	b.n	80061f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800618c:	d108      	bne.n	80061a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800618e:	897b      	ldrh	r3, [r7, #10]
 8006190:	b2db      	uxtb	r3, r3
 8006192:	461a      	mov	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800619c:	611a      	str	r2, [r3, #16]
 800619e:	e01b      	b.n	80061d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80061a0:	897b      	ldrh	r3, [r7, #10]
 80061a2:	11db      	asrs	r3, r3, #7
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	f003 0306 	and.w	r3, r3, #6
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	f063 030f 	orn	r3, r3, #15
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	490e      	ldr	r1, [pc, #56]	; (80061f8 <I2C_MasterRequestWrite+0xfc>)
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 f875 	bl	80062ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e010      	b.n	80061f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80061ce:	897b      	ldrh	r3, [r7, #10]
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	4907      	ldr	r1, [pc, #28]	; (80061fc <I2C_MasterRequestWrite+0x100>)
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 f865 	bl	80062ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e000      	b.n	80061f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	00010008 	.word	0x00010008
 80061fc:	00010002 	.word	0x00010002

08006200 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	4613      	mov	r3, r2
 800620e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006210:	e025      	b.n	800625e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006218:	d021      	beq.n	800625e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800621a:	f7fe f9ef 	bl	80045fc <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d302      	bcc.n	8006230 <I2C_WaitOnFlagUntilTimeout+0x30>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d116      	bne.n	800625e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	f043 0220 	orr.w	r2, r3, #32
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e023      	b.n	80062a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	0c1b      	lsrs	r3, r3, #16
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	d10d      	bne.n	8006284 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	43da      	mvns	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4013      	ands	r3, r2
 8006274:	b29b      	uxth	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	bf0c      	ite	eq
 800627a:	2301      	moveq	r3, #1
 800627c:	2300      	movne	r3, #0
 800627e:	b2db      	uxtb	r3, r3
 8006280:	461a      	mov	r2, r3
 8006282:	e00c      	b.n	800629e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	43da      	mvns	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4013      	ands	r3, r2
 8006290:	b29b      	uxth	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	bf0c      	ite	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	2300      	movne	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d0b6      	beq.n	8006212 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062bc:	e051      	b.n	8006362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062cc:	d123      	bne.n	8006316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f043 0204 	orr.w	r2, r3, #4
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e046      	b.n	80063a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631c:	d021      	beq.n	8006362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631e:	f7fe f96d 	bl	80045fc <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	429a      	cmp	r2, r3
 800632c:	d302      	bcc.n	8006334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d116      	bne.n	8006362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2220      	movs	r2, #32
 800633e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	f043 0220 	orr.w	r2, r3, #32
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e020      	b.n	80063a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	0c1b      	lsrs	r3, r3, #16
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b01      	cmp	r3, #1
 800636a:	d10c      	bne.n	8006386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	43da      	mvns	r2, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4013      	ands	r3, r2
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	bf14      	ite	ne
 800637e:	2301      	movne	r3, #1
 8006380:	2300      	moveq	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	e00b      	b.n	800639e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	43da      	mvns	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4013      	ands	r3, r2
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	bf14      	ite	ne
 8006398:	2301      	movne	r3, #1
 800639a:	2300      	moveq	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d18d      	bne.n	80062be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063b8:	e02d      	b.n	8006416 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f878 	bl	80064b0 <I2C_IsAcknowledgeFailed>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e02d      	b.n	8006426 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d021      	beq.n	8006416 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d2:	f7fe f913 	bl	80045fc <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d302      	bcc.n	80063e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d116      	bne.n	8006416 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	f043 0220 	orr.w	r2, r3, #32
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e007      	b.n	8006426 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006420:	2b80      	cmp	r3, #128	; 0x80
 8006422:	d1ca      	bne.n	80063ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800643a:	e02d      	b.n	8006498 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f837 	bl	80064b0 <I2C_IsAcknowledgeFailed>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e02d      	b.n	80064a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006452:	d021      	beq.n	8006498 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006454:	f7fe f8d2 	bl	80045fc <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	429a      	cmp	r2, r3
 8006462:	d302      	bcc.n	800646a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d116      	bne.n	8006498 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2220      	movs	r2, #32
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	f043 0220 	orr.w	r2, r3, #32
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e007      	b.n	80064a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	d1ca      	bne.n	800643c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c6:	d11b      	bne.n	8006500 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	f043 0204 	orr.w	r2, r3, #4
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e000      	b.n	8006502 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e034      	b.n	800658a <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006528:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f245 5255 	movw	r2, #21845	; 0x5555
 8006532:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6852      	ldr	r2, [r2, #4]
 800653c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6892      	ldr	r2, [r2, #8]
 8006546:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006548:	f7fe f858 	bl	80045fc <HAL_GetTick>
 800654c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800654e:	e00f      	b.n	8006570 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006550:	f7fe f854 	bl	80045fc <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b31      	cmp	r3, #49	; 0x31
 800655c:	d908      	bls.n	8006570 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e00c      	b.n	800658a <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e8      	bne.n	8006550 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006586:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80065a2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e267      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d075      	beq.n	80066be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065d2:	4b88      	ldr	r3, [pc, #544]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 030c 	and.w	r3, r3, #12
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d00c      	beq.n	80065f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065de:	4b85      	ldr	r3, [pc, #532]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065e6:	2b08      	cmp	r3, #8
 80065e8:	d112      	bne.n	8006610 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065ea:	4b82      	ldr	r3, [pc, #520]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065f6:	d10b      	bne.n	8006610 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f8:	4b7e      	ldr	r3, [pc, #504]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d05b      	beq.n	80066bc <HAL_RCC_OscConfig+0x108>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d157      	bne.n	80066bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e242      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006618:	d106      	bne.n	8006628 <HAL_RCC_OscConfig+0x74>
 800661a:	4b76      	ldr	r3, [pc, #472]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a75      	ldr	r2, [pc, #468]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	e01d      	b.n	8006664 <HAL_RCC_OscConfig+0xb0>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006630:	d10c      	bne.n	800664c <HAL_RCC_OscConfig+0x98>
 8006632:	4b70      	ldr	r3, [pc, #448]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a6f      	ldr	r2, [pc, #444]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	4b6d      	ldr	r3, [pc, #436]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a6c      	ldr	r2, [pc, #432]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e00b      	b.n	8006664 <HAL_RCC_OscConfig+0xb0>
 800664c:	4b69      	ldr	r3, [pc, #420]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a68      	ldr	r2, [pc, #416]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	4b66      	ldr	r3, [pc, #408]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a65      	ldr	r2, [pc, #404]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 800665e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d013      	beq.n	8006694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800666c:	f7fd ffc6 	bl	80045fc <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006674:	f7fd ffc2 	bl	80045fc <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b64      	cmp	r3, #100	; 0x64
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e207      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006686:	4b5b      	ldr	r3, [pc, #364]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0f0      	beq.n	8006674 <HAL_RCC_OscConfig+0xc0>
 8006692:	e014      	b.n	80066be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006694:	f7fd ffb2 	bl	80045fc <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800669c:	f7fd ffae 	bl	80045fc <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b64      	cmp	r3, #100	; 0x64
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e1f3      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ae:	4b51      	ldr	r3, [pc, #324]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0xe8>
 80066ba:	e000      	b.n	80066be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d063      	beq.n	8006792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066ca:	4b4a      	ldr	r3, [pc, #296]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 030c 	and.w	r3, r3, #12
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00b      	beq.n	80066ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066d6:	4b47      	ldr	r3, [pc, #284]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d11c      	bne.n	800671c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066e2:	4b44      	ldr	r3, [pc, #272]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d116      	bne.n	800671c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ee:	4b41      	ldr	r3, [pc, #260]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_RCC_OscConfig+0x152>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d001      	beq.n	8006706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e1c7      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006706:	4b3b      	ldr	r3, [pc, #236]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4937      	ldr	r1, [pc, #220]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006716:	4313      	orrs	r3, r2
 8006718:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800671a:	e03a      	b.n	8006792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d020      	beq.n	8006766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006724:	4b34      	ldr	r3, [pc, #208]	; (80067f8 <HAL_RCC_OscConfig+0x244>)
 8006726:	2201      	movs	r2, #1
 8006728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672a:	f7fd ff67 	bl	80045fc <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006732:	f7fd ff63 	bl	80045fc <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e1a8      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006744:	4b2b      	ldr	r3, [pc, #172]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0f0      	beq.n	8006732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006750:	4b28      	ldr	r3, [pc, #160]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	00db      	lsls	r3, r3, #3
 800675e:	4925      	ldr	r1, [pc, #148]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006760:	4313      	orrs	r3, r2
 8006762:	600b      	str	r3, [r1, #0]
 8006764:	e015      	b.n	8006792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006766:	4b24      	ldr	r3, [pc, #144]	; (80067f8 <HAL_RCC_OscConfig+0x244>)
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676c:	f7fd ff46 	bl	80045fc <HAL_GetTick>
 8006770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006772:	e008      	b.n	8006786 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006774:	f7fd ff42 	bl	80045fc <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e187      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006786:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1f0      	bne.n	8006774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d036      	beq.n	800680c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d016      	beq.n	80067d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067a6:	4b15      	ldr	r3, [pc, #84]	; (80067fc <HAL_RCC_OscConfig+0x248>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ac:	f7fd ff26 	bl	80045fc <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067b4:	f7fd ff22 	bl	80045fc <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e167      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067c6:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80067c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0f0      	beq.n	80067b4 <HAL_RCC_OscConfig+0x200>
 80067d2:	e01b      	b.n	800680c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067d4:	4b09      	ldr	r3, [pc, #36]	; (80067fc <HAL_RCC_OscConfig+0x248>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067da:	f7fd ff0f 	bl	80045fc <HAL_GetTick>
 80067de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067e0:	e00e      	b.n	8006800 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067e2:	f7fd ff0b 	bl	80045fc <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d907      	bls.n	8006800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e150      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
 80067f4:	40023800 	.word	0x40023800
 80067f8:	42470000 	.word	0x42470000
 80067fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006800:	4b88      	ldr	r3, [pc, #544]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1ea      	bne.n	80067e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8097 	beq.w	8006948 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800681e:	4b81      	ldr	r3, [pc, #516]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10f      	bne.n	800684a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800682a:	2300      	movs	r3, #0
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	4b7d      	ldr	r3, [pc, #500]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	4a7c      	ldr	r2, [pc, #496]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006838:	6413      	str	r3, [r2, #64]	; 0x40
 800683a:	4b7a      	ldr	r3, [pc, #488]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006842:	60bb      	str	r3, [r7, #8]
 8006844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006846:	2301      	movs	r3, #1
 8006848:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800684a:	4b77      	ldr	r3, [pc, #476]	; (8006a28 <HAL_RCC_OscConfig+0x474>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006852:	2b00      	cmp	r3, #0
 8006854:	d118      	bne.n	8006888 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006856:	4b74      	ldr	r3, [pc, #464]	; (8006a28 <HAL_RCC_OscConfig+0x474>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a73      	ldr	r2, [pc, #460]	; (8006a28 <HAL_RCC_OscConfig+0x474>)
 800685c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006862:	f7fd fecb 	bl	80045fc <HAL_GetTick>
 8006866:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006868:	e008      	b.n	800687c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686a:	f7fd fec7 	bl	80045fc <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e10c      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800687c:	4b6a      	ldr	r3, [pc, #424]	; (8006a28 <HAL_RCC_OscConfig+0x474>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0f0      	beq.n	800686a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d106      	bne.n	800689e <HAL_RCC_OscConfig+0x2ea>
 8006890:	4b64      	ldr	r3, [pc, #400]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006894:	4a63      	ldr	r2, [pc, #396]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006896:	f043 0301 	orr.w	r3, r3, #1
 800689a:	6713      	str	r3, [r2, #112]	; 0x70
 800689c:	e01c      	b.n	80068d8 <HAL_RCC_OscConfig+0x324>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	2b05      	cmp	r3, #5
 80068a4:	d10c      	bne.n	80068c0 <HAL_RCC_OscConfig+0x30c>
 80068a6:	4b5f      	ldr	r3, [pc, #380]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068aa:	4a5e      	ldr	r2, [pc, #376]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068ac:	f043 0304 	orr.w	r3, r3, #4
 80068b0:	6713      	str	r3, [r2, #112]	; 0x70
 80068b2:	4b5c      	ldr	r3, [pc, #368]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b6:	4a5b      	ldr	r2, [pc, #364]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	6713      	str	r3, [r2, #112]	; 0x70
 80068be:	e00b      	b.n	80068d8 <HAL_RCC_OscConfig+0x324>
 80068c0:	4b58      	ldr	r3, [pc, #352]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c4:	4a57      	ldr	r2, [pc, #348]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068c6:	f023 0301 	bic.w	r3, r3, #1
 80068ca:	6713      	str	r3, [r2, #112]	; 0x70
 80068cc:	4b55      	ldr	r3, [pc, #340]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d0:	4a54      	ldr	r2, [pc, #336]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068d2:	f023 0304 	bic.w	r3, r3, #4
 80068d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d015      	beq.n	800690c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e0:	f7fd fe8c 	bl	80045fc <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068e6:	e00a      	b.n	80068fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068e8:	f7fd fe88 	bl	80045fc <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e0cb      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068fe:	4b49      	ldr	r3, [pc, #292]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0ee      	beq.n	80068e8 <HAL_RCC_OscConfig+0x334>
 800690a:	e014      	b.n	8006936 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800690c:	f7fd fe76 	bl	80045fc <HAL_GetTick>
 8006910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006912:	e00a      	b.n	800692a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006914:	f7fd fe72 	bl	80045fc <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006922:	4293      	cmp	r3, r2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e0b5      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800692a:	4b3e      	ldr	r3, [pc, #248]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1ee      	bne.n	8006914 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006936:	7dfb      	ldrb	r3, [r7, #23]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d105      	bne.n	8006948 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800693c:	4b39      	ldr	r3, [pc, #228]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	4a38      	ldr	r2, [pc, #224]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006946:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 80a1 	beq.w	8006a94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006952:	4b34      	ldr	r3, [pc, #208]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 030c 	and.w	r3, r3, #12
 800695a:	2b08      	cmp	r3, #8
 800695c:	d05c      	beq.n	8006a18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2b02      	cmp	r3, #2
 8006964:	d141      	bne.n	80069ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006966:	4b31      	ldr	r3, [pc, #196]	; (8006a2c <HAL_RCC_OscConfig+0x478>)
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800696c:	f7fd fe46 	bl	80045fc <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006974:	f7fd fe42 	bl	80045fc <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e087      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006986:	4b27      	ldr	r3, [pc, #156]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f0      	bne.n	8006974 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69da      	ldr	r2, [r3, #28]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	019b      	lsls	r3, r3, #6
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	085b      	lsrs	r3, r3, #1
 80069aa:	3b01      	subs	r3, #1
 80069ac:	041b      	lsls	r3, r3, #16
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	061b      	lsls	r3, r3, #24
 80069b6:	491b      	ldr	r1, [pc, #108]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069bc:	4b1b      	ldr	r3, [pc, #108]	; (8006a2c <HAL_RCC_OscConfig+0x478>)
 80069be:	2201      	movs	r2, #1
 80069c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c2:	f7fd fe1b 	bl	80045fc <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069c8:	e008      	b.n	80069dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ca:	f7fd fe17 	bl	80045fc <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d901      	bls.n	80069dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e05c      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069dc:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0f0      	beq.n	80069ca <HAL_RCC_OscConfig+0x416>
 80069e8:	e054      	b.n	8006a94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ea:	4b10      	ldr	r3, [pc, #64]	; (8006a2c <HAL_RCC_OscConfig+0x478>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f0:	f7fd fe04 	bl	80045fc <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069f8:	f7fd fe00 	bl	80045fc <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e045      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a0a:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1f0      	bne.n	80069f8 <HAL_RCC_OscConfig+0x444>
 8006a16:	e03d      	b.n	8006a94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d107      	bne.n	8006a30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e038      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
 8006a24:	40023800 	.word	0x40023800
 8006a28:	40007000 	.word	0x40007000
 8006a2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a30:	4b1b      	ldr	r3, [pc, #108]	; (8006aa0 <HAL_RCC_OscConfig+0x4ec>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d028      	beq.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d121      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d11a      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a60:	4013      	ands	r3, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d111      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a76:	085b      	lsrs	r3, r3, #1
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d107      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d001      	beq.n	8006a94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e000      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	40023800 	.word	0x40023800

08006aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e0cc      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab8:	4b68      	ldr	r3, [pc, #416]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d90c      	bls.n	8006ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ac6:	4b65      	ldr	r3, [pc, #404]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ace:	4b63      	ldr	r3, [pc, #396]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d001      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e0b8      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d020      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d005      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006af8:	4b59      	ldr	r3, [pc, #356]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	4a58      	ldr	r2, [pc, #352]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b10:	4b53      	ldr	r3, [pc, #332]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	4a52      	ldr	r2, [pc, #328]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b1c:	4b50      	ldr	r3, [pc, #320]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	494d      	ldr	r1, [pc, #308]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d044      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d107      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b42:	4b47      	ldr	r3, [pc, #284]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d119      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e07f      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d003      	beq.n	8006b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d107      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b62:	4b3f      	ldr	r3, [pc, #252]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e06f      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b72:	4b3b      	ldr	r3, [pc, #236]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e067      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b82:	4b37      	ldr	r3, [pc, #220]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f023 0203 	bic.w	r2, r3, #3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	4934      	ldr	r1, [pc, #208]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b94:	f7fd fd32 	bl	80045fc <HAL_GetTick>
 8006b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b9a:	e00a      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b9c:	f7fd fd2e 	bl	80045fc <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e04f      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bb2:	4b2b      	ldr	r3, [pc, #172]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 020c 	and.w	r2, r3, #12
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d1eb      	bne.n	8006b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bc4:	4b25      	ldr	r3, [pc, #148]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d20c      	bcs.n	8006bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bd2:	4b22      	ldr	r3, [pc, #136]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bda:	4b20      	ldr	r3, [pc, #128]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d001      	beq.n	8006bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e032      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0304 	and.w	r3, r3, #4
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bf8:	4b19      	ldr	r3, [pc, #100]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	4916      	ldr	r1, [pc, #88]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c16:	4b12      	ldr	r3, [pc, #72]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	490e      	ldr	r1, [pc, #56]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c2a:	f000 f821 	bl	8006c70 <HAL_RCC_GetSysClockFreq>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	091b      	lsrs	r3, r3, #4
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	490a      	ldr	r1, [pc, #40]	; (8006c64 <HAL_RCC_ClockConfig+0x1c0>)
 8006c3c:	5ccb      	ldrb	r3, [r1, r3]
 8006c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c42:	4a09      	ldr	r2, [pc, #36]	; (8006c68 <HAL_RCC_ClockConfig+0x1c4>)
 8006c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c46:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <HAL_RCC_ClockConfig+0x1c8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fd fc92 	bl	8004574 <HAL_InitTick>

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40023c00 	.word	0x40023c00
 8006c60:	40023800 	.word	0x40023800
 8006c64:	0800e4dc 	.word	0x0800e4dc
 8006c68:	20000004 	.word	0x20000004
 8006c6c:	20000008 	.word	0x20000008

08006c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c74:	b090      	sub	sp, #64	; 0x40
 8006c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c80:	2300      	movs	r3, #0
 8006c82:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c88:	4b59      	ldr	r3, [pc, #356]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 030c 	and.w	r3, r3, #12
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	d00d      	beq.n	8006cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	f200 80a1 	bhi.w	8006ddc <HAL_RCC_GetSysClockFreq+0x16c>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d003      	beq.n	8006caa <HAL_RCC_GetSysClockFreq+0x3a>
 8006ca2:	e09b      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ca4:	4b53      	ldr	r3, [pc, #332]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006ca6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006ca8:	e09b      	b.n	8006de2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006caa:	4b53      	ldr	r3, [pc, #332]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006cae:	e098      	b.n	8006de2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cb0:	4b4f      	ldr	r3, [pc, #316]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cb8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cba:	4b4d      	ldr	r3, [pc, #308]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d028      	beq.n	8006d18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cc6:	4b4a      	ldr	r3, [pc, #296]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	099b      	lsrs	r3, r3, #6
 8006ccc:	2200      	movs	r2, #0
 8006cce:	623b      	str	r3, [r7, #32]
 8006cd0:	627a      	str	r2, [r7, #36]	; 0x24
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4b47      	ldr	r3, [pc, #284]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cdc:	fb03 f201 	mul.w	r2, r3, r1
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	fb00 f303 	mul.w	r3, r0, r3
 8006ce6:	4413      	add	r3, r2
 8006ce8:	4a43      	ldr	r2, [pc, #268]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cea:	fba0 1202 	umull	r1, r2, r0, r2
 8006cee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cf0:	460a      	mov	r2, r1
 8006cf2:	62ba      	str	r2, [r7, #40]	; 0x28
 8006cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf6:	4413      	add	r3, r2
 8006cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	61fa      	str	r2, [r7, #28]
 8006d02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006d0a:	f7f9 ffbd 	bl	8000c88 <__aeabi_uldivmod>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	4613      	mov	r3, r2
 8006d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d16:	e053      	b.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d18:	4b35      	ldr	r3, [pc, #212]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	099b      	lsrs	r3, r3, #6
 8006d1e:	2200      	movs	r2, #0
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	617a      	str	r2, [r7, #20]
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006d2a:	f04f 0b00 	mov.w	fp, #0
 8006d2e:	4652      	mov	r2, sl
 8006d30:	465b      	mov	r3, fp
 8006d32:	f04f 0000 	mov.w	r0, #0
 8006d36:	f04f 0100 	mov.w	r1, #0
 8006d3a:	0159      	lsls	r1, r3, #5
 8006d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d40:	0150      	lsls	r0, r2, #5
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	ebb2 080a 	subs.w	r8, r2, sl
 8006d4a:	eb63 090b 	sbc.w	r9, r3, fp
 8006d4e:	f04f 0200 	mov.w	r2, #0
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006d5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006d5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006d62:	ebb2 0408 	subs.w	r4, r2, r8
 8006d66:	eb63 0509 	sbc.w	r5, r3, r9
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	00eb      	lsls	r3, r5, #3
 8006d74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d78:	00e2      	lsls	r2, r4, #3
 8006d7a:	4614      	mov	r4, r2
 8006d7c:	461d      	mov	r5, r3
 8006d7e:	eb14 030a 	adds.w	r3, r4, sl
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	eb45 030b 	adc.w	r3, r5, fp
 8006d88:	607b      	str	r3, [r7, #4]
 8006d8a:	f04f 0200 	mov.w	r2, #0
 8006d8e:	f04f 0300 	mov.w	r3, #0
 8006d92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d96:	4629      	mov	r1, r5
 8006d98:	028b      	lsls	r3, r1, #10
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006da0:	4621      	mov	r1, r4
 8006da2:	028a      	lsls	r2, r1, #10
 8006da4:	4610      	mov	r0, r2
 8006da6:	4619      	mov	r1, r3
 8006da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006daa:	2200      	movs	r2, #0
 8006dac:	60bb      	str	r3, [r7, #8]
 8006dae:	60fa      	str	r2, [r7, #12]
 8006db0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006db4:	f7f9 ff68 	bl	8000c88 <__aeabi_uldivmod>
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006dc0:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	0c1b      	lsrs	r3, r3, #16
 8006dc6:	f003 0303 	and.w	r3, r3, #3
 8006dca:	3301      	adds	r3, #1
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006dd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006dda:	e002      	b.n	8006de2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ddc:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006dde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3740      	adds	r7, #64	; 0x40
 8006de8:	46bd      	mov	sp, r7
 8006dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dee:	bf00      	nop
 8006df0:	40023800 	.word	0x40023800
 8006df4:	00f42400 	.word	0x00f42400
 8006df8:	017d7840 	.word	0x017d7840

08006dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e00:	4b03      	ldr	r3, [pc, #12]	; (8006e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e02:	681b      	ldr	r3, [r3, #0]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	20000004 	.word	0x20000004

08006e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e18:	f7ff fff0 	bl	8006dfc <HAL_RCC_GetHCLKFreq>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	0a9b      	lsrs	r3, r3, #10
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	4903      	ldr	r1, [pc, #12]	; (8006e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e2a:	5ccb      	ldrb	r3, [r1, r3]
 8006e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40023800 	.word	0x40023800
 8006e38:	0800e4ec 	.word	0x0800e4ec

08006e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e40:	f7ff ffdc 	bl	8006dfc <HAL_RCC_GetHCLKFreq>
 8006e44:	4602      	mov	r2, r0
 8006e46:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	0b5b      	lsrs	r3, r3, #13
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	4903      	ldr	r1, [pc, #12]	; (8006e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e52:	5ccb      	ldrb	r3, [r1, r3]
 8006e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	40023800 	.word	0x40023800
 8006e60:	0800e4ec 	.word	0x0800e4ec

08006e64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e07b      	b.n	8006f6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d108      	bne.n	8006e90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e86:	d009      	beq.n	8006e9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	61da      	str	r2, [r3, #28]
 8006e8e:	e005      	b.n	8006e9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fc fc98 	bl	80037ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ed2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f20:	ea42 0103 	orr.w	r1, r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	0c1b      	lsrs	r3, r3, #16
 8006f3a:	f003 0104 	and.w	r1, r3, #4
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	f003 0210 	and.w	r2, r3, #16
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69da      	ldr	r2, [r3, #28]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b088      	sub	sp, #32
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	603b      	str	r3, [r7, #0]
 8006f82:	4613      	mov	r3, r2
 8006f84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d101      	bne.n	8006f98 <HAL_SPI_Transmit+0x22>
 8006f94:	2302      	movs	r3, #2
 8006f96:	e126      	b.n	80071e6 <HAL_SPI_Transmit+0x270>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fa0:	f7fd fb2c 	bl	80045fc <HAL_GetTick>
 8006fa4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006fa6:	88fb      	ldrh	r3, [r7, #6]
 8006fa8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d002      	beq.n	8006fbc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fba:	e10b      	b.n	80071d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <HAL_SPI_Transmit+0x52>
 8006fc2:	88fb      	ldrh	r3, [r7, #6]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d102      	bne.n	8006fce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fcc:	e102      	b.n	80071d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2203      	movs	r2, #3
 8006fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	88fa      	ldrh	r2, [r7, #6]
 8006fe6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	88fa      	ldrh	r2, [r7, #6]
 8006fec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007014:	d10f      	bne.n	8007036 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007024:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007034:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b40      	cmp	r3, #64	; 0x40
 8007042:	d007      	beq.n	8007054 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007052:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800705c:	d14b      	bne.n	80070f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <HAL_SPI_Transmit+0xf6>
 8007066:	8afb      	ldrh	r3, [r7, #22]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d13e      	bne.n	80070ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	881a      	ldrh	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707c:	1c9a      	adds	r2, r3, #2
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007086:	b29b      	uxth	r3, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	b29a      	uxth	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007090:	e02b      	b.n	80070ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b02      	cmp	r3, #2
 800709e:	d112      	bne.n	80070c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	881a      	ldrh	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	1c9a      	adds	r2, r3, #2
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80070c4:	e011      	b.n	80070ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070c6:	f7fd fa99 	bl	80045fc <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d803      	bhi.n	80070de <HAL_SPI_Transmit+0x168>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070dc:	d102      	bne.n	80070e4 <HAL_SPI_Transmit+0x16e>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d102      	bne.n	80070ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070e8:	e074      	b.n	80071d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1ce      	bne.n	8007092 <HAL_SPI_Transmit+0x11c>
 80070f4:	e04c      	b.n	8007190 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <HAL_SPI_Transmit+0x18e>
 80070fe:	8afb      	ldrh	r3, [r7, #22]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d140      	bne.n	8007186 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	330c      	adds	r3, #12
 800710e:	7812      	ldrb	r2, [r2, #0]
 8007110:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007120:	b29b      	uxth	r3, r3
 8007122:	3b01      	subs	r3, #1
 8007124:	b29a      	uxth	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800712a:	e02c      	b.n	8007186 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b02      	cmp	r3, #2
 8007138:	d113      	bne.n	8007162 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	330c      	adds	r3, #12
 8007144:	7812      	ldrb	r2, [r2, #0]
 8007146:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007156:	b29b      	uxth	r3, r3
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007160:	e011      	b.n	8007186 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007162:	f7fd fa4b 	bl	80045fc <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d803      	bhi.n	800717a <HAL_SPI_Transmit+0x204>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007178:	d102      	bne.n	8007180 <HAL_SPI_Transmit+0x20a>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d102      	bne.n	8007186 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007184:	e026      	b.n	80071d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1cd      	bne.n	800712c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 fbd9 	bl	800794c <SPI_EndRxTxTransaction>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071ae:	2300      	movs	r3, #0
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	613b      	str	r3, [r7, #16]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	77fb      	strb	r3, [r7, #31]
 80071d0:	e000      	b.n	80071d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80071d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3720      	adds	r7, #32
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b088      	sub	sp, #32
 80071f2:	af02      	add	r7, sp, #8
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	4613      	mov	r3, r2
 80071fc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800720a:	d112      	bne.n	8007232 <HAL_SPI_Receive+0x44>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10e      	bne.n	8007232 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2204      	movs	r2, #4
 8007218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800721c:	88fa      	ldrh	r2, [r7, #6]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	4613      	mov	r3, r2
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	68b9      	ldr	r1, [r7, #8]
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 f8f1 	bl	8007410 <HAL_SPI_TransmitReceive>
 800722e:	4603      	mov	r3, r0
 8007230:	e0ea      	b.n	8007408 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_SPI_Receive+0x52>
 800723c:	2302      	movs	r3, #2
 800723e:	e0e3      	b.n	8007408 <HAL_SPI_Receive+0x21a>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007248:	f7fd f9d8 	bl	80045fc <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b01      	cmp	r3, #1
 8007258:	d002      	beq.n	8007260 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800725a:	2302      	movs	r3, #2
 800725c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800725e:	e0ca      	b.n	80073f6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <HAL_SPI_Receive+0x7e>
 8007266:	88fb      	ldrh	r3, [r7, #6]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d102      	bne.n	8007272 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007270:	e0c1      	b.n	80073f6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2204      	movs	r2, #4
 8007276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	88fa      	ldrh	r2, [r7, #6]
 800728a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	88fa      	ldrh	r2, [r7, #6]
 8007290:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b8:	d10f      	bne.n	80072da <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e4:	2b40      	cmp	r3, #64	; 0x40
 80072e6:	d007      	beq.n	80072f8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d162      	bne.n	80073c6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007300:	e02e      	b.n	8007360 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b01      	cmp	r3, #1
 800730e:	d115      	bne.n	800733c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f103 020c 	add.w	r2, r3, #12
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731c:	7812      	ldrb	r2, [r2, #0]
 800731e:	b2d2      	uxtb	r2, r2
 8007320:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007330:	b29b      	uxth	r3, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	87da      	strh	r2, [r3, #62]	; 0x3e
 800733a:	e011      	b.n	8007360 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800733c:	f7fd f95e 	bl	80045fc <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d803      	bhi.n	8007354 <HAL_SPI_Receive+0x166>
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007352:	d102      	bne.n	800735a <HAL_SPI_Receive+0x16c>
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d102      	bne.n	8007360 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800735e:	e04a      	b.n	80073f6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1cb      	bne.n	8007302 <HAL_SPI_Receive+0x114>
 800736a:	e031      	b.n	80073d0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b01      	cmp	r3, #1
 8007378:	d113      	bne.n	80073a2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68da      	ldr	r2, [r3, #12]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007384:	b292      	uxth	r2, r2
 8007386:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738c:	1c9a      	adds	r2, r3, #2
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073a0:	e011      	b.n	80073c6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073a2:	f7fd f92b 	bl	80045fc <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d803      	bhi.n	80073ba <HAL_SPI_Receive+0x1cc>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b8:	d102      	bne.n	80073c0 <HAL_SPI_Receive+0x1d2>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d102      	bne.n	80073c6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073c4:	e017      	b.n	80073f6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1cd      	bne.n	800736c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 fa53 	bl	8007880 <SPI_EndRxTransaction>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2220      	movs	r2, #32
 80073e4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	75fb      	strb	r3, [r7, #23]
 80073f2:	e000      	b.n	80073f6 <HAL_SPI_Receive+0x208>
  }

error :
 80073f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08c      	sub	sp, #48	; 0x30
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800741e:	2301      	movs	r3, #1
 8007420:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800742e:	2b01      	cmp	r3, #1
 8007430:	d101      	bne.n	8007436 <HAL_SPI_TransmitReceive+0x26>
 8007432:	2302      	movs	r3, #2
 8007434:	e18a      	b.n	800774c <HAL_SPI_TransmitReceive+0x33c>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800743e:	f7fd f8dd 	bl	80045fc <HAL_GetTick>
 8007442:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800744a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007454:	887b      	ldrh	r3, [r7, #2]
 8007456:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007458:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800745c:	2b01      	cmp	r3, #1
 800745e:	d00f      	beq.n	8007480 <HAL_SPI_TransmitReceive+0x70>
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007466:	d107      	bne.n	8007478 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d103      	bne.n	8007478 <HAL_SPI_TransmitReceive+0x68>
 8007470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007474:	2b04      	cmp	r3, #4
 8007476:	d003      	beq.n	8007480 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007478:	2302      	movs	r3, #2
 800747a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800747e:	e15b      	b.n	8007738 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d005      	beq.n	8007492 <HAL_SPI_TransmitReceive+0x82>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <HAL_SPI_TransmitReceive+0x82>
 800748c:	887b      	ldrh	r3, [r7, #2]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d103      	bne.n	800749a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007498:	e14e      	b.n	8007738 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d003      	beq.n	80074ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2205      	movs	r2, #5
 80074aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	887a      	ldrh	r2, [r7, #2]
 80074be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	887a      	ldrh	r2, [r7, #2]
 80074c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	887a      	ldrh	r2, [r7, #2]
 80074d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	887a      	ldrh	r2, [r7, #2]
 80074d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ee:	2b40      	cmp	r3, #64	; 0x40
 80074f0:	d007      	beq.n	8007502 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007500:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800750a:	d178      	bne.n	80075fe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <HAL_SPI_TransmitReceive+0x10a>
 8007514:	8b7b      	ldrh	r3, [r7, #26]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d166      	bne.n	80075e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751e:	881a      	ldrh	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752a:	1c9a      	adds	r2, r3, #2
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007534:	b29b      	uxth	r3, r3
 8007536:	3b01      	subs	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800753e:	e053      	b.n	80075e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b02      	cmp	r3, #2
 800754c:	d11b      	bne.n	8007586 <HAL_SPI_TransmitReceive+0x176>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007552:	b29b      	uxth	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d016      	beq.n	8007586 <HAL_SPI_TransmitReceive+0x176>
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	2b01      	cmp	r3, #1
 800755c:	d113      	bne.n	8007586 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007562:	881a      	ldrh	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	1c9a      	adds	r2, r3, #2
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007578:	b29b      	uxth	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b01      	cmp	r3, #1
 8007592:	d119      	bne.n	80075c8 <HAL_SPI_TransmitReceive+0x1b8>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007598:	b29b      	uxth	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d014      	beq.n	80075c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a8:	b292      	uxth	r2, r2
 80075aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b0:	1c9a      	adds	r2, r3, #2
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075c4:	2301      	movs	r3, #1
 80075c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80075c8:	f7fd f818 	bl	80045fc <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d807      	bhi.n	80075e8 <HAL_SPI_TransmitReceive+0x1d8>
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075de:	d003      	beq.n	80075e8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80075e6:	e0a7      	b.n	8007738 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1a6      	bne.n	8007540 <HAL_SPI_TransmitReceive+0x130>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1a1      	bne.n	8007540 <HAL_SPI_TransmitReceive+0x130>
 80075fc:	e07c      	b.n	80076f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <HAL_SPI_TransmitReceive+0x1fc>
 8007606:	8b7b      	ldrh	r3, [r7, #26]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d16b      	bne.n	80076e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	330c      	adds	r3, #12
 8007616:	7812      	ldrb	r2, [r2, #0]
 8007618:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007632:	e057      	b.n	80076e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b02      	cmp	r3, #2
 8007640:	d11c      	bne.n	800767c <HAL_SPI_TransmitReceive+0x26c>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d017      	beq.n	800767c <HAL_SPI_TransmitReceive+0x26c>
 800764c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764e:	2b01      	cmp	r3, #1
 8007650:	d114      	bne.n	800767c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	330c      	adds	r3, #12
 800765c:	7812      	ldrb	r2, [r2, #0]
 800765e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800766e:	b29b      	uxth	r3, r3
 8007670:	3b01      	subs	r3, #1
 8007672:	b29a      	uxth	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b01      	cmp	r3, #1
 8007688:	d119      	bne.n	80076be <HAL_SPI_TransmitReceive+0x2ae>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800768e:	b29b      	uxth	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d014      	beq.n	80076be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68da      	ldr	r2, [r3, #12]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769e:	b2d2      	uxtb	r2, r2
 80076a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076ba:	2301      	movs	r3, #1
 80076bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80076be:	f7fc ff9d 	bl	80045fc <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d803      	bhi.n	80076d6 <HAL_SPI_TransmitReceive+0x2c6>
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d4:	d102      	bne.n	80076dc <HAL_SPI_TransmitReceive+0x2cc>
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80076e2:	e029      	b.n	8007738 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1a2      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x224>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d19d      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f925 	bl	800794c <SPI_EndRxTxTransaction>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d006      	beq.n	8007716 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2220      	movs	r2, #32
 8007712:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007714:	e010      	b.n	8007738 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10b      	bne.n	8007736 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800771e:	2300      	movs	r3, #0
 8007720:	617b      	str	r3, [r7, #20]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	617b      	str	r3, [r7, #20]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	e000      	b.n	8007738 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007736:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007748:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800774c:	4618      	mov	r0, r3
 800774e:	3730      	adds	r7, #48	; 0x30
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007762:	b2db      	uxtb	r3, r3
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b088      	sub	sp, #32
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	4613      	mov	r3, r2
 800777e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007780:	f7fc ff3c 	bl	80045fc <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007788:	1a9b      	subs	r3, r3, r2
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	4413      	add	r3, r2
 800778e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007790:	f7fc ff34 	bl	80045fc <HAL_GetTick>
 8007794:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007796:	4b39      	ldr	r3, [pc, #228]	; (800787c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	015b      	lsls	r3, r3, #5
 800779c:	0d1b      	lsrs	r3, r3, #20
 800779e:	69fa      	ldr	r2, [r7, #28]
 80077a0:	fb02 f303 	mul.w	r3, r2, r3
 80077a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077a6:	e054      	b.n	8007852 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ae:	d050      	beq.n	8007852 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077b0:	f7fc ff24 	bl	80045fc <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	69fa      	ldr	r2, [r7, #28]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d902      	bls.n	80077c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d13d      	bne.n	8007842 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077de:	d111      	bne.n	8007804 <SPI_WaitFlagStateUntilTimeout+0x94>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077e8:	d004      	beq.n	80077f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077f2:	d107      	bne.n	8007804 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007802:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800780c:	d10f      	bne.n	800782e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800782c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e017      	b.n	8007872 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	3b01      	subs	r3, #1
 8007850:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4013      	ands	r3, r2
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	429a      	cmp	r2, r3
 8007860:	bf0c      	ite	eq
 8007862:	2301      	moveq	r3, #1
 8007864:	2300      	movne	r3, #0
 8007866:	b2db      	uxtb	r3, r3
 8007868:	461a      	mov	r2, r3
 800786a:	79fb      	ldrb	r3, [r7, #7]
 800786c:	429a      	cmp	r2, r3
 800786e:	d19b      	bne.n	80077a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3720      	adds	r7, #32
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20000004 	.word	0x20000004

08007880 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af02      	add	r7, sp, #8
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007894:	d111      	bne.n	80078ba <SPI_EndRxTransaction+0x3a>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800789e:	d004      	beq.n	80078aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078a8:	d107      	bne.n	80078ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078c2:	d12a      	bne.n	800791a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078cc:	d012      	beq.n	80078f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2200      	movs	r2, #0
 80078d6:	2180      	movs	r1, #128	; 0x80
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f7ff ff49 	bl	8007770 <SPI_WaitFlagStateUntilTimeout>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d02d      	beq.n	8007940 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e8:	f043 0220 	orr.w	r2, r3, #32
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e026      	b.n	8007942 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2200      	movs	r2, #0
 80078fc:	2101      	movs	r1, #1
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f7ff ff36 	bl	8007770 <SPI_WaitFlagStateUntilTimeout>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d01a      	beq.n	8007940 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790e:	f043 0220 	orr.w	r2, r3, #32
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e013      	b.n	8007942 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2200      	movs	r2, #0
 8007922:	2101      	movs	r1, #1
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f7ff ff23 	bl	8007770 <SPI_WaitFlagStateUntilTimeout>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d007      	beq.n	8007940 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007934:	f043 0220 	orr.w	r2, r3, #32
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e000      	b.n	8007942 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
	...

0800794c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af02      	add	r7, sp, #8
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007958:	4b1b      	ldr	r3, [pc, #108]	; (80079c8 <SPI_EndRxTxTransaction+0x7c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1b      	ldr	r2, [pc, #108]	; (80079cc <SPI_EndRxTxTransaction+0x80>)
 800795e:	fba2 2303 	umull	r2, r3, r2, r3
 8007962:	0d5b      	lsrs	r3, r3, #21
 8007964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007968:	fb02 f303 	mul.w	r3, r2, r3
 800796c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007976:	d112      	bne.n	800799e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2200      	movs	r2, #0
 8007980:	2180      	movs	r1, #128	; 0x80
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f7ff fef4 	bl	8007770 <SPI_WaitFlagStateUntilTimeout>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d016      	beq.n	80079bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007992:	f043 0220 	orr.w	r2, r3, #32
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e00f      	b.n	80079be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b4:	2b80      	cmp	r3, #128	; 0x80
 80079b6:	d0f2      	beq.n	800799e <SPI_EndRxTxTransaction+0x52>
 80079b8:	e000      	b.n	80079bc <SPI_EndRxTxTransaction+0x70>
        break;
 80079ba:	bf00      	nop
  }

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20000004 	.word	0x20000004
 80079cc:	165e9f81 	.word	0x165e9f81

080079d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e041      	b.n	8007a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d106      	bne.n	80079fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7fb ff40 	bl	800387c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	f000 fb2c 	bl	800806c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d001      	beq.n	8007a88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e046      	b.n	8007b16 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a23      	ldr	r2, [pc, #140]	; (8007b24 <HAL_TIM_Base_Start+0xb4>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d022      	beq.n	8007ae0 <HAL_TIM_Base_Start+0x70>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa2:	d01d      	beq.n	8007ae0 <HAL_TIM_Base_Start+0x70>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a1f      	ldr	r2, [pc, #124]	; (8007b28 <HAL_TIM_Base_Start+0xb8>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d018      	beq.n	8007ae0 <HAL_TIM_Base_Start+0x70>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a1e      	ldr	r2, [pc, #120]	; (8007b2c <HAL_TIM_Base_Start+0xbc>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d013      	beq.n	8007ae0 <HAL_TIM_Base_Start+0x70>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a1c      	ldr	r2, [pc, #112]	; (8007b30 <HAL_TIM_Base_Start+0xc0>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d00e      	beq.n	8007ae0 <HAL_TIM_Base_Start+0x70>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a1b      	ldr	r2, [pc, #108]	; (8007b34 <HAL_TIM_Base_Start+0xc4>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d009      	beq.n	8007ae0 <HAL_TIM_Base_Start+0x70>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a19      	ldr	r2, [pc, #100]	; (8007b38 <HAL_TIM_Base_Start+0xc8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d004      	beq.n	8007ae0 <HAL_TIM_Base_Start+0x70>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a18      	ldr	r2, [pc, #96]	; (8007b3c <HAL_TIM_Base_Start+0xcc>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d111      	bne.n	8007b04 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b06      	cmp	r3, #6
 8007af0:	d010      	beq.n	8007b14 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0201 	orr.w	r2, r2, #1
 8007b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b02:	e007      	b.n	8007b14 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0201 	orr.w	r2, r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	40010000 	.word	0x40010000
 8007b28:	40000400 	.word	0x40000400
 8007b2c:	40000800 	.word	0x40000800
 8007b30:	40000c00 	.word	0x40000c00
 8007b34:	40010400 	.word	0x40010400
 8007b38:	40014000 	.word	0x40014000
 8007b3c:	40001800 	.word	0x40001800

08007b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d001      	beq.n	8007b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e04e      	b.n	8007bf6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68da      	ldr	r2, [r3, #12]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0201 	orr.w	r2, r2, #1
 8007b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a23      	ldr	r2, [pc, #140]	; (8007c04 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d022      	beq.n	8007bc0 <HAL_TIM_Base_Start_IT+0x80>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b82:	d01d      	beq.n	8007bc0 <HAL_TIM_Base_Start_IT+0x80>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a1f      	ldr	r2, [pc, #124]	; (8007c08 <HAL_TIM_Base_Start_IT+0xc8>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d018      	beq.n	8007bc0 <HAL_TIM_Base_Start_IT+0x80>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a1e      	ldr	r2, [pc, #120]	; (8007c0c <HAL_TIM_Base_Start_IT+0xcc>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d013      	beq.n	8007bc0 <HAL_TIM_Base_Start_IT+0x80>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a1c      	ldr	r2, [pc, #112]	; (8007c10 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d00e      	beq.n	8007bc0 <HAL_TIM_Base_Start_IT+0x80>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a1b      	ldr	r2, [pc, #108]	; (8007c14 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d009      	beq.n	8007bc0 <HAL_TIM_Base_Start_IT+0x80>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a19      	ldr	r2, [pc, #100]	; (8007c18 <HAL_TIM_Base_Start_IT+0xd8>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d004      	beq.n	8007bc0 <HAL_TIM_Base_Start_IT+0x80>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a18      	ldr	r2, [pc, #96]	; (8007c1c <HAL_TIM_Base_Start_IT+0xdc>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d111      	bne.n	8007be4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b06      	cmp	r3, #6
 8007bd0:	d010      	beq.n	8007bf4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0201 	orr.w	r2, r2, #1
 8007be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be2:	e007      	b.n	8007bf4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f042 0201 	orr.w	r2, r2, #1
 8007bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	40010000 	.word	0x40010000
 8007c08:	40000400 	.word	0x40000400
 8007c0c:	40000800 	.word	0x40000800
 8007c10:	40000c00 	.word	0x40000c00
 8007c14:	40010400 	.word	0x40010400
 8007c18:	40014000 	.word	0x40014000
 8007c1c:	40001800 	.word	0x40001800

08007c20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0201 	bic.w	r2, r2, #1
 8007c36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6a1a      	ldr	r2, [r3, #32]
 8007c3e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c42:	4013      	ands	r3, r2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10f      	bne.n	8007c68 <HAL_TIM_Base_Stop_IT+0x48>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6a1a      	ldr	r2, [r3, #32]
 8007c4e:	f240 4344 	movw	r3, #1092	; 0x444
 8007c52:	4013      	ands	r3, r2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d107      	bne.n	8007c68 <HAL_TIM_Base_Stop_IT+0x48>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 0201 	bic.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d122      	bne.n	8007cda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d11b      	bne.n	8007cda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f06f 0202 	mvn.w	r2, #2
 8007caa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	f003 0303 	and.w	r3, r3, #3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f9b5 	bl	8008030 <HAL_TIM_IC_CaptureCallback>
 8007cc6:	e005      	b.n	8007cd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f9a7 	bl	800801c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f9b8 	bl	8008044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	f003 0304 	and.w	r3, r3, #4
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d122      	bne.n	8007d2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	f003 0304 	and.w	r3, r3, #4
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d11b      	bne.n	8007d2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f06f 0204 	mvn.w	r2, #4
 8007cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f98b 	bl	8008030 <HAL_TIM_IC_CaptureCallback>
 8007d1a:	e005      	b.n	8007d28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f97d 	bl	800801c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f98e 	bl	8008044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	f003 0308 	and.w	r3, r3, #8
 8007d38:	2b08      	cmp	r3, #8
 8007d3a:	d122      	bne.n	8007d82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	f003 0308 	and.w	r3, r3, #8
 8007d46:	2b08      	cmp	r3, #8
 8007d48:	d11b      	bne.n	8007d82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f06f 0208 	mvn.w	r2, #8
 8007d52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2204      	movs	r2, #4
 8007d58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f961 	bl	8008030 <HAL_TIM_IC_CaptureCallback>
 8007d6e:	e005      	b.n	8007d7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f953 	bl	800801c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f964 	bl	8008044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f003 0310 	and.w	r3, r3, #16
 8007d8c:	2b10      	cmp	r3, #16
 8007d8e:	d122      	bne.n	8007dd6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f003 0310 	and.w	r3, r3, #16
 8007d9a:	2b10      	cmp	r3, #16
 8007d9c:	d11b      	bne.n	8007dd6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f06f 0210 	mvn.w	r2, #16
 8007da6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2208      	movs	r2, #8
 8007dac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f937 	bl	8008030 <HAL_TIM_IC_CaptureCallback>
 8007dc2:	e005      	b.n	8007dd0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f929 	bl	800801c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f93a 	bl	8008044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d10e      	bne.n	8007e02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d107      	bne.n	8007e02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f06f 0201 	mvn.w	r2, #1
 8007dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7fb f8b3 	bl	8002f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e0c:	2b80      	cmp	r3, #128	; 0x80
 8007e0e:	d10e      	bne.n	8007e2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e1a:	2b80      	cmp	r3, #128	; 0x80
 8007e1c:	d107      	bne.n	8007e2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fadf 	bl	80083ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e38:	2b40      	cmp	r3, #64	; 0x40
 8007e3a:	d10e      	bne.n	8007e5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e46:	2b40      	cmp	r3, #64	; 0x40
 8007e48:	d107      	bne.n	8007e5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f8ff 	bl	8008058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	f003 0320 	and.w	r3, r3, #32
 8007e64:	2b20      	cmp	r3, #32
 8007e66:	d10e      	bne.n	8007e86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	f003 0320 	and.w	r3, r3, #32
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d107      	bne.n	8007e86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f06f 0220 	mvn.w	r2, #32
 8007e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 faa9 	bl	80083d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d101      	bne.n	8007eaa <HAL_TIM_ConfigClockSource+0x1c>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	e0b4      	b.n	8008014 <HAL_TIM_ConfigClockSource+0x186>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ec8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ed0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee2:	d03e      	beq.n	8007f62 <HAL_TIM_ConfigClockSource+0xd4>
 8007ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee8:	f200 8087 	bhi.w	8007ffa <HAL_TIM_ConfigClockSource+0x16c>
 8007eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef0:	f000 8086 	beq.w	8008000 <HAL_TIM_ConfigClockSource+0x172>
 8007ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef8:	d87f      	bhi.n	8007ffa <HAL_TIM_ConfigClockSource+0x16c>
 8007efa:	2b70      	cmp	r3, #112	; 0x70
 8007efc:	d01a      	beq.n	8007f34 <HAL_TIM_ConfigClockSource+0xa6>
 8007efe:	2b70      	cmp	r3, #112	; 0x70
 8007f00:	d87b      	bhi.n	8007ffa <HAL_TIM_ConfigClockSource+0x16c>
 8007f02:	2b60      	cmp	r3, #96	; 0x60
 8007f04:	d050      	beq.n	8007fa8 <HAL_TIM_ConfigClockSource+0x11a>
 8007f06:	2b60      	cmp	r3, #96	; 0x60
 8007f08:	d877      	bhi.n	8007ffa <HAL_TIM_ConfigClockSource+0x16c>
 8007f0a:	2b50      	cmp	r3, #80	; 0x50
 8007f0c:	d03c      	beq.n	8007f88 <HAL_TIM_ConfigClockSource+0xfa>
 8007f0e:	2b50      	cmp	r3, #80	; 0x50
 8007f10:	d873      	bhi.n	8007ffa <HAL_TIM_ConfigClockSource+0x16c>
 8007f12:	2b40      	cmp	r3, #64	; 0x40
 8007f14:	d058      	beq.n	8007fc8 <HAL_TIM_ConfigClockSource+0x13a>
 8007f16:	2b40      	cmp	r3, #64	; 0x40
 8007f18:	d86f      	bhi.n	8007ffa <HAL_TIM_ConfigClockSource+0x16c>
 8007f1a:	2b30      	cmp	r3, #48	; 0x30
 8007f1c:	d064      	beq.n	8007fe8 <HAL_TIM_ConfigClockSource+0x15a>
 8007f1e:	2b30      	cmp	r3, #48	; 0x30
 8007f20:	d86b      	bhi.n	8007ffa <HAL_TIM_ConfigClockSource+0x16c>
 8007f22:	2b20      	cmp	r3, #32
 8007f24:	d060      	beq.n	8007fe8 <HAL_TIM_ConfigClockSource+0x15a>
 8007f26:	2b20      	cmp	r3, #32
 8007f28:	d867      	bhi.n	8007ffa <HAL_TIM_ConfigClockSource+0x16c>
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d05c      	beq.n	8007fe8 <HAL_TIM_ConfigClockSource+0x15a>
 8007f2e:	2b10      	cmp	r3, #16
 8007f30:	d05a      	beq.n	8007fe8 <HAL_TIM_ConfigClockSource+0x15a>
 8007f32:	e062      	b.n	8007ffa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6818      	ldr	r0, [r3, #0]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	6899      	ldr	r1, [r3, #8]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f000 f9ac 	bl	80082a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f56:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	609a      	str	r2, [r3, #8]
      break;
 8007f60:	e04f      	b.n	8008002 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6818      	ldr	r0, [r3, #0]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	6899      	ldr	r1, [r3, #8]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f000 f995 	bl	80082a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689a      	ldr	r2, [r3, #8]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f84:	609a      	str	r2, [r3, #8]
      break;
 8007f86:	e03c      	b.n	8008002 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6818      	ldr	r0, [r3, #0]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	6859      	ldr	r1, [r3, #4]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	461a      	mov	r2, r3
 8007f96:	f000 f909 	bl	80081ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2150      	movs	r1, #80	; 0x50
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 f962 	bl	800826a <TIM_ITRx_SetConfig>
      break;
 8007fa6:	e02c      	b.n	8008002 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	6859      	ldr	r1, [r3, #4]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	f000 f928 	bl	800820a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2160      	movs	r1, #96	; 0x60
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 f952 	bl	800826a <TIM_ITRx_SetConfig>
      break;
 8007fc6:	e01c      	b.n	8008002 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6818      	ldr	r0, [r3, #0]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	6859      	ldr	r1, [r3, #4]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	f000 f8e9 	bl	80081ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2140      	movs	r1, #64	; 0x40
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 f942 	bl	800826a <TIM_ITRx_SetConfig>
      break;
 8007fe6:	e00c      	b.n	8008002 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	f000 f939 	bl	800826a <TIM_ITRx_SetConfig>
      break;
 8007ff8:	e003      	b.n	8008002 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ffe:	e000      	b.n	8008002 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008000:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008012:	7bfb      	ldrb	r3, [r7, #15]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a40      	ldr	r2, [pc, #256]	; (8008180 <TIM_Base_SetConfig+0x114>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d013      	beq.n	80080ac <TIM_Base_SetConfig+0x40>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800808a:	d00f      	beq.n	80080ac <TIM_Base_SetConfig+0x40>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a3d      	ldr	r2, [pc, #244]	; (8008184 <TIM_Base_SetConfig+0x118>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d00b      	beq.n	80080ac <TIM_Base_SetConfig+0x40>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a3c      	ldr	r2, [pc, #240]	; (8008188 <TIM_Base_SetConfig+0x11c>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d007      	beq.n	80080ac <TIM_Base_SetConfig+0x40>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a3b      	ldr	r2, [pc, #236]	; (800818c <TIM_Base_SetConfig+0x120>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d003      	beq.n	80080ac <TIM_Base_SetConfig+0x40>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a3a      	ldr	r2, [pc, #232]	; (8008190 <TIM_Base_SetConfig+0x124>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d108      	bne.n	80080be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a2f      	ldr	r2, [pc, #188]	; (8008180 <TIM_Base_SetConfig+0x114>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d02b      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080cc:	d027      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a2c      	ldr	r2, [pc, #176]	; (8008184 <TIM_Base_SetConfig+0x118>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d023      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a2b      	ldr	r2, [pc, #172]	; (8008188 <TIM_Base_SetConfig+0x11c>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d01f      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a2a      	ldr	r2, [pc, #168]	; (800818c <TIM_Base_SetConfig+0x120>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d01b      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a29      	ldr	r2, [pc, #164]	; (8008190 <TIM_Base_SetConfig+0x124>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d017      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a28      	ldr	r2, [pc, #160]	; (8008194 <TIM_Base_SetConfig+0x128>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d013      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a27      	ldr	r2, [pc, #156]	; (8008198 <TIM_Base_SetConfig+0x12c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d00f      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a26      	ldr	r2, [pc, #152]	; (800819c <TIM_Base_SetConfig+0x130>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d00b      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a25      	ldr	r2, [pc, #148]	; (80081a0 <TIM_Base_SetConfig+0x134>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d007      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a24      	ldr	r2, [pc, #144]	; (80081a4 <TIM_Base_SetConfig+0x138>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d003      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a23      	ldr	r2, [pc, #140]	; (80081a8 <TIM_Base_SetConfig+0x13c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d108      	bne.n	8008130 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	4313      	orrs	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	4313      	orrs	r3, r2
 800813c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a0a      	ldr	r2, [pc, #40]	; (8008180 <TIM_Base_SetConfig+0x114>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d003      	beq.n	8008164 <TIM_Base_SetConfig+0xf8>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a0c      	ldr	r2, [pc, #48]	; (8008190 <TIM_Base_SetConfig+0x124>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d103      	bne.n	800816c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	691a      	ldr	r2, [r3, #16]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	615a      	str	r2, [r3, #20]
}
 8008172:	bf00      	nop
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	40010000 	.word	0x40010000
 8008184:	40000400 	.word	0x40000400
 8008188:	40000800 	.word	0x40000800
 800818c:	40000c00 	.word	0x40000c00
 8008190:	40010400 	.word	0x40010400
 8008194:	40014000 	.word	0x40014000
 8008198:	40014400 	.word	0x40014400
 800819c:	40014800 	.word	0x40014800
 80081a0:	40001800 	.word	0x40001800
 80081a4:	40001c00 	.word	0x40001c00
 80081a8:	40002000 	.word	0x40002000

080081ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6a1b      	ldr	r3, [r3, #32]
 80081bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	f023 0201 	bic.w	r2, r3, #1
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	011b      	lsls	r3, r3, #4
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	4313      	orrs	r3, r2
 80081e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f023 030a 	bic.w	r3, r3, #10
 80081e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	621a      	str	r2, [r3, #32]
}
 80081fe:	bf00      	nop
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800820a:	b480      	push	{r7}
 800820c:	b087      	sub	sp, #28
 800820e:	af00      	add	r7, sp, #0
 8008210:	60f8      	str	r0, [r7, #12]
 8008212:	60b9      	str	r1, [r7, #8]
 8008214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	f023 0210 	bic.w	r2, r3, #16
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	031b      	lsls	r3, r3, #12
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	4313      	orrs	r3, r2
 800823e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008246:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	011b      	lsls	r3, r3, #4
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	4313      	orrs	r3, r2
 8008250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	621a      	str	r2, [r3, #32]
}
 800825e:	bf00      	nop
 8008260:	371c      	adds	r7, #28
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800826a:	b480      	push	{r7}
 800826c:	b085      	sub	sp, #20
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	4313      	orrs	r3, r2
 8008288:	f043 0307 	orr.w	r3, r3, #7
 800828c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	609a      	str	r2, [r3, #8]
}
 8008294:	bf00      	nop
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	021a      	lsls	r2, r3, #8
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	431a      	orrs	r2, r3
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	609a      	str	r2, [r3, #8]
}
 80082d4:	bf00      	nop
 80082d6:	371c      	adds	r7, #28
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d101      	bne.n	80082f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082f4:	2302      	movs	r3, #2
 80082f6:	e05a      	b.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	4313      	orrs	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a21      	ldr	r2, [pc, #132]	; (80083bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d022      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008344:	d01d      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a1d      	ldr	r2, [pc, #116]	; (80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d018      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a1b      	ldr	r2, [pc, #108]	; (80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d013      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a1a      	ldr	r2, [pc, #104]	; (80083c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00e      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a18      	ldr	r2, [pc, #96]	; (80083cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d009      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a17      	ldr	r2, [pc, #92]	; (80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d004      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a15      	ldr	r2, [pc, #84]	; (80083d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d10c      	bne.n	800839c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	4313      	orrs	r3, r2
 8008392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	40010000 	.word	0x40010000
 80083c0:	40000400 	.word	0x40000400
 80083c4:	40000800 	.word	0x40000800
 80083c8:	40000c00 	.word	0x40000c00
 80083cc:	40010400 	.word	0x40010400
 80083d0:	40014000 	.word	0x40014000
 80083d4:	40001800 	.word	0x40001800

080083d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e03f      	b.n	8008492 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d106      	bne.n	800842c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7fb fa66 	bl	80038f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2224      	movs	r2, #36	; 0x24
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008442:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 ff9b 	bl	8009380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008458:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	695a      	ldr	r2, [r3, #20]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008468:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008478:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2220      	movs	r2, #32
 8008484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b08a      	sub	sp, #40	; 0x28
 800849e:	af02      	add	r7, sp, #8
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	60b9      	str	r1, [r7, #8]
 80084a4:	603b      	str	r3, [r7, #0]
 80084a6:	4613      	mov	r3, r2
 80084a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d17c      	bne.n	80085b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <HAL_UART_Transmit+0x2c>
 80084c0:	88fb      	ldrh	r3, [r7, #6]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e075      	b.n	80085b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d101      	bne.n	80084d8 <HAL_UART_Transmit+0x3e>
 80084d4:	2302      	movs	r3, #2
 80084d6:	e06e      	b.n	80085b6 <HAL_UART_Transmit+0x11c>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2221      	movs	r2, #33	; 0x21
 80084ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084ee:	f7fc f885 	bl	80045fc <HAL_GetTick>
 80084f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	88fa      	ldrh	r2, [r7, #6]
 80084f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	88fa      	ldrh	r2, [r7, #6]
 80084fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008508:	d108      	bne.n	800851c <HAL_UART_Transmit+0x82>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d104      	bne.n	800851c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008512:	2300      	movs	r3, #0
 8008514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	61bb      	str	r3, [r7, #24]
 800851a:	e003      	b.n	8008524 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008520:	2300      	movs	r3, #0
 8008522:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800852c:	e02a      	b.n	8008584 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2200      	movs	r2, #0
 8008536:	2180      	movs	r1, #128	; 0x80
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 fc53 	bl	8008de4 <UART_WaitOnFlagUntilTimeout>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e036      	b.n	80085b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10b      	bne.n	8008566 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800855c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	3302      	adds	r3, #2
 8008562:	61bb      	str	r3, [r7, #24]
 8008564:	e007      	b.n	8008576 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	781a      	ldrb	r2, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	3301      	adds	r3, #1
 8008574:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800857a:	b29b      	uxth	r3, r3
 800857c:	3b01      	subs	r3, #1
 800857e:	b29a      	uxth	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008588:	b29b      	uxth	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1cf      	bne.n	800852e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2200      	movs	r2, #0
 8008596:	2140      	movs	r1, #64	; 0x40
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 fc23 	bl	8008de4 <UART_WaitOnFlagUntilTimeout>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e006      	b.n	80085b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	e000      	b.n	80085b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80085b4:	2302      	movs	r3, #2
  }
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3720      	adds	r7, #32
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b08c      	sub	sp, #48	; 0x30
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	60f8      	str	r0, [r7, #12]
 80085c6:	60b9      	str	r1, [r7, #8]
 80085c8:	4613      	mov	r3, r2
 80085ca:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b20      	cmp	r3, #32
 80085d6:	d152      	bne.n	800867e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80085de:	88fb      	ldrh	r3, [r7, #6]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e04b      	b.n	8008680 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d101      	bne.n	80085f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80085f2:	2302      	movs	r3, #2
 80085f4:	e044      	b.n	8008680 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2201      	movs	r2, #1
 8008602:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008604:	88fb      	ldrh	r3, [r7, #6]
 8008606:	461a      	mov	r2, r3
 8008608:	68b9      	ldr	r1, [r7, #8]
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 fc58 	bl	8008ec0 <UART_Start_Receive_DMA>
 8008610:	4603      	mov	r3, r0
 8008612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008616:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800861a:	2b00      	cmp	r3, #0
 800861c:	d12c      	bne.n	8008678 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008622:	2b01      	cmp	r3, #1
 8008624:	d125      	bne.n	8008672 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008626:	2300      	movs	r3, #0
 8008628:	613b      	str	r3, [r7, #16]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	613b      	str	r3, [r7, #16]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	613b      	str	r3, [r7, #16]
 800863a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	330c      	adds	r3, #12
 8008642:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	617b      	str	r3, [r7, #20]
   return(result);
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f043 0310 	orr.w	r3, r3, #16
 8008652:	62bb      	str	r3, [r7, #40]	; 0x28
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	330c      	adds	r3, #12
 800865a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800865c:	627a      	str	r2, [r7, #36]	; 0x24
 800865e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	6a39      	ldr	r1, [r7, #32]
 8008662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008664:	e841 2300 	strex	r3, r2, [r1]
 8008668:	61fb      	str	r3, [r7, #28]
   return(result);
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e5      	bne.n	800863c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008670:	e002      	b.n	8008678 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008678:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800867c:	e000      	b.n	8008680 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800867e:	2302      	movs	r3, #2
  }
}
 8008680:	4618      	mov	r0, r3
 8008682:	3730      	adds	r7, #48	; 0x30
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b0ba      	sub	sp, #232	; 0xe8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80086ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086be:	f003 030f 	and.w	r3, r3, #15
 80086c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80086c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10f      	bne.n	80086ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d2:	f003 0320 	and.w	r3, r3, #32
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d009      	beq.n	80086ee <HAL_UART_IRQHandler+0x66>
 80086da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086de:	f003 0320 	and.w	r3, r3, #32
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d003      	beq.n	80086ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fd8f 	bl	800920a <UART_Receive_IT>
      return;
 80086ec:	e256      	b.n	8008b9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80086ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 80de 	beq.w	80088b4 <HAL_UART_IRQHandler+0x22c>
 80086f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008708:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 80d1 	beq.w	80088b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <HAL_UART_IRQHandler+0xae>
 800871e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008726:	2b00      	cmp	r3, #0
 8008728:	d005      	beq.n	8008736 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872e:	f043 0201 	orr.w	r2, r3, #1
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00b      	beq.n	800875a <HAL_UART_IRQHandler+0xd2>
 8008742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d005      	beq.n	800875a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008752:	f043 0202 	orr.w	r2, r3, #2
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800875a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00b      	beq.n	800877e <HAL_UART_IRQHandler+0xf6>
 8008766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b00      	cmp	r3, #0
 8008770:	d005      	beq.n	800877e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008776:	f043 0204 	orr.w	r2, r3, #4
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800877e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d011      	beq.n	80087ae <HAL_UART_IRQHandler+0x126>
 800878a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800878e:	f003 0320 	and.w	r3, r3, #32
 8008792:	2b00      	cmp	r3, #0
 8008794:	d105      	bne.n	80087a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d005      	beq.n	80087ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	f043 0208 	orr.w	r2, r3, #8
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 81ed 	beq.w	8008b92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d008      	beq.n	80087d6 <HAL_UART_IRQHandler+0x14e>
 80087c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087c8:	f003 0320 	and.w	r3, r3, #32
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fd1a 	bl	800920a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e0:	2b40      	cmp	r3, #64	; 0x40
 80087e2:	bf0c      	ite	eq
 80087e4:	2301      	moveq	r3, #1
 80087e6:	2300      	movne	r3, #0
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d103      	bne.n	8008802 <HAL_UART_IRQHandler+0x17a>
 80087fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d04f      	beq.n	80088a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fc22 	bl	800904c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008812:	2b40      	cmp	r3, #64	; 0x40
 8008814:	d141      	bne.n	800889a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3314      	adds	r3, #20
 800881c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008820:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008824:	e853 3f00 	ldrex	r3, [r3]
 8008828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800882c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3314      	adds	r3, #20
 800883e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008842:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800884e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800885a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1d9      	bne.n	8008816 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008866:	2b00      	cmp	r3, #0
 8008868:	d013      	beq.n	8008892 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886e:	4a7d      	ldr	r2, [pc, #500]	; (8008a64 <HAL_UART_IRQHandler+0x3dc>)
 8008870:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008876:	4618      	mov	r0, r3
 8008878:	f7fc fd8a 	bl	8005390 <HAL_DMA_Abort_IT>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d016      	beq.n	80088b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800888c:	4610      	mov	r0, r2
 800888e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008890:	e00e      	b.n	80088b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f9a4 	bl	8008be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008898:	e00a      	b.n	80088b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f9a0 	bl	8008be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a0:	e006      	b.n	80088b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f99c 	bl	8008be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80088ae:	e170      	b.n	8008b92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088b0:	bf00      	nop
    return;
 80088b2:	e16e      	b.n	8008b92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	f040 814a 	bne.w	8008b52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80088be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088c2:	f003 0310 	and.w	r3, r3, #16
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 8143 	beq.w	8008b52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80088cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d0:	f003 0310 	and.w	r3, r3, #16
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 813c 	beq.w	8008b52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088da:	2300      	movs	r3, #0
 80088dc:	60bb      	str	r3, [r7, #8]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	60bb      	str	r3, [r7, #8]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	60bb      	str	r3, [r7, #8]
 80088ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fa:	2b40      	cmp	r3, #64	; 0x40
 80088fc:	f040 80b4 	bne.w	8008a68 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800890c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 8140 	beq.w	8008b96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800891a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800891e:	429a      	cmp	r2, r3
 8008920:	f080 8139 	bcs.w	8008b96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800892a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008936:	f000 8088 	beq.w	8008a4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	330c      	adds	r3, #12
 8008940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008944:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008950:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008958:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	330c      	adds	r3, #12
 8008962:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008966:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800896a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008972:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800897e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1d9      	bne.n	800893a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3314      	adds	r3, #20
 800898c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008998:	f023 0301 	bic.w	r3, r3, #1
 800899c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3314      	adds	r3, #20
 80089a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80089aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80089ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80089b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80089b6:	e841 2300 	strex	r3, r2, [r1]
 80089ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80089bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1e1      	bne.n	8008986 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3314      	adds	r3, #20
 80089c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089cc:	e853 3f00 	ldrex	r3, [r3]
 80089d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80089d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3314      	adds	r3, #20
 80089e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80089e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80089e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80089ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80089ee:	e841 2300 	strex	r3, r2, [r1]
 80089f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80089f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1e3      	bne.n	80089c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2220      	movs	r2, #32
 80089fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	330c      	adds	r3, #12
 8008a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a12:	e853 3f00 	ldrex	r3, [r3]
 8008a16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a1a:	f023 0310 	bic.w	r3, r3, #16
 8008a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	330c      	adds	r3, #12
 8008a28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008a2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008a2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a34:	e841 2300 	strex	r3, r2, [r1]
 8008a38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e3      	bne.n	8008a08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fc fc33 	bl	80052b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7f9 ffa2 	bl	80029a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a60:	e099      	b.n	8008b96 <HAL_UART_IRQHandler+0x50e>
 8008a62:	bf00      	nop
 8008a64:	08009113 	.word	0x08009113
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 808b 	beq.w	8008b9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008a84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 8086 	beq.w	8008b9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	330c      	adds	r3, #12
 8008a94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a98:	e853 3f00 	ldrex	r3, [r3]
 8008a9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008aa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	330c      	adds	r3, #12
 8008aae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008ab2:	647a      	str	r2, [r7, #68]	; 0x44
 8008ab4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008aba:	e841 2300 	strex	r3, r2, [r1]
 8008abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1e3      	bne.n	8008a8e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3314      	adds	r3, #20
 8008acc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad0:	e853 3f00 	ldrex	r3, [r3]
 8008ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ad6:	6a3b      	ldr	r3, [r7, #32]
 8008ad8:	f023 0301 	bic.w	r3, r3, #1
 8008adc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3314      	adds	r3, #20
 8008ae6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008aea:	633a      	str	r2, [r7, #48]	; 0x30
 8008aec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e3      	bne.n	8008ac6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	330c      	adds	r3, #12
 8008b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	e853 3f00 	ldrex	r3, [r3]
 8008b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f023 0310 	bic.w	r3, r3, #16
 8008b22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	330c      	adds	r3, #12
 8008b2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008b30:	61fa      	str	r2, [r7, #28]
 8008b32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b34:	69b9      	ldr	r1, [r7, #24]
 8008b36:	69fa      	ldr	r2, [r7, #28]
 8008b38:	e841 2300 	strex	r3, r2, [r1]
 8008b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1e3      	bne.n	8008b0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7f9 ff2a 	bl	80029a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b50:	e023      	b.n	8008b9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d009      	beq.n	8008b72 <HAL_UART_IRQHandler+0x4ea>
 8008b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d003      	beq.n	8008b72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fae5 	bl	800913a <UART_Transmit_IT>
    return;
 8008b70:	e014      	b.n	8008b9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00e      	beq.n	8008b9c <HAL_UART_IRQHandler+0x514>
 8008b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d008      	beq.n	8008b9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fb25 	bl	80091da <UART_EndTransmit_IT>
    return;
 8008b90:	e004      	b.n	8008b9c <HAL_UART_IRQHandler+0x514>
    return;
 8008b92:	bf00      	nop
 8008b94:	e002      	b.n	8008b9c <HAL_UART_IRQHandler+0x514>
      return;
 8008b96:	bf00      	nop
 8008b98:	e000      	b.n	8008b9c <HAL_UART_IRQHandler+0x514>
      return;
 8008b9a:	bf00      	nop
  }
}
 8008b9c:	37e8      	adds	r7, #232	; 0xe8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop

08008ba4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b09c      	sub	sp, #112	; 0x70
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c00:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d172      	bne.n	8008cf6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c12:	2200      	movs	r2, #0
 8008c14:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	330c      	adds	r3, #12
 8008c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c20:	e853 3f00 	ldrex	r3, [r3]
 8008c24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	330c      	adds	r3, #12
 8008c34:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c36:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c38:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c3e:	e841 2300 	strex	r3, r2, [r1]
 8008c42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1e5      	bne.n	8008c16 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3314      	adds	r3, #20
 8008c50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	e853 3f00 	ldrex	r3, [r3]
 8008c58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5c:	f023 0301 	bic.w	r3, r3, #1
 8008c60:	667b      	str	r3, [r7, #100]	; 0x64
 8008c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3314      	adds	r3, #20
 8008c68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c6a:	647a      	str	r2, [r7, #68]	; 0x44
 8008c6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c72:	e841 2300 	strex	r3, r2, [r1]
 8008c76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1e5      	bne.n	8008c4a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3314      	adds	r3, #20
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	e853 3f00 	ldrex	r3, [r3]
 8008c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c94:	663b      	str	r3, [r7, #96]	; 0x60
 8008c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3314      	adds	r3, #20
 8008c9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c9e:	633a      	str	r2, [r7, #48]	; 0x30
 8008ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca6:	e841 2300 	strex	r3, r2, [r1]
 8008caa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1e5      	bne.n	8008c7e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d119      	bne.n	8008cf6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	330c      	adds	r3, #12
 8008cc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	e853 3f00 	ldrex	r3, [r3]
 8008cd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f023 0310 	bic.w	r3, r3, #16
 8008cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	330c      	adds	r3, #12
 8008ce0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ce2:	61fa      	str	r2, [r7, #28]
 8008ce4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce6:	69b9      	ldr	r1, [r7, #24]
 8008ce8:	69fa      	ldr	r2, [r7, #28]
 8008cea:	e841 2300 	strex	r3, r2, [r1]
 8008cee:	617b      	str	r3, [r7, #20]
   return(result);
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1e5      	bne.n	8008cc2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d106      	bne.n	8008d0c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d02:	4619      	mov	r1, r3
 8008d04:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008d06:	f7f9 fe4d 	bl	80029a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d0a:	e002      	b.n	8008d12 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008d0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008d0e:	f7ff ff53 	bl	8008bb8 <HAL_UART_RxCpltCallback>
}
 8008d12:	bf00      	nop
 8008d14:	3770      	adds	r7, #112	; 0x70
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b084      	sub	sp, #16
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d26:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d108      	bne.n	8008d42 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d34:	085b      	lsrs	r3, r3, #1
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	4619      	mov	r1, r3
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f7f9 fe32 	bl	80029a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d40:	e002      	b.n	8008d48 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f7ff ff42 	bl	8008bcc <HAL_UART_RxHalfCpltCallback>
}
 8008d48:	bf00      	nop
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d60:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d6c:	2b80      	cmp	r3, #128	; 0x80
 8008d6e:	bf0c      	ite	eq
 8008d70:	2301      	moveq	r3, #1
 8008d72:	2300      	movne	r3, #0
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b21      	cmp	r3, #33	; 0x21
 8008d82:	d108      	bne.n	8008d96 <UART_DMAError+0x46>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008d90:	68b8      	ldr	r0, [r7, #8]
 8008d92:	f000 f933 	bl	8008ffc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	695b      	ldr	r3, [r3, #20]
 8008d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da0:	2b40      	cmp	r3, #64	; 0x40
 8008da2:	bf0c      	ite	eq
 8008da4:	2301      	moveq	r3, #1
 8008da6:	2300      	movne	r3, #0
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b22      	cmp	r3, #34	; 0x22
 8008db6:	d108      	bne.n	8008dca <UART_DMAError+0x7a>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d005      	beq.n	8008dca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008dc4:	68b8      	ldr	r0, [r7, #8]
 8008dc6:	f000 f941 	bl	800904c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dce:	f043 0210 	orr.w	r2, r3, #16
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dd6:	68b8      	ldr	r0, [r7, #8]
 8008dd8:	f7ff ff02 	bl	8008be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ddc:	bf00      	nop
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b090      	sub	sp, #64	; 0x40
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	603b      	str	r3, [r7, #0]
 8008df0:	4613      	mov	r3, r2
 8008df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008df4:	e050      	b.n	8008e98 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfc:	d04c      	beq.n	8008e98 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d007      	beq.n	8008e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e04:	f7fb fbfa 	bl	80045fc <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d241      	bcs.n	8008e98 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	330c      	adds	r3, #12
 8008e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	e853 3f00 	ldrex	r3, [r3]
 8008e22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	330c      	adds	r3, #12
 8008e32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e34:	637a      	str	r2, [r7, #52]	; 0x34
 8008e36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e3c:	e841 2300 	strex	r3, r2, [r1]
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1e5      	bne.n	8008e14 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3314      	adds	r3, #20
 8008e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	e853 3f00 	ldrex	r3, [r3]
 8008e56:	613b      	str	r3, [r7, #16]
   return(result);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f023 0301 	bic.w	r3, r3, #1
 8008e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3314      	adds	r3, #20
 8008e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e68:	623a      	str	r2, [r7, #32]
 8008e6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6c:	69f9      	ldr	r1, [r7, #28]
 8008e6e:	6a3a      	ldr	r2, [r7, #32]
 8008e70:	e841 2300 	strex	r3, r2, [r1]
 8008e74:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1e5      	bne.n	8008e48 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2220      	movs	r2, #32
 8008e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2220      	movs	r2, #32
 8008e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e00f      	b.n	8008eb8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	bf0c      	ite	eq
 8008ea8:	2301      	moveq	r3, #1
 8008eaa:	2300      	movne	r3, #0
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	461a      	mov	r2, r3
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d09f      	beq.n	8008df6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3740      	adds	r7, #64	; 0x40
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b098      	sub	sp, #96	; 0x60
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	88fa      	ldrh	r2, [r7, #6]
 8008ed8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2222      	movs	r2, #34	; 0x22
 8008ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eec:	4a40      	ldr	r2, [pc, #256]	; (8008ff0 <UART_Start_Receive_DMA+0x130>)
 8008eee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef4:	4a3f      	ldr	r2, [pc, #252]	; (8008ff4 <UART_Start_Receive_DMA+0x134>)
 8008ef6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efc:	4a3e      	ldr	r2, [pc, #248]	; (8008ff8 <UART_Start_Receive_DMA+0x138>)
 8008efe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f04:	2200      	movs	r2, #0
 8008f06:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008f08:	f107 0308 	add.w	r3, r7, #8
 8008f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3304      	adds	r3, #4
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	88fb      	ldrh	r3, [r7, #6]
 8008f20:	f7fc f96e 	bl	8005200 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008f24:	2300      	movs	r3, #0
 8008f26:	613b      	str	r3, [r7, #16]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	613b      	str	r3, [r7, #16]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	613b      	str	r3, [r7, #16]
 8008f38:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d019      	beq.n	8008f7e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	330c      	adds	r3, #12
 8008f50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f54:	e853 3f00 	ldrex	r3, [r3]
 8008f58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f60:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	330c      	adds	r3, #12
 8008f68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f6a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008f6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f72:	e841 2300 	strex	r3, r2, [r1]
 8008f76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1e5      	bne.n	8008f4a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3314      	adds	r3, #20
 8008f84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f88:	e853 3f00 	ldrex	r3, [r3]
 8008f8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f90:	f043 0301 	orr.w	r3, r3, #1
 8008f94:	657b      	str	r3, [r7, #84]	; 0x54
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3314      	adds	r3, #20
 8008f9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f9e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008fa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fa6:	e841 2300 	strex	r3, r2, [r1]
 8008faa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1e5      	bne.n	8008f7e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3314      	adds	r3, #20
 8008fb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc8:	653b      	str	r3, [r7, #80]	; 0x50
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3314      	adds	r3, #20
 8008fd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fd2:	627a      	str	r2, [r7, #36]	; 0x24
 8008fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd6:	6a39      	ldr	r1, [r7, #32]
 8008fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e5      	bne.n	8008fb2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3760      	adds	r7, #96	; 0x60
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	08008bf5 	.word	0x08008bf5
 8008ff4:	08008d1b 	.word	0x08008d1b
 8008ff8:	08008d51 	.word	0x08008d51

08008ffc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b089      	sub	sp, #36	; 0x24
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	330c      	adds	r3, #12
 800900a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	e853 3f00 	ldrex	r3, [r3]
 8009012:	60bb      	str	r3, [r7, #8]
   return(result);
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800901a:	61fb      	str	r3, [r7, #28]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	330c      	adds	r3, #12
 8009022:	69fa      	ldr	r2, [r7, #28]
 8009024:	61ba      	str	r2, [r7, #24]
 8009026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009028:	6979      	ldr	r1, [r7, #20]
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	e841 2300 	strex	r3, r2, [r1]
 8009030:	613b      	str	r3, [r7, #16]
   return(result);
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e5      	bne.n	8009004 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2220      	movs	r2, #32
 800903c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009040:	bf00      	nop
 8009042:	3724      	adds	r7, #36	; 0x24
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800904c:	b480      	push	{r7}
 800904e:	b095      	sub	sp, #84	; 0x54
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	330c      	adds	r3, #12
 800905a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905e:	e853 3f00 	ldrex	r3, [r3]
 8009062:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009066:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800906a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	330c      	adds	r3, #12
 8009072:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009074:	643a      	str	r2, [r7, #64]	; 0x40
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009078:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800907a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800907c:	e841 2300 	strex	r3, r2, [r1]
 8009080:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1e5      	bne.n	8009054 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3314      	adds	r3, #20
 800908e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009090:	6a3b      	ldr	r3, [r7, #32]
 8009092:	e853 3f00 	ldrex	r3, [r3]
 8009096:	61fb      	str	r3, [r7, #28]
   return(result);
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	f023 0301 	bic.w	r3, r3, #1
 800909e:	64bb      	str	r3, [r7, #72]	; 0x48
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3314      	adds	r3, #20
 80090a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090b0:	e841 2300 	strex	r3, r2, [r1]
 80090b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1e5      	bne.n	8009088 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d119      	bne.n	80090f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	330c      	adds	r3, #12
 80090ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	f023 0310 	bic.w	r3, r3, #16
 80090da:	647b      	str	r3, [r7, #68]	; 0x44
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	330c      	adds	r3, #12
 80090e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090e4:	61ba      	str	r2, [r7, #24]
 80090e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	6979      	ldr	r1, [r7, #20]
 80090ea:	69ba      	ldr	r2, [r7, #24]
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	613b      	str	r3, [r7, #16]
   return(result);
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e5      	bne.n	80090c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009106:	bf00      	nop
 8009108:	3754      	adds	r7, #84	; 0x54
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f7ff fd57 	bl	8008be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009132:	bf00      	nop
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800913a:	b480      	push	{r7}
 800913c:	b085      	sub	sp, #20
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b21      	cmp	r3, #33	; 0x21
 800914c:	d13e      	bne.n	80091cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009156:	d114      	bne.n	8009182 <UART_Transmit_IT+0x48>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d110      	bne.n	8009182 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009174:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	1c9a      	adds	r2, r3, #2
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	621a      	str	r2, [r3, #32]
 8009180:	e008      	b.n	8009194 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	1c59      	adds	r1, r3, #1
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	6211      	str	r1, [r2, #32]
 800918c:	781a      	ldrb	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009198:	b29b      	uxth	r3, r3
 800919a:	3b01      	subs	r3, #1
 800919c:	b29b      	uxth	r3, r3
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	4619      	mov	r1, r3
 80091a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10f      	bne.n	80091c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68da      	ldr	r2, [r3, #12]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	e000      	b.n	80091ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091cc:	2302      	movs	r3, #2
  }
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2220      	movs	r2, #32
 80091f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff fcd2 	bl	8008ba4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b08c      	sub	sp, #48	; 0x30
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b22      	cmp	r3, #34	; 0x22
 800921c:	f040 80ab 	bne.w	8009376 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009228:	d117      	bne.n	800925a <UART_Receive_IT+0x50>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d113      	bne.n	800925a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009232:	2300      	movs	r3, #0
 8009234:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	b29b      	uxth	r3, r3
 8009244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009248:	b29a      	uxth	r2, r3
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009252:	1c9a      	adds	r2, r3, #2
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	629a      	str	r2, [r3, #40]	; 0x28
 8009258:	e026      	b.n	80092a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009260:	2300      	movs	r3, #0
 8009262:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800926c:	d007      	beq.n	800927e <UART_Receive_IT+0x74>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10a      	bne.n	800928c <UART_Receive_IT+0x82>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d106      	bne.n	800928c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	b2da      	uxtb	r2, r3
 8009286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009288:	701a      	strb	r2, [r3, #0]
 800928a:	e008      	b.n	800929e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	b2db      	uxtb	r3, r3
 8009294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009298:	b2da      	uxtb	r2, r3
 800929a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a2:	1c5a      	adds	r2, r3, #1
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	3b01      	subs	r3, #1
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	4619      	mov	r1, r3
 80092b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d15a      	bne.n	8009372 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f022 0220 	bic.w	r2, r2, #32
 80092ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68da      	ldr	r2, [r3, #12]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	695a      	ldr	r2, [r3, #20]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f022 0201 	bic.w	r2, r2, #1
 80092ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2220      	movs	r2, #32
 80092f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d135      	bne.n	8009368 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	330c      	adds	r3, #12
 8009308:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	613b      	str	r3, [r7, #16]
   return(result);
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	f023 0310 	bic.w	r3, r3, #16
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	330c      	adds	r3, #12
 8009320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009322:	623a      	str	r2, [r7, #32]
 8009324:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	69f9      	ldr	r1, [r7, #28]
 8009328:	6a3a      	ldr	r2, [r7, #32]
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e5      	bne.n	8009302 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0310 	and.w	r3, r3, #16
 8009340:	2b10      	cmp	r3, #16
 8009342:	d10a      	bne.n	800935a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009344:	2300      	movs	r3, #0
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	60fb      	str	r3, [r7, #12]
 8009358:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800935e:	4619      	mov	r1, r3
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7f9 fb1f 	bl	80029a4 <HAL_UARTEx_RxEventCallback>
 8009366:	e002      	b.n	800936e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7ff fc25 	bl	8008bb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	e002      	b.n	8009378 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	e000      	b.n	8009378 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009376:	2302      	movs	r3, #2
  }
}
 8009378:	4618      	mov	r0, r3
 800937a:	3730      	adds	r7, #48	; 0x30
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009384:	b0c0      	sub	sp, #256	; 0x100
 8009386:	af00      	add	r7, sp, #0
 8009388:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800938c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800939c:	68d9      	ldr	r1, [r3, #12]
 800939e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	ea40 0301 	orr.w	r3, r0, r1
 80093a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	431a      	orrs	r2, r3
 80093b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	431a      	orrs	r2, r3
 80093c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80093cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80093d8:	f021 010c 	bic.w	r1, r1, #12
 80093dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093e6:	430b      	orrs	r3, r1
 80093e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80093f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093fa:	6999      	ldr	r1, [r3, #24]
 80093fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	ea40 0301 	orr.w	r3, r0, r1
 8009406:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	4b8f      	ldr	r3, [pc, #572]	; (800964c <UART_SetConfig+0x2cc>)
 8009410:	429a      	cmp	r2, r3
 8009412:	d005      	beq.n	8009420 <UART_SetConfig+0xa0>
 8009414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	4b8d      	ldr	r3, [pc, #564]	; (8009650 <UART_SetConfig+0x2d0>)
 800941c:	429a      	cmp	r2, r3
 800941e:	d104      	bne.n	800942a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009420:	f7fd fd0c 	bl	8006e3c <HAL_RCC_GetPCLK2Freq>
 8009424:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009428:	e003      	b.n	8009432 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800942a:	f7fd fcf3 	bl	8006e14 <HAL_RCC_GetPCLK1Freq>
 800942e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009436:	69db      	ldr	r3, [r3, #28]
 8009438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800943c:	f040 810c 	bne.w	8009658 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009444:	2200      	movs	r2, #0
 8009446:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800944a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800944e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009452:	4622      	mov	r2, r4
 8009454:	462b      	mov	r3, r5
 8009456:	1891      	adds	r1, r2, r2
 8009458:	65b9      	str	r1, [r7, #88]	; 0x58
 800945a:	415b      	adcs	r3, r3
 800945c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800945e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009462:	4621      	mov	r1, r4
 8009464:	eb12 0801 	adds.w	r8, r2, r1
 8009468:	4629      	mov	r1, r5
 800946a:	eb43 0901 	adc.w	r9, r3, r1
 800946e:	f04f 0200 	mov.w	r2, #0
 8009472:	f04f 0300 	mov.w	r3, #0
 8009476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800947a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800947e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009482:	4690      	mov	r8, r2
 8009484:	4699      	mov	r9, r3
 8009486:	4623      	mov	r3, r4
 8009488:	eb18 0303 	adds.w	r3, r8, r3
 800948c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009490:	462b      	mov	r3, r5
 8009492:	eb49 0303 	adc.w	r3, r9, r3
 8009496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800949a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80094a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80094aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80094ae:	460b      	mov	r3, r1
 80094b0:	18db      	adds	r3, r3, r3
 80094b2:	653b      	str	r3, [r7, #80]	; 0x50
 80094b4:	4613      	mov	r3, r2
 80094b6:	eb42 0303 	adc.w	r3, r2, r3
 80094ba:	657b      	str	r3, [r7, #84]	; 0x54
 80094bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80094c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80094c4:	f7f7 fbe0 	bl	8000c88 <__aeabi_uldivmod>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	4b61      	ldr	r3, [pc, #388]	; (8009654 <UART_SetConfig+0x2d4>)
 80094ce:	fba3 2302 	umull	r2, r3, r3, r2
 80094d2:	095b      	lsrs	r3, r3, #5
 80094d4:	011c      	lsls	r4, r3, #4
 80094d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094da:	2200      	movs	r2, #0
 80094dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80094e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80094e8:	4642      	mov	r2, r8
 80094ea:	464b      	mov	r3, r9
 80094ec:	1891      	adds	r1, r2, r2
 80094ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80094f0:	415b      	adcs	r3, r3
 80094f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80094f8:	4641      	mov	r1, r8
 80094fa:	eb12 0a01 	adds.w	sl, r2, r1
 80094fe:	4649      	mov	r1, r9
 8009500:	eb43 0b01 	adc.w	fp, r3, r1
 8009504:	f04f 0200 	mov.w	r2, #0
 8009508:	f04f 0300 	mov.w	r3, #0
 800950c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009510:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009514:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009518:	4692      	mov	sl, r2
 800951a:	469b      	mov	fp, r3
 800951c:	4643      	mov	r3, r8
 800951e:	eb1a 0303 	adds.w	r3, sl, r3
 8009522:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009526:	464b      	mov	r3, r9
 8009528:	eb4b 0303 	adc.w	r3, fp, r3
 800952c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800953c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009540:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009544:	460b      	mov	r3, r1
 8009546:	18db      	adds	r3, r3, r3
 8009548:	643b      	str	r3, [r7, #64]	; 0x40
 800954a:	4613      	mov	r3, r2
 800954c:	eb42 0303 	adc.w	r3, r2, r3
 8009550:	647b      	str	r3, [r7, #68]	; 0x44
 8009552:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009556:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800955a:	f7f7 fb95 	bl	8000c88 <__aeabi_uldivmod>
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	4611      	mov	r1, r2
 8009564:	4b3b      	ldr	r3, [pc, #236]	; (8009654 <UART_SetConfig+0x2d4>)
 8009566:	fba3 2301 	umull	r2, r3, r3, r1
 800956a:	095b      	lsrs	r3, r3, #5
 800956c:	2264      	movs	r2, #100	; 0x64
 800956e:	fb02 f303 	mul.w	r3, r2, r3
 8009572:	1acb      	subs	r3, r1, r3
 8009574:	00db      	lsls	r3, r3, #3
 8009576:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800957a:	4b36      	ldr	r3, [pc, #216]	; (8009654 <UART_SetConfig+0x2d4>)
 800957c:	fba3 2302 	umull	r2, r3, r3, r2
 8009580:	095b      	lsrs	r3, r3, #5
 8009582:	005b      	lsls	r3, r3, #1
 8009584:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009588:	441c      	add	r4, r3
 800958a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800958e:	2200      	movs	r2, #0
 8009590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009594:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009598:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800959c:	4642      	mov	r2, r8
 800959e:	464b      	mov	r3, r9
 80095a0:	1891      	adds	r1, r2, r2
 80095a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80095a4:	415b      	adcs	r3, r3
 80095a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80095ac:	4641      	mov	r1, r8
 80095ae:	1851      	adds	r1, r2, r1
 80095b0:	6339      	str	r1, [r7, #48]	; 0x30
 80095b2:	4649      	mov	r1, r9
 80095b4:	414b      	adcs	r3, r1
 80095b6:	637b      	str	r3, [r7, #52]	; 0x34
 80095b8:	f04f 0200 	mov.w	r2, #0
 80095bc:	f04f 0300 	mov.w	r3, #0
 80095c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80095c4:	4659      	mov	r1, fp
 80095c6:	00cb      	lsls	r3, r1, #3
 80095c8:	4651      	mov	r1, sl
 80095ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095ce:	4651      	mov	r1, sl
 80095d0:	00ca      	lsls	r2, r1, #3
 80095d2:	4610      	mov	r0, r2
 80095d4:	4619      	mov	r1, r3
 80095d6:	4603      	mov	r3, r0
 80095d8:	4642      	mov	r2, r8
 80095da:	189b      	adds	r3, r3, r2
 80095dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095e0:	464b      	mov	r3, r9
 80095e2:	460a      	mov	r2, r1
 80095e4:	eb42 0303 	adc.w	r3, r2, r3
 80095e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80095f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80095fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009600:	460b      	mov	r3, r1
 8009602:	18db      	adds	r3, r3, r3
 8009604:	62bb      	str	r3, [r7, #40]	; 0x28
 8009606:	4613      	mov	r3, r2
 8009608:	eb42 0303 	adc.w	r3, r2, r3
 800960c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800960e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009612:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009616:	f7f7 fb37 	bl	8000c88 <__aeabi_uldivmod>
 800961a:	4602      	mov	r2, r0
 800961c:	460b      	mov	r3, r1
 800961e:	4b0d      	ldr	r3, [pc, #52]	; (8009654 <UART_SetConfig+0x2d4>)
 8009620:	fba3 1302 	umull	r1, r3, r3, r2
 8009624:	095b      	lsrs	r3, r3, #5
 8009626:	2164      	movs	r1, #100	; 0x64
 8009628:	fb01 f303 	mul.w	r3, r1, r3
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	00db      	lsls	r3, r3, #3
 8009630:	3332      	adds	r3, #50	; 0x32
 8009632:	4a08      	ldr	r2, [pc, #32]	; (8009654 <UART_SetConfig+0x2d4>)
 8009634:	fba2 2303 	umull	r2, r3, r2, r3
 8009638:	095b      	lsrs	r3, r3, #5
 800963a:	f003 0207 	and.w	r2, r3, #7
 800963e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4422      	add	r2, r4
 8009646:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009648:	e105      	b.n	8009856 <UART_SetConfig+0x4d6>
 800964a:	bf00      	nop
 800964c:	40011000 	.word	0x40011000
 8009650:	40011400 	.word	0x40011400
 8009654:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800965c:	2200      	movs	r2, #0
 800965e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009662:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009666:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800966a:	4642      	mov	r2, r8
 800966c:	464b      	mov	r3, r9
 800966e:	1891      	adds	r1, r2, r2
 8009670:	6239      	str	r1, [r7, #32]
 8009672:	415b      	adcs	r3, r3
 8009674:	627b      	str	r3, [r7, #36]	; 0x24
 8009676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800967a:	4641      	mov	r1, r8
 800967c:	1854      	adds	r4, r2, r1
 800967e:	4649      	mov	r1, r9
 8009680:	eb43 0501 	adc.w	r5, r3, r1
 8009684:	f04f 0200 	mov.w	r2, #0
 8009688:	f04f 0300 	mov.w	r3, #0
 800968c:	00eb      	lsls	r3, r5, #3
 800968e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009692:	00e2      	lsls	r2, r4, #3
 8009694:	4614      	mov	r4, r2
 8009696:	461d      	mov	r5, r3
 8009698:	4643      	mov	r3, r8
 800969a:	18e3      	adds	r3, r4, r3
 800969c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80096a0:	464b      	mov	r3, r9
 80096a2:	eb45 0303 	adc.w	r3, r5, r3
 80096a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80096ba:	f04f 0200 	mov.w	r2, #0
 80096be:	f04f 0300 	mov.w	r3, #0
 80096c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80096c6:	4629      	mov	r1, r5
 80096c8:	008b      	lsls	r3, r1, #2
 80096ca:	4621      	mov	r1, r4
 80096cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096d0:	4621      	mov	r1, r4
 80096d2:	008a      	lsls	r2, r1, #2
 80096d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80096d8:	f7f7 fad6 	bl	8000c88 <__aeabi_uldivmod>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4b60      	ldr	r3, [pc, #384]	; (8009864 <UART_SetConfig+0x4e4>)
 80096e2:	fba3 2302 	umull	r2, r3, r3, r2
 80096e6:	095b      	lsrs	r3, r3, #5
 80096e8:	011c      	lsls	r4, r3, #4
 80096ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096ee:	2200      	movs	r2, #0
 80096f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80096f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80096f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80096fc:	4642      	mov	r2, r8
 80096fe:	464b      	mov	r3, r9
 8009700:	1891      	adds	r1, r2, r2
 8009702:	61b9      	str	r1, [r7, #24]
 8009704:	415b      	adcs	r3, r3
 8009706:	61fb      	str	r3, [r7, #28]
 8009708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800970c:	4641      	mov	r1, r8
 800970e:	1851      	adds	r1, r2, r1
 8009710:	6139      	str	r1, [r7, #16]
 8009712:	4649      	mov	r1, r9
 8009714:	414b      	adcs	r3, r1
 8009716:	617b      	str	r3, [r7, #20]
 8009718:	f04f 0200 	mov.w	r2, #0
 800971c:	f04f 0300 	mov.w	r3, #0
 8009720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009724:	4659      	mov	r1, fp
 8009726:	00cb      	lsls	r3, r1, #3
 8009728:	4651      	mov	r1, sl
 800972a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800972e:	4651      	mov	r1, sl
 8009730:	00ca      	lsls	r2, r1, #3
 8009732:	4610      	mov	r0, r2
 8009734:	4619      	mov	r1, r3
 8009736:	4603      	mov	r3, r0
 8009738:	4642      	mov	r2, r8
 800973a:	189b      	adds	r3, r3, r2
 800973c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009740:	464b      	mov	r3, r9
 8009742:	460a      	mov	r2, r1
 8009744:	eb42 0303 	adc.w	r3, r2, r3
 8009748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800974c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	67bb      	str	r3, [r7, #120]	; 0x78
 8009756:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009758:	f04f 0200 	mov.w	r2, #0
 800975c:	f04f 0300 	mov.w	r3, #0
 8009760:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009764:	4649      	mov	r1, r9
 8009766:	008b      	lsls	r3, r1, #2
 8009768:	4641      	mov	r1, r8
 800976a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800976e:	4641      	mov	r1, r8
 8009770:	008a      	lsls	r2, r1, #2
 8009772:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009776:	f7f7 fa87 	bl	8000c88 <__aeabi_uldivmod>
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	4b39      	ldr	r3, [pc, #228]	; (8009864 <UART_SetConfig+0x4e4>)
 8009780:	fba3 1302 	umull	r1, r3, r3, r2
 8009784:	095b      	lsrs	r3, r3, #5
 8009786:	2164      	movs	r1, #100	; 0x64
 8009788:	fb01 f303 	mul.w	r3, r1, r3
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	011b      	lsls	r3, r3, #4
 8009790:	3332      	adds	r3, #50	; 0x32
 8009792:	4a34      	ldr	r2, [pc, #208]	; (8009864 <UART_SetConfig+0x4e4>)
 8009794:	fba2 2303 	umull	r2, r3, r2, r3
 8009798:	095b      	lsrs	r3, r3, #5
 800979a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800979e:	441c      	add	r4, r3
 80097a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097a4:	2200      	movs	r2, #0
 80097a6:	673b      	str	r3, [r7, #112]	; 0x70
 80097a8:	677a      	str	r2, [r7, #116]	; 0x74
 80097aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80097ae:	4642      	mov	r2, r8
 80097b0:	464b      	mov	r3, r9
 80097b2:	1891      	adds	r1, r2, r2
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	415b      	adcs	r3, r3
 80097b8:	60fb      	str	r3, [r7, #12]
 80097ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80097be:	4641      	mov	r1, r8
 80097c0:	1851      	adds	r1, r2, r1
 80097c2:	6039      	str	r1, [r7, #0]
 80097c4:	4649      	mov	r1, r9
 80097c6:	414b      	adcs	r3, r1
 80097c8:	607b      	str	r3, [r7, #4]
 80097ca:	f04f 0200 	mov.w	r2, #0
 80097ce:	f04f 0300 	mov.w	r3, #0
 80097d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80097d6:	4659      	mov	r1, fp
 80097d8:	00cb      	lsls	r3, r1, #3
 80097da:	4651      	mov	r1, sl
 80097dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097e0:	4651      	mov	r1, sl
 80097e2:	00ca      	lsls	r2, r1, #3
 80097e4:	4610      	mov	r0, r2
 80097e6:	4619      	mov	r1, r3
 80097e8:	4603      	mov	r3, r0
 80097ea:	4642      	mov	r2, r8
 80097ec:	189b      	adds	r3, r3, r2
 80097ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80097f0:	464b      	mov	r3, r9
 80097f2:	460a      	mov	r2, r1
 80097f4:	eb42 0303 	adc.w	r3, r2, r3
 80097f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	663b      	str	r3, [r7, #96]	; 0x60
 8009804:	667a      	str	r2, [r7, #100]	; 0x64
 8009806:	f04f 0200 	mov.w	r2, #0
 800980a:	f04f 0300 	mov.w	r3, #0
 800980e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009812:	4649      	mov	r1, r9
 8009814:	008b      	lsls	r3, r1, #2
 8009816:	4641      	mov	r1, r8
 8009818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800981c:	4641      	mov	r1, r8
 800981e:	008a      	lsls	r2, r1, #2
 8009820:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009824:	f7f7 fa30 	bl	8000c88 <__aeabi_uldivmod>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	4b0d      	ldr	r3, [pc, #52]	; (8009864 <UART_SetConfig+0x4e4>)
 800982e:	fba3 1302 	umull	r1, r3, r3, r2
 8009832:	095b      	lsrs	r3, r3, #5
 8009834:	2164      	movs	r1, #100	; 0x64
 8009836:	fb01 f303 	mul.w	r3, r1, r3
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	011b      	lsls	r3, r3, #4
 800983e:	3332      	adds	r3, #50	; 0x32
 8009840:	4a08      	ldr	r2, [pc, #32]	; (8009864 <UART_SetConfig+0x4e4>)
 8009842:	fba2 2303 	umull	r2, r3, r2, r3
 8009846:	095b      	lsrs	r3, r3, #5
 8009848:	f003 020f 	and.w	r2, r3, #15
 800984c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4422      	add	r2, r4
 8009854:	609a      	str	r2, [r3, #8]
}
 8009856:	bf00      	nop
 8009858:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800985c:	46bd      	mov	sp, r7
 800985e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009862:	bf00      	nop
 8009864:	51eb851f 	.word	0x51eb851f

08009868 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800986c:	4904      	ldr	r1, [pc, #16]	; (8009880 <MX_FATFS_Init+0x18>)
 800986e:	4805      	ldr	r0, [pc, #20]	; (8009884 <MX_FATFS_Init+0x1c>)
 8009870:	f000 f8b2 	bl	80099d8 <FATFS_LinkDriver>
 8009874:	4603      	mov	r3, r0
 8009876:	461a      	mov	r2, r3
 8009878:	4b03      	ldr	r3, [pc, #12]	; (8009888 <MX_FATFS_Init+0x20>)
 800987a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800987c:	bf00      	nop
 800987e:	bd80      	pop	{r7, pc}
 8009880:	2000097c 	.word	0x2000097c
 8009884:	20000010 	.word	0x20000010
 8009888:	20000978 	.word	0x20000978

0800988c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	4603      	mov	r3, r0
 8009894:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8009896:	79fb      	ldrb	r3, [r7, #7]
 8009898:	4618      	mov	r0, r3
 800989a:	f7f7 fd67 	bl	800136c <SD_disk_initialize>
 800989e:	4603      	mov	r3, r0
 80098a0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	4603      	mov	r3, r0
 80098b2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	 return SD_disk_status(pdrv);
 80098b4:	79fb      	ldrb	r3, [r7, #7]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7f7 fe42 	bl	8001540 <SD_disk_status>
 80098bc:	4603      	mov	r3, r0
 80098be:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	607a      	str	r2, [r7, #4]
 80098d2:	603b      	str	r3, [r7, #0]
 80098d4:	4603      	mov	r3, r0
 80098d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80098d8:	7bf8      	ldrb	r0, [r7, #15]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	68b9      	ldr	r1, [r7, #8]
 80098e0:	f7f7 fe44 	bl	800156c <SD_disk_read>
 80098e4:	4603      	mov	r3, r0
 80098e6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	607a      	str	r2, [r7, #4]
 80098fa:	603b      	str	r3, [r7, #0]
 80098fc:	4603      	mov	r3, r0
 80098fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8009900:	7bf8      	ldrb	r0, [r7, #15]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	68b9      	ldr	r1, [r7, #8]
 8009908:	f7f7 fe9a 	bl	8001640 <SD_disk_write>
 800990c:	4603      	mov	r3, r0
 800990e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	4603      	mov	r3, r0
 8009920:	603a      	str	r2, [r7, #0]
 8009922:	71fb      	strb	r3, [r7, #7]
 8009924:	460b      	mov	r3, r1
 8009926:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8009928:	79fb      	ldrb	r3, [r7, #7]
 800992a:	79b9      	ldrb	r1, [r7, #6]
 800992c:	683a      	ldr	r2, [r7, #0]
 800992e:	4618      	mov	r0, r3
 8009930:	f7f7 ff0a 	bl	8001748 <SD_disk_ioctl>
 8009934:	4603      	mov	r3, r0
 8009936:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009938:	4618      	mov	r0, r3
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009940:	b480      	push	{r7}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	4613      	mov	r3, r2
 800994c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800994e:	2301      	movs	r3, #1
 8009950:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009956:	4b1f      	ldr	r3, [pc, #124]	; (80099d4 <FATFS_LinkDriverEx+0x94>)
 8009958:	7a5b      	ldrb	r3, [r3, #9]
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	d131      	bne.n	80099c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009960:	4b1c      	ldr	r3, [pc, #112]	; (80099d4 <FATFS_LinkDriverEx+0x94>)
 8009962:	7a5b      	ldrb	r3, [r3, #9]
 8009964:	b2db      	uxtb	r3, r3
 8009966:	461a      	mov	r2, r3
 8009968:	4b1a      	ldr	r3, [pc, #104]	; (80099d4 <FATFS_LinkDriverEx+0x94>)
 800996a:	2100      	movs	r1, #0
 800996c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800996e:	4b19      	ldr	r3, [pc, #100]	; (80099d4 <FATFS_LinkDriverEx+0x94>)
 8009970:	7a5b      	ldrb	r3, [r3, #9]
 8009972:	b2db      	uxtb	r3, r3
 8009974:	4a17      	ldr	r2, [pc, #92]	; (80099d4 <FATFS_LinkDriverEx+0x94>)
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800997e:	4b15      	ldr	r3, [pc, #84]	; (80099d4 <FATFS_LinkDriverEx+0x94>)
 8009980:	7a5b      	ldrb	r3, [r3, #9]
 8009982:	b2db      	uxtb	r3, r3
 8009984:	461a      	mov	r2, r3
 8009986:	4b13      	ldr	r3, [pc, #76]	; (80099d4 <FATFS_LinkDriverEx+0x94>)
 8009988:	4413      	add	r3, r2
 800998a:	79fa      	ldrb	r2, [r7, #7]
 800998c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800998e:	4b11      	ldr	r3, [pc, #68]	; (80099d4 <FATFS_LinkDriverEx+0x94>)
 8009990:	7a5b      	ldrb	r3, [r3, #9]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	1c5a      	adds	r2, r3, #1
 8009996:	b2d1      	uxtb	r1, r2
 8009998:	4a0e      	ldr	r2, [pc, #56]	; (80099d4 <FATFS_LinkDriverEx+0x94>)
 800999a:	7251      	strb	r1, [r2, #9]
 800999c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800999e:	7dbb      	ldrb	r3, [r7, #22]
 80099a0:	3330      	adds	r3, #48	; 0x30
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	3301      	adds	r3, #1
 80099ac:	223a      	movs	r2, #58	; 0x3a
 80099ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	3302      	adds	r3, #2
 80099b4:	222f      	movs	r2, #47	; 0x2f
 80099b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	3303      	adds	r3, #3
 80099bc:	2200      	movs	r2, #0
 80099be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80099c0:	2300      	movs	r3, #0
 80099c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80099c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	371c      	adds	r7, #28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	20000980 	.word	0x20000980

080099d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80099e2:	2200      	movs	r2, #0
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f7ff ffaa 	bl	8009940 <FATFS_LinkDriverEx>
 80099ec:	4603      	mov	r3, r0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <__errno>:
 80099f8:	4b01      	ldr	r3, [pc, #4]	; (8009a00 <__errno+0x8>)
 80099fa:	6818      	ldr	r0, [r3, #0]
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	20000024 	.word	0x20000024

08009a04 <__libc_init_array>:
 8009a04:	b570      	push	{r4, r5, r6, lr}
 8009a06:	4d0d      	ldr	r5, [pc, #52]	; (8009a3c <__libc_init_array+0x38>)
 8009a08:	4c0d      	ldr	r4, [pc, #52]	; (8009a40 <__libc_init_array+0x3c>)
 8009a0a:	1b64      	subs	r4, r4, r5
 8009a0c:	10a4      	asrs	r4, r4, #2
 8009a0e:	2600      	movs	r6, #0
 8009a10:	42a6      	cmp	r6, r4
 8009a12:	d109      	bne.n	8009a28 <__libc_init_array+0x24>
 8009a14:	4d0b      	ldr	r5, [pc, #44]	; (8009a44 <__libc_init_array+0x40>)
 8009a16:	4c0c      	ldr	r4, [pc, #48]	; (8009a48 <__libc_init_array+0x44>)
 8009a18:	f004 fc90 	bl	800e33c <_init>
 8009a1c:	1b64      	subs	r4, r4, r5
 8009a1e:	10a4      	asrs	r4, r4, #2
 8009a20:	2600      	movs	r6, #0
 8009a22:	42a6      	cmp	r6, r4
 8009a24:	d105      	bne.n	8009a32 <__libc_init_array+0x2e>
 8009a26:	bd70      	pop	{r4, r5, r6, pc}
 8009a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a2c:	4798      	blx	r3
 8009a2e:	3601      	adds	r6, #1
 8009a30:	e7ee      	b.n	8009a10 <__libc_init_array+0xc>
 8009a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a36:	4798      	blx	r3
 8009a38:	3601      	adds	r6, #1
 8009a3a:	e7f2      	b.n	8009a22 <__libc_init_array+0x1e>
 8009a3c:	0800e9b0 	.word	0x0800e9b0
 8009a40:	0800e9b0 	.word	0x0800e9b0
 8009a44:	0800e9b0 	.word	0x0800e9b0
 8009a48:	0800e9b4 	.word	0x0800e9b4

08009a4c <memcpy>:
 8009a4c:	440a      	add	r2, r1
 8009a4e:	4291      	cmp	r1, r2
 8009a50:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a54:	d100      	bne.n	8009a58 <memcpy+0xc>
 8009a56:	4770      	bx	lr
 8009a58:	b510      	push	{r4, lr}
 8009a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a62:	4291      	cmp	r1, r2
 8009a64:	d1f9      	bne.n	8009a5a <memcpy+0xe>
 8009a66:	bd10      	pop	{r4, pc}

08009a68 <memset>:
 8009a68:	4402      	add	r2, r0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d100      	bne.n	8009a72 <memset+0xa>
 8009a70:	4770      	bx	lr
 8009a72:	f803 1b01 	strb.w	r1, [r3], #1
 8009a76:	e7f9      	b.n	8009a6c <memset+0x4>

08009a78 <__cvt>:
 8009a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a7c:	ec55 4b10 	vmov	r4, r5, d0
 8009a80:	2d00      	cmp	r5, #0
 8009a82:	460e      	mov	r6, r1
 8009a84:	4619      	mov	r1, r3
 8009a86:	462b      	mov	r3, r5
 8009a88:	bfbb      	ittet	lt
 8009a8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a8e:	461d      	movlt	r5, r3
 8009a90:	2300      	movge	r3, #0
 8009a92:	232d      	movlt	r3, #45	; 0x2d
 8009a94:	700b      	strb	r3, [r1, #0]
 8009a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a9c:	4691      	mov	r9, r2
 8009a9e:	f023 0820 	bic.w	r8, r3, #32
 8009aa2:	bfbc      	itt	lt
 8009aa4:	4622      	movlt	r2, r4
 8009aa6:	4614      	movlt	r4, r2
 8009aa8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009aac:	d005      	beq.n	8009aba <__cvt+0x42>
 8009aae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009ab2:	d100      	bne.n	8009ab6 <__cvt+0x3e>
 8009ab4:	3601      	adds	r6, #1
 8009ab6:	2102      	movs	r1, #2
 8009ab8:	e000      	b.n	8009abc <__cvt+0x44>
 8009aba:	2103      	movs	r1, #3
 8009abc:	ab03      	add	r3, sp, #12
 8009abe:	9301      	str	r3, [sp, #4]
 8009ac0:	ab02      	add	r3, sp, #8
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	ec45 4b10 	vmov	d0, r4, r5
 8009ac8:	4653      	mov	r3, sl
 8009aca:	4632      	mov	r2, r6
 8009acc:	f001 fe8c 	bl	800b7e8 <_dtoa_r>
 8009ad0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ad4:	4607      	mov	r7, r0
 8009ad6:	d102      	bne.n	8009ade <__cvt+0x66>
 8009ad8:	f019 0f01 	tst.w	r9, #1
 8009adc:	d022      	beq.n	8009b24 <__cvt+0xac>
 8009ade:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ae2:	eb07 0906 	add.w	r9, r7, r6
 8009ae6:	d110      	bne.n	8009b0a <__cvt+0x92>
 8009ae8:	783b      	ldrb	r3, [r7, #0]
 8009aea:	2b30      	cmp	r3, #48	; 0x30
 8009aec:	d10a      	bne.n	8009b04 <__cvt+0x8c>
 8009aee:	2200      	movs	r2, #0
 8009af0:	2300      	movs	r3, #0
 8009af2:	4620      	mov	r0, r4
 8009af4:	4629      	mov	r1, r5
 8009af6:	f7f6 ffe7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009afa:	b918      	cbnz	r0, 8009b04 <__cvt+0x8c>
 8009afc:	f1c6 0601 	rsb	r6, r6, #1
 8009b00:	f8ca 6000 	str.w	r6, [sl]
 8009b04:	f8da 3000 	ldr.w	r3, [sl]
 8009b08:	4499      	add	r9, r3
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	4620      	mov	r0, r4
 8009b10:	4629      	mov	r1, r5
 8009b12:	f7f6 ffd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b16:	b108      	cbz	r0, 8009b1c <__cvt+0xa4>
 8009b18:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b1c:	2230      	movs	r2, #48	; 0x30
 8009b1e:	9b03      	ldr	r3, [sp, #12]
 8009b20:	454b      	cmp	r3, r9
 8009b22:	d307      	bcc.n	8009b34 <__cvt+0xbc>
 8009b24:	9b03      	ldr	r3, [sp, #12]
 8009b26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b28:	1bdb      	subs	r3, r3, r7
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	6013      	str	r3, [r2, #0]
 8009b2e:	b004      	add	sp, #16
 8009b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b34:	1c59      	adds	r1, r3, #1
 8009b36:	9103      	str	r1, [sp, #12]
 8009b38:	701a      	strb	r2, [r3, #0]
 8009b3a:	e7f0      	b.n	8009b1e <__cvt+0xa6>

08009b3c <__exponent>:
 8009b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2900      	cmp	r1, #0
 8009b42:	bfb8      	it	lt
 8009b44:	4249      	neglt	r1, r1
 8009b46:	f803 2b02 	strb.w	r2, [r3], #2
 8009b4a:	bfb4      	ite	lt
 8009b4c:	222d      	movlt	r2, #45	; 0x2d
 8009b4e:	222b      	movge	r2, #43	; 0x2b
 8009b50:	2909      	cmp	r1, #9
 8009b52:	7042      	strb	r2, [r0, #1]
 8009b54:	dd2a      	ble.n	8009bac <__exponent+0x70>
 8009b56:	f10d 0407 	add.w	r4, sp, #7
 8009b5a:	46a4      	mov	ip, r4
 8009b5c:	270a      	movs	r7, #10
 8009b5e:	46a6      	mov	lr, r4
 8009b60:	460a      	mov	r2, r1
 8009b62:	fb91 f6f7 	sdiv	r6, r1, r7
 8009b66:	fb07 1516 	mls	r5, r7, r6, r1
 8009b6a:	3530      	adds	r5, #48	; 0x30
 8009b6c:	2a63      	cmp	r2, #99	; 0x63
 8009b6e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009b72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009b76:	4631      	mov	r1, r6
 8009b78:	dcf1      	bgt.n	8009b5e <__exponent+0x22>
 8009b7a:	3130      	adds	r1, #48	; 0x30
 8009b7c:	f1ae 0502 	sub.w	r5, lr, #2
 8009b80:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009b84:	1c44      	adds	r4, r0, #1
 8009b86:	4629      	mov	r1, r5
 8009b88:	4561      	cmp	r1, ip
 8009b8a:	d30a      	bcc.n	8009ba2 <__exponent+0x66>
 8009b8c:	f10d 0209 	add.w	r2, sp, #9
 8009b90:	eba2 020e 	sub.w	r2, r2, lr
 8009b94:	4565      	cmp	r5, ip
 8009b96:	bf88      	it	hi
 8009b98:	2200      	movhi	r2, #0
 8009b9a:	4413      	add	r3, r2
 8009b9c:	1a18      	subs	r0, r3, r0
 8009b9e:	b003      	add	sp, #12
 8009ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ba6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009baa:	e7ed      	b.n	8009b88 <__exponent+0x4c>
 8009bac:	2330      	movs	r3, #48	; 0x30
 8009bae:	3130      	adds	r1, #48	; 0x30
 8009bb0:	7083      	strb	r3, [r0, #2]
 8009bb2:	70c1      	strb	r1, [r0, #3]
 8009bb4:	1d03      	adds	r3, r0, #4
 8009bb6:	e7f1      	b.n	8009b9c <__exponent+0x60>

08009bb8 <_printf_float>:
 8009bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	ed2d 8b02 	vpush	{d8}
 8009bc0:	b08d      	sub	sp, #52	; 0x34
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009bc8:	4616      	mov	r6, r2
 8009bca:	461f      	mov	r7, r3
 8009bcc:	4605      	mov	r5, r0
 8009bce:	f003 f931 	bl	800ce34 <_localeconv_r>
 8009bd2:	f8d0 a000 	ldr.w	sl, [r0]
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	f7f6 fafa 	bl	80001d0 <strlen>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	930a      	str	r3, [sp, #40]	; 0x28
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	9305      	str	r3, [sp, #20]
 8009be4:	f8d8 3000 	ldr.w	r3, [r8]
 8009be8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009bec:	3307      	adds	r3, #7
 8009bee:	f023 0307 	bic.w	r3, r3, #7
 8009bf2:	f103 0208 	add.w	r2, r3, #8
 8009bf6:	f8c8 2000 	str.w	r2, [r8]
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009c02:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009c06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c0a:	9307      	str	r3, [sp, #28]
 8009c0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c10:	ee08 0a10 	vmov	s16, r0
 8009c14:	4b9f      	ldr	r3, [pc, #636]	; (8009e94 <_printf_float+0x2dc>)
 8009c16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1e:	f7f6 ff85 	bl	8000b2c <__aeabi_dcmpun>
 8009c22:	bb88      	cbnz	r0, 8009c88 <_printf_float+0xd0>
 8009c24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c28:	4b9a      	ldr	r3, [pc, #616]	; (8009e94 <_printf_float+0x2dc>)
 8009c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c2e:	f7f6 ff5f 	bl	8000af0 <__aeabi_dcmple>
 8009c32:	bb48      	cbnz	r0, 8009c88 <_printf_float+0xd0>
 8009c34:	2200      	movs	r2, #0
 8009c36:	2300      	movs	r3, #0
 8009c38:	4640      	mov	r0, r8
 8009c3a:	4649      	mov	r1, r9
 8009c3c:	f7f6 ff4e 	bl	8000adc <__aeabi_dcmplt>
 8009c40:	b110      	cbz	r0, 8009c48 <_printf_float+0x90>
 8009c42:	232d      	movs	r3, #45	; 0x2d
 8009c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c48:	4b93      	ldr	r3, [pc, #588]	; (8009e98 <_printf_float+0x2e0>)
 8009c4a:	4894      	ldr	r0, [pc, #592]	; (8009e9c <_printf_float+0x2e4>)
 8009c4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009c50:	bf94      	ite	ls
 8009c52:	4698      	movls	r8, r3
 8009c54:	4680      	movhi	r8, r0
 8009c56:	2303      	movs	r3, #3
 8009c58:	6123      	str	r3, [r4, #16]
 8009c5a:	9b05      	ldr	r3, [sp, #20]
 8009c5c:	f023 0204 	bic.w	r2, r3, #4
 8009c60:	6022      	str	r2, [r4, #0]
 8009c62:	f04f 0900 	mov.w	r9, #0
 8009c66:	9700      	str	r7, [sp, #0]
 8009c68:	4633      	mov	r3, r6
 8009c6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	4628      	mov	r0, r5
 8009c70:	f000 f9d8 	bl	800a024 <_printf_common>
 8009c74:	3001      	adds	r0, #1
 8009c76:	f040 8090 	bne.w	8009d9a <_printf_float+0x1e2>
 8009c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7e:	b00d      	add	sp, #52	; 0x34
 8009c80:	ecbd 8b02 	vpop	{d8}
 8009c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c88:	4642      	mov	r2, r8
 8009c8a:	464b      	mov	r3, r9
 8009c8c:	4640      	mov	r0, r8
 8009c8e:	4649      	mov	r1, r9
 8009c90:	f7f6 ff4c 	bl	8000b2c <__aeabi_dcmpun>
 8009c94:	b140      	cbz	r0, 8009ca8 <_printf_float+0xf0>
 8009c96:	464b      	mov	r3, r9
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	bfbc      	itt	lt
 8009c9c:	232d      	movlt	r3, #45	; 0x2d
 8009c9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009ca2:	487f      	ldr	r0, [pc, #508]	; (8009ea0 <_printf_float+0x2e8>)
 8009ca4:	4b7f      	ldr	r3, [pc, #508]	; (8009ea4 <_printf_float+0x2ec>)
 8009ca6:	e7d1      	b.n	8009c4c <_printf_float+0x94>
 8009ca8:	6863      	ldr	r3, [r4, #4]
 8009caa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009cae:	9206      	str	r2, [sp, #24]
 8009cb0:	1c5a      	adds	r2, r3, #1
 8009cb2:	d13f      	bne.n	8009d34 <_printf_float+0x17c>
 8009cb4:	2306      	movs	r3, #6
 8009cb6:	6063      	str	r3, [r4, #4]
 8009cb8:	9b05      	ldr	r3, [sp, #20]
 8009cba:	6861      	ldr	r1, [r4, #4]
 8009cbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	9303      	str	r3, [sp, #12]
 8009cc4:	ab0a      	add	r3, sp, #40	; 0x28
 8009cc6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009cca:	ab09      	add	r3, sp, #36	; 0x24
 8009ccc:	ec49 8b10 	vmov	d0, r8, r9
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	6022      	str	r2, [r4, #0]
 8009cd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009cd8:	4628      	mov	r0, r5
 8009cda:	f7ff fecd 	bl	8009a78 <__cvt>
 8009cde:	9b06      	ldr	r3, [sp, #24]
 8009ce0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ce2:	2b47      	cmp	r3, #71	; 0x47
 8009ce4:	4680      	mov	r8, r0
 8009ce6:	d108      	bne.n	8009cfa <_printf_float+0x142>
 8009ce8:	1cc8      	adds	r0, r1, #3
 8009cea:	db02      	blt.n	8009cf2 <_printf_float+0x13a>
 8009cec:	6863      	ldr	r3, [r4, #4]
 8009cee:	4299      	cmp	r1, r3
 8009cf0:	dd41      	ble.n	8009d76 <_printf_float+0x1be>
 8009cf2:	f1ab 0b02 	sub.w	fp, fp, #2
 8009cf6:	fa5f fb8b 	uxtb.w	fp, fp
 8009cfa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cfe:	d820      	bhi.n	8009d42 <_printf_float+0x18a>
 8009d00:	3901      	subs	r1, #1
 8009d02:	465a      	mov	r2, fp
 8009d04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d08:	9109      	str	r1, [sp, #36]	; 0x24
 8009d0a:	f7ff ff17 	bl	8009b3c <__exponent>
 8009d0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d10:	1813      	adds	r3, r2, r0
 8009d12:	2a01      	cmp	r2, #1
 8009d14:	4681      	mov	r9, r0
 8009d16:	6123      	str	r3, [r4, #16]
 8009d18:	dc02      	bgt.n	8009d20 <_printf_float+0x168>
 8009d1a:	6822      	ldr	r2, [r4, #0]
 8009d1c:	07d2      	lsls	r2, r2, #31
 8009d1e:	d501      	bpl.n	8009d24 <_printf_float+0x16c>
 8009d20:	3301      	adds	r3, #1
 8009d22:	6123      	str	r3, [r4, #16]
 8009d24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d09c      	beq.n	8009c66 <_printf_float+0xae>
 8009d2c:	232d      	movs	r3, #45	; 0x2d
 8009d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d32:	e798      	b.n	8009c66 <_printf_float+0xae>
 8009d34:	9a06      	ldr	r2, [sp, #24]
 8009d36:	2a47      	cmp	r2, #71	; 0x47
 8009d38:	d1be      	bne.n	8009cb8 <_printf_float+0x100>
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1bc      	bne.n	8009cb8 <_printf_float+0x100>
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e7b9      	b.n	8009cb6 <_printf_float+0xfe>
 8009d42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009d46:	d118      	bne.n	8009d7a <_printf_float+0x1c2>
 8009d48:	2900      	cmp	r1, #0
 8009d4a:	6863      	ldr	r3, [r4, #4]
 8009d4c:	dd0b      	ble.n	8009d66 <_printf_float+0x1ae>
 8009d4e:	6121      	str	r1, [r4, #16]
 8009d50:	b913      	cbnz	r3, 8009d58 <_printf_float+0x1a0>
 8009d52:	6822      	ldr	r2, [r4, #0]
 8009d54:	07d0      	lsls	r0, r2, #31
 8009d56:	d502      	bpl.n	8009d5e <_printf_float+0x1a6>
 8009d58:	3301      	adds	r3, #1
 8009d5a:	440b      	add	r3, r1
 8009d5c:	6123      	str	r3, [r4, #16]
 8009d5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d60:	f04f 0900 	mov.w	r9, #0
 8009d64:	e7de      	b.n	8009d24 <_printf_float+0x16c>
 8009d66:	b913      	cbnz	r3, 8009d6e <_printf_float+0x1b6>
 8009d68:	6822      	ldr	r2, [r4, #0]
 8009d6a:	07d2      	lsls	r2, r2, #31
 8009d6c:	d501      	bpl.n	8009d72 <_printf_float+0x1ba>
 8009d6e:	3302      	adds	r3, #2
 8009d70:	e7f4      	b.n	8009d5c <_printf_float+0x1a4>
 8009d72:	2301      	movs	r3, #1
 8009d74:	e7f2      	b.n	8009d5c <_printf_float+0x1a4>
 8009d76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d7c:	4299      	cmp	r1, r3
 8009d7e:	db05      	blt.n	8009d8c <_printf_float+0x1d4>
 8009d80:	6823      	ldr	r3, [r4, #0]
 8009d82:	6121      	str	r1, [r4, #16]
 8009d84:	07d8      	lsls	r0, r3, #31
 8009d86:	d5ea      	bpl.n	8009d5e <_printf_float+0x1a6>
 8009d88:	1c4b      	adds	r3, r1, #1
 8009d8a:	e7e7      	b.n	8009d5c <_printf_float+0x1a4>
 8009d8c:	2900      	cmp	r1, #0
 8009d8e:	bfd4      	ite	le
 8009d90:	f1c1 0202 	rsble	r2, r1, #2
 8009d94:	2201      	movgt	r2, #1
 8009d96:	4413      	add	r3, r2
 8009d98:	e7e0      	b.n	8009d5c <_printf_float+0x1a4>
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	055a      	lsls	r2, r3, #21
 8009d9e:	d407      	bmi.n	8009db0 <_printf_float+0x1f8>
 8009da0:	6923      	ldr	r3, [r4, #16]
 8009da2:	4642      	mov	r2, r8
 8009da4:	4631      	mov	r1, r6
 8009da6:	4628      	mov	r0, r5
 8009da8:	47b8      	blx	r7
 8009daa:	3001      	adds	r0, #1
 8009dac:	d12c      	bne.n	8009e08 <_printf_float+0x250>
 8009dae:	e764      	b.n	8009c7a <_printf_float+0xc2>
 8009db0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009db4:	f240 80e0 	bls.w	8009f78 <_printf_float+0x3c0>
 8009db8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	f7f6 fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d034      	beq.n	8009e32 <_printf_float+0x27a>
 8009dc8:	4a37      	ldr	r2, [pc, #220]	; (8009ea8 <_printf_float+0x2f0>)
 8009dca:	2301      	movs	r3, #1
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4628      	mov	r0, r5
 8009dd0:	47b8      	blx	r7
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	f43f af51 	beq.w	8009c7a <_printf_float+0xc2>
 8009dd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	db02      	blt.n	8009de6 <_printf_float+0x22e>
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	07d8      	lsls	r0, r3, #31
 8009de4:	d510      	bpl.n	8009e08 <_printf_float+0x250>
 8009de6:	ee18 3a10 	vmov	r3, s16
 8009dea:	4652      	mov	r2, sl
 8009dec:	4631      	mov	r1, r6
 8009dee:	4628      	mov	r0, r5
 8009df0:	47b8      	blx	r7
 8009df2:	3001      	adds	r0, #1
 8009df4:	f43f af41 	beq.w	8009c7a <_printf_float+0xc2>
 8009df8:	f04f 0800 	mov.w	r8, #0
 8009dfc:	f104 091a 	add.w	r9, r4, #26
 8009e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e02:	3b01      	subs	r3, #1
 8009e04:	4543      	cmp	r3, r8
 8009e06:	dc09      	bgt.n	8009e1c <_printf_float+0x264>
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	079b      	lsls	r3, r3, #30
 8009e0c:	f100 8105 	bmi.w	800a01a <_printf_float+0x462>
 8009e10:	68e0      	ldr	r0, [r4, #12]
 8009e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e14:	4298      	cmp	r0, r3
 8009e16:	bfb8      	it	lt
 8009e18:	4618      	movlt	r0, r3
 8009e1a:	e730      	b.n	8009c7e <_printf_float+0xc6>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	464a      	mov	r2, r9
 8009e20:	4631      	mov	r1, r6
 8009e22:	4628      	mov	r0, r5
 8009e24:	47b8      	blx	r7
 8009e26:	3001      	adds	r0, #1
 8009e28:	f43f af27 	beq.w	8009c7a <_printf_float+0xc2>
 8009e2c:	f108 0801 	add.w	r8, r8, #1
 8009e30:	e7e6      	b.n	8009e00 <_printf_float+0x248>
 8009e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	dc39      	bgt.n	8009eac <_printf_float+0x2f4>
 8009e38:	4a1b      	ldr	r2, [pc, #108]	; (8009ea8 <_printf_float+0x2f0>)
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	4631      	mov	r1, r6
 8009e3e:	4628      	mov	r0, r5
 8009e40:	47b8      	blx	r7
 8009e42:	3001      	adds	r0, #1
 8009e44:	f43f af19 	beq.w	8009c7a <_printf_float+0xc2>
 8009e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	d102      	bne.n	8009e56 <_printf_float+0x29e>
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	07d9      	lsls	r1, r3, #31
 8009e54:	d5d8      	bpl.n	8009e08 <_printf_float+0x250>
 8009e56:	ee18 3a10 	vmov	r3, s16
 8009e5a:	4652      	mov	r2, sl
 8009e5c:	4631      	mov	r1, r6
 8009e5e:	4628      	mov	r0, r5
 8009e60:	47b8      	blx	r7
 8009e62:	3001      	adds	r0, #1
 8009e64:	f43f af09 	beq.w	8009c7a <_printf_float+0xc2>
 8009e68:	f04f 0900 	mov.w	r9, #0
 8009e6c:	f104 0a1a 	add.w	sl, r4, #26
 8009e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e72:	425b      	negs	r3, r3
 8009e74:	454b      	cmp	r3, r9
 8009e76:	dc01      	bgt.n	8009e7c <_printf_float+0x2c4>
 8009e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e7a:	e792      	b.n	8009da2 <_printf_float+0x1ea>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	4652      	mov	r2, sl
 8009e80:	4631      	mov	r1, r6
 8009e82:	4628      	mov	r0, r5
 8009e84:	47b8      	blx	r7
 8009e86:	3001      	adds	r0, #1
 8009e88:	f43f aef7 	beq.w	8009c7a <_printf_float+0xc2>
 8009e8c:	f109 0901 	add.w	r9, r9, #1
 8009e90:	e7ee      	b.n	8009e70 <_printf_float+0x2b8>
 8009e92:	bf00      	nop
 8009e94:	7fefffff 	.word	0x7fefffff
 8009e98:	0800e500 	.word	0x0800e500
 8009e9c:	0800e504 	.word	0x0800e504
 8009ea0:	0800e50c 	.word	0x0800e50c
 8009ea4:	0800e508 	.word	0x0800e508
 8009ea8:	0800e510 	.word	0x0800e510
 8009eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	bfa8      	it	ge
 8009eb4:	461a      	movge	r2, r3
 8009eb6:	2a00      	cmp	r2, #0
 8009eb8:	4691      	mov	r9, r2
 8009eba:	dc37      	bgt.n	8009f2c <_printf_float+0x374>
 8009ebc:	f04f 0b00 	mov.w	fp, #0
 8009ec0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ec4:	f104 021a 	add.w	r2, r4, #26
 8009ec8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009eca:	9305      	str	r3, [sp, #20]
 8009ecc:	eba3 0309 	sub.w	r3, r3, r9
 8009ed0:	455b      	cmp	r3, fp
 8009ed2:	dc33      	bgt.n	8009f3c <_printf_float+0x384>
 8009ed4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	db3b      	blt.n	8009f54 <_printf_float+0x39c>
 8009edc:	6823      	ldr	r3, [r4, #0]
 8009ede:	07da      	lsls	r2, r3, #31
 8009ee0:	d438      	bmi.n	8009f54 <_printf_float+0x39c>
 8009ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ee4:	9a05      	ldr	r2, [sp, #20]
 8009ee6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ee8:	1a9a      	subs	r2, r3, r2
 8009eea:	eba3 0901 	sub.w	r9, r3, r1
 8009eee:	4591      	cmp	r9, r2
 8009ef0:	bfa8      	it	ge
 8009ef2:	4691      	movge	r9, r2
 8009ef4:	f1b9 0f00 	cmp.w	r9, #0
 8009ef8:	dc35      	bgt.n	8009f66 <_printf_float+0x3ae>
 8009efa:	f04f 0800 	mov.w	r8, #0
 8009efe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f02:	f104 0a1a 	add.w	sl, r4, #26
 8009f06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f0a:	1a9b      	subs	r3, r3, r2
 8009f0c:	eba3 0309 	sub.w	r3, r3, r9
 8009f10:	4543      	cmp	r3, r8
 8009f12:	f77f af79 	ble.w	8009e08 <_printf_float+0x250>
 8009f16:	2301      	movs	r3, #1
 8009f18:	4652      	mov	r2, sl
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	47b8      	blx	r7
 8009f20:	3001      	adds	r0, #1
 8009f22:	f43f aeaa 	beq.w	8009c7a <_printf_float+0xc2>
 8009f26:	f108 0801 	add.w	r8, r8, #1
 8009f2a:	e7ec      	b.n	8009f06 <_printf_float+0x34e>
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	4631      	mov	r1, r6
 8009f30:	4642      	mov	r2, r8
 8009f32:	4628      	mov	r0, r5
 8009f34:	47b8      	blx	r7
 8009f36:	3001      	adds	r0, #1
 8009f38:	d1c0      	bne.n	8009ebc <_printf_float+0x304>
 8009f3a:	e69e      	b.n	8009c7a <_printf_float+0xc2>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	4631      	mov	r1, r6
 8009f40:	4628      	mov	r0, r5
 8009f42:	9205      	str	r2, [sp, #20]
 8009f44:	47b8      	blx	r7
 8009f46:	3001      	adds	r0, #1
 8009f48:	f43f ae97 	beq.w	8009c7a <_printf_float+0xc2>
 8009f4c:	9a05      	ldr	r2, [sp, #20]
 8009f4e:	f10b 0b01 	add.w	fp, fp, #1
 8009f52:	e7b9      	b.n	8009ec8 <_printf_float+0x310>
 8009f54:	ee18 3a10 	vmov	r3, s16
 8009f58:	4652      	mov	r2, sl
 8009f5a:	4631      	mov	r1, r6
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	47b8      	blx	r7
 8009f60:	3001      	adds	r0, #1
 8009f62:	d1be      	bne.n	8009ee2 <_printf_float+0x32a>
 8009f64:	e689      	b.n	8009c7a <_printf_float+0xc2>
 8009f66:	9a05      	ldr	r2, [sp, #20]
 8009f68:	464b      	mov	r3, r9
 8009f6a:	4442      	add	r2, r8
 8009f6c:	4631      	mov	r1, r6
 8009f6e:	4628      	mov	r0, r5
 8009f70:	47b8      	blx	r7
 8009f72:	3001      	adds	r0, #1
 8009f74:	d1c1      	bne.n	8009efa <_printf_float+0x342>
 8009f76:	e680      	b.n	8009c7a <_printf_float+0xc2>
 8009f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f7a:	2a01      	cmp	r2, #1
 8009f7c:	dc01      	bgt.n	8009f82 <_printf_float+0x3ca>
 8009f7e:	07db      	lsls	r3, r3, #31
 8009f80:	d538      	bpl.n	8009ff4 <_printf_float+0x43c>
 8009f82:	2301      	movs	r3, #1
 8009f84:	4642      	mov	r2, r8
 8009f86:	4631      	mov	r1, r6
 8009f88:	4628      	mov	r0, r5
 8009f8a:	47b8      	blx	r7
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	f43f ae74 	beq.w	8009c7a <_printf_float+0xc2>
 8009f92:	ee18 3a10 	vmov	r3, s16
 8009f96:	4652      	mov	r2, sl
 8009f98:	4631      	mov	r1, r6
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	47b8      	blx	r7
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	f43f ae6b 	beq.w	8009c7a <_printf_float+0xc2>
 8009fa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fa8:	2200      	movs	r2, #0
 8009faa:	2300      	movs	r3, #0
 8009fac:	f7f6 fd8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fb0:	b9d8      	cbnz	r0, 8009fea <_printf_float+0x432>
 8009fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb4:	f108 0201 	add.w	r2, r8, #1
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	4631      	mov	r1, r6
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	47b8      	blx	r7
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	d10e      	bne.n	8009fe2 <_printf_float+0x42a>
 8009fc4:	e659      	b.n	8009c7a <_printf_float+0xc2>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	4652      	mov	r2, sl
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b8      	blx	r7
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	f43f ae52 	beq.w	8009c7a <_printf_float+0xc2>
 8009fd6:	f108 0801 	add.w	r8, r8, #1
 8009fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	4543      	cmp	r3, r8
 8009fe0:	dcf1      	bgt.n	8009fc6 <_printf_float+0x40e>
 8009fe2:	464b      	mov	r3, r9
 8009fe4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fe8:	e6dc      	b.n	8009da4 <_printf_float+0x1ec>
 8009fea:	f04f 0800 	mov.w	r8, #0
 8009fee:	f104 0a1a 	add.w	sl, r4, #26
 8009ff2:	e7f2      	b.n	8009fda <_printf_float+0x422>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	4642      	mov	r2, r8
 8009ff8:	e7df      	b.n	8009fba <_printf_float+0x402>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	464a      	mov	r2, r9
 8009ffe:	4631      	mov	r1, r6
 800a000:	4628      	mov	r0, r5
 800a002:	47b8      	blx	r7
 800a004:	3001      	adds	r0, #1
 800a006:	f43f ae38 	beq.w	8009c7a <_printf_float+0xc2>
 800a00a:	f108 0801 	add.w	r8, r8, #1
 800a00e:	68e3      	ldr	r3, [r4, #12]
 800a010:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a012:	1a5b      	subs	r3, r3, r1
 800a014:	4543      	cmp	r3, r8
 800a016:	dcf0      	bgt.n	8009ffa <_printf_float+0x442>
 800a018:	e6fa      	b.n	8009e10 <_printf_float+0x258>
 800a01a:	f04f 0800 	mov.w	r8, #0
 800a01e:	f104 0919 	add.w	r9, r4, #25
 800a022:	e7f4      	b.n	800a00e <_printf_float+0x456>

0800a024 <_printf_common>:
 800a024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a028:	4616      	mov	r6, r2
 800a02a:	4699      	mov	r9, r3
 800a02c:	688a      	ldr	r2, [r1, #8]
 800a02e:	690b      	ldr	r3, [r1, #16]
 800a030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a034:	4293      	cmp	r3, r2
 800a036:	bfb8      	it	lt
 800a038:	4613      	movlt	r3, r2
 800a03a:	6033      	str	r3, [r6, #0]
 800a03c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a040:	4607      	mov	r7, r0
 800a042:	460c      	mov	r4, r1
 800a044:	b10a      	cbz	r2, 800a04a <_printf_common+0x26>
 800a046:	3301      	adds	r3, #1
 800a048:	6033      	str	r3, [r6, #0]
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	0699      	lsls	r1, r3, #26
 800a04e:	bf42      	ittt	mi
 800a050:	6833      	ldrmi	r3, [r6, #0]
 800a052:	3302      	addmi	r3, #2
 800a054:	6033      	strmi	r3, [r6, #0]
 800a056:	6825      	ldr	r5, [r4, #0]
 800a058:	f015 0506 	ands.w	r5, r5, #6
 800a05c:	d106      	bne.n	800a06c <_printf_common+0x48>
 800a05e:	f104 0a19 	add.w	sl, r4, #25
 800a062:	68e3      	ldr	r3, [r4, #12]
 800a064:	6832      	ldr	r2, [r6, #0]
 800a066:	1a9b      	subs	r3, r3, r2
 800a068:	42ab      	cmp	r3, r5
 800a06a:	dc26      	bgt.n	800a0ba <_printf_common+0x96>
 800a06c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a070:	1e13      	subs	r3, r2, #0
 800a072:	6822      	ldr	r2, [r4, #0]
 800a074:	bf18      	it	ne
 800a076:	2301      	movne	r3, #1
 800a078:	0692      	lsls	r2, r2, #26
 800a07a:	d42b      	bmi.n	800a0d4 <_printf_common+0xb0>
 800a07c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a080:	4649      	mov	r1, r9
 800a082:	4638      	mov	r0, r7
 800a084:	47c0      	blx	r8
 800a086:	3001      	adds	r0, #1
 800a088:	d01e      	beq.n	800a0c8 <_printf_common+0xa4>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	68e5      	ldr	r5, [r4, #12]
 800a08e:	6832      	ldr	r2, [r6, #0]
 800a090:	f003 0306 	and.w	r3, r3, #6
 800a094:	2b04      	cmp	r3, #4
 800a096:	bf08      	it	eq
 800a098:	1aad      	subeq	r5, r5, r2
 800a09a:	68a3      	ldr	r3, [r4, #8]
 800a09c:	6922      	ldr	r2, [r4, #16]
 800a09e:	bf0c      	ite	eq
 800a0a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0a4:	2500      	movne	r5, #0
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	bfc4      	itt	gt
 800a0aa:	1a9b      	subgt	r3, r3, r2
 800a0ac:	18ed      	addgt	r5, r5, r3
 800a0ae:	2600      	movs	r6, #0
 800a0b0:	341a      	adds	r4, #26
 800a0b2:	42b5      	cmp	r5, r6
 800a0b4:	d11a      	bne.n	800a0ec <_printf_common+0xc8>
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	e008      	b.n	800a0cc <_printf_common+0xa8>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	4652      	mov	r2, sl
 800a0be:	4649      	mov	r1, r9
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	47c0      	blx	r8
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	d103      	bne.n	800a0d0 <_printf_common+0xac>
 800a0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d0:	3501      	adds	r5, #1
 800a0d2:	e7c6      	b.n	800a062 <_printf_common+0x3e>
 800a0d4:	18e1      	adds	r1, r4, r3
 800a0d6:	1c5a      	adds	r2, r3, #1
 800a0d8:	2030      	movs	r0, #48	; 0x30
 800a0da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0de:	4422      	add	r2, r4
 800a0e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0e8:	3302      	adds	r3, #2
 800a0ea:	e7c7      	b.n	800a07c <_printf_common+0x58>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	4622      	mov	r2, r4
 800a0f0:	4649      	mov	r1, r9
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	47c0      	blx	r8
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	d0e6      	beq.n	800a0c8 <_printf_common+0xa4>
 800a0fa:	3601      	adds	r6, #1
 800a0fc:	e7d9      	b.n	800a0b2 <_printf_common+0x8e>
	...

0800a100 <_printf_i>:
 800a100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a104:	7e0f      	ldrb	r7, [r1, #24]
 800a106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a108:	2f78      	cmp	r7, #120	; 0x78
 800a10a:	4691      	mov	r9, r2
 800a10c:	4680      	mov	r8, r0
 800a10e:	460c      	mov	r4, r1
 800a110:	469a      	mov	sl, r3
 800a112:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a116:	d807      	bhi.n	800a128 <_printf_i+0x28>
 800a118:	2f62      	cmp	r7, #98	; 0x62
 800a11a:	d80a      	bhi.n	800a132 <_printf_i+0x32>
 800a11c:	2f00      	cmp	r7, #0
 800a11e:	f000 80d8 	beq.w	800a2d2 <_printf_i+0x1d2>
 800a122:	2f58      	cmp	r7, #88	; 0x58
 800a124:	f000 80a3 	beq.w	800a26e <_printf_i+0x16e>
 800a128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a12c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a130:	e03a      	b.n	800a1a8 <_printf_i+0xa8>
 800a132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a136:	2b15      	cmp	r3, #21
 800a138:	d8f6      	bhi.n	800a128 <_printf_i+0x28>
 800a13a:	a101      	add	r1, pc, #4	; (adr r1, 800a140 <_printf_i+0x40>)
 800a13c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a140:	0800a199 	.word	0x0800a199
 800a144:	0800a1ad 	.word	0x0800a1ad
 800a148:	0800a129 	.word	0x0800a129
 800a14c:	0800a129 	.word	0x0800a129
 800a150:	0800a129 	.word	0x0800a129
 800a154:	0800a129 	.word	0x0800a129
 800a158:	0800a1ad 	.word	0x0800a1ad
 800a15c:	0800a129 	.word	0x0800a129
 800a160:	0800a129 	.word	0x0800a129
 800a164:	0800a129 	.word	0x0800a129
 800a168:	0800a129 	.word	0x0800a129
 800a16c:	0800a2b9 	.word	0x0800a2b9
 800a170:	0800a1dd 	.word	0x0800a1dd
 800a174:	0800a29b 	.word	0x0800a29b
 800a178:	0800a129 	.word	0x0800a129
 800a17c:	0800a129 	.word	0x0800a129
 800a180:	0800a2db 	.word	0x0800a2db
 800a184:	0800a129 	.word	0x0800a129
 800a188:	0800a1dd 	.word	0x0800a1dd
 800a18c:	0800a129 	.word	0x0800a129
 800a190:	0800a129 	.word	0x0800a129
 800a194:	0800a2a3 	.word	0x0800a2a3
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	1d1a      	adds	r2, r3, #4
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	602a      	str	r2, [r5, #0]
 800a1a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e0a3      	b.n	800a2f4 <_printf_i+0x1f4>
 800a1ac:	6820      	ldr	r0, [r4, #0]
 800a1ae:	6829      	ldr	r1, [r5, #0]
 800a1b0:	0606      	lsls	r6, r0, #24
 800a1b2:	f101 0304 	add.w	r3, r1, #4
 800a1b6:	d50a      	bpl.n	800a1ce <_printf_i+0xce>
 800a1b8:	680e      	ldr	r6, [r1, #0]
 800a1ba:	602b      	str	r3, [r5, #0]
 800a1bc:	2e00      	cmp	r6, #0
 800a1be:	da03      	bge.n	800a1c8 <_printf_i+0xc8>
 800a1c0:	232d      	movs	r3, #45	; 0x2d
 800a1c2:	4276      	negs	r6, r6
 800a1c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1c8:	485e      	ldr	r0, [pc, #376]	; (800a344 <_printf_i+0x244>)
 800a1ca:	230a      	movs	r3, #10
 800a1cc:	e019      	b.n	800a202 <_printf_i+0x102>
 800a1ce:	680e      	ldr	r6, [r1, #0]
 800a1d0:	602b      	str	r3, [r5, #0]
 800a1d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1d6:	bf18      	it	ne
 800a1d8:	b236      	sxthne	r6, r6
 800a1da:	e7ef      	b.n	800a1bc <_printf_i+0xbc>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	6820      	ldr	r0, [r4, #0]
 800a1e0:	1d19      	adds	r1, r3, #4
 800a1e2:	6029      	str	r1, [r5, #0]
 800a1e4:	0601      	lsls	r1, r0, #24
 800a1e6:	d501      	bpl.n	800a1ec <_printf_i+0xec>
 800a1e8:	681e      	ldr	r6, [r3, #0]
 800a1ea:	e002      	b.n	800a1f2 <_printf_i+0xf2>
 800a1ec:	0646      	lsls	r6, r0, #25
 800a1ee:	d5fb      	bpl.n	800a1e8 <_printf_i+0xe8>
 800a1f0:	881e      	ldrh	r6, [r3, #0]
 800a1f2:	4854      	ldr	r0, [pc, #336]	; (800a344 <_printf_i+0x244>)
 800a1f4:	2f6f      	cmp	r7, #111	; 0x6f
 800a1f6:	bf0c      	ite	eq
 800a1f8:	2308      	moveq	r3, #8
 800a1fa:	230a      	movne	r3, #10
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a202:	6865      	ldr	r5, [r4, #4]
 800a204:	60a5      	str	r5, [r4, #8]
 800a206:	2d00      	cmp	r5, #0
 800a208:	bfa2      	ittt	ge
 800a20a:	6821      	ldrge	r1, [r4, #0]
 800a20c:	f021 0104 	bicge.w	r1, r1, #4
 800a210:	6021      	strge	r1, [r4, #0]
 800a212:	b90e      	cbnz	r6, 800a218 <_printf_i+0x118>
 800a214:	2d00      	cmp	r5, #0
 800a216:	d04d      	beq.n	800a2b4 <_printf_i+0x1b4>
 800a218:	4615      	mov	r5, r2
 800a21a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a21e:	fb03 6711 	mls	r7, r3, r1, r6
 800a222:	5dc7      	ldrb	r7, [r0, r7]
 800a224:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a228:	4637      	mov	r7, r6
 800a22a:	42bb      	cmp	r3, r7
 800a22c:	460e      	mov	r6, r1
 800a22e:	d9f4      	bls.n	800a21a <_printf_i+0x11a>
 800a230:	2b08      	cmp	r3, #8
 800a232:	d10b      	bne.n	800a24c <_printf_i+0x14c>
 800a234:	6823      	ldr	r3, [r4, #0]
 800a236:	07de      	lsls	r6, r3, #31
 800a238:	d508      	bpl.n	800a24c <_printf_i+0x14c>
 800a23a:	6923      	ldr	r3, [r4, #16]
 800a23c:	6861      	ldr	r1, [r4, #4]
 800a23e:	4299      	cmp	r1, r3
 800a240:	bfde      	ittt	le
 800a242:	2330      	movle	r3, #48	; 0x30
 800a244:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a248:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a24c:	1b52      	subs	r2, r2, r5
 800a24e:	6122      	str	r2, [r4, #16]
 800a250:	f8cd a000 	str.w	sl, [sp]
 800a254:	464b      	mov	r3, r9
 800a256:	aa03      	add	r2, sp, #12
 800a258:	4621      	mov	r1, r4
 800a25a:	4640      	mov	r0, r8
 800a25c:	f7ff fee2 	bl	800a024 <_printf_common>
 800a260:	3001      	adds	r0, #1
 800a262:	d14c      	bne.n	800a2fe <_printf_i+0x1fe>
 800a264:	f04f 30ff 	mov.w	r0, #4294967295
 800a268:	b004      	add	sp, #16
 800a26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a26e:	4835      	ldr	r0, [pc, #212]	; (800a344 <_printf_i+0x244>)
 800a270:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a274:	6829      	ldr	r1, [r5, #0]
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	f851 6b04 	ldr.w	r6, [r1], #4
 800a27c:	6029      	str	r1, [r5, #0]
 800a27e:	061d      	lsls	r5, r3, #24
 800a280:	d514      	bpl.n	800a2ac <_printf_i+0x1ac>
 800a282:	07df      	lsls	r7, r3, #31
 800a284:	bf44      	itt	mi
 800a286:	f043 0320 	orrmi.w	r3, r3, #32
 800a28a:	6023      	strmi	r3, [r4, #0]
 800a28c:	b91e      	cbnz	r6, 800a296 <_printf_i+0x196>
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	f023 0320 	bic.w	r3, r3, #32
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	2310      	movs	r3, #16
 800a298:	e7b0      	b.n	800a1fc <_printf_i+0xfc>
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	f043 0320 	orr.w	r3, r3, #32
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	2378      	movs	r3, #120	; 0x78
 800a2a4:	4828      	ldr	r0, [pc, #160]	; (800a348 <_printf_i+0x248>)
 800a2a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2aa:	e7e3      	b.n	800a274 <_printf_i+0x174>
 800a2ac:	0659      	lsls	r1, r3, #25
 800a2ae:	bf48      	it	mi
 800a2b0:	b2b6      	uxthmi	r6, r6
 800a2b2:	e7e6      	b.n	800a282 <_printf_i+0x182>
 800a2b4:	4615      	mov	r5, r2
 800a2b6:	e7bb      	b.n	800a230 <_printf_i+0x130>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	6826      	ldr	r6, [r4, #0]
 800a2bc:	6961      	ldr	r1, [r4, #20]
 800a2be:	1d18      	adds	r0, r3, #4
 800a2c0:	6028      	str	r0, [r5, #0]
 800a2c2:	0635      	lsls	r5, r6, #24
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	d501      	bpl.n	800a2cc <_printf_i+0x1cc>
 800a2c8:	6019      	str	r1, [r3, #0]
 800a2ca:	e002      	b.n	800a2d2 <_printf_i+0x1d2>
 800a2cc:	0670      	lsls	r0, r6, #25
 800a2ce:	d5fb      	bpl.n	800a2c8 <_printf_i+0x1c8>
 800a2d0:	8019      	strh	r1, [r3, #0]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	6123      	str	r3, [r4, #16]
 800a2d6:	4615      	mov	r5, r2
 800a2d8:	e7ba      	b.n	800a250 <_printf_i+0x150>
 800a2da:	682b      	ldr	r3, [r5, #0]
 800a2dc:	1d1a      	adds	r2, r3, #4
 800a2de:	602a      	str	r2, [r5, #0]
 800a2e0:	681d      	ldr	r5, [r3, #0]
 800a2e2:	6862      	ldr	r2, [r4, #4]
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	f7f5 ff7a 	bl	80001e0 <memchr>
 800a2ec:	b108      	cbz	r0, 800a2f2 <_printf_i+0x1f2>
 800a2ee:	1b40      	subs	r0, r0, r5
 800a2f0:	6060      	str	r0, [r4, #4]
 800a2f2:	6863      	ldr	r3, [r4, #4]
 800a2f4:	6123      	str	r3, [r4, #16]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2fc:	e7a8      	b.n	800a250 <_printf_i+0x150>
 800a2fe:	6923      	ldr	r3, [r4, #16]
 800a300:	462a      	mov	r2, r5
 800a302:	4649      	mov	r1, r9
 800a304:	4640      	mov	r0, r8
 800a306:	47d0      	blx	sl
 800a308:	3001      	adds	r0, #1
 800a30a:	d0ab      	beq.n	800a264 <_printf_i+0x164>
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	079b      	lsls	r3, r3, #30
 800a310:	d413      	bmi.n	800a33a <_printf_i+0x23a>
 800a312:	68e0      	ldr	r0, [r4, #12]
 800a314:	9b03      	ldr	r3, [sp, #12]
 800a316:	4298      	cmp	r0, r3
 800a318:	bfb8      	it	lt
 800a31a:	4618      	movlt	r0, r3
 800a31c:	e7a4      	b.n	800a268 <_printf_i+0x168>
 800a31e:	2301      	movs	r3, #1
 800a320:	4632      	mov	r2, r6
 800a322:	4649      	mov	r1, r9
 800a324:	4640      	mov	r0, r8
 800a326:	47d0      	blx	sl
 800a328:	3001      	adds	r0, #1
 800a32a:	d09b      	beq.n	800a264 <_printf_i+0x164>
 800a32c:	3501      	adds	r5, #1
 800a32e:	68e3      	ldr	r3, [r4, #12]
 800a330:	9903      	ldr	r1, [sp, #12]
 800a332:	1a5b      	subs	r3, r3, r1
 800a334:	42ab      	cmp	r3, r5
 800a336:	dcf2      	bgt.n	800a31e <_printf_i+0x21e>
 800a338:	e7eb      	b.n	800a312 <_printf_i+0x212>
 800a33a:	2500      	movs	r5, #0
 800a33c:	f104 0619 	add.w	r6, r4, #25
 800a340:	e7f5      	b.n	800a32e <_printf_i+0x22e>
 800a342:	bf00      	nop
 800a344:	0800e512 	.word	0x0800e512
 800a348:	0800e523 	.word	0x0800e523

0800a34c <_scanf_float>:
 800a34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a350:	b087      	sub	sp, #28
 800a352:	4617      	mov	r7, r2
 800a354:	9303      	str	r3, [sp, #12]
 800a356:	688b      	ldr	r3, [r1, #8]
 800a358:	1e5a      	subs	r2, r3, #1
 800a35a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a35e:	bf83      	ittte	hi
 800a360:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a364:	195b      	addhi	r3, r3, r5
 800a366:	9302      	strhi	r3, [sp, #8]
 800a368:	2300      	movls	r3, #0
 800a36a:	bf86      	itte	hi
 800a36c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a370:	608b      	strhi	r3, [r1, #8]
 800a372:	9302      	strls	r3, [sp, #8]
 800a374:	680b      	ldr	r3, [r1, #0]
 800a376:	468b      	mov	fp, r1
 800a378:	2500      	movs	r5, #0
 800a37a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a37e:	f84b 3b1c 	str.w	r3, [fp], #28
 800a382:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a386:	4680      	mov	r8, r0
 800a388:	460c      	mov	r4, r1
 800a38a:	465e      	mov	r6, fp
 800a38c:	46aa      	mov	sl, r5
 800a38e:	46a9      	mov	r9, r5
 800a390:	9501      	str	r5, [sp, #4]
 800a392:	68a2      	ldr	r2, [r4, #8]
 800a394:	b152      	cbz	r2, 800a3ac <_scanf_float+0x60>
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	2b4e      	cmp	r3, #78	; 0x4e
 800a39c:	d864      	bhi.n	800a468 <_scanf_float+0x11c>
 800a39e:	2b40      	cmp	r3, #64	; 0x40
 800a3a0:	d83c      	bhi.n	800a41c <_scanf_float+0xd0>
 800a3a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a3a6:	b2c8      	uxtb	r0, r1
 800a3a8:	280e      	cmp	r0, #14
 800a3aa:	d93a      	bls.n	800a422 <_scanf_float+0xd6>
 800a3ac:	f1b9 0f00 	cmp.w	r9, #0
 800a3b0:	d003      	beq.n	800a3ba <_scanf_float+0x6e>
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3be:	f1ba 0f01 	cmp.w	sl, #1
 800a3c2:	f200 8113 	bhi.w	800a5ec <_scanf_float+0x2a0>
 800a3c6:	455e      	cmp	r6, fp
 800a3c8:	f200 8105 	bhi.w	800a5d6 <_scanf_float+0x28a>
 800a3cc:	2501      	movs	r5, #1
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	b007      	add	sp, #28
 800a3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a3da:	2a0d      	cmp	r2, #13
 800a3dc:	d8e6      	bhi.n	800a3ac <_scanf_float+0x60>
 800a3de:	a101      	add	r1, pc, #4	; (adr r1, 800a3e4 <_scanf_float+0x98>)
 800a3e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a3e4:	0800a523 	.word	0x0800a523
 800a3e8:	0800a3ad 	.word	0x0800a3ad
 800a3ec:	0800a3ad 	.word	0x0800a3ad
 800a3f0:	0800a3ad 	.word	0x0800a3ad
 800a3f4:	0800a583 	.word	0x0800a583
 800a3f8:	0800a55b 	.word	0x0800a55b
 800a3fc:	0800a3ad 	.word	0x0800a3ad
 800a400:	0800a3ad 	.word	0x0800a3ad
 800a404:	0800a531 	.word	0x0800a531
 800a408:	0800a3ad 	.word	0x0800a3ad
 800a40c:	0800a3ad 	.word	0x0800a3ad
 800a410:	0800a3ad 	.word	0x0800a3ad
 800a414:	0800a3ad 	.word	0x0800a3ad
 800a418:	0800a4e9 	.word	0x0800a4e9
 800a41c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a420:	e7db      	b.n	800a3da <_scanf_float+0x8e>
 800a422:	290e      	cmp	r1, #14
 800a424:	d8c2      	bhi.n	800a3ac <_scanf_float+0x60>
 800a426:	a001      	add	r0, pc, #4	; (adr r0, 800a42c <_scanf_float+0xe0>)
 800a428:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a42c:	0800a4db 	.word	0x0800a4db
 800a430:	0800a3ad 	.word	0x0800a3ad
 800a434:	0800a4db 	.word	0x0800a4db
 800a438:	0800a56f 	.word	0x0800a56f
 800a43c:	0800a3ad 	.word	0x0800a3ad
 800a440:	0800a489 	.word	0x0800a489
 800a444:	0800a4c5 	.word	0x0800a4c5
 800a448:	0800a4c5 	.word	0x0800a4c5
 800a44c:	0800a4c5 	.word	0x0800a4c5
 800a450:	0800a4c5 	.word	0x0800a4c5
 800a454:	0800a4c5 	.word	0x0800a4c5
 800a458:	0800a4c5 	.word	0x0800a4c5
 800a45c:	0800a4c5 	.word	0x0800a4c5
 800a460:	0800a4c5 	.word	0x0800a4c5
 800a464:	0800a4c5 	.word	0x0800a4c5
 800a468:	2b6e      	cmp	r3, #110	; 0x6e
 800a46a:	d809      	bhi.n	800a480 <_scanf_float+0x134>
 800a46c:	2b60      	cmp	r3, #96	; 0x60
 800a46e:	d8b2      	bhi.n	800a3d6 <_scanf_float+0x8a>
 800a470:	2b54      	cmp	r3, #84	; 0x54
 800a472:	d077      	beq.n	800a564 <_scanf_float+0x218>
 800a474:	2b59      	cmp	r3, #89	; 0x59
 800a476:	d199      	bne.n	800a3ac <_scanf_float+0x60>
 800a478:	2d07      	cmp	r5, #7
 800a47a:	d197      	bne.n	800a3ac <_scanf_float+0x60>
 800a47c:	2508      	movs	r5, #8
 800a47e:	e029      	b.n	800a4d4 <_scanf_float+0x188>
 800a480:	2b74      	cmp	r3, #116	; 0x74
 800a482:	d06f      	beq.n	800a564 <_scanf_float+0x218>
 800a484:	2b79      	cmp	r3, #121	; 0x79
 800a486:	e7f6      	b.n	800a476 <_scanf_float+0x12a>
 800a488:	6821      	ldr	r1, [r4, #0]
 800a48a:	05c8      	lsls	r0, r1, #23
 800a48c:	d51a      	bpl.n	800a4c4 <_scanf_float+0x178>
 800a48e:	9b02      	ldr	r3, [sp, #8]
 800a490:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a494:	6021      	str	r1, [r4, #0]
 800a496:	f109 0901 	add.w	r9, r9, #1
 800a49a:	b11b      	cbz	r3, 800a4a4 <_scanf_float+0x158>
 800a49c:	3b01      	subs	r3, #1
 800a49e:	3201      	adds	r2, #1
 800a4a0:	9302      	str	r3, [sp, #8]
 800a4a2:	60a2      	str	r2, [r4, #8]
 800a4a4:	68a3      	ldr	r3, [r4, #8]
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	60a3      	str	r3, [r4, #8]
 800a4aa:	6923      	ldr	r3, [r4, #16]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	6123      	str	r3, [r4, #16]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	607b      	str	r3, [r7, #4]
 800a4b8:	f340 8084 	ble.w	800a5c4 <_scanf_float+0x278>
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	603b      	str	r3, [r7, #0]
 800a4c2:	e766      	b.n	800a392 <_scanf_float+0x46>
 800a4c4:	eb1a 0f05 	cmn.w	sl, r5
 800a4c8:	f47f af70 	bne.w	800a3ac <_scanf_float+0x60>
 800a4cc:	6822      	ldr	r2, [r4, #0]
 800a4ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a4d2:	6022      	str	r2, [r4, #0]
 800a4d4:	f806 3b01 	strb.w	r3, [r6], #1
 800a4d8:	e7e4      	b.n	800a4a4 <_scanf_float+0x158>
 800a4da:	6822      	ldr	r2, [r4, #0]
 800a4dc:	0610      	lsls	r0, r2, #24
 800a4de:	f57f af65 	bpl.w	800a3ac <_scanf_float+0x60>
 800a4e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4e6:	e7f4      	b.n	800a4d2 <_scanf_float+0x186>
 800a4e8:	f1ba 0f00 	cmp.w	sl, #0
 800a4ec:	d10e      	bne.n	800a50c <_scanf_float+0x1c0>
 800a4ee:	f1b9 0f00 	cmp.w	r9, #0
 800a4f2:	d10e      	bne.n	800a512 <_scanf_float+0x1c6>
 800a4f4:	6822      	ldr	r2, [r4, #0]
 800a4f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a4fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a4fe:	d108      	bne.n	800a512 <_scanf_float+0x1c6>
 800a500:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a504:	6022      	str	r2, [r4, #0]
 800a506:	f04f 0a01 	mov.w	sl, #1
 800a50a:	e7e3      	b.n	800a4d4 <_scanf_float+0x188>
 800a50c:	f1ba 0f02 	cmp.w	sl, #2
 800a510:	d055      	beq.n	800a5be <_scanf_float+0x272>
 800a512:	2d01      	cmp	r5, #1
 800a514:	d002      	beq.n	800a51c <_scanf_float+0x1d0>
 800a516:	2d04      	cmp	r5, #4
 800a518:	f47f af48 	bne.w	800a3ac <_scanf_float+0x60>
 800a51c:	3501      	adds	r5, #1
 800a51e:	b2ed      	uxtb	r5, r5
 800a520:	e7d8      	b.n	800a4d4 <_scanf_float+0x188>
 800a522:	f1ba 0f01 	cmp.w	sl, #1
 800a526:	f47f af41 	bne.w	800a3ac <_scanf_float+0x60>
 800a52a:	f04f 0a02 	mov.w	sl, #2
 800a52e:	e7d1      	b.n	800a4d4 <_scanf_float+0x188>
 800a530:	b97d      	cbnz	r5, 800a552 <_scanf_float+0x206>
 800a532:	f1b9 0f00 	cmp.w	r9, #0
 800a536:	f47f af3c 	bne.w	800a3b2 <_scanf_float+0x66>
 800a53a:	6822      	ldr	r2, [r4, #0]
 800a53c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a540:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a544:	f47f af39 	bne.w	800a3ba <_scanf_float+0x6e>
 800a548:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a54c:	6022      	str	r2, [r4, #0]
 800a54e:	2501      	movs	r5, #1
 800a550:	e7c0      	b.n	800a4d4 <_scanf_float+0x188>
 800a552:	2d03      	cmp	r5, #3
 800a554:	d0e2      	beq.n	800a51c <_scanf_float+0x1d0>
 800a556:	2d05      	cmp	r5, #5
 800a558:	e7de      	b.n	800a518 <_scanf_float+0x1cc>
 800a55a:	2d02      	cmp	r5, #2
 800a55c:	f47f af26 	bne.w	800a3ac <_scanf_float+0x60>
 800a560:	2503      	movs	r5, #3
 800a562:	e7b7      	b.n	800a4d4 <_scanf_float+0x188>
 800a564:	2d06      	cmp	r5, #6
 800a566:	f47f af21 	bne.w	800a3ac <_scanf_float+0x60>
 800a56a:	2507      	movs	r5, #7
 800a56c:	e7b2      	b.n	800a4d4 <_scanf_float+0x188>
 800a56e:	6822      	ldr	r2, [r4, #0]
 800a570:	0591      	lsls	r1, r2, #22
 800a572:	f57f af1b 	bpl.w	800a3ac <_scanf_float+0x60>
 800a576:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a57a:	6022      	str	r2, [r4, #0]
 800a57c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a580:	e7a8      	b.n	800a4d4 <_scanf_float+0x188>
 800a582:	6822      	ldr	r2, [r4, #0]
 800a584:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a588:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a58c:	d006      	beq.n	800a59c <_scanf_float+0x250>
 800a58e:	0550      	lsls	r0, r2, #21
 800a590:	f57f af0c 	bpl.w	800a3ac <_scanf_float+0x60>
 800a594:	f1b9 0f00 	cmp.w	r9, #0
 800a598:	f43f af0f 	beq.w	800a3ba <_scanf_float+0x6e>
 800a59c:	0591      	lsls	r1, r2, #22
 800a59e:	bf58      	it	pl
 800a5a0:	9901      	ldrpl	r1, [sp, #4]
 800a5a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a5a6:	bf58      	it	pl
 800a5a8:	eba9 0101 	subpl.w	r1, r9, r1
 800a5ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a5b0:	bf58      	it	pl
 800a5b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a5b6:	6022      	str	r2, [r4, #0]
 800a5b8:	f04f 0900 	mov.w	r9, #0
 800a5bc:	e78a      	b.n	800a4d4 <_scanf_float+0x188>
 800a5be:	f04f 0a03 	mov.w	sl, #3
 800a5c2:	e787      	b.n	800a4d4 <_scanf_float+0x188>
 800a5c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a5c8:	4639      	mov	r1, r7
 800a5ca:	4640      	mov	r0, r8
 800a5cc:	4798      	blx	r3
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	f43f aedf 	beq.w	800a392 <_scanf_float+0x46>
 800a5d4:	e6ea      	b.n	800a3ac <_scanf_float+0x60>
 800a5d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a5de:	463a      	mov	r2, r7
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	4798      	blx	r3
 800a5e4:	6923      	ldr	r3, [r4, #16]
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	6123      	str	r3, [r4, #16]
 800a5ea:	e6ec      	b.n	800a3c6 <_scanf_float+0x7a>
 800a5ec:	1e6b      	subs	r3, r5, #1
 800a5ee:	2b06      	cmp	r3, #6
 800a5f0:	d825      	bhi.n	800a63e <_scanf_float+0x2f2>
 800a5f2:	2d02      	cmp	r5, #2
 800a5f4:	d836      	bhi.n	800a664 <_scanf_float+0x318>
 800a5f6:	455e      	cmp	r6, fp
 800a5f8:	f67f aee8 	bls.w	800a3cc <_scanf_float+0x80>
 800a5fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a600:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a604:	463a      	mov	r2, r7
 800a606:	4640      	mov	r0, r8
 800a608:	4798      	blx	r3
 800a60a:	6923      	ldr	r3, [r4, #16]
 800a60c:	3b01      	subs	r3, #1
 800a60e:	6123      	str	r3, [r4, #16]
 800a610:	e7f1      	b.n	800a5f6 <_scanf_float+0x2aa>
 800a612:	9802      	ldr	r0, [sp, #8]
 800a614:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a618:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a61c:	9002      	str	r0, [sp, #8]
 800a61e:	463a      	mov	r2, r7
 800a620:	4640      	mov	r0, r8
 800a622:	4798      	blx	r3
 800a624:	6923      	ldr	r3, [r4, #16]
 800a626:	3b01      	subs	r3, #1
 800a628:	6123      	str	r3, [r4, #16]
 800a62a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a62e:	fa5f fa8a 	uxtb.w	sl, sl
 800a632:	f1ba 0f02 	cmp.w	sl, #2
 800a636:	d1ec      	bne.n	800a612 <_scanf_float+0x2c6>
 800a638:	3d03      	subs	r5, #3
 800a63a:	b2ed      	uxtb	r5, r5
 800a63c:	1b76      	subs	r6, r6, r5
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	05da      	lsls	r2, r3, #23
 800a642:	d52f      	bpl.n	800a6a4 <_scanf_float+0x358>
 800a644:	055b      	lsls	r3, r3, #21
 800a646:	d510      	bpl.n	800a66a <_scanf_float+0x31e>
 800a648:	455e      	cmp	r6, fp
 800a64a:	f67f aebf 	bls.w	800a3cc <_scanf_float+0x80>
 800a64e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a652:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a656:	463a      	mov	r2, r7
 800a658:	4640      	mov	r0, r8
 800a65a:	4798      	blx	r3
 800a65c:	6923      	ldr	r3, [r4, #16]
 800a65e:	3b01      	subs	r3, #1
 800a660:	6123      	str	r3, [r4, #16]
 800a662:	e7f1      	b.n	800a648 <_scanf_float+0x2fc>
 800a664:	46aa      	mov	sl, r5
 800a666:	9602      	str	r6, [sp, #8]
 800a668:	e7df      	b.n	800a62a <_scanf_float+0x2de>
 800a66a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a66e:	6923      	ldr	r3, [r4, #16]
 800a670:	2965      	cmp	r1, #101	; 0x65
 800a672:	f103 33ff 	add.w	r3, r3, #4294967295
 800a676:	f106 35ff 	add.w	r5, r6, #4294967295
 800a67a:	6123      	str	r3, [r4, #16]
 800a67c:	d00c      	beq.n	800a698 <_scanf_float+0x34c>
 800a67e:	2945      	cmp	r1, #69	; 0x45
 800a680:	d00a      	beq.n	800a698 <_scanf_float+0x34c>
 800a682:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a686:	463a      	mov	r2, r7
 800a688:	4640      	mov	r0, r8
 800a68a:	4798      	blx	r3
 800a68c:	6923      	ldr	r3, [r4, #16]
 800a68e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a692:	3b01      	subs	r3, #1
 800a694:	1eb5      	subs	r5, r6, #2
 800a696:	6123      	str	r3, [r4, #16]
 800a698:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a69c:	463a      	mov	r2, r7
 800a69e:	4640      	mov	r0, r8
 800a6a0:	4798      	blx	r3
 800a6a2:	462e      	mov	r6, r5
 800a6a4:	6825      	ldr	r5, [r4, #0]
 800a6a6:	f015 0510 	ands.w	r5, r5, #16
 800a6aa:	d159      	bne.n	800a760 <_scanf_float+0x414>
 800a6ac:	7035      	strb	r5, [r6, #0]
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a6b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6b8:	d11b      	bne.n	800a6f2 <_scanf_float+0x3a6>
 800a6ba:	9b01      	ldr	r3, [sp, #4]
 800a6bc:	454b      	cmp	r3, r9
 800a6be:	eba3 0209 	sub.w	r2, r3, r9
 800a6c2:	d123      	bne.n	800a70c <_scanf_float+0x3c0>
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	4659      	mov	r1, fp
 800a6c8:	4640      	mov	r0, r8
 800a6ca:	f000 fe97 	bl	800b3fc <_strtod_r>
 800a6ce:	6822      	ldr	r2, [r4, #0]
 800a6d0:	9b03      	ldr	r3, [sp, #12]
 800a6d2:	f012 0f02 	tst.w	r2, #2
 800a6d6:	ec57 6b10 	vmov	r6, r7, d0
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	d021      	beq.n	800a722 <_scanf_float+0x3d6>
 800a6de:	9903      	ldr	r1, [sp, #12]
 800a6e0:	1d1a      	adds	r2, r3, #4
 800a6e2:	600a      	str	r2, [r1, #0]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	e9c3 6700 	strd	r6, r7, [r3]
 800a6ea:	68e3      	ldr	r3, [r4, #12]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	60e3      	str	r3, [r4, #12]
 800a6f0:	e66d      	b.n	800a3ce <_scanf_float+0x82>
 800a6f2:	9b04      	ldr	r3, [sp, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d0e5      	beq.n	800a6c4 <_scanf_float+0x378>
 800a6f8:	9905      	ldr	r1, [sp, #20]
 800a6fa:	230a      	movs	r3, #10
 800a6fc:	462a      	mov	r2, r5
 800a6fe:	3101      	adds	r1, #1
 800a700:	4640      	mov	r0, r8
 800a702:	f000 ff03 	bl	800b50c <_strtol_r>
 800a706:	9b04      	ldr	r3, [sp, #16]
 800a708:	9e05      	ldr	r6, [sp, #20]
 800a70a:	1ac2      	subs	r2, r0, r3
 800a70c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a710:	429e      	cmp	r6, r3
 800a712:	bf28      	it	cs
 800a714:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a718:	4912      	ldr	r1, [pc, #72]	; (800a764 <_scanf_float+0x418>)
 800a71a:	4630      	mov	r0, r6
 800a71c:	f000 f82c 	bl	800a778 <siprintf>
 800a720:	e7d0      	b.n	800a6c4 <_scanf_float+0x378>
 800a722:	9903      	ldr	r1, [sp, #12]
 800a724:	f012 0f04 	tst.w	r2, #4
 800a728:	f103 0204 	add.w	r2, r3, #4
 800a72c:	600a      	str	r2, [r1, #0]
 800a72e:	d1d9      	bne.n	800a6e4 <_scanf_float+0x398>
 800a730:	f8d3 8000 	ldr.w	r8, [r3]
 800a734:	ee10 2a10 	vmov	r2, s0
 800a738:	ee10 0a10 	vmov	r0, s0
 800a73c:	463b      	mov	r3, r7
 800a73e:	4639      	mov	r1, r7
 800a740:	f7f6 f9f4 	bl	8000b2c <__aeabi_dcmpun>
 800a744:	b128      	cbz	r0, 800a752 <_scanf_float+0x406>
 800a746:	4808      	ldr	r0, [pc, #32]	; (800a768 <_scanf_float+0x41c>)
 800a748:	f000 f810 	bl	800a76c <nanf>
 800a74c:	ed88 0a00 	vstr	s0, [r8]
 800a750:	e7cb      	b.n	800a6ea <_scanf_float+0x39e>
 800a752:	4630      	mov	r0, r6
 800a754:	4639      	mov	r1, r7
 800a756:	f7f6 fa47 	bl	8000be8 <__aeabi_d2f>
 800a75a:	f8c8 0000 	str.w	r0, [r8]
 800a75e:	e7c4      	b.n	800a6ea <_scanf_float+0x39e>
 800a760:	2500      	movs	r5, #0
 800a762:	e634      	b.n	800a3ce <_scanf_float+0x82>
 800a764:	0800e534 	.word	0x0800e534
 800a768:	0800e5cb 	.word	0x0800e5cb

0800a76c <nanf>:
 800a76c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a774 <nanf+0x8>
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	7fc00000 	.word	0x7fc00000

0800a778 <siprintf>:
 800a778:	b40e      	push	{r1, r2, r3}
 800a77a:	b500      	push	{lr}
 800a77c:	b09c      	sub	sp, #112	; 0x70
 800a77e:	ab1d      	add	r3, sp, #116	; 0x74
 800a780:	9002      	str	r0, [sp, #8]
 800a782:	9006      	str	r0, [sp, #24]
 800a784:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a788:	4809      	ldr	r0, [pc, #36]	; (800a7b0 <siprintf+0x38>)
 800a78a:	9107      	str	r1, [sp, #28]
 800a78c:	9104      	str	r1, [sp, #16]
 800a78e:	4909      	ldr	r1, [pc, #36]	; (800a7b4 <siprintf+0x3c>)
 800a790:	f853 2b04 	ldr.w	r2, [r3], #4
 800a794:	9105      	str	r1, [sp, #20]
 800a796:	6800      	ldr	r0, [r0, #0]
 800a798:	9301      	str	r3, [sp, #4]
 800a79a:	a902      	add	r1, sp, #8
 800a79c:	f003 f9e4 	bl	800db68 <_svfiprintf_r>
 800a7a0:	9b02      	ldr	r3, [sp, #8]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	701a      	strb	r2, [r3, #0]
 800a7a6:	b01c      	add	sp, #112	; 0x70
 800a7a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7ac:	b003      	add	sp, #12
 800a7ae:	4770      	bx	lr
 800a7b0:	20000024 	.word	0x20000024
 800a7b4:	ffff0208 	.word	0xffff0208

0800a7b8 <sulp>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	460d      	mov	r5, r1
 800a7be:	ec45 4b10 	vmov	d0, r4, r5
 800a7c2:	4616      	mov	r6, r2
 800a7c4:	f002 ff2e 	bl	800d624 <__ulp>
 800a7c8:	ec51 0b10 	vmov	r0, r1, d0
 800a7cc:	b17e      	cbz	r6, 800a7ee <sulp+0x36>
 800a7ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a7d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	dd09      	ble.n	800a7ee <sulp+0x36>
 800a7da:	051b      	lsls	r3, r3, #20
 800a7dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a7e0:	2400      	movs	r4, #0
 800a7e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a7e6:	4622      	mov	r2, r4
 800a7e8:	462b      	mov	r3, r5
 800a7ea:	f7f5 ff05 	bl	80005f8 <__aeabi_dmul>
 800a7ee:	bd70      	pop	{r4, r5, r6, pc}

0800a7f0 <_strtod_l>:
 800a7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f4:	ed2d 8b02 	vpush	{d8}
 800a7f8:	b09d      	sub	sp, #116	; 0x74
 800a7fa:	461f      	mov	r7, r3
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	9318      	str	r3, [sp, #96]	; 0x60
 800a800:	4ba2      	ldr	r3, [pc, #648]	; (800aa8c <_strtod_l+0x29c>)
 800a802:	9213      	str	r2, [sp, #76]	; 0x4c
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	9305      	str	r3, [sp, #20]
 800a808:	4604      	mov	r4, r0
 800a80a:	4618      	mov	r0, r3
 800a80c:	4688      	mov	r8, r1
 800a80e:	f7f5 fcdf 	bl	80001d0 <strlen>
 800a812:	f04f 0a00 	mov.w	sl, #0
 800a816:	4605      	mov	r5, r0
 800a818:	f04f 0b00 	mov.w	fp, #0
 800a81c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a820:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a822:	781a      	ldrb	r2, [r3, #0]
 800a824:	2a2b      	cmp	r2, #43	; 0x2b
 800a826:	d04e      	beq.n	800a8c6 <_strtod_l+0xd6>
 800a828:	d83b      	bhi.n	800a8a2 <_strtod_l+0xb2>
 800a82a:	2a0d      	cmp	r2, #13
 800a82c:	d834      	bhi.n	800a898 <_strtod_l+0xa8>
 800a82e:	2a08      	cmp	r2, #8
 800a830:	d834      	bhi.n	800a89c <_strtod_l+0xac>
 800a832:	2a00      	cmp	r2, #0
 800a834:	d03e      	beq.n	800a8b4 <_strtod_l+0xc4>
 800a836:	2300      	movs	r3, #0
 800a838:	930a      	str	r3, [sp, #40]	; 0x28
 800a83a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a83c:	7833      	ldrb	r3, [r6, #0]
 800a83e:	2b30      	cmp	r3, #48	; 0x30
 800a840:	f040 80b0 	bne.w	800a9a4 <_strtod_l+0x1b4>
 800a844:	7873      	ldrb	r3, [r6, #1]
 800a846:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a84a:	2b58      	cmp	r3, #88	; 0x58
 800a84c:	d168      	bne.n	800a920 <_strtod_l+0x130>
 800a84e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a850:	9301      	str	r3, [sp, #4]
 800a852:	ab18      	add	r3, sp, #96	; 0x60
 800a854:	9702      	str	r7, [sp, #8]
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	4a8d      	ldr	r2, [pc, #564]	; (800aa90 <_strtod_l+0x2a0>)
 800a85a:	ab19      	add	r3, sp, #100	; 0x64
 800a85c:	a917      	add	r1, sp, #92	; 0x5c
 800a85e:	4620      	mov	r0, r4
 800a860:	f001 ffe0 	bl	800c824 <__gethex>
 800a864:	f010 0707 	ands.w	r7, r0, #7
 800a868:	4605      	mov	r5, r0
 800a86a:	d005      	beq.n	800a878 <_strtod_l+0x88>
 800a86c:	2f06      	cmp	r7, #6
 800a86e:	d12c      	bne.n	800a8ca <_strtod_l+0xda>
 800a870:	3601      	adds	r6, #1
 800a872:	2300      	movs	r3, #0
 800a874:	9617      	str	r6, [sp, #92]	; 0x5c
 800a876:	930a      	str	r3, [sp, #40]	; 0x28
 800a878:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f040 8590 	bne.w	800b3a0 <_strtod_l+0xbb0>
 800a880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a882:	b1eb      	cbz	r3, 800a8c0 <_strtod_l+0xd0>
 800a884:	4652      	mov	r2, sl
 800a886:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a88a:	ec43 2b10 	vmov	d0, r2, r3
 800a88e:	b01d      	add	sp, #116	; 0x74
 800a890:	ecbd 8b02 	vpop	{d8}
 800a894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a898:	2a20      	cmp	r2, #32
 800a89a:	d1cc      	bne.n	800a836 <_strtod_l+0x46>
 800a89c:	3301      	adds	r3, #1
 800a89e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8a0:	e7be      	b.n	800a820 <_strtod_l+0x30>
 800a8a2:	2a2d      	cmp	r2, #45	; 0x2d
 800a8a4:	d1c7      	bne.n	800a836 <_strtod_l+0x46>
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	920a      	str	r2, [sp, #40]	; 0x28
 800a8aa:	1c5a      	adds	r2, r3, #1
 800a8ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800a8ae:	785b      	ldrb	r3, [r3, #1]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1c2      	bne.n	800a83a <_strtod_l+0x4a>
 800a8b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8b6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f040 856e 	bne.w	800b39c <_strtod_l+0xbac>
 800a8c0:	4652      	mov	r2, sl
 800a8c2:	465b      	mov	r3, fp
 800a8c4:	e7e1      	b.n	800a88a <_strtod_l+0x9a>
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	e7ee      	b.n	800a8a8 <_strtod_l+0xb8>
 800a8ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a8cc:	b13a      	cbz	r2, 800a8de <_strtod_l+0xee>
 800a8ce:	2135      	movs	r1, #53	; 0x35
 800a8d0:	a81a      	add	r0, sp, #104	; 0x68
 800a8d2:	f002 ffb2 	bl	800d83a <__copybits>
 800a8d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f002 fb71 	bl	800cfc0 <_Bfree>
 800a8de:	3f01      	subs	r7, #1
 800a8e0:	2f04      	cmp	r7, #4
 800a8e2:	d806      	bhi.n	800a8f2 <_strtod_l+0x102>
 800a8e4:	e8df f007 	tbb	[pc, r7]
 800a8e8:	1714030a 	.word	0x1714030a
 800a8ec:	0a          	.byte	0x0a
 800a8ed:	00          	.byte	0x00
 800a8ee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a8f2:	0728      	lsls	r0, r5, #28
 800a8f4:	d5c0      	bpl.n	800a878 <_strtod_l+0x88>
 800a8f6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a8fa:	e7bd      	b.n	800a878 <_strtod_l+0x88>
 800a8fc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a900:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a902:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a906:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a90a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a90e:	e7f0      	b.n	800a8f2 <_strtod_l+0x102>
 800a910:	f8df b180 	ldr.w	fp, [pc, #384]	; 800aa94 <_strtod_l+0x2a4>
 800a914:	e7ed      	b.n	800a8f2 <_strtod_l+0x102>
 800a916:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a91a:	f04f 3aff 	mov.w	sl, #4294967295
 800a91e:	e7e8      	b.n	800a8f2 <_strtod_l+0x102>
 800a920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a922:	1c5a      	adds	r2, r3, #1
 800a924:	9217      	str	r2, [sp, #92]	; 0x5c
 800a926:	785b      	ldrb	r3, [r3, #1]
 800a928:	2b30      	cmp	r3, #48	; 0x30
 800a92a:	d0f9      	beq.n	800a920 <_strtod_l+0x130>
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d0a3      	beq.n	800a878 <_strtod_l+0x88>
 800a930:	2301      	movs	r3, #1
 800a932:	f04f 0900 	mov.w	r9, #0
 800a936:	9304      	str	r3, [sp, #16]
 800a938:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a93a:	9308      	str	r3, [sp, #32]
 800a93c:	f8cd 901c 	str.w	r9, [sp, #28]
 800a940:	464f      	mov	r7, r9
 800a942:	220a      	movs	r2, #10
 800a944:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a946:	7806      	ldrb	r6, [r0, #0]
 800a948:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a94c:	b2d9      	uxtb	r1, r3
 800a94e:	2909      	cmp	r1, #9
 800a950:	d92a      	bls.n	800a9a8 <_strtod_l+0x1b8>
 800a952:	9905      	ldr	r1, [sp, #20]
 800a954:	462a      	mov	r2, r5
 800a956:	f003 fbbe 	bl	800e0d6 <strncmp>
 800a95a:	b398      	cbz	r0, 800a9c4 <_strtod_l+0x1d4>
 800a95c:	2000      	movs	r0, #0
 800a95e:	4632      	mov	r2, r6
 800a960:	463d      	mov	r5, r7
 800a962:	9005      	str	r0, [sp, #20]
 800a964:	4603      	mov	r3, r0
 800a966:	2a65      	cmp	r2, #101	; 0x65
 800a968:	d001      	beq.n	800a96e <_strtod_l+0x17e>
 800a96a:	2a45      	cmp	r2, #69	; 0x45
 800a96c:	d118      	bne.n	800a9a0 <_strtod_l+0x1b0>
 800a96e:	b91d      	cbnz	r5, 800a978 <_strtod_l+0x188>
 800a970:	9a04      	ldr	r2, [sp, #16]
 800a972:	4302      	orrs	r2, r0
 800a974:	d09e      	beq.n	800a8b4 <_strtod_l+0xc4>
 800a976:	2500      	movs	r5, #0
 800a978:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a97c:	f108 0201 	add.w	r2, r8, #1
 800a980:	9217      	str	r2, [sp, #92]	; 0x5c
 800a982:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a986:	2a2b      	cmp	r2, #43	; 0x2b
 800a988:	d075      	beq.n	800aa76 <_strtod_l+0x286>
 800a98a:	2a2d      	cmp	r2, #45	; 0x2d
 800a98c:	d07b      	beq.n	800aa86 <_strtod_l+0x296>
 800a98e:	f04f 0c00 	mov.w	ip, #0
 800a992:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a996:	2909      	cmp	r1, #9
 800a998:	f240 8082 	bls.w	800aaa0 <_strtod_l+0x2b0>
 800a99c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a9a0:	2600      	movs	r6, #0
 800a9a2:	e09d      	b.n	800aae0 <_strtod_l+0x2f0>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	e7c4      	b.n	800a932 <_strtod_l+0x142>
 800a9a8:	2f08      	cmp	r7, #8
 800a9aa:	bfd8      	it	le
 800a9ac:	9907      	ldrle	r1, [sp, #28]
 800a9ae:	f100 0001 	add.w	r0, r0, #1
 800a9b2:	bfda      	itte	le
 800a9b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a9b8:	9307      	strle	r3, [sp, #28]
 800a9ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a9be:	3701      	adds	r7, #1
 800a9c0:	9017      	str	r0, [sp, #92]	; 0x5c
 800a9c2:	e7bf      	b.n	800a944 <_strtod_l+0x154>
 800a9c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9c6:	195a      	adds	r2, r3, r5
 800a9c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a9ca:	5d5a      	ldrb	r2, [r3, r5]
 800a9cc:	2f00      	cmp	r7, #0
 800a9ce:	d037      	beq.n	800aa40 <_strtod_l+0x250>
 800a9d0:	9005      	str	r0, [sp, #20]
 800a9d2:	463d      	mov	r5, r7
 800a9d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a9d8:	2b09      	cmp	r3, #9
 800a9da:	d912      	bls.n	800aa02 <_strtod_l+0x212>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e7c2      	b.n	800a966 <_strtod_l+0x176>
 800a9e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9e2:	1c5a      	adds	r2, r3, #1
 800a9e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a9e6:	785a      	ldrb	r2, [r3, #1]
 800a9e8:	3001      	adds	r0, #1
 800a9ea:	2a30      	cmp	r2, #48	; 0x30
 800a9ec:	d0f8      	beq.n	800a9e0 <_strtod_l+0x1f0>
 800a9ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a9f2:	2b08      	cmp	r3, #8
 800a9f4:	f200 84d9 	bhi.w	800b3aa <_strtod_l+0xbba>
 800a9f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9fa:	9005      	str	r0, [sp, #20]
 800a9fc:	2000      	movs	r0, #0
 800a9fe:	9308      	str	r3, [sp, #32]
 800aa00:	4605      	mov	r5, r0
 800aa02:	3a30      	subs	r2, #48	; 0x30
 800aa04:	f100 0301 	add.w	r3, r0, #1
 800aa08:	d014      	beq.n	800aa34 <_strtod_l+0x244>
 800aa0a:	9905      	ldr	r1, [sp, #20]
 800aa0c:	4419      	add	r1, r3
 800aa0e:	9105      	str	r1, [sp, #20]
 800aa10:	462b      	mov	r3, r5
 800aa12:	eb00 0e05 	add.w	lr, r0, r5
 800aa16:	210a      	movs	r1, #10
 800aa18:	4573      	cmp	r3, lr
 800aa1a:	d113      	bne.n	800aa44 <_strtod_l+0x254>
 800aa1c:	182b      	adds	r3, r5, r0
 800aa1e:	2b08      	cmp	r3, #8
 800aa20:	f105 0501 	add.w	r5, r5, #1
 800aa24:	4405      	add	r5, r0
 800aa26:	dc1c      	bgt.n	800aa62 <_strtod_l+0x272>
 800aa28:	9907      	ldr	r1, [sp, #28]
 800aa2a:	230a      	movs	r3, #10
 800aa2c:	fb03 2301 	mla	r3, r3, r1, r2
 800aa30:	9307      	str	r3, [sp, #28]
 800aa32:	2300      	movs	r3, #0
 800aa34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa36:	1c51      	adds	r1, r2, #1
 800aa38:	9117      	str	r1, [sp, #92]	; 0x5c
 800aa3a:	7852      	ldrb	r2, [r2, #1]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	e7c9      	b.n	800a9d4 <_strtod_l+0x1e4>
 800aa40:	4638      	mov	r0, r7
 800aa42:	e7d2      	b.n	800a9ea <_strtod_l+0x1fa>
 800aa44:	2b08      	cmp	r3, #8
 800aa46:	dc04      	bgt.n	800aa52 <_strtod_l+0x262>
 800aa48:	9e07      	ldr	r6, [sp, #28]
 800aa4a:	434e      	muls	r6, r1
 800aa4c:	9607      	str	r6, [sp, #28]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	e7e2      	b.n	800aa18 <_strtod_l+0x228>
 800aa52:	f103 0c01 	add.w	ip, r3, #1
 800aa56:	f1bc 0f10 	cmp.w	ip, #16
 800aa5a:	bfd8      	it	le
 800aa5c:	fb01 f909 	mulle.w	r9, r1, r9
 800aa60:	e7f5      	b.n	800aa4e <_strtod_l+0x25e>
 800aa62:	2d10      	cmp	r5, #16
 800aa64:	bfdc      	itt	le
 800aa66:	230a      	movle	r3, #10
 800aa68:	fb03 2909 	mlale	r9, r3, r9, r2
 800aa6c:	e7e1      	b.n	800aa32 <_strtod_l+0x242>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	9305      	str	r3, [sp, #20]
 800aa72:	2301      	movs	r3, #1
 800aa74:	e77c      	b.n	800a970 <_strtod_l+0x180>
 800aa76:	f04f 0c00 	mov.w	ip, #0
 800aa7a:	f108 0202 	add.w	r2, r8, #2
 800aa7e:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa80:	f898 2002 	ldrb.w	r2, [r8, #2]
 800aa84:	e785      	b.n	800a992 <_strtod_l+0x1a2>
 800aa86:	f04f 0c01 	mov.w	ip, #1
 800aa8a:	e7f6      	b.n	800aa7a <_strtod_l+0x28a>
 800aa8c:	0800e828 	.word	0x0800e828
 800aa90:	0800e53c 	.word	0x0800e53c
 800aa94:	7ff00000 	.word	0x7ff00000
 800aa98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa9a:	1c51      	adds	r1, r2, #1
 800aa9c:	9117      	str	r1, [sp, #92]	; 0x5c
 800aa9e:	7852      	ldrb	r2, [r2, #1]
 800aaa0:	2a30      	cmp	r2, #48	; 0x30
 800aaa2:	d0f9      	beq.n	800aa98 <_strtod_l+0x2a8>
 800aaa4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aaa8:	2908      	cmp	r1, #8
 800aaaa:	f63f af79 	bhi.w	800a9a0 <_strtod_l+0x1b0>
 800aaae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aab2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aab4:	9206      	str	r2, [sp, #24]
 800aab6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aab8:	1c51      	adds	r1, r2, #1
 800aaba:	9117      	str	r1, [sp, #92]	; 0x5c
 800aabc:	7852      	ldrb	r2, [r2, #1]
 800aabe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800aac2:	2e09      	cmp	r6, #9
 800aac4:	d937      	bls.n	800ab36 <_strtod_l+0x346>
 800aac6:	9e06      	ldr	r6, [sp, #24]
 800aac8:	1b89      	subs	r1, r1, r6
 800aaca:	2908      	cmp	r1, #8
 800aacc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800aad0:	dc02      	bgt.n	800aad8 <_strtod_l+0x2e8>
 800aad2:	4576      	cmp	r6, lr
 800aad4:	bfa8      	it	ge
 800aad6:	4676      	movge	r6, lr
 800aad8:	f1bc 0f00 	cmp.w	ip, #0
 800aadc:	d000      	beq.n	800aae0 <_strtod_l+0x2f0>
 800aade:	4276      	negs	r6, r6
 800aae0:	2d00      	cmp	r5, #0
 800aae2:	d14d      	bne.n	800ab80 <_strtod_l+0x390>
 800aae4:	9904      	ldr	r1, [sp, #16]
 800aae6:	4301      	orrs	r1, r0
 800aae8:	f47f aec6 	bne.w	800a878 <_strtod_l+0x88>
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f47f aee1 	bne.w	800a8b4 <_strtod_l+0xc4>
 800aaf2:	2a69      	cmp	r2, #105	; 0x69
 800aaf4:	d027      	beq.n	800ab46 <_strtod_l+0x356>
 800aaf6:	dc24      	bgt.n	800ab42 <_strtod_l+0x352>
 800aaf8:	2a49      	cmp	r2, #73	; 0x49
 800aafa:	d024      	beq.n	800ab46 <_strtod_l+0x356>
 800aafc:	2a4e      	cmp	r2, #78	; 0x4e
 800aafe:	f47f aed9 	bne.w	800a8b4 <_strtod_l+0xc4>
 800ab02:	499f      	ldr	r1, [pc, #636]	; (800ad80 <_strtod_l+0x590>)
 800ab04:	a817      	add	r0, sp, #92	; 0x5c
 800ab06:	f002 f8e5 	bl	800ccd4 <__match>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	f43f aed2 	beq.w	800a8b4 <_strtod_l+0xc4>
 800ab10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	2b28      	cmp	r3, #40	; 0x28
 800ab16:	d12d      	bne.n	800ab74 <_strtod_l+0x384>
 800ab18:	499a      	ldr	r1, [pc, #616]	; (800ad84 <_strtod_l+0x594>)
 800ab1a:	aa1a      	add	r2, sp, #104	; 0x68
 800ab1c:	a817      	add	r0, sp, #92	; 0x5c
 800ab1e:	f002 f8ed 	bl	800ccfc <__hexnan>
 800ab22:	2805      	cmp	r0, #5
 800ab24:	d126      	bne.n	800ab74 <_strtod_l+0x384>
 800ab26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab28:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ab2c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ab30:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ab34:	e6a0      	b.n	800a878 <_strtod_l+0x88>
 800ab36:	210a      	movs	r1, #10
 800ab38:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ab3c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ab40:	e7b9      	b.n	800aab6 <_strtod_l+0x2c6>
 800ab42:	2a6e      	cmp	r2, #110	; 0x6e
 800ab44:	e7db      	b.n	800aafe <_strtod_l+0x30e>
 800ab46:	4990      	ldr	r1, [pc, #576]	; (800ad88 <_strtod_l+0x598>)
 800ab48:	a817      	add	r0, sp, #92	; 0x5c
 800ab4a:	f002 f8c3 	bl	800ccd4 <__match>
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	f43f aeb0 	beq.w	800a8b4 <_strtod_l+0xc4>
 800ab54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab56:	498d      	ldr	r1, [pc, #564]	; (800ad8c <_strtod_l+0x59c>)
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	a817      	add	r0, sp, #92	; 0x5c
 800ab5c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab5e:	f002 f8b9 	bl	800ccd4 <__match>
 800ab62:	b910      	cbnz	r0, 800ab6a <_strtod_l+0x37a>
 800ab64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab66:	3301      	adds	r3, #1
 800ab68:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab6a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ad9c <_strtod_l+0x5ac>
 800ab6e:	f04f 0a00 	mov.w	sl, #0
 800ab72:	e681      	b.n	800a878 <_strtod_l+0x88>
 800ab74:	4886      	ldr	r0, [pc, #536]	; (800ad90 <_strtod_l+0x5a0>)
 800ab76:	f003 fa53 	bl	800e020 <nan>
 800ab7a:	ec5b ab10 	vmov	sl, fp, d0
 800ab7e:	e67b      	b.n	800a878 <_strtod_l+0x88>
 800ab80:	9b05      	ldr	r3, [sp, #20]
 800ab82:	9807      	ldr	r0, [sp, #28]
 800ab84:	1af3      	subs	r3, r6, r3
 800ab86:	2f00      	cmp	r7, #0
 800ab88:	bf08      	it	eq
 800ab8a:	462f      	moveq	r7, r5
 800ab8c:	2d10      	cmp	r5, #16
 800ab8e:	9306      	str	r3, [sp, #24]
 800ab90:	46a8      	mov	r8, r5
 800ab92:	bfa8      	it	ge
 800ab94:	f04f 0810 	movge.w	r8, #16
 800ab98:	f7f5 fcb4 	bl	8000504 <__aeabi_ui2d>
 800ab9c:	2d09      	cmp	r5, #9
 800ab9e:	4682      	mov	sl, r0
 800aba0:	468b      	mov	fp, r1
 800aba2:	dd13      	ble.n	800abcc <_strtod_l+0x3dc>
 800aba4:	4b7b      	ldr	r3, [pc, #492]	; (800ad94 <_strtod_l+0x5a4>)
 800aba6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800abaa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800abae:	f7f5 fd23 	bl	80005f8 <__aeabi_dmul>
 800abb2:	4682      	mov	sl, r0
 800abb4:	4648      	mov	r0, r9
 800abb6:	468b      	mov	fp, r1
 800abb8:	f7f5 fca4 	bl	8000504 <__aeabi_ui2d>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	4650      	mov	r0, sl
 800abc2:	4659      	mov	r1, fp
 800abc4:	f7f5 fb62 	bl	800028c <__adddf3>
 800abc8:	4682      	mov	sl, r0
 800abca:	468b      	mov	fp, r1
 800abcc:	2d0f      	cmp	r5, #15
 800abce:	dc38      	bgt.n	800ac42 <_strtod_l+0x452>
 800abd0:	9b06      	ldr	r3, [sp, #24]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f43f ae50 	beq.w	800a878 <_strtod_l+0x88>
 800abd8:	dd24      	ble.n	800ac24 <_strtod_l+0x434>
 800abda:	2b16      	cmp	r3, #22
 800abdc:	dc0b      	bgt.n	800abf6 <_strtod_l+0x406>
 800abde:	496d      	ldr	r1, [pc, #436]	; (800ad94 <_strtod_l+0x5a4>)
 800abe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800abe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abe8:	4652      	mov	r2, sl
 800abea:	465b      	mov	r3, fp
 800abec:	f7f5 fd04 	bl	80005f8 <__aeabi_dmul>
 800abf0:	4682      	mov	sl, r0
 800abf2:	468b      	mov	fp, r1
 800abf4:	e640      	b.n	800a878 <_strtod_l+0x88>
 800abf6:	9a06      	ldr	r2, [sp, #24]
 800abf8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800abfc:	4293      	cmp	r3, r2
 800abfe:	db20      	blt.n	800ac42 <_strtod_l+0x452>
 800ac00:	4c64      	ldr	r4, [pc, #400]	; (800ad94 <_strtod_l+0x5a4>)
 800ac02:	f1c5 050f 	rsb	r5, r5, #15
 800ac06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ac0a:	4652      	mov	r2, sl
 800ac0c:	465b      	mov	r3, fp
 800ac0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac12:	f7f5 fcf1 	bl	80005f8 <__aeabi_dmul>
 800ac16:	9b06      	ldr	r3, [sp, #24]
 800ac18:	1b5d      	subs	r5, r3, r5
 800ac1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ac1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ac22:	e7e3      	b.n	800abec <_strtod_l+0x3fc>
 800ac24:	9b06      	ldr	r3, [sp, #24]
 800ac26:	3316      	adds	r3, #22
 800ac28:	db0b      	blt.n	800ac42 <_strtod_l+0x452>
 800ac2a:	9b05      	ldr	r3, [sp, #20]
 800ac2c:	1b9e      	subs	r6, r3, r6
 800ac2e:	4b59      	ldr	r3, [pc, #356]	; (800ad94 <_strtod_l+0x5a4>)
 800ac30:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ac34:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac38:	4650      	mov	r0, sl
 800ac3a:	4659      	mov	r1, fp
 800ac3c:	f7f5 fe06 	bl	800084c <__aeabi_ddiv>
 800ac40:	e7d6      	b.n	800abf0 <_strtod_l+0x400>
 800ac42:	9b06      	ldr	r3, [sp, #24]
 800ac44:	eba5 0808 	sub.w	r8, r5, r8
 800ac48:	4498      	add	r8, r3
 800ac4a:	f1b8 0f00 	cmp.w	r8, #0
 800ac4e:	dd74      	ble.n	800ad3a <_strtod_l+0x54a>
 800ac50:	f018 030f 	ands.w	r3, r8, #15
 800ac54:	d00a      	beq.n	800ac6c <_strtod_l+0x47c>
 800ac56:	494f      	ldr	r1, [pc, #316]	; (800ad94 <_strtod_l+0x5a4>)
 800ac58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac5c:	4652      	mov	r2, sl
 800ac5e:	465b      	mov	r3, fp
 800ac60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac64:	f7f5 fcc8 	bl	80005f8 <__aeabi_dmul>
 800ac68:	4682      	mov	sl, r0
 800ac6a:	468b      	mov	fp, r1
 800ac6c:	f038 080f 	bics.w	r8, r8, #15
 800ac70:	d04f      	beq.n	800ad12 <_strtod_l+0x522>
 800ac72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ac76:	dd22      	ble.n	800acbe <_strtod_l+0x4ce>
 800ac78:	2500      	movs	r5, #0
 800ac7a:	462e      	mov	r6, r5
 800ac7c:	9507      	str	r5, [sp, #28]
 800ac7e:	9505      	str	r5, [sp, #20]
 800ac80:	2322      	movs	r3, #34	; 0x22
 800ac82:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ad9c <_strtod_l+0x5ac>
 800ac86:	6023      	str	r3, [r4, #0]
 800ac88:	f04f 0a00 	mov.w	sl, #0
 800ac8c:	9b07      	ldr	r3, [sp, #28]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f43f adf2 	beq.w	800a878 <_strtod_l+0x88>
 800ac94:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ac96:	4620      	mov	r0, r4
 800ac98:	f002 f992 	bl	800cfc0 <_Bfree>
 800ac9c:	9905      	ldr	r1, [sp, #20]
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f002 f98e 	bl	800cfc0 <_Bfree>
 800aca4:	4631      	mov	r1, r6
 800aca6:	4620      	mov	r0, r4
 800aca8:	f002 f98a 	bl	800cfc0 <_Bfree>
 800acac:	9907      	ldr	r1, [sp, #28]
 800acae:	4620      	mov	r0, r4
 800acb0:	f002 f986 	bl	800cfc0 <_Bfree>
 800acb4:	4629      	mov	r1, r5
 800acb6:	4620      	mov	r0, r4
 800acb8:	f002 f982 	bl	800cfc0 <_Bfree>
 800acbc:	e5dc      	b.n	800a878 <_strtod_l+0x88>
 800acbe:	4b36      	ldr	r3, [pc, #216]	; (800ad98 <_strtod_l+0x5a8>)
 800acc0:	9304      	str	r3, [sp, #16]
 800acc2:	2300      	movs	r3, #0
 800acc4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800acc8:	4650      	mov	r0, sl
 800acca:	4659      	mov	r1, fp
 800accc:	4699      	mov	r9, r3
 800acce:	f1b8 0f01 	cmp.w	r8, #1
 800acd2:	dc21      	bgt.n	800ad18 <_strtod_l+0x528>
 800acd4:	b10b      	cbz	r3, 800acda <_strtod_l+0x4ea>
 800acd6:	4682      	mov	sl, r0
 800acd8:	468b      	mov	fp, r1
 800acda:	4b2f      	ldr	r3, [pc, #188]	; (800ad98 <_strtod_l+0x5a8>)
 800acdc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ace0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ace4:	4652      	mov	r2, sl
 800ace6:	465b      	mov	r3, fp
 800ace8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800acec:	f7f5 fc84 	bl	80005f8 <__aeabi_dmul>
 800acf0:	4b2a      	ldr	r3, [pc, #168]	; (800ad9c <_strtod_l+0x5ac>)
 800acf2:	460a      	mov	r2, r1
 800acf4:	400b      	ands	r3, r1
 800acf6:	492a      	ldr	r1, [pc, #168]	; (800ada0 <_strtod_l+0x5b0>)
 800acf8:	428b      	cmp	r3, r1
 800acfa:	4682      	mov	sl, r0
 800acfc:	d8bc      	bhi.n	800ac78 <_strtod_l+0x488>
 800acfe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ad02:	428b      	cmp	r3, r1
 800ad04:	bf86      	itte	hi
 800ad06:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ada4 <_strtod_l+0x5b4>
 800ad0a:	f04f 3aff 	movhi.w	sl, #4294967295
 800ad0e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ad12:	2300      	movs	r3, #0
 800ad14:	9304      	str	r3, [sp, #16]
 800ad16:	e084      	b.n	800ae22 <_strtod_l+0x632>
 800ad18:	f018 0f01 	tst.w	r8, #1
 800ad1c:	d005      	beq.n	800ad2a <_strtod_l+0x53a>
 800ad1e:	9b04      	ldr	r3, [sp, #16]
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	f7f5 fc68 	bl	80005f8 <__aeabi_dmul>
 800ad28:	2301      	movs	r3, #1
 800ad2a:	9a04      	ldr	r2, [sp, #16]
 800ad2c:	3208      	adds	r2, #8
 800ad2e:	f109 0901 	add.w	r9, r9, #1
 800ad32:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ad36:	9204      	str	r2, [sp, #16]
 800ad38:	e7c9      	b.n	800acce <_strtod_l+0x4de>
 800ad3a:	d0ea      	beq.n	800ad12 <_strtod_l+0x522>
 800ad3c:	f1c8 0800 	rsb	r8, r8, #0
 800ad40:	f018 020f 	ands.w	r2, r8, #15
 800ad44:	d00a      	beq.n	800ad5c <_strtod_l+0x56c>
 800ad46:	4b13      	ldr	r3, [pc, #76]	; (800ad94 <_strtod_l+0x5a4>)
 800ad48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad4c:	4650      	mov	r0, sl
 800ad4e:	4659      	mov	r1, fp
 800ad50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad54:	f7f5 fd7a 	bl	800084c <__aeabi_ddiv>
 800ad58:	4682      	mov	sl, r0
 800ad5a:	468b      	mov	fp, r1
 800ad5c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ad60:	d0d7      	beq.n	800ad12 <_strtod_l+0x522>
 800ad62:	f1b8 0f1f 	cmp.w	r8, #31
 800ad66:	dd1f      	ble.n	800ada8 <_strtod_l+0x5b8>
 800ad68:	2500      	movs	r5, #0
 800ad6a:	462e      	mov	r6, r5
 800ad6c:	9507      	str	r5, [sp, #28]
 800ad6e:	9505      	str	r5, [sp, #20]
 800ad70:	2322      	movs	r3, #34	; 0x22
 800ad72:	f04f 0a00 	mov.w	sl, #0
 800ad76:	f04f 0b00 	mov.w	fp, #0
 800ad7a:	6023      	str	r3, [r4, #0]
 800ad7c:	e786      	b.n	800ac8c <_strtod_l+0x49c>
 800ad7e:	bf00      	nop
 800ad80:	0800e50d 	.word	0x0800e50d
 800ad84:	0800e550 	.word	0x0800e550
 800ad88:	0800e505 	.word	0x0800e505
 800ad8c:	0800e6d0 	.word	0x0800e6d0
 800ad90:	0800e5cb 	.word	0x0800e5cb
 800ad94:	0800e8c0 	.word	0x0800e8c0
 800ad98:	0800e898 	.word	0x0800e898
 800ad9c:	7ff00000 	.word	0x7ff00000
 800ada0:	7ca00000 	.word	0x7ca00000
 800ada4:	7fefffff 	.word	0x7fefffff
 800ada8:	f018 0310 	ands.w	r3, r8, #16
 800adac:	bf18      	it	ne
 800adae:	236a      	movne	r3, #106	; 0x6a
 800adb0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b160 <_strtod_l+0x970>
 800adb4:	9304      	str	r3, [sp, #16]
 800adb6:	4650      	mov	r0, sl
 800adb8:	4659      	mov	r1, fp
 800adba:	2300      	movs	r3, #0
 800adbc:	f018 0f01 	tst.w	r8, #1
 800adc0:	d004      	beq.n	800adcc <_strtod_l+0x5dc>
 800adc2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800adc6:	f7f5 fc17 	bl	80005f8 <__aeabi_dmul>
 800adca:	2301      	movs	r3, #1
 800adcc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800add0:	f109 0908 	add.w	r9, r9, #8
 800add4:	d1f2      	bne.n	800adbc <_strtod_l+0x5cc>
 800add6:	b10b      	cbz	r3, 800addc <_strtod_l+0x5ec>
 800add8:	4682      	mov	sl, r0
 800adda:	468b      	mov	fp, r1
 800addc:	9b04      	ldr	r3, [sp, #16]
 800adde:	b1c3      	cbz	r3, 800ae12 <_strtod_l+0x622>
 800ade0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ade4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ade8:	2b00      	cmp	r3, #0
 800adea:	4659      	mov	r1, fp
 800adec:	dd11      	ble.n	800ae12 <_strtod_l+0x622>
 800adee:	2b1f      	cmp	r3, #31
 800adf0:	f340 8124 	ble.w	800b03c <_strtod_l+0x84c>
 800adf4:	2b34      	cmp	r3, #52	; 0x34
 800adf6:	bfde      	ittt	le
 800adf8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800adfc:	f04f 33ff 	movle.w	r3, #4294967295
 800ae00:	fa03 f202 	lslle.w	r2, r3, r2
 800ae04:	f04f 0a00 	mov.w	sl, #0
 800ae08:	bfcc      	ite	gt
 800ae0a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ae0e:	ea02 0b01 	andle.w	fp, r2, r1
 800ae12:	2200      	movs	r2, #0
 800ae14:	2300      	movs	r3, #0
 800ae16:	4650      	mov	r0, sl
 800ae18:	4659      	mov	r1, fp
 800ae1a:	f7f5 fe55 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d1a2      	bne.n	800ad68 <_strtod_l+0x578>
 800ae22:	9b07      	ldr	r3, [sp, #28]
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	9908      	ldr	r1, [sp, #32]
 800ae28:	462b      	mov	r3, r5
 800ae2a:	463a      	mov	r2, r7
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	f002 f92f 	bl	800d090 <__s2b>
 800ae32:	9007      	str	r0, [sp, #28]
 800ae34:	2800      	cmp	r0, #0
 800ae36:	f43f af1f 	beq.w	800ac78 <_strtod_l+0x488>
 800ae3a:	9b05      	ldr	r3, [sp, #20]
 800ae3c:	1b9e      	subs	r6, r3, r6
 800ae3e:	9b06      	ldr	r3, [sp, #24]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	bfb4      	ite	lt
 800ae44:	4633      	movlt	r3, r6
 800ae46:	2300      	movge	r3, #0
 800ae48:	930c      	str	r3, [sp, #48]	; 0x30
 800ae4a:	9b06      	ldr	r3, [sp, #24]
 800ae4c:	2500      	movs	r5, #0
 800ae4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ae52:	9312      	str	r3, [sp, #72]	; 0x48
 800ae54:	462e      	mov	r6, r5
 800ae56:	9b07      	ldr	r3, [sp, #28]
 800ae58:	4620      	mov	r0, r4
 800ae5a:	6859      	ldr	r1, [r3, #4]
 800ae5c:	f002 f870 	bl	800cf40 <_Balloc>
 800ae60:	9005      	str	r0, [sp, #20]
 800ae62:	2800      	cmp	r0, #0
 800ae64:	f43f af0c 	beq.w	800ac80 <_strtod_l+0x490>
 800ae68:	9b07      	ldr	r3, [sp, #28]
 800ae6a:	691a      	ldr	r2, [r3, #16]
 800ae6c:	3202      	adds	r2, #2
 800ae6e:	f103 010c 	add.w	r1, r3, #12
 800ae72:	0092      	lsls	r2, r2, #2
 800ae74:	300c      	adds	r0, #12
 800ae76:	f7fe fde9 	bl	8009a4c <memcpy>
 800ae7a:	ec4b ab10 	vmov	d0, sl, fp
 800ae7e:	aa1a      	add	r2, sp, #104	; 0x68
 800ae80:	a919      	add	r1, sp, #100	; 0x64
 800ae82:	4620      	mov	r0, r4
 800ae84:	f002 fc4a 	bl	800d71c <__d2b>
 800ae88:	ec4b ab18 	vmov	d8, sl, fp
 800ae8c:	9018      	str	r0, [sp, #96]	; 0x60
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	f43f aef6 	beq.w	800ac80 <_strtod_l+0x490>
 800ae94:	2101      	movs	r1, #1
 800ae96:	4620      	mov	r0, r4
 800ae98:	f002 f994 	bl	800d1c4 <__i2b>
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	f43f aeee 	beq.w	800ac80 <_strtod_l+0x490>
 800aea4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aea6:	9904      	ldr	r1, [sp, #16]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	bfab      	itete	ge
 800aeac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800aeae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800aeb0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800aeb2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800aeb6:	bfac      	ite	ge
 800aeb8:	eb03 0902 	addge.w	r9, r3, r2
 800aebc:	1ad7      	sublt	r7, r2, r3
 800aebe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aec0:	eba3 0801 	sub.w	r8, r3, r1
 800aec4:	4490      	add	r8, r2
 800aec6:	4ba1      	ldr	r3, [pc, #644]	; (800b14c <_strtod_l+0x95c>)
 800aec8:	f108 38ff 	add.w	r8, r8, #4294967295
 800aecc:	4598      	cmp	r8, r3
 800aece:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aed2:	f280 80c7 	bge.w	800b064 <_strtod_l+0x874>
 800aed6:	eba3 0308 	sub.w	r3, r3, r8
 800aeda:	2b1f      	cmp	r3, #31
 800aedc:	eba2 0203 	sub.w	r2, r2, r3
 800aee0:	f04f 0101 	mov.w	r1, #1
 800aee4:	f300 80b1 	bgt.w	800b04a <_strtod_l+0x85a>
 800aee8:	fa01 f303 	lsl.w	r3, r1, r3
 800aeec:	930d      	str	r3, [sp, #52]	; 0x34
 800aeee:	2300      	movs	r3, #0
 800aef0:	9308      	str	r3, [sp, #32]
 800aef2:	eb09 0802 	add.w	r8, r9, r2
 800aef6:	9b04      	ldr	r3, [sp, #16]
 800aef8:	45c1      	cmp	r9, r8
 800aefa:	4417      	add	r7, r2
 800aefc:	441f      	add	r7, r3
 800aefe:	464b      	mov	r3, r9
 800af00:	bfa8      	it	ge
 800af02:	4643      	movge	r3, r8
 800af04:	42bb      	cmp	r3, r7
 800af06:	bfa8      	it	ge
 800af08:	463b      	movge	r3, r7
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	bfc2      	ittt	gt
 800af0e:	eba8 0803 	subgt.w	r8, r8, r3
 800af12:	1aff      	subgt	r7, r7, r3
 800af14:	eba9 0903 	subgt.w	r9, r9, r3
 800af18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	dd17      	ble.n	800af4e <_strtod_l+0x75e>
 800af1e:	4631      	mov	r1, r6
 800af20:	461a      	mov	r2, r3
 800af22:	4620      	mov	r0, r4
 800af24:	f002 fa0e 	bl	800d344 <__pow5mult>
 800af28:	4606      	mov	r6, r0
 800af2a:	2800      	cmp	r0, #0
 800af2c:	f43f aea8 	beq.w	800ac80 <_strtod_l+0x490>
 800af30:	4601      	mov	r1, r0
 800af32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800af34:	4620      	mov	r0, r4
 800af36:	f002 f95b 	bl	800d1f0 <__multiply>
 800af3a:	900b      	str	r0, [sp, #44]	; 0x2c
 800af3c:	2800      	cmp	r0, #0
 800af3e:	f43f ae9f 	beq.w	800ac80 <_strtod_l+0x490>
 800af42:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af44:	4620      	mov	r0, r4
 800af46:	f002 f83b 	bl	800cfc0 <_Bfree>
 800af4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af4c:	9318      	str	r3, [sp, #96]	; 0x60
 800af4e:	f1b8 0f00 	cmp.w	r8, #0
 800af52:	f300 808c 	bgt.w	800b06e <_strtod_l+0x87e>
 800af56:	9b06      	ldr	r3, [sp, #24]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	dd08      	ble.n	800af6e <_strtod_l+0x77e>
 800af5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af5e:	9905      	ldr	r1, [sp, #20]
 800af60:	4620      	mov	r0, r4
 800af62:	f002 f9ef 	bl	800d344 <__pow5mult>
 800af66:	9005      	str	r0, [sp, #20]
 800af68:	2800      	cmp	r0, #0
 800af6a:	f43f ae89 	beq.w	800ac80 <_strtod_l+0x490>
 800af6e:	2f00      	cmp	r7, #0
 800af70:	dd08      	ble.n	800af84 <_strtod_l+0x794>
 800af72:	9905      	ldr	r1, [sp, #20]
 800af74:	463a      	mov	r2, r7
 800af76:	4620      	mov	r0, r4
 800af78:	f002 fa3e 	bl	800d3f8 <__lshift>
 800af7c:	9005      	str	r0, [sp, #20]
 800af7e:	2800      	cmp	r0, #0
 800af80:	f43f ae7e 	beq.w	800ac80 <_strtod_l+0x490>
 800af84:	f1b9 0f00 	cmp.w	r9, #0
 800af88:	dd08      	ble.n	800af9c <_strtod_l+0x7ac>
 800af8a:	4631      	mov	r1, r6
 800af8c:	464a      	mov	r2, r9
 800af8e:	4620      	mov	r0, r4
 800af90:	f002 fa32 	bl	800d3f8 <__lshift>
 800af94:	4606      	mov	r6, r0
 800af96:	2800      	cmp	r0, #0
 800af98:	f43f ae72 	beq.w	800ac80 <_strtod_l+0x490>
 800af9c:	9a05      	ldr	r2, [sp, #20]
 800af9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800afa0:	4620      	mov	r0, r4
 800afa2:	f002 fab5 	bl	800d510 <__mdiff>
 800afa6:	4605      	mov	r5, r0
 800afa8:	2800      	cmp	r0, #0
 800afaa:	f43f ae69 	beq.w	800ac80 <_strtod_l+0x490>
 800afae:	68c3      	ldr	r3, [r0, #12]
 800afb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800afb2:	2300      	movs	r3, #0
 800afb4:	60c3      	str	r3, [r0, #12]
 800afb6:	4631      	mov	r1, r6
 800afb8:	f002 fa8e 	bl	800d4d8 <__mcmp>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	da60      	bge.n	800b082 <_strtod_l+0x892>
 800afc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afc2:	ea53 030a 	orrs.w	r3, r3, sl
 800afc6:	f040 8082 	bne.w	800b0ce <_strtod_l+0x8de>
 800afca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d17d      	bne.n	800b0ce <_strtod_l+0x8de>
 800afd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800afd6:	0d1b      	lsrs	r3, r3, #20
 800afd8:	051b      	lsls	r3, r3, #20
 800afda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800afde:	d976      	bls.n	800b0ce <_strtod_l+0x8de>
 800afe0:	696b      	ldr	r3, [r5, #20]
 800afe2:	b913      	cbnz	r3, 800afea <_strtod_l+0x7fa>
 800afe4:	692b      	ldr	r3, [r5, #16]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	dd71      	ble.n	800b0ce <_strtod_l+0x8de>
 800afea:	4629      	mov	r1, r5
 800afec:	2201      	movs	r2, #1
 800afee:	4620      	mov	r0, r4
 800aff0:	f002 fa02 	bl	800d3f8 <__lshift>
 800aff4:	4631      	mov	r1, r6
 800aff6:	4605      	mov	r5, r0
 800aff8:	f002 fa6e 	bl	800d4d8 <__mcmp>
 800affc:	2800      	cmp	r0, #0
 800affe:	dd66      	ble.n	800b0ce <_strtod_l+0x8de>
 800b000:	9904      	ldr	r1, [sp, #16]
 800b002:	4a53      	ldr	r2, [pc, #332]	; (800b150 <_strtod_l+0x960>)
 800b004:	465b      	mov	r3, fp
 800b006:	2900      	cmp	r1, #0
 800b008:	f000 8081 	beq.w	800b10e <_strtod_l+0x91e>
 800b00c:	ea02 010b 	and.w	r1, r2, fp
 800b010:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b014:	dc7b      	bgt.n	800b10e <_strtod_l+0x91e>
 800b016:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b01a:	f77f aea9 	ble.w	800ad70 <_strtod_l+0x580>
 800b01e:	4b4d      	ldr	r3, [pc, #308]	; (800b154 <_strtod_l+0x964>)
 800b020:	4650      	mov	r0, sl
 800b022:	4659      	mov	r1, fp
 800b024:	2200      	movs	r2, #0
 800b026:	f7f5 fae7 	bl	80005f8 <__aeabi_dmul>
 800b02a:	460b      	mov	r3, r1
 800b02c:	4303      	orrs	r3, r0
 800b02e:	bf08      	it	eq
 800b030:	2322      	moveq	r3, #34	; 0x22
 800b032:	4682      	mov	sl, r0
 800b034:	468b      	mov	fp, r1
 800b036:	bf08      	it	eq
 800b038:	6023      	streq	r3, [r4, #0]
 800b03a:	e62b      	b.n	800ac94 <_strtod_l+0x4a4>
 800b03c:	f04f 32ff 	mov.w	r2, #4294967295
 800b040:	fa02 f303 	lsl.w	r3, r2, r3
 800b044:	ea03 0a0a 	and.w	sl, r3, sl
 800b048:	e6e3      	b.n	800ae12 <_strtod_l+0x622>
 800b04a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b04e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b052:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b056:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b05a:	fa01 f308 	lsl.w	r3, r1, r8
 800b05e:	9308      	str	r3, [sp, #32]
 800b060:	910d      	str	r1, [sp, #52]	; 0x34
 800b062:	e746      	b.n	800aef2 <_strtod_l+0x702>
 800b064:	2300      	movs	r3, #0
 800b066:	9308      	str	r3, [sp, #32]
 800b068:	2301      	movs	r3, #1
 800b06a:	930d      	str	r3, [sp, #52]	; 0x34
 800b06c:	e741      	b.n	800aef2 <_strtod_l+0x702>
 800b06e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b070:	4642      	mov	r2, r8
 800b072:	4620      	mov	r0, r4
 800b074:	f002 f9c0 	bl	800d3f8 <__lshift>
 800b078:	9018      	str	r0, [sp, #96]	; 0x60
 800b07a:	2800      	cmp	r0, #0
 800b07c:	f47f af6b 	bne.w	800af56 <_strtod_l+0x766>
 800b080:	e5fe      	b.n	800ac80 <_strtod_l+0x490>
 800b082:	465f      	mov	r7, fp
 800b084:	d16e      	bne.n	800b164 <_strtod_l+0x974>
 800b086:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b088:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b08c:	b342      	cbz	r2, 800b0e0 <_strtod_l+0x8f0>
 800b08e:	4a32      	ldr	r2, [pc, #200]	; (800b158 <_strtod_l+0x968>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d128      	bne.n	800b0e6 <_strtod_l+0x8f6>
 800b094:	9b04      	ldr	r3, [sp, #16]
 800b096:	4651      	mov	r1, sl
 800b098:	b1eb      	cbz	r3, 800b0d6 <_strtod_l+0x8e6>
 800b09a:	4b2d      	ldr	r3, [pc, #180]	; (800b150 <_strtod_l+0x960>)
 800b09c:	403b      	ands	r3, r7
 800b09e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b0a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0a6:	d819      	bhi.n	800b0dc <_strtod_l+0x8ec>
 800b0a8:	0d1b      	lsrs	r3, r3, #20
 800b0aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b2:	4299      	cmp	r1, r3
 800b0b4:	d117      	bne.n	800b0e6 <_strtod_l+0x8f6>
 800b0b6:	4b29      	ldr	r3, [pc, #164]	; (800b15c <_strtod_l+0x96c>)
 800b0b8:	429f      	cmp	r7, r3
 800b0ba:	d102      	bne.n	800b0c2 <_strtod_l+0x8d2>
 800b0bc:	3101      	adds	r1, #1
 800b0be:	f43f addf 	beq.w	800ac80 <_strtod_l+0x490>
 800b0c2:	4b23      	ldr	r3, [pc, #140]	; (800b150 <_strtod_l+0x960>)
 800b0c4:	403b      	ands	r3, r7
 800b0c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b0ca:	f04f 0a00 	mov.w	sl, #0
 800b0ce:	9b04      	ldr	r3, [sp, #16]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1a4      	bne.n	800b01e <_strtod_l+0x82e>
 800b0d4:	e5de      	b.n	800ac94 <_strtod_l+0x4a4>
 800b0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0da:	e7ea      	b.n	800b0b2 <_strtod_l+0x8c2>
 800b0dc:	4613      	mov	r3, r2
 800b0de:	e7e8      	b.n	800b0b2 <_strtod_l+0x8c2>
 800b0e0:	ea53 030a 	orrs.w	r3, r3, sl
 800b0e4:	d08c      	beq.n	800b000 <_strtod_l+0x810>
 800b0e6:	9b08      	ldr	r3, [sp, #32]
 800b0e8:	b1db      	cbz	r3, 800b122 <_strtod_l+0x932>
 800b0ea:	423b      	tst	r3, r7
 800b0ec:	d0ef      	beq.n	800b0ce <_strtod_l+0x8de>
 800b0ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0f0:	9a04      	ldr	r2, [sp, #16]
 800b0f2:	4650      	mov	r0, sl
 800b0f4:	4659      	mov	r1, fp
 800b0f6:	b1c3      	cbz	r3, 800b12a <_strtod_l+0x93a>
 800b0f8:	f7ff fb5e 	bl	800a7b8 <sulp>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	ec51 0b18 	vmov	r0, r1, d8
 800b104:	f7f5 f8c2 	bl	800028c <__adddf3>
 800b108:	4682      	mov	sl, r0
 800b10a:	468b      	mov	fp, r1
 800b10c:	e7df      	b.n	800b0ce <_strtod_l+0x8de>
 800b10e:	4013      	ands	r3, r2
 800b110:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b114:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b118:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b11c:	f04f 3aff 	mov.w	sl, #4294967295
 800b120:	e7d5      	b.n	800b0ce <_strtod_l+0x8de>
 800b122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b124:	ea13 0f0a 	tst.w	r3, sl
 800b128:	e7e0      	b.n	800b0ec <_strtod_l+0x8fc>
 800b12a:	f7ff fb45 	bl	800a7b8 <sulp>
 800b12e:	4602      	mov	r2, r0
 800b130:	460b      	mov	r3, r1
 800b132:	ec51 0b18 	vmov	r0, r1, d8
 800b136:	f7f5 f8a7 	bl	8000288 <__aeabi_dsub>
 800b13a:	2200      	movs	r2, #0
 800b13c:	2300      	movs	r3, #0
 800b13e:	4682      	mov	sl, r0
 800b140:	468b      	mov	fp, r1
 800b142:	f7f5 fcc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b146:	2800      	cmp	r0, #0
 800b148:	d0c1      	beq.n	800b0ce <_strtod_l+0x8de>
 800b14a:	e611      	b.n	800ad70 <_strtod_l+0x580>
 800b14c:	fffffc02 	.word	0xfffffc02
 800b150:	7ff00000 	.word	0x7ff00000
 800b154:	39500000 	.word	0x39500000
 800b158:	000fffff 	.word	0x000fffff
 800b15c:	7fefffff 	.word	0x7fefffff
 800b160:	0800e568 	.word	0x0800e568
 800b164:	4631      	mov	r1, r6
 800b166:	4628      	mov	r0, r5
 800b168:	f002 fb34 	bl	800d7d4 <__ratio>
 800b16c:	ec59 8b10 	vmov	r8, r9, d0
 800b170:	ee10 0a10 	vmov	r0, s0
 800b174:	2200      	movs	r2, #0
 800b176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b17a:	4649      	mov	r1, r9
 800b17c:	f7f5 fcb8 	bl	8000af0 <__aeabi_dcmple>
 800b180:	2800      	cmp	r0, #0
 800b182:	d07a      	beq.n	800b27a <_strtod_l+0xa8a>
 800b184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b186:	2b00      	cmp	r3, #0
 800b188:	d04a      	beq.n	800b220 <_strtod_l+0xa30>
 800b18a:	4b95      	ldr	r3, [pc, #596]	; (800b3e0 <_strtod_l+0xbf0>)
 800b18c:	2200      	movs	r2, #0
 800b18e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b192:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b3e0 <_strtod_l+0xbf0>
 800b196:	f04f 0800 	mov.w	r8, #0
 800b19a:	4b92      	ldr	r3, [pc, #584]	; (800b3e4 <_strtod_l+0xbf4>)
 800b19c:	403b      	ands	r3, r7
 800b19e:	930d      	str	r3, [sp, #52]	; 0x34
 800b1a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1a2:	4b91      	ldr	r3, [pc, #580]	; (800b3e8 <_strtod_l+0xbf8>)
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	f040 80b0 	bne.w	800b30a <_strtod_l+0xb1a>
 800b1aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b1b2:	ec4b ab10 	vmov	d0, sl, fp
 800b1b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b1ba:	f002 fa33 	bl	800d624 <__ulp>
 800b1be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1c2:	ec53 2b10 	vmov	r2, r3, d0
 800b1c6:	f7f5 fa17 	bl	80005f8 <__aeabi_dmul>
 800b1ca:	4652      	mov	r2, sl
 800b1cc:	465b      	mov	r3, fp
 800b1ce:	f7f5 f85d 	bl	800028c <__adddf3>
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	4983      	ldr	r1, [pc, #524]	; (800b3e4 <_strtod_l+0xbf4>)
 800b1d6:	4a85      	ldr	r2, [pc, #532]	; (800b3ec <_strtod_l+0xbfc>)
 800b1d8:	4019      	ands	r1, r3
 800b1da:	4291      	cmp	r1, r2
 800b1dc:	4682      	mov	sl, r0
 800b1de:	d960      	bls.n	800b2a2 <_strtod_l+0xab2>
 800b1e0:	ee18 3a90 	vmov	r3, s17
 800b1e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d104      	bne.n	800b1f6 <_strtod_l+0xa06>
 800b1ec:	ee18 3a10 	vmov	r3, s16
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	f43f ad45 	beq.w	800ac80 <_strtod_l+0x490>
 800b1f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b3f8 <_strtod_l+0xc08>
 800b1fa:	f04f 3aff 	mov.w	sl, #4294967295
 800b1fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b200:	4620      	mov	r0, r4
 800b202:	f001 fedd 	bl	800cfc0 <_Bfree>
 800b206:	9905      	ldr	r1, [sp, #20]
 800b208:	4620      	mov	r0, r4
 800b20a:	f001 fed9 	bl	800cfc0 <_Bfree>
 800b20e:	4631      	mov	r1, r6
 800b210:	4620      	mov	r0, r4
 800b212:	f001 fed5 	bl	800cfc0 <_Bfree>
 800b216:	4629      	mov	r1, r5
 800b218:	4620      	mov	r0, r4
 800b21a:	f001 fed1 	bl	800cfc0 <_Bfree>
 800b21e:	e61a      	b.n	800ae56 <_strtod_l+0x666>
 800b220:	f1ba 0f00 	cmp.w	sl, #0
 800b224:	d11b      	bne.n	800b25e <_strtod_l+0xa6e>
 800b226:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b22a:	b9f3      	cbnz	r3, 800b26a <_strtod_l+0xa7a>
 800b22c:	4b6c      	ldr	r3, [pc, #432]	; (800b3e0 <_strtod_l+0xbf0>)
 800b22e:	2200      	movs	r2, #0
 800b230:	4640      	mov	r0, r8
 800b232:	4649      	mov	r1, r9
 800b234:	f7f5 fc52 	bl	8000adc <__aeabi_dcmplt>
 800b238:	b9d0      	cbnz	r0, 800b270 <_strtod_l+0xa80>
 800b23a:	4640      	mov	r0, r8
 800b23c:	4649      	mov	r1, r9
 800b23e:	4b6c      	ldr	r3, [pc, #432]	; (800b3f0 <_strtod_l+0xc00>)
 800b240:	2200      	movs	r2, #0
 800b242:	f7f5 f9d9 	bl	80005f8 <__aeabi_dmul>
 800b246:	4680      	mov	r8, r0
 800b248:	4689      	mov	r9, r1
 800b24a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b24e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b252:	9315      	str	r3, [sp, #84]	; 0x54
 800b254:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b258:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b25c:	e79d      	b.n	800b19a <_strtod_l+0x9aa>
 800b25e:	f1ba 0f01 	cmp.w	sl, #1
 800b262:	d102      	bne.n	800b26a <_strtod_l+0xa7a>
 800b264:	2f00      	cmp	r7, #0
 800b266:	f43f ad83 	beq.w	800ad70 <_strtod_l+0x580>
 800b26a:	4b62      	ldr	r3, [pc, #392]	; (800b3f4 <_strtod_l+0xc04>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	e78e      	b.n	800b18e <_strtod_l+0x99e>
 800b270:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b3f0 <_strtod_l+0xc00>
 800b274:	f04f 0800 	mov.w	r8, #0
 800b278:	e7e7      	b.n	800b24a <_strtod_l+0xa5a>
 800b27a:	4b5d      	ldr	r3, [pc, #372]	; (800b3f0 <_strtod_l+0xc00>)
 800b27c:	4640      	mov	r0, r8
 800b27e:	4649      	mov	r1, r9
 800b280:	2200      	movs	r2, #0
 800b282:	f7f5 f9b9 	bl	80005f8 <__aeabi_dmul>
 800b286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b288:	4680      	mov	r8, r0
 800b28a:	4689      	mov	r9, r1
 800b28c:	b933      	cbnz	r3, 800b29c <_strtod_l+0xaac>
 800b28e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b292:	900e      	str	r0, [sp, #56]	; 0x38
 800b294:	930f      	str	r3, [sp, #60]	; 0x3c
 800b296:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b29a:	e7dd      	b.n	800b258 <_strtod_l+0xa68>
 800b29c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b2a0:	e7f9      	b.n	800b296 <_strtod_l+0xaa6>
 800b2a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b2a6:	9b04      	ldr	r3, [sp, #16]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1a8      	bne.n	800b1fe <_strtod_l+0xa0e>
 800b2ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b2b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2b2:	0d1b      	lsrs	r3, r3, #20
 800b2b4:	051b      	lsls	r3, r3, #20
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d1a1      	bne.n	800b1fe <_strtod_l+0xa0e>
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	4649      	mov	r1, r9
 800b2be:	f7f5 fcfb 	bl	8000cb8 <__aeabi_d2lz>
 800b2c2:	f7f5 f96b 	bl	800059c <__aeabi_l2d>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	4640      	mov	r0, r8
 800b2cc:	4649      	mov	r1, r9
 800b2ce:	f7f4 ffdb 	bl	8000288 <__aeabi_dsub>
 800b2d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2d8:	ea43 030a 	orr.w	r3, r3, sl
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	4680      	mov	r8, r0
 800b2e0:	4689      	mov	r9, r1
 800b2e2:	d055      	beq.n	800b390 <_strtod_l+0xba0>
 800b2e4:	a336      	add	r3, pc, #216	; (adr r3, 800b3c0 <_strtod_l+0xbd0>)
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	f7f5 fbf7 	bl	8000adc <__aeabi_dcmplt>
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	f47f acd0 	bne.w	800ac94 <_strtod_l+0x4a4>
 800b2f4:	a334      	add	r3, pc, #208	; (adr r3, 800b3c8 <_strtod_l+0xbd8>)
 800b2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	f7f5 fc0b 	bl	8000b18 <__aeabi_dcmpgt>
 800b302:	2800      	cmp	r0, #0
 800b304:	f43f af7b 	beq.w	800b1fe <_strtod_l+0xa0e>
 800b308:	e4c4      	b.n	800ac94 <_strtod_l+0x4a4>
 800b30a:	9b04      	ldr	r3, [sp, #16]
 800b30c:	b333      	cbz	r3, 800b35c <_strtod_l+0xb6c>
 800b30e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b310:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b314:	d822      	bhi.n	800b35c <_strtod_l+0xb6c>
 800b316:	a32e      	add	r3, pc, #184	; (adr r3, 800b3d0 <_strtod_l+0xbe0>)
 800b318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31c:	4640      	mov	r0, r8
 800b31e:	4649      	mov	r1, r9
 800b320:	f7f5 fbe6 	bl	8000af0 <__aeabi_dcmple>
 800b324:	b1a0      	cbz	r0, 800b350 <_strtod_l+0xb60>
 800b326:	4649      	mov	r1, r9
 800b328:	4640      	mov	r0, r8
 800b32a:	f7f5 fc3d 	bl	8000ba8 <__aeabi_d2uiz>
 800b32e:	2801      	cmp	r0, #1
 800b330:	bf38      	it	cc
 800b332:	2001      	movcc	r0, #1
 800b334:	f7f5 f8e6 	bl	8000504 <__aeabi_ui2d>
 800b338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b33a:	4680      	mov	r8, r0
 800b33c:	4689      	mov	r9, r1
 800b33e:	bb23      	cbnz	r3, 800b38a <_strtod_l+0xb9a>
 800b340:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b344:	9010      	str	r0, [sp, #64]	; 0x40
 800b346:	9311      	str	r3, [sp, #68]	; 0x44
 800b348:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b34c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b352:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b354:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b358:	1a9b      	subs	r3, r3, r2
 800b35a:	9309      	str	r3, [sp, #36]	; 0x24
 800b35c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b360:	eeb0 0a48 	vmov.f32	s0, s16
 800b364:	eef0 0a68 	vmov.f32	s1, s17
 800b368:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b36c:	f002 f95a 	bl	800d624 <__ulp>
 800b370:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b374:	ec53 2b10 	vmov	r2, r3, d0
 800b378:	f7f5 f93e 	bl	80005f8 <__aeabi_dmul>
 800b37c:	ec53 2b18 	vmov	r2, r3, d8
 800b380:	f7f4 ff84 	bl	800028c <__adddf3>
 800b384:	4682      	mov	sl, r0
 800b386:	468b      	mov	fp, r1
 800b388:	e78d      	b.n	800b2a6 <_strtod_l+0xab6>
 800b38a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b38e:	e7db      	b.n	800b348 <_strtod_l+0xb58>
 800b390:	a311      	add	r3, pc, #68	; (adr r3, 800b3d8 <_strtod_l+0xbe8>)
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	f7f5 fba1 	bl	8000adc <__aeabi_dcmplt>
 800b39a:	e7b2      	b.n	800b302 <_strtod_l+0xb12>
 800b39c:	2300      	movs	r3, #0
 800b39e:	930a      	str	r3, [sp, #40]	; 0x28
 800b3a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b3a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3a4:	6013      	str	r3, [r2, #0]
 800b3a6:	f7ff ba6b 	b.w	800a880 <_strtod_l+0x90>
 800b3aa:	2a65      	cmp	r2, #101	; 0x65
 800b3ac:	f43f ab5f 	beq.w	800aa6e <_strtod_l+0x27e>
 800b3b0:	2a45      	cmp	r2, #69	; 0x45
 800b3b2:	f43f ab5c 	beq.w	800aa6e <_strtod_l+0x27e>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	f7ff bb94 	b.w	800aae4 <_strtod_l+0x2f4>
 800b3bc:	f3af 8000 	nop.w
 800b3c0:	94a03595 	.word	0x94a03595
 800b3c4:	3fdfffff 	.word	0x3fdfffff
 800b3c8:	35afe535 	.word	0x35afe535
 800b3cc:	3fe00000 	.word	0x3fe00000
 800b3d0:	ffc00000 	.word	0xffc00000
 800b3d4:	41dfffff 	.word	0x41dfffff
 800b3d8:	94a03595 	.word	0x94a03595
 800b3dc:	3fcfffff 	.word	0x3fcfffff
 800b3e0:	3ff00000 	.word	0x3ff00000
 800b3e4:	7ff00000 	.word	0x7ff00000
 800b3e8:	7fe00000 	.word	0x7fe00000
 800b3ec:	7c9fffff 	.word	0x7c9fffff
 800b3f0:	3fe00000 	.word	0x3fe00000
 800b3f4:	bff00000 	.word	0xbff00000
 800b3f8:	7fefffff 	.word	0x7fefffff

0800b3fc <_strtod_r>:
 800b3fc:	4b01      	ldr	r3, [pc, #4]	; (800b404 <_strtod_r+0x8>)
 800b3fe:	f7ff b9f7 	b.w	800a7f0 <_strtod_l>
 800b402:	bf00      	nop
 800b404:	2000008c 	.word	0x2000008c

0800b408 <_strtol_l.constprop.0>:
 800b408:	2b01      	cmp	r3, #1
 800b40a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b40e:	d001      	beq.n	800b414 <_strtol_l.constprop.0+0xc>
 800b410:	2b24      	cmp	r3, #36	; 0x24
 800b412:	d906      	bls.n	800b422 <_strtol_l.constprop.0+0x1a>
 800b414:	f7fe faf0 	bl	80099f8 <__errno>
 800b418:	2316      	movs	r3, #22
 800b41a:	6003      	str	r3, [r0, #0]
 800b41c:	2000      	movs	r0, #0
 800b41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b422:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b508 <_strtol_l.constprop.0+0x100>
 800b426:	460d      	mov	r5, r1
 800b428:	462e      	mov	r6, r5
 800b42a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b42e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b432:	f017 0708 	ands.w	r7, r7, #8
 800b436:	d1f7      	bne.n	800b428 <_strtol_l.constprop.0+0x20>
 800b438:	2c2d      	cmp	r4, #45	; 0x2d
 800b43a:	d132      	bne.n	800b4a2 <_strtol_l.constprop.0+0x9a>
 800b43c:	782c      	ldrb	r4, [r5, #0]
 800b43e:	2701      	movs	r7, #1
 800b440:	1cb5      	adds	r5, r6, #2
 800b442:	2b00      	cmp	r3, #0
 800b444:	d05b      	beq.n	800b4fe <_strtol_l.constprop.0+0xf6>
 800b446:	2b10      	cmp	r3, #16
 800b448:	d109      	bne.n	800b45e <_strtol_l.constprop.0+0x56>
 800b44a:	2c30      	cmp	r4, #48	; 0x30
 800b44c:	d107      	bne.n	800b45e <_strtol_l.constprop.0+0x56>
 800b44e:	782c      	ldrb	r4, [r5, #0]
 800b450:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b454:	2c58      	cmp	r4, #88	; 0x58
 800b456:	d14d      	bne.n	800b4f4 <_strtol_l.constprop.0+0xec>
 800b458:	786c      	ldrb	r4, [r5, #1]
 800b45a:	2310      	movs	r3, #16
 800b45c:	3502      	adds	r5, #2
 800b45e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b462:	f108 38ff 	add.w	r8, r8, #4294967295
 800b466:	f04f 0c00 	mov.w	ip, #0
 800b46a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b46e:	4666      	mov	r6, ip
 800b470:	fb03 8a19 	mls	sl, r3, r9, r8
 800b474:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b478:	f1be 0f09 	cmp.w	lr, #9
 800b47c:	d816      	bhi.n	800b4ac <_strtol_l.constprop.0+0xa4>
 800b47e:	4674      	mov	r4, lr
 800b480:	42a3      	cmp	r3, r4
 800b482:	dd24      	ble.n	800b4ce <_strtol_l.constprop.0+0xc6>
 800b484:	f1bc 0f00 	cmp.w	ip, #0
 800b488:	db1e      	blt.n	800b4c8 <_strtol_l.constprop.0+0xc0>
 800b48a:	45b1      	cmp	r9, r6
 800b48c:	d31c      	bcc.n	800b4c8 <_strtol_l.constprop.0+0xc0>
 800b48e:	d101      	bne.n	800b494 <_strtol_l.constprop.0+0x8c>
 800b490:	45a2      	cmp	sl, r4
 800b492:	db19      	blt.n	800b4c8 <_strtol_l.constprop.0+0xc0>
 800b494:	fb06 4603 	mla	r6, r6, r3, r4
 800b498:	f04f 0c01 	mov.w	ip, #1
 800b49c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4a0:	e7e8      	b.n	800b474 <_strtol_l.constprop.0+0x6c>
 800b4a2:	2c2b      	cmp	r4, #43	; 0x2b
 800b4a4:	bf04      	itt	eq
 800b4a6:	782c      	ldrbeq	r4, [r5, #0]
 800b4a8:	1cb5      	addeq	r5, r6, #2
 800b4aa:	e7ca      	b.n	800b442 <_strtol_l.constprop.0+0x3a>
 800b4ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b4b0:	f1be 0f19 	cmp.w	lr, #25
 800b4b4:	d801      	bhi.n	800b4ba <_strtol_l.constprop.0+0xb2>
 800b4b6:	3c37      	subs	r4, #55	; 0x37
 800b4b8:	e7e2      	b.n	800b480 <_strtol_l.constprop.0+0x78>
 800b4ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b4be:	f1be 0f19 	cmp.w	lr, #25
 800b4c2:	d804      	bhi.n	800b4ce <_strtol_l.constprop.0+0xc6>
 800b4c4:	3c57      	subs	r4, #87	; 0x57
 800b4c6:	e7db      	b.n	800b480 <_strtol_l.constprop.0+0x78>
 800b4c8:	f04f 3cff 	mov.w	ip, #4294967295
 800b4cc:	e7e6      	b.n	800b49c <_strtol_l.constprop.0+0x94>
 800b4ce:	f1bc 0f00 	cmp.w	ip, #0
 800b4d2:	da05      	bge.n	800b4e0 <_strtol_l.constprop.0+0xd8>
 800b4d4:	2322      	movs	r3, #34	; 0x22
 800b4d6:	6003      	str	r3, [r0, #0]
 800b4d8:	4646      	mov	r6, r8
 800b4da:	b942      	cbnz	r2, 800b4ee <_strtol_l.constprop.0+0xe6>
 800b4dc:	4630      	mov	r0, r6
 800b4de:	e79e      	b.n	800b41e <_strtol_l.constprop.0+0x16>
 800b4e0:	b107      	cbz	r7, 800b4e4 <_strtol_l.constprop.0+0xdc>
 800b4e2:	4276      	negs	r6, r6
 800b4e4:	2a00      	cmp	r2, #0
 800b4e6:	d0f9      	beq.n	800b4dc <_strtol_l.constprop.0+0xd4>
 800b4e8:	f1bc 0f00 	cmp.w	ip, #0
 800b4ec:	d000      	beq.n	800b4f0 <_strtol_l.constprop.0+0xe8>
 800b4ee:	1e69      	subs	r1, r5, #1
 800b4f0:	6011      	str	r1, [r2, #0]
 800b4f2:	e7f3      	b.n	800b4dc <_strtol_l.constprop.0+0xd4>
 800b4f4:	2430      	movs	r4, #48	; 0x30
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1b1      	bne.n	800b45e <_strtol_l.constprop.0+0x56>
 800b4fa:	2308      	movs	r3, #8
 800b4fc:	e7af      	b.n	800b45e <_strtol_l.constprop.0+0x56>
 800b4fe:	2c30      	cmp	r4, #48	; 0x30
 800b500:	d0a5      	beq.n	800b44e <_strtol_l.constprop.0+0x46>
 800b502:	230a      	movs	r3, #10
 800b504:	e7ab      	b.n	800b45e <_strtol_l.constprop.0+0x56>
 800b506:	bf00      	nop
 800b508:	0800e5cd 	.word	0x0800e5cd

0800b50c <_strtol_r>:
 800b50c:	f7ff bf7c 	b.w	800b408 <_strtol_l.constprop.0>

0800b510 <__swbuf_r>:
 800b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b512:	460e      	mov	r6, r1
 800b514:	4614      	mov	r4, r2
 800b516:	4605      	mov	r5, r0
 800b518:	b118      	cbz	r0, 800b522 <__swbuf_r+0x12>
 800b51a:	6983      	ldr	r3, [r0, #24]
 800b51c:	b90b      	cbnz	r3, 800b522 <__swbuf_r+0x12>
 800b51e:	f001 f86b 	bl	800c5f8 <__sinit>
 800b522:	4b21      	ldr	r3, [pc, #132]	; (800b5a8 <__swbuf_r+0x98>)
 800b524:	429c      	cmp	r4, r3
 800b526:	d12b      	bne.n	800b580 <__swbuf_r+0x70>
 800b528:	686c      	ldr	r4, [r5, #4]
 800b52a:	69a3      	ldr	r3, [r4, #24]
 800b52c:	60a3      	str	r3, [r4, #8]
 800b52e:	89a3      	ldrh	r3, [r4, #12]
 800b530:	071a      	lsls	r2, r3, #28
 800b532:	d52f      	bpl.n	800b594 <__swbuf_r+0x84>
 800b534:	6923      	ldr	r3, [r4, #16]
 800b536:	b36b      	cbz	r3, 800b594 <__swbuf_r+0x84>
 800b538:	6923      	ldr	r3, [r4, #16]
 800b53a:	6820      	ldr	r0, [r4, #0]
 800b53c:	1ac0      	subs	r0, r0, r3
 800b53e:	6963      	ldr	r3, [r4, #20]
 800b540:	b2f6      	uxtb	r6, r6
 800b542:	4283      	cmp	r3, r0
 800b544:	4637      	mov	r7, r6
 800b546:	dc04      	bgt.n	800b552 <__swbuf_r+0x42>
 800b548:	4621      	mov	r1, r4
 800b54a:	4628      	mov	r0, r5
 800b54c:	f000 ffc0 	bl	800c4d0 <_fflush_r>
 800b550:	bb30      	cbnz	r0, 800b5a0 <__swbuf_r+0x90>
 800b552:	68a3      	ldr	r3, [r4, #8]
 800b554:	3b01      	subs	r3, #1
 800b556:	60a3      	str	r3, [r4, #8]
 800b558:	6823      	ldr	r3, [r4, #0]
 800b55a:	1c5a      	adds	r2, r3, #1
 800b55c:	6022      	str	r2, [r4, #0]
 800b55e:	701e      	strb	r6, [r3, #0]
 800b560:	6963      	ldr	r3, [r4, #20]
 800b562:	3001      	adds	r0, #1
 800b564:	4283      	cmp	r3, r0
 800b566:	d004      	beq.n	800b572 <__swbuf_r+0x62>
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	07db      	lsls	r3, r3, #31
 800b56c:	d506      	bpl.n	800b57c <__swbuf_r+0x6c>
 800b56e:	2e0a      	cmp	r6, #10
 800b570:	d104      	bne.n	800b57c <__swbuf_r+0x6c>
 800b572:	4621      	mov	r1, r4
 800b574:	4628      	mov	r0, r5
 800b576:	f000 ffab 	bl	800c4d0 <_fflush_r>
 800b57a:	b988      	cbnz	r0, 800b5a0 <__swbuf_r+0x90>
 800b57c:	4638      	mov	r0, r7
 800b57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b580:	4b0a      	ldr	r3, [pc, #40]	; (800b5ac <__swbuf_r+0x9c>)
 800b582:	429c      	cmp	r4, r3
 800b584:	d101      	bne.n	800b58a <__swbuf_r+0x7a>
 800b586:	68ac      	ldr	r4, [r5, #8]
 800b588:	e7cf      	b.n	800b52a <__swbuf_r+0x1a>
 800b58a:	4b09      	ldr	r3, [pc, #36]	; (800b5b0 <__swbuf_r+0xa0>)
 800b58c:	429c      	cmp	r4, r3
 800b58e:	bf08      	it	eq
 800b590:	68ec      	ldreq	r4, [r5, #12]
 800b592:	e7ca      	b.n	800b52a <__swbuf_r+0x1a>
 800b594:	4621      	mov	r1, r4
 800b596:	4628      	mov	r0, r5
 800b598:	f000 f80c 	bl	800b5b4 <__swsetup_r>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d0cb      	beq.n	800b538 <__swbuf_r+0x28>
 800b5a0:	f04f 37ff 	mov.w	r7, #4294967295
 800b5a4:	e7ea      	b.n	800b57c <__swbuf_r+0x6c>
 800b5a6:	bf00      	nop
 800b5a8:	0800e780 	.word	0x0800e780
 800b5ac:	0800e7a0 	.word	0x0800e7a0
 800b5b0:	0800e760 	.word	0x0800e760

0800b5b4 <__swsetup_r>:
 800b5b4:	4b32      	ldr	r3, [pc, #200]	; (800b680 <__swsetup_r+0xcc>)
 800b5b6:	b570      	push	{r4, r5, r6, lr}
 800b5b8:	681d      	ldr	r5, [r3, #0]
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	460c      	mov	r4, r1
 800b5be:	b125      	cbz	r5, 800b5ca <__swsetup_r+0x16>
 800b5c0:	69ab      	ldr	r3, [r5, #24]
 800b5c2:	b913      	cbnz	r3, 800b5ca <__swsetup_r+0x16>
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	f001 f817 	bl	800c5f8 <__sinit>
 800b5ca:	4b2e      	ldr	r3, [pc, #184]	; (800b684 <__swsetup_r+0xd0>)
 800b5cc:	429c      	cmp	r4, r3
 800b5ce:	d10f      	bne.n	800b5f0 <__swsetup_r+0x3c>
 800b5d0:	686c      	ldr	r4, [r5, #4]
 800b5d2:	89a3      	ldrh	r3, [r4, #12]
 800b5d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5d8:	0719      	lsls	r1, r3, #28
 800b5da:	d42c      	bmi.n	800b636 <__swsetup_r+0x82>
 800b5dc:	06dd      	lsls	r5, r3, #27
 800b5de:	d411      	bmi.n	800b604 <__swsetup_r+0x50>
 800b5e0:	2309      	movs	r3, #9
 800b5e2:	6033      	str	r3, [r6, #0]
 800b5e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5e8:	81a3      	strh	r3, [r4, #12]
 800b5ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ee:	e03e      	b.n	800b66e <__swsetup_r+0xba>
 800b5f0:	4b25      	ldr	r3, [pc, #148]	; (800b688 <__swsetup_r+0xd4>)
 800b5f2:	429c      	cmp	r4, r3
 800b5f4:	d101      	bne.n	800b5fa <__swsetup_r+0x46>
 800b5f6:	68ac      	ldr	r4, [r5, #8]
 800b5f8:	e7eb      	b.n	800b5d2 <__swsetup_r+0x1e>
 800b5fa:	4b24      	ldr	r3, [pc, #144]	; (800b68c <__swsetup_r+0xd8>)
 800b5fc:	429c      	cmp	r4, r3
 800b5fe:	bf08      	it	eq
 800b600:	68ec      	ldreq	r4, [r5, #12]
 800b602:	e7e6      	b.n	800b5d2 <__swsetup_r+0x1e>
 800b604:	0758      	lsls	r0, r3, #29
 800b606:	d512      	bpl.n	800b62e <__swsetup_r+0x7a>
 800b608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b60a:	b141      	cbz	r1, 800b61e <__swsetup_r+0x6a>
 800b60c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b610:	4299      	cmp	r1, r3
 800b612:	d002      	beq.n	800b61a <__swsetup_r+0x66>
 800b614:	4630      	mov	r0, r6
 800b616:	f002 f96b 	bl	800d8f0 <_free_r>
 800b61a:	2300      	movs	r3, #0
 800b61c:	6363      	str	r3, [r4, #52]	; 0x34
 800b61e:	89a3      	ldrh	r3, [r4, #12]
 800b620:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b624:	81a3      	strh	r3, [r4, #12]
 800b626:	2300      	movs	r3, #0
 800b628:	6063      	str	r3, [r4, #4]
 800b62a:	6923      	ldr	r3, [r4, #16]
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	f043 0308 	orr.w	r3, r3, #8
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	6923      	ldr	r3, [r4, #16]
 800b638:	b94b      	cbnz	r3, 800b64e <__swsetup_r+0x9a>
 800b63a:	89a3      	ldrh	r3, [r4, #12]
 800b63c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b644:	d003      	beq.n	800b64e <__swsetup_r+0x9a>
 800b646:	4621      	mov	r1, r4
 800b648:	4630      	mov	r0, r6
 800b64a:	f001 fc1f 	bl	800ce8c <__smakebuf_r>
 800b64e:	89a0      	ldrh	r0, [r4, #12]
 800b650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b654:	f010 0301 	ands.w	r3, r0, #1
 800b658:	d00a      	beq.n	800b670 <__swsetup_r+0xbc>
 800b65a:	2300      	movs	r3, #0
 800b65c:	60a3      	str	r3, [r4, #8]
 800b65e:	6963      	ldr	r3, [r4, #20]
 800b660:	425b      	negs	r3, r3
 800b662:	61a3      	str	r3, [r4, #24]
 800b664:	6923      	ldr	r3, [r4, #16]
 800b666:	b943      	cbnz	r3, 800b67a <__swsetup_r+0xc6>
 800b668:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b66c:	d1ba      	bne.n	800b5e4 <__swsetup_r+0x30>
 800b66e:	bd70      	pop	{r4, r5, r6, pc}
 800b670:	0781      	lsls	r1, r0, #30
 800b672:	bf58      	it	pl
 800b674:	6963      	ldrpl	r3, [r4, #20]
 800b676:	60a3      	str	r3, [r4, #8]
 800b678:	e7f4      	b.n	800b664 <__swsetup_r+0xb0>
 800b67a:	2000      	movs	r0, #0
 800b67c:	e7f7      	b.n	800b66e <__swsetup_r+0xba>
 800b67e:	bf00      	nop
 800b680:	20000024 	.word	0x20000024
 800b684:	0800e780 	.word	0x0800e780
 800b688:	0800e7a0 	.word	0x0800e7a0
 800b68c:	0800e760 	.word	0x0800e760

0800b690 <__assert_func>:
 800b690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b692:	4614      	mov	r4, r2
 800b694:	461a      	mov	r2, r3
 800b696:	4b09      	ldr	r3, [pc, #36]	; (800b6bc <__assert_func+0x2c>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4605      	mov	r5, r0
 800b69c:	68d8      	ldr	r0, [r3, #12]
 800b69e:	b14c      	cbz	r4, 800b6b4 <__assert_func+0x24>
 800b6a0:	4b07      	ldr	r3, [pc, #28]	; (800b6c0 <__assert_func+0x30>)
 800b6a2:	9100      	str	r1, [sp, #0]
 800b6a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6a8:	4906      	ldr	r1, [pc, #24]	; (800b6c4 <__assert_func+0x34>)
 800b6aa:	462b      	mov	r3, r5
 800b6ac:	f001 f822 	bl	800c6f4 <fiprintf>
 800b6b0:	f002 fd44 	bl	800e13c <abort>
 800b6b4:	4b04      	ldr	r3, [pc, #16]	; (800b6c8 <__assert_func+0x38>)
 800b6b6:	461c      	mov	r4, r3
 800b6b8:	e7f3      	b.n	800b6a2 <__assert_func+0x12>
 800b6ba:	bf00      	nop
 800b6bc:	20000024 	.word	0x20000024
 800b6c0:	0800e590 	.word	0x0800e590
 800b6c4:	0800e59d 	.word	0x0800e59d
 800b6c8:	0800e5cb 	.word	0x0800e5cb

0800b6cc <quorem>:
 800b6cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d0:	6903      	ldr	r3, [r0, #16]
 800b6d2:	690c      	ldr	r4, [r1, #16]
 800b6d4:	42a3      	cmp	r3, r4
 800b6d6:	4607      	mov	r7, r0
 800b6d8:	f2c0 8081 	blt.w	800b7de <quorem+0x112>
 800b6dc:	3c01      	subs	r4, #1
 800b6de:	f101 0814 	add.w	r8, r1, #20
 800b6e2:	f100 0514 	add.w	r5, r0, #20
 800b6e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6ea:	9301      	str	r3, [sp, #4]
 800b6ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b6fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b700:	fbb2 f6f3 	udiv	r6, r2, r3
 800b704:	d331      	bcc.n	800b76a <quorem+0x9e>
 800b706:	f04f 0e00 	mov.w	lr, #0
 800b70a:	4640      	mov	r0, r8
 800b70c:	46ac      	mov	ip, r5
 800b70e:	46f2      	mov	sl, lr
 800b710:	f850 2b04 	ldr.w	r2, [r0], #4
 800b714:	b293      	uxth	r3, r2
 800b716:	fb06 e303 	mla	r3, r6, r3, lr
 800b71a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b71e:	b29b      	uxth	r3, r3
 800b720:	ebaa 0303 	sub.w	r3, sl, r3
 800b724:	f8dc a000 	ldr.w	sl, [ip]
 800b728:	0c12      	lsrs	r2, r2, #16
 800b72a:	fa13 f38a 	uxtah	r3, r3, sl
 800b72e:	fb06 e202 	mla	r2, r6, r2, lr
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	9b00      	ldr	r3, [sp, #0]
 800b736:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b73a:	b292      	uxth	r2, r2
 800b73c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b740:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b744:	f8bd 3000 	ldrh.w	r3, [sp]
 800b748:	4581      	cmp	r9, r0
 800b74a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b74e:	f84c 3b04 	str.w	r3, [ip], #4
 800b752:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b756:	d2db      	bcs.n	800b710 <quorem+0x44>
 800b758:	f855 300b 	ldr.w	r3, [r5, fp]
 800b75c:	b92b      	cbnz	r3, 800b76a <quorem+0x9e>
 800b75e:	9b01      	ldr	r3, [sp, #4]
 800b760:	3b04      	subs	r3, #4
 800b762:	429d      	cmp	r5, r3
 800b764:	461a      	mov	r2, r3
 800b766:	d32e      	bcc.n	800b7c6 <quorem+0xfa>
 800b768:	613c      	str	r4, [r7, #16]
 800b76a:	4638      	mov	r0, r7
 800b76c:	f001 feb4 	bl	800d4d8 <__mcmp>
 800b770:	2800      	cmp	r0, #0
 800b772:	db24      	blt.n	800b7be <quorem+0xf2>
 800b774:	3601      	adds	r6, #1
 800b776:	4628      	mov	r0, r5
 800b778:	f04f 0c00 	mov.w	ip, #0
 800b77c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b780:	f8d0 e000 	ldr.w	lr, [r0]
 800b784:	b293      	uxth	r3, r2
 800b786:	ebac 0303 	sub.w	r3, ip, r3
 800b78a:	0c12      	lsrs	r2, r2, #16
 800b78c:	fa13 f38e 	uxtah	r3, r3, lr
 800b790:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b794:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b798:	b29b      	uxth	r3, r3
 800b79a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b79e:	45c1      	cmp	r9, r8
 800b7a0:	f840 3b04 	str.w	r3, [r0], #4
 800b7a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7a8:	d2e8      	bcs.n	800b77c <quorem+0xb0>
 800b7aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7b2:	b922      	cbnz	r2, 800b7be <quorem+0xf2>
 800b7b4:	3b04      	subs	r3, #4
 800b7b6:	429d      	cmp	r5, r3
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	d30a      	bcc.n	800b7d2 <quorem+0x106>
 800b7bc:	613c      	str	r4, [r7, #16]
 800b7be:	4630      	mov	r0, r6
 800b7c0:	b003      	add	sp, #12
 800b7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c6:	6812      	ldr	r2, [r2, #0]
 800b7c8:	3b04      	subs	r3, #4
 800b7ca:	2a00      	cmp	r2, #0
 800b7cc:	d1cc      	bne.n	800b768 <quorem+0x9c>
 800b7ce:	3c01      	subs	r4, #1
 800b7d0:	e7c7      	b.n	800b762 <quorem+0x96>
 800b7d2:	6812      	ldr	r2, [r2, #0]
 800b7d4:	3b04      	subs	r3, #4
 800b7d6:	2a00      	cmp	r2, #0
 800b7d8:	d1f0      	bne.n	800b7bc <quorem+0xf0>
 800b7da:	3c01      	subs	r4, #1
 800b7dc:	e7eb      	b.n	800b7b6 <quorem+0xea>
 800b7de:	2000      	movs	r0, #0
 800b7e0:	e7ee      	b.n	800b7c0 <quorem+0xf4>
 800b7e2:	0000      	movs	r0, r0
 800b7e4:	0000      	movs	r0, r0
	...

0800b7e8 <_dtoa_r>:
 800b7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ec:	ed2d 8b04 	vpush	{d8-d9}
 800b7f0:	ec57 6b10 	vmov	r6, r7, d0
 800b7f4:	b093      	sub	sp, #76	; 0x4c
 800b7f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b7f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b7fc:	9106      	str	r1, [sp, #24]
 800b7fe:	ee10 aa10 	vmov	sl, s0
 800b802:	4604      	mov	r4, r0
 800b804:	9209      	str	r2, [sp, #36]	; 0x24
 800b806:	930c      	str	r3, [sp, #48]	; 0x30
 800b808:	46bb      	mov	fp, r7
 800b80a:	b975      	cbnz	r5, 800b82a <_dtoa_r+0x42>
 800b80c:	2010      	movs	r0, #16
 800b80e:	f001 fb7d 	bl	800cf0c <malloc>
 800b812:	4602      	mov	r2, r0
 800b814:	6260      	str	r0, [r4, #36]	; 0x24
 800b816:	b920      	cbnz	r0, 800b822 <_dtoa_r+0x3a>
 800b818:	4ba7      	ldr	r3, [pc, #668]	; (800bab8 <_dtoa_r+0x2d0>)
 800b81a:	21ea      	movs	r1, #234	; 0xea
 800b81c:	48a7      	ldr	r0, [pc, #668]	; (800babc <_dtoa_r+0x2d4>)
 800b81e:	f7ff ff37 	bl	800b690 <__assert_func>
 800b822:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b826:	6005      	str	r5, [r0, #0]
 800b828:	60c5      	str	r5, [r0, #12]
 800b82a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b82c:	6819      	ldr	r1, [r3, #0]
 800b82e:	b151      	cbz	r1, 800b846 <_dtoa_r+0x5e>
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	604a      	str	r2, [r1, #4]
 800b834:	2301      	movs	r3, #1
 800b836:	4093      	lsls	r3, r2
 800b838:	608b      	str	r3, [r1, #8]
 800b83a:	4620      	mov	r0, r4
 800b83c:	f001 fbc0 	bl	800cfc0 <_Bfree>
 800b840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b842:	2200      	movs	r2, #0
 800b844:	601a      	str	r2, [r3, #0]
 800b846:	1e3b      	subs	r3, r7, #0
 800b848:	bfaa      	itet	ge
 800b84a:	2300      	movge	r3, #0
 800b84c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b850:	f8c8 3000 	strge.w	r3, [r8]
 800b854:	4b9a      	ldr	r3, [pc, #616]	; (800bac0 <_dtoa_r+0x2d8>)
 800b856:	bfbc      	itt	lt
 800b858:	2201      	movlt	r2, #1
 800b85a:	f8c8 2000 	strlt.w	r2, [r8]
 800b85e:	ea33 030b 	bics.w	r3, r3, fp
 800b862:	d11b      	bne.n	800b89c <_dtoa_r+0xb4>
 800b864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b866:	f242 730f 	movw	r3, #9999	; 0x270f
 800b86a:	6013      	str	r3, [r2, #0]
 800b86c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b870:	4333      	orrs	r3, r6
 800b872:	f000 8592 	beq.w	800c39a <_dtoa_r+0xbb2>
 800b876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b878:	b963      	cbnz	r3, 800b894 <_dtoa_r+0xac>
 800b87a:	4b92      	ldr	r3, [pc, #584]	; (800bac4 <_dtoa_r+0x2dc>)
 800b87c:	e022      	b.n	800b8c4 <_dtoa_r+0xdc>
 800b87e:	4b92      	ldr	r3, [pc, #584]	; (800bac8 <_dtoa_r+0x2e0>)
 800b880:	9301      	str	r3, [sp, #4]
 800b882:	3308      	adds	r3, #8
 800b884:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	9801      	ldr	r0, [sp, #4]
 800b88a:	b013      	add	sp, #76	; 0x4c
 800b88c:	ecbd 8b04 	vpop	{d8-d9}
 800b890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b894:	4b8b      	ldr	r3, [pc, #556]	; (800bac4 <_dtoa_r+0x2dc>)
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	3303      	adds	r3, #3
 800b89a:	e7f3      	b.n	800b884 <_dtoa_r+0x9c>
 800b89c:	2200      	movs	r2, #0
 800b89e:	2300      	movs	r3, #0
 800b8a0:	4650      	mov	r0, sl
 800b8a2:	4659      	mov	r1, fp
 800b8a4:	f7f5 f910 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8a8:	ec4b ab19 	vmov	d9, sl, fp
 800b8ac:	4680      	mov	r8, r0
 800b8ae:	b158      	cbz	r0, 800b8c8 <_dtoa_r+0xe0>
 800b8b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	6013      	str	r3, [r2, #0]
 800b8b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f000 856b 	beq.w	800c394 <_dtoa_r+0xbac>
 800b8be:	4883      	ldr	r0, [pc, #524]	; (800bacc <_dtoa_r+0x2e4>)
 800b8c0:	6018      	str	r0, [r3, #0]
 800b8c2:	1e43      	subs	r3, r0, #1
 800b8c4:	9301      	str	r3, [sp, #4]
 800b8c6:	e7df      	b.n	800b888 <_dtoa_r+0xa0>
 800b8c8:	ec4b ab10 	vmov	d0, sl, fp
 800b8cc:	aa10      	add	r2, sp, #64	; 0x40
 800b8ce:	a911      	add	r1, sp, #68	; 0x44
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f001 ff23 	bl	800d71c <__d2b>
 800b8d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b8da:	ee08 0a10 	vmov	s16, r0
 800b8de:	2d00      	cmp	r5, #0
 800b8e0:	f000 8084 	beq.w	800b9ec <_dtoa_r+0x204>
 800b8e4:	ee19 3a90 	vmov	r3, s19
 800b8e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b8f0:	4656      	mov	r6, sl
 800b8f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b8f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b8fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b8fe:	4b74      	ldr	r3, [pc, #464]	; (800bad0 <_dtoa_r+0x2e8>)
 800b900:	2200      	movs	r2, #0
 800b902:	4630      	mov	r0, r6
 800b904:	4639      	mov	r1, r7
 800b906:	f7f4 fcbf 	bl	8000288 <__aeabi_dsub>
 800b90a:	a365      	add	r3, pc, #404	; (adr r3, 800baa0 <_dtoa_r+0x2b8>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 fe72 	bl	80005f8 <__aeabi_dmul>
 800b914:	a364      	add	r3, pc, #400	; (adr r3, 800baa8 <_dtoa_r+0x2c0>)
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	f7f4 fcb7 	bl	800028c <__adddf3>
 800b91e:	4606      	mov	r6, r0
 800b920:	4628      	mov	r0, r5
 800b922:	460f      	mov	r7, r1
 800b924:	f7f4 fdfe 	bl	8000524 <__aeabi_i2d>
 800b928:	a361      	add	r3, pc, #388	; (adr r3, 800bab0 <_dtoa_r+0x2c8>)
 800b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92e:	f7f4 fe63 	bl	80005f8 <__aeabi_dmul>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	4630      	mov	r0, r6
 800b938:	4639      	mov	r1, r7
 800b93a:	f7f4 fca7 	bl	800028c <__adddf3>
 800b93e:	4606      	mov	r6, r0
 800b940:	460f      	mov	r7, r1
 800b942:	f7f5 f909 	bl	8000b58 <__aeabi_d2iz>
 800b946:	2200      	movs	r2, #0
 800b948:	9000      	str	r0, [sp, #0]
 800b94a:	2300      	movs	r3, #0
 800b94c:	4630      	mov	r0, r6
 800b94e:	4639      	mov	r1, r7
 800b950:	f7f5 f8c4 	bl	8000adc <__aeabi_dcmplt>
 800b954:	b150      	cbz	r0, 800b96c <_dtoa_r+0x184>
 800b956:	9800      	ldr	r0, [sp, #0]
 800b958:	f7f4 fde4 	bl	8000524 <__aeabi_i2d>
 800b95c:	4632      	mov	r2, r6
 800b95e:	463b      	mov	r3, r7
 800b960:	f7f5 f8b2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b964:	b910      	cbnz	r0, 800b96c <_dtoa_r+0x184>
 800b966:	9b00      	ldr	r3, [sp, #0]
 800b968:	3b01      	subs	r3, #1
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	9b00      	ldr	r3, [sp, #0]
 800b96e:	2b16      	cmp	r3, #22
 800b970:	d85a      	bhi.n	800ba28 <_dtoa_r+0x240>
 800b972:	9a00      	ldr	r2, [sp, #0]
 800b974:	4b57      	ldr	r3, [pc, #348]	; (800bad4 <_dtoa_r+0x2ec>)
 800b976:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	ec51 0b19 	vmov	r0, r1, d9
 800b982:	f7f5 f8ab 	bl	8000adc <__aeabi_dcmplt>
 800b986:	2800      	cmp	r0, #0
 800b988:	d050      	beq.n	800ba2c <_dtoa_r+0x244>
 800b98a:	9b00      	ldr	r3, [sp, #0]
 800b98c:	3b01      	subs	r3, #1
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	2300      	movs	r3, #0
 800b992:	930b      	str	r3, [sp, #44]	; 0x2c
 800b994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b996:	1b5d      	subs	r5, r3, r5
 800b998:	1e6b      	subs	r3, r5, #1
 800b99a:	9305      	str	r3, [sp, #20]
 800b99c:	bf45      	ittet	mi
 800b99e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b9a2:	9304      	strmi	r3, [sp, #16]
 800b9a4:	2300      	movpl	r3, #0
 800b9a6:	2300      	movmi	r3, #0
 800b9a8:	bf4c      	ite	mi
 800b9aa:	9305      	strmi	r3, [sp, #20]
 800b9ac:	9304      	strpl	r3, [sp, #16]
 800b9ae:	9b00      	ldr	r3, [sp, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	db3d      	blt.n	800ba30 <_dtoa_r+0x248>
 800b9b4:	9b05      	ldr	r3, [sp, #20]
 800b9b6:	9a00      	ldr	r2, [sp, #0]
 800b9b8:	920a      	str	r2, [sp, #40]	; 0x28
 800b9ba:	4413      	add	r3, r2
 800b9bc:	9305      	str	r3, [sp, #20]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	9307      	str	r3, [sp, #28]
 800b9c2:	9b06      	ldr	r3, [sp, #24]
 800b9c4:	2b09      	cmp	r3, #9
 800b9c6:	f200 8089 	bhi.w	800badc <_dtoa_r+0x2f4>
 800b9ca:	2b05      	cmp	r3, #5
 800b9cc:	bfc4      	itt	gt
 800b9ce:	3b04      	subgt	r3, #4
 800b9d0:	9306      	strgt	r3, [sp, #24]
 800b9d2:	9b06      	ldr	r3, [sp, #24]
 800b9d4:	f1a3 0302 	sub.w	r3, r3, #2
 800b9d8:	bfcc      	ite	gt
 800b9da:	2500      	movgt	r5, #0
 800b9dc:	2501      	movle	r5, #1
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	f200 8087 	bhi.w	800baf2 <_dtoa_r+0x30a>
 800b9e4:	e8df f003 	tbb	[pc, r3]
 800b9e8:	59383a2d 	.word	0x59383a2d
 800b9ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b9f0:	441d      	add	r5, r3
 800b9f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b9f6:	2b20      	cmp	r3, #32
 800b9f8:	bfc1      	itttt	gt
 800b9fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b9fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba02:	fa0b f303 	lslgt.w	r3, fp, r3
 800ba06:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba0a:	bfda      	itte	le
 800ba0c:	f1c3 0320 	rsble	r3, r3, #32
 800ba10:	fa06 f003 	lslle.w	r0, r6, r3
 800ba14:	4318      	orrgt	r0, r3
 800ba16:	f7f4 fd75 	bl	8000504 <__aeabi_ui2d>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba22:	3d01      	subs	r5, #1
 800ba24:	930e      	str	r3, [sp, #56]	; 0x38
 800ba26:	e76a      	b.n	800b8fe <_dtoa_r+0x116>
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e7b2      	b.n	800b992 <_dtoa_r+0x1aa>
 800ba2c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba2e:	e7b1      	b.n	800b994 <_dtoa_r+0x1ac>
 800ba30:	9b04      	ldr	r3, [sp, #16]
 800ba32:	9a00      	ldr	r2, [sp, #0]
 800ba34:	1a9b      	subs	r3, r3, r2
 800ba36:	9304      	str	r3, [sp, #16]
 800ba38:	4253      	negs	r3, r2
 800ba3a:	9307      	str	r3, [sp, #28]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ba40:	e7bf      	b.n	800b9c2 <_dtoa_r+0x1da>
 800ba42:	2300      	movs	r3, #0
 800ba44:	9308      	str	r3, [sp, #32]
 800ba46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	dc55      	bgt.n	800baf8 <_dtoa_r+0x310>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba52:	461a      	mov	r2, r3
 800ba54:	9209      	str	r2, [sp, #36]	; 0x24
 800ba56:	e00c      	b.n	800ba72 <_dtoa_r+0x28a>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e7f3      	b.n	800ba44 <_dtoa_r+0x25c>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba60:	9308      	str	r3, [sp, #32]
 800ba62:	9b00      	ldr	r3, [sp, #0]
 800ba64:	4413      	add	r3, r2
 800ba66:	9302      	str	r3, [sp, #8]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	9303      	str	r3, [sp, #12]
 800ba6e:	bfb8      	it	lt
 800ba70:	2301      	movlt	r3, #1
 800ba72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ba74:	2200      	movs	r2, #0
 800ba76:	6042      	str	r2, [r0, #4]
 800ba78:	2204      	movs	r2, #4
 800ba7a:	f102 0614 	add.w	r6, r2, #20
 800ba7e:	429e      	cmp	r6, r3
 800ba80:	6841      	ldr	r1, [r0, #4]
 800ba82:	d93d      	bls.n	800bb00 <_dtoa_r+0x318>
 800ba84:	4620      	mov	r0, r4
 800ba86:	f001 fa5b 	bl	800cf40 <_Balloc>
 800ba8a:	9001      	str	r0, [sp, #4]
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d13b      	bne.n	800bb08 <_dtoa_r+0x320>
 800ba90:	4b11      	ldr	r3, [pc, #68]	; (800bad8 <_dtoa_r+0x2f0>)
 800ba92:	4602      	mov	r2, r0
 800ba94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba98:	e6c0      	b.n	800b81c <_dtoa_r+0x34>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e7df      	b.n	800ba5e <_dtoa_r+0x276>
 800ba9e:	bf00      	nop
 800baa0:	636f4361 	.word	0x636f4361
 800baa4:	3fd287a7 	.word	0x3fd287a7
 800baa8:	8b60c8b3 	.word	0x8b60c8b3
 800baac:	3fc68a28 	.word	0x3fc68a28
 800bab0:	509f79fb 	.word	0x509f79fb
 800bab4:	3fd34413 	.word	0x3fd34413
 800bab8:	0800e6da 	.word	0x0800e6da
 800babc:	0800e6f1 	.word	0x0800e6f1
 800bac0:	7ff00000 	.word	0x7ff00000
 800bac4:	0800e6d6 	.word	0x0800e6d6
 800bac8:	0800e6cd 	.word	0x0800e6cd
 800bacc:	0800e511 	.word	0x0800e511
 800bad0:	3ff80000 	.word	0x3ff80000
 800bad4:	0800e8c0 	.word	0x0800e8c0
 800bad8:	0800e74c 	.word	0x0800e74c
 800badc:	2501      	movs	r5, #1
 800bade:	2300      	movs	r3, #0
 800bae0:	9306      	str	r3, [sp, #24]
 800bae2:	9508      	str	r5, [sp, #32]
 800bae4:	f04f 33ff 	mov.w	r3, #4294967295
 800bae8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800baec:	2200      	movs	r2, #0
 800baee:	2312      	movs	r3, #18
 800baf0:	e7b0      	b.n	800ba54 <_dtoa_r+0x26c>
 800baf2:	2301      	movs	r3, #1
 800baf4:	9308      	str	r3, [sp, #32]
 800baf6:	e7f5      	b.n	800bae4 <_dtoa_r+0x2fc>
 800baf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bafa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bafe:	e7b8      	b.n	800ba72 <_dtoa_r+0x28a>
 800bb00:	3101      	adds	r1, #1
 800bb02:	6041      	str	r1, [r0, #4]
 800bb04:	0052      	lsls	r2, r2, #1
 800bb06:	e7b8      	b.n	800ba7a <_dtoa_r+0x292>
 800bb08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb0a:	9a01      	ldr	r2, [sp, #4]
 800bb0c:	601a      	str	r2, [r3, #0]
 800bb0e:	9b03      	ldr	r3, [sp, #12]
 800bb10:	2b0e      	cmp	r3, #14
 800bb12:	f200 809d 	bhi.w	800bc50 <_dtoa_r+0x468>
 800bb16:	2d00      	cmp	r5, #0
 800bb18:	f000 809a 	beq.w	800bc50 <_dtoa_r+0x468>
 800bb1c:	9b00      	ldr	r3, [sp, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	dd32      	ble.n	800bb88 <_dtoa_r+0x3a0>
 800bb22:	4ab7      	ldr	r2, [pc, #732]	; (800be00 <_dtoa_r+0x618>)
 800bb24:	f003 030f 	and.w	r3, r3, #15
 800bb28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb30:	9b00      	ldr	r3, [sp, #0]
 800bb32:	05d8      	lsls	r0, r3, #23
 800bb34:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bb38:	d516      	bpl.n	800bb68 <_dtoa_r+0x380>
 800bb3a:	4bb2      	ldr	r3, [pc, #712]	; (800be04 <_dtoa_r+0x61c>)
 800bb3c:	ec51 0b19 	vmov	r0, r1, d9
 800bb40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb44:	f7f4 fe82 	bl	800084c <__aeabi_ddiv>
 800bb48:	f007 070f 	and.w	r7, r7, #15
 800bb4c:	4682      	mov	sl, r0
 800bb4e:	468b      	mov	fp, r1
 800bb50:	2503      	movs	r5, #3
 800bb52:	4eac      	ldr	r6, [pc, #688]	; (800be04 <_dtoa_r+0x61c>)
 800bb54:	b957      	cbnz	r7, 800bb6c <_dtoa_r+0x384>
 800bb56:	4642      	mov	r2, r8
 800bb58:	464b      	mov	r3, r9
 800bb5a:	4650      	mov	r0, sl
 800bb5c:	4659      	mov	r1, fp
 800bb5e:	f7f4 fe75 	bl	800084c <__aeabi_ddiv>
 800bb62:	4682      	mov	sl, r0
 800bb64:	468b      	mov	fp, r1
 800bb66:	e028      	b.n	800bbba <_dtoa_r+0x3d2>
 800bb68:	2502      	movs	r5, #2
 800bb6a:	e7f2      	b.n	800bb52 <_dtoa_r+0x36a>
 800bb6c:	07f9      	lsls	r1, r7, #31
 800bb6e:	d508      	bpl.n	800bb82 <_dtoa_r+0x39a>
 800bb70:	4640      	mov	r0, r8
 800bb72:	4649      	mov	r1, r9
 800bb74:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb78:	f7f4 fd3e 	bl	80005f8 <__aeabi_dmul>
 800bb7c:	3501      	adds	r5, #1
 800bb7e:	4680      	mov	r8, r0
 800bb80:	4689      	mov	r9, r1
 800bb82:	107f      	asrs	r7, r7, #1
 800bb84:	3608      	adds	r6, #8
 800bb86:	e7e5      	b.n	800bb54 <_dtoa_r+0x36c>
 800bb88:	f000 809b 	beq.w	800bcc2 <_dtoa_r+0x4da>
 800bb8c:	9b00      	ldr	r3, [sp, #0]
 800bb8e:	4f9d      	ldr	r7, [pc, #628]	; (800be04 <_dtoa_r+0x61c>)
 800bb90:	425e      	negs	r6, r3
 800bb92:	4b9b      	ldr	r3, [pc, #620]	; (800be00 <_dtoa_r+0x618>)
 800bb94:	f006 020f 	and.w	r2, r6, #15
 800bb98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	ec51 0b19 	vmov	r0, r1, d9
 800bba4:	f7f4 fd28 	bl	80005f8 <__aeabi_dmul>
 800bba8:	1136      	asrs	r6, r6, #4
 800bbaa:	4682      	mov	sl, r0
 800bbac:	468b      	mov	fp, r1
 800bbae:	2300      	movs	r3, #0
 800bbb0:	2502      	movs	r5, #2
 800bbb2:	2e00      	cmp	r6, #0
 800bbb4:	d17a      	bne.n	800bcac <_dtoa_r+0x4c4>
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1d3      	bne.n	800bb62 <_dtoa_r+0x37a>
 800bbba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 8082 	beq.w	800bcc6 <_dtoa_r+0x4de>
 800bbc2:	4b91      	ldr	r3, [pc, #580]	; (800be08 <_dtoa_r+0x620>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	4650      	mov	r0, sl
 800bbc8:	4659      	mov	r1, fp
 800bbca:	f7f4 ff87 	bl	8000adc <__aeabi_dcmplt>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d079      	beq.n	800bcc6 <_dtoa_r+0x4de>
 800bbd2:	9b03      	ldr	r3, [sp, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d076      	beq.n	800bcc6 <_dtoa_r+0x4de>
 800bbd8:	9b02      	ldr	r3, [sp, #8]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	dd36      	ble.n	800bc4c <_dtoa_r+0x464>
 800bbde:	9b00      	ldr	r3, [sp, #0]
 800bbe0:	4650      	mov	r0, sl
 800bbe2:	4659      	mov	r1, fp
 800bbe4:	1e5f      	subs	r7, r3, #1
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	4b88      	ldr	r3, [pc, #544]	; (800be0c <_dtoa_r+0x624>)
 800bbea:	f7f4 fd05 	bl	80005f8 <__aeabi_dmul>
 800bbee:	9e02      	ldr	r6, [sp, #8]
 800bbf0:	4682      	mov	sl, r0
 800bbf2:	468b      	mov	fp, r1
 800bbf4:	3501      	adds	r5, #1
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f7f4 fc94 	bl	8000524 <__aeabi_i2d>
 800bbfc:	4652      	mov	r2, sl
 800bbfe:	465b      	mov	r3, fp
 800bc00:	f7f4 fcfa 	bl	80005f8 <__aeabi_dmul>
 800bc04:	4b82      	ldr	r3, [pc, #520]	; (800be10 <_dtoa_r+0x628>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	f7f4 fb40 	bl	800028c <__adddf3>
 800bc0c:	46d0      	mov	r8, sl
 800bc0e:	46d9      	mov	r9, fp
 800bc10:	4682      	mov	sl, r0
 800bc12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bc16:	2e00      	cmp	r6, #0
 800bc18:	d158      	bne.n	800bccc <_dtoa_r+0x4e4>
 800bc1a:	4b7e      	ldr	r3, [pc, #504]	; (800be14 <_dtoa_r+0x62c>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	4640      	mov	r0, r8
 800bc20:	4649      	mov	r1, r9
 800bc22:	f7f4 fb31 	bl	8000288 <__aeabi_dsub>
 800bc26:	4652      	mov	r2, sl
 800bc28:	465b      	mov	r3, fp
 800bc2a:	4680      	mov	r8, r0
 800bc2c:	4689      	mov	r9, r1
 800bc2e:	f7f4 ff73 	bl	8000b18 <__aeabi_dcmpgt>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	f040 8295 	bne.w	800c162 <_dtoa_r+0x97a>
 800bc38:	4652      	mov	r2, sl
 800bc3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	f7f4 ff4b 	bl	8000adc <__aeabi_dcmplt>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	f040 8289 	bne.w	800c15e <_dtoa_r+0x976>
 800bc4c:	ec5b ab19 	vmov	sl, fp, d9
 800bc50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f2c0 8148 	blt.w	800bee8 <_dtoa_r+0x700>
 800bc58:	9a00      	ldr	r2, [sp, #0]
 800bc5a:	2a0e      	cmp	r2, #14
 800bc5c:	f300 8144 	bgt.w	800bee8 <_dtoa_r+0x700>
 800bc60:	4b67      	ldr	r3, [pc, #412]	; (800be00 <_dtoa_r+0x618>)
 800bc62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc66:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f280 80d5 	bge.w	800be1c <_dtoa_r+0x634>
 800bc72:	9b03      	ldr	r3, [sp, #12]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f300 80d1 	bgt.w	800be1c <_dtoa_r+0x634>
 800bc7a:	f040 826f 	bne.w	800c15c <_dtoa_r+0x974>
 800bc7e:	4b65      	ldr	r3, [pc, #404]	; (800be14 <_dtoa_r+0x62c>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	4640      	mov	r0, r8
 800bc84:	4649      	mov	r1, r9
 800bc86:	f7f4 fcb7 	bl	80005f8 <__aeabi_dmul>
 800bc8a:	4652      	mov	r2, sl
 800bc8c:	465b      	mov	r3, fp
 800bc8e:	f7f4 ff39 	bl	8000b04 <__aeabi_dcmpge>
 800bc92:	9e03      	ldr	r6, [sp, #12]
 800bc94:	4637      	mov	r7, r6
 800bc96:	2800      	cmp	r0, #0
 800bc98:	f040 8245 	bne.w	800c126 <_dtoa_r+0x93e>
 800bc9c:	9d01      	ldr	r5, [sp, #4]
 800bc9e:	2331      	movs	r3, #49	; 0x31
 800bca0:	f805 3b01 	strb.w	r3, [r5], #1
 800bca4:	9b00      	ldr	r3, [sp, #0]
 800bca6:	3301      	adds	r3, #1
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	e240      	b.n	800c12e <_dtoa_r+0x946>
 800bcac:	07f2      	lsls	r2, r6, #31
 800bcae:	d505      	bpl.n	800bcbc <_dtoa_r+0x4d4>
 800bcb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcb4:	f7f4 fca0 	bl	80005f8 <__aeabi_dmul>
 800bcb8:	3501      	adds	r5, #1
 800bcba:	2301      	movs	r3, #1
 800bcbc:	1076      	asrs	r6, r6, #1
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	e777      	b.n	800bbb2 <_dtoa_r+0x3ca>
 800bcc2:	2502      	movs	r5, #2
 800bcc4:	e779      	b.n	800bbba <_dtoa_r+0x3d2>
 800bcc6:	9f00      	ldr	r7, [sp, #0]
 800bcc8:	9e03      	ldr	r6, [sp, #12]
 800bcca:	e794      	b.n	800bbf6 <_dtoa_r+0x40e>
 800bccc:	9901      	ldr	r1, [sp, #4]
 800bcce:	4b4c      	ldr	r3, [pc, #304]	; (800be00 <_dtoa_r+0x618>)
 800bcd0:	4431      	add	r1, r6
 800bcd2:	910d      	str	r1, [sp, #52]	; 0x34
 800bcd4:	9908      	ldr	r1, [sp, #32]
 800bcd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bcda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bcde:	2900      	cmp	r1, #0
 800bce0:	d043      	beq.n	800bd6a <_dtoa_r+0x582>
 800bce2:	494d      	ldr	r1, [pc, #308]	; (800be18 <_dtoa_r+0x630>)
 800bce4:	2000      	movs	r0, #0
 800bce6:	f7f4 fdb1 	bl	800084c <__aeabi_ddiv>
 800bcea:	4652      	mov	r2, sl
 800bcec:	465b      	mov	r3, fp
 800bcee:	f7f4 facb 	bl	8000288 <__aeabi_dsub>
 800bcf2:	9d01      	ldr	r5, [sp, #4]
 800bcf4:	4682      	mov	sl, r0
 800bcf6:	468b      	mov	fp, r1
 800bcf8:	4649      	mov	r1, r9
 800bcfa:	4640      	mov	r0, r8
 800bcfc:	f7f4 ff2c 	bl	8000b58 <__aeabi_d2iz>
 800bd00:	4606      	mov	r6, r0
 800bd02:	f7f4 fc0f 	bl	8000524 <__aeabi_i2d>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4640      	mov	r0, r8
 800bd0c:	4649      	mov	r1, r9
 800bd0e:	f7f4 fabb 	bl	8000288 <__aeabi_dsub>
 800bd12:	3630      	adds	r6, #48	; 0x30
 800bd14:	f805 6b01 	strb.w	r6, [r5], #1
 800bd18:	4652      	mov	r2, sl
 800bd1a:	465b      	mov	r3, fp
 800bd1c:	4680      	mov	r8, r0
 800bd1e:	4689      	mov	r9, r1
 800bd20:	f7f4 fedc 	bl	8000adc <__aeabi_dcmplt>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d163      	bne.n	800bdf0 <_dtoa_r+0x608>
 800bd28:	4642      	mov	r2, r8
 800bd2a:	464b      	mov	r3, r9
 800bd2c:	4936      	ldr	r1, [pc, #216]	; (800be08 <_dtoa_r+0x620>)
 800bd2e:	2000      	movs	r0, #0
 800bd30:	f7f4 faaa 	bl	8000288 <__aeabi_dsub>
 800bd34:	4652      	mov	r2, sl
 800bd36:	465b      	mov	r3, fp
 800bd38:	f7f4 fed0 	bl	8000adc <__aeabi_dcmplt>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	f040 80b5 	bne.w	800beac <_dtoa_r+0x6c4>
 800bd42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd44:	429d      	cmp	r5, r3
 800bd46:	d081      	beq.n	800bc4c <_dtoa_r+0x464>
 800bd48:	4b30      	ldr	r3, [pc, #192]	; (800be0c <_dtoa_r+0x624>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	4650      	mov	r0, sl
 800bd4e:	4659      	mov	r1, fp
 800bd50:	f7f4 fc52 	bl	80005f8 <__aeabi_dmul>
 800bd54:	4b2d      	ldr	r3, [pc, #180]	; (800be0c <_dtoa_r+0x624>)
 800bd56:	4682      	mov	sl, r0
 800bd58:	468b      	mov	fp, r1
 800bd5a:	4640      	mov	r0, r8
 800bd5c:	4649      	mov	r1, r9
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f7f4 fc4a 	bl	80005f8 <__aeabi_dmul>
 800bd64:	4680      	mov	r8, r0
 800bd66:	4689      	mov	r9, r1
 800bd68:	e7c6      	b.n	800bcf8 <_dtoa_r+0x510>
 800bd6a:	4650      	mov	r0, sl
 800bd6c:	4659      	mov	r1, fp
 800bd6e:	f7f4 fc43 	bl	80005f8 <__aeabi_dmul>
 800bd72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd74:	9d01      	ldr	r5, [sp, #4]
 800bd76:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd78:	4682      	mov	sl, r0
 800bd7a:	468b      	mov	fp, r1
 800bd7c:	4649      	mov	r1, r9
 800bd7e:	4640      	mov	r0, r8
 800bd80:	f7f4 feea 	bl	8000b58 <__aeabi_d2iz>
 800bd84:	4606      	mov	r6, r0
 800bd86:	f7f4 fbcd 	bl	8000524 <__aeabi_i2d>
 800bd8a:	3630      	adds	r6, #48	; 0x30
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	4640      	mov	r0, r8
 800bd92:	4649      	mov	r1, r9
 800bd94:	f7f4 fa78 	bl	8000288 <__aeabi_dsub>
 800bd98:	f805 6b01 	strb.w	r6, [r5], #1
 800bd9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd9e:	429d      	cmp	r5, r3
 800bda0:	4680      	mov	r8, r0
 800bda2:	4689      	mov	r9, r1
 800bda4:	f04f 0200 	mov.w	r2, #0
 800bda8:	d124      	bne.n	800bdf4 <_dtoa_r+0x60c>
 800bdaa:	4b1b      	ldr	r3, [pc, #108]	; (800be18 <_dtoa_r+0x630>)
 800bdac:	4650      	mov	r0, sl
 800bdae:	4659      	mov	r1, fp
 800bdb0:	f7f4 fa6c 	bl	800028c <__adddf3>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	4640      	mov	r0, r8
 800bdba:	4649      	mov	r1, r9
 800bdbc:	f7f4 feac 	bl	8000b18 <__aeabi_dcmpgt>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d173      	bne.n	800beac <_dtoa_r+0x6c4>
 800bdc4:	4652      	mov	r2, sl
 800bdc6:	465b      	mov	r3, fp
 800bdc8:	4913      	ldr	r1, [pc, #76]	; (800be18 <_dtoa_r+0x630>)
 800bdca:	2000      	movs	r0, #0
 800bdcc:	f7f4 fa5c 	bl	8000288 <__aeabi_dsub>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4640      	mov	r0, r8
 800bdd6:	4649      	mov	r1, r9
 800bdd8:	f7f4 fe80 	bl	8000adc <__aeabi_dcmplt>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	f43f af35 	beq.w	800bc4c <_dtoa_r+0x464>
 800bde2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bde4:	1e6b      	subs	r3, r5, #1
 800bde6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bde8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bdec:	2b30      	cmp	r3, #48	; 0x30
 800bdee:	d0f8      	beq.n	800bde2 <_dtoa_r+0x5fa>
 800bdf0:	9700      	str	r7, [sp, #0]
 800bdf2:	e049      	b.n	800be88 <_dtoa_r+0x6a0>
 800bdf4:	4b05      	ldr	r3, [pc, #20]	; (800be0c <_dtoa_r+0x624>)
 800bdf6:	f7f4 fbff 	bl	80005f8 <__aeabi_dmul>
 800bdfa:	4680      	mov	r8, r0
 800bdfc:	4689      	mov	r9, r1
 800bdfe:	e7bd      	b.n	800bd7c <_dtoa_r+0x594>
 800be00:	0800e8c0 	.word	0x0800e8c0
 800be04:	0800e898 	.word	0x0800e898
 800be08:	3ff00000 	.word	0x3ff00000
 800be0c:	40240000 	.word	0x40240000
 800be10:	401c0000 	.word	0x401c0000
 800be14:	40140000 	.word	0x40140000
 800be18:	3fe00000 	.word	0x3fe00000
 800be1c:	9d01      	ldr	r5, [sp, #4]
 800be1e:	4656      	mov	r6, sl
 800be20:	465f      	mov	r7, fp
 800be22:	4642      	mov	r2, r8
 800be24:	464b      	mov	r3, r9
 800be26:	4630      	mov	r0, r6
 800be28:	4639      	mov	r1, r7
 800be2a:	f7f4 fd0f 	bl	800084c <__aeabi_ddiv>
 800be2e:	f7f4 fe93 	bl	8000b58 <__aeabi_d2iz>
 800be32:	4682      	mov	sl, r0
 800be34:	f7f4 fb76 	bl	8000524 <__aeabi_i2d>
 800be38:	4642      	mov	r2, r8
 800be3a:	464b      	mov	r3, r9
 800be3c:	f7f4 fbdc 	bl	80005f8 <__aeabi_dmul>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4630      	mov	r0, r6
 800be46:	4639      	mov	r1, r7
 800be48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800be4c:	f7f4 fa1c 	bl	8000288 <__aeabi_dsub>
 800be50:	f805 6b01 	strb.w	r6, [r5], #1
 800be54:	9e01      	ldr	r6, [sp, #4]
 800be56:	9f03      	ldr	r7, [sp, #12]
 800be58:	1bae      	subs	r6, r5, r6
 800be5a:	42b7      	cmp	r7, r6
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	d135      	bne.n	800bece <_dtoa_r+0x6e6>
 800be62:	f7f4 fa13 	bl	800028c <__adddf3>
 800be66:	4642      	mov	r2, r8
 800be68:	464b      	mov	r3, r9
 800be6a:	4606      	mov	r6, r0
 800be6c:	460f      	mov	r7, r1
 800be6e:	f7f4 fe53 	bl	8000b18 <__aeabi_dcmpgt>
 800be72:	b9d0      	cbnz	r0, 800beaa <_dtoa_r+0x6c2>
 800be74:	4642      	mov	r2, r8
 800be76:	464b      	mov	r3, r9
 800be78:	4630      	mov	r0, r6
 800be7a:	4639      	mov	r1, r7
 800be7c:	f7f4 fe24 	bl	8000ac8 <__aeabi_dcmpeq>
 800be80:	b110      	cbz	r0, 800be88 <_dtoa_r+0x6a0>
 800be82:	f01a 0f01 	tst.w	sl, #1
 800be86:	d110      	bne.n	800beaa <_dtoa_r+0x6c2>
 800be88:	4620      	mov	r0, r4
 800be8a:	ee18 1a10 	vmov	r1, s16
 800be8e:	f001 f897 	bl	800cfc0 <_Bfree>
 800be92:	2300      	movs	r3, #0
 800be94:	9800      	ldr	r0, [sp, #0]
 800be96:	702b      	strb	r3, [r5, #0]
 800be98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be9a:	3001      	adds	r0, #1
 800be9c:	6018      	str	r0, [r3, #0]
 800be9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f43f acf1 	beq.w	800b888 <_dtoa_r+0xa0>
 800bea6:	601d      	str	r5, [r3, #0]
 800bea8:	e4ee      	b.n	800b888 <_dtoa_r+0xa0>
 800beaa:	9f00      	ldr	r7, [sp, #0]
 800beac:	462b      	mov	r3, r5
 800beae:	461d      	mov	r5, r3
 800beb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800beb4:	2a39      	cmp	r2, #57	; 0x39
 800beb6:	d106      	bne.n	800bec6 <_dtoa_r+0x6de>
 800beb8:	9a01      	ldr	r2, [sp, #4]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d1f7      	bne.n	800beae <_dtoa_r+0x6c6>
 800bebe:	9901      	ldr	r1, [sp, #4]
 800bec0:	2230      	movs	r2, #48	; 0x30
 800bec2:	3701      	adds	r7, #1
 800bec4:	700a      	strb	r2, [r1, #0]
 800bec6:	781a      	ldrb	r2, [r3, #0]
 800bec8:	3201      	adds	r2, #1
 800beca:	701a      	strb	r2, [r3, #0]
 800becc:	e790      	b.n	800bdf0 <_dtoa_r+0x608>
 800bece:	4ba6      	ldr	r3, [pc, #664]	; (800c168 <_dtoa_r+0x980>)
 800bed0:	2200      	movs	r2, #0
 800bed2:	f7f4 fb91 	bl	80005f8 <__aeabi_dmul>
 800bed6:	2200      	movs	r2, #0
 800bed8:	2300      	movs	r3, #0
 800beda:	4606      	mov	r6, r0
 800bedc:	460f      	mov	r7, r1
 800bede:	f7f4 fdf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d09d      	beq.n	800be22 <_dtoa_r+0x63a>
 800bee6:	e7cf      	b.n	800be88 <_dtoa_r+0x6a0>
 800bee8:	9a08      	ldr	r2, [sp, #32]
 800beea:	2a00      	cmp	r2, #0
 800beec:	f000 80d7 	beq.w	800c09e <_dtoa_r+0x8b6>
 800bef0:	9a06      	ldr	r2, [sp, #24]
 800bef2:	2a01      	cmp	r2, #1
 800bef4:	f300 80ba 	bgt.w	800c06c <_dtoa_r+0x884>
 800bef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800befa:	2a00      	cmp	r2, #0
 800befc:	f000 80b2 	beq.w	800c064 <_dtoa_r+0x87c>
 800bf00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf04:	9e07      	ldr	r6, [sp, #28]
 800bf06:	9d04      	ldr	r5, [sp, #16]
 800bf08:	9a04      	ldr	r2, [sp, #16]
 800bf0a:	441a      	add	r2, r3
 800bf0c:	9204      	str	r2, [sp, #16]
 800bf0e:	9a05      	ldr	r2, [sp, #20]
 800bf10:	2101      	movs	r1, #1
 800bf12:	441a      	add	r2, r3
 800bf14:	4620      	mov	r0, r4
 800bf16:	9205      	str	r2, [sp, #20]
 800bf18:	f001 f954 	bl	800d1c4 <__i2b>
 800bf1c:	4607      	mov	r7, r0
 800bf1e:	2d00      	cmp	r5, #0
 800bf20:	dd0c      	ble.n	800bf3c <_dtoa_r+0x754>
 800bf22:	9b05      	ldr	r3, [sp, #20]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	dd09      	ble.n	800bf3c <_dtoa_r+0x754>
 800bf28:	42ab      	cmp	r3, r5
 800bf2a:	9a04      	ldr	r2, [sp, #16]
 800bf2c:	bfa8      	it	ge
 800bf2e:	462b      	movge	r3, r5
 800bf30:	1ad2      	subs	r2, r2, r3
 800bf32:	9204      	str	r2, [sp, #16]
 800bf34:	9a05      	ldr	r2, [sp, #20]
 800bf36:	1aed      	subs	r5, r5, r3
 800bf38:	1ad3      	subs	r3, r2, r3
 800bf3a:	9305      	str	r3, [sp, #20]
 800bf3c:	9b07      	ldr	r3, [sp, #28]
 800bf3e:	b31b      	cbz	r3, 800bf88 <_dtoa_r+0x7a0>
 800bf40:	9b08      	ldr	r3, [sp, #32]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f000 80af 	beq.w	800c0a6 <_dtoa_r+0x8be>
 800bf48:	2e00      	cmp	r6, #0
 800bf4a:	dd13      	ble.n	800bf74 <_dtoa_r+0x78c>
 800bf4c:	4639      	mov	r1, r7
 800bf4e:	4632      	mov	r2, r6
 800bf50:	4620      	mov	r0, r4
 800bf52:	f001 f9f7 	bl	800d344 <__pow5mult>
 800bf56:	ee18 2a10 	vmov	r2, s16
 800bf5a:	4601      	mov	r1, r0
 800bf5c:	4607      	mov	r7, r0
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f001 f946 	bl	800d1f0 <__multiply>
 800bf64:	ee18 1a10 	vmov	r1, s16
 800bf68:	4680      	mov	r8, r0
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f001 f828 	bl	800cfc0 <_Bfree>
 800bf70:	ee08 8a10 	vmov	s16, r8
 800bf74:	9b07      	ldr	r3, [sp, #28]
 800bf76:	1b9a      	subs	r2, r3, r6
 800bf78:	d006      	beq.n	800bf88 <_dtoa_r+0x7a0>
 800bf7a:	ee18 1a10 	vmov	r1, s16
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f001 f9e0 	bl	800d344 <__pow5mult>
 800bf84:	ee08 0a10 	vmov	s16, r0
 800bf88:	2101      	movs	r1, #1
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f001 f91a 	bl	800d1c4 <__i2b>
 800bf90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	4606      	mov	r6, r0
 800bf96:	f340 8088 	ble.w	800c0aa <_dtoa_r+0x8c2>
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	4601      	mov	r1, r0
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f001 f9d0 	bl	800d344 <__pow5mult>
 800bfa4:	9b06      	ldr	r3, [sp, #24]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	4606      	mov	r6, r0
 800bfaa:	f340 8081 	ble.w	800c0b0 <_dtoa_r+0x8c8>
 800bfae:	f04f 0800 	mov.w	r8, #0
 800bfb2:	6933      	ldr	r3, [r6, #16]
 800bfb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bfb8:	6918      	ldr	r0, [r3, #16]
 800bfba:	f001 f8b3 	bl	800d124 <__hi0bits>
 800bfbe:	f1c0 0020 	rsb	r0, r0, #32
 800bfc2:	9b05      	ldr	r3, [sp, #20]
 800bfc4:	4418      	add	r0, r3
 800bfc6:	f010 001f 	ands.w	r0, r0, #31
 800bfca:	f000 8092 	beq.w	800c0f2 <_dtoa_r+0x90a>
 800bfce:	f1c0 0320 	rsb	r3, r0, #32
 800bfd2:	2b04      	cmp	r3, #4
 800bfd4:	f340 808a 	ble.w	800c0ec <_dtoa_r+0x904>
 800bfd8:	f1c0 001c 	rsb	r0, r0, #28
 800bfdc:	9b04      	ldr	r3, [sp, #16]
 800bfde:	4403      	add	r3, r0
 800bfe0:	9304      	str	r3, [sp, #16]
 800bfe2:	9b05      	ldr	r3, [sp, #20]
 800bfe4:	4403      	add	r3, r0
 800bfe6:	4405      	add	r5, r0
 800bfe8:	9305      	str	r3, [sp, #20]
 800bfea:	9b04      	ldr	r3, [sp, #16]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	dd07      	ble.n	800c000 <_dtoa_r+0x818>
 800bff0:	ee18 1a10 	vmov	r1, s16
 800bff4:	461a      	mov	r2, r3
 800bff6:	4620      	mov	r0, r4
 800bff8:	f001 f9fe 	bl	800d3f8 <__lshift>
 800bffc:	ee08 0a10 	vmov	s16, r0
 800c000:	9b05      	ldr	r3, [sp, #20]
 800c002:	2b00      	cmp	r3, #0
 800c004:	dd05      	ble.n	800c012 <_dtoa_r+0x82a>
 800c006:	4631      	mov	r1, r6
 800c008:	461a      	mov	r2, r3
 800c00a:	4620      	mov	r0, r4
 800c00c:	f001 f9f4 	bl	800d3f8 <__lshift>
 800c010:	4606      	mov	r6, r0
 800c012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c014:	2b00      	cmp	r3, #0
 800c016:	d06e      	beq.n	800c0f6 <_dtoa_r+0x90e>
 800c018:	ee18 0a10 	vmov	r0, s16
 800c01c:	4631      	mov	r1, r6
 800c01e:	f001 fa5b 	bl	800d4d8 <__mcmp>
 800c022:	2800      	cmp	r0, #0
 800c024:	da67      	bge.n	800c0f6 <_dtoa_r+0x90e>
 800c026:	9b00      	ldr	r3, [sp, #0]
 800c028:	3b01      	subs	r3, #1
 800c02a:	ee18 1a10 	vmov	r1, s16
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	220a      	movs	r2, #10
 800c032:	2300      	movs	r3, #0
 800c034:	4620      	mov	r0, r4
 800c036:	f000 ffe5 	bl	800d004 <__multadd>
 800c03a:	9b08      	ldr	r3, [sp, #32]
 800c03c:	ee08 0a10 	vmov	s16, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	f000 81b1 	beq.w	800c3a8 <_dtoa_r+0xbc0>
 800c046:	2300      	movs	r3, #0
 800c048:	4639      	mov	r1, r7
 800c04a:	220a      	movs	r2, #10
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 ffd9 	bl	800d004 <__multadd>
 800c052:	9b02      	ldr	r3, [sp, #8]
 800c054:	2b00      	cmp	r3, #0
 800c056:	4607      	mov	r7, r0
 800c058:	f300 808e 	bgt.w	800c178 <_dtoa_r+0x990>
 800c05c:	9b06      	ldr	r3, [sp, #24]
 800c05e:	2b02      	cmp	r3, #2
 800c060:	dc51      	bgt.n	800c106 <_dtoa_r+0x91e>
 800c062:	e089      	b.n	800c178 <_dtoa_r+0x990>
 800c064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c066:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c06a:	e74b      	b.n	800bf04 <_dtoa_r+0x71c>
 800c06c:	9b03      	ldr	r3, [sp, #12]
 800c06e:	1e5e      	subs	r6, r3, #1
 800c070:	9b07      	ldr	r3, [sp, #28]
 800c072:	42b3      	cmp	r3, r6
 800c074:	bfbf      	itttt	lt
 800c076:	9b07      	ldrlt	r3, [sp, #28]
 800c078:	9607      	strlt	r6, [sp, #28]
 800c07a:	1af2      	sublt	r2, r6, r3
 800c07c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c07e:	bfb6      	itet	lt
 800c080:	189b      	addlt	r3, r3, r2
 800c082:	1b9e      	subge	r6, r3, r6
 800c084:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c086:	9b03      	ldr	r3, [sp, #12]
 800c088:	bfb8      	it	lt
 800c08a:	2600      	movlt	r6, #0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	bfb7      	itett	lt
 800c090:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c094:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c098:	1a9d      	sublt	r5, r3, r2
 800c09a:	2300      	movlt	r3, #0
 800c09c:	e734      	b.n	800bf08 <_dtoa_r+0x720>
 800c09e:	9e07      	ldr	r6, [sp, #28]
 800c0a0:	9d04      	ldr	r5, [sp, #16]
 800c0a2:	9f08      	ldr	r7, [sp, #32]
 800c0a4:	e73b      	b.n	800bf1e <_dtoa_r+0x736>
 800c0a6:	9a07      	ldr	r2, [sp, #28]
 800c0a8:	e767      	b.n	800bf7a <_dtoa_r+0x792>
 800c0aa:	9b06      	ldr	r3, [sp, #24]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	dc18      	bgt.n	800c0e2 <_dtoa_r+0x8fa>
 800c0b0:	f1ba 0f00 	cmp.w	sl, #0
 800c0b4:	d115      	bne.n	800c0e2 <_dtoa_r+0x8fa>
 800c0b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0ba:	b993      	cbnz	r3, 800c0e2 <_dtoa_r+0x8fa>
 800c0bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c0c0:	0d1b      	lsrs	r3, r3, #20
 800c0c2:	051b      	lsls	r3, r3, #20
 800c0c4:	b183      	cbz	r3, 800c0e8 <_dtoa_r+0x900>
 800c0c6:	9b04      	ldr	r3, [sp, #16]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	9304      	str	r3, [sp, #16]
 800c0cc:	9b05      	ldr	r3, [sp, #20]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	9305      	str	r3, [sp, #20]
 800c0d2:	f04f 0801 	mov.w	r8, #1
 800c0d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f47f af6a 	bne.w	800bfb2 <_dtoa_r+0x7ca>
 800c0de:	2001      	movs	r0, #1
 800c0e0:	e76f      	b.n	800bfc2 <_dtoa_r+0x7da>
 800c0e2:	f04f 0800 	mov.w	r8, #0
 800c0e6:	e7f6      	b.n	800c0d6 <_dtoa_r+0x8ee>
 800c0e8:	4698      	mov	r8, r3
 800c0ea:	e7f4      	b.n	800c0d6 <_dtoa_r+0x8ee>
 800c0ec:	f43f af7d 	beq.w	800bfea <_dtoa_r+0x802>
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	301c      	adds	r0, #28
 800c0f4:	e772      	b.n	800bfdc <_dtoa_r+0x7f4>
 800c0f6:	9b03      	ldr	r3, [sp, #12]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	dc37      	bgt.n	800c16c <_dtoa_r+0x984>
 800c0fc:	9b06      	ldr	r3, [sp, #24]
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	dd34      	ble.n	800c16c <_dtoa_r+0x984>
 800c102:	9b03      	ldr	r3, [sp, #12]
 800c104:	9302      	str	r3, [sp, #8]
 800c106:	9b02      	ldr	r3, [sp, #8]
 800c108:	b96b      	cbnz	r3, 800c126 <_dtoa_r+0x93e>
 800c10a:	4631      	mov	r1, r6
 800c10c:	2205      	movs	r2, #5
 800c10e:	4620      	mov	r0, r4
 800c110:	f000 ff78 	bl	800d004 <__multadd>
 800c114:	4601      	mov	r1, r0
 800c116:	4606      	mov	r6, r0
 800c118:	ee18 0a10 	vmov	r0, s16
 800c11c:	f001 f9dc 	bl	800d4d8 <__mcmp>
 800c120:	2800      	cmp	r0, #0
 800c122:	f73f adbb 	bgt.w	800bc9c <_dtoa_r+0x4b4>
 800c126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c128:	9d01      	ldr	r5, [sp, #4]
 800c12a:	43db      	mvns	r3, r3
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	f04f 0800 	mov.w	r8, #0
 800c132:	4631      	mov	r1, r6
 800c134:	4620      	mov	r0, r4
 800c136:	f000 ff43 	bl	800cfc0 <_Bfree>
 800c13a:	2f00      	cmp	r7, #0
 800c13c:	f43f aea4 	beq.w	800be88 <_dtoa_r+0x6a0>
 800c140:	f1b8 0f00 	cmp.w	r8, #0
 800c144:	d005      	beq.n	800c152 <_dtoa_r+0x96a>
 800c146:	45b8      	cmp	r8, r7
 800c148:	d003      	beq.n	800c152 <_dtoa_r+0x96a>
 800c14a:	4641      	mov	r1, r8
 800c14c:	4620      	mov	r0, r4
 800c14e:	f000 ff37 	bl	800cfc0 <_Bfree>
 800c152:	4639      	mov	r1, r7
 800c154:	4620      	mov	r0, r4
 800c156:	f000 ff33 	bl	800cfc0 <_Bfree>
 800c15a:	e695      	b.n	800be88 <_dtoa_r+0x6a0>
 800c15c:	2600      	movs	r6, #0
 800c15e:	4637      	mov	r7, r6
 800c160:	e7e1      	b.n	800c126 <_dtoa_r+0x93e>
 800c162:	9700      	str	r7, [sp, #0]
 800c164:	4637      	mov	r7, r6
 800c166:	e599      	b.n	800bc9c <_dtoa_r+0x4b4>
 800c168:	40240000 	.word	0x40240000
 800c16c:	9b08      	ldr	r3, [sp, #32]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f000 80ca 	beq.w	800c308 <_dtoa_r+0xb20>
 800c174:	9b03      	ldr	r3, [sp, #12]
 800c176:	9302      	str	r3, [sp, #8]
 800c178:	2d00      	cmp	r5, #0
 800c17a:	dd05      	ble.n	800c188 <_dtoa_r+0x9a0>
 800c17c:	4639      	mov	r1, r7
 800c17e:	462a      	mov	r2, r5
 800c180:	4620      	mov	r0, r4
 800c182:	f001 f939 	bl	800d3f8 <__lshift>
 800c186:	4607      	mov	r7, r0
 800c188:	f1b8 0f00 	cmp.w	r8, #0
 800c18c:	d05b      	beq.n	800c246 <_dtoa_r+0xa5e>
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	4620      	mov	r0, r4
 800c192:	f000 fed5 	bl	800cf40 <_Balloc>
 800c196:	4605      	mov	r5, r0
 800c198:	b928      	cbnz	r0, 800c1a6 <_dtoa_r+0x9be>
 800c19a:	4b87      	ldr	r3, [pc, #540]	; (800c3b8 <_dtoa_r+0xbd0>)
 800c19c:	4602      	mov	r2, r0
 800c19e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1a2:	f7ff bb3b 	b.w	800b81c <_dtoa_r+0x34>
 800c1a6:	693a      	ldr	r2, [r7, #16]
 800c1a8:	3202      	adds	r2, #2
 800c1aa:	0092      	lsls	r2, r2, #2
 800c1ac:	f107 010c 	add.w	r1, r7, #12
 800c1b0:	300c      	adds	r0, #12
 800c1b2:	f7fd fc4b 	bl	8009a4c <memcpy>
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f001 f91c 	bl	800d3f8 <__lshift>
 800c1c0:	9b01      	ldr	r3, [sp, #4]
 800c1c2:	f103 0901 	add.w	r9, r3, #1
 800c1c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	9305      	str	r3, [sp, #20]
 800c1ce:	f00a 0301 	and.w	r3, sl, #1
 800c1d2:	46b8      	mov	r8, r7
 800c1d4:	9304      	str	r3, [sp, #16]
 800c1d6:	4607      	mov	r7, r0
 800c1d8:	4631      	mov	r1, r6
 800c1da:	ee18 0a10 	vmov	r0, s16
 800c1de:	f7ff fa75 	bl	800b6cc <quorem>
 800c1e2:	4641      	mov	r1, r8
 800c1e4:	9002      	str	r0, [sp, #8]
 800c1e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c1ea:	ee18 0a10 	vmov	r0, s16
 800c1ee:	f001 f973 	bl	800d4d8 <__mcmp>
 800c1f2:	463a      	mov	r2, r7
 800c1f4:	9003      	str	r0, [sp, #12]
 800c1f6:	4631      	mov	r1, r6
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	f001 f989 	bl	800d510 <__mdiff>
 800c1fe:	68c2      	ldr	r2, [r0, #12]
 800c200:	f109 3bff 	add.w	fp, r9, #4294967295
 800c204:	4605      	mov	r5, r0
 800c206:	bb02      	cbnz	r2, 800c24a <_dtoa_r+0xa62>
 800c208:	4601      	mov	r1, r0
 800c20a:	ee18 0a10 	vmov	r0, s16
 800c20e:	f001 f963 	bl	800d4d8 <__mcmp>
 800c212:	4602      	mov	r2, r0
 800c214:	4629      	mov	r1, r5
 800c216:	4620      	mov	r0, r4
 800c218:	9207      	str	r2, [sp, #28]
 800c21a:	f000 fed1 	bl	800cfc0 <_Bfree>
 800c21e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c222:	ea43 0102 	orr.w	r1, r3, r2
 800c226:	9b04      	ldr	r3, [sp, #16]
 800c228:	430b      	orrs	r3, r1
 800c22a:	464d      	mov	r5, r9
 800c22c:	d10f      	bne.n	800c24e <_dtoa_r+0xa66>
 800c22e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c232:	d02a      	beq.n	800c28a <_dtoa_r+0xaa2>
 800c234:	9b03      	ldr	r3, [sp, #12]
 800c236:	2b00      	cmp	r3, #0
 800c238:	dd02      	ble.n	800c240 <_dtoa_r+0xa58>
 800c23a:	9b02      	ldr	r3, [sp, #8]
 800c23c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c240:	f88b a000 	strb.w	sl, [fp]
 800c244:	e775      	b.n	800c132 <_dtoa_r+0x94a>
 800c246:	4638      	mov	r0, r7
 800c248:	e7ba      	b.n	800c1c0 <_dtoa_r+0x9d8>
 800c24a:	2201      	movs	r2, #1
 800c24c:	e7e2      	b.n	800c214 <_dtoa_r+0xa2c>
 800c24e:	9b03      	ldr	r3, [sp, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	db04      	blt.n	800c25e <_dtoa_r+0xa76>
 800c254:	9906      	ldr	r1, [sp, #24]
 800c256:	430b      	orrs	r3, r1
 800c258:	9904      	ldr	r1, [sp, #16]
 800c25a:	430b      	orrs	r3, r1
 800c25c:	d122      	bne.n	800c2a4 <_dtoa_r+0xabc>
 800c25e:	2a00      	cmp	r2, #0
 800c260:	ddee      	ble.n	800c240 <_dtoa_r+0xa58>
 800c262:	ee18 1a10 	vmov	r1, s16
 800c266:	2201      	movs	r2, #1
 800c268:	4620      	mov	r0, r4
 800c26a:	f001 f8c5 	bl	800d3f8 <__lshift>
 800c26e:	4631      	mov	r1, r6
 800c270:	ee08 0a10 	vmov	s16, r0
 800c274:	f001 f930 	bl	800d4d8 <__mcmp>
 800c278:	2800      	cmp	r0, #0
 800c27a:	dc03      	bgt.n	800c284 <_dtoa_r+0xa9c>
 800c27c:	d1e0      	bne.n	800c240 <_dtoa_r+0xa58>
 800c27e:	f01a 0f01 	tst.w	sl, #1
 800c282:	d0dd      	beq.n	800c240 <_dtoa_r+0xa58>
 800c284:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c288:	d1d7      	bne.n	800c23a <_dtoa_r+0xa52>
 800c28a:	2339      	movs	r3, #57	; 0x39
 800c28c:	f88b 3000 	strb.w	r3, [fp]
 800c290:	462b      	mov	r3, r5
 800c292:	461d      	mov	r5, r3
 800c294:	3b01      	subs	r3, #1
 800c296:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c29a:	2a39      	cmp	r2, #57	; 0x39
 800c29c:	d071      	beq.n	800c382 <_dtoa_r+0xb9a>
 800c29e:	3201      	adds	r2, #1
 800c2a0:	701a      	strb	r2, [r3, #0]
 800c2a2:	e746      	b.n	800c132 <_dtoa_r+0x94a>
 800c2a4:	2a00      	cmp	r2, #0
 800c2a6:	dd07      	ble.n	800c2b8 <_dtoa_r+0xad0>
 800c2a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2ac:	d0ed      	beq.n	800c28a <_dtoa_r+0xaa2>
 800c2ae:	f10a 0301 	add.w	r3, sl, #1
 800c2b2:	f88b 3000 	strb.w	r3, [fp]
 800c2b6:	e73c      	b.n	800c132 <_dtoa_r+0x94a>
 800c2b8:	9b05      	ldr	r3, [sp, #20]
 800c2ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c2be:	4599      	cmp	r9, r3
 800c2c0:	d047      	beq.n	800c352 <_dtoa_r+0xb6a>
 800c2c2:	ee18 1a10 	vmov	r1, s16
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	220a      	movs	r2, #10
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f000 fe9a 	bl	800d004 <__multadd>
 800c2d0:	45b8      	cmp	r8, r7
 800c2d2:	ee08 0a10 	vmov	s16, r0
 800c2d6:	f04f 0300 	mov.w	r3, #0
 800c2da:	f04f 020a 	mov.w	r2, #10
 800c2de:	4641      	mov	r1, r8
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	d106      	bne.n	800c2f2 <_dtoa_r+0xb0a>
 800c2e4:	f000 fe8e 	bl	800d004 <__multadd>
 800c2e8:	4680      	mov	r8, r0
 800c2ea:	4607      	mov	r7, r0
 800c2ec:	f109 0901 	add.w	r9, r9, #1
 800c2f0:	e772      	b.n	800c1d8 <_dtoa_r+0x9f0>
 800c2f2:	f000 fe87 	bl	800d004 <__multadd>
 800c2f6:	4639      	mov	r1, r7
 800c2f8:	4680      	mov	r8, r0
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	220a      	movs	r2, #10
 800c2fe:	4620      	mov	r0, r4
 800c300:	f000 fe80 	bl	800d004 <__multadd>
 800c304:	4607      	mov	r7, r0
 800c306:	e7f1      	b.n	800c2ec <_dtoa_r+0xb04>
 800c308:	9b03      	ldr	r3, [sp, #12]
 800c30a:	9302      	str	r3, [sp, #8]
 800c30c:	9d01      	ldr	r5, [sp, #4]
 800c30e:	ee18 0a10 	vmov	r0, s16
 800c312:	4631      	mov	r1, r6
 800c314:	f7ff f9da 	bl	800b6cc <quorem>
 800c318:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c31c:	9b01      	ldr	r3, [sp, #4]
 800c31e:	f805 ab01 	strb.w	sl, [r5], #1
 800c322:	1aea      	subs	r2, r5, r3
 800c324:	9b02      	ldr	r3, [sp, #8]
 800c326:	4293      	cmp	r3, r2
 800c328:	dd09      	ble.n	800c33e <_dtoa_r+0xb56>
 800c32a:	ee18 1a10 	vmov	r1, s16
 800c32e:	2300      	movs	r3, #0
 800c330:	220a      	movs	r2, #10
 800c332:	4620      	mov	r0, r4
 800c334:	f000 fe66 	bl	800d004 <__multadd>
 800c338:	ee08 0a10 	vmov	s16, r0
 800c33c:	e7e7      	b.n	800c30e <_dtoa_r+0xb26>
 800c33e:	9b02      	ldr	r3, [sp, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	bfc8      	it	gt
 800c344:	461d      	movgt	r5, r3
 800c346:	9b01      	ldr	r3, [sp, #4]
 800c348:	bfd8      	it	le
 800c34a:	2501      	movle	r5, #1
 800c34c:	441d      	add	r5, r3
 800c34e:	f04f 0800 	mov.w	r8, #0
 800c352:	ee18 1a10 	vmov	r1, s16
 800c356:	2201      	movs	r2, #1
 800c358:	4620      	mov	r0, r4
 800c35a:	f001 f84d 	bl	800d3f8 <__lshift>
 800c35e:	4631      	mov	r1, r6
 800c360:	ee08 0a10 	vmov	s16, r0
 800c364:	f001 f8b8 	bl	800d4d8 <__mcmp>
 800c368:	2800      	cmp	r0, #0
 800c36a:	dc91      	bgt.n	800c290 <_dtoa_r+0xaa8>
 800c36c:	d102      	bne.n	800c374 <_dtoa_r+0xb8c>
 800c36e:	f01a 0f01 	tst.w	sl, #1
 800c372:	d18d      	bne.n	800c290 <_dtoa_r+0xaa8>
 800c374:	462b      	mov	r3, r5
 800c376:	461d      	mov	r5, r3
 800c378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c37c:	2a30      	cmp	r2, #48	; 0x30
 800c37e:	d0fa      	beq.n	800c376 <_dtoa_r+0xb8e>
 800c380:	e6d7      	b.n	800c132 <_dtoa_r+0x94a>
 800c382:	9a01      	ldr	r2, [sp, #4]
 800c384:	429a      	cmp	r2, r3
 800c386:	d184      	bne.n	800c292 <_dtoa_r+0xaaa>
 800c388:	9b00      	ldr	r3, [sp, #0]
 800c38a:	3301      	adds	r3, #1
 800c38c:	9300      	str	r3, [sp, #0]
 800c38e:	2331      	movs	r3, #49	; 0x31
 800c390:	7013      	strb	r3, [r2, #0]
 800c392:	e6ce      	b.n	800c132 <_dtoa_r+0x94a>
 800c394:	4b09      	ldr	r3, [pc, #36]	; (800c3bc <_dtoa_r+0xbd4>)
 800c396:	f7ff ba95 	b.w	800b8c4 <_dtoa_r+0xdc>
 800c39a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f47f aa6e 	bne.w	800b87e <_dtoa_r+0x96>
 800c3a2:	4b07      	ldr	r3, [pc, #28]	; (800c3c0 <_dtoa_r+0xbd8>)
 800c3a4:	f7ff ba8e 	b.w	800b8c4 <_dtoa_r+0xdc>
 800c3a8:	9b02      	ldr	r3, [sp, #8]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	dcae      	bgt.n	800c30c <_dtoa_r+0xb24>
 800c3ae:	9b06      	ldr	r3, [sp, #24]
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	f73f aea8 	bgt.w	800c106 <_dtoa_r+0x91e>
 800c3b6:	e7a9      	b.n	800c30c <_dtoa_r+0xb24>
 800c3b8:	0800e74c 	.word	0x0800e74c
 800c3bc:	0800e510 	.word	0x0800e510
 800c3c0:	0800e6cd 	.word	0x0800e6cd

0800c3c4 <__sflush_r>:
 800c3c4:	898a      	ldrh	r2, [r1, #12]
 800c3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ca:	4605      	mov	r5, r0
 800c3cc:	0710      	lsls	r0, r2, #28
 800c3ce:	460c      	mov	r4, r1
 800c3d0:	d458      	bmi.n	800c484 <__sflush_r+0xc0>
 800c3d2:	684b      	ldr	r3, [r1, #4]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	dc05      	bgt.n	800c3e4 <__sflush_r+0x20>
 800c3d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	dc02      	bgt.n	800c3e4 <__sflush_r+0x20>
 800c3de:	2000      	movs	r0, #0
 800c3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3e6:	2e00      	cmp	r6, #0
 800c3e8:	d0f9      	beq.n	800c3de <__sflush_r+0x1a>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3f0:	682f      	ldr	r7, [r5, #0]
 800c3f2:	602b      	str	r3, [r5, #0]
 800c3f4:	d032      	beq.n	800c45c <__sflush_r+0x98>
 800c3f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3f8:	89a3      	ldrh	r3, [r4, #12]
 800c3fa:	075a      	lsls	r2, r3, #29
 800c3fc:	d505      	bpl.n	800c40a <__sflush_r+0x46>
 800c3fe:	6863      	ldr	r3, [r4, #4]
 800c400:	1ac0      	subs	r0, r0, r3
 800c402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c404:	b10b      	cbz	r3, 800c40a <__sflush_r+0x46>
 800c406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c408:	1ac0      	subs	r0, r0, r3
 800c40a:	2300      	movs	r3, #0
 800c40c:	4602      	mov	r2, r0
 800c40e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c410:	6a21      	ldr	r1, [r4, #32]
 800c412:	4628      	mov	r0, r5
 800c414:	47b0      	blx	r6
 800c416:	1c43      	adds	r3, r0, #1
 800c418:	89a3      	ldrh	r3, [r4, #12]
 800c41a:	d106      	bne.n	800c42a <__sflush_r+0x66>
 800c41c:	6829      	ldr	r1, [r5, #0]
 800c41e:	291d      	cmp	r1, #29
 800c420:	d82c      	bhi.n	800c47c <__sflush_r+0xb8>
 800c422:	4a2a      	ldr	r2, [pc, #168]	; (800c4cc <__sflush_r+0x108>)
 800c424:	40ca      	lsrs	r2, r1
 800c426:	07d6      	lsls	r6, r2, #31
 800c428:	d528      	bpl.n	800c47c <__sflush_r+0xb8>
 800c42a:	2200      	movs	r2, #0
 800c42c:	6062      	str	r2, [r4, #4]
 800c42e:	04d9      	lsls	r1, r3, #19
 800c430:	6922      	ldr	r2, [r4, #16]
 800c432:	6022      	str	r2, [r4, #0]
 800c434:	d504      	bpl.n	800c440 <__sflush_r+0x7c>
 800c436:	1c42      	adds	r2, r0, #1
 800c438:	d101      	bne.n	800c43e <__sflush_r+0x7a>
 800c43a:	682b      	ldr	r3, [r5, #0]
 800c43c:	b903      	cbnz	r3, 800c440 <__sflush_r+0x7c>
 800c43e:	6560      	str	r0, [r4, #84]	; 0x54
 800c440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c442:	602f      	str	r7, [r5, #0]
 800c444:	2900      	cmp	r1, #0
 800c446:	d0ca      	beq.n	800c3de <__sflush_r+0x1a>
 800c448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c44c:	4299      	cmp	r1, r3
 800c44e:	d002      	beq.n	800c456 <__sflush_r+0x92>
 800c450:	4628      	mov	r0, r5
 800c452:	f001 fa4d 	bl	800d8f0 <_free_r>
 800c456:	2000      	movs	r0, #0
 800c458:	6360      	str	r0, [r4, #52]	; 0x34
 800c45a:	e7c1      	b.n	800c3e0 <__sflush_r+0x1c>
 800c45c:	6a21      	ldr	r1, [r4, #32]
 800c45e:	2301      	movs	r3, #1
 800c460:	4628      	mov	r0, r5
 800c462:	47b0      	blx	r6
 800c464:	1c41      	adds	r1, r0, #1
 800c466:	d1c7      	bne.n	800c3f8 <__sflush_r+0x34>
 800c468:	682b      	ldr	r3, [r5, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d0c4      	beq.n	800c3f8 <__sflush_r+0x34>
 800c46e:	2b1d      	cmp	r3, #29
 800c470:	d001      	beq.n	800c476 <__sflush_r+0xb2>
 800c472:	2b16      	cmp	r3, #22
 800c474:	d101      	bne.n	800c47a <__sflush_r+0xb6>
 800c476:	602f      	str	r7, [r5, #0]
 800c478:	e7b1      	b.n	800c3de <__sflush_r+0x1a>
 800c47a:	89a3      	ldrh	r3, [r4, #12]
 800c47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c480:	81a3      	strh	r3, [r4, #12]
 800c482:	e7ad      	b.n	800c3e0 <__sflush_r+0x1c>
 800c484:	690f      	ldr	r7, [r1, #16]
 800c486:	2f00      	cmp	r7, #0
 800c488:	d0a9      	beq.n	800c3de <__sflush_r+0x1a>
 800c48a:	0793      	lsls	r3, r2, #30
 800c48c:	680e      	ldr	r6, [r1, #0]
 800c48e:	bf08      	it	eq
 800c490:	694b      	ldreq	r3, [r1, #20]
 800c492:	600f      	str	r7, [r1, #0]
 800c494:	bf18      	it	ne
 800c496:	2300      	movne	r3, #0
 800c498:	eba6 0807 	sub.w	r8, r6, r7
 800c49c:	608b      	str	r3, [r1, #8]
 800c49e:	f1b8 0f00 	cmp.w	r8, #0
 800c4a2:	dd9c      	ble.n	800c3de <__sflush_r+0x1a>
 800c4a4:	6a21      	ldr	r1, [r4, #32]
 800c4a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4a8:	4643      	mov	r3, r8
 800c4aa:	463a      	mov	r2, r7
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	47b0      	blx	r6
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	dc06      	bgt.n	800c4c2 <__sflush_r+0xfe>
 800c4b4:	89a3      	ldrh	r3, [r4, #12]
 800c4b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4ba:	81a3      	strh	r3, [r4, #12]
 800c4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c0:	e78e      	b.n	800c3e0 <__sflush_r+0x1c>
 800c4c2:	4407      	add	r7, r0
 800c4c4:	eba8 0800 	sub.w	r8, r8, r0
 800c4c8:	e7e9      	b.n	800c49e <__sflush_r+0xda>
 800c4ca:	bf00      	nop
 800c4cc:	20400001 	.word	0x20400001

0800c4d0 <_fflush_r>:
 800c4d0:	b538      	push	{r3, r4, r5, lr}
 800c4d2:	690b      	ldr	r3, [r1, #16]
 800c4d4:	4605      	mov	r5, r0
 800c4d6:	460c      	mov	r4, r1
 800c4d8:	b913      	cbnz	r3, 800c4e0 <_fflush_r+0x10>
 800c4da:	2500      	movs	r5, #0
 800c4dc:	4628      	mov	r0, r5
 800c4de:	bd38      	pop	{r3, r4, r5, pc}
 800c4e0:	b118      	cbz	r0, 800c4ea <_fflush_r+0x1a>
 800c4e2:	6983      	ldr	r3, [r0, #24]
 800c4e4:	b90b      	cbnz	r3, 800c4ea <_fflush_r+0x1a>
 800c4e6:	f000 f887 	bl	800c5f8 <__sinit>
 800c4ea:	4b14      	ldr	r3, [pc, #80]	; (800c53c <_fflush_r+0x6c>)
 800c4ec:	429c      	cmp	r4, r3
 800c4ee:	d11b      	bne.n	800c528 <_fflush_r+0x58>
 800c4f0:	686c      	ldr	r4, [r5, #4]
 800c4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d0ef      	beq.n	800c4da <_fflush_r+0xa>
 800c4fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4fc:	07d0      	lsls	r0, r2, #31
 800c4fe:	d404      	bmi.n	800c50a <_fflush_r+0x3a>
 800c500:	0599      	lsls	r1, r3, #22
 800c502:	d402      	bmi.n	800c50a <_fflush_r+0x3a>
 800c504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c506:	f000 fc9a 	bl	800ce3e <__retarget_lock_acquire_recursive>
 800c50a:	4628      	mov	r0, r5
 800c50c:	4621      	mov	r1, r4
 800c50e:	f7ff ff59 	bl	800c3c4 <__sflush_r>
 800c512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c514:	07da      	lsls	r2, r3, #31
 800c516:	4605      	mov	r5, r0
 800c518:	d4e0      	bmi.n	800c4dc <_fflush_r+0xc>
 800c51a:	89a3      	ldrh	r3, [r4, #12]
 800c51c:	059b      	lsls	r3, r3, #22
 800c51e:	d4dd      	bmi.n	800c4dc <_fflush_r+0xc>
 800c520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c522:	f000 fc8d 	bl	800ce40 <__retarget_lock_release_recursive>
 800c526:	e7d9      	b.n	800c4dc <_fflush_r+0xc>
 800c528:	4b05      	ldr	r3, [pc, #20]	; (800c540 <_fflush_r+0x70>)
 800c52a:	429c      	cmp	r4, r3
 800c52c:	d101      	bne.n	800c532 <_fflush_r+0x62>
 800c52e:	68ac      	ldr	r4, [r5, #8]
 800c530:	e7df      	b.n	800c4f2 <_fflush_r+0x22>
 800c532:	4b04      	ldr	r3, [pc, #16]	; (800c544 <_fflush_r+0x74>)
 800c534:	429c      	cmp	r4, r3
 800c536:	bf08      	it	eq
 800c538:	68ec      	ldreq	r4, [r5, #12]
 800c53a:	e7da      	b.n	800c4f2 <_fflush_r+0x22>
 800c53c:	0800e780 	.word	0x0800e780
 800c540:	0800e7a0 	.word	0x0800e7a0
 800c544:	0800e760 	.word	0x0800e760

0800c548 <std>:
 800c548:	2300      	movs	r3, #0
 800c54a:	b510      	push	{r4, lr}
 800c54c:	4604      	mov	r4, r0
 800c54e:	e9c0 3300 	strd	r3, r3, [r0]
 800c552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c556:	6083      	str	r3, [r0, #8]
 800c558:	8181      	strh	r1, [r0, #12]
 800c55a:	6643      	str	r3, [r0, #100]	; 0x64
 800c55c:	81c2      	strh	r2, [r0, #14]
 800c55e:	6183      	str	r3, [r0, #24]
 800c560:	4619      	mov	r1, r3
 800c562:	2208      	movs	r2, #8
 800c564:	305c      	adds	r0, #92	; 0x5c
 800c566:	f7fd fa7f 	bl	8009a68 <memset>
 800c56a:	4b05      	ldr	r3, [pc, #20]	; (800c580 <std+0x38>)
 800c56c:	6263      	str	r3, [r4, #36]	; 0x24
 800c56e:	4b05      	ldr	r3, [pc, #20]	; (800c584 <std+0x3c>)
 800c570:	62a3      	str	r3, [r4, #40]	; 0x28
 800c572:	4b05      	ldr	r3, [pc, #20]	; (800c588 <std+0x40>)
 800c574:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c576:	4b05      	ldr	r3, [pc, #20]	; (800c58c <std+0x44>)
 800c578:	6224      	str	r4, [r4, #32]
 800c57a:	6323      	str	r3, [r4, #48]	; 0x30
 800c57c:	bd10      	pop	{r4, pc}
 800c57e:	bf00      	nop
 800c580:	0800e051 	.word	0x0800e051
 800c584:	0800e073 	.word	0x0800e073
 800c588:	0800e0ab 	.word	0x0800e0ab
 800c58c:	0800e0cf 	.word	0x0800e0cf

0800c590 <_cleanup_r>:
 800c590:	4901      	ldr	r1, [pc, #4]	; (800c598 <_cleanup_r+0x8>)
 800c592:	f000 b8c1 	b.w	800c718 <_fwalk_reent>
 800c596:	bf00      	nop
 800c598:	0800c4d1 	.word	0x0800c4d1

0800c59c <__sfmoreglue>:
 800c59c:	b570      	push	{r4, r5, r6, lr}
 800c59e:	2268      	movs	r2, #104	; 0x68
 800c5a0:	1e4d      	subs	r5, r1, #1
 800c5a2:	4355      	muls	r5, r2
 800c5a4:	460e      	mov	r6, r1
 800c5a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c5aa:	f001 fa0d 	bl	800d9c8 <_malloc_r>
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	b140      	cbz	r0, 800c5c4 <__sfmoreglue+0x28>
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	e9c0 1600 	strd	r1, r6, [r0]
 800c5b8:	300c      	adds	r0, #12
 800c5ba:	60a0      	str	r0, [r4, #8]
 800c5bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c5c0:	f7fd fa52 	bl	8009a68 <memset>
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	bd70      	pop	{r4, r5, r6, pc}

0800c5c8 <__sfp_lock_acquire>:
 800c5c8:	4801      	ldr	r0, [pc, #4]	; (800c5d0 <__sfp_lock_acquire+0x8>)
 800c5ca:	f000 bc38 	b.w	800ce3e <__retarget_lock_acquire_recursive>
 800c5ce:	bf00      	nop
 800c5d0:	2000098d 	.word	0x2000098d

0800c5d4 <__sfp_lock_release>:
 800c5d4:	4801      	ldr	r0, [pc, #4]	; (800c5dc <__sfp_lock_release+0x8>)
 800c5d6:	f000 bc33 	b.w	800ce40 <__retarget_lock_release_recursive>
 800c5da:	bf00      	nop
 800c5dc:	2000098d 	.word	0x2000098d

0800c5e0 <__sinit_lock_acquire>:
 800c5e0:	4801      	ldr	r0, [pc, #4]	; (800c5e8 <__sinit_lock_acquire+0x8>)
 800c5e2:	f000 bc2c 	b.w	800ce3e <__retarget_lock_acquire_recursive>
 800c5e6:	bf00      	nop
 800c5e8:	2000098e 	.word	0x2000098e

0800c5ec <__sinit_lock_release>:
 800c5ec:	4801      	ldr	r0, [pc, #4]	; (800c5f4 <__sinit_lock_release+0x8>)
 800c5ee:	f000 bc27 	b.w	800ce40 <__retarget_lock_release_recursive>
 800c5f2:	bf00      	nop
 800c5f4:	2000098e 	.word	0x2000098e

0800c5f8 <__sinit>:
 800c5f8:	b510      	push	{r4, lr}
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	f7ff fff0 	bl	800c5e0 <__sinit_lock_acquire>
 800c600:	69a3      	ldr	r3, [r4, #24]
 800c602:	b11b      	cbz	r3, 800c60c <__sinit+0x14>
 800c604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c608:	f7ff bff0 	b.w	800c5ec <__sinit_lock_release>
 800c60c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c610:	6523      	str	r3, [r4, #80]	; 0x50
 800c612:	4b13      	ldr	r3, [pc, #76]	; (800c660 <__sinit+0x68>)
 800c614:	4a13      	ldr	r2, [pc, #76]	; (800c664 <__sinit+0x6c>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	62a2      	str	r2, [r4, #40]	; 0x28
 800c61a:	42a3      	cmp	r3, r4
 800c61c:	bf04      	itt	eq
 800c61e:	2301      	moveq	r3, #1
 800c620:	61a3      	streq	r3, [r4, #24]
 800c622:	4620      	mov	r0, r4
 800c624:	f000 f820 	bl	800c668 <__sfp>
 800c628:	6060      	str	r0, [r4, #4]
 800c62a:	4620      	mov	r0, r4
 800c62c:	f000 f81c 	bl	800c668 <__sfp>
 800c630:	60a0      	str	r0, [r4, #8]
 800c632:	4620      	mov	r0, r4
 800c634:	f000 f818 	bl	800c668 <__sfp>
 800c638:	2200      	movs	r2, #0
 800c63a:	60e0      	str	r0, [r4, #12]
 800c63c:	2104      	movs	r1, #4
 800c63e:	6860      	ldr	r0, [r4, #4]
 800c640:	f7ff ff82 	bl	800c548 <std>
 800c644:	68a0      	ldr	r0, [r4, #8]
 800c646:	2201      	movs	r2, #1
 800c648:	2109      	movs	r1, #9
 800c64a:	f7ff ff7d 	bl	800c548 <std>
 800c64e:	68e0      	ldr	r0, [r4, #12]
 800c650:	2202      	movs	r2, #2
 800c652:	2112      	movs	r1, #18
 800c654:	f7ff ff78 	bl	800c548 <std>
 800c658:	2301      	movs	r3, #1
 800c65a:	61a3      	str	r3, [r4, #24]
 800c65c:	e7d2      	b.n	800c604 <__sinit+0xc>
 800c65e:	bf00      	nop
 800c660:	0800e4fc 	.word	0x0800e4fc
 800c664:	0800c591 	.word	0x0800c591

0800c668 <__sfp>:
 800c668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66a:	4607      	mov	r7, r0
 800c66c:	f7ff ffac 	bl	800c5c8 <__sfp_lock_acquire>
 800c670:	4b1e      	ldr	r3, [pc, #120]	; (800c6ec <__sfp+0x84>)
 800c672:	681e      	ldr	r6, [r3, #0]
 800c674:	69b3      	ldr	r3, [r6, #24]
 800c676:	b913      	cbnz	r3, 800c67e <__sfp+0x16>
 800c678:	4630      	mov	r0, r6
 800c67a:	f7ff ffbd 	bl	800c5f8 <__sinit>
 800c67e:	3648      	adds	r6, #72	; 0x48
 800c680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c684:	3b01      	subs	r3, #1
 800c686:	d503      	bpl.n	800c690 <__sfp+0x28>
 800c688:	6833      	ldr	r3, [r6, #0]
 800c68a:	b30b      	cbz	r3, 800c6d0 <__sfp+0x68>
 800c68c:	6836      	ldr	r6, [r6, #0]
 800c68e:	e7f7      	b.n	800c680 <__sfp+0x18>
 800c690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c694:	b9d5      	cbnz	r5, 800c6cc <__sfp+0x64>
 800c696:	4b16      	ldr	r3, [pc, #88]	; (800c6f0 <__sfp+0x88>)
 800c698:	60e3      	str	r3, [r4, #12]
 800c69a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c69e:	6665      	str	r5, [r4, #100]	; 0x64
 800c6a0:	f000 fbcc 	bl	800ce3c <__retarget_lock_init_recursive>
 800c6a4:	f7ff ff96 	bl	800c5d4 <__sfp_lock_release>
 800c6a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c6ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c6b0:	6025      	str	r5, [r4, #0]
 800c6b2:	61a5      	str	r5, [r4, #24]
 800c6b4:	2208      	movs	r2, #8
 800c6b6:	4629      	mov	r1, r5
 800c6b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c6bc:	f7fd f9d4 	bl	8009a68 <memset>
 800c6c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c6c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6cc:	3468      	adds	r4, #104	; 0x68
 800c6ce:	e7d9      	b.n	800c684 <__sfp+0x1c>
 800c6d0:	2104      	movs	r1, #4
 800c6d2:	4638      	mov	r0, r7
 800c6d4:	f7ff ff62 	bl	800c59c <__sfmoreglue>
 800c6d8:	4604      	mov	r4, r0
 800c6da:	6030      	str	r0, [r6, #0]
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	d1d5      	bne.n	800c68c <__sfp+0x24>
 800c6e0:	f7ff ff78 	bl	800c5d4 <__sfp_lock_release>
 800c6e4:	230c      	movs	r3, #12
 800c6e6:	603b      	str	r3, [r7, #0]
 800c6e8:	e7ee      	b.n	800c6c8 <__sfp+0x60>
 800c6ea:	bf00      	nop
 800c6ec:	0800e4fc 	.word	0x0800e4fc
 800c6f0:	ffff0001 	.word	0xffff0001

0800c6f4 <fiprintf>:
 800c6f4:	b40e      	push	{r1, r2, r3}
 800c6f6:	b503      	push	{r0, r1, lr}
 800c6f8:	4601      	mov	r1, r0
 800c6fa:	ab03      	add	r3, sp, #12
 800c6fc:	4805      	ldr	r0, [pc, #20]	; (800c714 <fiprintf+0x20>)
 800c6fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c702:	6800      	ldr	r0, [r0, #0]
 800c704:	9301      	str	r3, [sp, #4]
 800c706:	f001 fb59 	bl	800ddbc <_vfiprintf_r>
 800c70a:	b002      	add	sp, #8
 800c70c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c710:	b003      	add	sp, #12
 800c712:	4770      	bx	lr
 800c714:	20000024 	.word	0x20000024

0800c718 <_fwalk_reent>:
 800c718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c71c:	4606      	mov	r6, r0
 800c71e:	4688      	mov	r8, r1
 800c720:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c724:	2700      	movs	r7, #0
 800c726:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c72a:	f1b9 0901 	subs.w	r9, r9, #1
 800c72e:	d505      	bpl.n	800c73c <_fwalk_reent+0x24>
 800c730:	6824      	ldr	r4, [r4, #0]
 800c732:	2c00      	cmp	r4, #0
 800c734:	d1f7      	bne.n	800c726 <_fwalk_reent+0xe>
 800c736:	4638      	mov	r0, r7
 800c738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c73c:	89ab      	ldrh	r3, [r5, #12]
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d907      	bls.n	800c752 <_fwalk_reent+0x3a>
 800c742:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c746:	3301      	adds	r3, #1
 800c748:	d003      	beq.n	800c752 <_fwalk_reent+0x3a>
 800c74a:	4629      	mov	r1, r5
 800c74c:	4630      	mov	r0, r6
 800c74e:	47c0      	blx	r8
 800c750:	4307      	orrs	r7, r0
 800c752:	3568      	adds	r5, #104	; 0x68
 800c754:	e7e9      	b.n	800c72a <_fwalk_reent+0x12>

0800c756 <rshift>:
 800c756:	6903      	ldr	r3, [r0, #16]
 800c758:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c75c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c760:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c764:	f100 0414 	add.w	r4, r0, #20
 800c768:	dd45      	ble.n	800c7f6 <rshift+0xa0>
 800c76a:	f011 011f 	ands.w	r1, r1, #31
 800c76e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c772:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c776:	d10c      	bne.n	800c792 <rshift+0x3c>
 800c778:	f100 0710 	add.w	r7, r0, #16
 800c77c:	4629      	mov	r1, r5
 800c77e:	42b1      	cmp	r1, r6
 800c780:	d334      	bcc.n	800c7ec <rshift+0x96>
 800c782:	1a9b      	subs	r3, r3, r2
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	1eea      	subs	r2, r5, #3
 800c788:	4296      	cmp	r6, r2
 800c78a:	bf38      	it	cc
 800c78c:	2300      	movcc	r3, #0
 800c78e:	4423      	add	r3, r4
 800c790:	e015      	b.n	800c7be <rshift+0x68>
 800c792:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c796:	f1c1 0820 	rsb	r8, r1, #32
 800c79a:	40cf      	lsrs	r7, r1
 800c79c:	f105 0e04 	add.w	lr, r5, #4
 800c7a0:	46a1      	mov	r9, r4
 800c7a2:	4576      	cmp	r6, lr
 800c7a4:	46f4      	mov	ip, lr
 800c7a6:	d815      	bhi.n	800c7d4 <rshift+0x7e>
 800c7a8:	1a9a      	subs	r2, r3, r2
 800c7aa:	0092      	lsls	r2, r2, #2
 800c7ac:	3a04      	subs	r2, #4
 800c7ae:	3501      	adds	r5, #1
 800c7b0:	42ae      	cmp	r6, r5
 800c7b2:	bf38      	it	cc
 800c7b4:	2200      	movcc	r2, #0
 800c7b6:	18a3      	adds	r3, r4, r2
 800c7b8:	50a7      	str	r7, [r4, r2]
 800c7ba:	b107      	cbz	r7, 800c7be <rshift+0x68>
 800c7bc:	3304      	adds	r3, #4
 800c7be:	1b1a      	subs	r2, r3, r4
 800c7c0:	42a3      	cmp	r3, r4
 800c7c2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c7c6:	bf08      	it	eq
 800c7c8:	2300      	moveq	r3, #0
 800c7ca:	6102      	str	r2, [r0, #16]
 800c7cc:	bf08      	it	eq
 800c7ce:	6143      	streq	r3, [r0, #20]
 800c7d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7d4:	f8dc c000 	ldr.w	ip, [ip]
 800c7d8:	fa0c fc08 	lsl.w	ip, ip, r8
 800c7dc:	ea4c 0707 	orr.w	r7, ip, r7
 800c7e0:	f849 7b04 	str.w	r7, [r9], #4
 800c7e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c7e8:	40cf      	lsrs	r7, r1
 800c7ea:	e7da      	b.n	800c7a2 <rshift+0x4c>
 800c7ec:	f851 cb04 	ldr.w	ip, [r1], #4
 800c7f0:	f847 cf04 	str.w	ip, [r7, #4]!
 800c7f4:	e7c3      	b.n	800c77e <rshift+0x28>
 800c7f6:	4623      	mov	r3, r4
 800c7f8:	e7e1      	b.n	800c7be <rshift+0x68>

0800c7fa <__hexdig_fun>:
 800c7fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c7fe:	2b09      	cmp	r3, #9
 800c800:	d802      	bhi.n	800c808 <__hexdig_fun+0xe>
 800c802:	3820      	subs	r0, #32
 800c804:	b2c0      	uxtb	r0, r0
 800c806:	4770      	bx	lr
 800c808:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c80c:	2b05      	cmp	r3, #5
 800c80e:	d801      	bhi.n	800c814 <__hexdig_fun+0x1a>
 800c810:	3847      	subs	r0, #71	; 0x47
 800c812:	e7f7      	b.n	800c804 <__hexdig_fun+0xa>
 800c814:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c818:	2b05      	cmp	r3, #5
 800c81a:	d801      	bhi.n	800c820 <__hexdig_fun+0x26>
 800c81c:	3827      	subs	r0, #39	; 0x27
 800c81e:	e7f1      	b.n	800c804 <__hexdig_fun+0xa>
 800c820:	2000      	movs	r0, #0
 800c822:	4770      	bx	lr

0800c824 <__gethex>:
 800c824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c828:	ed2d 8b02 	vpush	{d8}
 800c82c:	b089      	sub	sp, #36	; 0x24
 800c82e:	ee08 0a10 	vmov	s16, r0
 800c832:	9304      	str	r3, [sp, #16]
 800c834:	4bb4      	ldr	r3, [pc, #720]	; (800cb08 <__gethex+0x2e4>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	9301      	str	r3, [sp, #4]
 800c83a:	4618      	mov	r0, r3
 800c83c:	468b      	mov	fp, r1
 800c83e:	4690      	mov	r8, r2
 800c840:	f7f3 fcc6 	bl	80001d0 <strlen>
 800c844:	9b01      	ldr	r3, [sp, #4]
 800c846:	f8db 2000 	ldr.w	r2, [fp]
 800c84a:	4403      	add	r3, r0
 800c84c:	4682      	mov	sl, r0
 800c84e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c852:	9305      	str	r3, [sp, #20]
 800c854:	1c93      	adds	r3, r2, #2
 800c856:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c85a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c85e:	32fe      	adds	r2, #254	; 0xfe
 800c860:	18d1      	adds	r1, r2, r3
 800c862:	461f      	mov	r7, r3
 800c864:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c868:	9100      	str	r1, [sp, #0]
 800c86a:	2830      	cmp	r0, #48	; 0x30
 800c86c:	d0f8      	beq.n	800c860 <__gethex+0x3c>
 800c86e:	f7ff ffc4 	bl	800c7fa <__hexdig_fun>
 800c872:	4604      	mov	r4, r0
 800c874:	2800      	cmp	r0, #0
 800c876:	d13a      	bne.n	800c8ee <__gethex+0xca>
 800c878:	9901      	ldr	r1, [sp, #4]
 800c87a:	4652      	mov	r2, sl
 800c87c:	4638      	mov	r0, r7
 800c87e:	f001 fc2a 	bl	800e0d6 <strncmp>
 800c882:	4605      	mov	r5, r0
 800c884:	2800      	cmp	r0, #0
 800c886:	d168      	bne.n	800c95a <__gethex+0x136>
 800c888:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c88c:	eb07 060a 	add.w	r6, r7, sl
 800c890:	f7ff ffb3 	bl	800c7fa <__hexdig_fun>
 800c894:	2800      	cmp	r0, #0
 800c896:	d062      	beq.n	800c95e <__gethex+0x13a>
 800c898:	4633      	mov	r3, r6
 800c89a:	7818      	ldrb	r0, [r3, #0]
 800c89c:	2830      	cmp	r0, #48	; 0x30
 800c89e:	461f      	mov	r7, r3
 800c8a0:	f103 0301 	add.w	r3, r3, #1
 800c8a4:	d0f9      	beq.n	800c89a <__gethex+0x76>
 800c8a6:	f7ff ffa8 	bl	800c7fa <__hexdig_fun>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	fab0 f480 	clz	r4, r0
 800c8b0:	0964      	lsrs	r4, r4, #5
 800c8b2:	4635      	mov	r5, r6
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	463a      	mov	r2, r7
 800c8b8:	4616      	mov	r6, r2
 800c8ba:	3201      	adds	r2, #1
 800c8bc:	7830      	ldrb	r0, [r6, #0]
 800c8be:	f7ff ff9c 	bl	800c7fa <__hexdig_fun>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d1f8      	bne.n	800c8b8 <__gethex+0x94>
 800c8c6:	9901      	ldr	r1, [sp, #4]
 800c8c8:	4652      	mov	r2, sl
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	f001 fc03 	bl	800e0d6 <strncmp>
 800c8d0:	b980      	cbnz	r0, 800c8f4 <__gethex+0xd0>
 800c8d2:	b94d      	cbnz	r5, 800c8e8 <__gethex+0xc4>
 800c8d4:	eb06 050a 	add.w	r5, r6, sl
 800c8d8:	462a      	mov	r2, r5
 800c8da:	4616      	mov	r6, r2
 800c8dc:	3201      	adds	r2, #1
 800c8de:	7830      	ldrb	r0, [r6, #0]
 800c8e0:	f7ff ff8b 	bl	800c7fa <__hexdig_fun>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	d1f8      	bne.n	800c8da <__gethex+0xb6>
 800c8e8:	1bad      	subs	r5, r5, r6
 800c8ea:	00ad      	lsls	r5, r5, #2
 800c8ec:	e004      	b.n	800c8f8 <__gethex+0xd4>
 800c8ee:	2400      	movs	r4, #0
 800c8f0:	4625      	mov	r5, r4
 800c8f2:	e7e0      	b.n	800c8b6 <__gethex+0x92>
 800c8f4:	2d00      	cmp	r5, #0
 800c8f6:	d1f7      	bne.n	800c8e8 <__gethex+0xc4>
 800c8f8:	7833      	ldrb	r3, [r6, #0]
 800c8fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c8fe:	2b50      	cmp	r3, #80	; 0x50
 800c900:	d13b      	bne.n	800c97a <__gethex+0x156>
 800c902:	7873      	ldrb	r3, [r6, #1]
 800c904:	2b2b      	cmp	r3, #43	; 0x2b
 800c906:	d02c      	beq.n	800c962 <__gethex+0x13e>
 800c908:	2b2d      	cmp	r3, #45	; 0x2d
 800c90a:	d02e      	beq.n	800c96a <__gethex+0x146>
 800c90c:	1c71      	adds	r1, r6, #1
 800c90e:	f04f 0900 	mov.w	r9, #0
 800c912:	7808      	ldrb	r0, [r1, #0]
 800c914:	f7ff ff71 	bl	800c7fa <__hexdig_fun>
 800c918:	1e43      	subs	r3, r0, #1
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	2b18      	cmp	r3, #24
 800c91e:	d82c      	bhi.n	800c97a <__gethex+0x156>
 800c920:	f1a0 0210 	sub.w	r2, r0, #16
 800c924:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c928:	f7ff ff67 	bl	800c7fa <__hexdig_fun>
 800c92c:	1e43      	subs	r3, r0, #1
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	2b18      	cmp	r3, #24
 800c932:	d91d      	bls.n	800c970 <__gethex+0x14c>
 800c934:	f1b9 0f00 	cmp.w	r9, #0
 800c938:	d000      	beq.n	800c93c <__gethex+0x118>
 800c93a:	4252      	negs	r2, r2
 800c93c:	4415      	add	r5, r2
 800c93e:	f8cb 1000 	str.w	r1, [fp]
 800c942:	b1e4      	cbz	r4, 800c97e <__gethex+0x15a>
 800c944:	9b00      	ldr	r3, [sp, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	bf14      	ite	ne
 800c94a:	2700      	movne	r7, #0
 800c94c:	2706      	moveq	r7, #6
 800c94e:	4638      	mov	r0, r7
 800c950:	b009      	add	sp, #36	; 0x24
 800c952:	ecbd 8b02 	vpop	{d8}
 800c956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c95a:	463e      	mov	r6, r7
 800c95c:	4625      	mov	r5, r4
 800c95e:	2401      	movs	r4, #1
 800c960:	e7ca      	b.n	800c8f8 <__gethex+0xd4>
 800c962:	f04f 0900 	mov.w	r9, #0
 800c966:	1cb1      	adds	r1, r6, #2
 800c968:	e7d3      	b.n	800c912 <__gethex+0xee>
 800c96a:	f04f 0901 	mov.w	r9, #1
 800c96e:	e7fa      	b.n	800c966 <__gethex+0x142>
 800c970:	230a      	movs	r3, #10
 800c972:	fb03 0202 	mla	r2, r3, r2, r0
 800c976:	3a10      	subs	r2, #16
 800c978:	e7d4      	b.n	800c924 <__gethex+0x100>
 800c97a:	4631      	mov	r1, r6
 800c97c:	e7df      	b.n	800c93e <__gethex+0x11a>
 800c97e:	1bf3      	subs	r3, r6, r7
 800c980:	3b01      	subs	r3, #1
 800c982:	4621      	mov	r1, r4
 800c984:	2b07      	cmp	r3, #7
 800c986:	dc0b      	bgt.n	800c9a0 <__gethex+0x17c>
 800c988:	ee18 0a10 	vmov	r0, s16
 800c98c:	f000 fad8 	bl	800cf40 <_Balloc>
 800c990:	4604      	mov	r4, r0
 800c992:	b940      	cbnz	r0, 800c9a6 <__gethex+0x182>
 800c994:	4b5d      	ldr	r3, [pc, #372]	; (800cb0c <__gethex+0x2e8>)
 800c996:	4602      	mov	r2, r0
 800c998:	21de      	movs	r1, #222	; 0xde
 800c99a:	485d      	ldr	r0, [pc, #372]	; (800cb10 <__gethex+0x2ec>)
 800c99c:	f7fe fe78 	bl	800b690 <__assert_func>
 800c9a0:	3101      	adds	r1, #1
 800c9a2:	105b      	asrs	r3, r3, #1
 800c9a4:	e7ee      	b.n	800c984 <__gethex+0x160>
 800c9a6:	f100 0914 	add.w	r9, r0, #20
 800c9aa:	f04f 0b00 	mov.w	fp, #0
 800c9ae:	f1ca 0301 	rsb	r3, sl, #1
 800c9b2:	f8cd 9008 	str.w	r9, [sp, #8]
 800c9b6:	f8cd b000 	str.w	fp, [sp]
 800c9ba:	9306      	str	r3, [sp, #24]
 800c9bc:	42b7      	cmp	r7, r6
 800c9be:	d340      	bcc.n	800ca42 <__gethex+0x21e>
 800c9c0:	9802      	ldr	r0, [sp, #8]
 800c9c2:	9b00      	ldr	r3, [sp, #0]
 800c9c4:	f840 3b04 	str.w	r3, [r0], #4
 800c9c8:	eba0 0009 	sub.w	r0, r0, r9
 800c9cc:	1080      	asrs	r0, r0, #2
 800c9ce:	0146      	lsls	r6, r0, #5
 800c9d0:	6120      	str	r0, [r4, #16]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f000 fba6 	bl	800d124 <__hi0bits>
 800c9d8:	1a30      	subs	r0, r6, r0
 800c9da:	f8d8 6000 	ldr.w	r6, [r8]
 800c9de:	42b0      	cmp	r0, r6
 800c9e0:	dd63      	ble.n	800caaa <__gethex+0x286>
 800c9e2:	1b87      	subs	r7, r0, r6
 800c9e4:	4639      	mov	r1, r7
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f000 ff4a 	bl	800d880 <__any_on>
 800c9ec:	4682      	mov	sl, r0
 800c9ee:	b1a8      	cbz	r0, 800ca1c <__gethex+0x1f8>
 800c9f0:	1e7b      	subs	r3, r7, #1
 800c9f2:	1159      	asrs	r1, r3, #5
 800c9f4:	f003 021f 	and.w	r2, r3, #31
 800c9f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c9fc:	f04f 0a01 	mov.w	sl, #1
 800ca00:	fa0a f202 	lsl.w	r2, sl, r2
 800ca04:	420a      	tst	r2, r1
 800ca06:	d009      	beq.n	800ca1c <__gethex+0x1f8>
 800ca08:	4553      	cmp	r3, sl
 800ca0a:	dd05      	ble.n	800ca18 <__gethex+0x1f4>
 800ca0c:	1eb9      	subs	r1, r7, #2
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f000 ff36 	bl	800d880 <__any_on>
 800ca14:	2800      	cmp	r0, #0
 800ca16:	d145      	bne.n	800caa4 <__gethex+0x280>
 800ca18:	f04f 0a02 	mov.w	sl, #2
 800ca1c:	4639      	mov	r1, r7
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f7ff fe99 	bl	800c756 <rshift>
 800ca24:	443d      	add	r5, r7
 800ca26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca2a:	42ab      	cmp	r3, r5
 800ca2c:	da4c      	bge.n	800cac8 <__gethex+0x2a4>
 800ca2e:	ee18 0a10 	vmov	r0, s16
 800ca32:	4621      	mov	r1, r4
 800ca34:	f000 fac4 	bl	800cfc0 <_Bfree>
 800ca38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	6013      	str	r3, [r2, #0]
 800ca3e:	27a3      	movs	r7, #163	; 0xa3
 800ca40:	e785      	b.n	800c94e <__gethex+0x12a>
 800ca42:	1e73      	subs	r3, r6, #1
 800ca44:	9a05      	ldr	r2, [sp, #20]
 800ca46:	9303      	str	r3, [sp, #12]
 800ca48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d019      	beq.n	800ca84 <__gethex+0x260>
 800ca50:	f1bb 0f20 	cmp.w	fp, #32
 800ca54:	d107      	bne.n	800ca66 <__gethex+0x242>
 800ca56:	9b02      	ldr	r3, [sp, #8]
 800ca58:	9a00      	ldr	r2, [sp, #0]
 800ca5a:	f843 2b04 	str.w	r2, [r3], #4
 800ca5e:	9302      	str	r3, [sp, #8]
 800ca60:	2300      	movs	r3, #0
 800ca62:	9300      	str	r3, [sp, #0]
 800ca64:	469b      	mov	fp, r3
 800ca66:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ca6a:	f7ff fec6 	bl	800c7fa <__hexdig_fun>
 800ca6e:	9b00      	ldr	r3, [sp, #0]
 800ca70:	f000 000f 	and.w	r0, r0, #15
 800ca74:	fa00 f00b 	lsl.w	r0, r0, fp
 800ca78:	4303      	orrs	r3, r0
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	f10b 0b04 	add.w	fp, fp, #4
 800ca80:	9b03      	ldr	r3, [sp, #12]
 800ca82:	e00d      	b.n	800caa0 <__gethex+0x27c>
 800ca84:	9b03      	ldr	r3, [sp, #12]
 800ca86:	9a06      	ldr	r2, [sp, #24]
 800ca88:	4413      	add	r3, r2
 800ca8a:	42bb      	cmp	r3, r7
 800ca8c:	d3e0      	bcc.n	800ca50 <__gethex+0x22c>
 800ca8e:	4618      	mov	r0, r3
 800ca90:	9901      	ldr	r1, [sp, #4]
 800ca92:	9307      	str	r3, [sp, #28]
 800ca94:	4652      	mov	r2, sl
 800ca96:	f001 fb1e 	bl	800e0d6 <strncmp>
 800ca9a:	9b07      	ldr	r3, [sp, #28]
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d1d7      	bne.n	800ca50 <__gethex+0x22c>
 800caa0:	461e      	mov	r6, r3
 800caa2:	e78b      	b.n	800c9bc <__gethex+0x198>
 800caa4:	f04f 0a03 	mov.w	sl, #3
 800caa8:	e7b8      	b.n	800ca1c <__gethex+0x1f8>
 800caaa:	da0a      	bge.n	800cac2 <__gethex+0x29e>
 800caac:	1a37      	subs	r7, r6, r0
 800caae:	4621      	mov	r1, r4
 800cab0:	ee18 0a10 	vmov	r0, s16
 800cab4:	463a      	mov	r2, r7
 800cab6:	f000 fc9f 	bl	800d3f8 <__lshift>
 800caba:	1bed      	subs	r5, r5, r7
 800cabc:	4604      	mov	r4, r0
 800cabe:	f100 0914 	add.w	r9, r0, #20
 800cac2:	f04f 0a00 	mov.w	sl, #0
 800cac6:	e7ae      	b.n	800ca26 <__gethex+0x202>
 800cac8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cacc:	42a8      	cmp	r0, r5
 800cace:	dd72      	ble.n	800cbb6 <__gethex+0x392>
 800cad0:	1b45      	subs	r5, r0, r5
 800cad2:	42ae      	cmp	r6, r5
 800cad4:	dc36      	bgt.n	800cb44 <__gethex+0x320>
 800cad6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d02a      	beq.n	800cb34 <__gethex+0x310>
 800cade:	2b03      	cmp	r3, #3
 800cae0:	d02c      	beq.n	800cb3c <__gethex+0x318>
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d11c      	bne.n	800cb20 <__gethex+0x2fc>
 800cae6:	42ae      	cmp	r6, r5
 800cae8:	d11a      	bne.n	800cb20 <__gethex+0x2fc>
 800caea:	2e01      	cmp	r6, #1
 800caec:	d112      	bne.n	800cb14 <__gethex+0x2f0>
 800caee:	9a04      	ldr	r2, [sp, #16]
 800caf0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800caf4:	6013      	str	r3, [r2, #0]
 800caf6:	2301      	movs	r3, #1
 800caf8:	6123      	str	r3, [r4, #16]
 800cafa:	f8c9 3000 	str.w	r3, [r9]
 800cafe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb00:	2762      	movs	r7, #98	; 0x62
 800cb02:	601c      	str	r4, [r3, #0]
 800cb04:	e723      	b.n	800c94e <__gethex+0x12a>
 800cb06:	bf00      	nop
 800cb08:	0800e828 	.word	0x0800e828
 800cb0c:	0800e74c 	.word	0x0800e74c
 800cb10:	0800e7c0 	.word	0x0800e7c0
 800cb14:	1e71      	subs	r1, r6, #1
 800cb16:	4620      	mov	r0, r4
 800cb18:	f000 feb2 	bl	800d880 <__any_on>
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	d1e6      	bne.n	800caee <__gethex+0x2ca>
 800cb20:	ee18 0a10 	vmov	r0, s16
 800cb24:	4621      	mov	r1, r4
 800cb26:	f000 fa4b 	bl	800cfc0 <_Bfree>
 800cb2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	6013      	str	r3, [r2, #0]
 800cb30:	2750      	movs	r7, #80	; 0x50
 800cb32:	e70c      	b.n	800c94e <__gethex+0x12a>
 800cb34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d1f2      	bne.n	800cb20 <__gethex+0x2fc>
 800cb3a:	e7d8      	b.n	800caee <__gethex+0x2ca>
 800cb3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1d5      	bne.n	800caee <__gethex+0x2ca>
 800cb42:	e7ed      	b.n	800cb20 <__gethex+0x2fc>
 800cb44:	1e6f      	subs	r7, r5, #1
 800cb46:	f1ba 0f00 	cmp.w	sl, #0
 800cb4a:	d131      	bne.n	800cbb0 <__gethex+0x38c>
 800cb4c:	b127      	cbz	r7, 800cb58 <__gethex+0x334>
 800cb4e:	4639      	mov	r1, r7
 800cb50:	4620      	mov	r0, r4
 800cb52:	f000 fe95 	bl	800d880 <__any_on>
 800cb56:	4682      	mov	sl, r0
 800cb58:	117b      	asrs	r3, r7, #5
 800cb5a:	2101      	movs	r1, #1
 800cb5c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cb60:	f007 071f 	and.w	r7, r7, #31
 800cb64:	fa01 f707 	lsl.w	r7, r1, r7
 800cb68:	421f      	tst	r7, r3
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	bf18      	it	ne
 800cb70:	f04a 0a02 	orrne.w	sl, sl, #2
 800cb74:	1b76      	subs	r6, r6, r5
 800cb76:	f7ff fdee 	bl	800c756 <rshift>
 800cb7a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cb7e:	2702      	movs	r7, #2
 800cb80:	f1ba 0f00 	cmp.w	sl, #0
 800cb84:	d048      	beq.n	800cc18 <__gethex+0x3f4>
 800cb86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb8a:	2b02      	cmp	r3, #2
 800cb8c:	d015      	beq.n	800cbba <__gethex+0x396>
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d017      	beq.n	800cbc2 <__gethex+0x39e>
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d109      	bne.n	800cbaa <__gethex+0x386>
 800cb96:	f01a 0f02 	tst.w	sl, #2
 800cb9a:	d006      	beq.n	800cbaa <__gethex+0x386>
 800cb9c:	f8d9 0000 	ldr.w	r0, [r9]
 800cba0:	ea4a 0a00 	orr.w	sl, sl, r0
 800cba4:	f01a 0f01 	tst.w	sl, #1
 800cba8:	d10e      	bne.n	800cbc8 <__gethex+0x3a4>
 800cbaa:	f047 0710 	orr.w	r7, r7, #16
 800cbae:	e033      	b.n	800cc18 <__gethex+0x3f4>
 800cbb0:	f04f 0a01 	mov.w	sl, #1
 800cbb4:	e7d0      	b.n	800cb58 <__gethex+0x334>
 800cbb6:	2701      	movs	r7, #1
 800cbb8:	e7e2      	b.n	800cb80 <__gethex+0x35c>
 800cbba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbbc:	f1c3 0301 	rsb	r3, r3, #1
 800cbc0:	9315      	str	r3, [sp, #84]	; 0x54
 800cbc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d0f0      	beq.n	800cbaa <__gethex+0x386>
 800cbc8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cbcc:	f104 0314 	add.w	r3, r4, #20
 800cbd0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cbd4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cbd8:	f04f 0c00 	mov.w	ip, #0
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbe2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cbe6:	d01c      	beq.n	800cc22 <__gethex+0x3fe>
 800cbe8:	3201      	adds	r2, #1
 800cbea:	6002      	str	r2, [r0, #0]
 800cbec:	2f02      	cmp	r7, #2
 800cbee:	f104 0314 	add.w	r3, r4, #20
 800cbf2:	d13f      	bne.n	800cc74 <__gethex+0x450>
 800cbf4:	f8d8 2000 	ldr.w	r2, [r8]
 800cbf8:	3a01      	subs	r2, #1
 800cbfa:	42b2      	cmp	r2, r6
 800cbfc:	d10a      	bne.n	800cc14 <__gethex+0x3f0>
 800cbfe:	1171      	asrs	r1, r6, #5
 800cc00:	2201      	movs	r2, #1
 800cc02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc06:	f006 061f 	and.w	r6, r6, #31
 800cc0a:	fa02 f606 	lsl.w	r6, r2, r6
 800cc0e:	421e      	tst	r6, r3
 800cc10:	bf18      	it	ne
 800cc12:	4617      	movne	r7, r2
 800cc14:	f047 0720 	orr.w	r7, r7, #32
 800cc18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc1a:	601c      	str	r4, [r3, #0]
 800cc1c:	9b04      	ldr	r3, [sp, #16]
 800cc1e:	601d      	str	r5, [r3, #0]
 800cc20:	e695      	b.n	800c94e <__gethex+0x12a>
 800cc22:	4299      	cmp	r1, r3
 800cc24:	f843 cc04 	str.w	ip, [r3, #-4]
 800cc28:	d8d8      	bhi.n	800cbdc <__gethex+0x3b8>
 800cc2a:	68a3      	ldr	r3, [r4, #8]
 800cc2c:	459b      	cmp	fp, r3
 800cc2e:	db19      	blt.n	800cc64 <__gethex+0x440>
 800cc30:	6861      	ldr	r1, [r4, #4]
 800cc32:	ee18 0a10 	vmov	r0, s16
 800cc36:	3101      	adds	r1, #1
 800cc38:	f000 f982 	bl	800cf40 <_Balloc>
 800cc3c:	4681      	mov	r9, r0
 800cc3e:	b918      	cbnz	r0, 800cc48 <__gethex+0x424>
 800cc40:	4b1a      	ldr	r3, [pc, #104]	; (800ccac <__gethex+0x488>)
 800cc42:	4602      	mov	r2, r0
 800cc44:	2184      	movs	r1, #132	; 0x84
 800cc46:	e6a8      	b.n	800c99a <__gethex+0x176>
 800cc48:	6922      	ldr	r2, [r4, #16]
 800cc4a:	3202      	adds	r2, #2
 800cc4c:	f104 010c 	add.w	r1, r4, #12
 800cc50:	0092      	lsls	r2, r2, #2
 800cc52:	300c      	adds	r0, #12
 800cc54:	f7fc fefa 	bl	8009a4c <memcpy>
 800cc58:	4621      	mov	r1, r4
 800cc5a:	ee18 0a10 	vmov	r0, s16
 800cc5e:	f000 f9af 	bl	800cfc0 <_Bfree>
 800cc62:	464c      	mov	r4, r9
 800cc64:	6923      	ldr	r3, [r4, #16]
 800cc66:	1c5a      	adds	r2, r3, #1
 800cc68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cc6c:	6122      	str	r2, [r4, #16]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	615a      	str	r2, [r3, #20]
 800cc72:	e7bb      	b.n	800cbec <__gethex+0x3c8>
 800cc74:	6922      	ldr	r2, [r4, #16]
 800cc76:	455a      	cmp	r2, fp
 800cc78:	dd0b      	ble.n	800cc92 <__gethex+0x46e>
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	f7ff fd6a 	bl	800c756 <rshift>
 800cc82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc86:	3501      	adds	r5, #1
 800cc88:	42ab      	cmp	r3, r5
 800cc8a:	f6ff aed0 	blt.w	800ca2e <__gethex+0x20a>
 800cc8e:	2701      	movs	r7, #1
 800cc90:	e7c0      	b.n	800cc14 <__gethex+0x3f0>
 800cc92:	f016 061f 	ands.w	r6, r6, #31
 800cc96:	d0fa      	beq.n	800cc8e <__gethex+0x46a>
 800cc98:	4453      	add	r3, sl
 800cc9a:	f1c6 0620 	rsb	r6, r6, #32
 800cc9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cca2:	f000 fa3f 	bl	800d124 <__hi0bits>
 800cca6:	42b0      	cmp	r0, r6
 800cca8:	dbe7      	blt.n	800cc7a <__gethex+0x456>
 800ccaa:	e7f0      	b.n	800cc8e <__gethex+0x46a>
 800ccac:	0800e74c 	.word	0x0800e74c

0800ccb0 <L_shift>:
 800ccb0:	f1c2 0208 	rsb	r2, r2, #8
 800ccb4:	0092      	lsls	r2, r2, #2
 800ccb6:	b570      	push	{r4, r5, r6, lr}
 800ccb8:	f1c2 0620 	rsb	r6, r2, #32
 800ccbc:	6843      	ldr	r3, [r0, #4]
 800ccbe:	6804      	ldr	r4, [r0, #0]
 800ccc0:	fa03 f506 	lsl.w	r5, r3, r6
 800ccc4:	432c      	orrs	r4, r5
 800ccc6:	40d3      	lsrs	r3, r2
 800ccc8:	6004      	str	r4, [r0, #0]
 800ccca:	f840 3f04 	str.w	r3, [r0, #4]!
 800ccce:	4288      	cmp	r0, r1
 800ccd0:	d3f4      	bcc.n	800ccbc <L_shift+0xc>
 800ccd2:	bd70      	pop	{r4, r5, r6, pc}

0800ccd4 <__match>:
 800ccd4:	b530      	push	{r4, r5, lr}
 800ccd6:	6803      	ldr	r3, [r0, #0]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccde:	b914      	cbnz	r4, 800cce6 <__match+0x12>
 800cce0:	6003      	str	r3, [r0, #0]
 800cce2:	2001      	movs	r0, #1
 800cce4:	bd30      	pop	{r4, r5, pc}
 800cce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ccee:	2d19      	cmp	r5, #25
 800ccf0:	bf98      	it	ls
 800ccf2:	3220      	addls	r2, #32
 800ccf4:	42a2      	cmp	r2, r4
 800ccf6:	d0f0      	beq.n	800ccda <__match+0x6>
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	e7f3      	b.n	800cce4 <__match+0x10>

0800ccfc <__hexnan>:
 800ccfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd00:	680b      	ldr	r3, [r1, #0]
 800cd02:	115e      	asrs	r6, r3, #5
 800cd04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd08:	f013 031f 	ands.w	r3, r3, #31
 800cd0c:	b087      	sub	sp, #28
 800cd0e:	bf18      	it	ne
 800cd10:	3604      	addne	r6, #4
 800cd12:	2500      	movs	r5, #0
 800cd14:	1f37      	subs	r7, r6, #4
 800cd16:	4690      	mov	r8, r2
 800cd18:	6802      	ldr	r2, [r0, #0]
 800cd1a:	9301      	str	r3, [sp, #4]
 800cd1c:	4682      	mov	sl, r0
 800cd1e:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd22:	46b9      	mov	r9, r7
 800cd24:	463c      	mov	r4, r7
 800cd26:	9502      	str	r5, [sp, #8]
 800cd28:	46ab      	mov	fp, r5
 800cd2a:	7851      	ldrb	r1, [r2, #1]
 800cd2c:	1c53      	adds	r3, r2, #1
 800cd2e:	9303      	str	r3, [sp, #12]
 800cd30:	b341      	cbz	r1, 800cd84 <__hexnan+0x88>
 800cd32:	4608      	mov	r0, r1
 800cd34:	9205      	str	r2, [sp, #20]
 800cd36:	9104      	str	r1, [sp, #16]
 800cd38:	f7ff fd5f 	bl	800c7fa <__hexdig_fun>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	d14f      	bne.n	800cde0 <__hexnan+0xe4>
 800cd40:	9904      	ldr	r1, [sp, #16]
 800cd42:	9a05      	ldr	r2, [sp, #20]
 800cd44:	2920      	cmp	r1, #32
 800cd46:	d818      	bhi.n	800cd7a <__hexnan+0x7e>
 800cd48:	9b02      	ldr	r3, [sp, #8]
 800cd4a:	459b      	cmp	fp, r3
 800cd4c:	dd13      	ble.n	800cd76 <__hexnan+0x7a>
 800cd4e:	454c      	cmp	r4, r9
 800cd50:	d206      	bcs.n	800cd60 <__hexnan+0x64>
 800cd52:	2d07      	cmp	r5, #7
 800cd54:	dc04      	bgt.n	800cd60 <__hexnan+0x64>
 800cd56:	462a      	mov	r2, r5
 800cd58:	4649      	mov	r1, r9
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f7ff ffa8 	bl	800ccb0 <L_shift>
 800cd60:	4544      	cmp	r4, r8
 800cd62:	d950      	bls.n	800ce06 <__hexnan+0x10a>
 800cd64:	2300      	movs	r3, #0
 800cd66:	f1a4 0904 	sub.w	r9, r4, #4
 800cd6a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd6e:	f8cd b008 	str.w	fp, [sp, #8]
 800cd72:	464c      	mov	r4, r9
 800cd74:	461d      	mov	r5, r3
 800cd76:	9a03      	ldr	r2, [sp, #12]
 800cd78:	e7d7      	b.n	800cd2a <__hexnan+0x2e>
 800cd7a:	2929      	cmp	r1, #41	; 0x29
 800cd7c:	d156      	bne.n	800ce2c <__hexnan+0x130>
 800cd7e:	3202      	adds	r2, #2
 800cd80:	f8ca 2000 	str.w	r2, [sl]
 800cd84:	f1bb 0f00 	cmp.w	fp, #0
 800cd88:	d050      	beq.n	800ce2c <__hexnan+0x130>
 800cd8a:	454c      	cmp	r4, r9
 800cd8c:	d206      	bcs.n	800cd9c <__hexnan+0xa0>
 800cd8e:	2d07      	cmp	r5, #7
 800cd90:	dc04      	bgt.n	800cd9c <__hexnan+0xa0>
 800cd92:	462a      	mov	r2, r5
 800cd94:	4649      	mov	r1, r9
 800cd96:	4620      	mov	r0, r4
 800cd98:	f7ff ff8a 	bl	800ccb0 <L_shift>
 800cd9c:	4544      	cmp	r4, r8
 800cd9e:	d934      	bls.n	800ce0a <__hexnan+0x10e>
 800cda0:	f1a8 0204 	sub.w	r2, r8, #4
 800cda4:	4623      	mov	r3, r4
 800cda6:	f853 1b04 	ldr.w	r1, [r3], #4
 800cdaa:	f842 1f04 	str.w	r1, [r2, #4]!
 800cdae:	429f      	cmp	r7, r3
 800cdb0:	d2f9      	bcs.n	800cda6 <__hexnan+0xaa>
 800cdb2:	1b3b      	subs	r3, r7, r4
 800cdb4:	f023 0303 	bic.w	r3, r3, #3
 800cdb8:	3304      	adds	r3, #4
 800cdba:	3401      	adds	r4, #1
 800cdbc:	3e03      	subs	r6, #3
 800cdbe:	42b4      	cmp	r4, r6
 800cdc0:	bf88      	it	hi
 800cdc2:	2304      	movhi	r3, #4
 800cdc4:	4443      	add	r3, r8
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f843 2b04 	str.w	r2, [r3], #4
 800cdcc:	429f      	cmp	r7, r3
 800cdce:	d2fb      	bcs.n	800cdc8 <__hexnan+0xcc>
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	b91b      	cbnz	r3, 800cddc <__hexnan+0xe0>
 800cdd4:	4547      	cmp	r7, r8
 800cdd6:	d127      	bne.n	800ce28 <__hexnan+0x12c>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	603b      	str	r3, [r7, #0]
 800cddc:	2005      	movs	r0, #5
 800cdde:	e026      	b.n	800ce2e <__hexnan+0x132>
 800cde0:	3501      	adds	r5, #1
 800cde2:	2d08      	cmp	r5, #8
 800cde4:	f10b 0b01 	add.w	fp, fp, #1
 800cde8:	dd06      	ble.n	800cdf8 <__hexnan+0xfc>
 800cdea:	4544      	cmp	r4, r8
 800cdec:	d9c3      	bls.n	800cd76 <__hexnan+0x7a>
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800cdf4:	2501      	movs	r5, #1
 800cdf6:	3c04      	subs	r4, #4
 800cdf8:	6822      	ldr	r2, [r4, #0]
 800cdfa:	f000 000f 	and.w	r0, r0, #15
 800cdfe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ce02:	6022      	str	r2, [r4, #0]
 800ce04:	e7b7      	b.n	800cd76 <__hexnan+0x7a>
 800ce06:	2508      	movs	r5, #8
 800ce08:	e7b5      	b.n	800cd76 <__hexnan+0x7a>
 800ce0a:	9b01      	ldr	r3, [sp, #4]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d0df      	beq.n	800cdd0 <__hexnan+0xd4>
 800ce10:	f04f 32ff 	mov.w	r2, #4294967295
 800ce14:	f1c3 0320 	rsb	r3, r3, #32
 800ce18:	fa22 f303 	lsr.w	r3, r2, r3
 800ce1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ce20:	401a      	ands	r2, r3
 800ce22:	f846 2c04 	str.w	r2, [r6, #-4]
 800ce26:	e7d3      	b.n	800cdd0 <__hexnan+0xd4>
 800ce28:	3f04      	subs	r7, #4
 800ce2a:	e7d1      	b.n	800cdd0 <__hexnan+0xd4>
 800ce2c:	2004      	movs	r0, #4
 800ce2e:	b007      	add	sp, #28
 800ce30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce34 <_localeconv_r>:
 800ce34:	4800      	ldr	r0, [pc, #0]	; (800ce38 <_localeconv_r+0x4>)
 800ce36:	4770      	bx	lr
 800ce38:	2000017c 	.word	0x2000017c

0800ce3c <__retarget_lock_init_recursive>:
 800ce3c:	4770      	bx	lr

0800ce3e <__retarget_lock_acquire_recursive>:
 800ce3e:	4770      	bx	lr

0800ce40 <__retarget_lock_release_recursive>:
 800ce40:	4770      	bx	lr

0800ce42 <__swhatbuf_r>:
 800ce42:	b570      	push	{r4, r5, r6, lr}
 800ce44:	460e      	mov	r6, r1
 800ce46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce4a:	2900      	cmp	r1, #0
 800ce4c:	b096      	sub	sp, #88	; 0x58
 800ce4e:	4614      	mov	r4, r2
 800ce50:	461d      	mov	r5, r3
 800ce52:	da08      	bge.n	800ce66 <__swhatbuf_r+0x24>
 800ce54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	602a      	str	r2, [r5, #0]
 800ce5c:	061a      	lsls	r2, r3, #24
 800ce5e:	d410      	bmi.n	800ce82 <__swhatbuf_r+0x40>
 800ce60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce64:	e00e      	b.n	800ce84 <__swhatbuf_r+0x42>
 800ce66:	466a      	mov	r2, sp
 800ce68:	f001 f980 	bl	800e16c <_fstat_r>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	dbf1      	blt.n	800ce54 <__swhatbuf_r+0x12>
 800ce70:	9a01      	ldr	r2, [sp, #4]
 800ce72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce7a:	425a      	negs	r2, r3
 800ce7c:	415a      	adcs	r2, r3
 800ce7e:	602a      	str	r2, [r5, #0]
 800ce80:	e7ee      	b.n	800ce60 <__swhatbuf_r+0x1e>
 800ce82:	2340      	movs	r3, #64	; 0x40
 800ce84:	2000      	movs	r0, #0
 800ce86:	6023      	str	r3, [r4, #0]
 800ce88:	b016      	add	sp, #88	; 0x58
 800ce8a:	bd70      	pop	{r4, r5, r6, pc}

0800ce8c <__smakebuf_r>:
 800ce8c:	898b      	ldrh	r3, [r1, #12]
 800ce8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce90:	079d      	lsls	r5, r3, #30
 800ce92:	4606      	mov	r6, r0
 800ce94:	460c      	mov	r4, r1
 800ce96:	d507      	bpl.n	800cea8 <__smakebuf_r+0x1c>
 800ce98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce9c:	6023      	str	r3, [r4, #0]
 800ce9e:	6123      	str	r3, [r4, #16]
 800cea0:	2301      	movs	r3, #1
 800cea2:	6163      	str	r3, [r4, #20]
 800cea4:	b002      	add	sp, #8
 800cea6:	bd70      	pop	{r4, r5, r6, pc}
 800cea8:	ab01      	add	r3, sp, #4
 800ceaa:	466a      	mov	r2, sp
 800ceac:	f7ff ffc9 	bl	800ce42 <__swhatbuf_r>
 800ceb0:	9900      	ldr	r1, [sp, #0]
 800ceb2:	4605      	mov	r5, r0
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	f000 fd87 	bl	800d9c8 <_malloc_r>
 800ceba:	b948      	cbnz	r0, 800ced0 <__smakebuf_r+0x44>
 800cebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cec0:	059a      	lsls	r2, r3, #22
 800cec2:	d4ef      	bmi.n	800cea4 <__smakebuf_r+0x18>
 800cec4:	f023 0303 	bic.w	r3, r3, #3
 800cec8:	f043 0302 	orr.w	r3, r3, #2
 800cecc:	81a3      	strh	r3, [r4, #12]
 800cece:	e7e3      	b.n	800ce98 <__smakebuf_r+0xc>
 800ced0:	4b0d      	ldr	r3, [pc, #52]	; (800cf08 <__smakebuf_r+0x7c>)
 800ced2:	62b3      	str	r3, [r6, #40]	; 0x28
 800ced4:	89a3      	ldrh	r3, [r4, #12]
 800ced6:	6020      	str	r0, [r4, #0]
 800ced8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cedc:	81a3      	strh	r3, [r4, #12]
 800cede:	9b00      	ldr	r3, [sp, #0]
 800cee0:	6163      	str	r3, [r4, #20]
 800cee2:	9b01      	ldr	r3, [sp, #4]
 800cee4:	6120      	str	r0, [r4, #16]
 800cee6:	b15b      	cbz	r3, 800cf00 <__smakebuf_r+0x74>
 800cee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ceec:	4630      	mov	r0, r6
 800ceee:	f001 f94f 	bl	800e190 <_isatty_r>
 800cef2:	b128      	cbz	r0, 800cf00 <__smakebuf_r+0x74>
 800cef4:	89a3      	ldrh	r3, [r4, #12]
 800cef6:	f023 0303 	bic.w	r3, r3, #3
 800cefa:	f043 0301 	orr.w	r3, r3, #1
 800cefe:	81a3      	strh	r3, [r4, #12]
 800cf00:	89a0      	ldrh	r0, [r4, #12]
 800cf02:	4305      	orrs	r5, r0
 800cf04:	81a5      	strh	r5, [r4, #12]
 800cf06:	e7cd      	b.n	800cea4 <__smakebuf_r+0x18>
 800cf08:	0800c591 	.word	0x0800c591

0800cf0c <malloc>:
 800cf0c:	4b02      	ldr	r3, [pc, #8]	; (800cf18 <malloc+0xc>)
 800cf0e:	4601      	mov	r1, r0
 800cf10:	6818      	ldr	r0, [r3, #0]
 800cf12:	f000 bd59 	b.w	800d9c8 <_malloc_r>
 800cf16:	bf00      	nop
 800cf18:	20000024 	.word	0x20000024

0800cf1c <__ascii_mbtowc>:
 800cf1c:	b082      	sub	sp, #8
 800cf1e:	b901      	cbnz	r1, 800cf22 <__ascii_mbtowc+0x6>
 800cf20:	a901      	add	r1, sp, #4
 800cf22:	b142      	cbz	r2, 800cf36 <__ascii_mbtowc+0x1a>
 800cf24:	b14b      	cbz	r3, 800cf3a <__ascii_mbtowc+0x1e>
 800cf26:	7813      	ldrb	r3, [r2, #0]
 800cf28:	600b      	str	r3, [r1, #0]
 800cf2a:	7812      	ldrb	r2, [r2, #0]
 800cf2c:	1e10      	subs	r0, r2, #0
 800cf2e:	bf18      	it	ne
 800cf30:	2001      	movne	r0, #1
 800cf32:	b002      	add	sp, #8
 800cf34:	4770      	bx	lr
 800cf36:	4610      	mov	r0, r2
 800cf38:	e7fb      	b.n	800cf32 <__ascii_mbtowc+0x16>
 800cf3a:	f06f 0001 	mvn.w	r0, #1
 800cf3e:	e7f8      	b.n	800cf32 <__ascii_mbtowc+0x16>

0800cf40 <_Balloc>:
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf44:	4604      	mov	r4, r0
 800cf46:	460d      	mov	r5, r1
 800cf48:	b976      	cbnz	r6, 800cf68 <_Balloc+0x28>
 800cf4a:	2010      	movs	r0, #16
 800cf4c:	f7ff ffde 	bl	800cf0c <malloc>
 800cf50:	4602      	mov	r2, r0
 800cf52:	6260      	str	r0, [r4, #36]	; 0x24
 800cf54:	b920      	cbnz	r0, 800cf60 <_Balloc+0x20>
 800cf56:	4b18      	ldr	r3, [pc, #96]	; (800cfb8 <_Balloc+0x78>)
 800cf58:	4818      	ldr	r0, [pc, #96]	; (800cfbc <_Balloc+0x7c>)
 800cf5a:	2166      	movs	r1, #102	; 0x66
 800cf5c:	f7fe fb98 	bl	800b690 <__assert_func>
 800cf60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf64:	6006      	str	r6, [r0, #0]
 800cf66:	60c6      	str	r6, [r0, #12]
 800cf68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf6a:	68f3      	ldr	r3, [r6, #12]
 800cf6c:	b183      	cbz	r3, 800cf90 <_Balloc+0x50>
 800cf6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf76:	b9b8      	cbnz	r0, 800cfa8 <_Balloc+0x68>
 800cf78:	2101      	movs	r1, #1
 800cf7a:	fa01 f605 	lsl.w	r6, r1, r5
 800cf7e:	1d72      	adds	r2, r6, #5
 800cf80:	0092      	lsls	r2, r2, #2
 800cf82:	4620      	mov	r0, r4
 800cf84:	f000 fc9d 	bl	800d8c2 <_calloc_r>
 800cf88:	b160      	cbz	r0, 800cfa4 <_Balloc+0x64>
 800cf8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf8e:	e00e      	b.n	800cfae <_Balloc+0x6e>
 800cf90:	2221      	movs	r2, #33	; 0x21
 800cf92:	2104      	movs	r1, #4
 800cf94:	4620      	mov	r0, r4
 800cf96:	f000 fc94 	bl	800d8c2 <_calloc_r>
 800cf9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf9c:	60f0      	str	r0, [r6, #12]
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d1e4      	bne.n	800cf6e <_Balloc+0x2e>
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	bd70      	pop	{r4, r5, r6, pc}
 800cfa8:	6802      	ldr	r2, [r0, #0]
 800cfaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cfae:	2300      	movs	r3, #0
 800cfb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cfb4:	e7f7      	b.n	800cfa6 <_Balloc+0x66>
 800cfb6:	bf00      	nop
 800cfb8:	0800e6da 	.word	0x0800e6da
 800cfbc:	0800e83c 	.word	0x0800e83c

0800cfc0 <_Bfree>:
 800cfc0:	b570      	push	{r4, r5, r6, lr}
 800cfc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cfc4:	4605      	mov	r5, r0
 800cfc6:	460c      	mov	r4, r1
 800cfc8:	b976      	cbnz	r6, 800cfe8 <_Bfree+0x28>
 800cfca:	2010      	movs	r0, #16
 800cfcc:	f7ff ff9e 	bl	800cf0c <malloc>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	6268      	str	r0, [r5, #36]	; 0x24
 800cfd4:	b920      	cbnz	r0, 800cfe0 <_Bfree+0x20>
 800cfd6:	4b09      	ldr	r3, [pc, #36]	; (800cffc <_Bfree+0x3c>)
 800cfd8:	4809      	ldr	r0, [pc, #36]	; (800d000 <_Bfree+0x40>)
 800cfda:	218a      	movs	r1, #138	; 0x8a
 800cfdc:	f7fe fb58 	bl	800b690 <__assert_func>
 800cfe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfe4:	6006      	str	r6, [r0, #0]
 800cfe6:	60c6      	str	r6, [r0, #12]
 800cfe8:	b13c      	cbz	r4, 800cffa <_Bfree+0x3a>
 800cfea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cfec:	6862      	ldr	r2, [r4, #4]
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cff4:	6021      	str	r1, [r4, #0]
 800cff6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cffa:	bd70      	pop	{r4, r5, r6, pc}
 800cffc:	0800e6da 	.word	0x0800e6da
 800d000:	0800e83c 	.word	0x0800e83c

0800d004 <__multadd>:
 800d004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d008:	690d      	ldr	r5, [r1, #16]
 800d00a:	4607      	mov	r7, r0
 800d00c:	460c      	mov	r4, r1
 800d00e:	461e      	mov	r6, r3
 800d010:	f101 0c14 	add.w	ip, r1, #20
 800d014:	2000      	movs	r0, #0
 800d016:	f8dc 3000 	ldr.w	r3, [ip]
 800d01a:	b299      	uxth	r1, r3
 800d01c:	fb02 6101 	mla	r1, r2, r1, r6
 800d020:	0c1e      	lsrs	r6, r3, #16
 800d022:	0c0b      	lsrs	r3, r1, #16
 800d024:	fb02 3306 	mla	r3, r2, r6, r3
 800d028:	b289      	uxth	r1, r1
 800d02a:	3001      	adds	r0, #1
 800d02c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d030:	4285      	cmp	r5, r0
 800d032:	f84c 1b04 	str.w	r1, [ip], #4
 800d036:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d03a:	dcec      	bgt.n	800d016 <__multadd+0x12>
 800d03c:	b30e      	cbz	r6, 800d082 <__multadd+0x7e>
 800d03e:	68a3      	ldr	r3, [r4, #8]
 800d040:	42ab      	cmp	r3, r5
 800d042:	dc19      	bgt.n	800d078 <__multadd+0x74>
 800d044:	6861      	ldr	r1, [r4, #4]
 800d046:	4638      	mov	r0, r7
 800d048:	3101      	adds	r1, #1
 800d04a:	f7ff ff79 	bl	800cf40 <_Balloc>
 800d04e:	4680      	mov	r8, r0
 800d050:	b928      	cbnz	r0, 800d05e <__multadd+0x5a>
 800d052:	4602      	mov	r2, r0
 800d054:	4b0c      	ldr	r3, [pc, #48]	; (800d088 <__multadd+0x84>)
 800d056:	480d      	ldr	r0, [pc, #52]	; (800d08c <__multadd+0x88>)
 800d058:	21b5      	movs	r1, #181	; 0xb5
 800d05a:	f7fe fb19 	bl	800b690 <__assert_func>
 800d05e:	6922      	ldr	r2, [r4, #16]
 800d060:	3202      	adds	r2, #2
 800d062:	f104 010c 	add.w	r1, r4, #12
 800d066:	0092      	lsls	r2, r2, #2
 800d068:	300c      	adds	r0, #12
 800d06a:	f7fc fcef 	bl	8009a4c <memcpy>
 800d06e:	4621      	mov	r1, r4
 800d070:	4638      	mov	r0, r7
 800d072:	f7ff ffa5 	bl	800cfc0 <_Bfree>
 800d076:	4644      	mov	r4, r8
 800d078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d07c:	3501      	adds	r5, #1
 800d07e:	615e      	str	r6, [r3, #20]
 800d080:	6125      	str	r5, [r4, #16]
 800d082:	4620      	mov	r0, r4
 800d084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d088:	0800e74c 	.word	0x0800e74c
 800d08c:	0800e83c 	.word	0x0800e83c

0800d090 <__s2b>:
 800d090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d094:	460c      	mov	r4, r1
 800d096:	4615      	mov	r5, r2
 800d098:	461f      	mov	r7, r3
 800d09a:	2209      	movs	r2, #9
 800d09c:	3308      	adds	r3, #8
 800d09e:	4606      	mov	r6, r0
 800d0a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	db09      	blt.n	800d0c0 <__s2b+0x30>
 800d0ac:	4630      	mov	r0, r6
 800d0ae:	f7ff ff47 	bl	800cf40 <_Balloc>
 800d0b2:	b940      	cbnz	r0, 800d0c6 <__s2b+0x36>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	4b19      	ldr	r3, [pc, #100]	; (800d11c <__s2b+0x8c>)
 800d0b8:	4819      	ldr	r0, [pc, #100]	; (800d120 <__s2b+0x90>)
 800d0ba:	21ce      	movs	r1, #206	; 0xce
 800d0bc:	f7fe fae8 	bl	800b690 <__assert_func>
 800d0c0:	0052      	lsls	r2, r2, #1
 800d0c2:	3101      	adds	r1, #1
 800d0c4:	e7f0      	b.n	800d0a8 <__s2b+0x18>
 800d0c6:	9b08      	ldr	r3, [sp, #32]
 800d0c8:	6143      	str	r3, [r0, #20]
 800d0ca:	2d09      	cmp	r5, #9
 800d0cc:	f04f 0301 	mov.w	r3, #1
 800d0d0:	6103      	str	r3, [r0, #16]
 800d0d2:	dd16      	ble.n	800d102 <__s2b+0x72>
 800d0d4:	f104 0909 	add.w	r9, r4, #9
 800d0d8:	46c8      	mov	r8, r9
 800d0da:	442c      	add	r4, r5
 800d0dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d0e0:	4601      	mov	r1, r0
 800d0e2:	3b30      	subs	r3, #48	; 0x30
 800d0e4:	220a      	movs	r2, #10
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	f7ff ff8c 	bl	800d004 <__multadd>
 800d0ec:	45a0      	cmp	r8, r4
 800d0ee:	d1f5      	bne.n	800d0dc <__s2b+0x4c>
 800d0f0:	f1a5 0408 	sub.w	r4, r5, #8
 800d0f4:	444c      	add	r4, r9
 800d0f6:	1b2d      	subs	r5, r5, r4
 800d0f8:	1963      	adds	r3, r4, r5
 800d0fa:	42bb      	cmp	r3, r7
 800d0fc:	db04      	blt.n	800d108 <__s2b+0x78>
 800d0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d102:	340a      	adds	r4, #10
 800d104:	2509      	movs	r5, #9
 800d106:	e7f6      	b.n	800d0f6 <__s2b+0x66>
 800d108:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d10c:	4601      	mov	r1, r0
 800d10e:	3b30      	subs	r3, #48	; 0x30
 800d110:	220a      	movs	r2, #10
 800d112:	4630      	mov	r0, r6
 800d114:	f7ff ff76 	bl	800d004 <__multadd>
 800d118:	e7ee      	b.n	800d0f8 <__s2b+0x68>
 800d11a:	bf00      	nop
 800d11c:	0800e74c 	.word	0x0800e74c
 800d120:	0800e83c 	.word	0x0800e83c

0800d124 <__hi0bits>:
 800d124:	0c03      	lsrs	r3, r0, #16
 800d126:	041b      	lsls	r3, r3, #16
 800d128:	b9d3      	cbnz	r3, 800d160 <__hi0bits+0x3c>
 800d12a:	0400      	lsls	r0, r0, #16
 800d12c:	2310      	movs	r3, #16
 800d12e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d132:	bf04      	itt	eq
 800d134:	0200      	lsleq	r0, r0, #8
 800d136:	3308      	addeq	r3, #8
 800d138:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d13c:	bf04      	itt	eq
 800d13e:	0100      	lsleq	r0, r0, #4
 800d140:	3304      	addeq	r3, #4
 800d142:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d146:	bf04      	itt	eq
 800d148:	0080      	lsleq	r0, r0, #2
 800d14a:	3302      	addeq	r3, #2
 800d14c:	2800      	cmp	r0, #0
 800d14e:	db05      	blt.n	800d15c <__hi0bits+0x38>
 800d150:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d154:	f103 0301 	add.w	r3, r3, #1
 800d158:	bf08      	it	eq
 800d15a:	2320      	moveq	r3, #32
 800d15c:	4618      	mov	r0, r3
 800d15e:	4770      	bx	lr
 800d160:	2300      	movs	r3, #0
 800d162:	e7e4      	b.n	800d12e <__hi0bits+0xa>

0800d164 <__lo0bits>:
 800d164:	6803      	ldr	r3, [r0, #0]
 800d166:	f013 0207 	ands.w	r2, r3, #7
 800d16a:	4601      	mov	r1, r0
 800d16c:	d00b      	beq.n	800d186 <__lo0bits+0x22>
 800d16e:	07da      	lsls	r2, r3, #31
 800d170:	d423      	bmi.n	800d1ba <__lo0bits+0x56>
 800d172:	0798      	lsls	r0, r3, #30
 800d174:	bf49      	itett	mi
 800d176:	085b      	lsrmi	r3, r3, #1
 800d178:	089b      	lsrpl	r3, r3, #2
 800d17a:	2001      	movmi	r0, #1
 800d17c:	600b      	strmi	r3, [r1, #0]
 800d17e:	bf5c      	itt	pl
 800d180:	600b      	strpl	r3, [r1, #0]
 800d182:	2002      	movpl	r0, #2
 800d184:	4770      	bx	lr
 800d186:	b298      	uxth	r0, r3
 800d188:	b9a8      	cbnz	r0, 800d1b6 <__lo0bits+0x52>
 800d18a:	0c1b      	lsrs	r3, r3, #16
 800d18c:	2010      	movs	r0, #16
 800d18e:	b2da      	uxtb	r2, r3
 800d190:	b90a      	cbnz	r2, 800d196 <__lo0bits+0x32>
 800d192:	3008      	adds	r0, #8
 800d194:	0a1b      	lsrs	r3, r3, #8
 800d196:	071a      	lsls	r2, r3, #28
 800d198:	bf04      	itt	eq
 800d19a:	091b      	lsreq	r3, r3, #4
 800d19c:	3004      	addeq	r0, #4
 800d19e:	079a      	lsls	r2, r3, #30
 800d1a0:	bf04      	itt	eq
 800d1a2:	089b      	lsreq	r3, r3, #2
 800d1a4:	3002      	addeq	r0, #2
 800d1a6:	07da      	lsls	r2, r3, #31
 800d1a8:	d403      	bmi.n	800d1b2 <__lo0bits+0x4e>
 800d1aa:	085b      	lsrs	r3, r3, #1
 800d1ac:	f100 0001 	add.w	r0, r0, #1
 800d1b0:	d005      	beq.n	800d1be <__lo0bits+0x5a>
 800d1b2:	600b      	str	r3, [r1, #0]
 800d1b4:	4770      	bx	lr
 800d1b6:	4610      	mov	r0, r2
 800d1b8:	e7e9      	b.n	800d18e <__lo0bits+0x2a>
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	4770      	bx	lr
 800d1be:	2020      	movs	r0, #32
 800d1c0:	4770      	bx	lr
	...

0800d1c4 <__i2b>:
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	460c      	mov	r4, r1
 800d1c8:	2101      	movs	r1, #1
 800d1ca:	f7ff feb9 	bl	800cf40 <_Balloc>
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	b928      	cbnz	r0, 800d1de <__i2b+0x1a>
 800d1d2:	4b05      	ldr	r3, [pc, #20]	; (800d1e8 <__i2b+0x24>)
 800d1d4:	4805      	ldr	r0, [pc, #20]	; (800d1ec <__i2b+0x28>)
 800d1d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d1da:	f7fe fa59 	bl	800b690 <__assert_func>
 800d1de:	2301      	movs	r3, #1
 800d1e0:	6144      	str	r4, [r0, #20]
 800d1e2:	6103      	str	r3, [r0, #16]
 800d1e4:	bd10      	pop	{r4, pc}
 800d1e6:	bf00      	nop
 800d1e8:	0800e74c 	.word	0x0800e74c
 800d1ec:	0800e83c 	.word	0x0800e83c

0800d1f0 <__multiply>:
 800d1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f4:	4691      	mov	r9, r2
 800d1f6:	690a      	ldr	r2, [r1, #16]
 800d1f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	bfb8      	it	lt
 800d200:	460b      	movlt	r3, r1
 800d202:	460c      	mov	r4, r1
 800d204:	bfbc      	itt	lt
 800d206:	464c      	movlt	r4, r9
 800d208:	4699      	movlt	r9, r3
 800d20a:	6927      	ldr	r7, [r4, #16]
 800d20c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d210:	68a3      	ldr	r3, [r4, #8]
 800d212:	6861      	ldr	r1, [r4, #4]
 800d214:	eb07 060a 	add.w	r6, r7, sl
 800d218:	42b3      	cmp	r3, r6
 800d21a:	b085      	sub	sp, #20
 800d21c:	bfb8      	it	lt
 800d21e:	3101      	addlt	r1, #1
 800d220:	f7ff fe8e 	bl	800cf40 <_Balloc>
 800d224:	b930      	cbnz	r0, 800d234 <__multiply+0x44>
 800d226:	4602      	mov	r2, r0
 800d228:	4b44      	ldr	r3, [pc, #272]	; (800d33c <__multiply+0x14c>)
 800d22a:	4845      	ldr	r0, [pc, #276]	; (800d340 <__multiply+0x150>)
 800d22c:	f240 115d 	movw	r1, #349	; 0x15d
 800d230:	f7fe fa2e 	bl	800b690 <__assert_func>
 800d234:	f100 0514 	add.w	r5, r0, #20
 800d238:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d23c:	462b      	mov	r3, r5
 800d23e:	2200      	movs	r2, #0
 800d240:	4543      	cmp	r3, r8
 800d242:	d321      	bcc.n	800d288 <__multiply+0x98>
 800d244:	f104 0314 	add.w	r3, r4, #20
 800d248:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d24c:	f109 0314 	add.w	r3, r9, #20
 800d250:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d254:	9202      	str	r2, [sp, #8]
 800d256:	1b3a      	subs	r2, r7, r4
 800d258:	3a15      	subs	r2, #21
 800d25a:	f022 0203 	bic.w	r2, r2, #3
 800d25e:	3204      	adds	r2, #4
 800d260:	f104 0115 	add.w	r1, r4, #21
 800d264:	428f      	cmp	r7, r1
 800d266:	bf38      	it	cc
 800d268:	2204      	movcc	r2, #4
 800d26a:	9201      	str	r2, [sp, #4]
 800d26c:	9a02      	ldr	r2, [sp, #8]
 800d26e:	9303      	str	r3, [sp, #12]
 800d270:	429a      	cmp	r2, r3
 800d272:	d80c      	bhi.n	800d28e <__multiply+0x9e>
 800d274:	2e00      	cmp	r6, #0
 800d276:	dd03      	ble.n	800d280 <__multiply+0x90>
 800d278:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d05a      	beq.n	800d336 <__multiply+0x146>
 800d280:	6106      	str	r6, [r0, #16]
 800d282:	b005      	add	sp, #20
 800d284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d288:	f843 2b04 	str.w	r2, [r3], #4
 800d28c:	e7d8      	b.n	800d240 <__multiply+0x50>
 800d28e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d292:	f1ba 0f00 	cmp.w	sl, #0
 800d296:	d024      	beq.n	800d2e2 <__multiply+0xf2>
 800d298:	f104 0e14 	add.w	lr, r4, #20
 800d29c:	46a9      	mov	r9, r5
 800d29e:	f04f 0c00 	mov.w	ip, #0
 800d2a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d2a6:	f8d9 1000 	ldr.w	r1, [r9]
 800d2aa:	fa1f fb82 	uxth.w	fp, r2
 800d2ae:	b289      	uxth	r1, r1
 800d2b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800d2b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d2b8:	f8d9 2000 	ldr.w	r2, [r9]
 800d2bc:	4461      	add	r1, ip
 800d2be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d2c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800d2c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d2ca:	b289      	uxth	r1, r1
 800d2cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d2d0:	4577      	cmp	r7, lr
 800d2d2:	f849 1b04 	str.w	r1, [r9], #4
 800d2d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d2da:	d8e2      	bhi.n	800d2a2 <__multiply+0xb2>
 800d2dc:	9a01      	ldr	r2, [sp, #4]
 800d2de:	f845 c002 	str.w	ip, [r5, r2]
 800d2e2:	9a03      	ldr	r2, [sp, #12]
 800d2e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d2e8:	3304      	adds	r3, #4
 800d2ea:	f1b9 0f00 	cmp.w	r9, #0
 800d2ee:	d020      	beq.n	800d332 <__multiply+0x142>
 800d2f0:	6829      	ldr	r1, [r5, #0]
 800d2f2:	f104 0c14 	add.w	ip, r4, #20
 800d2f6:	46ae      	mov	lr, r5
 800d2f8:	f04f 0a00 	mov.w	sl, #0
 800d2fc:	f8bc b000 	ldrh.w	fp, [ip]
 800d300:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d304:	fb09 220b 	mla	r2, r9, fp, r2
 800d308:	4492      	add	sl, r2
 800d30a:	b289      	uxth	r1, r1
 800d30c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d310:	f84e 1b04 	str.w	r1, [lr], #4
 800d314:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d318:	f8be 1000 	ldrh.w	r1, [lr]
 800d31c:	0c12      	lsrs	r2, r2, #16
 800d31e:	fb09 1102 	mla	r1, r9, r2, r1
 800d322:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d326:	4567      	cmp	r7, ip
 800d328:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d32c:	d8e6      	bhi.n	800d2fc <__multiply+0x10c>
 800d32e:	9a01      	ldr	r2, [sp, #4]
 800d330:	50a9      	str	r1, [r5, r2]
 800d332:	3504      	adds	r5, #4
 800d334:	e79a      	b.n	800d26c <__multiply+0x7c>
 800d336:	3e01      	subs	r6, #1
 800d338:	e79c      	b.n	800d274 <__multiply+0x84>
 800d33a:	bf00      	nop
 800d33c:	0800e74c 	.word	0x0800e74c
 800d340:	0800e83c 	.word	0x0800e83c

0800d344 <__pow5mult>:
 800d344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d348:	4615      	mov	r5, r2
 800d34a:	f012 0203 	ands.w	r2, r2, #3
 800d34e:	4606      	mov	r6, r0
 800d350:	460f      	mov	r7, r1
 800d352:	d007      	beq.n	800d364 <__pow5mult+0x20>
 800d354:	4c25      	ldr	r4, [pc, #148]	; (800d3ec <__pow5mult+0xa8>)
 800d356:	3a01      	subs	r2, #1
 800d358:	2300      	movs	r3, #0
 800d35a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d35e:	f7ff fe51 	bl	800d004 <__multadd>
 800d362:	4607      	mov	r7, r0
 800d364:	10ad      	asrs	r5, r5, #2
 800d366:	d03d      	beq.n	800d3e4 <__pow5mult+0xa0>
 800d368:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d36a:	b97c      	cbnz	r4, 800d38c <__pow5mult+0x48>
 800d36c:	2010      	movs	r0, #16
 800d36e:	f7ff fdcd 	bl	800cf0c <malloc>
 800d372:	4602      	mov	r2, r0
 800d374:	6270      	str	r0, [r6, #36]	; 0x24
 800d376:	b928      	cbnz	r0, 800d384 <__pow5mult+0x40>
 800d378:	4b1d      	ldr	r3, [pc, #116]	; (800d3f0 <__pow5mult+0xac>)
 800d37a:	481e      	ldr	r0, [pc, #120]	; (800d3f4 <__pow5mult+0xb0>)
 800d37c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d380:	f7fe f986 	bl	800b690 <__assert_func>
 800d384:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d388:	6004      	str	r4, [r0, #0]
 800d38a:	60c4      	str	r4, [r0, #12]
 800d38c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d390:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d394:	b94c      	cbnz	r4, 800d3aa <__pow5mult+0x66>
 800d396:	f240 2171 	movw	r1, #625	; 0x271
 800d39a:	4630      	mov	r0, r6
 800d39c:	f7ff ff12 	bl	800d1c4 <__i2b>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	6003      	str	r3, [r0, #0]
 800d3aa:	f04f 0900 	mov.w	r9, #0
 800d3ae:	07eb      	lsls	r3, r5, #31
 800d3b0:	d50a      	bpl.n	800d3c8 <__pow5mult+0x84>
 800d3b2:	4639      	mov	r1, r7
 800d3b4:	4622      	mov	r2, r4
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	f7ff ff1a 	bl	800d1f0 <__multiply>
 800d3bc:	4639      	mov	r1, r7
 800d3be:	4680      	mov	r8, r0
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	f7ff fdfd 	bl	800cfc0 <_Bfree>
 800d3c6:	4647      	mov	r7, r8
 800d3c8:	106d      	asrs	r5, r5, #1
 800d3ca:	d00b      	beq.n	800d3e4 <__pow5mult+0xa0>
 800d3cc:	6820      	ldr	r0, [r4, #0]
 800d3ce:	b938      	cbnz	r0, 800d3e0 <__pow5mult+0x9c>
 800d3d0:	4622      	mov	r2, r4
 800d3d2:	4621      	mov	r1, r4
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	f7ff ff0b 	bl	800d1f0 <__multiply>
 800d3da:	6020      	str	r0, [r4, #0]
 800d3dc:	f8c0 9000 	str.w	r9, [r0]
 800d3e0:	4604      	mov	r4, r0
 800d3e2:	e7e4      	b.n	800d3ae <__pow5mult+0x6a>
 800d3e4:	4638      	mov	r0, r7
 800d3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3ea:	bf00      	nop
 800d3ec:	0800e988 	.word	0x0800e988
 800d3f0:	0800e6da 	.word	0x0800e6da
 800d3f4:	0800e83c 	.word	0x0800e83c

0800d3f8 <__lshift>:
 800d3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3fc:	460c      	mov	r4, r1
 800d3fe:	6849      	ldr	r1, [r1, #4]
 800d400:	6923      	ldr	r3, [r4, #16]
 800d402:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d406:	68a3      	ldr	r3, [r4, #8]
 800d408:	4607      	mov	r7, r0
 800d40a:	4691      	mov	r9, r2
 800d40c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d410:	f108 0601 	add.w	r6, r8, #1
 800d414:	42b3      	cmp	r3, r6
 800d416:	db0b      	blt.n	800d430 <__lshift+0x38>
 800d418:	4638      	mov	r0, r7
 800d41a:	f7ff fd91 	bl	800cf40 <_Balloc>
 800d41e:	4605      	mov	r5, r0
 800d420:	b948      	cbnz	r0, 800d436 <__lshift+0x3e>
 800d422:	4602      	mov	r2, r0
 800d424:	4b2a      	ldr	r3, [pc, #168]	; (800d4d0 <__lshift+0xd8>)
 800d426:	482b      	ldr	r0, [pc, #172]	; (800d4d4 <__lshift+0xdc>)
 800d428:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d42c:	f7fe f930 	bl	800b690 <__assert_func>
 800d430:	3101      	adds	r1, #1
 800d432:	005b      	lsls	r3, r3, #1
 800d434:	e7ee      	b.n	800d414 <__lshift+0x1c>
 800d436:	2300      	movs	r3, #0
 800d438:	f100 0114 	add.w	r1, r0, #20
 800d43c:	f100 0210 	add.w	r2, r0, #16
 800d440:	4618      	mov	r0, r3
 800d442:	4553      	cmp	r3, sl
 800d444:	db37      	blt.n	800d4b6 <__lshift+0xbe>
 800d446:	6920      	ldr	r0, [r4, #16]
 800d448:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d44c:	f104 0314 	add.w	r3, r4, #20
 800d450:	f019 091f 	ands.w	r9, r9, #31
 800d454:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d458:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d45c:	d02f      	beq.n	800d4be <__lshift+0xc6>
 800d45e:	f1c9 0e20 	rsb	lr, r9, #32
 800d462:	468a      	mov	sl, r1
 800d464:	f04f 0c00 	mov.w	ip, #0
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	fa02 f209 	lsl.w	r2, r2, r9
 800d46e:	ea42 020c 	orr.w	r2, r2, ip
 800d472:	f84a 2b04 	str.w	r2, [sl], #4
 800d476:	f853 2b04 	ldr.w	r2, [r3], #4
 800d47a:	4298      	cmp	r0, r3
 800d47c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d480:	d8f2      	bhi.n	800d468 <__lshift+0x70>
 800d482:	1b03      	subs	r3, r0, r4
 800d484:	3b15      	subs	r3, #21
 800d486:	f023 0303 	bic.w	r3, r3, #3
 800d48a:	3304      	adds	r3, #4
 800d48c:	f104 0215 	add.w	r2, r4, #21
 800d490:	4290      	cmp	r0, r2
 800d492:	bf38      	it	cc
 800d494:	2304      	movcc	r3, #4
 800d496:	f841 c003 	str.w	ip, [r1, r3]
 800d49a:	f1bc 0f00 	cmp.w	ip, #0
 800d49e:	d001      	beq.n	800d4a4 <__lshift+0xac>
 800d4a0:	f108 0602 	add.w	r6, r8, #2
 800d4a4:	3e01      	subs	r6, #1
 800d4a6:	4638      	mov	r0, r7
 800d4a8:	612e      	str	r6, [r5, #16]
 800d4aa:	4621      	mov	r1, r4
 800d4ac:	f7ff fd88 	bl	800cfc0 <_Bfree>
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	e7c1      	b.n	800d442 <__lshift+0x4a>
 800d4be:	3904      	subs	r1, #4
 800d4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4c8:	4298      	cmp	r0, r3
 800d4ca:	d8f9      	bhi.n	800d4c0 <__lshift+0xc8>
 800d4cc:	e7ea      	b.n	800d4a4 <__lshift+0xac>
 800d4ce:	bf00      	nop
 800d4d0:	0800e74c 	.word	0x0800e74c
 800d4d4:	0800e83c 	.word	0x0800e83c

0800d4d8 <__mcmp>:
 800d4d8:	b530      	push	{r4, r5, lr}
 800d4da:	6902      	ldr	r2, [r0, #16]
 800d4dc:	690c      	ldr	r4, [r1, #16]
 800d4de:	1b12      	subs	r2, r2, r4
 800d4e0:	d10e      	bne.n	800d500 <__mcmp+0x28>
 800d4e2:	f100 0314 	add.w	r3, r0, #20
 800d4e6:	3114      	adds	r1, #20
 800d4e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d4ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d4f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d4f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d4f8:	42a5      	cmp	r5, r4
 800d4fa:	d003      	beq.n	800d504 <__mcmp+0x2c>
 800d4fc:	d305      	bcc.n	800d50a <__mcmp+0x32>
 800d4fe:	2201      	movs	r2, #1
 800d500:	4610      	mov	r0, r2
 800d502:	bd30      	pop	{r4, r5, pc}
 800d504:	4283      	cmp	r3, r0
 800d506:	d3f3      	bcc.n	800d4f0 <__mcmp+0x18>
 800d508:	e7fa      	b.n	800d500 <__mcmp+0x28>
 800d50a:	f04f 32ff 	mov.w	r2, #4294967295
 800d50e:	e7f7      	b.n	800d500 <__mcmp+0x28>

0800d510 <__mdiff>:
 800d510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d514:	460c      	mov	r4, r1
 800d516:	4606      	mov	r6, r0
 800d518:	4611      	mov	r1, r2
 800d51a:	4620      	mov	r0, r4
 800d51c:	4690      	mov	r8, r2
 800d51e:	f7ff ffdb 	bl	800d4d8 <__mcmp>
 800d522:	1e05      	subs	r5, r0, #0
 800d524:	d110      	bne.n	800d548 <__mdiff+0x38>
 800d526:	4629      	mov	r1, r5
 800d528:	4630      	mov	r0, r6
 800d52a:	f7ff fd09 	bl	800cf40 <_Balloc>
 800d52e:	b930      	cbnz	r0, 800d53e <__mdiff+0x2e>
 800d530:	4b3a      	ldr	r3, [pc, #232]	; (800d61c <__mdiff+0x10c>)
 800d532:	4602      	mov	r2, r0
 800d534:	f240 2132 	movw	r1, #562	; 0x232
 800d538:	4839      	ldr	r0, [pc, #228]	; (800d620 <__mdiff+0x110>)
 800d53a:	f7fe f8a9 	bl	800b690 <__assert_func>
 800d53e:	2301      	movs	r3, #1
 800d540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d548:	bfa4      	itt	ge
 800d54a:	4643      	movge	r3, r8
 800d54c:	46a0      	movge	r8, r4
 800d54e:	4630      	mov	r0, r6
 800d550:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d554:	bfa6      	itte	ge
 800d556:	461c      	movge	r4, r3
 800d558:	2500      	movge	r5, #0
 800d55a:	2501      	movlt	r5, #1
 800d55c:	f7ff fcf0 	bl	800cf40 <_Balloc>
 800d560:	b920      	cbnz	r0, 800d56c <__mdiff+0x5c>
 800d562:	4b2e      	ldr	r3, [pc, #184]	; (800d61c <__mdiff+0x10c>)
 800d564:	4602      	mov	r2, r0
 800d566:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d56a:	e7e5      	b.n	800d538 <__mdiff+0x28>
 800d56c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d570:	6926      	ldr	r6, [r4, #16]
 800d572:	60c5      	str	r5, [r0, #12]
 800d574:	f104 0914 	add.w	r9, r4, #20
 800d578:	f108 0514 	add.w	r5, r8, #20
 800d57c:	f100 0e14 	add.w	lr, r0, #20
 800d580:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d584:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d588:	f108 0210 	add.w	r2, r8, #16
 800d58c:	46f2      	mov	sl, lr
 800d58e:	2100      	movs	r1, #0
 800d590:	f859 3b04 	ldr.w	r3, [r9], #4
 800d594:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d598:	fa1f f883 	uxth.w	r8, r3
 800d59c:	fa11 f18b 	uxtah	r1, r1, fp
 800d5a0:	0c1b      	lsrs	r3, r3, #16
 800d5a2:	eba1 0808 	sub.w	r8, r1, r8
 800d5a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d5aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d5ae:	fa1f f888 	uxth.w	r8, r8
 800d5b2:	1419      	asrs	r1, r3, #16
 800d5b4:	454e      	cmp	r6, r9
 800d5b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d5ba:	f84a 3b04 	str.w	r3, [sl], #4
 800d5be:	d8e7      	bhi.n	800d590 <__mdiff+0x80>
 800d5c0:	1b33      	subs	r3, r6, r4
 800d5c2:	3b15      	subs	r3, #21
 800d5c4:	f023 0303 	bic.w	r3, r3, #3
 800d5c8:	3304      	adds	r3, #4
 800d5ca:	3415      	adds	r4, #21
 800d5cc:	42a6      	cmp	r6, r4
 800d5ce:	bf38      	it	cc
 800d5d0:	2304      	movcc	r3, #4
 800d5d2:	441d      	add	r5, r3
 800d5d4:	4473      	add	r3, lr
 800d5d6:	469e      	mov	lr, r3
 800d5d8:	462e      	mov	r6, r5
 800d5da:	4566      	cmp	r6, ip
 800d5dc:	d30e      	bcc.n	800d5fc <__mdiff+0xec>
 800d5de:	f10c 0203 	add.w	r2, ip, #3
 800d5e2:	1b52      	subs	r2, r2, r5
 800d5e4:	f022 0203 	bic.w	r2, r2, #3
 800d5e8:	3d03      	subs	r5, #3
 800d5ea:	45ac      	cmp	ip, r5
 800d5ec:	bf38      	it	cc
 800d5ee:	2200      	movcc	r2, #0
 800d5f0:	441a      	add	r2, r3
 800d5f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d5f6:	b17b      	cbz	r3, 800d618 <__mdiff+0x108>
 800d5f8:	6107      	str	r7, [r0, #16]
 800d5fa:	e7a3      	b.n	800d544 <__mdiff+0x34>
 800d5fc:	f856 8b04 	ldr.w	r8, [r6], #4
 800d600:	fa11 f288 	uxtah	r2, r1, r8
 800d604:	1414      	asrs	r4, r2, #16
 800d606:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d60a:	b292      	uxth	r2, r2
 800d60c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d610:	f84e 2b04 	str.w	r2, [lr], #4
 800d614:	1421      	asrs	r1, r4, #16
 800d616:	e7e0      	b.n	800d5da <__mdiff+0xca>
 800d618:	3f01      	subs	r7, #1
 800d61a:	e7ea      	b.n	800d5f2 <__mdiff+0xe2>
 800d61c:	0800e74c 	.word	0x0800e74c
 800d620:	0800e83c 	.word	0x0800e83c

0800d624 <__ulp>:
 800d624:	b082      	sub	sp, #8
 800d626:	ed8d 0b00 	vstr	d0, [sp]
 800d62a:	9b01      	ldr	r3, [sp, #4]
 800d62c:	4912      	ldr	r1, [pc, #72]	; (800d678 <__ulp+0x54>)
 800d62e:	4019      	ands	r1, r3
 800d630:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d634:	2900      	cmp	r1, #0
 800d636:	dd05      	ble.n	800d644 <__ulp+0x20>
 800d638:	2200      	movs	r2, #0
 800d63a:	460b      	mov	r3, r1
 800d63c:	ec43 2b10 	vmov	d0, r2, r3
 800d640:	b002      	add	sp, #8
 800d642:	4770      	bx	lr
 800d644:	4249      	negs	r1, r1
 800d646:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d64a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d64e:	f04f 0200 	mov.w	r2, #0
 800d652:	f04f 0300 	mov.w	r3, #0
 800d656:	da04      	bge.n	800d662 <__ulp+0x3e>
 800d658:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d65c:	fa41 f300 	asr.w	r3, r1, r0
 800d660:	e7ec      	b.n	800d63c <__ulp+0x18>
 800d662:	f1a0 0114 	sub.w	r1, r0, #20
 800d666:	291e      	cmp	r1, #30
 800d668:	bfda      	itte	le
 800d66a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d66e:	fa20 f101 	lsrle.w	r1, r0, r1
 800d672:	2101      	movgt	r1, #1
 800d674:	460a      	mov	r2, r1
 800d676:	e7e1      	b.n	800d63c <__ulp+0x18>
 800d678:	7ff00000 	.word	0x7ff00000

0800d67c <__b2d>:
 800d67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67e:	6905      	ldr	r5, [r0, #16]
 800d680:	f100 0714 	add.w	r7, r0, #20
 800d684:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d688:	1f2e      	subs	r6, r5, #4
 800d68a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d68e:	4620      	mov	r0, r4
 800d690:	f7ff fd48 	bl	800d124 <__hi0bits>
 800d694:	f1c0 0320 	rsb	r3, r0, #32
 800d698:	280a      	cmp	r0, #10
 800d69a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d718 <__b2d+0x9c>
 800d69e:	600b      	str	r3, [r1, #0]
 800d6a0:	dc14      	bgt.n	800d6cc <__b2d+0x50>
 800d6a2:	f1c0 0e0b 	rsb	lr, r0, #11
 800d6a6:	fa24 f10e 	lsr.w	r1, r4, lr
 800d6aa:	42b7      	cmp	r7, r6
 800d6ac:	ea41 030c 	orr.w	r3, r1, ip
 800d6b0:	bf34      	ite	cc
 800d6b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d6b6:	2100      	movcs	r1, #0
 800d6b8:	3015      	adds	r0, #21
 800d6ba:	fa04 f000 	lsl.w	r0, r4, r0
 800d6be:	fa21 f10e 	lsr.w	r1, r1, lr
 800d6c2:	ea40 0201 	orr.w	r2, r0, r1
 800d6c6:	ec43 2b10 	vmov	d0, r2, r3
 800d6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6cc:	42b7      	cmp	r7, r6
 800d6ce:	bf3a      	itte	cc
 800d6d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d6d4:	f1a5 0608 	subcc.w	r6, r5, #8
 800d6d8:	2100      	movcs	r1, #0
 800d6da:	380b      	subs	r0, #11
 800d6dc:	d017      	beq.n	800d70e <__b2d+0x92>
 800d6de:	f1c0 0c20 	rsb	ip, r0, #32
 800d6e2:	fa04 f500 	lsl.w	r5, r4, r0
 800d6e6:	42be      	cmp	r6, r7
 800d6e8:	fa21 f40c 	lsr.w	r4, r1, ip
 800d6ec:	ea45 0504 	orr.w	r5, r5, r4
 800d6f0:	bf8c      	ite	hi
 800d6f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d6f6:	2400      	movls	r4, #0
 800d6f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d6fc:	fa01 f000 	lsl.w	r0, r1, r0
 800d700:	fa24 f40c 	lsr.w	r4, r4, ip
 800d704:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d708:	ea40 0204 	orr.w	r2, r0, r4
 800d70c:	e7db      	b.n	800d6c6 <__b2d+0x4a>
 800d70e:	ea44 030c 	orr.w	r3, r4, ip
 800d712:	460a      	mov	r2, r1
 800d714:	e7d7      	b.n	800d6c6 <__b2d+0x4a>
 800d716:	bf00      	nop
 800d718:	3ff00000 	.word	0x3ff00000

0800d71c <__d2b>:
 800d71c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d720:	4689      	mov	r9, r1
 800d722:	2101      	movs	r1, #1
 800d724:	ec57 6b10 	vmov	r6, r7, d0
 800d728:	4690      	mov	r8, r2
 800d72a:	f7ff fc09 	bl	800cf40 <_Balloc>
 800d72e:	4604      	mov	r4, r0
 800d730:	b930      	cbnz	r0, 800d740 <__d2b+0x24>
 800d732:	4602      	mov	r2, r0
 800d734:	4b25      	ldr	r3, [pc, #148]	; (800d7cc <__d2b+0xb0>)
 800d736:	4826      	ldr	r0, [pc, #152]	; (800d7d0 <__d2b+0xb4>)
 800d738:	f240 310a 	movw	r1, #778	; 0x30a
 800d73c:	f7fd ffa8 	bl	800b690 <__assert_func>
 800d740:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d744:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d748:	bb35      	cbnz	r5, 800d798 <__d2b+0x7c>
 800d74a:	2e00      	cmp	r6, #0
 800d74c:	9301      	str	r3, [sp, #4]
 800d74e:	d028      	beq.n	800d7a2 <__d2b+0x86>
 800d750:	4668      	mov	r0, sp
 800d752:	9600      	str	r6, [sp, #0]
 800d754:	f7ff fd06 	bl	800d164 <__lo0bits>
 800d758:	9900      	ldr	r1, [sp, #0]
 800d75a:	b300      	cbz	r0, 800d79e <__d2b+0x82>
 800d75c:	9a01      	ldr	r2, [sp, #4]
 800d75e:	f1c0 0320 	rsb	r3, r0, #32
 800d762:	fa02 f303 	lsl.w	r3, r2, r3
 800d766:	430b      	orrs	r3, r1
 800d768:	40c2      	lsrs	r2, r0
 800d76a:	6163      	str	r3, [r4, #20]
 800d76c:	9201      	str	r2, [sp, #4]
 800d76e:	9b01      	ldr	r3, [sp, #4]
 800d770:	61a3      	str	r3, [r4, #24]
 800d772:	2b00      	cmp	r3, #0
 800d774:	bf14      	ite	ne
 800d776:	2202      	movne	r2, #2
 800d778:	2201      	moveq	r2, #1
 800d77a:	6122      	str	r2, [r4, #16]
 800d77c:	b1d5      	cbz	r5, 800d7b4 <__d2b+0x98>
 800d77e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d782:	4405      	add	r5, r0
 800d784:	f8c9 5000 	str.w	r5, [r9]
 800d788:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d78c:	f8c8 0000 	str.w	r0, [r8]
 800d790:	4620      	mov	r0, r4
 800d792:	b003      	add	sp, #12
 800d794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d79c:	e7d5      	b.n	800d74a <__d2b+0x2e>
 800d79e:	6161      	str	r1, [r4, #20]
 800d7a0:	e7e5      	b.n	800d76e <__d2b+0x52>
 800d7a2:	a801      	add	r0, sp, #4
 800d7a4:	f7ff fcde 	bl	800d164 <__lo0bits>
 800d7a8:	9b01      	ldr	r3, [sp, #4]
 800d7aa:	6163      	str	r3, [r4, #20]
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	6122      	str	r2, [r4, #16]
 800d7b0:	3020      	adds	r0, #32
 800d7b2:	e7e3      	b.n	800d77c <__d2b+0x60>
 800d7b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d7b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d7bc:	f8c9 0000 	str.w	r0, [r9]
 800d7c0:	6918      	ldr	r0, [r3, #16]
 800d7c2:	f7ff fcaf 	bl	800d124 <__hi0bits>
 800d7c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d7ca:	e7df      	b.n	800d78c <__d2b+0x70>
 800d7cc:	0800e74c 	.word	0x0800e74c
 800d7d0:	0800e83c 	.word	0x0800e83c

0800d7d4 <__ratio>:
 800d7d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	4688      	mov	r8, r1
 800d7da:	4669      	mov	r1, sp
 800d7dc:	4681      	mov	r9, r0
 800d7de:	f7ff ff4d 	bl	800d67c <__b2d>
 800d7e2:	a901      	add	r1, sp, #4
 800d7e4:	4640      	mov	r0, r8
 800d7e6:	ec55 4b10 	vmov	r4, r5, d0
 800d7ea:	f7ff ff47 	bl	800d67c <__b2d>
 800d7ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d7f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d7f6:	eba3 0c02 	sub.w	ip, r3, r2
 800d7fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d7fe:	1a9b      	subs	r3, r3, r2
 800d800:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d804:	ec51 0b10 	vmov	r0, r1, d0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	bfd6      	itet	le
 800d80c:	460a      	movle	r2, r1
 800d80e:	462a      	movgt	r2, r5
 800d810:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d814:	468b      	mov	fp, r1
 800d816:	462f      	mov	r7, r5
 800d818:	bfd4      	ite	le
 800d81a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d81e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d822:	4620      	mov	r0, r4
 800d824:	ee10 2a10 	vmov	r2, s0
 800d828:	465b      	mov	r3, fp
 800d82a:	4639      	mov	r1, r7
 800d82c:	f7f3 f80e 	bl	800084c <__aeabi_ddiv>
 800d830:	ec41 0b10 	vmov	d0, r0, r1
 800d834:	b003      	add	sp, #12
 800d836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d83a <__copybits>:
 800d83a:	3901      	subs	r1, #1
 800d83c:	b570      	push	{r4, r5, r6, lr}
 800d83e:	1149      	asrs	r1, r1, #5
 800d840:	6914      	ldr	r4, [r2, #16]
 800d842:	3101      	adds	r1, #1
 800d844:	f102 0314 	add.w	r3, r2, #20
 800d848:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d84c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d850:	1f05      	subs	r5, r0, #4
 800d852:	42a3      	cmp	r3, r4
 800d854:	d30c      	bcc.n	800d870 <__copybits+0x36>
 800d856:	1aa3      	subs	r3, r4, r2
 800d858:	3b11      	subs	r3, #17
 800d85a:	f023 0303 	bic.w	r3, r3, #3
 800d85e:	3211      	adds	r2, #17
 800d860:	42a2      	cmp	r2, r4
 800d862:	bf88      	it	hi
 800d864:	2300      	movhi	r3, #0
 800d866:	4418      	add	r0, r3
 800d868:	2300      	movs	r3, #0
 800d86a:	4288      	cmp	r0, r1
 800d86c:	d305      	bcc.n	800d87a <__copybits+0x40>
 800d86e:	bd70      	pop	{r4, r5, r6, pc}
 800d870:	f853 6b04 	ldr.w	r6, [r3], #4
 800d874:	f845 6f04 	str.w	r6, [r5, #4]!
 800d878:	e7eb      	b.n	800d852 <__copybits+0x18>
 800d87a:	f840 3b04 	str.w	r3, [r0], #4
 800d87e:	e7f4      	b.n	800d86a <__copybits+0x30>

0800d880 <__any_on>:
 800d880:	f100 0214 	add.w	r2, r0, #20
 800d884:	6900      	ldr	r0, [r0, #16]
 800d886:	114b      	asrs	r3, r1, #5
 800d888:	4298      	cmp	r0, r3
 800d88a:	b510      	push	{r4, lr}
 800d88c:	db11      	blt.n	800d8b2 <__any_on+0x32>
 800d88e:	dd0a      	ble.n	800d8a6 <__any_on+0x26>
 800d890:	f011 011f 	ands.w	r1, r1, #31
 800d894:	d007      	beq.n	800d8a6 <__any_on+0x26>
 800d896:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d89a:	fa24 f001 	lsr.w	r0, r4, r1
 800d89e:	fa00 f101 	lsl.w	r1, r0, r1
 800d8a2:	428c      	cmp	r4, r1
 800d8a4:	d10b      	bne.n	800d8be <__any_on+0x3e>
 800d8a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d803      	bhi.n	800d8b6 <__any_on+0x36>
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	bd10      	pop	{r4, pc}
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	e7f7      	b.n	800d8a6 <__any_on+0x26>
 800d8b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d8ba:	2900      	cmp	r1, #0
 800d8bc:	d0f5      	beq.n	800d8aa <__any_on+0x2a>
 800d8be:	2001      	movs	r0, #1
 800d8c0:	e7f6      	b.n	800d8b0 <__any_on+0x30>

0800d8c2 <_calloc_r>:
 800d8c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8c4:	fba1 2402 	umull	r2, r4, r1, r2
 800d8c8:	b94c      	cbnz	r4, 800d8de <_calloc_r+0x1c>
 800d8ca:	4611      	mov	r1, r2
 800d8cc:	9201      	str	r2, [sp, #4]
 800d8ce:	f000 f87b 	bl	800d9c8 <_malloc_r>
 800d8d2:	9a01      	ldr	r2, [sp, #4]
 800d8d4:	4605      	mov	r5, r0
 800d8d6:	b930      	cbnz	r0, 800d8e6 <_calloc_r+0x24>
 800d8d8:	4628      	mov	r0, r5
 800d8da:	b003      	add	sp, #12
 800d8dc:	bd30      	pop	{r4, r5, pc}
 800d8de:	220c      	movs	r2, #12
 800d8e0:	6002      	str	r2, [r0, #0]
 800d8e2:	2500      	movs	r5, #0
 800d8e4:	e7f8      	b.n	800d8d8 <_calloc_r+0x16>
 800d8e6:	4621      	mov	r1, r4
 800d8e8:	f7fc f8be 	bl	8009a68 <memset>
 800d8ec:	e7f4      	b.n	800d8d8 <_calloc_r+0x16>
	...

0800d8f0 <_free_r>:
 800d8f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8f2:	2900      	cmp	r1, #0
 800d8f4:	d044      	beq.n	800d980 <_free_r+0x90>
 800d8f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8fa:	9001      	str	r0, [sp, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f1a1 0404 	sub.w	r4, r1, #4
 800d902:	bfb8      	it	lt
 800d904:	18e4      	addlt	r4, r4, r3
 800d906:	f000 fc7f 	bl	800e208 <__malloc_lock>
 800d90a:	4a1e      	ldr	r2, [pc, #120]	; (800d984 <_free_r+0x94>)
 800d90c:	9801      	ldr	r0, [sp, #4]
 800d90e:	6813      	ldr	r3, [r2, #0]
 800d910:	b933      	cbnz	r3, 800d920 <_free_r+0x30>
 800d912:	6063      	str	r3, [r4, #4]
 800d914:	6014      	str	r4, [r2, #0]
 800d916:	b003      	add	sp, #12
 800d918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d91c:	f000 bc7a 	b.w	800e214 <__malloc_unlock>
 800d920:	42a3      	cmp	r3, r4
 800d922:	d908      	bls.n	800d936 <_free_r+0x46>
 800d924:	6825      	ldr	r5, [r4, #0]
 800d926:	1961      	adds	r1, r4, r5
 800d928:	428b      	cmp	r3, r1
 800d92a:	bf01      	itttt	eq
 800d92c:	6819      	ldreq	r1, [r3, #0]
 800d92e:	685b      	ldreq	r3, [r3, #4]
 800d930:	1949      	addeq	r1, r1, r5
 800d932:	6021      	streq	r1, [r4, #0]
 800d934:	e7ed      	b.n	800d912 <_free_r+0x22>
 800d936:	461a      	mov	r2, r3
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	b10b      	cbz	r3, 800d940 <_free_r+0x50>
 800d93c:	42a3      	cmp	r3, r4
 800d93e:	d9fa      	bls.n	800d936 <_free_r+0x46>
 800d940:	6811      	ldr	r1, [r2, #0]
 800d942:	1855      	adds	r5, r2, r1
 800d944:	42a5      	cmp	r5, r4
 800d946:	d10b      	bne.n	800d960 <_free_r+0x70>
 800d948:	6824      	ldr	r4, [r4, #0]
 800d94a:	4421      	add	r1, r4
 800d94c:	1854      	adds	r4, r2, r1
 800d94e:	42a3      	cmp	r3, r4
 800d950:	6011      	str	r1, [r2, #0]
 800d952:	d1e0      	bne.n	800d916 <_free_r+0x26>
 800d954:	681c      	ldr	r4, [r3, #0]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	6053      	str	r3, [r2, #4]
 800d95a:	4421      	add	r1, r4
 800d95c:	6011      	str	r1, [r2, #0]
 800d95e:	e7da      	b.n	800d916 <_free_r+0x26>
 800d960:	d902      	bls.n	800d968 <_free_r+0x78>
 800d962:	230c      	movs	r3, #12
 800d964:	6003      	str	r3, [r0, #0]
 800d966:	e7d6      	b.n	800d916 <_free_r+0x26>
 800d968:	6825      	ldr	r5, [r4, #0]
 800d96a:	1961      	adds	r1, r4, r5
 800d96c:	428b      	cmp	r3, r1
 800d96e:	bf04      	itt	eq
 800d970:	6819      	ldreq	r1, [r3, #0]
 800d972:	685b      	ldreq	r3, [r3, #4]
 800d974:	6063      	str	r3, [r4, #4]
 800d976:	bf04      	itt	eq
 800d978:	1949      	addeq	r1, r1, r5
 800d97a:	6021      	streq	r1, [r4, #0]
 800d97c:	6054      	str	r4, [r2, #4]
 800d97e:	e7ca      	b.n	800d916 <_free_r+0x26>
 800d980:	b003      	add	sp, #12
 800d982:	bd30      	pop	{r4, r5, pc}
 800d984:	20000990 	.word	0x20000990

0800d988 <sbrk_aligned>:
 800d988:	b570      	push	{r4, r5, r6, lr}
 800d98a:	4e0e      	ldr	r6, [pc, #56]	; (800d9c4 <sbrk_aligned+0x3c>)
 800d98c:	460c      	mov	r4, r1
 800d98e:	6831      	ldr	r1, [r6, #0]
 800d990:	4605      	mov	r5, r0
 800d992:	b911      	cbnz	r1, 800d99a <sbrk_aligned+0x12>
 800d994:	f000 fb4c 	bl	800e030 <_sbrk_r>
 800d998:	6030      	str	r0, [r6, #0]
 800d99a:	4621      	mov	r1, r4
 800d99c:	4628      	mov	r0, r5
 800d99e:	f000 fb47 	bl	800e030 <_sbrk_r>
 800d9a2:	1c43      	adds	r3, r0, #1
 800d9a4:	d00a      	beq.n	800d9bc <sbrk_aligned+0x34>
 800d9a6:	1cc4      	adds	r4, r0, #3
 800d9a8:	f024 0403 	bic.w	r4, r4, #3
 800d9ac:	42a0      	cmp	r0, r4
 800d9ae:	d007      	beq.n	800d9c0 <sbrk_aligned+0x38>
 800d9b0:	1a21      	subs	r1, r4, r0
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	f000 fb3c 	bl	800e030 <_sbrk_r>
 800d9b8:	3001      	adds	r0, #1
 800d9ba:	d101      	bne.n	800d9c0 <sbrk_aligned+0x38>
 800d9bc:	f04f 34ff 	mov.w	r4, #4294967295
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	bd70      	pop	{r4, r5, r6, pc}
 800d9c4:	20000994 	.word	0x20000994

0800d9c8 <_malloc_r>:
 800d9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9cc:	1ccd      	adds	r5, r1, #3
 800d9ce:	f025 0503 	bic.w	r5, r5, #3
 800d9d2:	3508      	adds	r5, #8
 800d9d4:	2d0c      	cmp	r5, #12
 800d9d6:	bf38      	it	cc
 800d9d8:	250c      	movcc	r5, #12
 800d9da:	2d00      	cmp	r5, #0
 800d9dc:	4607      	mov	r7, r0
 800d9de:	db01      	blt.n	800d9e4 <_malloc_r+0x1c>
 800d9e0:	42a9      	cmp	r1, r5
 800d9e2:	d905      	bls.n	800d9f0 <_malloc_r+0x28>
 800d9e4:	230c      	movs	r3, #12
 800d9e6:	603b      	str	r3, [r7, #0]
 800d9e8:	2600      	movs	r6, #0
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9f0:	4e2e      	ldr	r6, [pc, #184]	; (800daac <_malloc_r+0xe4>)
 800d9f2:	f000 fc09 	bl	800e208 <__malloc_lock>
 800d9f6:	6833      	ldr	r3, [r6, #0]
 800d9f8:	461c      	mov	r4, r3
 800d9fa:	bb34      	cbnz	r4, 800da4a <_malloc_r+0x82>
 800d9fc:	4629      	mov	r1, r5
 800d9fe:	4638      	mov	r0, r7
 800da00:	f7ff ffc2 	bl	800d988 <sbrk_aligned>
 800da04:	1c43      	adds	r3, r0, #1
 800da06:	4604      	mov	r4, r0
 800da08:	d14d      	bne.n	800daa6 <_malloc_r+0xde>
 800da0a:	6834      	ldr	r4, [r6, #0]
 800da0c:	4626      	mov	r6, r4
 800da0e:	2e00      	cmp	r6, #0
 800da10:	d140      	bne.n	800da94 <_malloc_r+0xcc>
 800da12:	6823      	ldr	r3, [r4, #0]
 800da14:	4631      	mov	r1, r6
 800da16:	4638      	mov	r0, r7
 800da18:	eb04 0803 	add.w	r8, r4, r3
 800da1c:	f000 fb08 	bl	800e030 <_sbrk_r>
 800da20:	4580      	cmp	r8, r0
 800da22:	d13a      	bne.n	800da9a <_malloc_r+0xd2>
 800da24:	6821      	ldr	r1, [r4, #0]
 800da26:	3503      	adds	r5, #3
 800da28:	1a6d      	subs	r5, r5, r1
 800da2a:	f025 0503 	bic.w	r5, r5, #3
 800da2e:	3508      	adds	r5, #8
 800da30:	2d0c      	cmp	r5, #12
 800da32:	bf38      	it	cc
 800da34:	250c      	movcc	r5, #12
 800da36:	4629      	mov	r1, r5
 800da38:	4638      	mov	r0, r7
 800da3a:	f7ff ffa5 	bl	800d988 <sbrk_aligned>
 800da3e:	3001      	adds	r0, #1
 800da40:	d02b      	beq.n	800da9a <_malloc_r+0xd2>
 800da42:	6823      	ldr	r3, [r4, #0]
 800da44:	442b      	add	r3, r5
 800da46:	6023      	str	r3, [r4, #0]
 800da48:	e00e      	b.n	800da68 <_malloc_r+0xa0>
 800da4a:	6822      	ldr	r2, [r4, #0]
 800da4c:	1b52      	subs	r2, r2, r5
 800da4e:	d41e      	bmi.n	800da8e <_malloc_r+0xc6>
 800da50:	2a0b      	cmp	r2, #11
 800da52:	d916      	bls.n	800da82 <_malloc_r+0xba>
 800da54:	1961      	adds	r1, r4, r5
 800da56:	42a3      	cmp	r3, r4
 800da58:	6025      	str	r5, [r4, #0]
 800da5a:	bf18      	it	ne
 800da5c:	6059      	strne	r1, [r3, #4]
 800da5e:	6863      	ldr	r3, [r4, #4]
 800da60:	bf08      	it	eq
 800da62:	6031      	streq	r1, [r6, #0]
 800da64:	5162      	str	r2, [r4, r5]
 800da66:	604b      	str	r3, [r1, #4]
 800da68:	4638      	mov	r0, r7
 800da6a:	f104 060b 	add.w	r6, r4, #11
 800da6e:	f000 fbd1 	bl	800e214 <__malloc_unlock>
 800da72:	f026 0607 	bic.w	r6, r6, #7
 800da76:	1d23      	adds	r3, r4, #4
 800da78:	1af2      	subs	r2, r6, r3
 800da7a:	d0b6      	beq.n	800d9ea <_malloc_r+0x22>
 800da7c:	1b9b      	subs	r3, r3, r6
 800da7e:	50a3      	str	r3, [r4, r2]
 800da80:	e7b3      	b.n	800d9ea <_malloc_r+0x22>
 800da82:	6862      	ldr	r2, [r4, #4]
 800da84:	42a3      	cmp	r3, r4
 800da86:	bf0c      	ite	eq
 800da88:	6032      	streq	r2, [r6, #0]
 800da8a:	605a      	strne	r2, [r3, #4]
 800da8c:	e7ec      	b.n	800da68 <_malloc_r+0xa0>
 800da8e:	4623      	mov	r3, r4
 800da90:	6864      	ldr	r4, [r4, #4]
 800da92:	e7b2      	b.n	800d9fa <_malloc_r+0x32>
 800da94:	4634      	mov	r4, r6
 800da96:	6876      	ldr	r6, [r6, #4]
 800da98:	e7b9      	b.n	800da0e <_malloc_r+0x46>
 800da9a:	230c      	movs	r3, #12
 800da9c:	603b      	str	r3, [r7, #0]
 800da9e:	4638      	mov	r0, r7
 800daa0:	f000 fbb8 	bl	800e214 <__malloc_unlock>
 800daa4:	e7a1      	b.n	800d9ea <_malloc_r+0x22>
 800daa6:	6025      	str	r5, [r4, #0]
 800daa8:	e7de      	b.n	800da68 <_malloc_r+0xa0>
 800daaa:	bf00      	nop
 800daac:	20000990 	.word	0x20000990

0800dab0 <__ssputs_r>:
 800dab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dab4:	688e      	ldr	r6, [r1, #8]
 800dab6:	429e      	cmp	r6, r3
 800dab8:	4682      	mov	sl, r0
 800daba:	460c      	mov	r4, r1
 800dabc:	4690      	mov	r8, r2
 800dabe:	461f      	mov	r7, r3
 800dac0:	d838      	bhi.n	800db34 <__ssputs_r+0x84>
 800dac2:	898a      	ldrh	r2, [r1, #12]
 800dac4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dac8:	d032      	beq.n	800db30 <__ssputs_r+0x80>
 800daca:	6825      	ldr	r5, [r4, #0]
 800dacc:	6909      	ldr	r1, [r1, #16]
 800dace:	eba5 0901 	sub.w	r9, r5, r1
 800dad2:	6965      	ldr	r5, [r4, #20]
 800dad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dad8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dadc:	3301      	adds	r3, #1
 800dade:	444b      	add	r3, r9
 800dae0:	106d      	asrs	r5, r5, #1
 800dae2:	429d      	cmp	r5, r3
 800dae4:	bf38      	it	cc
 800dae6:	461d      	movcc	r5, r3
 800dae8:	0553      	lsls	r3, r2, #21
 800daea:	d531      	bpl.n	800db50 <__ssputs_r+0xa0>
 800daec:	4629      	mov	r1, r5
 800daee:	f7ff ff6b 	bl	800d9c8 <_malloc_r>
 800daf2:	4606      	mov	r6, r0
 800daf4:	b950      	cbnz	r0, 800db0c <__ssputs_r+0x5c>
 800daf6:	230c      	movs	r3, #12
 800daf8:	f8ca 3000 	str.w	r3, [sl]
 800dafc:	89a3      	ldrh	r3, [r4, #12]
 800dafe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db02:	81a3      	strh	r3, [r4, #12]
 800db04:	f04f 30ff 	mov.w	r0, #4294967295
 800db08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db0c:	6921      	ldr	r1, [r4, #16]
 800db0e:	464a      	mov	r2, r9
 800db10:	f7fb ff9c 	bl	8009a4c <memcpy>
 800db14:	89a3      	ldrh	r3, [r4, #12]
 800db16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db1e:	81a3      	strh	r3, [r4, #12]
 800db20:	6126      	str	r6, [r4, #16]
 800db22:	6165      	str	r5, [r4, #20]
 800db24:	444e      	add	r6, r9
 800db26:	eba5 0509 	sub.w	r5, r5, r9
 800db2a:	6026      	str	r6, [r4, #0]
 800db2c:	60a5      	str	r5, [r4, #8]
 800db2e:	463e      	mov	r6, r7
 800db30:	42be      	cmp	r6, r7
 800db32:	d900      	bls.n	800db36 <__ssputs_r+0x86>
 800db34:	463e      	mov	r6, r7
 800db36:	6820      	ldr	r0, [r4, #0]
 800db38:	4632      	mov	r2, r6
 800db3a:	4641      	mov	r1, r8
 800db3c:	f000 fb4a 	bl	800e1d4 <memmove>
 800db40:	68a3      	ldr	r3, [r4, #8]
 800db42:	1b9b      	subs	r3, r3, r6
 800db44:	60a3      	str	r3, [r4, #8]
 800db46:	6823      	ldr	r3, [r4, #0]
 800db48:	4433      	add	r3, r6
 800db4a:	6023      	str	r3, [r4, #0]
 800db4c:	2000      	movs	r0, #0
 800db4e:	e7db      	b.n	800db08 <__ssputs_r+0x58>
 800db50:	462a      	mov	r2, r5
 800db52:	f000 fb65 	bl	800e220 <_realloc_r>
 800db56:	4606      	mov	r6, r0
 800db58:	2800      	cmp	r0, #0
 800db5a:	d1e1      	bne.n	800db20 <__ssputs_r+0x70>
 800db5c:	6921      	ldr	r1, [r4, #16]
 800db5e:	4650      	mov	r0, sl
 800db60:	f7ff fec6 	bl	800d8f0 <_free_r>
 800db64:	e7c7      	b.n	800daf6 <__ssputs_r+0x46>
	...

0800db68 <_svfiprintf_r>:
 800db68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db6c:	4698      	mov	r8, r3
 800db6e:	898b      	ldrh	r3, [r1, #12]
 800db70:	061b      	lsls	r3, r3, #24
 800db72:	b09d      	sub	sp, #116	; 0x74
 800db74:	4607      	mov	r7, r0
 800db76:	460d      	mov	r5, r1
 800db78:	4614      	mov	r4, r2
 800db7a:	d50e      	bpl.n	800db9a <_svfiprintf_r+0x32>
 800db7c:	690b      	ldr	r3, [r1, #16]
 800db7e:	b963      	cbnz	r3, 800db9a <_svfiprintf_r+0x32>
 800db80:	2140      	movs	r1, #64	; 0x40
 800db82:	f7ff ff21 	bl	800d9c8 <_malloc_r>
 800db86:	6028      	str	r0, [r5, #0]
 800db88:	6128      	str	r0, [r5, #16]
 800db8a:	b920      	cbnz	r0, 800db96 <_svfiprintf_r+0x2e>
 800db8c:	230c      	movs	r3, #12
 800db8e:	603b      	str	r3, [r7, #0]
 800db90:	f04f 30ff 	mov.w	r0, #4294967295
 800db94:	e0d1      	b.n	800dd3a <_svfiprintf_r+0x1d2>
 800db96:	2340      	movs	r3, #64	; 0x40
 800db98:	616b      	str	r3, [r5, #20]
 800db9a:	2300      	movs	r3, #0
 800db9c:	9309      	str	r3, [sp, #36]	; 0x24
 800db9e:	2320      	movs	r3, #32
 800dba0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dba4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dba8:	2330      	movs	r3, #48	; 0x30
 800dbaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd54 <_svfiprintf_r+0x1ec>
 800dbae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbb2:	f04f 0901 	mov.w	r9, #1
 800dbb6:	4623      	mov	r3, r4
 800dbb8:	469a      	mov	sl, r3
 800dbba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbbe:	b10a      	cbz	r2, 800dbc4 <_svfiprintf_r+0x5c>
 800dbc0:	2a25      	cmp	r2, #37	; 0x25
 800dbc2:	d1f9      	bne.n	800dbb8 <_svfiprintf_r+0x50>
 800dbc4:	ebba 0b04 	subs.w	fp, sl, r4
 800dbc8:	d00b      	beq.n	800dbe2 <_svfiprintf_r+0x7a>
 800dbca:	465b      	mov	r3, fp
 800dbcc:	4622      	mov	r2, r4
 800dbce:	4629      	mov	r1, r5
 800dbd0:	4638      	mov	r0, r7
 800dbd2:	f7ff ff6d 	bl	800dab0 <__ssputs_r>
 800dbd6:	3001      	adds	r0, #1
 800dbd8:	f000 80aa 	beq.w	800dd30 <_svfiprintf_r+0x1c8>
 800dbdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbde:	445a      	add	r2, fp
 800dbe0:	9209      	str	r2, [sp, #36]	; 0x24
 800dbe2:	f89a 3000 	ldrb.w	r3, [sl]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	f000 80a2 	beq.w	800dd30 <_svfiprintf_r+0x1c8>
 800dbec:	2300      	movs	r3, #0
 800dbee:	f04f 32ff 	mov.w	r2, #4294967295
 800dbf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbf6:	f10a 0a01 	add.w	sl, sl, #1
 800dbfa:	9304      	str	r3, [sp, #16]
 800dbfc:	9307      	str	r3, [sp, #28]
 800dbfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc02:	931a      	str	r3, [sp, #104]	; 0x68
 800dc04:	4654      	mov	r4, sl
 800dc06:	2205      	movs	r2, #5
 800dc08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc0c:	4851      	ldr	r0, [pc, #324]	; (800dd54 <_svfiprintf_r+0x1ec>)
 800dc0e:	f7f2 fae7 	bl	80001e0 <memchr>
 800dc12:	9a04      	ldr	r2, [sp, #16]
 800dc14:	b9d8      	cbnz	r0, 800dc4e <_svfiprintf_r+0xe6>
 800dc16:	06d0      	lsls	r0, r2, #27
 800dc18:	bf44      	itt	mi
 800dc1a:	2320      	movmi	r3, #32
 800dc1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc20:	0711      	lsls	r1, r2, #28
 800dc22:	bf44      	itt	mi
 800dc24:	232b      	movmi	r3, #43	; 0x2b
 800dc26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc2a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc2e:	2b2a      	cmp	r3, #42	; 0x2a
 800dc30:	d015      	beq.n	800dc5e <_svfiprintf_r+0xf6>
 800dc32:	9a07      	ldr	r2, [sp, #28]
 800dc34:	4654      	mov	r4, sl
 800dc36:	2000      	movs	r0, #0
 800dc38:	f04f 0c0a 	mov.w	ip, #10
 800dc3c:	4621      	mov	r1, r4
 800dc3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc42:	3b30      	subs	r3, #48	; 0x30
 800dc44:	2b09      	cmp	r3, #9
 800dc46:	d94e      	bls.n	800dce6 <_svfiprintf_r+0x17e>
 800dc48:	b1b0      	cbz	r0, 800dc78 <_svfiprintf_r+0x110>
 800dc4a:	9207      	str	r2, [sp, #28]
 800dc4c:	e014      	b.n	800dc78 <_svfiprintf_r+0x110>
 800dc4e:	eba0 0308 	sub.w	r3, r0, r8
 800dc52:	fa09 f303 	lsl.w	r3, r9, r3
 800dc56:	4313      	orrs	r3, r2
 800dc58:	9304      	str	r3, [sp, #16]
 800dc5a:	46a2      	mov	sl, r4
 800dc5c:	e7d2      	b.n	800dc04 <_svfiprintf_r+0x9c>
 800dc5e:	9b03      	ldr	r3, [sp, #12]
 800dc60:	1d19      	adds	r1, r3, #4
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	9103      	str	r1, [sp, #12]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	bfbb      	ittet	lt
 800dc6a:	425b      	neglt	r3, r3
 800dc6c:	f042 0202 	orrlt.w	r2, r2, #2
 800dc70:	9307      	strge	r3, [sp, #28]
 800dc72:	9307      	strlt	r3, [sp, #28]
 800dc74:	bfb8      	it	lt
 800dc76:	9204      	strlt	r2, [sp, #16]
 800dc78:	7823      	ldrb	r3, [r4, #0]
 800dc7a:	2b2e      	cmp	r3, #46	; 0x2e
 800dc7c:	d10c      	bne.n	800dc98 <_svfiprintf_r+0x130>
 800dc7e:	7863      	ldrb	r3, [r4, #1]
 800dc80:	2b2a      	cmp	r3, #42	; 0x2a
 800dc82:	d135      	bne.n	800dcf0 <_svfiprintf_r+0x188>
 800dc84:	9b03      	ldr	r3, [sp, #12]
 800dc86:	1d1a      	adds	r2, r3, #4
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	9203      	str	r2, [sp, #12]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	bfb8      	it	lt
 800dc90:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc94:	3402      	adds	r4, #2
 800dc96:	9305      	str	r3, [sp, #20]
 800dc98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dd64 <_svfiprintf_r+0x1fc>
 800dc9c:	7821      	ldrb	r1, [r4, #0]
 800dc9e:	2203      	movs	r2, #3
 800dca0:	4650      	mov	r0, sl
 800dca2:	f7f2 fa9d 	bl	80001e0 <memchr>
 800dca6:	b140      	cbz	r0, 800dcba <_svfiprintf_r+0x152>
 800dca8:	2340      	movs	r3, #64	; 0x40
 800dcaa:	eba0 000a 	sub.w	r0, r0, sl
 800dcae:	fa03 f000 	lsl.w	r0, r3, r0
 800dcb2:	9b04      	ldr	r3, [sp, #16]
 800dcb4:	4303      	orrs	r3, r0
 800dcb6:	3401      	adds	r4, #1
 800dcb8:	9304      	str	r3, [sp, #16]
 800dcba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcbe:	4826      	ldr	r0, [pc, #152]	; (800dd58 <_svfiprintf_r+0x1f0>)
 800dcc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcc4:	2206      	movs	r2, #6
 800dcc6:	f7f2 fa8b 	bl	80001e0 <memchr>
 800dcca:	2800      	cmp	r0, #0
 800dccc:	d038      	beq.n	800dd40 <_svfiprintf_r+0x1d8>
 800dcce:	4b23      	ldr	r3, [pc, #140]	; (800dd5c <_svfiprintf_r+0x1f4>)
 800dcd0:	bb1b      	cbnz	r3, 800dd1a <_svfiprintf_r+0x1b2>
 800dcd2:	9b03      	ldr	r3, [sp, #12]
 800dcd4:	3307      	adds	r3, #7
 800dcd6:	f023 0307 	bic.w	r3, r3, #7
 800dcda:	3308      	adds	r3, #8
 800dcdc:	9303      	str	r3, [sp, #12]
 800dcde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dce0:	4433      	add	r3, r6
 800dce2:	9309      	str	r3, [sp, #36]	; 0x24
 800dce4:	e767      	b.n	800dbb6 <_svfiprintf_r+0x4e>
 800dce6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcea:	460c      	mov	r4, r1
 800dcec:	2001      	movs	r0, #1
 800dcee:	e7a5      	b.n	800dc3c <_svfiprintf_r+0xd4>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	3401      	adds	r4, #1
 800dcf4:	9305      	str	r3, [sp, #20]
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	f04f 0c0a 	mov.w	ip, #10
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd02:	3a30      	subs	r2, #48	; 0x30
 800dd04:	2a09      	cmp	r2, #9
 800dd06:	d903      	bls.n	800dd10 <_svfiprintf_r+0x1a8>
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d0c5      	beq.n	800dc98 <_svfiprintf_r+0x130>
 800dd0c:	9105      	str	r1, [sp, #20]
 800dd0e:	e7c3      	b.n	800dc98 <_svfiprintf_r+0x130>
 800dd10:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd14:	4604      	mov	r4, r0
 800dd16:	2301      	movs	r3, #1
 800dd18:	e7f0      	b.n	800dcfc <_svfiprintf_r+0x194>
 800dd1a:	ab03      	add	r3, sp, #12
 800dd1c:	9300      	str	r3, [sp, #0]
 800dd1e:	462a      	mov	r2, r5
 800dd20:	4b0f      	ldr	r3, [pc, #60]	; (800dd60 <_svfiprintf_r+0x1f8>)
 800dd22:	a904      	add	r1, sp, #16
 800dd24:	4638      	mov	r0, r7
 800dd26:	f7fb ff47 	bl	8009bb8 <_printf_float>
 800dd2a:	1c42      	adds	r2, r0, #1
 800dd2c:	4606      	mov	r6, r0
 800dd2e:	d1d6      	bne.n	800dcde <_svfiprintf_r+0x176>
 800dd30:	89ab      	ldrh	r3, [r5, #12]
 800dd32:	065b      	lsls	r3, r3, #25
 800dd34:	f53f af2c 	bmi.w	800db90 <_svfiprintf_r+0x28>
 800dd38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd3a:	b01d      	add	sp, #116	; 0x74
 800dd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd40:	ab03      	add	r3, sp, #12
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	462a      	mov	r2, r5
 800dd46:	4b06      	ldr	r3, [pc, #24]	; (800dd60 <_svfiprintf_r+0x1f8>)
 800dd48:	a904      	add	r1, sp, #16
 800dd4a:	4638      	mov	r0, r7
 800dd4c:	f7fc f9d8 	bl	800a100 <_printf_i>
 800dd50:	e7eb      	b.n	800dd2a <_svfiprintf_r+0x1c2>
 800dd52:	bf00      	nop
 800dd54:	0800e994 	.word	0x0800e994
 800dd58:	0800e99e 	.word	0x0800e99e
 800dd5c:	08009bb9 	.word	0x08009bb9
 800dd60:	0800dab1 	.word	0x0800dab1
 800dd64:	0800e99a 	.word	0x0800e99a

0800dd68 <__sfputc_r>:
 800dd68:	6893      	ldr	r3, [r2, #8]
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	b410      	push	{r4}
 800dd70:	6093      	str	r3, [r2, #8]
 800dd72:	da08      	bge.n	800dd86 <__sfputc_r+0x1e>
 800dd74:	6994      	ldr	r4, [r2, #24]
 800dd76:	42a3      	cmp	r3, r4
 800dd78:	db01      	blt.n	800dd7e <__sfputc_r+0x16>
 800dd7a:	290a      	cmp	r1, #10
 800dd7c:	d103      	bne.n	800dd86 <__sfputc_r+0x1e>
 800dd7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd82:	f7fd bbc5 	b.w	800b510 <__swbuf_r>
 800dd86:	6813      	ldr	r3, [r2, #0]
 800dd88:	1c58      	adds	r0, r3, #1
 800dd8a:	6010      	str	r0, [r2, #0]
 800dd8c:	7019      	strb	r1, [r3, #0]
 800dd8e:	4608      	mov	r0, r1
 800dd90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd94:	4770      	bx	lr

0800dd96 <__sfputs_r>:
 800dd96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd98:	4606      	mov	r6, r0
 800dd9a:	460f      	mov	r7, r1
 800dd9c:	4614      	mov	r4, r2
 800dd9e:	18d5      	adds	r5, r2, r3
 800dda0:	42ac      	cmp	r4, r5
 800dda2:	d101      	bne.n	800dda8 <__sfputs_r+0x12>
 800dda4:	2000      	movs	r0, #0
 800dda6:	e007      	b.n	800ddb8 <__sfputs_r+0x22>
 800dda8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddac:	463a      	mov	r2, r7
 800ddae:	4630      	mov	r0, r6
 800ddb0:	f7ff ffda 	bl	800dd68 <__sfputc_r>
 800ddb4:	1c43      	adds	r3, r0, #1
 800ddb6:	d1f3      	bne.n	800dda0 <__sfputs_r+0xa>
 800ddb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddbc <_vfiprintf_r>:
 800ddbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc0:	460d      	mov	r5, r1
 800ddc2:	b09d      	sub	sp, #116	; 0x74
 800ddc4:	4614      	mov	r4, r2
 800ddc6:	4698      	mov	r8, r3
 800ddc8:	4606      	mov	r6, r0
 800ddca:	b118      	cbz	r0, 800ddd4 <_vfiprintf_r+0x18>
 800ddcc:	6983      	ldr	r3, [r0, #24]
 800ddce:	b90b      	cbnz	r3, 800ddd4 <_vfiprintf_r+0x18>
 800ddd0:	f7fe fc12 	bl	800c5f8 <__sinit>
 800ddd4:	4b89      	ldr	r3, [pc, #548]	; (800dffc <_vfiprintf_r+0x240>)
 800ddd6:	429d      	cmp	r5, r3
 800ddd8:	d11b      	bne.n	800de12 <_vfiprintf_r+0x56>
 800ddda:	6875      	ldr	r5, [r6, #4]
 800dddc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddde:	07d9      	lsls	r1, r3, #31
 800dde0:	d405      	bmi.n	800ddee <_vfiprintf_r+0x32>
 800dde2:	89ab      	ldrh	r3, [r5, #12]
 800dde4:	059a      	lsls	r2, r3, #22
 800dde6:	d402      	bmi.n	800ddee <_vfiprintf_r+0x32>
 800dde8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddea:	f7ff f828 	bl	800ce3e <__retarget_lock_acquire_recursive>
 800ddee:	89ab      	ldrh	r3, [r5, #12]
 800ddf0:	071b      	lsls	r3, r3, #28
 800ddf2:	d501      	bpl.n	800ddf8 <_vfiprintf_r+0x3c>
 800ddf4:	692b      	ldr	r3, [r5, #16]
 800ddf6:	b9eb      	cbnz	r3, 800de34 <_vfiprintf_r+0x78>
 800ddf8:	4629      	mov	r1, r5
 800ddfa:	4630      	mov	r0, r6
 800ddfc:	f7fd fbda 	bl	800b5b4 <__swsetup_r>
 800de00:	b1c0      	cbz	r0, 800de34 <_vfiprintf_r+0x78>
 800de02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de04:	07dc      	lsls	r4, r3, #31
 800de06:	d50e      	bpl.n	800de26 <_vfiprintf_r+0x6a>
 800de08:	f04f 30ff 	mov.w	r0, #4294967295
 800de0c:	b01d      	add	sp, #116	; 0x74
 800de0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de12:	4b7b      	ldr	r3, [pc, #492]	; (800e000 <_vfiprintf_r+0x244>)
 800de14:	429d      	cmp	r5, r3
 800de16:	d101      	bne.n	800de1c <_vfiprintf_r+0x60>
 800de18:	68b5      	ldr	r5, [r6, #8]
 800de1a:	e7df      	b.n	800dddc <_vfiprintf_r+0x20>
 800de1c:	4b79      	ldr	r3, [pc, #484]	; (800e004 <_vfiprintf_r+0x248>)
 800de1e:	429d      	cmp	r5, r3
 800de20:	bf08      	it	eq
 800de22:	68f5      	ldreq	r5, [r6, #12]
 800de24:	e7da      	b.n	800dddc <_vfiprintf_r+0x20>
 800de26:	89ab      	ldrh	r3, [r5, #12]
 800de28:	0598      	lsls	r0, r3, #22
 800de2a:	d4ed      	bmi.n	800de08 <_vfiprintf_r+0x4c>
 800de2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de2e:	f7ff f807 	bl	800ce40 <__retarget_lock_release_recursive>
 800de32:	e7e9      	b.n	800de08 <_vfiprintf_r+0x4c>
 800de34:	2300      	movs	r3, #0
 800de36:	9309      	str	r3, [sp, #36]	; 0x24
 800de38:	2320      	movs	r3, #32
 800de3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800de42:	2330      	movs	r3, #48	; 0x30
 800de44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e008 <_vfiprintf_r+0x24c>
 800de48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de4c:	f04f 0901 	mov.w	r9, #1
 800de50:	4623      	mov	r3, r4
 800de52:	469a      	mov	sl, r3
 800de54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de58:	b10a      	cbz	r2, 800de5e <_vfiprintf_r+0xa2>
 800de5a:	2a25      	cmp	r2, #37	; 0x25
 800de5c:	d1f9      	bne.n	800de52 <_vfiprintf_r+0x96>
 800de5e:	ebba 0b04 	subs.w	fp, sl, r4
 800de62:	d00b      	beq.n	800de7c <_vfiprintf_r+0xc0>
 800de64:	465b      	mov	r3, fp
 800de66:	4622      	mov	r2, r4
 800de68:	4629      	mov	r1, r5
 800de6a:	4630      	mov	r0, r6
 800de6c:	f7ff ff93 	bl	800dd96 <__sfputs_r>
 800de70:	3001      	adds	r0, #1
 800de72:	f000 80aa 	beq.w	800dfca <_vfiprintf_r+0x20e>
 800de76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de78:	445a      	add	r2, fp
 800de7a:	9209      	str	r2, [sp, #36]	; 0x24
 800de7c:	f89a 3000 	ldrb.w	r3, [sl]
 800de80:	2b00      	cmp	r3, #0
 800de82:	f000 80a2 	beq.w	800dfca <_vfiprintf_r+0x20e>
 800de86:	2300      	movs	r3, #0
 800de88:	f04f 32ff 	mov.w	r2, #4294967295
 800de8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de90:	f10a 0a01 	add.w	sl, sl, #1
 800de94:	9304      	str	r3, [sp, #16]
 800de96:	9307      	str	r3, [sp, #28]
 800de98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de9c:	931a      	str	r3, [sp, #104]	; 0x68
 800de9e:	4654      	mov	r4, sl
 800dea0:	2205      	movs	r2, #5
 800dea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dea6:	4858      	ldr	r0, [pc, #352]	; (800e008 <_vfiprintf_r+0x24c>)
 800dea8:	f7f2 f99a 	bl	80001e0 <memchr>
 800deac:	9a04      	ldr	r2, [sp, #16]
 800deae:	b9d8      	cbnz	r0, 800dee8 <_vfiprintf_r+0x12c>
 800deb0:	06d1      	lsls	r1, r2, #27
 800deb2:	bf44      	itt	mi
 800deb4:	2320      	movmi	r3, #32
 800deb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deba:	0713      	lsls	r3, r2, #28
 800debc:	bf44      	itt	mi
 800debe:	232b      	movmi	r3, #43	; 0x2b
 800dec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dec4:	f89a 3000 	ldrb.w	r3, [sl]
 800dec8:	2b2a      	cmp	r3, #42	; 0x2a
 800deca:	d015      	beq.n	800def8 <_vfiprintf_r+0x13c>
 800decc:	9a07      	ldr	r2, [sp, #28]
 800dece:	4654      	mov	r4, sl
 800ded0:	2000      	movs	r0, #0
 800ded2:	f04f 0c0a 	mov.w	ip, #10
 800ded6:	4621      	mov	r1, r4
 800ded8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dedc:	3b30      	subs	r3, #48	; 0x30
 800dede:	2b09      	cmp	r3, #9
 800dee0:	d94e      	bls.n	800df80 <_vfiprintf_r+0x1c4>
 800dee2:	b1b0      	cbz	r0, 800df12 <_vfiprintf_r+0x156>
 800dee4:	9207      	str	r2, [sp, #28]
 800dee6:	e014      	b.n	800df12 <_vfiprintf_r+0x156>
 800dee8:	eba0 0308 	sub.w	r3, r0, r8
 800deec:	fa09 f303 	lsl.w	r3, r9, r3
 800def0:	4313      	orrs	r3, r2
 800def2:	9304      	str	r3, [sp, #16]
 800def4:	46a2      	mov	sl, r4
 800def6:	e7d2      	b.n	800de9e <_vfiprintf_r+0xe2>
 800def8:	9b03      	ldr	r3, [sp, #12]
 800defa:	1d19      	adds	r1, r3, #4
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	9103      	str	r1, [sp, #12]
 800df00:	2b00      	cmp	r3, #0
 800df02:	bfbb      	ittet	lt
 800df04:	425b      	neglt	r3, r3
 800df06:	f042 0202 	orrlt.w	r2, r2, #2
 800df0a:	9307      	strge	r3, [sp, #28]
 800df0c:	9307      	strlt	r3, [sp, #28]
 800df0e:	bfb8      	it	lt
 800df10:	9204      	strlt	r2, [sp, #16]
 800df12:	7823      	ldrb	r3, [r4, #0]
 800df14:	2b2e      	cmp	r3, #46	; 0x2e
 800df16:	d10c      	bne.n	800df32 <_vfiprintf_r+0x176>
 800df18:	7863      	ldrb	r3, [r4, #1]
 800df1a:	2b2a      	cmp	r3, #42	; 0x2a
 800df1c:	d135      	bne.n	800df8a <_vfiprintf_r+0x1ce>
 800df1e:	9b03      	ldr	r3, [sp, #12]
 800df20:	1d1a      	adds	r2, r3, #4
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	9203      	str	r2, [sp, #12]
 800df26:	2b00      	cmp	r3, #0
 800df28:	bfb8      	it	lt
 800df2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800df2e:	3402      	adds	r4, #2
 800df30:	9305      	str	r3, [sp, #20]
 800df32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e018 <_vfiprintf_r+0x25c>
 800df36:	7821      	ldrb	r1, [r4, #0]
 800df38:	2203      	movs	r2, #3
 800df3a:	4650      	mov	r0, sl
 800df3c:	f7f2 f950 	bl	80001e0 <memchr>
 800df40:	b140      	cbz	r0, 800df54 <_vfiprintf_r+0x198>
 800df42:	2340      	movs	r3, #64	; 0x40
 800df44:	eba0 000a 	sub.w	r0, r0, sl
 800df48:	fa03 f000 	lsl.w	r0, r3, r0
 800df4c:	9b04      	ldr	r3, [sp, #16]
 800df4e:	4303      	orrs	r3, r0
 800df50:	3401      	adds	r4, #1
 800df52:	9304      	str	r3, [sp, #16]
 800df54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df58:	482c      	ldr	r0, [pc, #176]	; (800e00c <_vfiprintf_r+0x250>)
 800df5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df5e:	2206      	movs	r2, #6
 800df60:	f7f2 f93e 	bl	80001e0 <memchr>
 800df64:	2800      	cmp	r0, #0
 800df66:	d03f      	beq.n	800dfe8 <_vfiprintf_r+0x22c>
 800df68:	4b29      	ldr	r3, [pc, #164]	; (800e010 <_vfiprintf_r+0x254>)
 800df6a:	bb1b      	cbnz	r3, 800dfb4 <_vfiprintf_r+0x1f8>
 800df6c:	9b03      	ldr	r3, [sp, #12]
 800df6e:	3307      	adds	r3, #7
 800df70:	f023 0307 	bic.w	r3, r3, #7
 800df74:	3308      	adds	r3, #8
 800df76:	9303      	str	r3, [sp, #12]
 800df78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df7a:	443b      	add	r3, r7
 800df7c:	9309      	str	r3, [sp, #36]	; 0x24
 800df7e:	e767      	b.n	800de50 <_vfiprintf_r+0x94>
 800df80:	fb0c 3202 	mla	r2, ip, r2, r3
 800df84:	460c      	mov	r4, r1
 800df86:	2001      	movs	r0, #1
 800df88:	e7a5      	b.n	800ded6 <_vfiprintf_r+0x11a>
 800df8a:	2300      	movs	r3, #0
 800df8c:	3401      	adds	r4, #1
 800df8e:	9305      	str	r3, [sp, #20]
 800df90:	4619      	mov	r1, r3
 800df92:	f04f 0c0a 	mov.w	ip, #10
 800df96:	4620      	mov	r0, r4
 800df98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df9c:	3a30      	subs	r2, #48	; 0x30
 800df9e:	2a09      	cmp	r2, #9
 800dfa0:	d903      	bls.n	800dfaa <_vfiprintf_r+0x1ee>
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d0c5      	beq.n	800df32 <_vfiprintf_r+0x176>
 800dfa6:	9105      	str	r1, [sp, #20]
 800dfa8:	e7c3      	b.n	800df32 <_vfiprintf_r+0x176>
 800dfaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfae:	4604      	mov	r4, r0
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	e7f0      	b.n	800df96 <_vfiprintf_r+0x1da>
 800dfb4:	ab03      	add	r3, sp, #12
 800dfb6:	9300      	str	r3, [sp, #0]
 800dfb8:	462a      	mov	r2, r5
 800dfba:	4b16      	ldr	r3, [pc, #88]	; (800e014 <_vfiprintf_r+0x258>)
 800dfbc:	a904      	add	r1, sp, #16
 800dfbe:	4630      	mov	r0, r6
 800dfc0:	f7fb fdfa 	bl	8009bb8 <_printf_float>
 800dfc4:	4607      	mov	r7, r0
 800dfc6:	1c78      	adds	r0, r7, #1
 800dfc8:	d1d6      	bne.n	800df78 <_vfiprintf_r+0x1bc>
 800dfca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfcc:	07d9      	lsls	r1, r3, #31
 800dfce:	d405      	bmi.n	800dfdc <_vfiprintf_r+0x220>
 800dfd0:	89ab      	ldrh	r3, [r5, #12]
 800dfd2:	059a      	lsls	r2, r3, #22
 800dfd4:	d402      	bmi.n	800dfdc <_vfiprintf_r+0x220>
 800dfd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfd8:	f7fe ff32 	bl	800ce40 <__retarget_lock_release_recursive>
 800dfdc:	89ab      	ldrh	r3, [r5, #12]
 800dfde:	065b      	lsls	r3, r3, #25
 800dfe0:	f53f af12 	bmi.w	800de08 <_vfiprintf_r+0x4c>
 800dfe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfe6:	e711      	b.n	800de0c <_vfiprintf_r+0x50>
 800dfe8:	ab03      	add	r3, sp, #12
 800dfea:	9300      	str	r3, [sp, #0]
 800dfec:	462a      	mov	r2, r5
 800dfee:	4b09      	ldr	r3, [pc, #36]	; (800e014 <_vfiprintf_r+0x258>)
 800dff0:	a904      	add	r1, sp, #16
 800dff2:	4630      	mov	r0, r6
 800dff4:	f7fc f884 	bl	800a100 <_printf_i>
 800dff8:	e7e4      	b.n	800dfc4 <_vfiprintf_r+0x208>
 800dffa:	bf00      	nop
 800dffc:	0800e780 	.word	0x0800e780
 800e000:	0800e7a0 	.word	0x0800e7a0
 800e004:	0800e760 	.word	0x0800e760
 800e008:	0800e994 	.word	0x0800e994
 800e00c:	0800e99e 	.word	0x0800e99e
 800e010:	08009bb9 	.word	0x08009bb9
 800e014:	0800dd97 	.word	0x0800dd97
 800e018:	0800e99a 	.word	0x0800e99a
 800e01c:	00000000 	.word	0x00000000

0800e020 <nan>:
 800e020:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e028 <nan+0x8>
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop
 800e028:	00000000 	.word	0x00000000
 800e02c:	7ff80000 	.word	0x7ff80000

0800e030 <_sbrk_r>:
 800e030:	b538      	push	{r3, r4, r5, lr}
 800e032:	4d06      	ldr	r5, [pc, #24]	; (800e04c <_sbrk_r+0x1c>)
 800e034:	2300      	movs	r3, #0
 800e036:	4604      	mov	r4, r0
 800e038:	4608      	mov	r0, r1
 800e03a:	602b      	str	r3, [r5, #0]
 800e03c:	f7f5 fdf8 	bl	8003c30 <_sbrk>
 800e040:	1c43      	adds	r3, r0, #1
 800e042:	d102      	bne.n	800e04a <_sbrk_r+0x1a>
 800e044:	682b      	ldr	r3, [r5, #0]
 800e046:	b103      	cbz	r3, 800e04a <_sbrk_r+0x1a>
 800e048:	6023      	str	r3, [r4, #0]
 800e04a:	bd38      	pop	{r3, r4, r5, pc}
 800e04c:	20000998 	.word	0x20000998

0800e050 <__sread>:
 800e050:	b510      	push	{r4, lr}
 800e052:	460c      	mov	r4, r1
 800e054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e058:	f000 f912 	bl	800e280 <_read_r>
 800e05c:	2800      	cmp	r0, #0
 800e05e:	bfab      	itete	ge
 800e060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e062:	89a3      	ldrhlt	r3, [r4, #12]
 800e064:	181b      	addge	r3, r3, r0
 800e066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e06a:	bfac      	ite	ge
 800e06c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e06e:	81a3      	strhlt	r3, [r4, #12]
 800e070:	bd10      	pop	{r4, pc}

0800e072 <__swrite>:
 800e072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e076:	461f      	mov	r7, r3
 800e078:	898b      	ldrh	r3, [r1, #12]
 800e07a:	05db      	lsls	r3, r3, #23
 800e07c:	4605      	mov	r5, r0
 800e07e:	460c      	mov	r4, r1
 800e080:	4616      	mov	r6, r2
 800e082:	d505      	bpl.n	800e090 <__swrite+0x1e>
 800e084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e088:	2302      	movs	r3, #2
 800e08a:	2200      	movs	r2, #0
 800e08c:	f000 f890 	bl	800e1b0 <_lseek_r>
 800e090:	89a3      	ldrh	r3, [r4, #12]
 800e092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e09a:	81a3      	strh	r3, [r4, #12]
 800e09c:	4632      	mov	r2, r6
 800e09e:	463b      	mov	r3, r7
 800e0a0:	4628      	mov	r0, r5
 800e0a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0a6:	f000 b837 	b.w	800e118 <_write_r>

0800e0aa <__sseek>:
 800e0aa:	b510      	push	{r4, lr}
 800e0ac:	460c      	mov	r4, r1
 800e0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0b2:	f000 f87d 	bl	800e1b0 <_lseek_r>
 800e0b6:	1c43      	adds	r3, r0, #1
 800e0b8:	89a3      	ldrh	r3, [r4, #12]
 800e0ba:	bf15      	itete	ne
 800e0bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e0be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e0c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e0c6:	81a3      	strheq	r3, [r4, #12]
 800e0c8:	bf18      	it	ne
 800e0ca:	81a3      	strhne	r3, [r4, #12]
 800e0cc:	bd10      	pop	{r4, pc}

0800e0ce <__sclose>:
 800e0ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0d2:	f000 b83b 	b.w	800e14c <_close_r>

0800e0d6 <strncmp>:
 800e0d6:	b510      	push	{r4, lr}
 800e0d8:	b17a      	cbz	r2, 800e0fa <strncmp+0x24>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	3901      	subs	r1, #1
 800e0de:	1884      	adds	r4, r0, r2
 800e0e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e0e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e0e8:	4290      	cmp	r0, r2
 800e0ea:	d101      	bne.n	800e0f0 <strncmp+0x1a>
 800e0ec:	42a3      	cmp	r3, r4
 800e0ee:	d101      	bne.n	800e0f4 <strncmp+0x1e>
 800e0f0:	1a80      	subs	r0, r0, r2
 800e0f2:	bd10      	pop	{r4, pc}
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	d1f3      	bne.n	800e0e0 <strncmp+0xa>
 800e0f8:	e7fa      	b.n	800e0f0 <strncmp+0x1a>
 800e0fa:	4610      	mov	r0, r2
 800e0fc:	e7f9      	b.n	800e0f2 <strncmp+0x1c>

0800e0fe <__ascii_wctomb>:
 800e0fe:	b149      	cbz	r1, 800e114 <__ascii_wctomb+0x16>
 800e100:	2aff      	cmp	r2, #255	; 0xff
 800e102:	bf85      	ittet	hi
 800e104:	238a      	movhi	r3, #138	; 0x8a
 800e106:	6003      	strhi	r3, [r0, #0]
 800e108:	700a      	strbls	r2, [r1, #0]
 800e10a:	f04f 30ff 	movhi.w	r0, #4294967295
 800e10e:	bf98      	it	ls
 800e110:	2001      	movls	r0, #1
 800e112:	4770      	bx	lr
 800e114:	4608      	mov	r0, r1
 800e116:	4770      	bx	lr

0800e118 <_write_r>:
 800e118:	b538      	push	{r3, r4, r5, lr}
 800e11a:	4d07      	ldr	r5, [pc, #28]	; (800e138 <_write_r+0x20>)
 800e11c:	4604      	mov	r4, r0
 800e11e:	4608      	mov	r0, r1
 800e120:	4611      	mov	r1, r2
 800e122:	2200      	movs	r2, #0
 800e124:	602a      	str	r2, [r5, #0]
 800e126:	461a      	mov	r2, r3
 800e128:	f7f5 fd31 	bl	8003b8e <_write>
 800e12c:	1c43      	adds	r3, r0, #1
 800e12e:	d102      	bne.n	800e136 <_write_r+0x1e>
 800e130:	682b      	ldr	r3, [r5, #0]
 800e132:	b103      	cbz	r3, 800e136 <_write_r+0x1e>
 800e134:	6023      	str	r3, [r4, #0]
 800e136:	bd38      	pop	{r3, r4, r5, pc}
 800e138:	20000998 	.word	0x20000998

0800e13c <abort>:
 800e13c:	b508      	push	{r3, lr}
 800e13e:	2006      	movs	r0, #6
 800e140:	f000 f8d8 	bl	800e2f4 <raise>
 800e144:	2001      	movs	r0, #1
 800e146:	f7f5 fcfb 	bl	8003b40 <_exit>
	...

0800e14c <_close_r>:
 800e14c:	b538      	push	{r3, r4, r5, lr}
 800e14e:	4d06      	ldr	r5, [pc, #24]	; (800e168 <_close_r+0x1c>)
 800e150:	2300      	movs	r3, #0
 800e152:	4604      	mov	r4, r0
 800e154:	4608      	mov	r0, r1
 800e156:	602b      	str	r3, [r5, #0]
 800e158:	f7f5 fd35 	bl	8003bc6 <_close>
 800e15c:	1c43      	adds	r3, r0, #1
 800e15e:	d102      	bne.n	800e166 <_close_r+0x1a>
 800e160:	682b      	ldr	r3, [r5, #0]
 800e162:	b103      	cbz	r3, 800e166 <_close_r+0x1a>
 800e164:	6023      	str	r3, [r4, #0]
 800e166:	bd38      	pop	{r3, r4, r5, pc}
 800e168:	20000998 	.word	0x20000998

0800e16c <_fstat_r>:
 800e16c:	b538      	push	{r3, r4, r5, lr}
 800e16e:	4d07      	ldr	r5, [pc, #28]	; (800e18c <_fstat_r+0x20>)
 800e170:	2300      	movs	r3, #0
 800e172:	4604      	mov	r4, r0
 800e174:	4608      	mov	r0, r1
 800e176:	4611      	mov	r1, r2
 800e178:	602b      	str	r3, [r5, #0]
 800e17a:	f7f5 fd30 	bl	8003bde <_fstat>
 800e17e:	1c43      	adds	r3, r0, #1
 800e180:	d102      	bne.n	800e188 <_fstat_r+0x1c>
 800e182:	682b      	ldr	r3, [r5, #0]
 800e184:	b103      	cbz	r3, 800e188 <_fstat_r+0x1c>
 800e186:	6023      	str	r3, [r4, #0]
 800e188:	bd38      	pop	{r3, r4, r5, pc}
 800e18a:	bf00      	nop
 800e18c:	20000998 	.word	0x20000998

0800e190 <_isatty_r>:
 800e190:	b538      	push	{r3, r4, r5, lr}
 800e192:	4d06      	ldr	r5, [pc, #24]	; (800e1ac <_isatty_r+0x1c>)
 800e194:	2300      	movs	r3, #0
 800e196:	4604      	mov	r4, r0
 800e198:	4608      	mov	r0, r1
 800e19a:	602b      	str	r3, [r5, #0]
 800e19c:	f7f5 fd2f 	bl	8003bfe <_isatty>
 800e1a0:	1c43      	adds	r3, r0, #1
 800e1a2:	d102      	bne.n	800e1aa <_isatty_r+0x1a>
 800e1a4:	682b      	ldr	r3, [r5, #0]
 800e1a6:	b103      	cbz	r3, 800e1aa <_isatty_r+0x1a>
 800e1a8:	6023      	str	r3, [r4, #0]
 800e1aa:	bd38      	pop	{r3, r4, r5, pc}
 800e1ac:	20000998 	.word	0x20000998

0800e1b0 <_lseek_r>:
 800e1b0:	b538      	push	{r3, r4, r5, lr}
 800e1b2:	4d07      	ldr	r5, [pc, #28]	; (800e1d0 <_lseek_r+0x20>)
 800e1b4:	4604      	mov	r4, r0
 800e1b6:	4608      	mov	r0, r1
 800e1b8:	4611      	mov	r1, r2
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	602a      	str	r2, [r5, #0]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	f7f5 fd28 	bl	8003c14 <_lseek>
 800e1c4:	1c43      	adds	r3, r0, #1
 800e1c6:	d102      	bne.n	800e1ce <_lseek_r+0x1e>
 800e1c8:	682b      	ldr	r3, [r5, #0]
 800e1ca:	b103      	cbz	r3, 800e1ce <_lseek_r+0x1e>
 800e1cc:	6023      	str	r3, [r4, #0]
 800e1ce:	bd38      	pop	{r3, r4, r5, pc}
 800e1d0:	20000998 	.word	0x20000998

0800e1d4 <memmove>:
 800e1d4:	4288      	cmp	r0, r1
 800e1d6:	b510      	push	{r4, lr}
 800e1d8:	eb01 0402 	add.w	r4, r1, r2
 800e1dc:	d902      	bls.n	800e1e4 <memmove+0x10>
 800e1de:	4284      	cmp	r4, r0
 800e1e0:	4623      	mov	r3, r4
 800e1e2:	d807      	bhi.n	800e1f4 <memmove+0x20>
 800e1e4:	1e43      	subs	r3, r0, #1
 800e1e6:	42a1      	cmp	r1, r4
 800e1e8:	d008      	beq.n	800e1fc <memmove+0x28>
 800e1ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1f2:	e7f8      	b.n	800e1e6 <memmove+0x12>
 800e1f4:	4402      	add	r2, r0
 800e1f6:	4601      	mov	r1, r0
 800e1f8:	428a      	cmp	r2, r1
 800e1fa:	d100      	bne.n	800e1fe <memmove+0x2a>
 800e1fc:	bd10      	pop	{r4, pc}
 800e1fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e206:	e7f7      	b.n	800e1f8 <memmove+0x24>

0800e208 <__malloc_lock>:
 800e208:	4801      	ldr	r0, [pc, #4]	; (800e210 <__malloc_lock+0x8>)
 800e20a:	f7fe be18 	b.w	800ce3e <__retarget_lock_acquire_recursive>
 800e20e:	bf00      	nop
 800e210:	2000098c 	.word	0x2000098c

0800e214 <__malloc_unlock>:
 800e214:	4801      	ldr	r0, [pc, #4]	; (800e21c <__malloc_unlock+0x8>)
 800e216:	f7fe be13 	b.w	800ce40 <__retarget_lock_release_recursive>
 800e21a:	bf00      	nop
 800e21c:	2000098c 	.word	0x2000098c

0800e220 <_realloc_r>:
 800e220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e224:	4680      	mov	r8, r0
 800e226:	4614      	mov	r4, r2
 800e228:	460e      	mov	r6, r1
 800e22a:	b921      	cbnz	r1, 800e236 <_realloc_r+0x16>
 800e22c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e230:	4611      	mov	r1, r2
 800e232:	f7ff bbc9 	b.w	800d9c8 <_malloc_r>
 800e236:	b92a      	cbnz	r2, 800e244 <_realloc_r+0x24>
 800e238:	f7ff fb5a 	bl	800d8f0 <_free_r>
 800e23c:	4625      	mov	r5, r4
 800e23e:	4628      	mov	r0, r5
 800e240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e244:	f000 f872 	bl	800e32c <_malloc_usable_size_r>
 800e248:	4284      	cmp	r4, r0
 800e24a:	4607      	mov	r7, r0
 800e24c:	d802      	bhi.n	800e254 <_realloc_r+0x34>
 800e24e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e252:	d812      	bhi.n	800e27a <_realloc_r+0x5a>
 800e254:	4621      	mov	r1, r4
 800e256:	4640      	mov	r0, r8
 800e258:	f7ff fbb6 	bl	800d9c8 <_malloc_r>
 800e25c:	4605      	mov	r5, r0
 800e25e:	2800      	cmp	r0, #0
 800e260:	d0ed      	beq.n	800e23e <_realloc_r+0x1e>
 800e262:	42bc      	cmp	r4, r7
 800e264:	4622      	mov	r2, r4
 800e266:	4631      	mov	r1, r6
 800e268:	bf28      	it	cs
 800e26a:	463a      	movcs	r2, r7
 800e26c:	f7fb fbee 	bl	8009a4c <memcpy>
 800e270:	4631      	mov	r1, r6
 800e272:	4640      	mov	r0, r8
 800e274:	f7ff fb3c 	bl	800d8f0 <_free_r>
 800e278:	e7e1      	b.n	800e23e <_realloc_r+0x1e>
 800e27a:	4635      	mov	r5, r6
 800e27c:	e7df      	b.n	800e23e <_realloc_r+0x1e>
	...

0800e280 <_read_r>:
 800e280:	b538      	push	{r3, r4, r5, lr}
 800e282:	4d07      	ldr	r5, [pc, #28]	; (800e2a0 <_read_r+0x20>)
 800e284:	4604      	mov	r4, r0
 800e286:	4608      	mov	r0, r1
 800e288:	4611      	mov	r1, r2
 800e28a:	2200      	movs	r2, #0
 800e28c:	602a      	str	r2, [r5, #0]
 800e28e:	461a      	mov	r2, r3
 800e290:	f7f5 fc60 	bl	8003b54 <_read>
 800e294:	1c43      	adds	r3, r0, #1
 800e296:	d102      	bne.n	800e29e <_read_r+0x1e>
 800e298:	682b      	ldr	r3, [r5, #0]
 800e29a:	b103      	cbz	r3, 800e29e <_read_r+0x1e>
 800e29c:	6023      	str	r3, [r4, #0]
 800e29e:	bd38      	pop	{r3, r4, r5, pc}
 800e2a0:	20000998 	.word	0x20000998

0800e2a4 <_raise_r>:
 800e2a4:	291f      	cmp	r1, #31
 800e2a6:	b538      	push	{r3, r4, r5, lr}
 800e2a8:	4604      	mov	r4, r0
 800e2aa:	460d      	mov	r5, r1
 800e2ac:	d904      	bls.n	800e2b8 <_raise_r+0x14>
 800e2ae:	2316      	movs	r3, #22
 800e2b0:	6003      	str	r3, [r0, #0]
 800e2b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b6:	bd38      	pop	{r3, r4, r5, pc}
 800e2b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e2ba:	b112      	cbz	r2, 800e2c2 <_raise_r+0x1e>
 800e2bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2c0:	b94b      	cbnz	r3, 800e2d6 <_raise_r+0x32>
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f000 f830 	bl	800e328 <_getpid_r>
 800e2c8:	462a      	mov	r2, r5
 800e2ca:	4601      	mov	r1, r0
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2d2:	f000 b817 	b.w	800e304 <_kill_r>
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d00a      	beq.n	800e2f0 <_raise_r+0x4c>
 800e2da:	1c59      	adds	r1, r3, #1
 800e2dc:	d103      	bne.n	800e2e6 <_raise_r+0x42>
 800e2de:	2316      	movs	r3, #22
 800e2e0:	6003      	str	r3, [r0, #0]
 800e2e2:	2001      	movs	r0, #1
 800e2e4:	e7e7      	b.n	800e2b6 <_raise_r+0x12>
 800e2e6:	2400      	movs	r4, #0
 800e2e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	4798      	blx	r3
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	e7e0      	b.n	800e2b6 <_raise_r+0x12>

0800e2f4 <raise>:
 800e2f4:	4b02      	ldr	r3, [pc, #8]	; (800e300 <raise+0xc>)
 800e2f6:	4601      	mov	r1, r0
 800e2f8:	6818      	ldr	r0, [r3, #0]
 800e2fa:	f7ff bfd3 	b.w	800e2a4 <_raise_r>
 800e2fe:	bf00      	nop
 800e300:	20000024 	.word	0x20000024

0800e304 <_kill_r>:
 800e304:	b538      	push	{r3, r4, r5, lr}
 800e306:	4d07      	ldr	r5, [pc, #28]	; (800e324 <_kill_r+0x20>)
 800e308:	2300      	movs	r3, #0
 800e30a:	4604      	mov	r4, r0
 800e30c:	4608      	mov	r0, r1
 800e30e:	4611      	mov	r1, r2
 800e310:	602b      	str	r3, [r5, #0]
 800e312:	f7f5 fc05 	bl	8003b20 <_kill>
 800e316:	1c43      	adds	r3, r0, #1
 800e318:	d102      	bne.n	800e320 <_kill_r+0x1c>
 800e31a:	682b      	ldr	r3, [r5, #0]
 800e31c:	b103      	cbz	r3, 800e320 <_kill_r+0x1c>
 800e31e:	6023      	str	r3, [r4, #0]
 800e320:	bd38      	pop	{r3, r4, r5, pc}
 800e322:	bf00      	nop
 800e324:	20000998 	.word	0x20000998

0800e328 <_getpid_r>:
 800e328:	f7f5 bbf2 	b.w	8003b10 <_getpid>

0800e32c <_malloc_usable_size_r>:
 800e32c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e330:	1f18      	subs	r0, r3, #4
 800e332:	2b00      	cmp	r3, #0
 800e334:	bfbc      	itt	lt
 800e336:	580b      	ldrlt	r3, [r1, r0]
 800e338:	18c0      	addlt	r0, r0, r3
 800e33a:	4770      	bx	lr

0800e33c <_init>:
 800e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33e:	bf00      	nop
 800e340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e342:	bc08      	pop	{r3}
 800e344:	469e      	mov	lr, r3
 800e346:	4770      	bx	lr

0800e348 <_fini>:
 800e348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e34a:	bf00      	nop
 800e34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e34e:	bc08      	pop	{r3}
 800e350:	469e      	mov	lr, r3
 800e352:	4770      	bx	lr
