
LVTN_STM32F407VET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c50  08011fd0  08011fd0  00021fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c20  08012c20  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08012c20  08012c20  00022c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c28  08012c28  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c28  08012c28  00022c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012c2c  08012c2c  00022c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08012c30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          000012a0  200001f8  200001f8  000301f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001498  20001498  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c445  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dda  00000000  00000000  0004c66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001960  00000000  00000000  00050448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001808  00000000  00000000  00051da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002733a  00000000  00000000  000535b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022305  00000000  00000000  0007a8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0572  00000000  00000000  0009cbef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017d161  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008030  00000000  00000000  0017d1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011fb4 	.word	0x08011fb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08011fb4 	.word	0x08011fb4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <BUFFER_CLEAR>:
#include"common.h"

extern TIM_HandleTypeDef htim6;

void BUFFER_CLEAR(uint8_t *buff, uint32_t sizebuff)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<sizebuff;i++)
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e007      	b.n	8001038 <BUFFER_CLEAR+0x20>
	{
		buff[i] = '\0';
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<sizebuff;i++)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3301      	adds	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f3      	bhi.n	8001028 <BUFFER_CLEAR+0x10>
	}
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <BUFF_SIZE>:

unsigned int BUFF_SIZE(uint8_t *buff)
{
 800104e:	b480      	push	{r7}
 8001050:	b085      	sub	sp, #20
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
	while(*(buff++) != '\0')
 800105a:	e002      	b.n	8001062 <BUFF_SIZE+0x14>
	{i++;}
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3301      	adds	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
	while(*(buff++) != '\0')
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f6      	bne.n	800105c <BUFF_SIZE+0xe>
	return i;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <SELECT>:
#define SD_CS_GPIO_Port GPIOC
#define SD_CS_Pin GPIO_PIN_1

/* SPI Chip Select */
static void SELECT(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2102      	movs	r1, #2
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <SELECT+0x14>)
 8001086:	f005 f899 	bl	80061bc <HAL_GPIO_WritePin>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40020800 	.word	0x40020800

08001094 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2102      	movs	r1, #2
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <DESELECT+0x14>)
 800109e:	f005 f88d 	bl	80061bc <HAL_GPIO_WritePin>
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40020800 	.word	0x40020800

080010ac <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80010b6:	bf00      	nop
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <SPI_TxByte+0x30>)
 80010ba:	f006 fe21 	bl	8007d00 <HAL_SPI_GetState>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d1f9      	bne.n	80010b8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 80010c4:	1df9      	adds	r1, r7, #7
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	2201      	movs	r2, #1
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <SPI_TxByte+0x30>)
 80010ce:	f006 fa28 	bl	8007522 <HAL_SPI_Transmit>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000039c 	.word	0x2000039c

080010e0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80010e6:	23ff      	movs	r3, #255	; 0xff
 80010e8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 80010ee:	bf00      	nop
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <SPI_RxByte+0x38>)
 80010f2:	f006 fe05 	bl	8007d00 <HAL_SPI_GetState>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d1f9      	bne.n	80010f0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80010fc:	1dba      	adds	r2, r7, #6
 80010fe:	1df9      	adds	r1, r7, #7
 8001100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2301      	movs	r3, #1
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <SPI_RxByte+0x38>)
 800110a:	f006 fc57 	bl	80079bc <HAL_SPI_TransmitReceive>

  return data;
 800110e:	79bb      	ldrb	r3, [r7, #6]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000039c 	.word	0x2000039c

0800111c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001124:	f7ff ffdc 	bl	80010e0 <SPI_RxByte>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	701a      	strb	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <SD_ReadyWait+0x34>)
 8001140:	2232      	movs	r2, #50	; 0x32
 8001142:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001144:	f7ff ffcc 	bl	80010e0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001148:	f7ff ffca 	bl	80010e0 <SPI_RxByte>
 800114c:	4603      	mov	r3, r0
 800114e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2bff      	cmp	r3, #255	; 0xff
 8001154:	d004      	beq.n	8001160 <SD_ReadyWait+0x28>
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <SD_ReadyWait+0x34>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f3      	bne.n	8001148 <SD_ReadyWait+0x10>

  return res;
 8001160:	79fb      	ldrb	r3, [r7, #7]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000121a 	.word	0x2000121a

08001170 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001176:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800117a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800117c:	f7ff ff8a 	bl	8001094 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	e005      	b.n	8001192 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001186:	20ff      	movs	r0, #255	; 0xff
 8001188:	f7ff ff90 	bl	80010ac <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	3301      	adds	r3, #1
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	2b09      	cmp	r3, #9
 8001196:	ddf6      	ble.n	8001186 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001198:	f7ff ff70 	bl	800107c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800119c:	2340      	movs	r3, #64	; 0x40
 800119e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80011b0:	2395      	movs	r3, #149	; 0x95
 80011b2:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	e009      	b.n	80011ce <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80011ba:	1d3a      	adds	r2, r7, #4
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff72 	bl	80010ac <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3301      	adds	r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b05      	cmp	r3, #5
 80011d2:	ddf2      	ble.n	80011ba <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80011d4:	e002      	b.n	80011dc <SD_PowerOn+0x6c>
  {
    Count--;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3b01      	subs	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80011dc:	f7ff ff80 	bl	80010e0 <SPI_RxByte>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d002      	beq.n	80011ec <SD_PowerOn+0x7c>
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f4      	bne.n	80011d6 <SD_PowerOn+0x66>
  }

  DESELECT();
 80011ec:	f7ff ff52 	bl	8001094 <DESELECT>
  SPI_TxByte(0XFF);
 80011f0:	20ff      	movs	r0, #255	; 0xff
 80011f2:	f7ff ff5b 	bl	80010ac <SPI_TxByte>

  PowerFlag = 1;
 80011f6:	4b03      	ldr	r3, [pc, #12]	; (8001204 <SD_PowerOn+0x94>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000215 	.word	0x20000215

08001208 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <SD_PowerOff+0x14>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	20000215 	.word	0x20000215

08001220 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <SD_CheckPower+0x14>)
 8001226:	781b      	ldrb	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000215 	.word	0x20000215

08001238 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <SD_RxDataBlock+0x68>)
 8001244:	220a      	movs	r2, #10
 8001246:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001248:	f7ff ff4a 	bl	80010e0 <SPI_RxByte>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2bff      	cmp	r3, #255	; 0xff
 8001254:	d104      	bne.n	8001260 <SD_RxDataBlock+0x28>
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <SD_RxDataBlock+0x68>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f3      	bne.n	8001248 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2bfe      	cmp	r3, #254	; 0xfe
 8001264:	d001      	beq.n	800126a <SD_RxDataBlock+0x32>
    return FALSE;
 8001266:	2300      	movs	r3, #0
 8001268:	e016      	b.n	8001298 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff53 	bl	800111c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff4d 	bl	800111c <SPI_RxBytePtr>
  } while(btr -= 2);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3b02      	subs	r3, #2
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1ed      	bne.n	800126a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800128e:	f7ff ff27 	bl	80010e0 <SPI_RxByte>
  SPI_RxByte();
 8001292:	f7ff ff25 	bl	80010e0 <SPI_RxByte>

  return TRUE;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20001219 	.word	0x20001219

080012a4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80012b4:	f7ff ff40 	bl	8001138 <SD_ReadyWait>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2bff      	cmp	r3, #255	; 0xff
 80012bc:	d001      	beq.n	80012c2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80012be:	2300      	movs	r3, #0
 80012c0:	e040      	b.n	8001344 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fef1 	bl	80010ac <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	2bfd      	cmp	r3, #253	; 0xfd
 80012ce:	d031      	beq.n	8001334 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fee5 	bl	80010ac <SPI_TxByte>
      SPI_TxByte(*buff++);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fede 	bl	80010ac <SPI_TxByte>
    } while (--wc);
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	73bb      	strb	r3, [r7, #14]
 80012f6:	7bbb      	ldrb	r3, [r7, #14]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1eb      	bne.n	80012d4 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80012fc:	f7ff fef0 	bl	80010e0 <SPI_RxByte>
    SPI_RxByte();
 8001300:	f7ff feee 	bl	80010e0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001304:	e00b      	b.n	800131e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001306:	f7ff feeb 	bl	80010e0 <SPI_RxByte>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	2b05      	cmp	r3, #5
 8001316:	d006      	beq.n	8001326 <SD_TxDataBlock+0x82>
        break;

      i++;
 8001318:	7b7b      	ldrb	r3, [r7, #13]
 800131a:	3301      	adds	r3, #1
 800131c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800131e:	7b7b      	ldrb	r3, [r7, #13]
 8001320:	2b40      	cmp	r3, #64	; 0x40
 8001322:	d9f0      	bls.n	8001306 <SD_TxDataBlock+0x62>
 8001324:	e000      	b.n	8001328 <SD_TxDataBlock+0x84>
        break;
 8001326:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001328:	bf00      	nop
 800132a:	f7ff fed9 	bl	80010e0 <SPI_RxByte>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0fa      	beq.n	800132a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	2b05      	cmp	r3, #5
 800133c:	d101      	bne.n	8001342 <SD_TxDataBlock+0x9e>
    return TRUE;
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001358:	f7ff feee 	bl	8001138 <SD_ReadyWait>
 800135c:	4603      	mov	r3, r0
 800135e:	2bff      	cmp	r3, #255	; 0xff
 8001360:	d001      	beq.n	8001366 <SD_SendCmd+0x1a>
    return 0xFF;
 8001362:	23ff      	movs	r3, #255	; 0xff
 8001364:	e040      	b.n	80013e8 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fe9f 	bl	80010ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	0e1b      	lsrs	r3, r3, #24
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fe99 	bl	80010ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	0c1b      	lsrs	r3, r3, #16
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fe93 	bl	80010ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe8d 	bl	80010ac <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe88 	bl	80010ac <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2b40      	cmp	r3, #64	; 0x40
 80013a4:	d101      	bne.n	80013aa <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80013a6:	2395      	movs	r3, #149	; 0x95
 80013a8:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b48      	cmp	r3, #72	; 0x48
 80013ae:	d101      	bne.n	80013b4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80013b0:	2387      	movs	r3, #135	; 0x87
 80013b2:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fe78 	bl	80010ac <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b4c      	cmp	r3, #76	; 0x4c
 80013c0:	d101      	bne.n	80013c6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80013c2:	f7ff fe8d 	bl	80010e0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80013c6:	230a      	movs	r3, #10
 80013c8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80013ca:	f7ff fe89 	bl	80010e0 <SPI_RxByte>
 80013ce:	4603      	mov	r3, r0
 80013d0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80013d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	da05      	bge.n	80013e6 <SD_SendCmd+0x9a>
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	3b01      	subs	r3, #1
 80013de:	73bb      	strb	r3, [r7, #14]
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f1      	bne.n	80013ca <SD_SendCmd+0x7e>

  return res;
 80013e6:	7b7b      	ldrb	r3, [r7, #13]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001400:	2301      	movs	r3, #1
 8001402:	e0d5      	b.n	80015b0 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001404:	4b6c      	ldr	r3, [pc, #432]	; (80015b8 <SD_disk_initialize+0x1c8>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <SD_disk_initialize+0x2a>
    return Stat;
 8001412:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <SD_disk_initialize+0x1c8>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	e0ca      	b.n	80015b0 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800141a:	f7ff fea9 	bl	8001170 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800141e:	f7ff fe2d 	bl	800107c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001426:	2100      	movs	r1, #0
 8001428:	2040      	movs	r0, #64	; 0x40
 800142a:	f7ff ff8f 	bl	800134c <SD_SendCmd>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	f040 80a5 	bne.w	8001580 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001436:	4b61      	ldr	r3, [pc, #388]	; (80015bc <SD_disk_initialize+0x1cc>)
 8001438:	2264      	movs	r2, #100	; 0x64
 800143a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800143c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001440:	2048      	movs	r0, #72	; 0x48
 8001442:	f7ff ff83 	bl	800134c <SD_SendCmd>
 8001446:	4603      	mov	r3, r0
 8001448:	2b01      	cmp	r3, #1
 800144a:	d158      	bne.n	80014fe <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e00c      	b.n	800146c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001452:	7bfc      	ldrb	r4, [r7, #15]
 8001454:	f7ff fe44 	bl	80010e0 <SPI_RxByte>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	f104 0310 	add.w	r3, r4, #16
 8001460:	443b      	add	r3, r7
 8001462:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	3301      	adds	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b03      	cmp	r3, #3
 8001470:	d9ef      	bls.n	8001452 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001472:	7abb      	ldrb	r3, [r7, #10]
 8001474:	2b01      	cmp	r3, #1
 8001476:	f040 8083 	bne.w	8001580 <SD_disk_initialize+0x190>
 800147a:	7afb      	ldrb	r3, [r7, #11]
 800147c:	2baa      	cmp	r3, #170	; 0xaa
 800147e:	d17f      	bne.n	8001580 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001480:	2100      	movs	r1, #0
 8001482:	2077      	movs	r0, #119	; 0x77
 8001484:	f7ff ff62 	bl	800134c <SD_SendCmd>
 8001488:	4603      	mov	r3, r0
 800148a:	2b01      	cmp	r3, #1
 800148c:	d807      	bhi.n	800149e <SD_disk_initialize+0xae>
 800148e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001492:	2069      	movs	r0, #105	; 0x69
 8001494:	f7ff ff5a 	bl	800134c <SD_SendCmd>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <SD_disk_initialize+0x1cc>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1eb      	bne.n	8001480 <SD_disk_initialize+0x90>
 80014a8:	e000      	b.n	80014ac <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80014aa:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80014ac:	4b43      	ldr	r3, [pc, #268]	; (80015bc <SD_disk_initialize+0x1cc>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d064      	beq.n	8001580 <SD_disk_initialize+0x190>
 80014b6:	2100      	movs	r1, #0
 80014b8:	207a      	movs	r0, #122	; 0x7a
 80014ba:	f7ff ff47 	bl	800134c <SD_SendCmd>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d15d      	bne.n	8001580 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	e00c      	b.n	80014e4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80014ca:	7bfc      	ldrb	r4, [r7, #15]
 80014cc:	f7ff fe08 	bl	80010e0 <SPI_RxByte>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	f104 0310 	add.w	r3, r4, #16
 80014d8:	443b      	add	r3, r7
 80014da:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	3301      	adds	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d9ef      	bls.n	80014ca <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80014ea:	7a3b      	ldrb	r3, [r7, #8]
 80014ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SD_disk_initialize+0x108>
 80014f4:	2306      	movs	r3, #6
 80014f6:	e000      	b.n	80014fa <SD_disk_initialize+0x10a>
 80014f8:	2302      	movs	r3, #2
 80014fa:	73bb      	strb	r3, [r7, #14]
 80014fc:	e040      	b.n	8001580 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80014fe:	2100      	movs	r1, #0
 8001500:	2077      	movs	r0, #119	; 0x77
 8001502:	f7ff ff23 	bl	800134c <SD_SendCmd>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d808      	bhi.n	800151e <SD_disk_initialize+0x12e>
 800150c:	2100      	movs	r1, #0
 800150e:	2069      	movs	r0, #105	; 0x69
 8001510:	f7ff ff1c 	bl	800134c <SD_SendCmd>
 8001514:	4603      	mov	r3, r0
 8001516:	2b01      	cmp	r3, #1
 8001518:	d801      	bhi.n	800151e <SD_disk_initialize+0x12e>
 800151a:	2302      	movs	r3, #2
 800151c:	e000      	b.n	8001520 <SD_disk_initialize+0x130>
 800151e:	2301      	movs	r3, #1
 8001520:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001522:	7bbb      	ldrb	r3, [r7, #14]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d10e      	bne.n	8001546 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001528:	2100      	movs	r1, #0
 800152a:	2077      	movs	r0, #119	; 0x77
 800152c:	f7ff ff0e 	bl	800134c <SD_SendCmd>
 8001530:	4603      	mov	r3, r0
 8001532:	2b01      	cmp	r3, #1
 8001534:	d80e      	bhi.n	8001554 <SD_disk_initialize+0x164>
 8001536:	2100      	movs	r1, #0
 8001538:	2069      	movs	r0, #105	; 0x69
 800153a:	f7ff ff07 	bl	800134c <SD_SendCmd>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d107      	bne.n	8001554 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001544:	e00d      	b.n	8001562 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001546:	2100      	movs	r1, #0
 8001548:	2041      	movs	r0, #65	; 0x41
 800154a:	f7ff feff 	bl	800134c <SD_SendCmd>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <SD_disk_initialize+0x1cc>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1e1      	bne.n	8001522 <SD_disk_initialize+0x132>
 800155e:	e000      	b.n	8001562 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001560:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <SD_disk_initialize+0x1cc>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d007      	beq.n	800157c <SD_disk_initialize+0x18c>
 800156c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001570:	2050      	movs	r0, #80	; 0x50
 8001572:	f7ff feeb 	bl	800134c <SD_SendCmd>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001580:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <SD_disk_initialize+0x1d0>)
 8001582:	7bbb      	ldrb	r3, [r7, #14]
 8001584:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001586:	f7ff fd85 	bl	8001094 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800158a:	f7ff fda9 	bl	80010e0 <SPI_RxByte>

  if (type)
 800158e:	7bbb      	ldrb	r3, [r7, #14]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <SD_disk_initialize+0x1c8>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SD_disk_initialize+0x1c8>)
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	e001      	b.n	80015aa <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80015a6:	f7ff fe2f 	bl	8001208 <SD_PowerOff>
  }

  return Stat;
 80015aa:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <SD_disk_initialize+0x1c8>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2db      	uxtb	r3, r3
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd90      	pop	{r4, r7, pc}
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20001219 	.word	0x20001219
 80015c0:	20000214 	.word	0x20000214

080015c4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SD_disk_status+0x14>
    return STA_NOINIT;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e002      	b.n	80015de <SD_disk_status+0x1a>

  return Stat;
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SD_disk_status+0x28>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b2db      	uxtb	r3, r3
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000000 	.word	0x20000000

080015f0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <SD_disk_read+0x1c>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <SD_disk_read+0x20>
    return RES_PARERR;
 800160c:	2304      	movs	r3, #4
 800160e:	e051      	b.n	80016b4 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001610:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <SD_disk_read+0xcc>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800161e:	2303      	movs	r3, #3
 8001620:	e048      	b.n	80016b4 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001622:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <SD_disk_read+0xd0>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	025b      	lsls	r3, r3, #9
 8001632:	607b      	str	r3, [r7, #4]

  SELECT();
 8001634:	f7ff fd22 	bl	800107c <SELECT>

  if (count == 1)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d111      	bne.n	8001662 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	2051      	movs	r0, #81	; 0x51
 8001642:	f7ff fe83 	bl	800134c <SD_SendCmd>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d129      	bne.n	80016a0 <SD_disk_read+0xb0>
 800164c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001650:	68b8      	ldr	r0, [r7, #8]
 8001652:	f7ff fdf1 	bl	8001238 <SD_RxDataBlock>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d021      	beq.n	80016a0 <SD_disk_read+0xb0>
      count = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	e01e      	b.n	80016a0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	2052      	movs	r0, #82	; 0x52
 8001666:	f7ff fe71 	bl	800134c <SD_SendCmd>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d117      	bne.n	80016a0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001674:	68b8      	ldr	r0, [r7, #8]
 8001676:	f7ff fddf 	bl	8001238 <SD_RxDataBlock>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00a      	beq.n	8001696 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001686:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	3b01      	subs	r3, #1
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1ed      	bne.n	8001670 <SD_disk_read+0x80>
 8001694:	e000      	b.n	8001698 <SD_disk_read+0xa8>
          break;
 8001696:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001698:	2100      	movs	r1, #0
 800169a:	204c      	movs	r0, #76	; 0x4c
 800169c:	f7ff fe56 	bl	800134c <SD_SendCmd>
    }
  }

  DESELECT();
 80016a0:	f7ff fcf8 	bl	8001094 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80016a4:	f7ff fd1c 	bl	80010e0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bf14      	ite	ne
 80016ae:	2301      	movne	r3, #1
 80016b0:	2300      	moveq	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000214 	.word	0x20000214

080016c4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	4603      	mov	r3, r0
 80016d2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <SD_disk_write+0x1c>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <SD_disk_write+0x20>
    return RES_PARERR;
 80016e0:	2304      	movs	r3, #4
 80016e2:	e06b      	b.n	80017bc <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80016e4:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <SD_disk_write+0x100>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e062      	b.n	80017bc <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80016f6:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <SD_disk_write+0x100>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001704:	2302      	movs	r3, #2
 8001706:	e059      	b.n	80017bc <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001708:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <SD_disk_write+0x104>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	025b      	lsls	r3, r3, #9
 8001718:	607b      	str	r3, [r7, #4]

  SELECT();
 800171a:	f7ff fcaf 	bl	800107c <SELECT>

  if (count == 1)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d110      	bne.n	8001746 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	2058      	movs	r0, #88	; 0x58
 8001728:	f7ff fe10 	bl	800134c <SD_SendCmd>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d13a      	bne.n	80017a8 <SD_disk_write+0xe4>
 8001732:	21fe      	movs	r1, #254	; 0xfe
 8001734:	68b8      	ldr	r0, [r7, #8]
 8001736:	f7ff fdb5 	bl	80012a4 <SD_TxDataBlock>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d033      	beq.n	80017a8 <SD_disk_write+0xe4>
      count = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	e030      	b.n	80017a8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <SD_disk_write+0x104>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001752:	2100      	movs	r1, #0
 8001754:	2077      	movs	r0, #119	; 0x77
 8001756:	f7ff fdf9 	bl	800134c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800175a:	6839      	ldr	r1, [r7, #0]
 800175c:	2057      	movs	r0, #87	; 0x57
 800175e:	f7ff fdf5 	bl	800134c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	2059      	movs	r0, #89	; 0x59
 8001766:	f7ff fdf1 	bl	800134c <SD_SendCmd>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d11b      	bne.n	80017a8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001770:	21fc      	movs	r1, #252	; 0xfc
 8001772:	68b8      	ldr	r0, [r7, #8]
 8001774:	f7ff fd96 	bl	80012a4 <SD_TxDataBlock>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00a      	beq.n	8001794 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001784:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	3b01      	subs	r3, #1
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1ee      	bne.n	8001770 <SD_disk_write+0xac>
 8001792:	e000      	b.n	8001796 <SD_disk_write+0xd2>
          break;
 8001794:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001796:	21fd      	movs	r1, #253	; 0xfd
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff fd83 	bl	80012a4 <SD_TxDataBlock>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <SD_disk_write+0xe4>
      {
        count = 1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80017a8:	f7ff fc74 	bl	8001094 <DESELECT>
  SPI_RxByte();
 80017ac:	f7ff fc98 	bl	80010e0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf14      	ite	ne
 80017b6:	2301      	movne	r3, #1
 80017b8:	2300      	moveq	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000214 	.word	0x20000214

080017cc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b08b      	sub	sp, #44	; 0x2c
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	603a      	str	r2, [r7, #0]
 80017d6:	71fb      	strb	r3, [r7, #7]
 80017d8:	460b      	mov	r3, r1
 80017da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80017e6:	2304      	movs	r3, #4
 80017e8:	e11b      	b.n	8001a22 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	d129      	bne.n	800184a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d017      	beq.n	800182e <SD_disk_ioctl+0x62>
 80017fe:	2b02      	cmp	r3, #2
 8001800:	dc1f      	bgt.n	8001842 <SD_disk_ioctl+0x76>
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <SD_disk_ioctl+0x40>
 8001806:	2b01      	cmp	r3, #1
 8001808:	d00b      	beq.n	8001822 <SD_disk_ioctl+0x56>
 800180a:	e01a      	b.n	8001842 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800180c:	f7ff fd08 	bl	8001220 <SD_CheckPower>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001816:	f7ff fcf7 	bl	8001208 <SD_PowerOff>
      res = RES_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001820:	e0fd      	b.n	8001a1e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001822:	f7ff fca5 	bl	8001170 <SD_PowerOn>
      res = RES_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800182c:	e0f7      	b.n	8001a1e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	1c5c      	adds	r4, r3, #1
 8001832:	f7ff fcf5 	bl	8001220 <SD_CheckPower>
 8001836:	4603      	mov	r3, r0
 8001838:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800183a:	2300      	movs	r3, #0
 800183c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001840:	e0ed      	b.n	8001a1e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001842:	2304      	movs	r3, #4
 8001844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001848:	e0e9      	b.n	8001a1e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800184a:	4b78      	ldr	r3, [pc, #480]	; (8001a2c <SD_disk_ioctl+0x260>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001858:	2303      	movs	r3, #3
 800185a:	e0e2      	b.n	8001a22 <SD_disk_ioctl+0x256>

    SELECT();
 800185c:	f7ff fc0e 	bl	800107c <SELECT>

    switch (ctrl)
 8001860:	79bb      	ldrb	r3, [r7, #6]
 8001862:	2b0d      	cmp	r3, #13
 8001864:	f200 80cc 	bhi.w	8001a00 <SD_disk_ioctl+0x234>
 8001868:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <SD_disk_ioctl+0xa4>)
 800186a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186e:	bf00      	nop
 8001870:	0800196b 	.word	0x0800196b
 8001874:	080018a9 	.word	0x080018a9
 8001878:	0800195b 	.word	0x0800195b
 800187c:	08001a01 	.word	0x08001a01
 8001880:	08001a01 	.word	0x08001a01
 8001884:	08001a01 	.word	0x08001a01
 8001888:	08001a01 	.word	0x08001a01
 800188c:	08001a01 	.word	0x08001a01
 8001890:	08001a01 	.word	0x08001a01
 8001894:	08001a01 	.word	0x08001a01
 8001898:	08001a01 	.word	0x08001a01
 800189c:	0800197d 	.word	0x0800197d
 80018a0:	080019a1 	.word	0x080019a1
 80018a4:	080019c5 	.word	0x080019c5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80018a8:	2100      	movs	r1, #0
 80018aa:	2049      	movs	r0, #73	; 0x49
 80018ac:	f7ff fd4e 	bl	800134c <SD_SendCmd>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f040 80a8 	bne.w	8001a08 <SD_disk_ioctl+0x23c>
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	2110      	movs	r1, #16
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fcba 	bl	8001238 <SD_RxDataBlock>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 809e 	beq.w	8001a08 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80018cc:	7b3b      	ldrb	r3, [r7, #12]
 80018ce:	099b      	lsrs	r3, r3, #6
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d10e      	bne.n	80018f4 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80018d6:	7d7b      	ldrb	r3, [r7, #21]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	7d3b      	ldrb	r3, [r7, #20]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3301      	adds	r3, #1
 80018e8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80018ea:	8bfb      	ldrh	r3, [r7, #30]
 80018ec:	029a      	lsls	r2, r3, #10
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e02e      	b.n	8001952 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80018f4:	7c7b      	ldrb	r3, [r7, #17]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	7dbb      	ldrb	r3, [r7, #22]
 80018fe:	09db      	lsrs	r3, r3, #7
 8001900:	b2db      	uxtb	r3, r3
 8001902:	4413      	add	r3, r2
 8001904:	b2da      	uxtb	r2, r3
 8001906:	7d7b      	ldrb	r3, [r7, #21]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f003 0306 	and.w	r3, r3, #6
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4413      	add	r3, r2
 8001914:	b2db      	uxtb	r3, r3
 8001916:	3302      	adds	r3, #2
 8001918:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800191c:	7d3b      	ldrb	r3, [r7, #20]
 800191e:	099b      	lsrs	r3, r3, #6
 8001920:	b2db      	uxtb	r3, r3
 8001922:	b29a      	uxth	r2, r3
 8001924:	7cfb      	ldrb	r3, [r7, #19]
 8001926:	b29b      	uxth	r3, r3
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	b29b      	uxth	r3, r3
 800192c:	4413      	add	r3, r2
 800192e:	b29a      	uxth	r2, r3
 8001930:	7cbb      	ldrb	r3, [r7, #18]
 8001932:	029b      	lsls	r3, r3, #10
 8001934:	b29b      	uxth	r3, r3
 8001936:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800193a:	b29b      	uxth	r3, r3
 800193c:	4413      	add	r3, r2
 800193e:	b29b      	uxth	r3, r3
 8001940:	3301      	adds	r3, #1
 8001942:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001944:	8bfa      	ldrh	r2, [r7, #30]
 8001946:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800194a:	3b09      	subs	r3, #9
 800194c:	409a      	lsls	r2, r3
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001958:	e056      	b.n	8001a08 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001960:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001968:	e055      	b.n	8001a16 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800196a:	f7ff fbe5 	bl	8001138 <SD_ReadyWait>
 800196e:	4603      	mov	r3, r0
 8001970:	2bff      	cmp	r3, #255	; 0xff
 8001972:	d14b      	bne.n	8001a0c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800197a:	e047      	b.n	8001a0c <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800197c:	2100      	movs	r1, #0
 800197e:	2049      	movs	r0, #73	; 0x49
 8001980:	f7ff fce4 	bl	800134c <SD_SendCmd>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d142      	bne.n	8001a10 <SD_disk_ioctl+0x244>
 800198a:	2110      	movs	r1, #16
 800198c:	6a38      	ldr	r0, [r7, #32]
 800198e:	f7ff fc53 	bl	8001238 <SD_RxDataBlock>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d03b      	beq.n	8001a10 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800199e:	e037      	b.n	8001a10 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80019a0:	2100      	movs	r1, #0
 80019a2:	204a      	movs	r0, #74	; 0x4a
 80019a4:	f7ff fcd2 	bl	800134c <SD_SendCmd>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d132      	bne.n	8001a14 <SD_disk_ioctl+0x248>
 80019ae:	2110      	movs	r1, #16
 80019b0:	6a38      	ldr	r0, [r7, #32]
 80019b2:	f7ff fc41 	bl	8001238 <SD_RxDataBlock>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d02b      	beq.n	8001a14 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80019c2:	e027      	b.n	8001a14 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80019c4:	2100      	movs	r1, #0
 80019c6:	207a      	movs	r0, #122	; 0x7a
 80019c8:	f7ff fcc0 	bl	800134c <SD_SendCmd>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d116      	bne.n	8001a00 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019d8:	e00b      	b.n	80019f2 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80019da:	6a3c      	ldr	r4, [r7, #32]
 80019dc:	1c63      	adds	r3, r4, #1
 80019de:	623b      	str	r3, [r7, #32]
 80019e0:	f7ff fb7e 	bl	80010e0 <SPI_RxByte>
 80019e4:	4603      	mov	r3, r0
 80019e6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80019e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019ec:	3301      	adds	r3, #1
 80019ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d9ef      	bls.n	80019da <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001a00:	2304      	movs	r3, #4
 8001a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a06:	e006      	b.n	8001a16 <SD_disk_ioctl+0x24a>
      break;
 8001a08:	bf00      	nop
 8001a0a:	e004      	b.n	8001a16 <SD_disk_ioctl+0x24a>
      break;
 8001a0c:	bf00      	nop
 8001a0e:	e002      	b.n	8001a16 <SD_disk_ioctl+0x24a>
      break;
 8001a10:	bf00      	nop
 8001a12:	e000      	b.n	8001a16 <SD_disk_ioctl+0x24a>
      break;
 8001a14:	bf00      	nop
    }

    DESELECT();
 8001a16:	f7ff fb3d 	bl	8001094 <DESELECT>
    SPI_RxByte();
 8001a1a:	f7ff fb61 	bl	80010e0 <SPI_RxByte>
  }

  return res;
 8001a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	372c      	adds	r7, #44	; 0x2c
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000000 	.word	0x20000000

08001a30 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f023 030f 	bic.w	r3, r3, #15
 8001a40:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	f043 030c 	orr.w	r3, r3, #12
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	f043 0308 	orr.w	r3, r3, #8
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001a5c:	7bbb      	ldrb	r3, [r7, #14]
 8001a5e:	f043 030c 	orr.w	r3, r3, #12
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001a66:	7bbb      	ldrb	r3, [r7, #14]
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a70:	f107 0208 	add.w	r2, r7, #8
 8001a74:	2364      	movs	r3, #100	; 0x64
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2304      	movs	r3, #4
 8001a7a:	214e      	movs	r1, #78	; 0x4e
 8001a7c:	4803      	ldr	r0, [pc, #12]	; (8001a8c <lcd_send_cmd+0x5c>)
 8001a7e:	f004 fd15 	bl	80064ac <HAL_I2C_Master_Transmit>
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200002e4 	.word	0x200002e4

08001a90 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f023 030f 	bic.w	r3, r3, #15
 8001aa0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	f043 030d 	orr.w	r3, r3, #13
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	f043 0309 	orr.w	r3, r3, #9
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	f043 030d 	orr.w	r3, r3, #13
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1sssssssss
 8001ac6:	7bbb      	ldrb	r3, [r7, #14]
 8001ac8:	f043 0309 	orr.w	r3, r3, #9
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ad0:	f107 0208 	add.w	r2, r7, #8
 8001ad4:	2364      	movs	r3, #100	; 0x64
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2304      	movs	r3, #4
 8001ada:	214e      	movs	r1, #78	; 0x4e
 8001adc:	4803      	ldr	r0, [pc, #12]	; (8001aec <lcd_send_data+0x5c>)
 8001ade:	f004 fce5 	bl	80064ac <HAL_I2C_Master_Transmit>
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200002e4 	.word	0x200002e4

08001af0 <lcd_clear>:

void lcd_clear (void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f7ff ff9a 	bl	8001a30 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	e005      	b.n	8001b0e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001b02:	2020      	movs	r0, #32
 8001b04:	f7ff ffc4 	bl	8001a90 <lcd_send_data>
	for (int i=0; i<100; i++)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b63      	cmp	r3, #99	; 0x63
 8001b12:	ddf6      	ble.n	8001b02 <lcd_clear+0x12>
	}
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <lcd_init>:

void lcd_init (void)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001b22:	2032      	movs	r0, #50	; 0x32
 8001b24:	f003 f84c 	bl	8004bc0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001b28:	2030      	movs	r0, #48	; 0x30
 8001b2a:	f7ff ff81 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001b2e:	2005      	movs	r0, #5
 8001b30:	f003 f846 	bl	8004bc0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001b34:	2030      	movs	r0, #48	; 0x30
 8001b36:	f7ff ff7b 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f003 f840 	bl	8004bc0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001b40:	2030      	movs	r0, #48	; 0x30
 8001b42:	f7ff ff75 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(10);
 8001b46:	200a      	movs	r0, #10
 8001b48:	f003 f83a 	bl	8004bc0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001b4c:	2020      	movs	r0, #32
 8001b4e:	f7ff ff6f 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(10);
 8001b52:	200a      	movs	r0, #10
 8001b54:	f003 f834 	bl	8004bc0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001b58:	2028      	movs	r0, #40	; 0x28
 8001b5a:	f7ff ff69 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(1);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f003 f82e 	bl	8004bc0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001b64:	2008      	movs	r0, #8
 8001b66:	f7ff ff63 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(1);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f003 f828 	bl	8004bc0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001b70:	2001      	movs	r0, #1
 8001b72:	f7ff ff5d 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(1);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f003 f822 	bl	8004bc0 <HAL_Delay>
	HAL_Delay(1);
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f003 f81f 	bl	8004bc0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001b82:	2006      	movs	r0, #6
 8001b84:	f7ff ff54 	bl	8001a30 <lcd_send_cmd>
	HAL_Delay(1);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f003 f819 	bl	8004bc0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001b8e:	200c      	movs	r0, #12
 8001b90:	f7ff ff4e 	bl	8001a30 <lcd_send_cmd>
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001ba0:	e006      	b.n	8001bb0 <lcd_send_string+0x18>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff70 	bl	8001a90 <lcd_send_data>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f4      	bne.n	8001ba2 <lcd_send_string+0xa>
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <Rotary_init>:
extern void  PH_Calibration();
extern void TDS_Calibration();
extern void Wifi_Config();
extern float TDS_Calculator(float k , uint16_t adc);
void Rotary_init()
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	rotary_first_value = HAL_GPIO_ReadPin(GPIOE, Rotary_CLK_Pin);
 8001bc8:	2180      	movs	r1, #128	; 0x80
 8001bca:	4804      	ldr	r0, [pc, #16]	; (8001bdc <Rotary_init+0x18>)
 8001bcc:	f004 fade 	bl	800618c <HAL_GPIO_ReadPin>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b02      	ldr	r3, [pc, #8]	; (8001be0 <Rotary_init+0x1c>)
 8001bd6:	601a      	str	r2, [r3, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	20000234 	.word	0x20000234

08001be4 <Rotary_volum>:
int  Rotary_volum()
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
	rotary_curent_value = HAL_GPIO_ReadPin(GPIOE, Rotary_CLK_Pin);
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	4817      	ldr	r0, [pc, #92]	; (8001c48 <Rotary_volum+0x64>)
 8001bec:	f004 face 	bl	800618c <HAL_GPIO_ReadPin>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <Rotary_volum+0x68>)
 8001bf6:	601a      	str	r2, [r3, #0]
	if (rotary_curent_value != rotary_first_value)
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <Rotary_volum+0x68>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <Rotary_volum+0x6c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d019      	beq.n	8001c38 <Rotary_volum+0x54>
	   {
	     if (HAL_GPIO_ReadPin(GPIOE, Rotary_DT_Pin) != rotary_curent_value)
 8001c04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c08:	480f      	ldr	r0, [pc, #60]	; (8001c48 <Rotary_volum+0x64>)
 8001c0a:	f004 fabf 	bl	800618c <HAL_GPIO_ReadPin>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <Rotary_volum+0x68>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d007      	beq.n	8001c2a <Rotary_volum+0x46>
	     {
	    	 lcd_clear();
 8001c1a:	f7ff ff69 	bl	8001af0 <lcd_clear>
	    	 lcd_pointer_1 +=1;
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <Rotary_volum+0x70>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	3301      	adds	r3, #1
 8001c24:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <Rotary_volum+0x70>)
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e006      	b.n	8001c38 <Rotary_volum+0x54>

	     }
	     else
	     {
	    	 lcd_clear();
 8001c2a:	f7ff ff61 	bl	8001af0 <lcd_clear>
	    	 lcd_pointer_1 -=1;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <Rotary_volum+0x70>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <Rotary_volum+0x70>)
 8001c36:	6013      	str	r3, [r2, #0]
	     }
	   }
	rotary_first_value = rotary_curent_value;
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <Rotary_volum+0x68>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <Rotary_volum+0x6c>)
 8001c3e:	6013      	str	r3, [r2, #0]
	return lcd_pointer_1;
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <Rotary_volum+0x70>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	20000238 	.word	0x20000238
 8001c50:	20000234 	.word	0x20000234
 8001c54:	2000022c 	.word	0x2000022c

08001c58 <Push_Slect>:
void Push_Slect()
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
	  if(HAL_GPIO_ReadPin(GPIOE, Rotary_SW_Pin) == 0)
 8001c5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c60:	4813      	ldr	r0, [pc, #76]	; (8001cb0 <Push_Slect+0x58>)
 8001c62:	f004 fa93 	bl	800618c <HAL_GPIO_ReadPin>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d11c      	bne.n	8001ca6 <Push_Slect+0x4e>
	  		{
	  			HAL_Delay(20);
 8001c6c:	2014      	movs	r0, #20
 8001c6e:	f002 ffa7 	bl	8004bc0 <HAL_Delay>
	  			if((HAL_GPIO_ReadPin(GPIOE, Rotary_SW_Pin) == 0) && (isPress == 0)) // nut nhan da bam
 8001c72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c76:	480e      	ldr	r0, [pc, #56]	; (8001cb0 <Push_Slect+0x58>)
 8001c78:	f004 fa88 	bl	800618c <HAL_GPIO_ReadPin>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d114      	bne.n	8001cac <Push_Slect+0x54>
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <Push_Slect+0x5c>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d110      	bne.n	8001cac <Push_Slect+0x54>
	  			{
	  				lcd_clear();
 8001c8a:	f7ff ff31 	bl	8001af0 <lcd_clear>
	  				Rpush_number++;
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <Push_Slect+0x60>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <Push_Slect+0x60>)
 8001c96:	6013      	str	r3, [r2, #0]
	  				isPress = 1;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <Push_Slect+0x5c>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
	  				button_flag = 0;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <Push_Slect+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
	  			}
	  		}
	  		else{isPress = 0;}
}
 8001ca4:	e002      	b.n	8001cac <Push_Slect+0x54>
	  		else{isPress = 0;}
 8001ca6:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <Push_Slect+0x5c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	20000230 	.word	0x20000230
 8001cb8:	20000220 	.word	0x20000220
 8001cbc:	20000224 	.word	0x20000224

08001cc0 <Pointer_Status>:
void Pointer_Status(uint32_t volume)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	if(volume > last)
 8001cc8:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <Pointer_Status+0xd8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d905      	bls.n	8001cde <Pointer_Status+0x1e>
	{
		pointer_position++;
 8001cd2:	4b32      	ldr	r3, [pc, #200]	; (8001d9c <Pointer_Status+0xdc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <Pointer_Status+0xdc>)
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	e009      	b.n	8001cf2 <Pointer_Status+0x32>
	}
	else if(volume < last)
 8001cde:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <Pointer_Status+0xd8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d204      	bcs.n	8001cf2 <Pointer_Status+0x32>
	{
		pointer_position--;
 8001ce8:	4b2c      	ldr	r3, [pc, #176]	; (8001d9c <Pointer_Status+0xdc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	4a2b      	ldr	r2, [pc, #172]	; (8001d9c <Pointer_Status+0xdc>)
 8001cf0:	6013      	str	r3, [r2, #0]
	}
	last = volume;
 8001cf2:	4a29      	ldr	r2, [pc, #164]	; (8001d98 <Pointer_Status+0xd8>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6013      	str	r3, [r2, #0]

	switch(pointer_position)
 8001cf8:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <Pointer_Status+0xdc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d838      	bhi.n	8001d72 <Pointer_Status+0xb2>
 8001d00:	a201      	add	r2, pc, #4	; (adr r2, 8001d08 <Pointer_Status+0x48>)
 8001d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d06:	bf00      	nop
 8001d08:	08001d2d 	.word	0x08001d2d
 8001d0c:	08001d73 	.word	0x08001d73
 8001d10:	08001d3b 	.word	0x08001d3b
 8001d14:	08001d73 	.word	0x08001d73
 8001d18:	08001d49 	.word	0x08001d49
 8001d1c:	08001d73 	.word	0x08001d73
 8001d20:	08001d57 	.word	0x08001d57
 8001d24:	08001d73 	.word	0x08001d73
 8001d28:	08001d65 	.word	0x08001d65
	{
		case 0:
			lcd_send_cmd(0x80 | 0x00); //PH
 8001d2c:	2080      	movs	r0, #128	; 0x80
 8001d2e:	f7ff fe7f 	bl	8001a30 <lcd_send_cmd>
			lcd_send_string("->");
 8001d32:	481b      	ldr	r0, [pc, #108]	; (8001da0 <Pointer_Status+0xe0>)
 8001d34:	f7ff ff30 	bl	8001b98 <lcd_send_string>
			break;
 8001d38:	e029      	b.n	8001d8e <Pointer_Status+0xce>
		case 2:
			lcd_send_cmd(0x80 | 0x40); //PH
 8001d3a:	20c0      	movs	r0, #192	; 0xc0
 8001d3c:	f7ff fe78 	bl	8001a30 <lcd_send_cmd>
			lcd_send_string("->");
 8001d40:	4817      	ldr	r0, [pc, #92]	; (8001da0 <Pointer_Status+0xe0>)
 8001d42:	f7ff ff29 	bl	8001b98 <lcd_send_string>
			break;
 8001d46:	e022      	b.n	8001d8e <Pointer_Status+0xce>
		case 4:
			lcd_send_cmd(0x80 | 0x14); //PH
 8001d48:	2094      	movs	r0, #148	; 0x94
 8001d4a:	f7ff fe71 	bl	8001a30 <lcd_send_cmd>
			lcd_send_string("->");
 8001d4e:	4814      	ldr	r0, [pc, #80]	; (8001da0 <Pointer_Status+0xe0>)
 8001d50:	f7ff ff22 	bl	8001b98 <lcd_send_string>
			break;
 8001d54:	e01b      	b.n	8001d8e <Pointer_Status+0xce>
		case 6:
			lcd_send_cmd(0x80 | 0x54); //PH
 8001d56:	20d4      	movs	r0, #212	; 0xd4
 8001d58:	f7ff fe6a 	bl	8001a30 <lcd_send_cmd>
			lcd_send_string("->");
 8001d5c:	4810      	ldr	r0, [pc, #64]	; (8001da0 <Pointer_Status+0xe0>)
 8001d5e:	f7ff ff1b 	bl	8001b98 <lcd_send_string>
			break;
 8001d62:	e014      	b.n	8001d8e <Pointer_Status+0xce>
		case 8:
			if(Rpush_number == 2||3)
			{
				lcd_send_cmd(0x80 | 0x66);
 8001d64:	20e6      	movs	r0, #230	; 0xe6
 8001d66:	f7ff fe63 	bl	8001a30 <lcd_send_cmd>
				lcd_send_string(">>");
 8001d6a:	480e      	ldr	r0, [pc, #56]	; (8001da4 <Pointer_Status+0xe4>)
 8001d6c:	f7ff ff14 	bl	8001b98 <lcd_send_string>
			}
			break;
 8001d70:	e00d      	b.n	8001d8e <Pointer_Status+0xce>
		default:
			if(pointer_position>9)
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <Pointer_Status+0xdc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	d908      	bls.n	8001d8c <Pointer_Status+0xcc>
			{
				pointer_position = 0;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <Pointer_Status+0xdc>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(0x80 | 0x00); //PH
 8001d80:	2080      	movs	r0, #128	; 0x80
 8001d82:	f7ff fe55 	bl	8001a30 <lcd_send_cmd>
				lcd_send_string("->");
 8001d86:	4806      	ldr	r0, [pc, #24]	; (8001da0 <Pointer_Status+0xe0>)
 8001d88:	f7ff ff06 	bl	8001b98 <lcd_send_string>
			}
			break;
 8001d8c:	bf00      	nop
	}
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000218 	.word	0x20000218
 8001d9c:	2000021c 	.word	0x2000021c
 8001da0:	08011fd0 	.word	0x08011fd0
 8001da4:	08011fd4 	.word	0x08011fd4

08001da8 <Pointer_2_Status>:
void Pointer_2_Status(uint32_t line)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	if(line == 0)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <Pointer_2_Status+0x1c>
		{
		lcd_send_cmd(0x80 | 0x0A); //PH
 8001db6:	208a      	movs	r0, #138	; 0x8a
 8001db8:	f7ff fe3a 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("<");
 8001dbc:	4812      	ldr	r0, [pc, #72]	; (8001e08 <Pointer_2_Status+0x60>)
 8001dbe:	f7ff feeb 	bl	8001b98 <lcd_send_string>
		else if(line == 6)
		{
		lcd_send_cmd(0x80 | 0x5E); //PH
		lcd_send_string("<");
		}
}
 8001dc2:	e01c      	b.n	8001dfe <Pointer_2_Status+0x56>
		else if(line == 2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d106      	bne.n	8001dd8 <Pointer_2_Status+0x30>
		lcd_send_cmd(0x80 | 0x4A); //PH
 8001dca:	20ca      	movs	r0, #202	; 0xca
 8001dcc:	f7ff fe30 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("<");
 8001dd0:	480d      	ldr	r0, [pc, #52]	; (8001e08 <Pointer_2_Status+0x60>)
 8001dd2:	f7ff fee1 	bl	8001b98 <lcd_send_string>
}
 8001dd6:	e012      	b.n	8001dfe <Pointer_2_Status+0x56>
		else if(line == 4)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d106      	bne.n	8001dec <Pointer_2_Status+0x44>
		lcd_send_cmd(0x80 | 0x1E); //PH
 8001dde:	209e      	movs	r0, #158	; 0x9e
 8001de0:	f7ff fe26 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("<");
 8001de4:	4808      	ldr	r0, [pc, #32]	; (8001e08 <Pointer_2_Status+0x60>)
 8001de6:	f7ff fed7 	bl	8001b98 <lcd_send_string>
}
 8001dea:	e008      	b.n	8001dfe <Pointer_2_Status+0x56>
		else if(line == 6)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d105      	bne.n	8001dfe <Pointer_2_Status+0x56>
		lcd_send_cmd(0x80 | 0x5E); //PH
 8001df2:	20de      	movs	r0, #222	; 0xde
 8001df4:	f7ff fe1c 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("<");
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <Pointer_2_Status+0x60>)
 8001dfa:	f7ff fecd 	bl	8001b98 <lcd_send_string>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	08011fd8 	.word	0x08011fd8

08001e0c <LCD_Menu_2_1>:
void LCD_Menu_2_1()
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b09a      	sub	sp, #104	; 0x68
 8001e10:	af00      	add	r7, sp, #0
	char buffer_string[100];
	lcd_send_cmd(0x80 | 0x02); //PH
 8001e12:	2082      	movs	r0, #130	; 0x82
 8001e14:	f7ff fe0c 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string("PH:");
 8001e18:	4844      	ldr	r0, [pc, #272]	; (8001f2c <LCD_Menu_2_1+0x120>)
 8001e1a:	f7ff febd 	bl	8001b98 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x42); //PH
 8001e1e:	20c2      	movs	r0, #194	; 0xc2
 8001e20:	f7ff fe06 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string("PH_Thr:");
 8001e24:	4842      	ldr	r0, [pc, #264]	; (8001f30 <LCD_Menu_2_1+0x124>)
 8001e26:	f7ff feb7 	bl	8001b98 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x16); //PH
 8001e2a:	2096      	movs	r0, #150	; 0x96
 8001e2c:	f7ff fe00 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string("TDS:");
 8001e30:	4840      	ldr	r0, [pc, #256]	; (8001f34 <LCD_Menu_2_1+0x128>)
 8001e32:	f7ff feb1 	bl	8001b98 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x56); //PH
 8001e36:	20d6      	movs	r0, #214	; 0xd6
 8001e38:	f7ff fdfa 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string("TDS_Thr:");
 8001e3c:	483e      	ldr	r0, [pc, #248]	; (8001f38 <LCD_Menu_2_1+0x12c>)
 8001e3e:	f7ff feab 	bl	8001b98 <lcd_send_string>


	lcd_send_cmd(0x80 | 0x0B); //PH_Setpoint
 8001e42:	208b      	movs	r0, #139	; 0x8b
 8001e44:	f7ff fdf4 	bl	8001a30 <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",PH_SetPoint);
 8001e48:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <LCD_Menu_2_1+0x130>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fb8b 	bl	8000568 <__aeabi_f2d>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	1d38      	adds	r0, r7, #4
 8001e58:	4939      	ldr	r1, [pc, #228]	; (8001f40 <LCD_Menu_2_1+0x134>)
 8001e5a:	f00c fac9 	bl	800e3f0 <siprintf>
	lcd_send_string(buffer_string);
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fe99 	bl	8001b98 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe f9bb 	bl	80001e4 <strlen>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f00b fc33 	bl	800d6e0 <memset>


	lcd_send_cmd(0x80 | 0x4B); //PH_THR_Setpoint
 8001e7a:	20cb      	movs	r0, #203	; 0xcb
 8001e7c:	f7ff fdd8 	bl	8001a30 <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",PH_THR_SetPoint);
 8001e80:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <LCD_Menu_2_1+0x138>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fb6f 	bl	8000568 <__aeabi_f2d>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	1d38      	adds	r0, r7, #4
 8001e90:	492b      	ldr	r1, [pc, #172]	; (8001f40 <LCD_Menu_2_1+0x134>)
 8001e92:	f00c faad 	bl	800e3f0 <siprintf>
	lcd_send_string(buffer_string);
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fe7d 	bl	8001b98 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe f99f 	bl	80001e4 <strlen>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f00b fc17 	bl	800d6e0 <memset>

	lcd_send_cmd(0x80 | 0x1F); //TDS_Setpoint
 8001eb2:	209f      	movs	r0, #159	; 0x9f
 8001eb4:	f7ff fdbc 	bl	8001a30 <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",TDS_SetPoint);
 8001eb8:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <LCD_Menu_2_1+0x13c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fb53 	bl	8000568 <__aeabi_f2d>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	1d38      	adds	r0, r7, #4
 8001ec8:	491d      	ldr	r1, [pc, #116]	; (8001f40 <LCD_Menu_2_1+0x134>)
 8001eca:	f00c fa91 	bl	800e3f0 <siprintf>
	lcd_send_string(buffer_string);
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fe61 	bl	8001b98 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe f983 	bl	80001e4 <strlen>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f00b fbfb 	bl	800d6e0 <memset>


	lcd_send_cmd(0x80 | 0x5F); //TDS_THR_Setpoint
 8001eea:	20df      	movs	r0, #223	; 0xdf
 8001eec:	f7ff fda0 	bl	8001a30 <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",TDS_THR_SetPoint);
 8001ef0:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <LCD_Menu_2_1+0x140>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb37 	bl	8000568 <__aeabi_f2d>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	1d38      	adds	r0, r7, #4
 8001f00:	490f      	ldr	r1, [pc, #60]	; (8001f40 <LCD_Menu_2_1+0x134>)
 8001f02:	f00c fa75 	bl	800e3f0 <siprintf>
	lcd_send_string(buffer_string);
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fe45 	bl	8001b98 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe f967 	bl	80001e4 <strlen>
 8001f16:	4602      	mov	r2, r0
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f00b fbdf 	bl	800d6e0 <memset>
}
 8001f22:	bf00      	nop
 8001f24:	3768      	adds	r7, #104	; 0x68
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	08011fdc 	.word	0x08011fdc
 8001f30:	08011fe0 	.word	0x08011fe0
 8001f34:	08011fe8 	.word	0x08011fe8
 8001f38:	08011ff0 	.word	0x08011ff0
 8001f3c:	20000540 	.word	0x20000540
 8001f40:	08011ffc 	.word	0x08011ffc
 8001f44:	2000053c 	.word	0x2000053c
 8001f48:	20000534 	.word	0x20000534
 8001f4c:	20000538 	.word	0x20000538

08001f50 <LCD_Menu_2_2>:
void LCD_Menu_2_2()
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x02); //PH
 8001f54:	2082      	movs	r0, #130	; 0x82
 8001f56:	f7ff fd6b 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string("Pump 1:");
 8001f5a:	480b      	ldr	r0, [pc, #44]	; (8001f88 <LCD_Menu_2_2+0x38>)
 8001f5c:	f7ff fe1c 	bl	8001b98 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x42); //PH
 8001f60:	20c2      	movs	r0, #194	; 0xc2
 8001f62:	f7ff fd65 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string("Pump 2:");
 8001f66:	4809      	ldr	r0, [pc, #36]	; (8001f8c <LCD_Menu_2_2+0x3c>)
 8001f68:	f7ff fe16 	bl	8001b98 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x16); //PH
 8001f6c:	2096      	movs	r0, #150	; 0x96
 8001f6e:	f7ff fd5f 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string("Pump 3:");
 8001f72:	4807      	ldr	r0, [pc, #28]	; (8001f90 <LCD_Menu_2_2+0x40>)
 8001f74:	f7ff fe10 	bl	8001b98 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x56); //PH
 8001f78:	20d6      	movs	r0, #214	; 0xd6
 8001f7a:	f7ff fd59 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string("Pump 4:");
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <LCD_Menu_2_2+0x44>)
 8001f80:	f7ff fe0a 	bl	8001b98 <lcd_send_string>
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	08012004 	.word	0x08012004
 8001f8c:	0801200c 	.word	0x0801200c
 8001f90:	08012014 	.word	0x08012014
 8001f94:	0801201c 	.word	0x0801201c

08001f98 <LCD_Menu_2_3>:
void LCD_Menu_2_3(uint8_t isCalib)
{
 8001f98:	b5b0      	push	{r4, r5, r7, lr}
 8001f9a:	b0a0      	sub	sp, #128	; 0x80
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
	char buffer_String[100] = {0};
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	f107 0310 	add.w	r3, r7, #16
 8001faa:	2260      	movs	r2, #96	; 0x60
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f00b fb96 	bl	800d6e0 <memset>
	float PH_Calib = 0;
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	677b      	str	r3, [r7, #116]	; 0x74
	float TDS_Calib = 0;
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	673b      	str	r3, [r7, #112]	; 0x70
	if(isCalib == 0)
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d15c      	bne.n	8002080 <LCD_Menu_2_3+0xe8>
	{
		/*PH:*/
		lcd_send_cmd(0x80 | 0x02); //PH
 8001fc6:	2082      	movs	r0, #130	; 0x82
 8001fc8:	f7ff fd32 	bl	8001a30 <lcd_send_cmd>
		sprintf(buffer_String,"PH:%.2f",PH);
 8001fcc:	4b61      	ldr	r3, [pc, #388]	; (8002154 <LCD_Menu_2_3+0x1bc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fac9 	bl	8000568 <__aeabi_f2d>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	f107 000c 	add.w	r0, r7, #12
 8001fde:	495e      	ldr	r1, [pc, #376]	; (8002158 <LCD_Menu_2_3+0x1c0>)
 8001fe0:	f00c fa06 	bl	800e3f0 <siprintf>
		lcd_send_string(buffer_String);
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fdd5 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x43); //PH
 8001fee:	20c3      	movs	r0, #195	; 0xc3
 8001ff0:	f7ff fd1e 	bl	8001a30 <lcd_send_cmd>
		sprintf(buffer_String,"=>%.4f|%.4f",ph_a_value,ph_b_value);
 8001ff4:	4b59      	ldr	r3, [pc, #356]	; (800215c <LCD_Menu_2_3+0x1c4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fab5 	bl	8000568 <__aeabi_f2d>
 8001ffe:	4604      	mov	r4, r0
 8002000:	460d      	mov	r5, r1
 8002002:	4b57      	ldr	r3, [pc, #348]	; (8002160 <LCD_Menu_2_3+0x1c8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe faae 	bl	8000568 <__aeabi_f2d>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	f107 000c 	add.w	r0, r7, #12
 8002014:	e9cd 2300 	strd	r2, r3, [sp]
 8002018:	4622      	mov	r2, r4
 800201a:	462b      	mov	r3, r5
 800201c:	4951      	ldr	r1, [pc, #324]	; (8002164 <LCD_Menu_2_3+0x1cc>)
 800201e:	f00c f9e7 	bl	800e3f0 <siprintf>
		lcd_send_string(buffer_String);
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fdb6 	bl	8001b98 <lcd_send_string>

		/*TDS*/
		lcd_send_cmd(0x80 | 0x16); //PH
 800202c:	2096      	movs	r0, #150	; 0x96
 800202e:	f7ff fcff 	bl	8001a30 <lcd_send_cmd>
		sprintf(buffer_String,"TDS:%d",(int)TDS);
 8002032:	4b4d      	ldr	r3, [pc, #308]	; (8002168 <LCD_Menu_2_3+0x1d0>)
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	ee17 2a90 	vmov	r2, s15
 8002044:	4949      	ldr	r1, [pc, #292]	; (800216c <LCD_Menu_2_3+0x1d4>)
 8002046:	4618      	mov	r0, r3
 8002048:	f00c f9d2 	bl	800e3f0 <siprintf>
		lcd_send_string(buffer_String);
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fda1 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x57); //PH
 8002056:	20d7      	movs	r0, #215	; 0xd7
 8002058:	f7ff fcea 	bl	8001a30 <lcd_send_cmd>
		sprintf(buffer_String,"=>%.2f",tds_k_value);
 800205c:	4b44      	ldr	r3, [pc, #272]	; (8002170 <LCD_Menu_2_3+0x1d8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa81 	bl	8000568 <__aeabi_f2d>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	f107 000c 	add.w	r0, r7, #12
 800206e:	4941      	ldr	r1, [pc, #260]	; (8002174 <LCD_Menu_2_3+0x1dc>)
 8002070:	f00c f9be 	bl	800e3f0 <siprintf>
		lcd_send_string(buffer_String);
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fd8d 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x41);
		lcd_send_string(buffer_String);
		lcd_send_cmd(0x80 | 0x54);
		lcd_send_string("tds_400 or ph_900");
	}
}
 800207e:	e065      	b.n	800214c <LCD_Menu_2_3+0x1b4>
	else if(isCalib == 1)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d132      	bne.n	80020ec <LCD_Menu_2_3+0x154>
		lcd_send_cmd(0x80 | 0x02);
 8002086:	2082      	movs	r0, #130	; 0x82
 8002088:	f7ff fcd2 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Calib PH mode...");
 800208c:	483a      	ldr	r0, [pc, #232]	; (8002178 <LCD_Menu_2_3+0x1e0>)
 800208e:	f7ff fd83 	bl	8001b98 <lcd_send_string>
		PH_Calib = PH_Calculator(ph_a_value, ph_b_value, ADC_Value[0]);
 8002092:	4b32      	ldr	r3, [pc, #200]	; (800215c <LCD_Menu_2_3+0x1c4>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	4b31      	ldr	r3, [pc, #196]	; (8002160 <LCD_Menu_2_3+0x1c8>)
 800209a:	ed93 7a00 	vldr	s14, [r3]
 800209e:	4b37      	ldr	r3, [pc, #220]	; (800217c <LCD_Menu_2_3+0x1e4>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	eef0 0a47 	vmov.f32	s1, s14
 80020a8:	eeb0 0a67 	vmov.f32	s0, s15
 80020ac:	f000 fe56 	bl	8002d5c <PH_Calculator>
 80020b0:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
		sprintf(buffer_String,"%.2f---%d",PH_Calib,ADC_Value[0]);
 80020b4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80020b6:	f7fe fa57 	bl	8000568 <__aeabi_f2d>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	492f      	ldr	r1, [pc, #188]	; (800217c <LCD_Menu_2_3+0x1e4>)
 80020c0:	8809      	ldrh	r1, [r1, #0]
 80020c2:	f107 000c 	add.w	r0, r7, #12
 80020c6:	9100      	str	r1, [sp, #0]
 80020c8:	492d      	ldr	r1, [pc, #180]	; (8002180 <LCD_Menu_2_3+0x1e8>)
 80020ca:	f00c f991 	bl	800e3f0 <siprintf>
		lcd_send_cmd(0x80 | 0x41);
 80020ce:	20c1      	movs	r0, #193	; 0xc1
 80020d0:	f7ff fcae 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string(buffer_String);
 80020d4:	f107 030c 	add.w	r3, r7, #12
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fd5d 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80020de:	20d4      	movs	r0, #212	; 0xd4
 80020e0:	f7ff fca6 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("ph_7 or ph_4");
 80020e4:	4827      	ldr	r0, [pc, #156]	; (8002184 <LCD_Menu_2_3+0x1ec>)
 80020e6:	f7ff fd57 	bl	8001b98 <lcd_send_string>
}
 80020ea:	e02f      	b.n	800214c <LCD_Menu_2_3+0x1b4>
	else if(isCalib == 2)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d12c      	bne.n	800214c <LCD_Menu_2_3+0x1b4>
		lcd_send_cmd(0x80 | 0x02);
 80020f2:	2082      	movs	r0, #130	; 0x82
 80020f4:	f7ff fc9c 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Calib TDS mode...");
 80020f8:	4823      	ldr	r0, [pc, #140]	; (8002188 <LCD_Menu_2_3+0x1f0>)
 80020fa:	f7ff fd4d 	bl	8001b98 <lcd_send_string>
		TDS_Calib = TDS_Calculator(tds_k_value, ADC_Value[1]);
 80020fe:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <LCD_Menu_2_3+0x1d8>)
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <LCD_Menu_2_3+0x1e4>)
 8002106:	885b      	ldrh	r3, [r3, #2]
 8002108:	4618      	mov	r0, r3
 800210a:	eeb0 0a67 	vmov.f32	s0, s15
 800210e:	f000 fe61 	bl	8002dd4 <TDS_Calculator>
 8002112:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		sprintf(buffer_String,"%.1f-%d",(float)TDS_Calib,ADC_Value[1]);
 8002116:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002118:	f7fe fa26 	bl	8000568 <__aeabi_f2d>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4916      	ldr	r1, [pc, #88]	; (800217c <LCD_Menu_2_3+0x1e4>)
 8002122:	8849      	ldrh	r1, [r1, #2]
 8002124:	f107 000c 	add.w	r0, r7, #12
 8002128:	9100      	str	r1, [sp, #0]
 800212a:	4918      	ldr	r1, [pc, #96]	; (800218c <LCD_Menu_2_3+0x1f4>)
 800212c:	f00c f960 	bl	800e3f0 <siprintf>
		lcd_send_cmd(0x80 | 0x41);
 8002130:	20c1      	movs	r0, #193	; 0xc1
 8002132:	f7ff fc7d 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string(buffer_String);
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fd2c 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8002140:	20d4      	movs	r0, #212	; 0xd4
 8002142:	f7ff fc75 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("tds_400 or ph_900");
 8002146:	4812      	ldr	r0, [pc, #72]	; (8002190 <LCD_Menu_2_3+0x1f8>)
 8002148:	f7ff fd26 	bl	8001b98 <lcd_send_string>
}
 800214c:	bf00      	nop
 800214e:	3778      	adds	r7, #120	; 0x78
 8002150:	46bd      	mov	sp, r7
 8002152:	bdb0      	pop	{r4, r5, r7, pc}
 8002154:	2000052c 	.word	0x2000052c
 8002158:	08012024 	.word	0x08012024
 800215c:	20000d90 	.word	0x20000d90
 8002160:	20000d94 	.word	0x20000d94
 8002164:	0801202c 	.word	0x0801202c
 8002168:	20000528 	.word	0x20000528
 800216c:	08012038 	.word	0x08012038
 8002170:	20000d98 	.word	0x20000d98
 8002174:	08012040 	.word	0x08012040
 8002178:	08012048 	.word	0x08012048
 800217c:	20000d84 	.word	0x20000d84
 8002180:	0801205c 	.word	0x0801205c
 8002184:	08012068 	.word	0x08012068
 8002188:	08012078 	.word	0x08012078
 800218c:	0801208c 	.word	0x0801208c
 8002190:	08012094 	.word	0x08012094

08002194 <LCD_Menu_2_4_>:

void LCD_Menu_2_4_(uint8_t isWifi)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
	if(isWifi == 0)
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d118      	bne.n	80021d6 <LCD_Menu_2_4_+0x42>
	{
		lcd_send_cmd(0x80 | 0x02);
 80021a4:	2082      	movs	r0, #130	; 0x82
 80021a6:	f7ff fc43 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("login MyHydroponic");
 80021aa:	4817      	ldr	r0, [pc, #92]	; (8002208 <LCD_Menu_2_4_+0x74>)
 80021ac:	f7ff fcf4 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x42);
 80021b0:	20c2      	movs	r0, #194	; 0xc2
 80021b2:	f7ff fc3d 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("goto 192.168.4.1");
 80021b6:	4815      	ldr	r0, [pc, #84]	; (800220c <LCD_Menu_2_4_+0x78>)
 80021b8:	f7ff fcee 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x16);
 80021bc:	2096      	movs	r0, #150	; 0x96
 80021be:	f7ff fc37 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Start");
 80021c2:	4813      	ldr	r0, [pc, #76]	; (8002210 <LCD_Menu_2_4_+0x7c>)
 80021c4:	f7ff fce8 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x56);
 80021c8:	20d6      	movs	r0, #214	; 0xd6
 80021ca:	f7ff fc31 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("End");
 80021ce:	4811      	ldr	r0, [pc, #68]	; (8002214 <LCD_Menu_2_4_+0x80>)
 80021d0:	f7ff fce2 	bl	8001b98 <lcd_send_string>
		lcd_send_string("goto 192.168.4.1");
		lcd_send_cmd(0x80 | 0x16);
		lcd_send_string("Config_wifi ...");
	}

}
 80021d4:	e014      	b.n	8002200 <LCD_Menu_2_4_+0x6c>
	else if(isWifi == 1)
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d111      	bne.n	8002200 <LCD_Menu_2_4_+0x6c>
		lcd_send_cmd(0x80 | 0x02);
 80021dc:	2082      	movs	r0, #130	; 0x82
 80021de:	f7ff fc27 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("login MyHydroponic");
 80021e2:	4809      	ldr	r0, [pc, #36]	; (8002208 <LCD_Menu_2_4_+0x74>)
 80021e4:	f7ff fcd8 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x42);
 80021e8:	20c2      	movs	r0, #194	; 0xc2
 80021ea:	f7ff fc21 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("goto 192.168.4.1");
 80021ee:	4807      	ldr	r0, [pc, #28]	; (800220c <LCD_Menu_2_4_+0x78>)
 80021f0:	f7ff fcd2 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x16);
 80021f4:	2096      	movs	r0, #150	; 0x96
 80021f6:	f7ff fc1b 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Config_wifi ...");
 80021fa:	4807      	ldr	r0, [pc, #28]	; (8002218 <LCD_Menu_2_4_+0x84>)
 80021fc:	f7ff fccc 	bl	8001b98 <lcd_send_string>
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	080120a8 	.word	0x080120a8
 800220c:	080120bc 	.word	0x080120bc
 8002210:	080120d0 	.word	0x080120d0
 8002214:	080120d8 	.word	0x080120d8
 8002218:	080120dc 	.word	0x080120dc

0800221c <LCD_Menu_1>:
void LCD_Menu_1()
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x02);
 8002220:	2082      	movs	r0, #130	; 0x82
 8002222:	f7ff fc05 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Set point");
 8002226:	480b      	ldr	r0, [pc, #44]	; (8002254 <LCD_Menu_1+0x38>)
 8002228:	f7ff fcb6 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x42);
 800222c:	20c2      	movs	r0, #194	; 0xc2
 800222e:	f7ff fbff 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Testing");
 8002232:	4809      	ldr	r0, [pc, #36]	; (8002258 <LCD_Menu_1+0x3c>)
 8002234:	f7ff fcb0 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x16);
 8002238:	2096      	movs	r0, #150	; 0x96
 800223a:	f7ff fbf9 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Calibration sensor");
 800223e:	4807      	ldr	r0, [pc, #28]	; (800225c <LCD_Menu_1+0x40>)
 8002240:	f7ff fcaa 	bl	8001b98 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x56);
 8002244:	20d6      	movs	r0, #214	; 0xd6
 8002246:	f7ff fbf3 	bl	8001a30 <lcd_send_cmd>
		lcd_send_string("Wifi Config");
 800224a:	4805      	ldr	r0, [pc, #20]	; (8002260 <LCD_Menu_1+0x44>)
 800224c:	f7ff fca4 	bl	8001b98 <lcd_send_string>
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	080120ec 	.word	0x080120ec
 8002258:	080120f8 	.word	0x080120f8
 800225c:	08012100 	.word	0x08012100
 8002260:	08012114 	.word	0x08012114

08002264 <LCD_Normal_Mode>:
void LCD_Normal_Mode()
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b09a      	sub	sp, #104	; 0x68
 8002268:	af00      	add	r7, sp, #0
	char String[100];
	sprintf(String,"PH  :%.2f   ",PH);
 800226a:	4b2f      	ldr	r3, [pc, #188]	; (8002328 <LCD_Normal_Mode+0xc4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f97a 	bl	8000568 <__aeabi_f2d>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	1d38      	adds	r0, r7, #4
 800227a:	492c      	ldr	r1, [pc, #176]	; (800232c <LCD_Normal_Mode+0xc8>)
 800227c:	f00c f8b8 	bl	800e3f0 <siprintf>
	lcd_send_cmd(0x80 | 0x03); //PH
 8002280:	2083      	movs	r0, #131	; 0x83
 8002282:	f7ff fbd5 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string(String) ;
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fc85 	bl	8001b98 <lcd_send_string>
	memset(String,0,strlen(String));
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	4618      	mov	r0, r3
 8002292:	f7fd ffa7 	bl	80001e4 <strlen>
 8002296:	4602      	mov	r2, r0
 8002298:	1d3b      	adds	r3, r7, #4
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f00b fa1f 	bl	800d6e0 <memset>

	sprintf(String,"TDS :%.0f   ",TDS);
 80022a2:	4b23      	ldr	r3, [pc, #140]	; (8002330 <LCD_Normal_Mode+0xcc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f95e 	bl	8000568 <__aeabi_f2d>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	1d38      	adds	r0, r7, #4
 80022b2:	4920      	ldr	r1, [pc, #128]	; (8002334 <LCD_Normal_Mode+0xd0>)
 80022b4:	f00c f89c 	bl	800e3f0 <siprintf>
	lcd_send_cmd(0x80 | 0x43); //PH
 80022b8:	20c3      	movs	r0, #195	; 0xc3
 80022ba:	f7ff fbb9 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string(String);
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fc69 	bl	8001b98 <lcd_send_string>
	memset(String,0,strlen(String));
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fd ff8b 	bl	80001e4 <strlen>
 80022ce:	4602      	mov	r2, r0
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f00b fa03 	bl	800d6e0 <memset>

	sprintf(String,"TEMP:%.2f   ",Temperature);
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <LCD_Normal_Mode+0xd4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe f942 	bl	8000568 <__aeabi_f2d>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	1d38      	adds	r0, r7, #4
 80022ea:	4914      	ldr	r1, [pc, #80]	; (800233c <LCD_Normal_Mode+0xd8>)
 80022ec:	f00c f880 	bl	800e3f0 <siprintf>
	lcd_send_cmd(0x80 | 0x17); //PH
 80022f0:	2097      	movs	r0, #151	; 0x97
 80022f2:	f7ff fb9d 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string(String);
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fc4d 	bl	8001b98 <lcd_send_string>
	memset(String,0,strlen(String));
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	4618      	mov	r0, r3
 8002302:	f7fd ff6f 	bl	80001e4 <strlen>
 8002306:	4602      	mov	r2, r0
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f00b f9e7 	bl	800d6e0 <memset>
	lcd_send_cmd(0x80 | 0x54); //PH
 8002312:	20d4      	movs	r0, #212	; 0xd4
 8002314:	f7ff fb8c 	bl	8001a30 <lcd_send_cmd>
	lcd_send_string("PRESS TO CONFIG MODE");
 8002318:	4809      	ldr	r0, [pc, #36]	; (8002340 <LCD_Normal_Mode+0xdc>)
 800231a:	f7ff fc3d 	bl	8001b98 <lcd_send_string>
}
 800231e:	bf00      	nop
 8002320:	3768      	adds	r7, #104	; 0x68
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000052c 	.word	0x2000052c
 800232c:	08012120 	.word	0x08012120
 8002330:	20000528 	.word	0x20000528
 8002334:	08012130 	.word	0x08012130
 8002338:	20000530 	.word	0x20000530
 800233c:	08012140 	.word	0x08012140
 8002340:	08012150 	.word	0x08012150

08002344 <LCD_Display>:
void LCD_Display()
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
	float tamp  = 0;
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	607b      	str	r3, [r7, #4]
	float tamp2 = 0;
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	603b      	str	r3, [r7, #0]
	{
	Push_Slect();
 8002356:	f7ff fc7f 	bl	8001c58 <Push_Slect>
	if(Rpush_number == 0)
 800235a:	4b8d      	ldr	r3, [pc, #564]	; (8002590 <LCD_Display+0x24c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d103      	bne.n	800236a <LCD_Display+0x26>
	{
		Page = 0;
 8002362:	4b8c      	ldr	r3, [pc, #560]	; (8002594 <LCD_Display+0x250>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	e155      	b.n	8002616 <LCD_Display+0x2d2>
	}
	else if(Rpush_number == 1)
 800236a:	4b89      	ldr	r3, [pc, #548]	; (8002590 <LCD_Display+0x24c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d103      	bne.n	800237a <LCD_Display+0x36>
	{
		Page = 1;
 8002372:	4b88      	ldr	r3, [pc, #544]	; (8002594 <LCD_Display+0x250>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e14d      	b.n	8002616 <LCD_Display+0x2d2>
	}
	else if(Rpush_number == 2)
 800237a:	4b85      	ldr	r3, [pc, #532]	; (8002590 <LCD_Display+0x24c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d144      	bne.n	800240c <LCD_Display+0xc8>
	{
		if(button_flag == 0)
 8002382:	4b85      	ldr	r3, [pc, #532]	; (8002598 <LCD_Display+0x254>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 8145 	bne.w	8002616 <LCD_Display+0x2d2>
		{
			switch(pointer_position)
 800238c:	4b83      	ldr	r3, [pc, #524]	; (800259c <LCD_Display+0x258>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b06      	cmp	r3, #6
 8002392:	d82d      	bhi.n	80023f0 <LCD_Display+0xac>
 8002394:	a201      	add	r2, pc, #4	; (adr r2, 800239c <LCD_Display+0x58>)
 8002396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239a:	bf00      	nop
 800239c:	080023b9 	.word	0x080023b9
 80023a0:	080023f1 	.word	0x080023f1
 80023a4:	080023c7 	.word	0x080023c7
 80023a8:	080023f1 	.word	0x080023f1
 80023ac:	080023d5 	.word	0x080023d5
 80023b0:	080023f1 	.word	0x080023f1
 80023b4:	080023e3 	.word	0x080023e3
		  {
			case 0:
				option_page_1 = Page1_SetPoint;
 80023b8:	4b79      	ldr	r3, [pc, #484]	; (80025a0 <LCD_Display+0x25c>)
 80023ba:	2202      	movs	r2, #2
 80023bc:	701a      	strb	r2, [r3, #0]
				Page = 2;
 80023be:	4b75      	ldr	r3, [pc, #468]	; (8002594 <LCD_Display+0x250>)
 80023c0:	2202      	movs	r2, #2
 80023c2:	601a      	str	r2, [r3, #0]
				break;
 80023c4:	e01e      	b.n	8002404 <LCD_Display+0xc0>
			case 2:
				option_page_1 = Page1_Testing;
 80023c6:	4b76      	ldr	r3, [pc, #472]	; (80025a0 <LCD_Display+0x25c>)
 80023c8:	2203      	movs	r2, #3
 80023ca:	701a      	strb	r2, [r3, #0]
				Page = 2;
 80023cc:	4b71      	ldr	r3, [pc, #452]	; (8002594 <LCD_Display+0x250>)
 80023ce:	2202      	movs	r2, #2
 80023d0:	601a      	str	r2, [r3, #0]
				break;
 80023d2:	e017      	b.n	8002404 <LCD_Display+0xc0>
			case 4:
				option_page_1 = Page1_Calbration_sensor;
 80023d4:	4b72      	ldr	r3, [pc, #456]	; (80025a0 <LCD_Display+0x25c>)
 80023d6:	2204      	movs	r2, #4
 80023d8:	701a      	strb	r2, [r3, #0]
				Page = 2;
 80023da:	4b6e      	ldr	r3, [pc, #440]	; (8002594 <LCD_Display+0x250>)
 80023dc:	2202      	movs	r2, #2
 80023de:	601a      	str	r2, [r3, #0]
				break;
 80023e0:	e010      	b.n	8002404 <LCD_Display+0xc0>
			case 6:
				option_page_1 = Page1_WifiConfig;
 80023e2:	4b6f      	ldr	r3, [pc, #444]	; (80025a0 <LCD_Display+0x25c>)
 80023e4:	2205      	movs	r2, #5
 80023e6:	701a      	strb	r2, [r3, #0]
				Page = 2;
 80023e8:	4b6a      	ldr	r3, [pc, #424]	; (8002594 <LCD_Display+0x250>)
 80023ea:	2202      	movs	r2, #2
 80023ec:	601a      	str	r2, [r3, #0]
				break;
 80023ee:	e009      	b.n	8002404 <LCD_Display+0xc0>
			default:
				option_page_1 = Page1_Back;
 80023f0:	4b6b      	ldr	r3, [pc, #428]	; (80025a0 <LCD_Display+0x25c>)
 80023f2:	2206      	movs	r2, #6
 80023f4:	701a      	strb	r2, [r3, #0]
				Page = 0;
 80023f6:	4b67      	ldr	r3, [pc, #412]	; (8002594 <LCD_Display+0x250>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
				Rpush_number = 0;
 80023fc:	4b64      	ldr	r3, [pc, #400]	; (8002590 <LCD_Display+0x24c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
				break;
 8002402:	bf00      	nop
			}
			button_flag =1;
 8002404:	4b64      	ldr	r3, [pc, #400]	; (8002598 <LCD_Display+0x254>)
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e104      	b.n	8002616 <LCD_Display+0x2d2>
		}
	}
	else if(Rpush_number == 3)
 800240c:	4b60      	ldr	r3, [pc, #384]	; (8002590 <LCD_Display+0x24c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d17c      	bne.n	800250e <LCD_Display+0x1ca>
	{
			// OPTION SETPOINT AT PAGE 1
			if(option_page_1 == Page1_SetPoint)
 8002414:	4b62      	ldr	r3, [pc, #392]	; (80025a0 <LCD_Display+0x25c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d123      	bne.n	8002464 <LCD_Display+0x120>
			{
				if(pointer_position == 0)
 800241c:	4b5f      	ldr	r3, [pc, #380]	; (800259c <LCD_Display+0x258>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d103      	bne.n	800242c <LCD_Display+0xe8>
				{
					option_page_2 = Page2_ph;
 8002424:	4b5f      	ldr	r3, [pc, #380]	; (80025a4 <LCD_Display+0x260>)
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	e0f4      	b.n	8002616 <LCD_Display+0x2d2>
				}
				else if(pointer_position == 2)
 800242c:	4b5b      	ldr	r3, [pc, #364]	; (800259c <LCD_Display+0x258>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d103      	bne.n	800243c <LCD_Display+0xf8>
				{
					option_page_2 = Page2_ph_thr;
 8002434:	4b5b      	ldr	r3, [pc, #364]	; (80025a4 <LCD_Display+0x260>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	e0ec      	b.n	8002616 <LCD_Display+0x2d2>
				}
				else if(pointer_position == 4)
 800243c:	4b57      	ldr	r3, [pc, #348]	; (800259c <LCD_Display+0x258>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b04      	cmp	r3, #4
 8002442:	d103      	bne.n	800244c <LCD_Display+0x108>
				{
					option_page_2 = Page2_tds;
 8002444:	4b57      	ldr	r3, [pc, #348]	; (80025a4 <LCD_Display+0x260>)
 8002446:	2202      	movs	r2, #2
 8002448:	701a      	strb	r2, [r3, #0]
 800244a:	e0e4      	b.n	8002616 <LCD_Display+0x2d2>
				}
				else if(pointer_position == 6)
 800244c:	4b53      	ldr	r3, [pc, #332]	; (800259c <LCD_Display+0x258>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b06      	cmp	r3, #6
 8002452:	d103      	bne.n	800245c <LCD_Display+0x118>
				{
					option_page_2 = Page2_tds_thr;
 8002454:	4b53      	ldr	r3, [pc, #332]	; (80025a4 <LCD_Display+0x260>)
 8002456:	2203      	movs	r2, #3
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	e0dc      	b.n	8002616 <LCD_Display+0x2d2>
				}
				else
				{
					option_page_2 = Page2_Back;
 800245c:	4b51      	ldr	r3, [pc, #324]	; (80025a4 <LCD_Display+0x260>)
 800245e:	220c      	movs	r2, #12
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	e0d8      	b.n	8002616 <LCD_Display+0x2d2>
				}

			}
			//// OPTION TESTING AT PAGE 1
			else if (option_page_1 ==Page1_Testing)
 8002464:	4b4e      	ldr	r3, [pc, #312]	; (80025a0 <LCD_Display+0x25c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b03      	cmp	r3, #3
 800246a:	d123      	bne.n	80024b4 <LCD_Display+0x170>
			{
				if(pointer_position == 0)
 800246c:	4b4b      	ldr	r3, [pc, #300]	; (800259c <LCD_Display+0x258>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <LCD_Display+0x138>
				{
					option_page_2 = Page2_pump_1;
 8002474:	4b4b      	ldr	r3, [pc, #300]	; (80025a4 <LCD_Display+0x260>)
 8002476:	2204      	movs	r2, #4
 8002478:	701a      	strb	r2, [r3, #0]
 800247a:	e0cc      	b.n	8002616 <LCD_Display+0x2d2>
				}
				else if(pointer_position == 2)
 800247c:	4b47      	ldr	r3, [pc, #284]	; (800259c <LCD_Display+0x258>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d103      	bne.n	800248c <LCD_Display+0x148>
				{
					option_page_2 = Page2_pump_2;
 8002484:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <LCD_Display+0x260>)
 8002486:	2205      	movs	r2, #5
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e0c4      	b.n	8002616 <LCD_Display+0x2d2>
				}
				else if(pointer_position == 4)
 800248c:	4b43      	ldr	r3, [pc, #268]	; (800259c <LCD_Display+0x258>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b04      	cmp	r3, #4
 8002492:	d103      	bne.n	800249c <LCD_Display+0x158>
				{
					option_page_2 = Page2_pump_3;
 8002494:	4b43      	ldr	r3, [pc, #268]	; (80025a4 <LCD_Display+0x260>)
 8002496:	2206      	movs	r2, #6
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	e0bc      	b.n	8002616 <LCD_Display+0x2d2>
				}
				else if(pointer_position == 6)
 800249c:	4b3f      	ldr	r3, [pc, #252]	; (800259c <LCD_Display+0x258>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b06      	cmp	r3, #6
 80024a2:	d103      	bne.n	80024ac <LCD_Display+0x168>
				{
					option_page_2 = Page2_pump_4;
 80024a4:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <LCD_Display+0x260>)
 80024a6:	2207      	movs	r2, #7
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e0b4      	b.n	8002616 <LCD_Display+0x2d2>
				}
				else
				{
					option_page_2 = Page2_Back;
 80024ac:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <LCD_Display+0x260>)
 80024ae:	220c      	movs	r2, #12
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e0b0      	b.n	8002616 <LCD_Display+0x2d2>
				}

			}
			///// OPTION CALIB AT PAGE 1
			else if(option_page_1 == Page1_Calbration_sensor)
 80024b4:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <LCD_Display+0x25c>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d117      	bne.n	80024ec <LCD_Display+0x1a8>
			{

				if(pointer_position == 0)
 80024bc:	4b37      	ldr	r3, [pc, #220]	; (800259c <LCD_Display+0x258>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d105      	bne.n	80024d0 <LCD_Display+0x18c>
				{
					option_page_2 = Page2_calib_ph;
 80024c4:	4b37      	ldr	r3, [pc, #220]	; (80025a4 <LCD_Display+0x260>)
 80024c6:	2208      	movs	r2, #8
 80024c8:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 80024ca:	f7ff fb11 	bl	8001af0 <lcd_clear>
 80024ce:	e0a2      	b.n	8002616 <LCD_Display+0x2d2>
				}
				else if(pointer_position == 4)
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <LCD_Display+0x258>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d105      	bne.n	80024e4 <LCD_Display+0x1a0>
				{
					option_page_2 = Page2_calib_tds;
 80024d8:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <LCD_Display+0x260>)
 80024da:	2209      	movs	r2, #9
 80024dc:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 80024de:	f7ff fb07 	bl	8001af0 <lcd_clear>
 80024e2:	e098      	b.n	8002616 <LCD_Display+0x2d2>
				}
				else
				{
					option_page_2 = Page2_Back;
 80024e4:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <LCD_Display+0x260>)
 80024e6:	220c      	movs	r2, #12
 80024e8:	701a      	strb	r2, [r3, #0]
 80024ea:	e094      	b.n	8002616 <LCD_Display+0x2d2>
				}
			}
			///OPTION WIFICONFIG PAGE 1
			else if(option_page_1 == Page1_WifiConfig)
 80024ec:	4b2c      	ldr	r3, [pc, #176]	; (80025a0 <LCD_Display+0x25c>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	f040 8090 	bne.w	8002616 <LCD_Display+0x2d2>
			{
				if(pointer_position == 4)
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <LCD_Display+0x258>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d103      	bne.n	8002506 <LCD_Display+0x1c2>
				{
					option_page_2 = Page2_start;
 80024fe:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <LCD_Display+0x260>)
 8002500:	220a      	movs	r2, #10
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	e087      	b.n	8002616 <LCD_Display+0x2d2>
				}
				else
				{
					option_page_2 = Page2_Back;
 8002506:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <LCD_Display+0x260>)
 8002508:	220c      	movs	r2, #12
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e083      	b.n	8002616 <LCD_Display+0x2d2>
				}
			}
		}
		else if(Rpush_number == 4)  // Only for Set up value
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <LCD_Display+0x24c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b04      	cmp	r3, #4
 8002514:	d17f      	bne.n	8002616 <LCD_Display+0x2d2>
		{
			if(option_page_1 == Page1_SetPoint)
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <LCD_Display+0x25c>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d116      	bne.n	800254c <LCD_Display+0x208>
			{
				option_page_2 = Page2_Nothing;
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <LCD_Display+0x260>)
 8002520:	220d      	movs	r2, #13
 8002522:	701a      	strb	r2, [r3, #0]
				Rpush_number = 2;
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <LCD_Display+0x24c>)
 8002526:	2202      	movs	r2, #2
 8002528:	601a      	str	r2, [r3, #0]
				button_flag = 1;
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <LCD_Display+0x254>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]
				pointer_position = pointer_position + 1;
 8002530:	4b1a      	ldr	r3, [pc, #104]	; (800259c <LCD_Display+0x258>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3301      	adds	r3, #1
 8002536:	4a19      	ldr	r2, [pc, #100]	; (800259c <LCD_Display+0x258>)
 8002538:	6013      	str	r3, [r2, #0]
				Save_SetPoint(flash_setpoint);
 800253a:	2000      	movs	r0, #0
 800253c:	f000 fc62 	bl	8002e04 <Save_SetPoint>
				HAL_TIM_Base_Start_IT(&htim4);
 8002540:	4819      	ldr	r0, [pc, #100]	; (80025a8 <LCD_Display+0x264>)
 8002542:	f005 fdd3 	bl	80080ec <HAL_TIM_Base_Start_IT>
				lcd_clear();
 8002546:	f7ff fad3 	bl	8001af0 <lcd_clear>
 800254a:	e064      	b.n	8002616 <LCD_Display+0x2d2>
			}
			else if(option_page_1 == Page1_Calbration_sensor)
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <LCD_Display+0x25c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d149      	bne.n	80025e8 <LCD_Display+0x2a4>
			{
				if(option_page_2 == Page2_calib_ph)
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <LCD_Display+0x260>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b08      	cmp	r3, #8
 800255a:	d127      	bne.n	80025ac <LCD_Display+0x268>
				{
					option_page_2 = Page2_Nothing;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <LCD_Display+0x260>)
 800255e:	220d      	movs	r2, #13
 8002560:	701a      	strb	r2, [r3, #0]
					Rpush_number = 2;
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <LCD_Display+0x24c>)
 8002564:	2202      	movs	r2, #2
 8002566:	601a      	str	r2, [r3, #0]
					button_flag = 1;
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <LCD_Display+0x254>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]
					pointer_position = pointer_position + 1;
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <LCD_Display+0x258>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3301      	adds	r3, #1
 8002574:	4a09      	ldr	r2, [pc, #36]	; (800259c <LCD_Display+0x258>)
 8002576:	6013      	str	r3, [r2, #0]
					Save_SetPoint(flash_calibration_ph);
 8002578:	2001      	movs	r0, #1
 800257a:	f000 fc43 	bl	8002e04 <Save_SetPoint>
					Read_SetPoint(flash_calibration_ph);
 800257e:	2001      	movs	r0, #1
 8002580:	f000 fca2 	bl	8002ec8 <Read_SetPoint>
					HAL_TIM_Base_Start_IT(&htim4);
 8002584:	4808      	ldr	r0, [pc, #32]	; (80025a8 <LCD_Display+0x264>)
 8002586:	f005 fdb1 	bl	80080ec <HAL_TIM_Base_Start_IT>
					lcd_clear();
 800258a:	f7ff fab1 	bl	8001af0 <lcd_clear>
 800258e:	e042      	b.n	8002616 <LCD_Display+0x2d2>
 8002590:	20000220 	.word	0x20000220
 8002594:	20000228 	.word	0x20000228
 8002598:	20000224 	.word	0x20000224
 800259c:	2000021c 	.word	0x2000021c
 80025a0:	20000001 	.word	0x20000001
 80025a4:	20000002 	.word	0x20000002
 80025a8:	200003f4 	.word	0x200003f4
				}
				else if(option_page_2 ==Page2_calib_tds)
 80025ac:	4bb3      	ldr	r3, [pc, #716]	; (800287c <LCD_Display+0x538>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b09      	cmp	r3, #9
 80025b2:	d130      	bne.n	8002616 <LCD_Display+0x2d2>
				{
					option_page_2 = Page2_Nothing;
 80025b4:	4bb1      	ldr	r3, [pc, #708]	; (800287c <LCD_Display+0x538>)
 80025b6:	220d      	movs	r2, #13
 80025b8:	701a      	strb	r2, [r3, #0]
					Rpush_number = 2;
 80025ba:	4bb1      	ldr	r3, [pc, #708]	; (8002880 <LCD_Display+0x53c>)
 80025bc:	2202      	movs	r2, #2
 80025be:	601a      	str	r2, [r3, #0]
					button_flag = 1;
 80025c0:	4bb0      	ldr	r3, [pc, #704]	; (8002884 <LCD_Display+0x540>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
					pointer_position = pointer_position + 1;
 80025c6:	4bb0      	ldr	r3, [pc, #704]	; (8002888 <LCD_Display+0x544>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3301      	adds	r3, #1
 80025cc:	4aae      	ldr	r2, [pc, #696]	; (8002888 <LCD_Display+0x544>)
 80025ce:	6013      	str	r3, [r2, #0]
					Save_SetPoint(flash_calibration_tds);
 80025d0:	2002      	movs	r0, #2
 80025d2:	f000 fc17 	bl	8002e04 <Save_SetPoint>
					Read_SetPoint(flash_calibration_tds);
 80025d6:	2002      	movs	r0, #2
 80025d8:	f000 fc76 	bl	8002ec8 <Read_SetPoint>
					HAL_TIM_Base_Start_IT(&htim4);
 80025dc:	48ab      	ldr	r0, [pc, #684]	; (800288c <LCD_Display+0x548>)
 80025de:	f005 fd85 	bl	80080ec <HAL_TIM_Base_Start_IT>
					lcd_clear();
 80025e2:	f7ff fa85 	bl	8001af0 <lcd_clear>
 80025e6:	e016      	b.n	8002616 <LCD_Display+0x2d2>
				}

			}
			else if(option_page_2 ==Page2_start)
 80025e8:	4ba4      	ldr	r3, [pc, #656]	; (800287c <LCD_Display+0x538>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b0a      	cmp	r3, #10
 80025ee:	d112      	bne.n	8002616 <LCD_Display+0x2d2>
			{
				button_flag = 1;
 80025f0:	4ba4      	ldr	r3, [pc, #656]	; (8002884 <LCD_Display+0x540>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
				option_page_2 = Page2_Nothing;
 80025f6:	4ba1      	ldr	r3, [pc, #644]	; (800287c <LCD_Display+0x538>)
 80025f8:	220d      	movs	r2, #13
 80025fa:	701a      	strb	r2, [r3, #0]
				Rpush_number = 2;
 80025fc:	4ba0      	ldr	r3, [pc, #640]	; (8002880 <LCD_Display+0x53c>)
 80025fe:	2202      	movs	r2, #2
 8002600:	601a      	str	r2, [r3, #0]
				pointer_position = pointer_position + 1;
 8002602:	4ba1      	ldr	r3, [pc, #644]	; (8002888 <LCD_Display+0x544>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	3301      	adds	r3, #1
 8002608:	4a9f      	ldr	r2, [pc, #636]	; (8002888 <LCD_Display+0x544>)
 800260a:	6013      	str	r3, [r2, #0]
				HAL_TIM_Base_Start_IT(&htim4);
 800260c:	489f      	ldr	r0, [pc, #636]	; (800288c <LCD_Display+0x548>)
 800260e:	f005 fd6d 	bl	80080ec <HAL_TIM_Base_Start_IT>
				lcd_clear();
 8002612:	f7ff fa6d 	bl	8001af0 <lcd_clear>
	}




	switch(Page)
 8002616:	4b9e      	ldr	r3, [pc, #632]	; (8002890 <LCD_Display+0x54c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d017      	beq.n	800264e <LCD_Display+0x30a>
 800261e:	2b02      	cmp	r3, #2
 8002620:	f200 8227 	bhi.w	8002a72 <LCD_Display+0x72e>
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <LCD_Display+0x2ea>
 8002628:	2b01      	cmp	r3, #1
 800262a:	d003      	beq.n	8002634 <LCD_Display+0x2f0>
				}
			}
			break;

		default:
			break;
 800262c:	e221      	b.n	8002a72 <LCD_Display+0x72e>
			LCD_Normal_Mode();
 800262e:	f7ff fe19 	bl	8002264 <LCD_Normal_Mode>
			break;
 8002632:	e221      	b.n	8002a78 <LCD_Display+0x734>
			Pointer_Status(Rotary_volum());
 8002634:	f7ff fad6 	bl	8001be4 <Rotary_volum>
 8002638:	4603      	mov	r3, r0
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fb40 	bl	8001cc0 <Pointer_Status>
			LCD_Menu_1(Rotary_volum());
 8002640:	f7ff fad0 	bl	8001be4 <Rotary_volum>
 8002644:	4603      	mov	r3, r0
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fde8 	bl	800221c <LCD_Menu_1>
			break;
 800264c:	e214      	b.n	8002a78 <LCD_Display+0x734>
			Pointer_Status(Rotary_volum());
 800264e:	f7ff fac9 	bl	8001be4 <Rotary_volum>
 8002652:	4603      	mov	r3, r0
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fb33 	bl	8001cc0 <Pointer_Status>
			if(option_page_1 == Page1_SetPoint)
 800265a:	4b8e      	ldr	r3, [pc, #568]	; (8002894 <LCD_Display+0x550>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b02      	cmp	r3, #2
 8002660:	f040 813a 	bne.w	80028d8 <LCD_Display+0x594>
				  Read_SetPoint(flash_setpoint);
 8002664:	2000      	movs	r0, #0
 8002666:	f000 fc2f 	bl	8002ec8 <Read_SetPoint>
				  LCD_Menu_2_1();
 800266a:	f7ff fbcf 	bl	8001e0c <LCD_Menu_2_1>
				  if(option_page_2 == Page2_ph)
 800266e:	4b83      	ldr	r3, [pc, #524]	; (800287c <LCD_Display+0x538>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d137      	bne.n	80026e6 <LCD_Display+0x3a2>
					  lcd_pointer_1 = PH_SetPoint;
 8002676:	4b88      	ldr	r3, [pc, #544]	; (8002898 <LCD_Display+0x554>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002680:	ee17 2a90 	vmov	r2, s15
 8002684:	4b85      	ldr	r3, [pc, #532]	; (800289c <LCD_Display+0x558>)
 8002686:	601a      	str	r2, [r3, #0]
					  tamp = PH_SetPoint;
 8002688:	4b83      	ldr	r3, [pc, #524]	; (8002898 <LCD_Display+0x554>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	607b      	str	r3, [r7, #4]
					  HAL_TIM_Base_Stop_IT(&htim4);
 800268e:	487f      	ldr	r0, [pc, #508]	; (800288c <LCD_Display+0x548>)
 8002690:	f005 fd9c 	bl	80081cc <HAL_TIM_Base_Stop_IT>
						while(Rpush_number == 3) 		// Setting setpoint for PH
 8002694:	e022      	b.n	80026dc <LCD_Display+0x398>
											LCD_Menu_2_1();
 8002696:	f7ff fbb9 	bl	8001e0c <LCD_Menu_2_1>
											Push_Slect();
 800269a:	f7ff fadd 	bl	8001c58 <Push_Slect>
											Pointer_2_Status(0);
 800269e:	2000      	movs	r0, #0
 80026a0:	f7ff fb82 	bl	8001da8 <Pointer_2_Status>
											tamp2= (float)((Rotary_volum()- tamp)/10);
 80026a4:	f7ff fa9e 	bl	8001be4 <Rotary_volum>
 80026a8:	ee07 0a90 	vmov	s15, r0
 80026ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80026b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026b8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80026bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026c0:	edc7 7a00 	vstr	s15, [r7]
											PH_SetPoint = tamp2 + tamp;
 80026c4:	ed97 7a00 	vldr	s14, [r7]
 80026c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80026cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d0:	4b71      	ldr	r3, [pc, #452]	; (8002898 <LCD_Display+0x554>)
 80026d2:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 80026d6:	4872      	ldr	r0, [pc, #456]	; (80028a0 <LCD_Display+0x55c>)
 80026d8:	f004 fa31 	bl	8006b3e <HAL_IWDG_Refresh>
						while(Rpush_number == 3) 		// Setting setpoint for PH
 80026dc:	4b68      	ldr	r3, [pc, #416]	; (8002880 <LCD_Display+0x53c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d0d8      	beq.n	8002696 <LCD_Display+0x352>
			break;
 80026e4:	e1c7      	b.n	8002a76 <LCD_Display+0x732>
				  else if(option_page_2== Page2_ph_thr) // Setting setpoint for PH_THR
 80026e6:	4b65      	ldr	r3, [pc, #404]	; (800287c <LCD_Display+0x538>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d137      	bne.n	800275e <LCD_Display+0x41a>
					  lcd_pointer_1 = PH_THR_SetPoint;
 80026ee:	4b6d      	ldr	r3, [pc, #436]	; (80028a4 <LCD_Display+0x560>)
 80026f0:	edd3 7a00 	vldr	s15, [r3]
 80026f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026f8:	ee17 2a90 	vmov	r2, s15
 80026fc:	4b67      	ldr	r3, [pc, #412]	; (800289c <LCD_Display+0x558>)
 80026fe:	601a      	str	r2, [r3, #0]
				  	  tamp = PH_THR_SetPoint;
 8002700:	4b68      	ldr	r3, [pc, #416]	; (80028a4 <LCD_Display+0x560>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	607b      	str	r3, [r7, #4]
					  HAL_TIM_Base_Stop_IT(&htim4);
 8002706:	4861      	ldr	r0, [pc, #388]	; (800288c <LCD_Display+0x548>)
 8002708:	f005 fd60 	bl	80081cc <HAL_TIM_Base_Stop_IT>
						while(Rpush_number== 3)
 800270c:	e022      	b.n	8002754 <LCD_Display+0x410>
											LCD_Menu_2_1();
 800270e:	f7ff fb7d 	bl	8001e0c <LCD_Menu_2_1>
											Push_Slect();
 8002712:	f7ff faa1 	bl	8001c58 <Push_Slect>
											Pointer_2_Status(2);
 8002716:	2002      	movs	r0, #2
 8002718:	f7ff fb46 	bl	8001da8 <Pointer_2_Status>
											tamp2 = (float)((Rotary_volum()- tamp)/10);
 800271c:	f7ff fa62 	bl	8001be4 <Rotary_volum>
 8002720:	ee07 0a90 	vmov	s15, r0
 8002724:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002728:	edd7 7a01 	vldr	s15, [r7, #4]
 800272c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002730:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002734:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002738:	edc7 7a00 	vstr	s15, [r7]
											PH_THR_SetPoint =  tamp2 + tamp;
 800273c:	ed97 7a00 	vldr	s14, [r7]
 8002740:	edd7 7a01 	vldr	s15, [r7, #4]
 8002744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002748:	4b56      	ldr	r3, [pc, #344]	; (80028a4 <LCD_Display+0x560>)
 800274a:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 800274e:	4854      	ldr	r0, [pc, #336]	; (80028a0 <LCD_Display+0x55c>)
 8002750:	f004 f9f5 	bl	8006b3e <HAL_IWDG_Refresh>
						while(Rpush_number== 3)
 8002754:	4b4a      	ldr	r3, [pc, #296]	; (8002880 <LCD_Display+0x53c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d0d8      	beq.n	800270e <LCD_Display+0x3ca>
			break;
 800275c:	e18b      	b.n	8002a76 <LCD_Display+0x732>
				  else if(option_page_2==Page2_tds)		// Setting setpoint for TDS
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <LCD_Display+0x538>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d142      	bne.n	80027ec <LCD_Display+0x4a8>
					  lcd_pointer_1 = TDS_SetPoint;
 8002766:	4b50      	ldr	r3, [pc, #320]	; (80028a8 <LCD_Display+0x564>)
 8002768:	edd3 7a00 	vldr	s15, [r3]
 800276c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002770:	ee17 2a90 	vmov	r2, s15
 8002774:	4b49      	ldr	r3, [pc, #292]	; (800289c <LCD_Display+0x558>)
 8002776:	601a      	str	r2, [r3, #0]
					  tamp = TDS_SetPoint;
 8002778:	4b4b      	ldr	r3, [pc, #300]	; (80028a8 <LCD_Display+0x564>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	607b      	str	r3, [r7, #4]
					  HAL_TIM_Base_Stop_IT(&htim4);
 800277e:	4843      	ldr	r0, [pc, #268]	; (800288c <LCD_Display+0x548>)
 8002780:	f005 fd24 	bl	80081cc <HAL_TIM_Base_Stop_IT>
						while(Rpush_number== 3)
 8002784:	e02d      	b.n	80027e2 <LCD_Display+0x49e>
											LCD_Menu_2_1();
 8002786:	f7ff fb41 	bl	8001e0c <LCD_Menu_2_1>
											Push_Slect();
 800278a:	f7ff fa65 	bl	8001c58 <Push_Slect>
											Pointer_2_Status(4);
 800278e:	2004      	movs	r0, #4
 8002790:	f7ff fb0a 	bl	8001da8 <Pointer_2_Status>
											tamp2 = ((Rotary_volum()- tamp)*10);
 8002794:	f7ff fa26 	bl	8001be4 <Rotary_volum>
 8002798:	ee07 0a90 	vmov	s15, r0
 800279c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80027a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80027ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027b0:	edc7 7a00 	vstr	s15, [r7]
											TDS_SetPoint =  (int)tamp2 + (int)tamp;
 80027b4:	edd7 7a00 	vldr	s15, [r7]
 80027b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027bc:	ee17 2a90 	vmov	r2, s15
 80027c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80027c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027c8:	ee17 3a90 	vmov	r3, s15
 80027cc:	4413      	add	r3, r2
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d6:	4b34      	ldr	r3, [pc, #208]	; (80028a8 <LCD_Display+0x564>)
 80027d8:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 80027dc:	4830      	ldr	r0, [pc, #192]	; (80028a0 <LCD_Display+0x55c>)
 80027de:	f004 f9ae 	bl	8006b3e <HAL_IWDG_Refresh>
						while(Rpush_number== 3)
 80027e2:	4b27      	ldr	r3, [pc, #156]	; (8002880 <LCD_Display+0x53c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d0cd      	beq.n	8002786 <LCD_Display+0x442>
			break;
 80027ea:	e144      	b.n	8002a76 <LCD_Display+0x732>
				  else if(option_page_2==Page2_tds_thr)	// Setting setpoint for TDS_thr
 80027ec:	4b23      	ldr	r3, [pc, #140]	; (800287c <LCD_Display+0x538>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d15d      	bne.n	80028b0 <LCD_Display+0x56c>
					  	HAL_TIM_Base_Stop_IT(&htim4);
 80027f4:	4825      	ldr	r0, [pc, #148]	; (800288c <LCD_Display+0x548>)
 80027f6:	f005 fce9 	bl	80081cc <HAL_TIM_Base_Stop_IT>
					  	tamp = TDS_THR_SetPoint;
 80027fa:	4b2c      	ldr	r3, [pc, #176]	; (80028ac <LCD_Display+0x568>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	607b      	str	r3, [r7, #4]
					    lcd_pointer_1 = TDS_THR_SetPoint;
 8002800:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <LCD_Display+0x568>)
 8002802:	edd3 7a00 	vldr	s15, [r3]
 8002806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800280a:	ee17 2a90 	vmov	r2, s15
 800280e:	4b23      	ldr	r3, [pc, #140]	; (800289c <LCD_Display+0x558>)
 8002810:	601a      	str	r2, [r3, #0]
						while(Rpush_number == 3)
 8002812:	e02d      	b.n	8002870 <LCD_Display+0x52c>
											LCD_Menu_2_1();
 8002814:	f7ff fafa 	bl	8001e0c <LCD_Menu_2_1>
											Push_Slect();
 8002818:	f7ff fa1e 	bl	8001c58 <Push_Slect>
											Pointer_2_Status(6);
 800281c:	2006      	movs	r0, #6
 800281e:	f7ff fac3 	bl	8001da8 <Pointer_2_Status>
											tamp2 = ((Rotary_volum()- tamp)*10);
 8002822:	f7ff f9df 	bl	8001be4 <Rotary_volum>
 8002826:	ee07 0a90 	vmov	s15, r0
 800282a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800282e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002836:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800283a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800283e:	edc7 7a00 	vstr	s15, [r7]
											TDS_THR_SetPoint = (int)tamp2 + (int)tamp;
 8002842:	edd7 7a00 	vldr	s15, [r7]
 8002846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800284a:	ee17 2a90 	vmov	r2, s15
 800284e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002852:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002856:	ee17 3a90 	vmov	r3, s15
 800285a:	4413      	add	r3, r2
 800285c:	ee07 3a90 	vmov	s15, r3
 8002860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <LCD_Display+0x568>)
 8002866:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 800286a:	480d      	ldr	r0, [pc, #52]	; (80028a0 <LCD_Display+0x55c>)
 800286c:	f004 f967 	bl	8006b3e <HAL_IWDG_Refresh>
						while(Rpush_number == 3)
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <LCD_Display+0x53c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b03      	cmp	r3, #3
 8002876:	d0cd      	beq.n	8002814 <LCD_Display+0x4d0>
			break;
 8002878:	e0fd      	b.n	8002a76 <LCD_Display+0x732>
 800287a:	bf00      	nop
 800287c:	20000002 	.word	0x20000002
 8002880:	20000220 	.word	0x20000220
 8002884:	20000224 	.word	0x20000224
 8002888:	2000021c 	.word	0x2000021c
 800288c:	200003f4 	.word	0x200003f4
 8002890:	20000228 	.word	0x20000228
 8002894:	20000001 	.word	0x20000001
 8002898:	20000540 	.word	0x20000540
 800289c:	2000022c 	.word	0x2000022c
 80028a0:	20000338 	.word	0x20000338
 80028a4:	2000053c 	.word	0x2000053c
 80028a8:	20000534 	.word	0x20000534
 80028ac:	20000538 	.word	0x20000538
				  else if(option_page_2 == Page2_Back)	//Back option
 80028b0:	4b73      	ldr	r3, [pc, #460]	; (8002a80 <LCD_Display+0x73c>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	f040 80de 	bne.w	8002a76 <LCD_Display+0x732>
					  Page = 1;
 80028ba:	4b72      	ldr	r3, [pc, #456]	; (8002a84 <LCD_Display+0x740>)
 80028bc:	2201      	movs	r2, #1
 80028be:	601a      	str	r2, [r3, #0]
					  Rpush_number = 1;
 80028c0:	4b71      	ldr	r3, [pc, #452]	; (8002a88 <LCD_Display+0x744>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
					  button_flag = 0;
 80028c6:	4b71      	ldr	r3, [pc, #452]	; (8002a8c <LCD_Display+0x748>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
					  option_page_2 = Page2_Nothing;
 80028cc:	4b6c      	ldr	r3, [pc, #432]	; (8002a80 <LCD_Display+0x73c>)
 80028ce:	220d      	movs	r2, #13
 80028d0:	701a      	strb	r2, [r3, #0]
					  lcd_clear();
 80028d2:	f7ff f90d 	bl	8001af0 <lcd_clear>
			break;
 80028d6:	e0ce      	b.n	8002a76 <LCD_Display+0x732>
			else if(option_page_1 == Page1_Testing) // Display with option testing
 80028d8:	4b6d      	ldr	r3, [pc, #436]	; (8002a90 <LCD_Display+0x74c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d129      	bne.n	8002934 <LCD_Display+0x5f0>
				 LCD_Menu_2_2();
 80028e0:	f7ff fb36 	bl	8001f50 <LCD_Menu_2_2>
				  if(option_page_2 == Page2_pump_1)
 80028e4:	4b66      	ldr	r3, [pc, #408]	; (8002a80 <LCD_Display+0x73c>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	f000 80c4 	beq.w	8002a76 <LCD_Display+0x732>
				  else if(option_page_2== Page2_pump_2)
 80028ee:	4b64      	ldr	r3, [pc, #400]	; (8002a80 <LCD_Display+0x73c>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b05      	cmp	r3, #5
 80028f4:	f000 80bf 	beq.w	8002a76 <LCD_Display+0x732>
				  else if(option_page_2==Page2_pump_3)
 80028f8:	4b61      	ldr	r3, [pc, #388]	; (8002a80 <LCD_Display+0x73c>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b06      	cmp	r3, #6
 80028fe:	f000 80ba 	beq.w	8002a76 <LCD_Display+0x732>
				  else if(option_page_2==Page2_pump_4)
 8002902:	4b5f      	ldr	r3, [pc, #380]	; (8002a80 <LCD_Display+0x73c>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b07      	cmp	r3, #7
 8002908:	f000 80b5 	beq.w	8002a76 <LCD_Display+0x732>
				  else if(option_page_2 == Page2_Back)
 800290c:	4b5c      	ldr	r3, [pc, #368]	; (8002a80 <LCD_Display+0x73c>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b0c      	cmp	r3, #12
 8002912:	f040 80b0 	bne.w	8002a76 <LCD_Display+0x732>
					  Page = 1;
 8002916:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <LCD_Display+0x740>)
 8002918:	2201      	movs	r2, #1
 800291a:	601a      	str	r2, [r3, #0]
					  Rpush_number = 1;
 800291c:	4b5a      	ldr	r3, [pc, #360]	; (8002a88 <LCD_Display+0x744>)
 800291e:	2201      	movs	r2, #1
 8002920:	601a      	str	r2, [r3, #0]
					  button_flag = 0;
 8002922:	4b5a      	ldr	r3, [pc, #360]	; (8002a8c <LCD_Display+0x748>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
					  option_page_2 = Page2_Nothing;
 8002928:	4b55      	ldr	r3, [pc, #340]	; (8002a80 <LCD_Display+0x73c>)
 800292a:	220d      	movs	r2, #13
 800292c:	701a      	strb	r2, [r3, #0]
					  lcd_clear();
 800292e:	f7ff f8df 	bl	8001af0 <lcd_clear>
			break;
 8002932:	e0a0      	b.n	8002a76 <LCD_Display+0x732>
			else if(option_page_1 == Page1_Calbration_sensor) // Display with calibration
 8002934:	4b56      	ldr	r3, [pc, #344]	; (8002a90 <LCD_Display+0x74c>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b04      	cmp	r3, #4
 800293a:	d155      	bne.n	80029e8 <LCD_Display+0x6a4>
					Read_SetPoint(flash_calibration_ph);
 800293c:	2001      	movs	r0, #1
 800293e:	f000 fac3 	bl	8002ec8 <Read_SetPoint>
					Read_SetPoint(flash_calibration_tds);
 8002942:	2002      	movs	r0, #2
 8002944:	f000 fac0 	bl	8002ec8 <Read_SetPoint>
					LCD_Menu_2_3(0);
 8002948:	2000      	movs	r0, #0
 800294a:	f7ff fb25 	bl	8001f98 <LCD_Menu_2_3>
					if(option_page_2 == Page2_calib_ph)
 800294e:	4b4c      	ldr	r3, [pc, #304]	; (8002a80 <LCD_Display+0x73c>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b08      	cmp	r3, #8
 8002954:	d118      	bne.n	8002988 <LCD_Display+0x644>
						HAL_TIM_Base_Stop_IT(&htim4);
 8002956:	484f      	ldr	r0, [pc, #316]	; (8002a94 <LCD_Display+0x750>)
 8002958:	f005 fc38 	bl	80081cc <HAL_TIM_Base_Stop_IT>
						while(Rpush_number == 3)
 800295c:	e00f      	b.n	800297e <LCD_Display+0x63a>
											PH_Calibration();
 800295e:	f000 f997 	bl	8002c90 <PH_Calibration>
											LCD_Menu_2_3(1);
 8002962:	2001      	movs	r0, #1
 8002964:	f7ff fb18 	bl	8001f98 <LCD_Menu_2_3>
											Push_Slect();
 8002968:	f7ff f976 	bl	8001c58 <Push_Slect>
											HAL_Delay(500);
 800296c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002970:	f002 f926 	bl	8004bc0 <HAL_Delay>
											lcd_clear();
 8002974:	f7ff f8bc 	bl	8001af0 <lcd_clear>
											HAL_IWDG_Refresh(&hiwdg);
 8002978:	4847      	ldr	r0, [pc, #284]	; (8002a98 <LCD_Display+0x754>)
 800297a:	f004 f8e0 	bl	8006b3e <HAL_IWDG_Refresh>
						while(Rpush_number == 3)
 800297e:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <LCD_Display+0x744>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d0eb      	beq.n	800295e <LCD_Display+0x61a>
			break;
 8002986:	e076      	b.n	8002a76 <LCD_Display+0x732>
					else if(option_page_2 == Page2_calib_tds)
 8002988:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <LCD_Display+0x73c>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b09      	cmp	r3, #9
 800298e:	d118      	bne.n	80029c2 <LCD_Display+0x67e>
						HAL_TIM_Base_Stop_IT(&htim4);
 8002990:	4840      	ldr	r0, [pc, #256]	; (8002a94 <LCD_Display+0x750>)
 8002992:	f005 fc1b 	bl	80081cc <HAL_TIM_Base_Stop_IT>
						while(Rpush_number == 3)
 8002996:	e00f      	b.n	80029b8 <LCD_Display+0x674>
											TDS_Calibration();
 8002998:	f000 f9fe 	bl	8002d98 <TDS_Calibration>
											LCD_Menu_2_3(2);
 800299c:	2002      	movs	r0, #2
 800299e:	f7ff fafb 	bl	8001f98 <LCD_Menu_2_3>
											Push_Slect();
 80029a2:	f7ff f959 	bl	8001c58 <Push_Slect>
											HAL_Delay(500);
 80029a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029aa:	f002 f909 	bl	8004bc0 <HAL_Delay>
											lcd_clear();
 80029ae:	f7ff f89f 	bl	8001af0 <lcd_clear>
											HAL_IWDG_Refresh(&hiwdg);
 80029b2:	4839      	ldr	r0, [pc, #228]	; (8002a98 <LCD_Display+0x754>)
 80029b4:	f004 f8c3 	bl	8006b3e <HAL_IWDG_Refresh>
						while(Rpush_number == 3)
 80029b8:	4b33      	ldr	r3, [pc, #204]	; (8002a88 <LCD_Display+0x744>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d0eb      	beq.n	8002998 <LCD_Display+0x654>
			break;
 80029c0:	e059      	b.n	8002a76 <LCD_Display+0x732>
					else if(option_page_2 == Page2_Back)
 80029c2:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <LCD_Display+0x73c>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d155      	bne.n	8002a76 <LCD_Display+0x732>
					  Page = 1;
 80029ca:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <LCD_Display+0x740>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
					  Rpush_number = 1;
 80029d0:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <LCD_Display+0x744>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
					  button_flag = 0;
 80029d6:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <LCD_Display+0x748>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
					  option_page_2 = Page2_Nothing;
 80029dc:	4b28      	ldr	r3, [pc, #160]	; (8002a80 <LCD_Display+0x73c>)
 80029de:	220d      	movs	r2, #13
 80029e0:	701a      	strb	r2, [r3, #0]
					  lcd_clear();
 80029e2:	f7ff f885 	bl	8001af0 <lcd_clear>
			break;
 80029e6:	e046      	b.n	8002a76 <LCD_Display+0x732>
			else if(option_page_1 == Page1_WifiConfig)
 80029e8:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <LCD_Display+0x74c>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b05      	cmp	r3, #5
 80029ee:	d142      	bne.n	8002a76 <LCD_Display+0x732>
				LCD_Menu_2_4_(0);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7ff fbcf 	bl	8002194 <LCD_Menu_2_4_>
				if(option_page_2 == Page2_start)
 80029f6:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <LCD_Display+0x73c>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b0a      	cmp	r3, #10
 80029fc:	d122      	bne.n	8002a44 <LCD_Display+0x700>
					HAL_TIM_Base_Stop_IT(&htim4);
 80029fe:	4825      	ldr	r0, [pc, #148]	; (8002a94 <LCD_Display+0x750>)
 8002a00:	f005 fbe4 	bl	80081cc <HAL_TIM_Base_Stop_IT>
					while(Rpush_number == 3 && config_wifi_flag == 0)
 8002a04:	e00f      	b.n	8002a26 <LCD_Display+0x6e2>
											Push_Slect();
 8002a06:	f7ff f927 	bl	8001c58 <Push_Slect>
											lcd_clear();
 8002a0a:	f7ff f871 	bl	8001af0 <lcd_clear>
											HAL_IWDG_Refresh(&hiwdg);
 8002a0e:	4822      	ldr	r0, [pc, #136]	; (8002a98 <LCD_Display+0x754>)
 8002a10:	f004 f895 	bl	8006b3e <HAL_IWDG_Refresh>
											LCD_Menu_2_4_(1);
 8002a14:	2001      	movs	r0, #1
 8002a16:	f7ff fbbd 	bl	8002194 <LCD_Menu_2_4_>
											Wifi_Config();
 8002a1a:	f000 fbf5 	bl	8003208 <Wifi_Config>
											HAL_Delay(1000);
 8002a1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a22:	f002 f8cd 	bl	8004bc0 <HAL_Delay>
					while(Rpush_number == 3 && config_wifi_flag == 0)
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <LCD_Display+0x744>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d103      	bne.n	8002a36 <LCD_Display+0x6f2>
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <LCD_Display+0x758>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0e7      	beq.n	8002a06 <LCD_Display+0x6c2>
					config_wifi_flag = 0;
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <LCD_Display+0x758>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
					Rpush_number = 4;
 8002a3c:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <LCD_Display+0x744>)
 8002a3e:	2204      	movs	r2, #4
 8002a40:	601a      	str	r2, [r3, #0]
			break;
 8002a42:	e018      	b.n	8002a76 <LCD_Display+0x732>
				else if(option_page_2 == Page2_end)
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <LCD_Display+0x73c>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b0b      	cmp	r3, #11
 8002a4a:	d014      	beq.n	8002a76 <LCD_Display+0x732>
				else if(option_page_2 == Page2_Back)
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <LCD_Display+0x73c>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	d110      	bne.n	8002a76 <LCD_Display+0x732>
				  Page = 1;
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <LCD_Display+0x740>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
				  Rpush_number = 1;
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <LCD_Display+0x744>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
				  button_flag = 0;
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <LCD_Display+0x748>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
				  option_page_2 = Page2_Nothing;
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <LCD_Display+0x73c>)
 8002a68:	220d      	movs	r2, #13
 8002a6a:	701a      	strb	r2, [r3, #0]
				  lcd_clear();
 8002a6c:	f7ff f840 	bl	8001af0 <lcd_clear>
			break;
 8002a70:	e001      	b.n	8002a76 <LCD_Display+0x732>
			break;
 8002a72:	bf00      	nop
 8002a74:	e000      	b.n	8002a78 <LCD_Display+0x734>
			break;
 8002a76:	bf00      	nop
	}
 }
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000002 	.word	0x20000002
 8002a84:	20000228 	.word	0x20000228
 8002a88:	20000220 	.word	0x20000220
 8002a8c:	20000224 	.word	0x20000224
 8002a90:	20000001 	.word	0x20000001
 8002a94:	200003f4 	.word	0x200003f4
 8002a98:	20000338 	.word	0x20000338
 8002a9c:	20000544 	.word	0x20000544

08002aa0 <delay_us>:
uint8_t FileName[20];							//Name of File namme
uint8_t UART1_TEMPBUFFER[SIZEOF_COMMAND];		//Temp buffer when receive data UART1
uint8_t UART1_MAINBUFFER[UART1_BUFFER_SIZE];	//MAIN buffer store data UART1

void delay_us(uint16_t time)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim6,0);
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <delay_us+0x30>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24
    while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8002ab2:	bf00      	nop
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <delay_us+0x30>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d3f9      	bcc.n	8002ab4 <delay_us+0x14>
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	2000043c 	.word	0x2000043c

08002ad4 <HAL_UARTEx_RxEventCallback>:
	WifiConfig,
}Message_type;
char buffer_send[100];

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
	memset(UART1_MAINBUFFER,0,strlen((char*)UART1_MAINBUFFER));
 8002ae0:	481c      	ldr	r0, [pc, #112]	; (8002b54 <HAL_UARTEx_RxEventCallback+0x80>)
 8002ae2:	f7fd fb7f 	bl	80001e4 <strlen>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2100      	movs	r1, #0
 8002aec:	4819      	ldr	r0, [pc, #100]	; (8002b54 <HAL_UARTEx_RxEventCallback+0x80>)
 8002aee:	f00a fdf7 	bl	800d6e0 <memset>
	if(huart->Instance == USART1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <HAL_UARTEx_RxEventCallback+0x84>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d112      	bne.n	8002b22 <HAL_UARTEx_RxEventCallback+0x4e>
	{
		memcpy(UART1_MAINBUFFER,UART1_TEMPBUFFER, Size);
 8002afc:	887b      	ldrh	r3, [r7, #2]
 8002afe:	461a      	mov	r2, r3
 8002b00:	4916      	ldr	r1, [pc, #88]	; (8002b5c <HAL_UARTEx_RxEventCallback+0x88>)
 8002b02:	4814      	ldr	r0, [pc, #80]	; (8002b54 <HAL_UARTEx_RxEventCallback+0x80>)
 8002b04:	f00a fdde 	bl	800d6c4 <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,UART1_TEMPBUFFER,SIZEOF_COMMAND);
 8002b08:	223c      	movs	r2, #60	; 0x3c
 8002b0a:	4914      	ldr	r1, [pc, #80]	; (8002b5c <HAL_UARTEx_RxEventCallback+0x88>)
 8002b0c:	4814      	ldr	r0, [pc, #80]	; (8002b60 <HAL_UARTEx_RxEventCallback+0x8c>)
 8002b0e:	f006 f82c 	bl	8008b6a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8002b12:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_UARTEx_RxEventCallback+0x90>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_UARTEx_RxEventCallback+0x90>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0208 	bic.w	r2, r2, #8
 8002b20:	601a      	str	r2, [r3, #0]
	}

	if(!strcmp(UART1_MAINBUFFER,"Config_Wifi_done"))
 8002b22:	4911      	ldr	r1, [pc, #68]	; (8002b68 <HAL_UARTEx_RxEventCallback+0x94>)
 8002b24:	480b      	ldr	r0, [pc, #44]	; (8002b54 <HAL_UARTEx_RxEventCallback+0x80>)
 8002b26:	f7fd fb53 	bl	80001d0 <strcmp>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10d      	bne.n	8002b4c <HAL_UARTEx_RxEventCallback+0x78>
	{
		HAL_UART_Transmit(&huart1, UART1_MAINBUFFER,strlen((char*)UART1_MAINBUFFER), 1000);
 8002b30:	4808      	ldr	r0, [pc, #32]	; (8002b54 <HAL_UARTEx_RxEventCallback+0x80>)
 8002b32:	f7fd fb57 	bl	80001e4 <strlen>
 8002b36:	4603      	mov	r3, r0
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b3e:	4905      	ldr	r1, [pc, #20]	; (8002b54 <HAL_UARTEx_RxEventCallback+0x80>)
 8002b40:	4807      	ldr	r0, [pc, #28]	; (8002b60 <HAL_UARTEx_RxEventCallback+0x8c>)
 8002b42:	f005 ff80 	bl	8008a46 <HAL_UART_Transmit>
		config_wifi_flag = 1;
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_UARTEx_RxEventCallback+0x98>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	701a      	strb	r2, [r3, #0]
	}
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000984 	.word	0x20000984
 8002b58:	40011000 	.word	0x40011000
 8002b5c:	20000948 	.word	0x20000948
 8002b60:	20000484 	.word	0x20000484
 8002b64:	200004c8 	.word	0x200004c8
 8002b68:	08012168 	.word	0x08012168
 8002b6c:	20000544 	.word	0x20000544

08002b70 <SEND_UART1>:

void SEND_UART1(char *String)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)String,strlen(String), 1000);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7fd fb33 	bl	80001e4 <strlen>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4803      	ldr	r0, [pc, #12]	; (8002b98 <SEND_UART1+0x28>)
 8002b8a:	f005 ff5c 	bl	8008a46 <HAL_UART_Transmit>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000484 	.word	0x20000484

08002b9c <Handle_value_send>:
void Handle_value_send(Message_type tp)
{
 8002b9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ba0:	b0b8      	sub	sp, #224	; 0xe0
 8002ba2:	af04      	add	r7, sp, #16
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	71fb      	strb	r3, [r7, #7]
	char msg_send[100];
	char msg_save[100];
	if(tp == Value)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d157      	bne.n	8002c5e <Handle_value_send+0xc2>
	{
		memset(msg_send,0,strlen(msg_send));
 8002bae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fb16 	bl	80001e4 <strlen>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f00a fd8d 	bl	800d6e0 <memset>
		sprintf(msg_send,"{\"ID\":\"123456789\",\"PH\":\"%.2f\",\"TDS\":\"%.0f\",\"Temp\":\"%.2f\"}",PH,TDS,Temperature);
 8002bc6:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <Handle_value_send+0xd8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fccc 	bl	8000568 <__aeabi_f2d>
 8002bd0:	4680      	mov	r8, r0
 8002bd2:	4689      	mov	r9, r1
 8002bd4:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <Handle_value_send+0xdc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fcc5 	bl	8000568 <__aeabi_f2d>
 8002bde:	4604      	mov	r4, r0
 8002be0:	460d      	mov	r5, r1
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <Handle_value_send+0xe0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fcbe 	bl	8000568 <__aeabi_f2d>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8002bf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bf8:	e9cd 4500 	strd	r4, r5, [sp]
 8002bfc:	4642      	mov	r2, r8
 8002bfe:	464b      	mov	r3, r9
 8002c00:	491f      	ldr	r1, [pc, #124]	; (8002c80 <Handle_value_send+0xe4>)
 8002c02:	f00b fbf5 	bl	800e3f0 <siprintf>
		sprintf(msg_save,"23:16:22 {\"ID\":\"123456789\",\"PH\":\"%.2f\",\"TDS\":\"%.0f\",\"Temp\":\"%.2f\"}\n",PH,TDS,Temperature);
 8002c06:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <Handle_value_send+0xd8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fcac 	bl	8000568 <__aeabi_f2d>
 8002c10:	4680      	mov	r8, r0
 8002c12:	4689      	mov	r9, r1
 8002c14:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <Handle_value_send+0xdc>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fd fca5 	bl	8000568 <__aeabi_f2d>
 8002c1e:	4604      	mov	r4, r0
 8002c20:	460d      	mov	r5, r1
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <Handle_value_send+0xe0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fc9e 	bl	8000568 <__aeabi_f2d>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	f107 0008 	add.w	r0, r7, #8
 8002c34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c38:	e9cd 4500 	strd	r4, r5, [sp]
 8002c3c:	4642      	mov	r2, r8
 8002c3e:	464b      	mov	r3, r9
 8002c40:	4910      	ldr	r1, [pc, #64]	; (8002c84 <Handle_value_send+0xe8>)
 8002c42:	f00b fbd5 	bl	800e3f0 <siprintf>
		SD_Card_Write("today.txt", msg_save);
 8002c46:	f107 0308 	add.w	r3, r7, #8
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	480e      	ldr	r0, [pc, #56]	; (8002c88 <Handle_value_send+0xec>)
 8002c4e:	f000 ff31 	bl	8003ab4 <SD_Card_Write>
		SEND_UART1(msg_send);
 8002c52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff ff8a 	bl	8002b70 <SEND_UART1>
	}
	else if(tp == WifiConfig)
	{
		SEND_UART1("wificonfigmode");
	}
}
 8002c5c:	e005      	b.n	8002c6a <Handle_value_send+0xce>
	else if(tp == WifiConfig)
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d102      	bne.n	8002c6a <Handle_value_send+0xce>
		SEND_UART1("wificonfigmode");
 8002c64:	4809      	ldr	r0, [pc, #36]	; (8002c8c <Handle_value_send+0xf0>)
 8002c66:	f7ff ff83 	bl	8002b70 <SEND_UART1>
}
 8002c6a:	bf00      	nop
 8002c6c:	37d0      	adds	r7, #208	; 0xd0
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c74:	2000052c 	.word	0x2000052c
 8002c78:	20000528 	.word	0x20000528
 8002c7c:	20000530 	.word	0x20000530
 8002c80:	0801217c 	.word	0x0801217c
 8002c84:	080121b8 	.word	0x080121b8
 8002c88:	080121fc 	.word	0x080121fc
 8002c8c:	08012208 	.word	0x08012208

08002c90 <PH_Calibration>:
uint16_t ADC_Value[2] = {0};
int ADC_PH_4 = 0, ADC_PH_7 = 0;
float 	ph_a_value = 0,ph_b_value = 0,tds_k_value = 0;

void PH_Calibration()
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
		//Ax+B = y => ADC_PH_4 - ADC_PH_7 = 640
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Value, 2);
 8002c94:	2202      	movs	r2, #2
 8002c96:	492b      	ldr	r1, [pc, #172]	; (8002d44 <PH_Calibration+0xb4>)
 8002c98:	482b      	ldr	r0, [pc, #172]	; (8002d48 <PH_Calibration+0xb8>)
 8002c9a:	f001 fff9 	bl	8004c90 <HAL_ADC_Start_DMA>

	  if(ADC_Value[0] > 1540 && ADC_Value[0] < 2180)
 8002c9e:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <PH_Calibration+0xb4>)
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	f240 6204 	movw	r2, #1540	; 0x604
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d911      	bls.n	8002cce <PH_Calibration+0x3e>
 8002caa:	4b26      	ldr	r3, [pc, #152]	; (8002d44 <PH_Calibration+0xb4>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	f640 0283 	movw	r2, #2179	; 0x883
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d80b      	bhi.n	8002cce <PH_Calibration+0x3e>
	  {
		  ADC_PH_7 = ADC_Value[0];
 8002cb6:	4b23      	ldr	r3, [pc, #140]	; (8002d44 <PH_Calibration+0xb4>)
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <PH_Calibration+0xbc>)
 8002cbe:	601a      	str	r2, [r3, #0]
		  ADC_PH_4 = ADC_PH_7 + 640;
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <PH_Calibration+0xbc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cc8:	4a21      	ldr	r2, [pc, #132]	; (8002d50 <PH_Calibration+0xc0>)
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	e016      	b.n	8002cfc <PH_Calibration+0x6c>
	    }
	    else if(ADC_Value[0] < 2820 && ADC_Value[0] > 2180)
 8002cce:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <PH_Calibration+0xb4>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	f640 3203 	movw	r2, #2819	; 0xb03
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d810      	bhi.n	8002cfc <PH_Calibration+0x6c>
 8002cda:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <PH_Calibration+0xb4>)
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	f640 0284 	movw	r2, #2180	; 0x884
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d90a      	bls.n	8002cfc <PH_Calibration+0x6c>
	    {
	    	ADC_PH_4 = ADC_Value[0];
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <PH_Calibration+0xb4>)
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <PH_Calibration+0xc0>)
 8002cee:	601a      	str	r2, [r3, #0]
	    	ADC_PH_7 = ADC_PH_4 - 640;
 8002cf0:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <PH_Calibration+0xc0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <PH_Calibration+0xbc>)
 8002cfa:	6013      	str	r3, [r2, #0]
	      }

	  ph_a_value = (float)(3/(float)(ADC_PH_7 - ADC_PH_4));
 8002cfc:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <PH_Calibration+0xbc>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <PH_Calibration+0xc0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d0e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d16:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <PH_Calibration+0xc4>)
 8002d18:	edc3 7a00 	vstr	s15, [r3]
	  ph_b_value = (float)((4 - (ph_a_value*(float)ADC_PH_4)));
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <PH_Calibration+0xc0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	ee07 3a90 	vmov	s15, r3
 8002d24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <PH_Calibration+0xc4>)
 8002d2a:	edd3 7a00 	vldr	s15, [r3]
 8002d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d32:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <PH_Calibration+0xc8>)
 8002d3c:	edc3 7a00 	vstr	s15, [r3]

}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000d84 	.word	0x20000d84
 8002d48:	2000023c 	.word	0x2000023c
 8002d4c:	20000d8c 	.word	0x20000d8c
 8002d50:	20000d88 	.word	0x20000d88
 8002d54:	20000d90 	.word	0x20000d90
 8002d58:	20000d94 	.word	0x20000d94

08002d5c <PH_Calculator>:
float PH_Calculator(float A, float B, uint16_t adc)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	ed87 0a03 	vstr	s0, [r7, #12]
 8002d66:	edc7 0a02 	vstr	s1, [r7, #8]
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	80fb      	strh	r3, [r7, #6]
	return (float)(adc*A + B);
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	ee07 3a90 	vmov	s15, r3
 8002d74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d78:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d80:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d84:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002d88:	eeb0 0a67 	vmov.f32	s0, s15
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <TDS_Calibration>:

void TDS_Calibration()
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Value, 2);
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	4909      	ldr	r1, [pc, #36]	; (8002dc4 <TDS_Calibration+0x2c>)
 8002da0:	4809      	ldr	r0, [pc, #36]	; (8002dc8 <TDS_Calibration+0x30>)
 8002da2:	f001 ff75 	bl	8004c90 <HAL_ADC_Start_DMA>

	tds_k_value = (1000/(float)ADC_Value[1]);
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <TDS_Calibration+0x2c>)
 8002da8:	885b      	ldrh	r3, [r3, #2]
 8002daa:	ee07 3a90 	vmov	s15, r3
 8002dae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002db2:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002dcc <TDS_Calibration+0x34>
 8002db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <TDS_Calibration+0x38>)
 8002dbc:	edc3 7a00 	vstr	s15, [r3]
}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000d84 	.word	0x20000d84
 8002dc8:	2000023c 	.word	0x2000023c
 8002dcc:	447a0000 	.word	0x447a0000
 8002dd0:	20000d98 	.word	0x20000d98

08002dd4 <TDS_Calculator>:

float TDS_Calculator(float k, uint16_t adc)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	ed87 0a01 	vstr	s0, [r7, #4]
 8002dde:	4603      	mov	r3, r0
 8002de0:	807b      	strh	r3, [r7, #2]
	return (float)(k*adc);
 8002de2:	887b      	ldrh	r3, [r7, #2]
 8002de4:	ee07 3a90 	vmov	s15, r3
 8002de8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dec:	edd7 7a01 	vldr	s15, [r7, #4]
 8002df0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002df4:	eeb0 0a67 	vmov.f32	s0, s15
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <Save_SetPoint>:


/*=====================================Flash_Start=================================*/

void Save_SetPoint(Save_Flash_Type tp)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
	if(tp == flash_setpoint)
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d124      	bne.n	8002e5e <Save_SetPoint+0x5a>
	{
		W25qxx_EraseSector(1);
 8002e14:	2001      	movs	r0, #1
 8002e16:	f001 fc03 	bl	8004620 <W25qxx_EraseSector>
		W25qxx_EraseSector(2);
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f001 fc00 	bl	8004620 <W25qxx_EraseSector>
		W25qxx_EraseSector(3);
 8002e20:	2003      	movs	r0, #3
 8002e22:	f001 fbfd 	bl	8004620 <W25qxx_EraseSector>
		W25qxx_EraseSector(4);
 8002e26:	2004      	movs	r0, #4
 8002e28:	f001 fbfa 	bl	8004620 <W25qxx_EraseSector>
		W25qxx_WriteSector(&PH_SetPoint, 1, 0, 4);
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2101      	movs	r1, #1
 8002e32:	481e      	ldr	r0, [pc, #120]	; (8002eac <Save_SetPoint+0xa8>)
 8002e34:	f001 fce6 	bl	8004804 <W25qxx_WriteSector>
		W25qxx_WriteSector(&PH_THR_SetPoint, 2, 0, 4);
 8002e38:	2304      	movs	r3, #4
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	481c      	ldr	r0, [pc, #112]	; (8002eb0 <Save_SetPoint+0xac>)
 8002e40:	f001 fce0 	bl	8004804 <W25qxx_WriteSector>
		W25qxx_WriteSector(&TDS_SetPoint, 3, 0, 4);
 8002e44:	2304      	movs	r3, #4
 8002e46:	2200      	movs	r2, #0
 8002e48:	2103      	movs	r1, #3
 8002e4a:	481a      	ldr	r0, [pc, #104]	; (8002eb4 <Save_SetPoint+0xb0>)
 8002e4c:	f001 fcda 	bl	8004804 <W25qxx_WriteSector>
		W25qxx_WriteSector(&TDS_THR_SetPoint, 4, 0, 4);
 8002e50:	2304      	movs	r3, #4
 8002e52:	2200      	movs	r2, #0
 8002e54:	2104      	movs	r1, #4
 8002e56:	4818      	ldr	r0, [pc, #96]	; (8002eb8 <Save_SetPoint+0xb4>)
 8002e58:	f001 fcd4 	bl	8004804 <W25qxx_WriteSector>
		W25qxx_EraseSector(7);
		W25qxx_WriteSector(&tds_k_value, 7, 0, 4);

	}

}
 8002e5c:	e021      	b.n	8002ea2 <Save_SetPoint+0x9e>
	else if(tp ==flash_calibration_ph)
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d112      	bne.n	8002e8a <Save_SetPoint+0x86>
		W25qxx_EraseSector(5);
 8002e64:	2005      	movs	r0, #5
 8002e66:	f001 fbdb 	bl	8004620 <W25qxx_EraseSector>
		W25qxx_EraseSector(6);
 8002e6a:	2006      	movs	r0, #6
 8002e6c:	f001 fbd8 	bl	8004620 <W25qxx_EraseSector>
		W25qxx_WriteSector(&ph_a_value, 5, 0, 4);
 8002e70:	2304      	movs	r3, #4
 8002e72:	2200      	movs	r2, #0
 8002e74:	2105      	movs	r1, #5
 8002e76:	4811      	ldr	r0, [pc, #68]	; (8002ebc <Save_SetPoint+0xb8>)
 8002e78:	f001 fcc4 	bl	8004804 <W25qxx_WriteSector>
		W25qxx_WriteSector(&ph_b_value, 6, 0, 4);
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2106      	movs	r1, #6
 8002e82:	480f      	ldr	r0, [pc, #60]	; (8002ec0 <Save_SetPoint+0xbc>)
 8002e84:	f001 fcbe 	bl	8004804 <W25qxx_WriteSector>
}
 8002e88:	e00b      	b.n	8002ea2 <Save_SetPoint+0x9e>
	else if (tp == flash_calibration_tds)
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d108      	bne.n	8002ea2 <Save_SetPoint+0x9e>
		W25qxx_EraseSector(7);
 8002e90:	2007      	movs	r0, #7
 8002e92:	f001 fbc5 	bl	8004620 <W25qxx_EraseSector>
		W25qxx_WriteSector(&tds_k_value, 7, 0, 4);
 8002e96:	2304      	movs	r3, #4
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2107      	movs	r1, #7
 8002e9c:	4809      	ldr	r0, [pc, #36]	; (8002ec4 <Save_SetPoint+0xc0>)
 8002e9e:	f001 fcb1 	bl	8004804 <W25qxx_WriteSector>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000540 	.word	0x20000540
 8002eb0:	2000053c 	.word	0x2000053c
 8002eb4:	20000534 	.word	0x20000534
 8002eb8:	20000538 	.word	0x20000538
 8002ebc:	20000d90 	.word	0x20000d90
 8002ec0:	20000d94 	.word	0x20000d94
 8002ec4:	20000d98 	.word	0x20000d98

08002ec8 <Read_SetPoint>:
void Read_SetPoint(Save_Flash_Type tp)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
	if(tp == flash_setpoint)
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d118      	bne.n	8002f0a <Read_SetPoint+0x42>
	{
		W25qxx_ReadSector(&PH_SetPoint, 1, 0, 4);
 8002ed8:	2304      	movs	r3, #4
 8002eda:	2200      	movs	r2, #0
 8002edc:	2101      	movs	r1, #1
 8002ede:	4819      	ldr	r0, [pc, #100]	; (8002f44 <Read_SetPoint+0x7c>)
 8002ee0:	f001 fd70 	bl	80049c4 <W25qxx_ReadSector>
		W25qxx_ReadSector(&PH_THR_SetPoint, 2, 0, 4);
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2102      	movs	r1, #2
 8002eea:	4817      	ldr	r0, [pc, #92]	; (8002f48 <Read_SetPoint+0x80>)
 8002eec:	f001 fd6a 	bl	80049c4 <W25qxx_ReadSector>
		W25qxx_ReadSector(&TDS_SetPoint, 3, 0, 4);
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2103      	movs	r1, #3
 8002ef6:	4815      	ldr	r0, [pc, #84]	; (8002f4c <Read_SetPoint+0x84>)
 8002ef8:	f001 fd64 	bl	80049c4 <W25qxx_ReadSector>
		W25qxx_ReadSector(&TDS_THR_SetPoint, 4, 0, 4);
 8002efc:	2304      	movs	r3, #4
 8002efe:	2200      	movs	r2, #0
 8002f00:	2104      	movs	r1, #4
 8002f02:	4813      	ldr	r0, [pc, #76]	; (8002f50 <Read_SetPoint+0x88>)
 8002f04:	f001 fd5e 	bl	80049c4 <W25qxx_ReadSector>
	}
	else if (tp == flash_calibration_tds)
	{
		W25qxx_ReadSector(&tds_k_value, 7, 0, 4);
	}
}
 8002f08:	e018      	b.n	8002f3c <Read_SetPoint+0x74>
	else if(tp == flash_calibration_ph)
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d10c      	bne.n	8002f2a <Read_SetPoint+0x62>
		W25qxx_ReadSector(&ph_a_value, 5, 0, 4);
 8002f10:	2304      	movs	r3, #4
 8002f12:	2200      	movs	r2, #0
 8002f14:	2105      	movs	r1, #5
 8002f16:	480f      	ldr	r0, [pc, #60]	; (8002f54 <Read_SetPoint+0x8c>)
 8002f18:	f001 fd54 	bl	80049c4 <W25qxx_ReadSector>
		W25qxx_ReadSector(&ph_b_value, 6, 0, 4);
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2106      	movs	r1, #6
 8002f22:	480d      	ldr	r0, [pc, #52]	; (8002f58 <Read_SetPoint+0x90>)
 8002f24:	f001 fd4e 	bl	80049c4 <W25qxx_ReadSector>
}
 8002f28:	e008      	b.n	8002f3c <Read_SetPoint+0x74>
	else if (tp == flash_calibration_tds)
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d105      	bne.n	8002f3c <Read_SetPoint+0x74>
		W25qxx_ReadSector(&tds_k_value, 7, 0, 4);
 8002f30:	2304      	movs	r3, #4
 8002f32:	2200      	movs	r2, #0
 8002f34:	2107      	movs	r1, #7
 8002f36:	4809      	ldr	r0, [pc, #36]	; (8002f5c <Read_SetPoint+0x94>)
 8002f38:	f001 fd44 	bl	80049c4 <W25qxx_ReadSector>
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000540 	.word	0x20000540
 8002f48:	2000053c 	.word	0x2000053c
 8002f4c:	20000534 	.word	0x20000534
 8002f50:	20000538 	.word	0x20000538
 8002f54:	20000d90 	.word	0x20000d90
 8002f58:	20000d94 	.word	0x20000d94
 8002f5c:	20000d98 	.word	0x20000d98

08002f60 <Set_Pin_Output>:
uint16_t TEMP;
#define DS18B20_PORT Temperature_Pin_GPIO_Port
#define DS18B20_PIN Temperature_Pin_Pin

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 030c 	add.w	r3, r7, #12
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002f7c:	887b      	ldrh	r3, [r7, #2]
 8002f7e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f80:	2301      	movs	r3, #1
 8002f82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002f88:	f107 030c 	add.w	r3, r7, #12
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f002 ff60 	bl	8005e54 <HAL_GPIO_Init>
}
 8002f94:	bf00      	nop
 8002f96:	3720      	adds	r7, #32
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <Set_Pin_Input>:
void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 030c 	add.w	r3, r7, #12
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002fb8:	887b      	ldrh	r3, [r7, #2]
 8002fba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002fc4:	f107 030c 	add.w	r3, r7, #12
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f002 ff42 	bl	8005e54 <HAL_GPIO_Init>
}
 8002fd0:	bf00      	nop
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8002fe2:	2104      	movs	r1, #4
 8002fe4:	4813      	ldr	r0, [pc, #76]	; (8003034 <DS18B20_Start+0x5c>)
 8002fe6:	f7ff ffbb 	bl	8002f60 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 8002fea:	2200      	movs	r2, #0
 8002fec:	2104      	movs	r1, #4
 8002fee:	4811      	ldr	r0, [pc, #68]	; (8003034 <DS18B20_Start+0x5c>)
 8002ff0:	f003 f8e4 	bl	80061bc <HAL_GPIO_WritePin>
	delay_us(480);   // delay according to datasheet
 8002ff4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002ff8:	f7ff fd52 	bl	8002aa0 <delay_us>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8002ffc:	2104      	movs	r1, #4
 8002ffe:	480d      	ldr	r0, [pc, #52]	; (8003034 <DS18B20_Start+0x5c>)
 8003000:	f7ff ffcc 	bl	8002f9c <Set_Pin_Input>
	delay_us(80);    // delay according to datasheet
 8003004:	2050      	movs	r0, #80	; 0x50
 8003006:	f7ff fd4b 	bl	8002aa0 <delay_us>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 800300a:	2104      	movs	r1, #4
 800300c:	4809      	ldr	r0, [pc, #36]	; (8003034 <DS18B20_Start+0x5c>)
 800300e:	f003 f8bd 	bl	800618c <HAL_GPIO_ReadPin>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <DS18B20_Start+0x46>
 8003018:	2301      	movs	r3, #1
 800301a:	71fb      	strb	r3, [r7, #7]
 800301c:	e001      	b.n	8003022 <DS18B20_Start+0x4a>
	else Response = -1;
 800301e:	23ff      	movs	r3, #255	; 0xff
 8003020:	71fb      	strb	r3, [r7, #7]

	delay_us(400); // 480 us delay totally.
 8003022:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003026:	f7ff fd3b 	bl	8002aa0 <delay_us>

	return Response;
 800302a:	79fb      	ldrb	r3, [r7, #7]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40020000 	.word	0x40020000

08003038 <DS18B20_Write>:


void DS18B20_Write (uint8_t data)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8003042:	2104      	movs	r1, #4
 8003044:	481e      	ldr	r0, [pc, #120]	; (80030c0 <DS18B20_Write+0x88>)
 8003046:	f7ff ff8b 	bl	8002f60 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	e02e      	b.n	80030ae <DS18B20_Write+0x76>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 8003050:	79fa      	ldrb	r2, [r7, #7]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	fa42 f303 	asr.w	r3, r2, r3
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8003060:	2104      	movs	r1, #4
 8003062:	4817      	ldr	r0, [pc, #92]	; (80030c0 <DS18B20_Write+0x88>)
 8003064:	f7ff ff7c 	bl	8002f60 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8003068:	2200      	movs	r2, #0
 800306a:	2104      	movs	r1, #4
 800306c:	4814      	ldr	r0, [pc, #80]	; (80030c0 <DS18B20_Write+0x88>)
 800306e:	f003 f8a5 	bl	80061bc <HAL_GPIO_WritePin>
			delay_us(1);  // wait for 1 us
 8003072:	2001      	movs	r0, #1
 8003074:	f7ff fd14 	bl	8002aa0 <delay_us>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8003078:	2104      	movs	r1, #4
 800307a:	4811      	ldr	r0, [pc, #68]	; (80030c0 <DS18B20_Write+0x88>)
 800307c:	f7ff ff8e 	bl	8002f9c <Set_Pin_Input>
			delay_us(50);  // wait for 60 us
 8003080:	2032      	movs	r0, #50	; 0x32
 8003082:	f7ff fd0d 	bl	8002aa0 <delay_us>
 8003086:	e00f      	b.n	80030a8 <DS18B20_Write+0x70>
		}

		else  // if the bit is low
		{
			// write 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8003088:	2104      	movs	r1, #4
 800308a:	480d      	ldr	r0, [pc, #52]	; (80030c0 <DS18B20_Write+0x88>)
 800308c:	f7ff ff68 	bl	8002f60 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8003090:	2200      	movs	r2, #0
 8003092:	2104      	movs	r1, #4
 8003094:	480a      	ldr	r0, [pc, #40]	; (80030c0 <DS18B20_Write+0x88>)
 8003096:	f003 f891 	bl	80061bc <HAL_GPIO_WritePin>
			delay_us(50);  // wait for 60 us
 800309a:	2032      	movs	r0, #50	; 0x32
 800309c:	f7ff fd00 	bl	8002aa0 <delay_us>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80030a0:	2104      	movs	r1, #4
 80030a2:	4807      	ldr	r0, [pc, #28]	; (80030c0 <DS18B20_Write+0x88>)
 80030a4:	f7ff ff7a 	bl	8002f9c <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3301      	adds	r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b07      	cmp	r3, #7
 80030b2:	ddcd      	ble.n	8003050 <DS18B20_Write+0x18>
		}
	}
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40020000 	.word	0x40020000

080030c4 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80030ce:	2104      	movs	r1, #4
 80030d0:	481a      	ldr	r0, [pc, #104]	; (800313c <DS18B20_Read+0x78>)
 80030d2:	f7ff ff63 	bl	8002f9c <Set_Pin_Input>

	for (int i=0;i<8;i++)
 80030d6:	2300      	movs	r3, #0
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	e026      	b.n	800312a <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 80030dc:	2104      	movs	r1, #4
 80030de:	4817      	ldr	r0, [pc, #92]	; (800313c <DS18B20_Read+0x78>)
 80030e0:	f7ff ff3e 	bl	8002f60 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 80030e4:	2200      	movs	r2, #0
 80030e6:	2104      	movs	r1, #4
 80030e8:	4814      	ldr	r0, [pc, #80]	; (800313c <DS18B20_Read+0x78>)
 80030ea:	f003 f867 	bl	80061bc <HAL_GPIO_WritePin>
		delay_us(1);  // wait for > 1us
 80030ee:	2001      	movs	r0, #1
 80030f0:	f7ff fcd6 	bl	8002aa0 <delay_us>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80030f4:	2104      	movs	r1, #4
 80030f6:	4811      	ldr	r0, [pc, #68]	; (800313c <DS18B20_Read+0x78>)
 80030f8:	f7ff ff50 	bl	8002f9c <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 80030fc:	2104      	movs	r1, #4
 80030fe:	480f      	ldr	r0, [pc, #60]	; (800313c <DS18B20_Read+0x78>)
 8003100:	f003 f844 	bl	800618c <HAL_GPIO_ReadPin>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 800310a:	2201      	movs	r2, #1
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	b25a      	sxtb	r2, r3
 8003114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003118:	4313      	orrs	r3, r2
 800311a:	b25b      	sxtb	r3, r3
 800311c:	71fb      	strb	r3, [r7, #7]
		}
		delay_us(50);  // wait for 60 us
 800311e:	2032      	movs	r0, #50	; 0x32
 8003120:	f7ff fcbe 	bl	8002aa0 <delay_us>
	for (int i=0;i<8;i++)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	3301      	adds	r3, #1
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b07      	cmp	r3, #7
 800312e:	ddd5      	ble.n	80030dc <DS18B20_Read+0x18>
	}
	return value;
 8003130:	79fb      	ldrb	r3, [r7, #7]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40020000 	.word	0x40020000

08003140 <Get_Temperature_DS18B20>:

float Get_Temperature_DS18B20()
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
		  DS18B20_Start ();
 8003144:	f7ff ff48 	bl	8002fd8 <DS18B20_Start>
		  HAL_Delay(1);
 8003148:	2001      	movs	r0, #1
 800314a:	f001 fd39 	bl	8004bc0 <HAL_Delay>
		  DS18B20_Write (0xCC);  // skip ROM
 800314e:	20cc      	movs	r0, #204	; 0xcc
 8003150:	f7ff ff72 	bl	8003038 <DS18B20_Write>
		  DS18B20_Write (0x44);  // convert t
 8003154:	2044      	movs	r0, #68	; 0x44
 8003156:	f7ff ff6f 	bl	8003038 <DS18B20_Write>
		  HAL_Delay (800);
 800315a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800315e:	f001 fd2f 	bl	8004bc0 <HAL_Delay>

		  DS18B20_Start ();
 8003162:	f7ff ff39 	bl	8002fd8 <DS18B20_Start>
	      HAL_Delay(1);
 8003166:	2001      	movs	r0, #1
 8003168:	f001 fd2a 	bl	8004bc0 <HAL_Delay>
	      DS18B20_Write (0xCC);  // skip ROM
 800316c:	20cc      	movs	r0, #204	; 0xcc
 800316e:	f7ff ff63 	bl	8003038 <DS18B20_Write>
	      DS18B20_Write (0xBE);  // Read Scratch-pad
 8003172:	20be      	movs	r0, #190	; 0xbe
 8003174:	f7ff ff60 	bl	8003038 <DS18B20_Write>
	      Temp_byte1 = DS18B20_Read();
 8003178:	f7ff ffa4 	bl	80030c4 <DS18B20_Read>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <Get_Temperature_DS18B20+0x88>)
 8003182:	701a      	strb	r2, [r3, #0]
		  Temp_byte2 = DS18B20_Read();
 8003184:	f7ff ff9e 	bl	80030c4 <DS18B20_Read>
 8003188:	4603      	mov	r3, r0
 800318a:	461a      	mov	r2, r3
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <Get_Temperature_DS18B20+0x8c>)
 800318e:	701a      	strb	r2, [r3, #0]
		  TEMP = (Temp_byte2<<8)|Temp_byte1;
 8003190:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <Get_Temperature_DS18B20+0x8c>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	b21a      	sxth	r2, r3
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <Get_Temperature_DS18B20+0x88>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	b21b      	sxth	r3, r3
 800319e:	4313      	orrs	r3, r2
 80031a0:	b21b      	sxth	r3, r3
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <Get_Temperature_DS18B20+0x90>)
 80031a6:	801a      	strh	r2, [r3, #0]
		  return (float)TEMP/16;
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <Get_Temperature_DS18B20+0x90>)
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80031b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80031bc:	eef0 7a66 	vmov.f32	s15, s13
}
 80031c0:	eeb0 0a67 	vmov.f32	s0, s15
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000d9c 	.word	0x20000d9c
 80031cc:	20000d9d 	.word	0x20000d9d
 80031d0:	20000d9e 	.word	0x20000d9e

080031d4 <HAL_TIM_PeriodElapsedCallback>:
/*=====================================DS18B20_End=================================*/

/*=====================================Interrupt_Start=========================*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
	 if(htim->Instance == htim4.Instance)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b07      	ldr	r3, [pc, #28]	; (8003200 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d106      	bne.n	80031f6 <HAL_TIM_PeriodElapsedCallback+0x22>
	 {
	   HAL_GPIO_TogglePin(test_pin_GPIO_Port,test_pin_Pin);
 80031e8:	2140      	movs	r1, #64	; 0x40
 80031ea:	4806      	ldr	r0, [pc, #24]	; (8003204 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80031ec:	f002 ffff 	bl	80061ee <HAL_GPIO_TogglePin>
	   Handle_value_send(Value);
 80031f0:	2000      	movs	r0, #0
 80031f2:	f7ff fcd3 	bl	8002b9c <Handle_value_send>
	 }
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200003f4 	.word	0x200003f4
 8003204:	40020000 	.word	0x40020000

08003208 <Wifi_Config>:
/*=====================================Interrupt_End=========================*/

/*=====================================WIFI_CONFIG_Start=========================*/
void Wifi_Config()
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
	Handle_value_send(WifiConfig);
 800320c:	2002      	movs	r0, #2
 800320e:	f7ff fcc5 	bl	8002b9c <Handle_value_send>
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800321e:	f001 fc5d 	bl	8004adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003222:	f000 f8b3 	bl	800338c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003226:	f000 fb07 	bl	8003838 <MX_GPIO_Init>
  MX_DMA_Init();
 800322a:	f000 fadd 	bl	80037e8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800322e:	f000 fab1 	bl	8003794 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8003232:	f006 fdef 	bl	8009e14 <MX_FATFS_Init>
  MX_ADC1_Init();
 8003236:	f000 f913 	bl	8003460 <MX_ADC1_Init>
  MX_I2C1_Init();
 800323a:	f000 f973 	bl	8003524 <MX_I2C1_Init>
  MX_TIM4_Init();
 800323e:	f000 fa25 	bl	800368c <MX_TIM4_Init>
  MX_IWDG_Init();
 8003242:	f000 f99d 	bl	8003580 <MX_IWDG_Init>
  MX_TIM6_Init();
 8003246:	f000 fa6f 	bl	8003728 <MX_TIM6_Init>
  MX_SPI2_Init();
 800324a:	f000 f9e9 	bl	8003620 <MX_SPI2_Init>
  MX_SPI1_Init();
 800324e:	f000 f9b1 	bl	80035b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
 //=========================================================================  TESTING


 //=========================================================================  CONFIG_MAIN
  HAL_TIM_Base_Start_IT(&htim4);
 8003252:	483d      	ldr	r0, [pc, #244]	; (8003348 <main+0x130>)
 8003254:	f004 ff4a 	bl	80080ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 8003258:	483c      	ldr	r0, [pc, #240]	; (800334c <main+0x134>)
 800325a:	f004 fedf 	bl	800801c <HAL_TIM_Base_Start>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1,UART1_TEMPBUFFER,SIZEOF_COMMAND);
 800325e:	223c      	movs	r2, #60	; 0x3c
 8003260:	493b      	ldr	r1, [pc, #236]	; (8003350 <main+0x138>)
 8003262:	483c      	ldr	r0, [pc, #240]	; (8003354 <main+0x13c>)
 8003264:	f005 fc81 	bl	8008b6a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8003268:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <main+0x140>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b3a      	ldr	r3, [pc, #232]	; (8003358 <main+0x140>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0208 	bic.w	r2, r2, #8
 8003276:	601a      	str	r2, [r3, #0]

  for(int i =0;i<5;i++)
 8003278:	2300      	movs	r3, #0
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	e009      	b.n	8003292 <main+0x7a>
  {
	  HAL_GPIO_TogglePin(test_pin_GPIO_Port,test_pin_Pin);
 800327e:	2140      	movs	r1, #64	; 0x40
 8003280:	4836      	ldr	r0, [pc, #216]	; (800335c <main+0x144>)
 8003282:	f002 ffb4 	bl	80061ee <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8003286:	20c8      	movs	r0, #200	; 0xc8
 8003288:	f001 fc9a 	bl	8004bc0 <HAL_Delay>
  for(int i =0;i<5;i++)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3301      	adds	r3, #1
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b04      	cmp	r3, #4
 8003296:	ddf2      	ble.n	800327e <main+0x66>
  }
  //HAL_Delay(50);
  lcd_init();
 8003298:	f7fe fc41 	bl	8001b1e <lcd_init>
  Rotary_init();
 800329c:	f7fe fc92 	bl	8001bc4 <Rotary_init>
  lcd_clear();
 80032a0:	f7fe fc26 	bl	8001af0 <lcd_clear>
  W25qxx_Init();
 80032a4:	f001 f8ea 	bl	800447c <W25qxx_Init>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_Value, 2);
 80032a8:	2202      	movs	r2, #2
 80032aa:	492d      	ldr	r1, [pc, #180]	; (8003360 <main+0x148>)
 80032ac:	482d      	ldr	r0, [pc, #180]	; (8003364 <main+0x14c>)
 80032ae:	f001 fcef 	bl	8004c90 <HAL_ADC_Start_DMA>
  Read_SetPoint(flash_calibration_tds);
 80032b2:	2002      	movs	r0, #2
 80032b4:	f7ff fe08 	bl	8002ec8 <Read_SetPoint>
  Read_SetPoint(flash_calibration_ph);
 80032b8:	2001      	movs	r0, #1
 80032ba:	f7ff fe05 	bl	8002ec8 <Read_SetPoint>
  SD_Handling(SD_Read);
 80032be:	482a      	ldr	r0, [pc, #168]	; (8003368 <main+0x150>)
 80032c0:	f000 fb66 	bl	8003990 <SD_Handling>
  f_unlink("today.txt");
 80032c4:	4829      	ldr	r0, [pc, #164]	; (800336c <main+0x154>)
 80032c6:	f009 ff6a 	bl	800d19e <f_unlink>
  uint32_t time_read = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	603b      	str	r3, [r7, #0]
  while (1)
  {
	  //=========================================================================  TESTING

	  //=========================================================================  CONFIG_MAIN
	  LCD_Display();
 80032ce:	f7ff f839 	bl	8002344 <LCD_Display>
	  if(time_read == 100)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b64      	cmp	r3, #100	; 0x64
 80032d6:	d130      	bne.n	800333a <main+0x122>
	  {
		  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_Value, 2);
 80032d8:	2202      	movs	r2, #2
 80032da:	4921      	ldr	r1, [pc, #132]	; (8003360 <main+0x148>)
 80032dc:	4821      	ldr	r0, [pc, #132]	; (8003364 <main+0x14c>)
 80032de:	f001 fcd7 	bl	8004c90 <HAL_ADC_Start_DMA>
		  PH = PH_Calculator(ph_a_value, ph_b_value, ADC_Value[0]);
 80032e2:	4b23      	ldr	r3, [pc, #140]	; (8003370 <main+0x158>)
 80032e4:	edd3 7a00 	vldr	s15, [r3]
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <main+0x15c>)
 80032ea:	ed93 7a00 	vldr	s14, [r3]
 80032ee:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <main+0x148>)
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	eef0 0a47 	vmov.f32	s1, s14
 80032f8:	eeb0 0a67 	vmov.f32	s0, s15
 80032fc:	f7ff fd2e 	bl	8002d5c <PH_Calculator>
 8003300:	eef0 7a40 	vmov.f32	s15, s0
 8003304:	4b1c      	ldr	r3, [pc, #112]	; (8003378 <main+0x160>)
 8003306:	edc3 7a00 	vstr	s15, [r3]
		  TDS = TDS_Calculator(tds_k_value, ADC_Value[1]);
 800330a:	4b1c      	ldr	r3, [pc, #112]	; (800337c <main+0x164>)
 800330c:	edd3 7a00 	vldr	s15, [r3]
 8003310:	4b13      	ldr	r3, [pc, #76]	; (8003360 <main+0x148>)
 8003312:	885b      	ldrh	r3, [r3, #2]
 8003314:	4618      	mov	r0, r3
 8003316:	eeb0 0a67 	vmov.f32	s0, s15
 800331a:	f7ff fd5b 	bl	8002dd4 <TDS_Calculator>
 800331e:	eef0 7a40 	vmov.f32	s15, s0
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <main+0x168>)
 8003324:	edc3 7a00 	vstr	s15, [r3]
		  Temperature = Get_Temperature_DS18B20();
 8003328:	f7ff ff0a 	bl	8003140 <Get_Temperature_DS18B20>
 800332c:	eef0 7a40 	vmov.f32	s15, s0
 8003330:	4b14      	ldr	r3, [pc, #80]	; (8003384 <main+0x16c>)
 8003332:	edc3 7a00 	vstr	s15, [r3]
		  time_read = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	603b      	str	r3, [r7, #0]
	  }
	  time_read++;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	3301      	adds	r3, #1
 800333e:	603b      	str	r3, [r7, #0]
	  HAL_IWDG_Refresh(&hiwdg);
 8003340:	4811      	ldr	r0, [pc, #68]	; (8003388 <main+0x170>)
 8003342:	f003 fbfc 	bl	8006b3e <HAL_IWDG_Refresh>
	  LCD_Display();
 8003346:	e7c2      	b.n	80032ce <main+0xb6>
 8003348:	200003f4 	.word	0x200003f4
 800334c:	2000043c 	.word	0x2000043c
 8003350:	20000948 	.word	0x20000948
 8003354:	20000484 	.word	0x20000484
 8003358:	200004c8 	.word	0x200004c8
 800335c:	40020000 	.word	0x40020000
 8003360:	20000d84 	.word	0x20000d84
 8003364:	2000023c 	.word	0x2000023c
 8003368:	20000548 	.word	0x20000548
 800336c:	080121fc 	.word	0x080121fc
 8003370:	20000d90 	.word	0x20000d90
 8003374:	20000d94 	.word	0x20000d94
 8003378:	2000052c 	.word	0x2000052c
 800337c:	20000d98 	.word	0x20000d98
 8003380:	20000528 	.word	0x20000528
 8003384:	20000530 	.word	0x20000530
 8003388:	20000338 	.word	0x20000338

0800338c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b094      	sub	sp, #80	; 0x50
 8003390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003392:	f107 0320 	add.w	r3, r7, #32
 8003396:	2230      	movs	r2, #48	; 0x30
 8003398:	2100      	movs	r1, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f00a f9a0 	bl	800d6e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033a0:	f107 030c 	add.w	r3, r7, #12
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b0:	2300      	movs	r3, #0
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	4b28      	ldr	r3, [pc, #160]	; (8003458 <SystemClock_Config+0xcc>)
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	4a27      	ldr	r2, [pc, #156]	; (8003458 <SystemClock_Config+0xcc>)
 80033ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033be:	6413      	str	r3, [r2, #64]	; 0x40
 80033c0:	4b25      	ldr	r3, [pc, #148]	; (8003458 <SystemClock_Config+0xcc>)
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033cc:	2300      	movs	r3, #0
 80033ce:	607b      	str	r3, [r7, #4]
 80033d0:	4b22      	ldr	r3, [pc, #136]	; (800345c <SystemClock_Config+0xd0>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a21      	ldr	r2, [pc, #132]	; (800345c <SystemClock_Config+0xd0>)
 80033d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	4b1f      	ldr	r3, [pc, #124]	; (800345c <SystemClock_Config+0xd0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80033e8:	230a      	movs	r3, #10
 80033ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033ec:	2301      	movs	r3, #1
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033f0:	2310      	movs	r3, #16
 80033f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80033f4:	2301      	movs	r3, #1
 80033f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033f8:	2302      	movs	r3, #2
 80033fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033fc:	2300      	movs	r3, #0
 80033fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003400:	2308      	movs	r3, #8
 8003402:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003404:	2348      	movs	r3, #72	; 0x48
 8003406:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003408:	2302      	movs	r3, #2
 800340a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800340c:	2304      	movs	r3, #4
 800340e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003410:	f107 0320 	add.w	r3, r7, #32
 8003414:	4618      	mov	r0, r3
 8003416:	f003 fba3 	bl	8006b60 <HAL_RCC_OscConfig>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003420:	f000 fab0 	bl	8003984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003424:	230f      	movs	r3, #15
 8003426:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003428:	2302      	movs	r3, #2
 800342a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003434:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800343a:	f107 030c 	add.w	r3, r7, #12
 800343e:	2102      	movs	r1, #2
 8003440:	4618      	mov	r0, r3
 8003442:	f003 fe05 	bl	8007050 <HAL_RCC_ClockConfig>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800344c:	f000 fa9a 	bl	8003984 <Error_Handler>
  }
}
 8003450:	bf00      	nop
 8003452:	3750      	adds	r7, #80	; 0x50
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	40007000 	.word	0x40007000

08003460 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003466:	463b      	mov	r3, r7
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003472:	4b29      	ldr	r3, [pc, #164]	; (8003518 <MX_ADC1_Init+0xb8>)
 8003474:	4a29      	ldr	r2, [pc, #164]	; (800351c <MX_ADC1_Init+0xbc>)
 8003476:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003478:	4b27      	ldr	r3, [pc, #156]	; (8003518 <MX_ADC1_Init+0xb8>)
 800347a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800347e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003480:	4b25      	ldr	r3, [pc, #148]	; (8003518 <MX_ADC1_Init+0xb8>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003486:	4b24      	ldr	r3, [pc, #144]	; (8003518 <MX_ADC1_Init+0xb8>)
 8003488:	2201      	movs	r2, #1
 800348a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800348c:	4b22      	ldr	r3, [pc, #136]	; (8003518 <MX_ADC1_Init+0xb8>)
 800348e:	2201      	movs	r2, #1
 8003490:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003492:	4b21      	ldr	r3, [pc, #132]	; (8003518 <MX_ADC1_Init+0xb8>)
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800349a:	4b1f      	ldr	r3, [pc, #124]	; (8003518 <MX_ADC1_Init+0xb8>)
 800349c:	2200      	movs	r2, #0
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034a0:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <MX_ADC1_Init+0xb8>)
 80034a2:	4a1f      	ldr	r2, [pc, #124]	; (8003520 <MX_ADC1_Init+0xc0>)
 80034a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034a6:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <MX_ADC1_Init+0xb8>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <MX_ADC1_Init+0xb8>)
 80034ae:	2202      	movs	r2, #2
 80034b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80034b2:	4b19      	ldr	r3, [pc, #100]	; (8003518 <MX_ADC1_Init+0xb8>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80034ba:	4b17      	ldr	r3, [pc, #92]	; (8003518 <MX_ADC1_Init+0xb8>)
 80034bc:	2201      	movs	r2, #1
 80034be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034c0:	4815      	ldr	r0, [pc, #84]	; (8003518 <MX_ADC1_Init+0xb8>)
 80034c2:	f001 fba1 	bl	8004c08 <HAL_ADC_Init>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80034cc:	f000 fa5a 	bl	8003984 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80034d4:	2301      	movs	r3, #1
 80034d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80034d8:	2306      	movs	r3, #6
 80034da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034dc:	463b      	mov	r3, r7
 80034de:	4619      	mov	r1, r3
 80034e0:	480d      	ldr	r0, [pc, #52]	; (8003518 <MX_ADC1_Init+0xb8>)
 80034e2:	f001 fd03 	bl	8004eec <HAL_ADC_ConfigChannel>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80034ec:	f000 fa4a 	bl	8003984 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80034f0:	2301      	movs	r3, #1
 80034f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80034f4:	2302      	movs	r3, #2
 80034f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80034f8:	2302      	movs	r3, #2
 80034fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034fc:	463b      	mov	r3, r7
 80034fe:	4619      	mov	r1, r3
 8003500:	4805      	ldr	r0, [pc, #20]	; (8003518 <MX_ADC1_Init+0xb8>)
 8003502:	f001 fcf3 	bl	8004eec <HAL_ADC_ConfigChannel>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800350c:	f000 fa3a 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003510:	bf00      	nop
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	2000023c 	.word	0x2000023c
 800351c:	40012000 	.word	0x40012000
 8003520:	0f000001 	.word	0x0f000001

08003524 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003528:	4b12      	ldr	r3, [pc, #72]	; (8003574 <MX_I2C1_Init+0x50>)
 800352a:	4a13      	ldr	r2, [pc, #76]	; (8003578 <MX_I2C1_Init+0x54>)
 800352c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800352e:	4b11      	ldr	r3, [pc, #68]	; (8003574 <MX_I2C1_Init+0x50>)
 8003530:	4a12      	ldr	r2, [pc, #72]	; (800357c <MX_I2C1_Init+0x58>)
 8003532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003534:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <MX_I2C1_Init+0x50>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800353a:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <MX_I2C1_Init+0x50>)
 800353c:	2200      	movs	r2, #0
 800353e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <MX_I2C1_Init+0x50>)
 8003542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003546:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003548:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <MX_I2C1_Init+0x50>)
 800354a:	2200      	movs	r2, #0
 800354c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800354e:	4b09      	ldr	r3, [pc, #36]	; (8003574 <MX_I2C1_Init+0x50>)
 8003550:	2200      	movs	r2, #0
 8003552:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003554:	4b07      	ldr	r3, [pc, #28]	; (8003574 <MX_I2C1_Init+0x50>)
 8003556:	2200      	movs	r2, #0
 8003558:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <MX_I2C1_Init+0x50>)
 800355c:	2200      	movs	r2, #0
 800355e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003560:	4804      	ldr	r0, [pc, #16]	; (8003574 <MX_I2C1_Init+0x50>)
 8003562:	f002 fe5f 	bl	8006224 <HAL_I2C_Init>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800356c:	f000 fa0a 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003570:	bf00      	nop
 8003572:	bd80      	pop	{r7, pc}
 8003574:	200002e4 	.word	0x200002e4
 8003578:	40005400 	.word	0x40005400
 800357c:	000186a0 	.word	0x000186a0

08003580 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <MX_IWDG_Init+0x2c>)
 8003586:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <MX_IWDG_Init+0x30>)
 8003588:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <MX_IWDG_Init+0x2c>)
 800358c:	2206      	movs	r2, #6
 800358e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <MX_IWDG_Init+0x2c>)
 8003592:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8003596:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003598:	4804      	ldr	r0, [pc, #16]	; (80035ac <MX_IWDG_Init+0x2c>)
 800359a:	f003 fa8e 	bl	8006aba <HAL_IWDG_Init>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80035a4:	f000 f9ee 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80035a8:	bf00      	nop
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20000338 	.word	0x20000338
 80035b0:	40003000 	.word	0x40003000

080035b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035b8:	4b17      	ldr	r3, [pc, #92]	; (8003618 <MX_SPI1_Init+0x64>)
 80035ba:	4a18      	ldr	r2, [pc, #96]	; (800361c <MX_SPI1_Init+0x68>)
 80035bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035be:	4b16      	ldr	r3, [pc, #88]	; (8003618 <MX_SPI1_Init+0x64>)
 80035c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035c6:	4b14      	ldr	r3, [pc, #80]	; (8003618 <MX_SPI1_Init+0x64>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035cc:	4b12      	ldr	r3, [pc, #72]	; (8003618 <MX_SPI1_Init+0x64>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <MX_SPI1_Init+0x64>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035d8:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <MX_SPI1_Init+0x64>)
 80035da:	2200      	movs	r2, #0
 80035dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035de:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <MX_SPI1_Init+0x64>)
 80035e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80035e6:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <MX_SPI1_Init+0x64>)
 80035e8:	2218      	movs	r2, #24
 80035ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <MX_SPI1_Init+0x64>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035f2:	4b09      	ldr	r3, [pc, #36]	; (8003618 <MX_SPI1_Init+0x64>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035f8:	4b07      	ldr	r3, [pc, #28]	; (8003618 <MX_SPI1_Init+0x64>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <MX_SPI1_Init+0x64>)
 8003600:	220a      	movs	r2, #10
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003604:	4804      	ldr	r0, [pc, #16]	; (8003618 <MX_SPI1_Init+0x64>)
 8003606:	f003 ff03 	bl	8007410 <HAL_SPI_Init>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003610:	f000 f9b8 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003614:	bf00      	nop
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20000344 	.word	0x20000344
 800361c:	40013000 	.word	0x40013000

08003620 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003624:	4b17      	ldr	r3, [pc, #92]	; (8003684 <MX_SPI2_Init+0x64>)
 8003626:	4a18      	ldr	r2, [pc, #96]	; (8003688 <MX_SPI2_Init+0x68>)
 8003628:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800362a:	4b16      	ldr	r3, [pc, #88]	; (8003684 <MX_SPI2_Init+0x64>)
 800362c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003630:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003632:	4b14      	ldr	r3, [pc, #80]	; (8003684 <MX_SPI2_Init+0x64>)
 8003634:	2200      	movs	r2, #0
 8003636:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003638:	4b12      	ldr	r3, [pc, #72]	; (8003684 <MX_SPI2_Init+0x64>)
 800363a:	2200      	movs	r2, #0
 800363c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <MX_SPI2_Init+0x64>)
 8003640:	2200      	movs	r2, #0
 8003642:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003644:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <MX_SPI2_Init+0x64>)
 8003646:	2200      	movs	r2, #0
 8003648:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800364a:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <MX_SPI2_Init+0x64>)
 800364c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003650:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003652:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <MX_SPI2_Init+0x64>)
 8003654:	2218      	movs	r2, #24
 8003656:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <MX_SPI2_Init+0x64>)
 800365a:	2200      	movs	r2, #0
 800365c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <MX_SPI2_Init+0x64>)
 8003660:	2200      	movs	r2, #0
 8003662:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003664:	4b07      	ldr	r3, [pc, #28]	; (8003684 <MX_SPI2_Init+0x64>)
 8003666:	2200      	movs	r2, #0
 8003668:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <MX_SPI2_Init+0x64>)
 800366c:	220a      	movs	r2, #10
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003670:	4804      	ldr	r0, [pc, #16]	; (8003684 <MX_SPI2_Init+0x64>)
 8003672:	f003 fecd 	bl	8007410 <HAL_SPI_Init>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800367c:	f000 f982 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003680:	bf00      	nop
 8003682:	bd80      	pop	{r7, pc}
 8003684:	2000039c 	.word	0x2000039c
 8003688:	40003800 	.word	0x40003800

0800368c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003692:	f107 0308 	add.w	r3, r7, #8
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	605a      	str	r2, [r3, #4]
 800369c:	609a      	str	r2, [r3, #8]
 800369e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036a0:	463b      	mov	r3, r7
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80036a8:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <MX_TIM4_Init+0x94>)
 80036aa:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <MX_TIM4_Init+0x98>)
 80036ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50000-1;
 80036ae:	4b1c      	ldr	r3, [pc, #112]	; (8003720 <MX_TIM4_Init+0x94>)
 80036b0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80036b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b6:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <MX_TIM4_Init+0x94>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 14400-1;
 80036bc:	4b18      	ldr	r3, [pc, #96]	; (8003720 <MX_TIM4_Init+0x94>)
 80036be:	f643 023f 	movw	r2, #14399	; 0x383f
 80036c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c4:	4b16      	ldr	r3, [pc, #88]	; (8003720 <MX_TIM4_Init+0x94>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <MX_TIM4_Init+0x94>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80036d0:	4813      	ldr	r0, [pc, #76]	; (8003720 <MX_TIM4_Init+0x94>)
 80036d2:	f004 fc53 	bl	8007f7c <HAL_TIM_Base_Init>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80036dc:	f000 f952 	bl	8003984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80036e6:	f107 0308 	add.w	r3, r7, #8
 80036ea:	4619      	mov	r1, r3
 80036ec:	480c      	ldr	r0, [pc, #48]	; (8003720 <MX_TIM4_Init+0x94>)
 80036ee:	f004 fea4 	bl	800843a <HAL_TIM_ConfigClockSource>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80036f8:	f000 f944 	bl	8003984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036fc:	2300      	movs	r3, #0
 80036fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003700:	2300      	movs	r3, #0
 8003702:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003704:	463b      	mov	r3, r7
 8003706:	4619      	mov	r1, r3
 8003708:	4805      	ldr	r0, [pc, #20]	; (8003720 <MX_TIM4_Init+0x94>)
 800370a:	f005 f8bf 	bl	800888c <HAL_TIMEx_MasterConfigSynchronization>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003714:	f000 f936 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003718:	bf00      	nop
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200003f4 	.word	0x200003f4
 8003724:	40000800 	.word	0x40000800

08003728 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800372e:	463b      	mov	r3, r7
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <MX_TIM6_Init+0x64>)
 8003738:	4a15      	ldr	r2, [pc, #84]	; (8003790 <MX_TIM6_Init+0x68>)
 800373a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 800373c:	4b13      	ldr	r3, [pc, #76]	; (800378c <MX_TIM6_Init+0x64>)
 800373e:	2247      	movs	r2, #71	; 0x47
 8003740:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <MX_TIM6_Init+0x64>)
 8003744:	2200      	movs	r2, #0
 8003746:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8003748:	4b10      	ldr	r3, [pc, #64]	; (800378c <MX_TIM6_Init+0x64>)
 800374a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800374e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003750:	4b0e      	ldr	r3, [pc, #56]	; (800378c <MX_TIM6_Init+0x64>)
 8003752:	2200      	movs	r2, #0
 8003754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003756:	480d      	ldr	r0, [pc, #52]	; (800378c <MX_TIM6_Init+0x64>)
 8003758:	f004 fc10 	bl	8007f7c <HAL_TIM_Base_Init>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003762:	f000 f90f 	bl	8003984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003766:	2300      	movs	r3, #0
 8003768:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800376e:	463b      	mov	r3, r7
 8003770:	4619      	mov	r1, r3
 8003772:	4806      	ldr	r0, [pc, #24]	; (800378c <MX_TIM6_Init+0x64>)
 8003774:	f005 f88a 	bl	800888c <HAL_TIMEx_MasterConfigSynchronization>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800377e:	f000 f901 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	2000043c 	.word	0x2000043c
 8003790:	40001000 	.word	0x40001000

08003794 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <MX_USART1_UART_Init+0x4c>)
 800379a:	4a12      	ldr	r2, [pc, #72]	; (80037e4 <MX_USART1_UART_Init+0x50>)
 800379c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800379e:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <MX_USART1_UART_Init+0x4c>)
 80037a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037a6:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <MX_USART1_UART_Init+0x4c>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <MX_USART1_UART_Init+0x4c>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <MX_USART1_UART_Init+0x4c>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <MX_USART1_UART_Init+0x4c>)
 80037ba:	220c      	movs	r2, #12
 80037bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <MX_USART1_UART_Init+0x4c>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <MX_USART1_UART_Init+0x4c>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037ca:	4805      	ldr	r0, [pc, #20]	; (80037e0 <MX_USART1_UART_Init+0x4c>)
 80037cc:	f005 f8ee 	bl	80089ac <HAL_UART_Init>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80037d6:	f000 f8d5 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000484 	.word	0x20000484
 80037e4:	40011000 	.word	0x40011000

080037e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	4b10      	ldr	r3, [pc, #64]	; (8003834 <MX_DMA_Init+0x4c>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a0f      	ldr	r2, [pc, #60]	; (8003834 <MX_DMA_Init+0x4c>)
 80037f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <MX_DMA_Init+0x4c>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800380a:	2200      	movs	r2, #0
 800380c:	2100      	movs	r1, #0
 800380e:	2038      	movs	r0, #56	; 0x38
 8003810:	f001 fee7 	bl	80055e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003814:	2038      	movs	r0, #56	; 0x38
 8003816:	f001 ff00 	bl	800561a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800381a:	2200      	movs	r2, #0
 800381c:	2100      	movs	r1, #0
 800381e:	203a      	movs	r0, #58	; 0x3a
 8003820:	f001 fedf 	bl	80055e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003824:	203a      	movs	r0, #58	; 0x3a
 8003826:	f001 fef8 	bl	800561a <HAL_NVIC_EnableIRQ>

}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800

08003838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383e:	f107 0314 	add.w	r3, r7, #20
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	60da      	str	r2, [r3, #12]
 800384c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	4b47      	ldr	r3, [pc, #284]	; (8003970 <MX_GPIO_Init+0x138>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	4a46      	ldr	r2, [pc, #280]	; (8003970 <MX_GPIO_Init+0x138>)
 8003858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800385c:	6313      	str	r3, [r2, #48]	; 0x30
 800385e:	4b44      	ldr	r3, [pc, #272]	; (8003970 <MX_GPIO_Init+0x138>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	4b40      	ldr	r3, [pc, #256]	; (8003970 <MX_GPIO_Init+0x138>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	4a3f      	ldr	r2, [pc, #252]	; (8003970 <MX_GPIO_Init+0x138>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6313      	str	r3, [r2, #48]	; 0x30
 800387a:	4b3d      	ldr	r3, [pc, #244]	; (8003970 <MX_GPIO_Init+0x138>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	4b39      	ldr	r3, [pc, #228]	; (8003970 <MX_GPIO_Init+0x138>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	4a38      	ldr	r2, [pc, #224]	; (8003970 <MX_GPIO_Init+0x138>)
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	6313      	str	r3, [r2, #48]	; 0x30
 8003896:	4b36      	ldr	r3, [pc, #216]	; (8003970 <MX_GPIO_Init+0x138>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	4b32      	ldr	r3, [pc, #200]	; (8003970 <MX_GPIO_Init+0x138>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4a31      	ldr	r2, [pc, #196]	; (8003970 <MX_GPIO_Init+0x138>)
 80038ac:	f043 0302 	orr.w	r3, r3, #2
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
 80038b2:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <MX_GPIO_Init+0x138>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	607b      	str	r3, [r7, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	4b2b      	ldr	r3, [pc, #172]	; (8003970 <MX_GPIO_Init+0x138>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <MX_GPIO_Init+0x138>)
 80038c8:	f043 0310 	orr.w	r3, r3, #16
 80038cc:	6313      	str	r3, [r2, #48]	; 0x30
 80038ce:	4b28      	ldr	r3, [pc, #160]	; (8003970 <MX_GPIO_Init+0x138>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_SPI2_GPIO_Port, SD_CS_SPI2_Pin, GPIO_PIN_RESET);
 80038da:	2200      	movs	r2, #0
 80038dc:	2102      	movs	r1, #2
 80038de:	4825      	ldr	r0, [pc, #148]	; (8003974 <MX_GPIO_Init+0x13c>)
 80038e0:	f002 fc6c 	bl	80061bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Temperature_Pin_Pin|test_pin_Pin, GPIO_PIN_RESET);
 80038e4:	2200      	movs	r2, #0
 80038e6:	2144      	movs	r1, #68	; 0x44
 80038e8:	4823      	ldr	r0, [pc, #140]	; (8003978 <MX_GPIO_Init+0x140>)
 80038ea:	f002 fc67 	bl	80061bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 80038ee:	2200      	movs	r2, #0
 80038f0:	2101      	movs	r1, #1
 80038f2:	4822      	ldr	r0, [pc, #136]	; (800397c <MX_GPIO_Init+0x144>)
 80038f4:	f002 fc62 	bl	80061bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_SPI2_Pin */
  GPIO_InitStruct.Pin = SD_CS_SPI2_Pin;
 80038f8:	2302      	movs	r3, #2
 80038fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038fc:	2301      	movs	r3, #1
 80038fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003900:	2300      	movs	r3, #0
 8003902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003904:	2300      	movs	r3, #0
 8003906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_SPI2_GPIO_Port, &GPIO_InitStruct);
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	4619      	mov	r1, r3
 800390e:	4819      	ldr	r0, [pc, #100]	; (8003974 <MX_GPIO_Init+0x13c>)
 8003910:	f002 faa0 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : Temperature_Pin_Pin test_pin_Pin */
  GPIO_InitStruct.Pin = Temperature_Pin_Pin|test_pin_Pin;
 8003914:	2344      	movs	r3, #68	; 0x44
 8003916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003918:	2301      	movs	r3, #1
 800391a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391c:	2300      	movs	r3, #0
 800391e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003920:	2300      	movs	r3, #0
 8003922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003924:	f107 0314 	add.w	r3, r7, #20
 8003928:	4619      	mov	r1, r3
 800392a:	4813      	ldr	r0, [pc, #76]	; (8003978 <MX_GPIO_Init+0x140>)
 800392c:	f002 fa92 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8003930:	2301      	movs	r3, #1
 8003932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003934:	2301      	movs	r3, #1
 8003936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393c:	2300      	movs	r3, #0
 800393e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	4619      	mov	r1, r3
 8003946:	480d      	ldr	r0, [pc, #52]	; (800397c <MX_GPIO_Init+0x144>)
 8003948:	f002 fa84 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : Rotary_CLK_Pin Rotary_DT_Pin Rotary_SW_Pin */
  GPIO_InitStruct.Pin = Rotary_CLK_Pin|Rotary_DT_Pin|Rotary_SW_Pin;
 800394c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800395a:	f107 0314 	add.w	r3, r7, #20
 800395e:	4619      	mov	r1, r3
 8003960:	4807      	ldr	r0, [pc, #28]	; (8003980 <MX_GPIO_Init+0x148>)
 8003962:	f002 fa77 	bl	8005e54 <HAL_GPIO_Init>

}
 8003966:	bf00      	nop
 8003968:	3728      	adds	r7, #40	; 0x28
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	40020800 	.word	0x40020800
 8003978:	40020000 	.word	0x40020000
 800397c:	40020400 	.word	0x40020400
 8003980:	40021000 	.word	0x40021000

08003984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003988:	b672      	cpsid	i
}
 800398a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800398c:	e7fe      	b.n	800398c <Error_Handler+0x8>
	...

08003990 <SD_Handling>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void SD_Handling(uint8_t *SD_ReadBufferData)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, "/", 1);
 8003998:	2201      	movs	r2, #1
 800399a:	4939      	ldr	r1, [pc, #228]	; (8003a80 <SD_Handling+0xf0>)
 800399c:	4839      	ldr	r0, [pc, #228]	; (8003a84 <SD_Handling+0xf4>)
 800399e:	f008 fd1f 	bl	800c3e0 <f_mount>
 80039a2:	4603      	mov	r3, r0
 80039a4:	461a      	mov	r2, r3
 80039a6:	4b38      	ldr	r3, [pc, #224]	; (8003a88 <SD_Handling+0xf8>)
 80039a8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {SEND_UART1("ERROR!!! in mounting SD CARD...\n\n");}
 80039aa:	4b37      	ldr	r3, [pc, #220]	; (8003a88 <SD_Handling+0xf8>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <SD_Handling+0x2a>
 80039b2:	4836      	ldr	r0, [pc, #216]	; (8003a8c <SD_Handling+0xfc>)
 80039b4:	f7ff f8dc 	bl	8002b70 <SEND_UART1>
	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
	  	sprintf (SD_ReadBufferData, "SD CARD Free Space: \t%lu\n\n",free_space);
	  	SEND_UART1(SD_ReadBufferData);
	  	BUFFER_CLEAR(SD_ReadBufferData,BUFF_SIZE(SD_ReadBufferData));
	}
}
 80039b8:	e05e      	b.n	8003a78 <SD_Handling+0xe8>
		f_getfree("", &fre_clust, &pfs);
 80039ba:	4a35      	ldr	r2, [pc, #212]	; (8003a90 <SD_Handling+0x100>)
 80039bc:	4935      	ldr	r1, [pc, #212]	; (8003a94 <SD_Handling+0x104>)
 80039be:	4836      	ldr	r0, [pc, #216]	; (8003a98 <SD_Handling+0x108>)
 80039c0:	f009 fb38 	bl	800d034 <f_getfree>
		SEND_UART1("SD CARD mounted successfully...\n\n");
 80039c4:	4835      	ldr	r0, [pc, #212]	; (8003a9c <SD_Handling+0x10c>)
 80039c6:	f7ff f8d3 	bl	8002b70 <SEND_UART1>
	  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80039ca:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <SD_Handling+0x100>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	3b02      	subs	r3, #2
 80039d2:	4a2f      	ldr	r2, [pc, #188]	; (8003a90 <SD_Handling+0x100>)
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	8952      	ldrh	r2, [r2, #10]
 80039d8:	fb02 f303 	mul.w	r3, r2, r3
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fc fda1 	bl	8000524 <__aeabi_ui2d>
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	4b2e      	ldr	r3, [pc, #184]	; (8003aa0 <SD_Handling+0x110>)
 80039e8:	f7fc fe16 	bl	8000618 <__aeabi_dmul>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	f7fd f8e8 	bl	8000bc8 <__aeabi_d2uiz>
 80039f8:	4603      	mov	r3, r0
 80039fa:	4a2a      	ldr	r2, [pc, #168]	; (8003aa4 <SD_Handling+0x114>)
 80039fc:	6013      	str	r3, [r2, #0]
	  	sprintf (SD_ReadBufferData, "SD CARD Total Size: \t%lu\n",total);
 80039fe:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <SD_Handling+0x114>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	4928      	ldr	r1, [pc, #160]	; (8003aa8 <SD_Handling+0x118>)
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f00a fcf2 	bl	800e3f0 <siprintf>
	  	SEND_UART1(SD_ReadBufferData);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff f8af 	bl	8002b70 <SEND_UART1>
	  	BUFFER_CLEAR(SD_ReadBufferData,BUFF_SIZE(SD_ReadBufferData));
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fd fb1b 	bl	800104e <BUFF_SIZE>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7fd fafb 	bl	8001018 <BUFFER_CLEAR>
	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8003a22:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <SD_Handling+0x100>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	895b      	ldrh	r3, [r3, #10]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <SD_Handling+0x104>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fc fd76 	bl	8000524 <__aeabi_ui2d>
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	4b18      	ldr	r3, [pc, #96]	; (8003aa0 <SD_Handling+0x110>)
 8003a3e:	f7fc fdeb 	bl	8000618 <__aeabi_dmul>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7fd f8bd 	bl	8000bc8 <__aeabi_d2uiz>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4a16      	ldr	r2, [pc, #88]	; (8003aac <SD_Handling+0x11c>)
 8003a52:	6013      	str	r3, [r2, #0]
	  	sprintf (SD_ReadBufferData, "SD CARD Free Space: \t%lu\n\n",free_space);
 8003a54:	4b15      	ldr	r3, [pc, #84]	; (8003aac <SD_Handling+0x11c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4915      	ldr	r1, [pc, #84]	; (8003ab0 <SD_Handling+0x120>)
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f00a fcc7 	bl	800e3f0 <siprintf>
	  	SEND_UART1(SD_ReadBufferData);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff f884 	bl	8002b70 <SEND_UART1>
	  	BUFFER_CLEAR(SD_ReadBufferData,BUFF_SIZE(SD_ReadBufferData));
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7fd faf0 	bl	800104e <BUFF_SIZE>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4619      	mov	r1, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd fad0 	bl	8001018 <BUFFER_CLEAR>
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	08012218 	.word	0x08012218
 8003a84:	20000da0 	.word	0x20000da0
 8003a88:	20001204 	.word	0x20001204
 8003a8c:	0801221c 	.word	0x0801221c
 8003a90:	20001208 	.word	0x20001208
 8003a94:	2000120c 	.word	0x2000120c
 8003a98:	08012240 	.word	0x08012240
 8003a9c:	08012244 	.word	0x08012244
 8003aa0:	3fe00000 	.word	0x3fe00000
 8003aa4:	20001210 	.word	0x20001210
 8003aa8:	08012268 	.word	0x08012268
 8003aac:	20001214 	.word	0x20001214
 8003ab0:	08012284 	.word	0x08012284

08003ab4 <SD_Card_Write>:

void SD_Card_Write(char *NameOfFile,  char *Data)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
		fresult = f_open(&file, NameOfFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8003abe:	2213      	movs	r2, #19
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4813      	ldr	r0, [pc, #76]	; (8003b10 <SD_Card_Write+0x5c>)
 8003ac4:	f008 fcd2 	bl	800c46c <f_open>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <SD_Card_Write+0x60>)
 8003ace:	701a      	strb	r2, [r3, #0]
		f_lseek(&file, f_size(&file));
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <SD_Card_Write+0x5c>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	480e      	ldr	r0, [pc, #56]	; (8003b10 <SD_Card_Write+0x5c>)
 8003ad8:	f009 f8a3 	bl	800cc22 <f_lseek>
		  if (fresult == FR_OK)
 8003adc:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <SD_Card_Write+0x60>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10e      	bne.n	8003b02 <SD_Card_Write+0x4e>
			  {
			  	  SEND_UART1 ("file is created\n");
 8003ae4:	480c      	ldr	r0, [pc, #48]	; (8003b18 <SD_Card_Write+0x64>)
 8003ae6:	f7ff f843 	bl	8002b70 <SEND_UART1>
			  	  f_puts(Data, &file);
 8003aea:	4909      	ldr	r1, [pc, #36]	; (8003b10 <SD_Card_Write+0x5c>)
 8003aec:	6838      	ldr	r0, [r7, #0]
 8003aee:	f009 fc78 	bl	800d3e2 <f_puts>
			  	  fresult = f_close(&file);
 8003af2:	4807      	ldr	r0, [pc, #28]	; (8003b10 <SD_Card_Write+0x5c>)
 8003af4:	f009 f86b 	bl	800cbce <f_close>
 8003af8:	4603      	mov	r3, r0
 8003afa:	461a      	mov	r2, r3
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <SD_Card_Write+0x60>)
 8003afe:	701a      	strb	r2, [r3, #0]
		  else
		  {
			  SEND_UART1 ("Create file is fail\n");
		  }

}
 8003b00:	e002      	b.n	8003b08 <SD_Card_Write+0x54>
			  SEND_UART1 ("Create file is fail\n");
 8003b02:	4806      	ldr	r0, [pc, #24]	; (8003b1c <SD_Card_Write+0x68>)
 8003b04:	f7ff f834 	bl	8002b70 <SEND_UART1>
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000fd4 	.word	0x20000fd4
 8003b14:	20001204 	.word	0x20001204
 8003b18:	080122a0 	.word	0x080122a0
 8003b1c:	080122b4 	.word	0x080122b4

08003b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <HAL_MspInit+0x4c>)
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	4a0f      	ldr	r2, [pc, #60]	; (8003b6c <HAL_MspInit+0x4c>)
 8003b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b34:	6453      	str	r3, [r2, #68]	; 0x44
 8003b36:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <HAL_MspInit+0x4c>)
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <HAL_MspInit+0x4c>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <HAL_MspInit+0x4c>)
 8003b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b50:	6413      	str	r3, [r2, #64]	; 0x40
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <HAL_MspInit+0x4c>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800

08003b70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	; 0x28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b78:	f107 0314 	add.w	r3, r7, #20
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	60da      	str	r2, [r3, #12]
 8003b86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a2f      	ldr	r2, [pc, #188]	; (8003c4c <HAL_ADC_MspInit+0xdc>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d157      	bne.n	8003c42 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	4b2e      	ldr	r3, [pc, #184]	; (8003c50 <HAL_ADC_MspInit+0xe0>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	4a2d      	ldr	r2, [pc, #180]	; (8003c50 <HAL_ADC_MspInit+0xe0>)
 8003b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba2:	4b2b      	ldr	r3, [pc, #172]	; (8003c50 <HAL_ADC_MspInit+0xe0>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	4b27      	ldr	r3, [pc, #156]	; (8003c50 <HAL_ADC_MspInit+0xe0>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	4a26      	ldr	r2, [pc, #152]	; (8003c50 <HAL_ADC_MspInit+0xe0>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bbe:	4b24      	ldr	r3, [pc, #144]	; (8003c50 <HAL_ADC_MspInit+0xe0>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_PH_Sensor_Pin|ADC1_TDS_Sensor_Pin;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	4619      	mov	r1, r3
 8003bdc:	481d      	ldr	r0, [pc, #116]	; (8003c54 <HAL_ADC_MspInit+0xe4>)
 8003bde:	f002 f939 	bl	8005e54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003be2:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003be4:	4a1d      	ldr	r2, [pc, #116]	; (8003c5c <HAL_ADC_MspInit+0xec>)
 8003be6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003be8:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bee:	4b1a      	ldr	r3, [pc, #104]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bf4:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003bfa:	4b17      	ldr	r3, [pc, #92]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c0a:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003c0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c12:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c20:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c26:	480c      	ldr	r0, [pc, #48]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003c28:	f001 fd12 	bl	8005650 <HAL_DMA_Init>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003c32:	f7ff fea7 	bl	8003984 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a07      	ldr	r2, [pc, #28]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
 8003c3c:	4a06      	ldr	r2, [pc, #24]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c42:	bf00      	nop
 8003c44:	3728      	adds	r7, #40	; 0x28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40012000 	.word	0x40012000
 8003c50:	40023800 	.word	0x40023800
 8003c54:	40020000 	.word	0x40020000
 8003c58:	20000284 	.word	0x20000284
 8003c5c:	40026410 	.word	0x40026410

08003c60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	; 0x28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c68:	f107 0314 	add.w	r3, r7, #20
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	60da      	str	r2, [r3, #12]
 8003c76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a19      	ldr	r2, [pc, #100]	; (8003ce4 <HAL_I2C_MspInit+0x84>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d12b      	bne.n	8003cda <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	4b18      	ldr	r3, [pc, #96]	; (8003ce8 <HAL_I2C_MspInit+0x88>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	4a17      	ldr	r2, [pc, #92]	; (8003ce8 <HAL_I2C_MspInit+0x88>)
 8003c8c:	f043 0302 	orr.w	r3, r3, #2
 8003c90:	6313      	str	r3, [r2, #48]	; 0x30
 8003c92:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <HAL_I2C_MspInit+0x88>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C1_SCL_Pin|LCD_I2C1_SDA_Pin;
 8003c9e:	23c0      	movs	r3, #192	; 0xc0
 8003ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ca2:	2312      	movs	r3, #18
 8003ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003caa:	2303      	movs	r3, #3
 8003cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003cae:	2304      	movs	r3, #4
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb2:	f107 0314 	add.w	r3, r7, #20
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	480c      	ldr	r0, [pc, #48]	; (8003cec <HAL_I2C_MspInit+0x8c>)
 8003cba:	f002 f8cb 	bl	8005e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <HAL_I2C_MspInit+0x88>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	4a08      	ldr	r2, [pc, #32]	; (8003ce8 <HAL_I2C_MspInit+0x88>)
 8003cc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_I2C_MspInit+0x88>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003cda:	bf00      	nop
 8003cdc:	3728      	adds	r7, #40	; 0x28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40005400 	.word	0x40005400
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40020400 	.word	0x40020400

08003cf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08c      	sub	sp, #48	; 0x30
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf8:	f107 031c 	add.w	r3, r7, #28
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a41      	ldr	r2, [pc, #260]	; (8003e14 <HAL_SPI_MspInit+0x124>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d12c      	bne.n	8003d6c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	4b40      	ldr	r3, [pc, #256]	; (8003e18 <HAL_SPI_MspInit+0x128>)
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	4a3f      	ldr	r2, [pc, #252]	; (8003e18 <HAL_SPI_MspInit+0x128>)
 8003d1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d20:	6453      	str	r3, [r2, #68]	; 0x44
 8003d22:	4b3d      	ldr	r3, [pc, #244]	; (8003e18 <HAL_SPI_MspInit+0x128>)
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <HAL_SPI_MspInit+0x128>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	4a38      	ldr	r2, [pc, #224]	; (8003e18 <HAL_SPI_MspInit+0x128>)
 8003d38:	f043 0302 	orr.w	r3, r3, #2
 8003d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3e:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <HAL_SPI_MspInit+0x128>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003d4a:	2338      	movs	r3, #56	; 0x38
 8003d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d56:	2303      	movs	r3, #3
 8003d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d5a:	2305      	movs	r3, #5
 8003d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d5e:	f107 031c 	add.w	r3, r7, #28
 8003d62:	4619      	mov	r1, r3
 8003d64:	482d      	ldr	r0, [pc, #180]	; (8003e1c <HAL_SPI_MspInit+0x12c>)
 8003d66:	f002 f875 	bl	8005e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003d6a:	e04f      	b.n	8003e0c <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <HAL_SPI_MspInit+0x130>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d14a      	bne.n	8003e0c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <HAL_SPI_MspInit+0x128>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4a26      	ldr	r2, [pc, #152]	; (8003e18 <HAL_SPI_MspInit+0x128>)
 8003d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d84:	6413      	str	r3, [r2, #64]	; 0x40
 8003d86:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <HAL_SPI_MspInit+0x128>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <HAL_SPI_MspInit+0x128>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	4a1f      	ldr	r2, [pc, #124]	; (8003e18 <HAL_SPI_MspInit+0x128>)
 8003d9c:	f043 0304 	orr.w	r3, r3, #4
 8003da0:	6313      	str	r3, [r2, #48]	; 0x30
 8003da2:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <HAL_SPI_MspInit+0x128>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <HAL_SPI_MspInit+0x128>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <HAL_SPI_MspInit+0x128>)
 8003db8:	f043 0302 	orr.w	r3, r3, #2
 8003dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dbe:	4b16      	ldr	r3, [pc, #88]	; (8003e18 <HAL_SPI_MspInit+0x128>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SD_MISO_SPI2_Pin|SD_MOSI_SPI2_Pin;
 8003dca:	230c      	movs	r3, #12
 8003dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003dda:	2305      	movs	r3, #5
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dde:	f107 031c 	add.w	r3, r7, #28
 8003de2:	4619      	mov	r1, r3
 8003de4:	480f      	ldr	r0, [pc, #60]	; (8003e24 <HAL_SPI_MspInit+0x134>)
 8003de6:	f002 f835 	bl	8005e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SCK_SPI2_Pin;
 8003dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df0:	2302      	movs	r3, #2
 8003df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003dfc:	2305      	movs	r3, #5
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SD_SCK_SPI2_GPIO_Port, &GPIO_InitStruct);
 8003e00:	f107 031c 	add.w	r3, r7, #28
 8003e04:	4619      	mov	r1, r3
 8003e06:	4805      	ldr	r0, [pc, #20]	; (8003e1c <HAL_SPI_MspInit+0x12c>)
 8003e08:	f002 f824 	bl	8005e54 <HAL_GPIO_Init>
}
 8003e0c:	bf00      	nop
 8003e0e:	3730      	adds	r7, #48	; 0x30
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40013000 	.word	0x40013000
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40020400 	.word	0x40020400
 8003e20:	40003800 	.word	0x40003800
 8003e24:	40020800 	.word	0x40020800

08003e28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <HAL_TIM_Base_MspInit+0x70>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d116      	bne.n	8003e68 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <HAL_TIM_Base_MspInit+0x74>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	4a16      	ldr	r2, [pc, #88]	; (8003e9c <HAL_TIM_Base_MspInit+0x74>)
 8003e44:	f043 0304 	orr.w	r3, r3, #4
 8003e48:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4a:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <HAL_TIM_Base_MspInit+0x74>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003e56:	2200      	movs	r2, #0
 8003e58:	2100      	movs	r1, #0
 8003e5a:	201e      	movs	r0, #30
 8003e5c:	f001 fbc1 	bl	80055e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e60:	201e      	movs	r0, #30
 8003e62:	f001 fbda 	bl	800561a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003e66:	e012      	b.n	8003e8e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ea0 <HAL_TIM_Base_MspInit+0x78>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10d      	bne.n	8003e8e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_TIM_Base_MspInit+0x74>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4a08      	ldr	r2, [pc, #32]	; (8003e9c <HAL_TIM_Base_MspInit+0x74>)
 8003e7c:	f043 0310 	orr.w	r3, r3, #16
 8003e80:	6413      	str	r3, [r2, #64]	; 0x40
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_TIM_Base_MspInit+0x74>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40000800 	.word	0x40000800
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40001000 	.word	0x40001000

08003ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	; 0x28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eac:	f107 0314 	add.w	r3, r7, #20
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a34      	ldr	r2, [pc, #208]	; (8003f94 <HAL_UART_MspInit+0xf0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d162      	bne.n	8003f8c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	4b33      	ldr	r3, [pc, #204]	; (8003f98 <HAL_UART_MspInit+0xf4>)
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	4a32      	ldr	r2, [pc, #200]	; (8003f98 <HAL_UART_MspInit+0xf4>)
 8003ed0:	f043 0310 	orr.w	r3, r3, #16
 8003ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ed6:	4b30      	ldr	r3, [pc, #192]	; (8003f98 <HAL_UART_MspInit+0xf4>)
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <HAL_UART_MspInit+0xf4>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	4a2b      	ldr	r2, [pc, #172]	; (8003f98 <HAL_UART_MspInit+0xf4>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef2:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <HAL_UART_MspInit+0xf4>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003efe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f04:	2302      	movs	r3, #2
 8003f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f10:	2307      	movs	r3, #7
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4820      	ldr	r0, [pc, #128]	; (8003f9c <HAL_UART_MspInit+0xf8>)
 8003f1c:	f001 ff9a 	bl	8005e54 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003f20:	4b1f      	ldr	r3, [pc, #124]	; (8003fa0 <HAL_UART_MspInit+0xfc>)
 8003f22:	4a20      	ldr	r2, [pc, #128]	; (8003fa4 <HAL_UART_MspInit+0x100>)
 8003f24:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003f26:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <HAL_UART_MspInit+0xfc>)
 8003f28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f2c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f2e:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <HAL_UART_MspInit+0xfc>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f34:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <HAL_UART_MspInit+0xfc>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f3a:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_UART_MspInit+0xfc>)
 8003f3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f40:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f42:	4b17      	ldr	r3, [pc, #92]	; (8003fa0 <HAL_UART_MspInit+0xfc>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f48:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <HAL_UART_MspInit+0xfc>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003f4e:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <HAL_UART_MspInit+0xfc>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f54:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_UART_MspInit+0xfc>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f5a:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <HAL_UART_MspInit+0xfc>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f60:	480f      	ldr	r0, [pc, #60]	; (8003fa0 <HAL_UART_MspInit+0xfc>)
 8003f62:	f001 fb75 	bl	8005650 <HAL_DMA_Init>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003f6c:	f7ff fd0a 	bl	8003984 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a0b      	ldr	r2, [pc, #44]	; (8003fa0 <HAL_UART_MspInit+0xfc>)
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
 8003f76:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <HAL_UART_MspInit+0xfc>)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2100      	movs	r1, #0
 8003f80:	2025      	movs	r0, #37	; 0x25
 8003f82:	f001 fb2e 	bl	80055e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f86:	2025      	movs	r0, #37	; 0x25
 8003f88:	f001 fb47 	bl	800561a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003f8c:	bf00      	nop
 8003f8e:	3728      	adds	r7, #40	; 0x28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40011000 	.word	0x40011000
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40020000 	.word	0x40020000
 8003fa0:	200004c8 	.word	0x200004c8
 8003fa4:	40026440 	.word	0x40026440

08003fa8 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1,Timer2 = 0;
void SDTimer_Handler(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
	if(Timer1>0)
 8003fac:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <SDTimer_Handler+0x40>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d006      	beq.n	8003fc4 <SDTimer_Handler+0x1c>
	{
		Timer1--;
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <SDTimer_Handler+0x40>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <SDTimer_Handler+0x40>)
 8003fc2:	701a      	strb	r2, [r3, #0]
	}

	if(Timer2>0)
 8003fc4:	4b09      	ldr	r3, [pc, #36]	; (8003fec <SDTimer_Handler+0x44>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d006      	beq.n	8003fdc <SDTimer_Handler+0x34>
	{
		Timer2--;
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <SDTimer_Handler+0x44>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	4b04      	ldr	r3, [pc, #16]	; (8003fec <SDTimer_Handler+0x44>)
 8003fda:	701a      	strb	r2, [r3, #0]
	}
}
 8003fdc:	bf00      	nop
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20001219 	.word	0x20001219
 8003fec:	2000121a 	.word	0x2000121a

08003ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ff4:	e7fe      	b.n	8003ff4 <NMI_Handler+0x4>

08003ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ffa:	e7fe      	b.n	8003ffa <HardFault_Handler+0x4>

08003ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004000:	e7fe      	b.n	8004000 <MemManage_Handler+0x4>

08004002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004002:	b480      	push	{r7}
 8004004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004006:	e7fe      	b.n	8004006 <BusFault_Handler+0x4>

08004008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800400c:	e7fe      	b.n	800400c <UsageFault_Handler+0x4>

0800400e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800400e:	b480      	push	{r7}
 8004010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800402a:	b480      	push	{r7}
 800402c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800402e:	bf00      	nop
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <SysTick_Handler+0x30>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	3301      	adds	r3, #1
 8004044:	b2da      	uxtb	r2, r3
 8004046:	4b08      	ldr	r3, [pc, #32]	; (8004068 <SysTick_Handler+0x30>)
 8004048:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 800404a:	4b07      	ldr	r3, [pc, #28]	; (8004068 <SysTick_Handler+0x30>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b09      	cmp	r3, #9
 8004052:	d904      	bls.n	800405e <SysTick_Handler+0x26>
	{
		FatFsCnt=0;
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <SysTick_Handler+0x30>)
 8004056:	2200      	movs	r2, #0
 8004058:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800405a:	f7ff ffa5 	bl	8003fa8 <SDTimer_Handler>

	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800405e:	f000 fd8f 	bl	8004b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20001218 	.word	0x20001218

0800406c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004070:	4802      	ldr	r0, [pc, #8]	; (800407c <TIM4_IRQHandler+0x10>)
 8004072:	f004 f8da 	bl	800822a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004076:	bf00      	nop
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	200003f4 	.word	0x200003f4

08004080 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004084:	4802      	ldr	r0, [pc, #8]	; (8004090 <USART1_IRQHandler+0x10>)
 8004086:	f004 fdd5 	bl	8008c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000484 	.word	0x20000484

08004094 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004098:	4802      	ldr	r0, [pc, #8]	; (80040a4 <DMA2_Stream0_IRQHandler+0x10>)
 800409a:	f001 fc71 	bl	8005980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20000284 	.word	0x20000284

080040a8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80040ac:	4802      	ldr	r0, [pc, #8]	; (80040b8 <DMA2_Stream2_IRQHandler+0x10>)
 80040ae:	f001 fc67 	bl	8005980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	200004c8 	.word	0x200004c8

080040bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return 1;
 80040c0:	2301      	movs	r3, #1
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <_kill>:

int _kill(int pid, int sig)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80040d6:	f009 facb 	bl	800d670 <__errno>
 80040da:	4603      	mov	r3, r0
 80040dc:	2216      	movs	r2, #22
 80040de:	601a      	str	r2, [r3, #0]
  return -1;
 80040e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <_exit>:

void _exit (int status)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80040f4:	f04f 31ff 	mov.w	r1, #4294967295
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff ffe7 	bl	80040cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80040fe:	e7fe      	b.n	80040fe <_exit+0x12>

08004100 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e00a      	b.n	8004128 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004112:	f3af 8000 	nop.w
 8004116:	4601      	mov	r1, r0
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	60ba      	str	r2, [r7, #8]
 800411e:	b2ca      	uxtb	r2, r1
 8004120:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	3301      	adds	r3, #1
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	dbf0      	blt.n	8004112 <_read+0x12>
  }

  return len;
 8004130:	687b      	ldr	r3, [r7, #4]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b086      	sub	sp, #24
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e009      	b.n	8004160 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	60ba      	str	r2, [r7, #8]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	3301      	adds	r3, #1
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	429a      	cmp	r2, r3
 8004166:	dbf1      	blt.n	800414c <_write+0x12>
  }
  return len;
 8004168:	687b      	ldr	r3, [r7, #4]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <_close>:

int _close(int file)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800417a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800419a:	605a      	str	r2, [r3, #4]
  return 0;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <_isatty>:

int _isatty(int file)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80041b2:	2301      	movs	r3, #1
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
	...

080041dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041e4:	4a14      	ldr	r2, [pc, #80]	; (8004238 <_sbrk+0x5c>)
 80041e6:	4b15      	ldr	r3, [pc, #84]	; (800423c <_sbrk+0x60>)
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041f0:	4b13      	ldr	r3, [pc, #76]	; (8004240 <_sbrk+0x64>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d102      	bne.n	80041fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041f8:	4b11      	ldr	r3, [pc, #68]	; (8004240 <_sbrk+0x64>)
 80041fa:	4a12      	ldr	r2, [pc, #72]	; (8004244 <_sbrk+0x68>)
 80041fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041fe:	4b10      	ldr	r3, [pc, #64]	; (8004240 <_sbrk+0x64>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4413      	add	r3, r2
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	429a      	cmp	r2, r3
 800420a:	d207      	bcs.n	800421c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800420c:	f009 fa30 	bl	800d670 <__errno>
 8004210:	4603      	mov	r3, r0
 8004212:	220c      	movs	r2, #12
 8004214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004216:	f04f 33ff 	mov.w	r3, #4294967295
 800421a:	e009      	b.n	8004230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800421c:	4b08      	ldr	r3, [pc, #32]	; (8004240 <_sbrk+0x64>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <_sbrk+0x64>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4413      	add	r3, r2
 800422a:	4a05      	ldr	r2, [pc, #20]	; (8004240 <_sbrk+0x64>)
 800422c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800422e:	68fb      	ldr	r3, [r7, #12]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20020000 	.word	0x20020000
 800423c:	00000400 	.word	0x00000400
 8004240:	2000121c 	.word	0x2000121c
 8004244:	20001498 	.word	0x20001498

08004248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <SystemInit+0x20>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004252:	4a05      	ldr	r2, [pc, #20]	; (8004268 <SystemInit+0x20>)
 8004254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800425c:	bf00      	nop
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af02      	add	r7, sp, #8
 8004272:	4603      	mov	r3, r0
 8004274:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8004276:	f107 020f 	add.w	r2, r7, #15
 800427a:	1df9      	adds	r1, r7, #7
 800427c:	2364      	movs	r3, #100	; 0x64
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	2301      	movs	r3, #1
 8004282:	4804      	ldr	r0, [pc, #16]	; (8004294 <W25qxx_Spi+0x28>)
 8004284:	f003 fb9a 	bl	80079bc <HAL_SPI_TransmitReceive>
	return ret;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000344 	.word	0x20000344

08004298 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	2300      	movs	r3, #0
 80042a8:	607b      	str	r3, [r7, #4]
 80042aa:	2300      	movs	r3, #0
 80042ac:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80042ae:	2200      	movs	r2, #0
 80042b0:	2101      	movs	r1, #1
 80042b2:	4813      	ldr	r0, [pc, #76]	; (8004300 <W25qxx_ReadID+0x68>)
 80042b4:	f001 ff82 	bl	80061bc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80042b8:	209f      	movs	r0, #159	; 0x9f
 80042ba:	f7ff ffd7 	bl	800426c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80042be:	20a5      	movs	r0, #165	; 0xa5
 80042c0:	f7ff ffd4 	bl	800426c <W25qxx_Spi>
 80042c4:	4603      	mov	r3, r0
 80042c6:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80042c8:	20a5      	movs	r0, #165	; 0xa5
 80042ca:	f7ff ffcf 	bl	800426c <W25qxx_Spi>
 80042ce:	4603      	mov	r3, r0
 80042d0:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80042d2:	20a5      	movs	r0, #165	; 0xa5
 80042d4:	f7ff ffca 	bl	800426c <W25qxx_Spi>
 80042d8:	4603      	mov	r3, r0
 80042da:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042dc:	2201      	movs	r2, #1
 80042de:	2101      	movs	r1, #1
 80042e0:	4807      	ldr	r0, [pc, #28]	; (8004300 <W25qxx_ReadID+0x68>)
 80042e2:	f001 ff6b 	bl	80061bc <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	041a      	lsls	r2, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	4313      	orrs	r3, r2
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
	return Temp;
 80042f6:	68fb      	ldr	r3, [r7, #12]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40020400 	.word	0x40020400

08004304 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004304:	b590      	push	{r4, r7, lr}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800430a:	2200      	movs	r2, #0
 800430c:	2101      	movs	r1, #1
 800430e:	4816      	ldr	r0, [pc, #88]	; (8004368 <W25qxx_ReadUniqID+0x64>)
 8004310:	f001 ff54 	bl	80061bc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004314:	204b      	movs	r0, #75	; 0x4b
 8004316:	f7ff ffa9 	bl	800426c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800431a:	2300      	movs	r3, #0
 800431c:	71fb      	strb	r3, [r7, #7]
 800431e:	e005      	b.n	800432c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004320:	20a5      	movs	r0, #165	; 0xa5
 8004322:	f7ff ffa3 	bl	800426c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	3301      	adds	r3, #1
 800432a:	71fb      	strb	r3, [r7, #7]
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	2b03      	cmp	r3, #3
 8004330:	d9f6      	bls.n	8004320 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8004332:	2300      	movs	r3, #0
 8004334:	71bb      	strb	r3, [r7, #6]
 8004336:	e00b      	b.n	8004350 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004338:	79bc      	ldrb	r4, [r7, #6]
 800433a:	20a5      	movs	r0, #165	; 0xa5
 800433c:	f7ff ff96 	bl	800426c <W25qxx_Spi>
 8004340:	4603      	mov	r3, r0
 8004342:	461a      	mov	r2, r3
 8004344:	4b09      	ldr	r3, [pc, #36]	; (800436c <W25qxx_ReadUniqID+0x68>)
 8004346:	4423      	add	r3, r4
 8004348:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800434a:	79bb      	ldrb	r3, [r7, #6]
 800434c:	3301      	adds	r3, #1
 800434e:	71bb      	strb	r3, [r7, #6]
 8004350:	79bb      	ldrb	r3, [r7, #6]
 8004352:	2b07      	cmp	r3, #7
 8004354:	d9f0      	bls.n	8004338 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004356:	2201      	movs	r2, #1
 8004358:	2101      	movs	r1, #1
 800435a:	4803      	ldr	r0, [pc, #12]	; (8004368 <W25qxx_ReadUniqID+0x64>)
 800435c:	f001 ff2e 	bl	80061bc <HAL_GPIO_WritePin>
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	bd90      	pop	{r4, r7, pc}
 8004368:	40020400 	.word	0x40020400
 800436c:	20001220 	.word	0x20001220

08004370 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004374:	2200      	movs	r2, #0
 8004376:	2101      	movs	r1, #1
 8004378:	4807      	ldr	r0, [pc, #28]	; (8004398 <W25qxx_WriteEnable+0x28>)
 800437a:	f001 ff1f 	bl	80061bc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800437e:	2006      	movs	r0, #6
 8004380:	f7ff ff74 	bl	800426c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004384:	2201      	movs	r2, #1
 8004386:	2101      	movs	r1, #1
 8004388:	4803      	ldr	r0, [pc, #12]	; (8004398 <W25qxx_WriteEnable+0x28>)
 800438a:	f001 ff17 	bl	80061bc <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800438e:	2001      	movs	r0, #1
 8004390:	f000 fc16 	bl	8004bc0 <HAL_Delay>
}
 8004394:	bf00      	nop
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40020400 	.word	0x40020400

0800439c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80043aa:	2200      	movs	r2, #0
 80043ac:	2101      	movs	r1, #1
 80043ae:	481c      	ldr	r0, [pc, #112]	; (8004420 <W25qxx_ReadStatusRegister+0x84>)
 80043b0:	f001 ff04 	bl	80061bc <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d10c      	bne.n	80043d4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80043ba:	2005      	movs	r0, #5
 80043bc:	f7ff ff56 	bl	800426c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80043c0:	20a5      	movs	r0, #165	; 0xa5
 80043c2:	f7ff ff53 	bl	800426c <W25qxx_Spi>
 80043c6:	4603      	mov	r3, r0
 80043c8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80043ca:	4a16      	ldr	r2, [pc, #88]	; (8004424 <W25qxx_ReadStatusRegister+0x88>)
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80043d2:	e01b      	b.n	800440c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d10c      	bne.n	80043f4 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80043da:	2035      	movs	r0, #53	; 0x35
 80043dc:	f7ff ff46 	bl	800426c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80043e0:	20a5      	movs	r0, #165	; 0xa5
 80043e2:	f7ff ff43 	bl	800426c <W25qxx_Spi>
 80043e6:	4603      	mov	r3, r0
 80043e8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80043ea:	4a0e      	ldr	r2, [pc, #56]	; (8004424 <W25qxx_ReadStatusRegister+0x88>)
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80043f2:	e00b      	b.n	800440c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80043f4:	2015      	movs	r0, #21
 80043f6:	f7ff ff39 	bl	800426c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80043fa:	20a5      	movs	r0, #165	; 0xa5
 80043fc:	f7ff ff36 	bl	800426c <W25qxx_Spi>
 8004400:	4603      	mov	r3, r0
 8004402:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004404:	4a07      	ldr	r2, [pc, #28]	; (8004424 <W25qxx_ReadStatusRegister+0x88>)
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800440c:	2201      	movs	r2, #1
 800440e:	2101      	movs	r1, #1
 8004410:	4803      	ldr	r0, [pc, #12]	; (8004420 <W25qxx_ReadStatusRegister+0x84>)
 8004412:	f001 fed3 	bl	80061bc <HAL_GPIO_WritePin>
	return status;
 8004416:	7bfb      	ldrb	r3, [r7, #15]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40020400 	.word	0x40020400
 8004424:	20001220 	.word	0x20001220

08004428 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800442c:	2001      	movs	r0, #1
 800442e:	f000 fbc7 	bl	8004bc0 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004432:	2200      	movs	r2, #0
 8004434:	2101      	movs	r1, #1
 8004436:	480f      	ldr	r0, [pc, #60]	; (8004474 <W25qxx_WaitForWriteEnd+0x4c>)
 8004438:	f001 fec0 	bl	80061bc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800443c:	2005      	movs	r0, #5
 800443e:	f7ff ff15 	bl	800426c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004442:	20a5      	movs	r0, #165	; 0xa5
 8004444:	f7ff ff12 	bl	800426c <W25qxx_Spi>
 8004448:	4603      	mov	r3, r0
 800444a:	461a      	mov	r2, r3
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <W25qxx_WaitForWriteEnd+0x50>)
 800444e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8004452:	2001      	movs	r0, #1
 8004454:	f000 fbb4 	bl	8004bc0 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8004458:	4b07      	ldr	r3, [pc, #28]	; (8004478 <W25qxx_WaitForWriteEnd+0x50>)
 800445a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1ed      	bne.n	8004442 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004466:	2201      	movs	r2, #1
 8004468:	2101      	movs	r1, #1
 800446a:	4802      	ldr	r0, [pc, #8]	; (8004474 <W25qxx_WaitForWriteEnd+0x4c>)
 800446c:	f001 fea6 	bl	80061bc <HAL_GPIO_WritePin>
}
 8004470:	bf00      	nop
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40020400 	.word	0x40020400
 8004478:	20001220 	.word	0x20001220

0800447c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8004482:	4b65      	ldr	r3, [pc, #404]	; (8004618 <W25qxx_Init+0x19c>)
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800448a:	e002      	b.n	8004492 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800448c:	2001      	movs	r0, #1
 800448e:	f000 fb97 	bl	8004bc0 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8004492:	f000 fb89 	bl	8004ba8 <HAL_GetTick>
 8004496:	4603      	mov	r3, r0
 8004498:	2b63      	cmp	r3, #99	; 0x63
 800449a:	d9f7      	bls.n	800448c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800449c:	2201      	movs	r2, #1
 800449e:	2101      	movs	r1, #1
 80044a0:	485e      	ldr	r0, [pc, #376]	; (800461c <W25qxx_Init+0x1a0>)
 80044a2:	f001 fe8b 	bl	80061bc <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80044a6:	2064      	movs	r0, #100	; 0x64
 80044a8:	f000 fb8a 	bl	8004bc0 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80044ac:	f7ff fef4 	bl	8004298 <W25qxx_ReadID>
 80044b0:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	3b11      	subs	r3, #17
 80044b8:	2b0f      	cmp	r3, #15
 80044ba:	d86c      	bhi.n	8004596 <W25qxx_Init+0x11a>
 80044bc:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <W25qxx_Init+0x48>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	08004589 	.word	0x08004589
 80044c8:	0800457b 	.word	0x0800457b
 80044cc:	0800456d 	.word	0x0800456d
 80044d0:	0800455f 	.word	0x0800455f
 80044d4:	08004551 	.word	0x08004551
 80044d8:	08004543 	.word	0x08004543
 80044dc:	08004535 	.word	0x08004535
 80044e0:	08004525 	.word	0x08004525
 80044e4:	08004515 	.word	0x08004515
 80044e8:	08004597 	.word	0x08004597
 80044ec:	08004597 	.word	0x08004597
 80044f0:	08004597 	.word	0x08004597
 80044f4:	08004597 	.word	0x08004597
 80044f8:	08004597 	.word	0x08004597
 80044fc:	08004597 	.word	0x08004597
 8004500:	08004505 	.word	0x08004505
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004504:	4b44      	ldr	r3, [pc, #272]	; (8004618 <W25qxx_Init+0x19c>)
 8004506:	220a      	movs	r2, #10
 8004508:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800450a:	4b43      	ldr	r3, [pc, #268]	; (8004618 <W25qxx_Init+0x19c>)
 800450c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004510:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8004512:	e046      	b.n	80045a2 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004514:	4b40      	ldr	r3, [pc, #256]	; (8004618 <W25qxx_Init+0x19c>)
 8004516:	2209      	movs	r2, #9
 8004518:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800451a:	4b3f      	ldr	r3, [pc, #252]	; (8004618 <W25qxx_Init+0x19c>)
 800451c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004520:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8004522:	e03e      	b.n	80045a2 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004524:	4b3c      	ldr	r3, [pc, #240]	; (8004618 <W25qxx_Init+0x19c>)
 8004526:	2208      	movs	r2, #8
 8004528:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800452a:	4b3b      	ldr	r3, [pc, #236]	; (8004618 <W25qxx_Init+0x19c>)
 800452c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004530:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8004532:	e036      	b.n	80045a2 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8004534:	4b38      	ldr	r3, [pc, #224]	; (8004618 <W25qxx_Init+0x19c>)
 8004536:	2207      	movs	r2, #7
 8004538:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800453a:	4b37      	ldr	r3, [pc, #220]	; (8004618 <W25qxx_Init+0x19c>)
 800453c:	2280      	movs	r2, #128	; 0x80
 800453e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8004540:	e02f      	b.n	80045a2 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004542:	4b35      	ldr	r3, [pc, #212]	; (8004618 <W25qxx_Init+0x19c>)
 8004544:	2206      	movs	r2, #6
 8004546:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004548:	4b33      	ldr	r3, [pc, #204]	; (8004618 <W25qxx_Init+0x19c>)
 800454a:	2240      	movs	r2, #64	; 0x40
 800454c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800454e:	e028      	b.n	80045a2 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004550:	4b31      	ldr	r3, [pc, #196]	; (8004618 <W25qxx_Init+0x19c>)
 8004552:	2205      	movs	r2, #5
 8004554:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004556:	4b30      	ldr	r3, [pc, #192]	; (8004618 <W25qxx_Init+0x19c>)
 8004558:	2220      	movs	r2, #32
 800455a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800455c:	e021      	b.n	80045a2 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800455e:	4b2e      	ldr	r3, [pc, #184]	; (8004618 <W25qxx_Init+0x19c>)
 8004560:	2204      	movs	r2, #4
 8004562:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004564:	4b2c      	ldr	r3, [pc, #176]	; (8004618 <W25qxx_Init+0x19c>)
 8004566:	2210      	movs	r2, #16
 8004568:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800456a:	e01a      	b.n	80045a2 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800456c:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <W25qxx_Init+0x19c>)
 800456e:	2203      	movs	r2, #3
 8004570:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004572:	4b29      	ldr	r3, [pc, #164]	; (8004618 <W25qxx_Init+0x19c>)
 8004574:	2208      	movs	r2, #8
 8004576:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8004578:	e013      	b.n	80045a2 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800457a:	4b27      	ldr	r3, [pc, #156]	; (8004618 <W25qxx_Init+0x19c>)
 800457c:	2202      	movs	r2, #2
 800457e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004580:	4b25      	ldr	r3, [pc, #148]	; (8004618 <W25qxx_Init+0x19c>)
 8004582:	2204      	movs	r2, #4
 8004584:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8004586:	e00c      	b.n	80045a2 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004588:	4b23      	ldr	r3, [pc, #140]	; (8004618 <W25qxx_Init+0x19c>)
 800458a:	2201      	movs	r2, #1
 800458c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800458e:	4b22      	ldr	r3, [pc, #136]	; (8004618 <W25qxx_Init+0x19c>)
 8004590:	2202      	movs	r2, #2
 8004592:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8004594:	e005      	b.n	80045a2 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8004596:	4b20      	ldr	r3, [pc, #128]	; (8004618 <W25qxx_Init+0x19c>)
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800459e:	2300      	movs	r3, #0
 80045a0:	e036      	b.n	8004610 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 80045a2:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <W25qxx_Init+0x19c>)
 80045a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045a8:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80045aa:	4b1b      	ldr	r3, [pc, #108]	; (8004618 <W25qxx_Init+0x19c>)
 80045ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045b0:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80045b2:	4b19      	ldr	r3, [pc, #100]	; (8004618 <W25qxx_Init+0x19c>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	4a17      	ldr	r2, [pc, #92]	; (8004618 <W25qxx_Init+0x19c>)
 80045ba:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80045bc:	4b16      	ldr	r3, [pc, #88]	; (8004618 <W25qxx_Init+0x19c>)
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	4a15      	ldr	r2, [pc, #84]	; (8004618 <W25qxx_Init+0x19c>)
 80045c2:	6912      	ldr	r2, [r2, #16]
 80045c4:	fb02 f303 	mul.w	r3, r2, r3
 80045c8:	4a13      	ldr	r2, [pc, #76]	; (8004618 <W25qxx_Init+0x19c>)
 80045ca:	8952      	ldrh	r2, [r2, #10]
 80045cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80045d0:	4a11      	ldr	r2, [pc, #68]	; (8004618 <W25qxx_Init+0x19c>)
 80045d2:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80045d4:	4b10      	ldr	r3, [pc, #64]	; (8004618 <W25qxx_Init+0x19c>)
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	4a0f      	ldr	r2, [pc, #60]	; (8004618 <W25qxx_Init+0x19c>)
 80045dc:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80045de:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <W25qxx_Init+0x19c>)
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	4a0d      	ldr	r2, [pc, #52]	; (8004618 <W25qxx_Init+0x19c>)
 80045e4:	6912      	ldr	r2, [r2, #16]
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	0a9b      	lsrs	r3, r3, #10
 80045ec:	4a0a      	ldr	r2, [pc, #40]	; (8004618 <W25qxx_Init+0x19c>)
 80045ee:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80045f0:	f7ff fe88 	bl	8004304 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80045f4:	2001      	movs	r0, #1
 80045f6:	f7ff fed1 	bl	800439c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80045fa:	2002      	movs	r0, #2
 80045fc:	f7ff fece 	bl	800439c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8004600:	2003      	movs	r0, #3
 8004602:	f7ff fecb 	bl	800439c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8004606:	4b04      	ldr	r3, [pc, #16]	; (8004618 <W25qxx_Init+0x19c>)
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800460e:	2301      	movs	r3, #1
}
 8004610:	4618      	mov	r0, r3
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20001220 	.word	0x20001220
 800461c:	40020400 	.word	0x40020400

08004620 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004628:	e002      	b.n	8004630 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800462a:	2001      	movs	r0, #1
 800462c:	f000 fac8 	bl	8004bc0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004630:	4b25      	ldr	r3, [pc, #148]	; (80046c8 <W25qxx_EraseSector+0xa8>)
 8004632:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004636:	2b01      	cmp	r3, #1
 8004638:	d0f7      	beq.n	800462a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800463a:	4b23      	ldr	r3, [pc, #140]	; (80046c8 <W25qxx_EraseSector+0xa8>)
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8004642:	f7ff fef1 	bl	8004428 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8004646:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <W25qxx_EraseSector+0xa8>)
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	fb02 f303 	mul.w	r3, r2, r3
 8004650:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004652:	f7ff fe8d 	bl	8004370 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004656:	2200      	movs	r2, #0
 8004658:	2101      	movs	r1, #1
 800465a:	481c      	ldr	r0, [pc, #112]	; (80046cc <W25qxx_EraseSector+0xac>)
 800465c:	f001 fdae 	bl	80061bc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004660:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <W25qxx_EraseSector+0xa8>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b08      	cmp	r3, #8
 8004666:	d909      	bls.n	800467c <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8004668:	2021      	movs	r0, #33	; 0x21
 800466a:	f7ff fdff 	bl	800426c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	0e1b      	lsrs	r3, r3, #24
 8004672:	b2db      	uxtb	r3, r3
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff fdf9 	bl	800426c <W25qxx_Spi>
 800467a:	e002      	b.n	8004682 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 800467c:	2020      	movs	r0, #32
 800467e:	f7ff fdf5 	bl	800426c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	0c1b      	lsrs	r3, r3, #16
 8004686:	b2db      	uxtb	r3, r3
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fdef 	bl	800426c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	0a1b      	lsrs	r3, r3, #8
 8004692:	b2db      	uxtb	r3, r3
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fde9 	bl	800426c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff fde4 	bl	800426c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80046a4:	2201      	movs	r2, #1
 80046a6:	2101      	movs	r1, #1
 80046a8:	4808      	ldr	r0, [pc, #32]	; (80046cc <W25qxx_EraseSector+0xac>)
 80046aa:	f001 fd87 	bl	80061bc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80046ae:	f7ff febb 	bl	8004428 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 80046b2:	2001      	movs	r0, #1
 80046b4:	f000 fa84 	bl	8004bc0 <HAL_Delay>
	w25qxx.Lock = 0;
 80046b8:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <W25qxx_EraseSector+0xa8>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	20001220 	.word	0x20001220
 80046cc:	40020400 	.word	0x40020400

080046d0 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <W25qxx_SectorToPage+0x28>)
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	4a05      	ldr	r2, [pc, #20]	; (80046f8 <W25qxx_SectorToPage+0x28>)
 80046e4:	8952      	ldrh	r2, [r2, #10]
 80046e6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20001220 	.word	0x20001220

080046fc <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800470a:	e002      	b.n	8004712 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 800470c:	2001      	movs	r0, #1
 800470e:	f000 fa57 	bl	8004bc0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004712:	4b39      	ldr	r3, [pc, #228]	; (80047f8 <W25qxx_WritePage+0xfc>)
 8004714:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004718:	2b01      	cmp	r3, #1
 800471a:	d0f7      	beq.n	800470c <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 800471c:	4b36      	ldr	r3, [pc, #216]	; (80047f8 <W25qxx_WritePage+0xfc>)
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	4a33      	ldr	r2, [pc, #204]	; (80047f8 <W25qxx_WritePage+0xfc>)
 800472c:	8952      	ldrh	r2, [r2, #10]
 800472e:	4293      	cmp	r3, r2
 8004730:	d802      	bhi.n	8004738 <W25qxx_WritePage+0x3c>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d105      	bne.n	8004744 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004738:	4b2f      	ldr	r3, [pc, #188]	; (80047f8 <W25qxx_WritePage+0xfc>)
 800473a:	895b      	ldrh	r3, [r3, #10]
 800473c:	461a      	mov	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	4413      	add	r3, r2
 800474a:	4a2b      	ldr	r2, [pc, #172]	; (80047f8 <W25qxx_WritePage+0xfc>)
 800474c:	8952      	ldrh	r2, [r2, #10]
 800474e:	4293      	cmp	r3, r2
 8004750:	d905      	bls.n	800475e <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004752:	4b29      	ldr	r3, [pc, #164]	; (80047f8 <W25qxx_WritePage+0xfc>)
 8004754:	895b      	ldrh	r3, [r3, #10]
 8004756:	461a      	mov	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 800475e:	f7ff fe63 	bl	8004428 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8004762:	f7ff fe05 	bl	8004370 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004766:	2200      	movs	r2, #0
 8004768:	2101      	movs	r1, #1
 800476a:	4824      	ldr	r0, [pc, #144]	; (80047fc <W25qxx_WritePage+0x100>)
 800476c:	f001 fd26 	bl	80061bc <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004770:	4b21      	ldr	r3, [pc, #132]	; (80047f8 <W25qxx_WritePage+0xfc>)
 8004772:	895b      	ldrh	r3, [r3, #10]
 8004774:	461a      	mov	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	fb02 f303 	mul.w	r3, r2, r3
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	4413      	add	r3, r2
 8004780:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8004782:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <W25qxx_WritePage+0xfc>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b08      	cmp	r3, #8
 8004788:	d909      	bls.n	800479e <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 800478a:	2012      	movs	r0, #18
 800478c:	f7ff fd6e 	bl	800426c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	0e1b      	lsrs	r3, r3, #24
 8004794:	b2db      	uxtb	r3, r3
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff fd68 	bl	800426c <W25qxx_Spi>
 800479c:	e002      	b.n	80047a4 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 800479e:	2002      	movs	r0, #2
 80047a0:	f7ff fd64 	bl	800426c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	0c1b      	lsrs	r3, r3, #16
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fd5e 	bl	800426c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	0a1b      	lsrs	r3, r3, #8
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff fd58 	bl	800426c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff fd53 	bl	800426c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	2364      	movs	r3, #100	; 0x64
 80047cc:	68f9      	ldr	r1, [r7, #12]
 80047ce:	480c      	ldr	r0, [pc, #48]	; (8004800 <W25qxx_WritePage+0x104>)
 80047d0:	f002 fea7 	bl	8007522 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80047d4:	2201      	movs	r2, #1
 80047d6:	2101      	movs	r1, #1
 80047d8:	4808      	ldr	r0, [pc, #32]	; (80047fc <W25qxx_WritePage+0x100>)
 80047da:	f001 fcef 	bl	80061bc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80047de:	f7ff fe23 	bl	8004428 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80047e2:	2001      	movs	r0, #1
 80047e4:	f000 f9ec 	bl	8004bc0 <HAL_Delay>
	w25qxx.Lock = 0;
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <W25qxx_WritePage+0xfc>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20001220 	.word	0x20001220
 80047fc:	40020400 	.word	0x40020400
 8004800:	20000344 	.word	0x20000344

08004804 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004812:	4b2c      	ldr	r3, [pc, #176]	; (80048c4 <W25qxx_WriteSector+0xc0>)
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d802      	bhi.n	8004822 <W25qxx_WriteSector+0x1e>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d102      	bne.n	8004828 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004822:	4b28      	ldr	r3, [pc, #160]	; (80048c4 <W25qxx_WriteSector+0xc0>)
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004828:	4b26      	ldr	r3, [pc, #152]	; (80048c4 <W25qxx_WriteSector+0xc0>)
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	429a      	cmp	r2, r3
 8004830:	d243      	bcs.n	80048ba <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	441a      	add	r2, r3
 8004838:	4b22      	ldr	r3, [pc, #136]	; (80048c4 <W25qxx_WriteSector+0xc0>)
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	429a      	cmp	r2, r3
 800483e:	d905      	bls.n	800484c <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004840:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <W25qxx_WriteSector+0xc0>)
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	e001      	b.n	8004850 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004850:	68b8      	ldr	r0, [r7, #8]
 8004852:	f7ff ff3d 	bl	80046d0 <W25qxx_SectorToPage>
 8004856:	4602      	mov	r2, r0
 8004858:	4b1a      	ldr	r3, [pc, #104]	; (80048c4 <W25qxx_WriteSector+0xc0>)
 800485a:	895b      	ldrh	r3, [r3, #10]
 800485c:	4619      	mov	r1, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	fbb3 f3f1 	udiv	r3, r3, r1
 8004864:	4413      	add	r3, r2
 8004866:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004868:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <W25qxx_WriteSector+0xc0>)
 800486a:	895b      	ldrh	r3, [r3, #10]
 800486c:	461a      	mov	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	fbb3 f1f2 	udiv	r1, r3, r2
 8004874:	fb01 f202 	mul.w	r2, r1, r2
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	69f9      	ldr	r1, [r7, #28]
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f7ff ff3a 	bl	80046fc <W25qxx_WritePage>
		StartPage++;
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	3301      	adds	r3, #1
 800488c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800488e:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <W25qxx_WriteSector+0xc0>)
 8004890:	895b      	ldrh	r3, [r3, #10]
 8004892:	461a      	mov	r2, r3
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	1a9a      	subs	r2, r3, r2
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	4413      	add	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <W25qxx_WriteSector+0xc0>)
 80048a0:	895b      	ldrh	r3, [r3, #10]
 80048a2:	461a      	mov	r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	dce1      	bgt.n	800487c <W25qxx_WriteSector+0x78>
 80048b8:	e000      	b.n	80048bc <W25qxx_WriteSector+0xb8>
		return;
 80048ba:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80048bc:	3720      	adds	r7, #32
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20001220 	.word	0x20001220

080048c8 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80048d6:	e002      	b.n	80048de <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80048d8:	2001      	movs	r0, #1
 80048da:	f000 f971 	bl	8004bc0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80048de:	4b36      	ldr	r3, [pc, #216]	; (80049b8 <W25qxx_ReadPage+0xf0>)
 80048e0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d0f7      	beq.n	80048d8 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80048e8:	4b33      	ldr	r3, [pc, #204]	; (80049b8 <W25qxx_ReadPage+0xf0>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80048f0:	4b31      	ldr	r3, [pc, #196]	; (80049b8 <W25qxx_ReadPage+0xf0>)
 80048f2:	895b      	ldrh	r3, [r3, #10]
 80048f4:	461a      	mov	r2, r3
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d802      	bhi.n	8004902 <W25qxx_ReadPage+0x3a>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004902:	4b2d      	ldr	r3, [pc, #180]	; (80049b8 <W25qxx_ReadPage+0xf0>)
 8004904:	895b      	ldrh	r3, [r3, #10]
 8004906:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	4413      	add	r3, r2
 800490e:	4a2a      	ldr	r2, [pc, #168]	; (80049b8 <W25qxx_ReadPage+0xf0>)
 8004910:	8952      	ldrh	r2, [r2, #10]
 8004912:	4293      	cmp	r3, r2
 8004914:	d905      	bls.n	8004922 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004916:	4b28      	ldr	r3, [pc, #160]	; (80049b8 <W25qxx_ReadPage+0xf0>)
 8004918:	895b      	ldrh	r3, [r3, #10]
 800491a:	461a      	mov	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004922:	4b25      	ldr	r3, [pc, #148]	; (80049b8 <W25qxx_ReadPage+0xf0>)
 8004924:	895b      	ldrh	r3, [r3, #10]
 8004926:	461a      	mov	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	4413      	add	r3, r2
 8004932:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004934:	2200      	movs	r2, #0
 8004936:	2101      	movs	r1, #1
 8004938:	4820      	ldr	r0, [pc, #128]	; (80049bc <W25qxx_ReadPage+0xf4>)
 800493a:	f001 fc3f 	bl	80061bc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800493e:	4b1e      	ldr	r3, [pc, #120]	; (80049b8 <W25qxx_ReadPage+0xf0>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b08      	cmp	r3, #8
 8004944:	d909      	bls.n	800495a <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8004946:	200c      	movs	r0, #12
 8004948:	f7ff fc90 	bl	800426c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	0e1b      	lsrs	r3, r3, #24
 8004950:	b2db      	uxtb	r3, r3
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fc8a 	bl	800426c <W25qxx_Spi>
 8004958:	e002      	b.n	8004960 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800495a:	200b      	movs	r0, #11
 800495c:	f7ff fc86 	bl	800426c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	0c1b      	lsrs	r3, r3, #16
 8004964:	b2db      	uxtb	r3, r3
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff fc80 	bl	800426c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	b2db      	uxtb	r3, r3
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff fc7a 	bl	800426c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	b2db      	uxtb	r3, r3
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fc75 	bl	800426c <W25qxx_Spi>
	W25qxx_Spi(0);
 8004982:	2000      	movs	r0, #0
 8004984:	f7ff fc72 	bl	800426c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	b29a      	uxth	r2, r3
 800498c:	2364      	movs	r3, #100	; 0x64
 800498e:	68f9      	ldr	r1, [r7, #12]
 8004990:	480b      	ldr	r0, [pc, #44]	; (80049c0 <W25qxx_ReadPage+0xf8>)
 8004992:	f002 ff02 	bl	800779a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004996:	2201      	movs	r2, #1
 8004998:	2101      	movs	r1, #1
 800499a:	4808      	ldr	r0, [pc, #32]	; (80049bc <W25qxx_ReadPage+0xf4>)
 800499c:	f001 fc0e 	bl	80061bc <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80049a0:	2001      	movs	r0, #1
 80049a2:	f000 f90d 	bl	8004bc0 <HAL_Delay>
	w25qxx.Lock = 0;
 80049a6:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <W25qxx_ReadPage+0xf0>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80049ae:	bf00      	nop
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20001220 	.word	0x20001220
 80049bc:	40020400 	.word	0x40020400
 80049c0:	20000344 	.word	0x20000344

080049c4 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80049d2:	4b2c      	ldr	r3, [pc, #176]	; (8004a84 <W25qxx_ReadSector+0xc0>)
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d802      	bhi.n	80049e2 <W25qxx_ReadSector+0x1e>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d102      	bne.n	80049e8 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80049e2:	4b28      	ldr	r3, [pc, #160]	; (8004a84 <W25qxx_ReadSector+0xc0>)
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80049e8:	4b26      	ldr	r3, [pc, #152]	; (8004a84 <W25qxx_ReadSector+0xc0>)
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d243      	bcs.n	8004a7a <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	441a      	add	r2, r3
 80049f8:	4b22      	ldr	r3, [pc, #136]	; (8004a84 <W25qxx_ReadSector+0xc0>)
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d905      	bls.n	8004a0c <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004a00:	4b20      	ldr	r3, [pc, #128]	; (8004a84 <W25qxx_ReadSector+0xc0>)
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	e001      	b.n	8004a10 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004a10:	68b8      	ldr	r0, [r7, #8]
 8004a12:	f7ff fe5d 	bl	80046d0 <W25qxx_SectorToPage>
 8004a16:	4602      	mov	r2, r0
 8004a18:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <W25qxx_ReadSector+0xc0>)
 8004a1a:	895b      	ldrh	r3, [r3, #10]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a24:	4413      	add	r3, r2
 8004a26:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004a28:	4b16      	ldr	r3, [pc, #88]	; (8004a84 <W25qxx_ReadSector+0xc0>)
 8004a2a:	895b      	ldrh	r3, [r3, #10]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a34:	fb01 f202 	mul.w	r2, r1, r2
 8004a38:	1a9b      	subs	r3, r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	69f9      	ldr	r1, [r7, #28]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f7ff ff40 	bl	80048c8 <W25qxx_ReadPage>
		StartPage++;
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <W25qxx_ReadSector+0xc0>)
 8004a50:	895b      	ldrh	r3, [r3, #10]
 8004a52:	461a      	mov	r2, r3
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	1a9a      	subs	r2, r3, r2
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <W25qxx_ReadSector+0xc0>)
 8004a60:	895b      	ldrh	r3, [r3, #10]
 8004a62:	461a      	mov	r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	dce1      	bgt.n	8004a3c <W25qxx_ReadSector+0x78>
 8004a78:	e000      	b.n	8004a7c <W25qxx_ReadSector+0xb8>
		return;
 8004a7a:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20001220 	.word	0x20001220

08004a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ac0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a8c:	480d      	ldr	r0, [pc, #52]	; (8004ac4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004a8e:	490e      	ldr	r1, [pc, #56]	; (8004ac8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004a90:	4a0e      	ldr	r2, [pc, #56]	; (8004acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a94:	e002      	b.n	8004a9c <LoopCopyDataInit>

08004a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a9a:	3304      	adds	r3, #4

08004a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004aa0:	d3f9      	bcc.n	8004a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aa2:	4a0b      	ldr	r2, [pc, #44]	; (8004ad0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004aa4:	4c0b      	ldr	r4, [pc, #44]	; (8004ad4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004aa8:	e001      	b.n	8004aae <LoopFillZerobss>

08004aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004aac:	3204      	adds	r2, #4

08004aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ab0:	d3fb      	bcc.n	8004aaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ab2:	f7ff fbc9 	bl	8004248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ab6:	f008 fde1 	bl	800d67c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aba:	f7fe fbad 	bl	8003218 <main>
  bx  lr    
 8004abe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ac8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8004acc:	08012c30 	.word	0x08012c30
  ldr r2, =_sbss
 8004ad0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004ad4:	20001498 	.word	0x20001498

08004ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ad8:	e7fe      	b.n	8004ad8 <ADC_IRQHandler>
	...

08004adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <HAL_Init+0x40>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a0d      	ldr	r2, [pc, #52]	; (8004b1c <HAL_Init+0x40>)
 8004ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_Init+0x40>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <HAL_Init+0x40>)
 8004af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004af8:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <HAL_Init+0x40>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a07      	ldr	r2, [pc, #28]	; (8004b1c <HAL_Init+0x40>)
 8004afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b04:	2003      	movs	r0, #3
 8004b06:	f000 fd61 	bl	80055cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b0a:	200f      	movs	r0, #15
 8004b0c:	f000 f808 	bl	8004b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b10:	f7ff f806 	bl	8003b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40023c00 	.word	0x40023c00

08004b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b28:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <HAL_InitTick+0x54>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <HAL_InitTick+0x58>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	4619      	mov	r1, r3
 8004b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fd79 	bl	8005636 <HAL_SYSTICK_Config>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e00e      	b.n	8004b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b0f      	cmp	r3, #15
 8004b52:	d80a      	bhi.n	8004b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b54:	2200      	movs	r2, #0
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5c:	f000 fd41 	bl	80055e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b60:	4a06      	ldr	r2, [pc, #24]	; (8004b7c <HAL_InitTick+0x5c>)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	e000      	b.n	8004b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20000004 	.word	0x20000004
 8004b78:	2000000c 	.word	0x2000000c
 8004b7c:	20000008 	.word	0x20000008

08004b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b84:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <HAL_IncTick+0x20>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <HAL_IncTick+0x24>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4413      	add	r3, r2
 8004b90:	4a04      	ldr	r2, [pc, #16]	; (8004ba4 <HAL_IncTick+0x24>)
 8004b92:	6013      	str	r3, [r2, #0]
}
 8004b94:	bf00      	nop
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	2000000c 	.word	0x2000000c
 8004ba4:	20001248 	.word	0x20001248

08004ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  return uwTick;
 8004bac:	4b03      	ldr	r3, [pc, #12]	; (8004bbc <HAL_GetTick+0x14>)
 8004bae:	681b      	ldr	r3, [r3, #0]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20001248 	.word	0x20001248

08004bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bc8:	f7ff ffee 	bl	8004ba8 <HAL_GetTick>
 8004bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d005      	beq.n	8004be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bda:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <HAL_Delay+0x44>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004be6:	bf00      	nop
 8004be8:	f7ff ffde 	bl	8004ba8 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d8f7      	bhi.n	8004be8 <HAL_Delay+0x28>
  {
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	2000000c 	.word	0x2000000c

08004c08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e033      	b.n	8004c86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fe ffa2 	bl	8003b70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d118      	bne.n	8004c78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c4e:	f023 0302 	bic.w	r3, r3, #2
 8004c52:	f043 0202 	orr.w	r2, r3, #2
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fa68 	bl	8005130 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	f023 0303 	bic.w	r3, r3, #3
 8004c6e:	f043 0201 	orr.w	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
 8004c76:	e001      	b.n	8004c7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_ADC_Start_DMA+0x1e>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e0e9      	b.n	8004e82 <HAL_ADC_Start_DMA+0x1f2>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d018      	beq.n	8004cf6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004cd4:	4b6d      	ldr	r3, [pc, #436]	; (8004e8c <HAL_ADC_Start_DMA+0x1fc>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a6d      	ldr	r2, [pc, #436]	; (8004e90 <HAL_ADC_Start_DMA+0x200>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	0c9a      	lsrs	r2, r3, #18
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	4413      	add	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004ce8:	e002      	b.n	8004cf0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f9      	bne.n	8004cea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d04:	d107      	bne.n	8004d16 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d14:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	f040 80a1 	bne.w	8004e68 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d64:	d106      	bne.n	8004d74 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6a:	f023 0206 	bic.w	r2, r3, #6
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	645a      	str	r2, [r3, #68]	; 0x44
 8004d72:	e002      	b.n	8004d7a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d82:	4b44      	ldr	r3, [pc, #272]	; (8004e94 <HAL_ADC_Start_DMA+0x204>)
 8004d84:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	4a43      	ldr	r2, [pc, #268]	; (8004e98 <HAL_ADC_Start_DMA+0x208>)
 8004d8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	4a42      	ldr	r2, [pc, #264]	; (8004e9c <HAL_ADC_Start_DMA+0x20c>)
 8004d94:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	4a41      	ldr	r2, [pc, #260]	; (8004ea0 <HAL_ADC_Start_DMA+0x210>)
 8004d9c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004da6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004db6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dc6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	334c      	adds	r3, #76	; 0x4c
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f000 fce8 	bl	80057ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d12a      	bne.n	8004e3e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a2d      	ldr	r2, [pc, #180]	; (8004ea4 <HAL_ADC_Start_DMA+0x214>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d015      	beq.n	8004e1e <HAL_ADC_Start_DMA+0x18e>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a2c      	ldr	r2, [pc, #176]	; (8004ea8 <HAL_ADC_Start_DMA+0x218>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d105      	bne.n	8004e08 <HAL_ADC_Start_DMA+0x178>
 8004dfc:	4b25      	ldr	r3, [pc, #148]	; (8004e94 <HAL_ADC_Start_DMA+0x204>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a27      	ldr	r2, [pc, #156]	; (8004eac <HAL_ADC_Start_DMA+0x21c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d136      	bne.n	8004e80 <HAL_ADC_Start_DMA+0x1f0>
 8004e12:	4b20      	ldr	r3, [pc, #128]	; (8004e94 <HAL_ADC_Start_DMA+0x204>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d130      	bne.n	8004e80 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d129      	bne.n	8004e80 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	e020      	b.n	8004e80 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a18      	ldr	r2, [pc, #96]	; (8004ea4 <HAL_ADC_Start_DMA+0x214>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d11b      	bne.n	8004e80 <HAL_ADC_Start_DMA+0x1f0>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d114      	bne.n	8004e80 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e64:	609a      	str	r2, [r3, #8]
 8004e66:	e00b      	b.n	8004e80 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	f043 0210 	orr.w	r2, r3, #16
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e78:	f043 0201 	orr.w	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000004 	.word	0x20000004
 8004e90:	431bde83 	.word	0x431bde83
 8004e94:	40012300 	.word	0x40012300
 8004e98:	08005329 	.word	0x08005329
 8004e9c:	080053e3 	.word	0x080053e3
 8004ea0:	080053ff 	.word	0x080053ff
 8004ea4:	40012000 	.word	0x40012000
 8004ea8:	40012100 	.word	0x40012100
 8004eac:	40012200 	.word	0x40012200

08004eb0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x1c>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e105      	b.n	8005114 <HAL_ADC_ConfigChannel+0x228>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b09      	cmp	r3, #9
 8004f16:	d925      	bls.n	8004f64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68d9      	ldr	r1, [r3, #12]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	4613      	mov	r3, r2
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3b1e      	subs	r3, #30
 8004f2e:	2207      	movs	r2, #7
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	43da      	mvns	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	400a      	ands	r2, r1
 8004f3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68d9      	ldr	r1, [r3, #12]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	4618      	mov	r0, r3
 8004f50:	4603      	mov	r3, r0
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4403      	add	r3, r0
 8004f56:	3b1e      	subs	r3, #30
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	60da      	str	r2, [r3, #12]
 8004f62:	e022      	b.n	8004faa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6919      	ldr	r1, [r3, #16]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	4613      	mov	r3, r2
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	4413      	add	r3, r2
 8004f78:	2207      	movs	r2, #7
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	43da      	mvns	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	400a      	ands	r2, r1
 8004f86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6919      	ldr	r1, [r3, #16]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	4618      	mov	r0, r3
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4403      	add	r3, r0
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d824      	bhi.n	8004ffc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	3b05      	subs	r3, #5
 8004fc4:	221f      	movs	r2, #31
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	43da      	mvns	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	400a      	ands	r2, r1
 8004fd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	3b05      	subs	r3, #5
 8004fee:	fa00 f203 	lsl.w	r2, r0, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	635a      	str	r2, [r3, #52]	; 0x34
 8004ffa:	e04c      	b.n	8005096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b0c      	cmp	r3, #12
 8005002:	d824      	bhi.n	800504e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	3b23      	subs	r3, #35	; 0x23
 8005016:	221f      	movs	r2, #31
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	43da      	mvns	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	400a      	ands	r2, r1
 8005024:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	4618      	mov	r0, r3
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	3b23      	subs	r3, #35	; 0x23
 8005040:	fa00 f203 	lsl.w	r2, r0, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	631a      	str	r2, [r3, #48]	; 0x30
 800504c:	e023      	b.n	8005096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	3b41      	subs	r3, #65	; 0x41
 8005060:	221f      	movs	r2, #31
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43da      	mvns	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	400a      	ands	r2, r1
 800506e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	b29b      	uxth	r3, r3
 800507c:	4618      	mov	r0, r3
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	3b41      	subs	r3, #65	; 0x41
 800508a:	fa00 f203 	lsl.w	r2, r0, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005096:	4b22      	ldr	r3, [pc, #136]	; (8005120 <HAL_ADC_ConfigChannel+0x234>)
 8005098:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a21      	ldr	r2, [pc, #132]	; (8005124 <HAL_ADC_ConfigChannel+0x238>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d109      	bne.n	80050b8 <HAL_ADC_ConfigChannel+0x1cc>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b12      	cmp	r3, #18
 80050aa:	d105      	bne.n	80050b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a19      	ldr	r2, [pc, #100]	; (8005124 <HAL_ADC_ConfigChannel+0x238>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d123      	bne.n	800510a <HAL_ADC_ConfigChannel+0x21e>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b10      	cmp	r3, #16
 80050c8:	d003      	beq.n	80050d2 <HAL_ADC_ConfigChannel+0x1e6>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b11      	cmp	r3, #17
 80050d0:	d11b      	bne.n	800510a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b10      	cmp	r3, #16
 80050e4:	d111      	bne.n	800510a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80050e6:	4b10      	ldr	r3, [pc, #64]	; (8005128 <HAL_ADC_ConfigChannel+0x23c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a10      	ldr	r2, [pc, #64]	; (800512c <HAL_ADC_ConfigChannel+0x240>)
 80050ec:	fba2 2303 	umull	r2, r3, r2, r3
 80050f0:	0c9a      	lsrs	r2, r3, #18
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80050fc:	e002      	b.n	8005104 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	3b01      	subs	r3, #1
 8005102:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f9      	bne.n	80050fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	40012300 	.word	0x40012300
 8005124:	40012000 	.word	0x40012000
 8005128:	20000004 	.word	0x20000004
 800512c:	431bde83 	.word	0x431bde83

08005130 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005138:	4b79      	ldr	r3, [pc, #484]	; (8005320 <ADC_Init+0x1f0>)
 800513a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	431a      	orrs	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005164:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6859      	ldr	r1, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	021a      	lsls	r2, r3, #8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005188:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6859      	ldr	r1, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6899      	ldr	r1, [r3, #8]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	4a58      	ldr	r2, [pc, #352]	; (8005324 <ADC_Init+0x1f4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d022      	beq.n	800520e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6899      	ldr	r1, [r3, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80051f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6899      	ldr	r1, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	609a      	str	r2, [r3, #8]
 800520c:	e00f      	b.n	800522e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800521c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800522c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0202 	bic.w	r2, r2, #2
 800523c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6899      	ldr	r1, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	7e1b      	ldrb	r3, [r3, #24]
 8005248:	005a      	lsls	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01b      	beq.n	8005294 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800526a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800527a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6859      	ldr	r1, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	3b01      	subs	r3, #1
 8005288:	035a      	lsls	r2, r3, #13
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	e007      	b.n	80052a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80052b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	3b01      	subs	r3, #1
 80052c0:	051a      	lsls	r2, r3, #20
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6899      	ldr	r1, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052e6:	025a      	lsls	r2, r3, #9
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6899      	ldr	r1, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	029a      	lsls	r2, r3, #10
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	609a      	str	r2, [r3, #8]
}
 8005314:	bf00      	nop
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	40012300 	.word	0x40012300
 8005324:	0f000001 	.word	0x0f000001

08005328 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800533e:	2b00      	cmp	r3, #0
 8005340:	d13c      	bne.n	80053bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d12b      	bne.n	80053b4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005360:	2b00      	cmp	r3, #0
 8005362:	d127      	bne.n	80053b4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800536e:	2b00      	cmp	r3, #0
 8005370:	d006      	beq.n	8005380 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800537c:	2b00      	cmp	r3, #0
 800537e:	d119      	bne.n	80053b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0220 	bic.w	r2, r2, #32
 800538e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d105      	bne.n	80053b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	f043 0201 	orr.w	r2, r3, #1
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff fd7b 	bl	8004eb0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80053ba:	e00e      	b.n	80053da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f7ff fd85 	bl	8004ed8 <HAL_ADC_ErrorCallback>
}
 80053ce:	e004      	b.n	80053da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	4798      	blx	r3
}
 80053da:	bf00      	nop
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f7ff fd67 	bl	8004ec4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053f6:	bf00      	nop
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2240      	movs	r2, #64	; 0x40
 8005410:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005416:	f043 0204 	orr.w	r2, r3, #4
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f7ff fd5a 	bl	8004ed8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005424:	bf00      	nop
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800543c:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <__NVIC_SetPriorityGrouping+0x44>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005448:	4013      	ands	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800545c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800545e:	4a04      	ldr	r2, [pc, #16]	; (8005470 <__NVIC_SetPriorityGrouping+0x44>)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	60d3      	str	r3, [r2, #12]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	e000ed00 	.word	0xe000ed00

08005474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005478:	4b04      	ldr	r3, [pc, #16]	; (800548c <__NVIC_GetPriorityGrouping+0x18>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	0a1b      	lsrs	r3, r3, #8
 800547e:	f003 0307 	and.w	r3, r3, #7
}
 8005482:	4618      	mov	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	e000ed00 	.word	0xe000ed00

08005490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800549a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	db0b      	blt.n	80054ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	f003 021f 	and.w	r2, r3, #31
 80054a8:	4907      	ldr	r1, [pc, #28]	; (80054c8 <__NVIC_EnableIRQ+0x38>)
 80054aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	2001      	movs	r0, #1
 80054b2:	fa00 f202 	lsl.w	r2, r0, r2
 80054b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	e000e100 	.word	0xe000e100

080054cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	6039      	str	r1, [r7, #0]
 80054d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	db0a      	blt.n	80054f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	490c      	ldr	r1, [pc, #48]	; (8005518 <__NVIC_SetPriority+0x4c>)
 80054e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ea:	0112      	lsls	r2, r2, #4
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	440b      	add	r3, r1
 80054f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054f4:	e00a      	b.n	800550c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	4908      	ldr	r1, [pc, #32]	; (800551c <__NVIC_SetPriority+0x50>)
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	3b04      	subs	r3, #4
 8005504:	0112      	lsls	r2, r2, #4
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	440b      	add	r3, r1
 800550a:	761a      	strb	r2, [r3, #24]
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	e000e100 	.word	0xe000e100
 800551c:	e000ed00 	.word	0xe000ed00

08005520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005520:	b480      	push	{r7}
 8005522:	b089      	sub	sp, #36	; 0x24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f1c3 0307 	rsb	r3, r3, #7
 800553a:	2b04      	cmp	r3, #4
 800553c:	bf28      	it	cs
 800553e:	2304      	movcs	r3, #4
 8005540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	3304      	adds	r3, #4
 8005546:	2b06      	cmp	r3, #6
 8005548:	d902      	bls.n	8005550 <NVIC_EncodePriority+0x30>
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3b03      	subs	r3, #3
 800554e:	e000      	b.n	8005552 <NVIC_EncodePriority+0x32>
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005554:	f04f 32ff 	mov.w	r2, #4294967295
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	43da      	mvns	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	401a      	ands	r2, r3
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005568:	f04f 31ff 	mov.w	r1, #4294967295
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	fa01 f303 	lsl.w	r3, r1, r3
 8005572:	43d9      	mvns	r1, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005578:	4313      	orrs	r3, r2
         );
}
 800557a:	4618      	mov	r0, r3
 800557c:	3724      	adds	r7, #36	; 0x24
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
	...

08005588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3b01      	subs	r3, #1
 8005594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005598:	d301      	bcc.n	800559e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800559a:	2301      	movs	r3, #1
 800559c:	e00f      	b.n	80055be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800559e:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <SysTick_Config+0x40>)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055a6:	210f      	movs	r1, #15
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	f7ff ff8e 	bl	80054cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055b0:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <SysTick_Config+0x40>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055b6:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <SysTick_Config+0x40>)
 80055b8:	2207      	movs	r2, #7
 80055ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	e000e010 	.word	0xe000e010

080055cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff ff29 	bl	800542c <__NVIC_SetPriorityGrouping>
}
 80055da:	bf00      	nop
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b086      	sub	sp, #24
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	4603      	mov	r3, r0
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
 80055ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055f4:	f7ff ff3e 	bl	8005474 <__NVIC_GetPriorityGrouping>
 80055f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	68b9      	ldr	r1, [r7, #8]
 80055fe:	6978      	ldr	r0, [r7, #20]
 8005600:	f7ff ff8e 	bl	8005520 <NVIC_EncodePriority>
 8005604:	4602      	mov	r2, r0
 8005606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800560a:	4611      	mov	r1, r2
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff ff5d 	bl	80054cc <__NVIC_SetPriority>
}
 8005612:	bf00      	nop
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b082      	sub	sp, #8
 800561e:	af00      	add	r7, sp, #0
 8005620:	4603      	mov	r3, r0
 8005622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff ff31 	bl	8005490 <__NVIC_EnableIRQ>
}
 800562e:	bf00      	nop
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff ffa2 	bl	8005588 <SysTick_Config>
 8005644:	4603      	mov	r3, r0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800565c:	f7ff faa4 	bl	8004ba8 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e099      	b.n	80057a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800568c:	e00f      	b.n	80056ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800568e:	f7ff fa8b 	bl	8004ba8 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b05      	cmp	r3, #5
 800569a:	d908      	bls.n	80056ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2203      	movs	r2, #3
 80056a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e078      	b.n	80057a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1e8      	bne.n	800568e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4b38      	ldr	r3, [pc, #224]	; (80057a8 <HAL_DMA_Init+0x158>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b04      	cmp	r3, #4
 8005706:	d107      	bne.n	8005718 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	4313      	orrs	r3, r2
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	4313      	orrs	r3, r2
 8005716:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f023 0307 	bic.w	r3, r3, #7
 800572e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	4313      	orrs	r3, r2
 8005738:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	2b04      	cmp	r3, #4
 8005740:	d117      	bne.n	8005772 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00e      	beq.n	8005772 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fb01 	bl	8005d5c <DMA_CheckFifoParam>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2240      	movs	r2, #64	; 0x40
 8005764:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800576e:	2301      	movs	r3, #1
 8005770:	e016      	b.n	80057a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fab8 	bl	8005cf0 <DMA_CalcBaseAndBitshift>
 8005780:	4603      	mov	r3, r0
 8005782:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005788:	223f      	movs	r2, #63	; 0x3f
 800578a:	409a      	lsls	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	f010803f 	.word	0xf010803f

080057ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_DMA_Start_IT+0x26>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e040      	b.n	8005854 <HAL_DMA_Start_IT+0xa8>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d12f      	bne.n	8005846 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2202      	movs	r2, #2
 80057ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fa4a 	bl	8005c94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005804:	223f      	movs	r2, #63	; 0x3f
 8005806:	409a      	lsls	r2, r3
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0216 	orr.w	r2, r2, #22
 800581a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0208 	orr.w	r2, r2, #8
 8005832:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e005      	b.n	8005852 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800584e:	2302      	movs	r3, #2
 8005850:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005852:	7dfb      	ldrb	r3, [r7, #23]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005868:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800586a:	f7ff f99d 	bl	8004ba8 <HAL_GetTick>
 800586e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d008      	beq.n	800588e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2280      	movs	r2, #128	; 0x80
 8005880:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e052      	b.n	8005934 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0216 	bic.w	r2, r2, #22
 800589c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695a      	ldr	r2, [r3, #20]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d103      	bne.n	80058be <HAL_DMA_Abort+0x62>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0208 	bic.w	r2, r2, #8
 80058cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0201 	bic.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058de:	e013      	b.n	8005908 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058e0:	f7ff f962 	bl	8004ba8 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d90c      	bls.n	8005908 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2203      	movs	r2, #3
 80058f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e015      	b.n	8005934 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e4      	bne.n	80058e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591a:	223f      	movs	r2, #63	; 0x3f
 800591c:	409a      	lsls	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d004      	beq.n	800595a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2280      	movs	r2, #128	; 0x80
 8005954:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e00c      	b.n	8005974 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2205      	movs	r2, #5
 800595e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0201 	bic.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800598c:	4b8e      	ldr	r3, [pc, #568]	; (8005bc8 <HAL_DMA_IRQHandler+0x248>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a8e      	ldr	r2, [pc, #568]	; (8005bcc <HAL_DMA_IRQHandler+0x24c>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	0a9b      	lsrs	r3, r3, #10
 8005998:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059aa:	2208      	movs	r2, #8
 80059ac:	409a      	lsls	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4013      	ands	r3, r2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d01a      	beq.n	80059ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d013      	beq.n	80059ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0204 	bic.w	r2, r2, #4
 80059d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d8:	2208      	movs	r2, #8
 80059da:	409a      	lsls	r2, r3
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e4:	f043 0201 	orr.w	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f0:	2201      	movs	r2, #1
 80059f2:	409a      	lsls	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4013      	ands	r3, r2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d012      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0e:	2201      	movs	r2, #1
 8005a10:	409a      	lsls	r2, r3
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	f043 0202 	orr.w	r2, r3, #2
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a26:	2204      	movs	r2, #4
 8005a28:	409a      	lsls	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d012      	beq.n	8005a58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00b      	beq.n	8005a58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a44:	2204      	movs	r2, #4
 8005a46:	409a      	lsls	r2, r3
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a50:	f043 0204 	orr.w	r2, r3, #4
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5c:	2210      	movs	r2, #16
 8005a5e:	409a      	lsls	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4013      	ands	r3, r2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d043      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d03c      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a7a:	2210      	movs	r2, #16
 8005a7c:	409a      	lsls	r2, r3
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d018      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d108      	bne.n	8005ab0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d024      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	4798      	blx	r3
 8005aae:	e01f      	b.n	8005af0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01b      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	4798      	blx	r3
 8005ac0:	e016      	b.n	8005af0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d107      	bne.n	8005ae0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0208 	bic.w	r2, r2, #8
 8005ade:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af4:	2220      	movs	r2, #32
 8005af6:	409a      	lsls	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 808f 	beq.w	8005c20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8087 	beq.w	8005c20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b16:	2220      	movs	r2, #32
 8005b18:	409a      	lsls	r2, r3
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b05      	cmp	r3, #5
 8005b28:	d136      	bne.n	8005b98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0216 	bic.w	r2, r2, #22
 8005b38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <HAL_DMA_IRQHandler+0x1da>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0208 	bic.w	r2, r2, #8
 8005b68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6e:	223f      	movs	r2, #63	; 0x3f
 8005b70:	409a      	lsls	r2, r3
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d07e      	beq.n	8005c8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4798      	blx	r3
        }
        return;
 8005b96:	e079      	b.n	8005c8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01d      	beq.n	8005be2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10d      	bne.n	8005bd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d031      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	4798      	blx	r3
 8005bc4:	e02c      	b.n	8005c20 <HAL_DMA_IRQHandler+0x2a0>
 8005bc6:	bf00      	nop
 8005bc8:	20000004 	.word	0x20000004
 8005bcc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d023      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	4798      	blx	r3
 8005be0:	e01e      	b.n	8005c20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10f      	bne.n	8005c10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0210 	bic.w	r2, r2, #16
 8005bfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d032      	beq.n	8005c8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d022      	beq.n	8005c7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2205      	movs	r2, #5
 8005c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0201 	bic.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d307      	bcc.n	8005c68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1f2      	bne.n	8005c4c <HAL_DMA_IRQHandler+0x2cc>
 8005c66:	e000      	b.n	8005c6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	4798      	blx	r3
 8005c8a:	e000      	b.n	8005c8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c8c:	bf00      	nop
    }
  }
}
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b40      	cmp	r3, #64	; 0x40
 8005cc0:	d108      	bne.n	8005cd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005cd2:	e007      	b.n	8005ce4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	60da      	str	r2, [r3, #12]
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	3b10      	subs	r3, #16
 8005d00:	4a14      	ldr	r2, [pc, #80]	; (8005d54 <DMA_CalcBaseAndBitshift+0x64>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	091b      	lsrs	r3, r3, #4
 8005d08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d0a:	4a13      	ldr	r2, [pc, #76]	; (8005d58 <DMA_CalcBaseAndBitshift+0x68>)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4413      	add	r3, r2
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d909      	bls.n	8005d32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	1d1a      	adds	r2, r3, #4
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	659a      	str	r2, [r3, #88]	; 0x58
 8005d30:	e007      	b.n	8005d42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	aaaaaaab 	.word	0xaaaaaaab
 8005d58:	0801232c 	.word	0x0801232c

08005d5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d11f      	bne.n	8005db6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d856      	bhi.n	8005e2a <DMA_CheckFifoParam+0xce>
 8005d7c:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <DMA_CheckFifoParam+0x28>)
 8005d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d82:	bf00      	nop
 8005d84:	08005d95 	.word	0x08005d95
 8005d88:	08005da7 	.word	0x08005da7
 8005d8c:	08005d95 	.word	0x08005d95
 8005d90:	08005e2b 	.word	0x08005e2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d046      	beq.n	8005e2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005da4:	e043      	b.n	8005e2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005dae:	d140      	bne.n	8005e32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005db4:	e03d      	b.n	8005e32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dbe:	d121      	bne.n	8005e04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d837      	bhi.n	8005e36 <DMA_CheckFifoParam+0xda>
 8005dc6:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <DMA_CheckFifoParam+0x70>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005ddd 	.word	0x08005ddd
 8005dd0:	08005de3 	.word	0x08005de3
 8005dd4:	08005ddd 	.word	0x08005ddd
 8005dd8:	08005df5 	.word	0x08005df5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	73fb      	strb	r3, [r7, #15]
      break;
 8005de0:	e030      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d025      	beq.n	8005e3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005df2:	e022      	b.n	8005e3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005dfc:	d11f      	bne.n	8005e3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e02:	e01c      	b.n	8005e3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d903      	bls.n	8005e12 <DMA_CheckFifoParam+0xb6>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d003      	beq.n	8005e18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e10:	e018      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	73fb      	strb	r3, [r7, #15]
      break;
 8005e16:	e015      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00e      	beq.n	8005e42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	73fb      	strb	r3, [r7, #15]
      break;
 8005e28:	e00b      	b.n	8005e42 <DMA_CheckFifoParam+0xe6>
      break;
 8005e2a:	bf00      	nop
 8005e2c:	e00a      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      break;
 8005e2e:	bf00      	nop
 8005e30:	e008      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      break;
 8005e32:	bf00      	nop
 8005e34:	e006      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      break;
 8005e36:	bf00      	nop
 8005e38:	e004      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      break;
 8005e3a:	bf00      	nop
 8005e3c:	e002      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      break;   
 8005e3e:	bf00      	nop
 8005e40:	e000      	b.n	8005e44 <DMA_CheckFifoParam+0xe8>
      break;
 8005e42:	bf00      	nop
    }
  } 
  
  return status; 
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop

08005e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b089      	sub	sp, #36	; 0x24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
 8005e6e:	e16b      	b.n	8006148 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e70:	2201      	movs	r2, #1
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4013      	ands	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	f040 815a 	bne.w	8006142 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d005      	beq.n	8005ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d130      	bne.n	8005f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005edc:	2201      	movs	r2, #1
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee4:	43db      	mvns	r3, r3
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	091b      	lsrs	r3, r3, #4
 8005ef2:	f003 0201 	and.w	r2, r3, #1
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d017      	beq.n	8005f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	2203      	movs	r2, #3
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	43db      	mvns	r3, r3
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	fa02 f303 	lsl.w	r3, r2, r3
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d123      	bne.n	8005f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	08da      	lsrs	r2, r3, #3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3208      	adds	r2, #8
 8005f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	220f      	movs	r2, #15
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	4013      	ands	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	08da      	lsrs	r2, r3, #3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3208      	adds	r2, #8
 8005f92:	69b9      	ldr	r1, [r7, #24]
 8005f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	4013      	ands	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f003 0203 	and.w	r2, r3, #3
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80b4 	beq.w	8006142 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	4b60      	ldr	r3, [pc, #384]	; (8006160 <HAL_GPIO_Init+0x30c>)
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	4a5f      	ldr	r2, [pc, #380]	; (8006160 <HAL_GPIO_Init+0x30c>)
 8005fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8005fea:	4b5d      	ldr	r3, [pc, #372]	; (8006160 <HAL_GPIO_Init+0x30c>)
 8005fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ff6:	4a5b      	ldr	r2, [pc, #364]	; (8006164 <HAL_GPIO_Init+0x310>)
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	089b      	lsrs	r3, r3, #2
 8005ffc:	3302      	adds	r3, #2
 8005ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f003 0303 	and.w	r3, r3, #3
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	220f      	movs	r2, #15
 800600e:	fa02 f303 	lsl.w	r3, r2, r3
 8006012:	43db      	mvns	r3, r3
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	4013      	ands	r3, r2
 8006018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a52      	ldr	r2, [pc, #328]	; (8006168 <HAL_GPIO_Init+0x314>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d02b      	beq.n	800607a <HAL_GPIO_Init+0x226>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a51      	ldr	r2, [pc, #324]	; (800616c <HAL_GPIO_Init+0x318>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d025      	beq.n	8006076 <HAL_GPIO_Init+0x222>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a50      	ldr	r2, [pc, #320]	; (8006170 <HAL_GPIO_Init+0x31c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d01f      	beq.n	8006072 <HAL_GPIO_Init+0x21e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a4f      	ldr	r2, [pc, #316]	; (8006174 <HAL_GPIO_Init+0x320>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d019      	beq.n	800606e <HAL_GPIO_Init+0x21a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a4e      	ldr	r2, [pc, #312]	; (8006178 <HAL_GPIO_Init+0x324>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <HAL_GPIO_Init+0x216>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a4d      	ldr	r2, [pc, #308]	; (800617c <HAL_GPIO_Init+0x328>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00d      	beq.n	8006066 <HAL_GPIO_Init+0x212>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a4c      	ldr	r2, [pc, #304]	; (8006180 <HAL_GPIO_Init+0x32c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d007      	beq.n	8006062 <HAL_GPIO_Init+0x20e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a4b      	ldr	r2, [pc, #300]	; (8006184 <HAL_GPIO_Init+0x330>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d101      	bne.n	800605e <HAL_GPIO_Init+0x20a>
 800605a:	2307      	movs	r3, #7
 800605c:	e00e      	b.n	800607c <HAL_GPIO_Init+0x228>
 800605e:	2308      	movs	r3, #8
 8006060:	e00c      	b.n	800607c <HAL_GPIO_Init+0x228>
 8006062:	2306      	movs	r3, #6
 8006064:	e00a      	b.n	800607c <HAL_GPIO_Init+0x228>
 8006066:	2305      	movs	r3, #5
 8006068:	e008      	b.n	800607c <HAL_GPIO_Init+0x228>
 800606a:	2304      	movs	r3, #4
 800606c:	e006      	b.n	800607c <HAL_GPIO_Init+0x228>
 800606e:	2303      	movs	r3, #3
 8006070:	e004      	b.n	800607c <HAL_GPIO_Init+0x228>
 8006072:	2302      	movs	r3, #2
 8006074:	e002      	b.n	800607c <HAL_GPIO_Init+0x228>
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <HAL_GPIO_Init+0x228>
 800607a:	2300      	movs	r3, #0
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	f002 0203 	and.w	r2, r2, #3
 8006082:	0092      	lsls	r2, r2, #2
 8006084:	4093      	lsls	r3, r2
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	4313      	orrs	r3, r2
 800608a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800608c:	4935      	ldr	r1, [pc, #212]	; (8006164 <HAL_GPIO_Init+0x310>)
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	089b      	lsrs	r3, r3, #2
 8006092:	3302      	adds	r3, #2
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800609a:	4b3b      	ldr	r3, [pc, #236]	; (8006188 <HAL_GPIO_Init+0x334>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	43db      	mvns	r3, r3
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	4013      	ands	r3, r2
 80060a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060be:	4a32      	ldr	r2, [pc, #200]	; (8006188 <HAL_GPIO_Init+0x334>)
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060c4:	4b30      	ldr	r3, [pc, #192]	; (8006188 <HAL_GPIO_Init+0x334>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	43db      	mvns	r3, r3
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	4013      	ands	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060e8:	4a27      	ldr	r2, [pc, #156]	; (8006188 <HAL_GPIO_Init+0x334>)
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80060ee:	4b26      	ldr	r3, [pc, #152]	; (8006188 <HAL_GPIO_Init+0x334>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	43db      	mvns	r3, r3
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	4013      	ands	r3, r2
 80060fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006112:	4a1d      	ldr	r2, [pc, #116]	; (8006188 <HAL_GPIO_Init+0x334>)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006118:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <HAL_GPIO_Init+0x334>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	43db      	mvns	r3, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4013      	ands	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d003      	beq.n	800613c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	4313      	orrs	r3, r2
 800613a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800613c:	4a12      	ldr	r2, [pc, #72]	; (8006188 <HAL_GPIO_Init+0x334>)
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	3301      	adds	r3, #1
 8006146:	61fb      	str	r3, [r7, #28]
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	2b0f      	cmp	r3, #15
 800614c:	f67f ae90 	bls.w	8005e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006150:	bf00      	nop
 8006152:	bf00      	nop
 8006154:	3724      	adds	r7, #36	; 0x24
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40023800 	.word	0x40023800
 8006164:	40013800 	.word	0x40013800
 8006168:	40020000 	.word	0x40020000
 800616c:	40020400 	.word	0x40020400
 8006170:	40020800 	.word	0x40020800
 8006174:	40020c00 	.word	0x40020c00
 8006178:	40021000 	.word	0x40021000
 800617c:	40021400 	.word	0x40021400
 8006180:	40021800 	.word	0x40021800
 8006184:	40021c00 	.word	0x40021c00
 8006188:	40013c00 	.word	0x40013c00

0800618c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	887b      	ldrh	r3, [r7, #2]
 800619e:	4013      	ands	r3, r2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061a4:	2301      	movs	r3, #1
 80061a6:	73fb      	strb	r3, [r7, #15]
 80061a8:	e001      	b.n	80061ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	807b      	strh	r3, [r7, #2]
 80061c8:	4613      	mov	r3, r2
 80061ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061cc:	787b      	ldrb	r3, [r7, #1]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061d2:	887a      	ldrh	r2, [r7, #2]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061d8:	e003      	b.n	80061e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061da:	887b      	ldrh	r3, [r7, #2]
 80061dc:	041a      	lsls	r2, r3, #16
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	619a      	str	r2, [r3, #24]
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b085      	sub	sp, #20
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	460b      	mov	r3, r1
 80061f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006200:	887a      	ldrh	r2, [r7, #2]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4013      	ands	r3, r2
 8006206:	041a      	lsls	r2, r3, #16
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	43d9      	mvns	r1, r3
 800620c:	887b      	ldrh	r3, [r7, #2]
 800620e:	400b      	ands	r3, r1
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	619a      	str	r2, [r3, #24]
}
 8006216:	bf00      	nop
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
	...

08006224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e12b      	b.n	800648e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fd fd08 	bl	8003c60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2224      	movs	r2, #36	; 0x24
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0201 	bic.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006276:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006286:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006288:	f001 f89a 	bl	80073c0 <HAL_RCC_GetPCLK1Freq>
 800628c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	4a81      	ldr	r2, [pc, #516]	; (8006498 <HAL_I2C_Init+0x274>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d807      	bhi.n	80062a8 <HAL_I2C_Init+0x84>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4a80      	ldr	r2, [pc, #512]	; (800649c <HAL_I2C_Init+0x278>)
 800629c:	4293      	cmp	r3, r2
 800629e:	bf94      	ite	ls
 80062a0:	2301      	movls	r3, #1
 80062a2:	2300      	movhi	r3, #0
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	e006      	b.n	80062b6 <HAL_I2C_Init+0x92>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4a7d      	ldr	r2, [pc, #500]	; (80064a0 <HAL_I2C_Init+0x27c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	bf94      	ite	ls
 80062b0:	2301      	movls	r3, #1
 80062b2:	2300      	movhi	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e0e7      	b.n	800648e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4a78      	ldr	r2, [pc, #480]	; (80064a4 <HAL_I2C_Init+0x280>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	0c9b      	lsrs	r3, r3, #18
 80062c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	4a6a      	ldr	r2, [pc, #424]	; (8006498 <HAL_I2C_Init+0x274>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d802      	bhi.n	80062f8 <HAL_I2C_Init+0xd4>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	3301      	adds	r3, #1
 80062f6:	e009      	b.n	800630c <HAL_I2C_Init+0xe8>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80062fe:	fb02 f303 	mul.w	r3, r2, r3
 8006302:	4a69      	ldr	r2, [pc, #420]	; (80064a8 <HAL_I2C_Init+0x284>)
 8006304:	fba2 2303 	umull	r2, r3, r2, r3
 8006308:	099b      	lsrs	r3, r3, #6
 800630a:	3301      	adds	r3, #1
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6812      	ldr	r2, [r2, #0]
 8006310:	430b      	orrs	r3, r1
 8006312:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800631e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	495c      	ldr	r1, [pc, #368]	; (8006498 <HAL_I2C_Init+0x274>)
 8006328:	428b      	cmp	r3, r1
 800632a:	d819      	bhi.n	8006360 <HAL_I2C_Init+0x13c>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1e59      	subs	r1, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	fbb1 f3f3 	udiv	r3, r1, r3
 800633a:	1c59      	adds	r1, r3, #1
 800633c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006340:	400b      	ands	r3, r1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <HAL_I2C_Init+0x138>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	1e59      	subs	r1, r3, #1
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	fbb1 f3f3 	udiv	r3, r1, r3
 8006354:	3301      	adds	r3, #1
 8006356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800635a:	e051      	b.n	8006400 <HAL_I2C_Init+0x1dc>
 800635c:	2304      	movs	r3, #4
 800635e:	e04f      	b.n	8006400 <HAL_I2C_Init+0x1dc>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d111      	bne.n	800638c <HAL_I2C_Init+0x168>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	1e58      	subs	r0, r3, #1
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6859      	ldr	r1, [r3, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	440b      	add	r3, r1
 8006376:	fbb0 f3f3 	udiv	r3, r0, r3
 800637a:	3301      	adds	r3, #1
 800637c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006380:	2b00      	cmp	r3, #0
 8006382:	bf0c      	ite	eq
 8006384:	2301      	moveq	r3, #1
 8006386:	2300      	movne	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	e012      	b.n	80063b2 <HAL_I2C_Init+0x18e>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	1e58      	subs	r0, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6859      	ldr	r1, [r3, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	440b      	add	r3, r1
 800639a:	0099      	lsls	r1, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	fbb0 f3f3 	udiv	r3, r0, r3
 80063a2:	3301      	adds	r3, #1
 80063a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	bf0c      	ite	eq
 80063ac:	2301      	moveq	r3, #1
 80063ae:	2300      	movne	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <HAL_I2C_Init+0x196>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e022      	b.n	8006400 <HAL_I2C_Init+0x1dc>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10e      	bne.n	80063e0 <HAL_I2C_Init+0x1bc>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	1e58      	subs	r0, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6859      	ldr	r1, [r3, #4]
 80063ca:	460b      	mov	r3, r1
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	440b      	add	r3, r1
 80063d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80063d4:	3301      	adds	r3, #1
 80063d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063de:	e00f      	b.n	8006400 <HAL_I2C_Init+0x1dc>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	1e58      	subs	r0, r3, #1
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6859      	ldr	r1, [r3, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	0099      	lsls	r1, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80063f6:	3301      	adds	r3, #1
 80063f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006400:	6879      	ldr	r1, [r7, #4]
 8006402:	6809      	ldr	r1, [r1, #0]
 8006404:	4313      	orrs	r3, r2
 8006406:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69da      	ldr	r2, [r3, #28]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800642e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6911      	ldr	r1, [r2, #16]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	68d2      	ldr	r2, [r2, #12]
 800643a:	4311      	orrs	r1, r2
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	430b      	orrs	r3, r1
 8006442:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695a      	ldr	r2, [r3, #20]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2220      	movs	r2, #32
 800647a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	000186a0 	.word	0x000186a0
 800649c:	001e847f 	.word	0x001e847f
 80064a0:	003d08ff 	.word	0x003d08ff
 80064a4:	431bde83 	.word	0x431bde83
 80064a8:	10624dd3 	.word	0x10624dd3

080064ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	607a      	str	r2, [r7, #4]
 80064b6:	461a      	mov	r2, r3
 80064b8:	460b      	mov	r3, r1
 80064ba:	817b      	strh	r3, [r7, #10]
 80064bc:	4613      	mov	r3, r2
 80064be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064c0:	f7fe fb72 	bl	8004ba8 <HAL_GetTick>
 80064c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	f040 80e0 	bne.w	8006694 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	2319      	movs	r3, #25
 80064da:	2201      	movs	r2, #1
 80064dc:	4970      	ldr	r1, [pc, #448]	; (80066a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 f964 	bl	80067ac <I2C_WaitOnFlagUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80064ea:	2302      	movs	r3, #2
 80064ec:	e0d3      	b.n	8006696 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_I2C_Master_Transmit+0x50>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e0cc      	b.n	8006696 <HAL_I2C_Master_Transmit+0x1ea>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b01      	cmp	r3, #1
 8006510:	d007      	beq.n	8006522 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0201 	orr.w	r2, r2, #1
 8006520:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006530:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2221      	movs	r2, #33	; 0x21
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2210      	movs	r2, #16
 800653e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	893a      	ldrh	r2, [r7, #8]
 8006552:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4a50      	ldr	r2, [pc, #320]	; (80066a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006562:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006564:	8979      	ldrh	r1, [r7, #10]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	6a3a      	ldr	r2, [r7, #32]
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 f89c 	bl	80066a8 <I2C_MasterRequestWrite>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e08d      	b.n	8006696 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800657a:	2300      	movs	r3, #0
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006590:	e066      	b.n	8006660 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	6a39      	ldr	r1, [r7, #32]
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 f9de 	bl	8006958 <I2C_WaitOnTXEFlagUntilTimeout>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00d      	beq.n	80065be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d107      	bne.n	80065ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e06b      	b.n	8006696 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	781a      	ldrb	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d11b      	bne.n	8006634 <HAL_I2C_Master_Transmit+0x188>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006600:	2b00      	cmp	r3, #0
 8006602:	d017      	beq.n	8006634 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	781a      	ldrb	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661e:	b29b      	uxth	r3, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	6a39      	ldr	r1, [r7, #32]
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 f9ce 	bl	80069da <I2C_WaitOnBTFFlagUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00d      	beq.n	8006660 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	2b04      	cmp	r3, #4
 800664a:	d107      	bne.n	800665c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800665a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e01a      	b.n	8006696 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006664:	2b00      	cmp	r3, #0
 8006666:	d194      	bne.n	8006592 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2220      	movs	r2, #32
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	e000      	b.n	8006696 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006694:	2302      	movs	r3, #2
  }
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	00100002 	.word	0x00100002
 80066a4:	ffff0000 	.word	0xffff0000

080066a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	607a      	str	r2, [r7, #4]
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	460b      	mov	r3, r1
 80066b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d006      	beq.n	80066d2 <I2C_MasterRequestWrite+0x2a>
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d003      	beq.n	80066d2 <I2C_MasterRequestWrite+0x2a>
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066d0:	d108      	bne.n	80066e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	e00b      	b.n	80066fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e8:	2b12      	cmp	r3, #18
 80066ea:	d107      	bne.n	80066fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 f84f 	bl	80067ac <I2C_WaitOnFlagUntilTimeout>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00d      	beq.n	8006730 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006722:	d103      	bne.n	800672c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800672a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e035      	b.n	800679c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006738:	d108      	bne.n	800674c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800673a:	897b      	ldrh	r3, [r7, #10]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	461a      	mov	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006748:	611a      	str	r2, [r3, #16]
 800674a:	e01b      	b.n	8006784 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800674c:	897b      	ldrh	r3, [r7, #10]
 800674e:	11db      	asrs	r3, r3, #7
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 0306 	and.w	r3, r3, #6
 8006756:	b2db      	uxtb	r3, r3
 8006758:	f063 030f 	orn	r3, r3, #15
 800675c:	b2da      	uxtb	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	490e      	ldr	r1, [pc, #56]	; (80067a4 <I2C_MasterRequestWrite+0xfc>)
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 f875 	bl	800685a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e010      	b.n	800679c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800677a:	897b      	ldrh	r3, [r7, #10]
 800677c:	b2da      	uxtb	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4907      	ldr	r1, [pc, #28]	; (80067a8 <I2C_MasterRequestWrite+0x100>)
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 f865 	bl	800685a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	00010008 	.word	0x00010008
 80067a8:	00010002 	.word	0x00010002

080067ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	4613      	mov	r3, r2
 80067ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067bc:	e025      	b.n	800680a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c4:	d021      	beq.n	800680a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c6:	f7fe f9ef 	bl	8004ba8 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d302      	bcc.n	80067dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d116      	bne.n	800680a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2220      	movs	r2, #32
 80067e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	f043 0220 	orr.w	r2, r3, #32
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e023      	b.n	8006852 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	0c1b      	lsrs	r3, r3, #16
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	d10d      	bne.n	8006830 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	43da      	mvns	r2, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4013      	ands	r3, r2
 8006820:	b29b      	uxth	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	bf0c      	ite	eq
 8006826:	2301      	moveq	r3, #1
 8006828:	2300      	movne	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	e00c      	b.n	800684a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	43da      	mvns	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4013      	ands	r3, r2
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	bf0c      	ite	eq
 8006842:	2301      	moveq	r3, #1
 8006844:	2300      	movne	r3, #0
 8006846:	b2db      	uxtb	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	429a      	cmp	r2, r3
 800684e:	d0b6      	beq.n	80067be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	607a      	str	r2, [r7, #4]
 8006866:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006868:	e051      	b.n	800690e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006878:	d123      	bne.n	80068c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006888:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006892:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2220      	movs	r2, #32
 800689e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	f043 0204 	orr.w	r2, r3, #4
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e046      	b.n	8006950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c8:	d021      	beq.n	800690e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ca:	f7fe f96d 	bl	8004ba8 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d302      	bcc.n	80068e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d116      	bne.n	800690e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	f043 0220 	orr.w	r2, r3, #32
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e020      	b.n	8006950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	0c1b      	lsrs	r3, r3, #16
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	d10c      	bne.n	8006932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	43da      	mvns	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4013      	ands	r3, r2
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	bf14      	ite	ne
 800692a:	2301      	movne	r3, #1
 800692c:	2300      	moveq	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	e00b      	b.n	800694a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	43da      	mvns	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4013      	ands	r3, r2
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	bf14      	ite	ne
 8006944:	2301      	movne	r3, #1
 8006946:	2300      	moveq	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d18d      	bne.n	800686a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006964:	e02d      	b.n	80069c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 f878 	bl	8006a5c <I2C_IsAcknowledgeFailed>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e02d      	b.n	80069d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697c:	d021      	beq.n	80069c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800697e:	f7fe f913 	bl	8004ba8 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	429a      	cmp	r2, r3
 800698c:	d302      	bcc.n	8006994 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d116      	bne.n	80069c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	f043 0220 	orr.w	r2, r3, #32
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e007      	b.n	80069d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069cc:	2b80      	cmp	r3, #128	; 0x80
 80069ce:	d1ca      	bne.n	8006966 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069e6:	e02d      	b.n	8006a44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 f837 	bl	8006a5c <I2C_IsAcknowledgeFailed>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e02d      	b.n	8006a54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fe:	d021      	beq.n	8006a44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a00:	f7fe f8d2 	bl	8004ba8 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d302      	bcc.n	8006a16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d116      	bne.n	8006a44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e007      	b.n	8006a54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0304 	and.w	r3, r3, #4
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d1ca      	bne.n	80069e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a72:	d11b      	bne.n	8006aac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	f043 0204 	orr.w	r2, r3, #4
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e000      	b.n	8006aae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b084      	sub	sp, #16
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e034      	b.n	8006b36 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006ad4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f245 5255 	movw	r2, #21845	; 0x5555
 8006ade:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6852      	ldr	r2, [r2, #4]
 8006ae8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6892      	ldr	r2, [r2, #8]
 8006af2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006af4:	f7fe f858 	bl	8004ba8 <HAL_GetTick>
 8006af8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006afa:	e00f      	b.n	8006b1c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006afc:	f7fe f854 	bl	8004ba8 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b31      	cmp	r3, #49	; 0x31
 8006b08:	d908      	bls.n	8006b1c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f003 0303 	and.w	r3, r3, #3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e00c      	b.n	8006b36 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1e8      	bne.n	8006afc <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006b32:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006b4e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
	...

08006b60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e267      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d075      	beq.n	8006c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b7e:	4b88      	ldr	r3, [pc, #544]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 030c 	and.w	r3, r3, #12
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d00c      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b8a:	4b85      	ldr	r3, [pc, #532]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b92:	2b08      	cmp	r3, #8
 8006b94:	d112      	bne.n	8006bbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b96:	4b82      	ldr	r3, [pc, #520]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ba2:	d10b      	bne.n	8006bbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba4:	4b7e      	ldr	r3, [pc, #504]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d05b      	beq.n	8006c68 <HAL_RCC_OscConfig+0x108>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d157      	bne.n	8006c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e242      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc4:	d106      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x74>
 8006bc6:	4b76      	ldr	r3, [pc, #472]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a75      	ldr	r2, [pc, #468]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	e01d      	b.n	8006c10 <HAL_RCC_OscConfig+0xb0>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bdc:	d10c      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x98>
 8006bde:	4b70      	ldr	r3, [pc, #448]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a6f      	ldr	r2, [pc, #444]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	4b6d      	ldr	r3, [pc, #436]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a6c      	ldr	r2, [pc, #432]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	e00b      	b.n	8006c10 <HAL_RCC_OscConfig+0xb0>
 8006bf8:	4b69      	ldr	r3, [pc, #420]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a68      	ldr	r2, [pc, #416]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	4b66      	ldr	r3, [pc, #408]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a65      	ldr	r2, [pc, #404]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d013      	beq.n	8006c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c18:	f7fd ffc6 	bl	8004ba8 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c20:	f7fd ffc2 	bl	8004ba8 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b64      	cmp	r3, #100	; 0x64
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e207      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c32:	4b5b      	ldr	r3, [pc, #364]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0f0      	beq.n	8006c20 <HAL_RCC_OscConfig+0xc0>
 8006c3e:	e014      	b.n	8006c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c40:	f7fd ffb2 	bl	8004ba8 <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c48:	f7fd ffae 	bl	8004ba8 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b64      	cmp	r3, #100	; 0x64
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e1f3      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c5a:	4b51      	ldr	r3, [pc, #324]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f0      	bne.n	8006c48 <HAL_RCC_OscConfig+0xe8>
 8006c66:	e000      	b.n	8006c6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d063      	beq.n	8006d3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c76:	4b4a      	ldr	r3, [pc, #296]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 030c 	and.w	r3, r3, #12
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c82:	4b47      	ldr	r3, [pc, #284]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	d11c      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c8e:	4b44      	ldr	r3, [pc, #272]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d116      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c9a:	4b41      	ldr	r3, [pc, #260]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x152>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d001      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e1c7      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb2:	4b3b      	ldr	r3, [pc, #236]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	4937      	ldr	r1, [pc, #220]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cc6:	e03a      	b.n	8006d3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d020      	beq.n	8006d12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cd0:	4b34      	ldr	r3, [pc, #208]	; (8006da4 <HAL_RCC_OscConfig+0x244>)
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd6:	f7fd ff67 	bl	8004ba8 <HAL_GetTick>
 8006cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cdc:	e008      	b.n	8006cf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cde:	f7fd ff63 	bl	8004ba8 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d901      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e1a8      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cf0:	4b2b      	ldr	r3, [pc, #172]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0f0      	beq.n	8006cde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cfc:	4b28      	ldr	r3, [pc, #160]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	00db      	lsls	r3, r3, #3
 8006d0a:	4925      	ldr	r1, [pc, #148]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	600b      	str	r3, [r1, #0]
 8006d10:	e015      	b.n	8006d3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d12:	4b24      	ldr	r3, [pc, #144]	; (8006da4 <HAL_RCC_OscConfig+0x244>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d18:	f7fd ff46 	bl	8004ba8 <HAL_GetTick>
 8006d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d1e:	e008      	b.n	8006d32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d20:	f7fd ff42 	bl	8004ba8 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e187      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d32:	4b1b      	ldr	r3, [pc, #108]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1f0      	bne.n	8006d20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0308 	and.w	r3, r3, #8
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d036      	beq.n	8006db8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d016      	beq.n	8006d80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d52:	4b15      	ldr	r3, [pc, #84]	; (8006da8 <HAL_RCC_OscConfig+0x248>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d58:	f7fd ff26 	bl	8004ba8 <HAL_GetTick>
 8006d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d60:	f7fd ff22 	bl	8004ba8 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e167      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d72:	4b0b      	ldr	r3, [pc, #44]	; (8006da0 <HAL_RCC_OscConfig+0x240>)
 8006d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0f0      	beq.n	8006d60 <HAL_RCC_OscConfig+0x200>
 8006d7e:	e01b      	b.n	8006db8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d80:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <HAL_RCC_OscConfig+0x248>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d86:	f7fd ff0f 	bl	8004ba8 <HAL_GetTick>
 8006d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d8c:	e00e      	b.n	8006dac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d8e:	f7fd ff0b 	bl	8004ba8 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d907      	bls.n	8006dac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e150      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
 8006da0:	40023800 	.word	0x40023800
 8006da4:	42470000 	.word	0x42470000
 8006da8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dac:	4b88      	ldr	r3, [pc, #544]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1ea      	bne.n	8006d8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 8097 	beq.w	8006ef4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dca:	4b81      	ldr	r3, [pc, #516]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10f      	bne.n	8006df6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60bb      	str	r3, [r7, #8]
 8006dda:	4b7d      	ldr	r3, [pc, #500]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	4a7c      	ldr	r2, [pc, #496]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006de4:	6413      	str	r3, [r2, #64]	; 0x40
 8006de6:	4b7a      	ldr	r3, [pc, #488]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dee:	60bb      	str	r3, [r7, #8]
 8006df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006df2:	2301      	movs	r3, #1
 8006df4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006df6:	4b77      	ldr	r3, [pc, #476]	; (8006fd4 <HAL_RCC_OscConfig+0x474>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d118      	bne.n	8006e34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e02:	4b74      	ldr	r3, [pc, #464]	; (8006fd4 <HAL_RCC_OscConfig+0x474>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a73      	ldr	r2, [pc, #460]	; (8006fd4 <HAL_RCC_OscConfig+0x474>)
 8006e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e0e:	f7fd fecb 	bl	8004ba8 <HAL_GetTick>
 8006e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e14:	e008      	b.n	8006e28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e16:	f7fd fec7 	bl	8004ba8 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d901      	bls.n	8006e28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e10c      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e28:	4b6a      	ldr	r3, [pc, #424]	; (8006fd4 <HAL_RCC_OscConfig+0x474>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0f0      	beq.n	8006e16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d106      	bne.n	8006e4a <HAL_RCC_OscConfig+0x2ea>
 8006e3c:	4b64      	ldr	r3, [pc, #400]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e40:	4a63      	ldr	r2, [pc, #396]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006e42:	f043 0301 	orr.w	r3, r3, #1
 8006e46:	6713      	str	r3, [r2, #112]	; 0x70
 8006e48:	e01c      	b.n	8006e84 <HAL_RCC_OscConfig+0x324>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	2b05      	cmp	r3, #5
 8006e50:	d10c      	bne.n	8006e6c <HAL_RCC_OscConfig+0x30c>
 8006e52:	4b5f      	ldr	r3, [pc, #380]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e56:	4a5e      	ldr	r2, [pc, #376]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006e58:	f043 0304 	orr.w	r3, r3, #4
 8006e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e5e:	4b5c      	ldr	r3, [pc, #368]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e62:	4a5b      	ldr	r2, [pc, #364]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006e64:	f043 0301 	orr.w	r3, r3, #1
 8006e68:	6713      	str	r3, [r2, #112]	; 0x70
 8006e6a:	e00b      	b.n	8006e84 <HAL_RCC_OscConfig+0x324>
 8006e6c:	4b58      	ldr	r3, [pc, #352]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e70:	4a57      	ldr	r2, [pc, #348]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006e72:	f023 0301 	bic.w	r3, r3, #1
 8006e76:	6713      	str	r3, [r2, #112]	; 0x70
 8006e78:	4b55      	ldr	r3, [pc, #340]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7c:	4a54      	ldr	r2, [pc, #336]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006e7e:	f023 0304 	bic.w	r3, r3, #4
 8006e82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d015      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e8c:	f7fd fe8c 	bl	8004ba8 <HAL_GetTick>
 8006e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e92:	e00a      	b.n	8006eaa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e94:	f7fd fe88 	bl	8004ba8 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e0cb      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eaa:	4b49      	ldr	r3, [pc, #292]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0ee      	beq.n	8006e94 <HAL_RCC_OscConfig+0x334>
 8006eb6:	e014      	b.n	8006ee2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eb8:	f7fd fe76 	bl	8004ba8 <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ebe:	e00a      	b.n	8006ed6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ec0:	f7fd fe72 	bl	8004ba8 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e0b5      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ed6:	4b3e      	ldr	r3, [pc, #248]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1ee      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d105      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ee8:	4b39      	ldr	r3, [pc, #228]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	4a38      	ldr	r2, [pc, #224]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ef2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 80a1 	beq.w	8007040 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006efe:	4b34      	ldr	r3, [pc, #208]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f003 030c 	and.w	r3, r3, #12
 8006f06:	2b08      	cmp	r3, #8
 8006f08:	d05c      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d141      	bne.n	8006f96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f12:	4b31      	ldr	r3, [pc, #196]	; (8006fd8 <HAL_RCC_OscConfig+0x478>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f18:	f7fd fe46 	bl	8004ba8 <HAL_GetTick>
 8006f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f1e:	e008      	b.n	8006f32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f20:	f7fd fe42 	bl	8004ba8 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e087      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f32:	4b27      	ldr	r3, [pc, #156]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1f0      	bne.n	8006f20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	69da      	ldr	r2, [r3, #28]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	019b      	lsls	r3, r3, #6
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f54:	085b      	lsrs	r3, r3, #1
 8006f56:	3b01      	subs	r3, #1
 8006f58:	041b      	lsls	r3, r3, #16
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f60:	061b      	lsls	r3, r3, #24
 8006f62:	491b      	ldr	r1, [pc, #108]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f68:	4b1b      	ldr	r3, [pc, #108]	; (8006fd8 <HAL_RCC_OscConfig+0x478>)
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f6e:	f7fd fe1b 	bl	8004ba8 <HAL_GetTick>
 8006f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f74:	e008      	b.n	8006f88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f76:	f7fd fe17 	bl	8004ba8 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e05c      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f88:	4b11      	ldr	r3, [pc, #68]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0f0      	beq.n	8006f76 <HAL_RCC_OscConfig+0x416>
 8006f94:	e054      	b.n	8007040 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f96:	4b10      	ldr	r3, [pc, #64]	; (8006fd8 <HAL_RCC_OscConfig+0x478>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f9c:	f7fd fe04 	bl	8004ba8 <HAL_GetTick>
 8006fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fa4:	f7fd fe00 	bl	8004ba8 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e045      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fb6:	4b06      	ldr	r3, [pc, #24]	; (8006fd0 <HAL_RCC_OscConfig+0x470>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1f0      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x444>
 8006fc2:	e03d      	b.n	8007040 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d107      	bne.n	8006fdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e038      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
 8006fd0:	40023800 	.word	0x40023800
 8006fd4:	40007000 	.word	0x40007000
 8006fd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fdc:	4b1b      	ldr	r3, [pc, #108]	; (800704c <HAL_RCC_OscConfig+0x4ec>)
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d028      	beq.n	800703c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d121      	bne.n	800703c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007002:	429a      	cmp	r2, r3
 8007004:	d11a      	bne.n	800703c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800700c:	4013      	ands	r3, r2
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007012:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007014:	4293      	cmp	r3, r2
 8007016:	d111      	bne.n	800703c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	085b      	lsrs	r3, r3, #1
 8007024:	3b01      	subs	r3, #1
 8007026:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007028:	429a      	cmp	r2, r3
 800702a:	d107      	bne.n	800703c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007036:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007038:	429a      	cmp	r2, r3
 800703a:	d001      	beq.n	8007040 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e000      	b.n	8007042 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	40023800 	.word	0x40023800

08007050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e0cc      	b.n	80071fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007064:	4b68      	ldr	r3, [pc, #416]	; (8007208 <HAL_RCC_ClockConfig+0x1b8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d90c      	bls.n	800708c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007072:	4b65      	ldr	r3, [pc, #404]	; (8007208 <HAL_RCC_ClockConfig+0x1b8>)
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800707a:	4b63      	ldr	r3, [pc, #396]	; (8007208 <HAL_RCC_ClockConfig+0x1b8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d001      	beq.n	800708c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e0b8      	b.n	80071fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d020      	beq.n	80070da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d005      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070a4:	4b59      	ldr	r3, [pc, #356]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	4a58      	ldr	r2, [pc, #352]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 80070aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0308 	and.w	r3, r3, #8
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070bc:	4b53      	ldr	r3, [pc, #332]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	4a52      	ldr	r2, [pc, #328]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 80070c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070c8:	4b50      	ldr	r3, [pc, #320]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	494d      	ldr	r1, [pc, #308]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d044      	beq.n	8007170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d107      	bne.n	80070fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ee:	4b47      	ldr	r3, [pc, #284]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d119      	bne.n	800712e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e07f      	b.n	80071fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	2b02      	cmp	r3, #2
 8007104:	d003      	beq.n	800710e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800710a:	2b03      	cmp	r3, #3
 800710c:	d107      	bne.n	800711e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800710e:	4b3f      	ldr	r3, [pc, #252]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d109      	bne.n	800712e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e06f      	b.n	80071fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800711e:	4b3b      	ldr	r3, [pc, #236]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e067      	b.n	80071fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800712e:	4b37      	ldr	r3, [pc, #220]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f023 0203 	bic.w	r2, r3, #3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	4934      	ldr	r1, [pc, #208]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 800713c:	4313      	orrs	r3, r2
 800713e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007140:	f7fd fd32 	bl	8004ba8 <HAL_GetTick>
 8007144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007146:	e00a      	b.n	800715e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007148:	f7fd fd2e 	bl	8004ba8 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	f241 3288 	movw	r2, #5000	; 0x1388
 8007156:	4293      	cmp	r3, r2
 8007158:	d901      	bls.n	800715e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e04f      	b.n	80071fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800715e:	4b2b      	ldr	r3, [pc, #172]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 020c 	and.w	r2, r3, #12
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	429a      	cmp	r2, r3
 800716e:	d1eb      	bne.n	8007148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007170:	4b25      	ldr	r3, [pc, #148]	; (8007208 <HAL_RCC_ClockConfig+0x1b8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0307 	and.w	r3, r3, #7
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d20c      	bcs.n	8007198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800717e:	4b22      	ldr	r3, [pc, #136]	; (8007208 <HAL_RCC_ClockConfig+0x1b8>)
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007186:	4b20      	ldr	r3, [pc, #128]	; (8007208 <HAL_RCC_ClockConfig+0x1b8>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0307 	and.w	r3, r3, #7
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d001      	beq.n	8007198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e032      	b.n	80071fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0304 	and.w	r3, r3, #4
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d008      	beq.n	80071b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071a4:	4b19      	ldr	r3, [pc, #100]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	4916      	ldr	r1, [pc, #88]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0308 	and.w	r3, r3, #8
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071c2:	4b12      	ldr	r3, [pc, #72]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	00db      	lsls	r3, r3, #3
 80071d0:	490e      	ldr	r1, [pc, #56]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071d6:	f000 f821 	bl	800721c <HAL_RCC_GetSysClockFreq>
 80071da:	4602      	mov	r2, r0
 80071dc:	4b0b      	ldr	r3, [pc, #44]	; (800720c <HAL_RCC_ClockConfig+0x1bc>)
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	091b      	lsrs	r3, r3, #4
 80071e2:	f003 030f 	and.w	r3, r3, #15
 80071e6:	490a      	ldr	r1, [pc, #40]	; (8007210 <HAL_RCC_ClockConfig+0x1c0>)
 80071e8:	5ccb      	ldrb	r3, [r1, r3]
 80071ea:	fa22 f303 	lsr.w	r3, r2, r3
 80071ee:	4a09      	ldr	r2, [pc, #36]	; (8007214 <HAL_RCC_ClockConfig+0x1c4>)
 80071f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071f2:	4b09      	ldr	r3, [pc, #36]	; (8007218 <HAL_RCC_ClockConfig+0x1c8>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fd fc92 	bl	8004b20 <HAL_InitTick>

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	40023c00 	.word	0x40023c00
 800720c:	40023800 	.word	0x40023800
 8007210:	08012314 	.word	0x08012314
 8007214:	20000004 	.word	0x20000004
 8007218:	20000008 	.word	0x20000008

0800721c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800721c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007220:	b090      	sub	sp, #64	; 0x40
 8007222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	637b      	str	r3, [r7, #52]	; 0x34
 8007228:	2300      	movs	r3, #0
 800722a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800722c:	2300      	movs	r3, #0
 800722e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007234:	4b59      	ldr	r3, [pc, #356]	; (800739c <HAL_RCC_GetSysClockFreq+0x180>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f003 030c 	and.w	r3, r3, #12
 800723c:	2b08      	cmp	r3, #8
 800723e:	d00d      	beq.n	800725c <HAL_RCC_GetSysClockFreq+0x40>
 8007240:	2b08      	cmp	r3, #8
 8007242:	f200 80a1 	bhi.w	8007388 <HAL_RCC_GetSysClockFreq+0x16c>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <HAL_RCC_GetSysClockFreq+0x34>
 800724a:	2b04      	cmp	r3, #4
 800724c:	d003      	beq.n	8007256 <HAL_RCC_GetSysClockFreq+0x3a>
 800724e:	e09b      	b.n	8007388 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007250:	4b53      	ldr	r3, [pc, #332]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007252:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007254:	e09b      	b.n	800738e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007256:	4b53      	ldr	r3, [pc, #332]	; (80073a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007258:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800725a:	e098      	b.n	800738e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800725c:	4b4f      	ldr	r3, [pc, #316]	; (800739c <HAL_RCC_GetSysClockFreq+0x180>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007266:	4b4d      	ldr	r3, [pc, #308]	; (800739c <HAL_RCC_GetSysClockFreq+0x180>)
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d028      	beq.n	80072c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007272:	4b4a      	ldr	r3, [pc, #296]	; (800739c <HAL_RCC_GetSysClockFreq+0x180>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	099b      	lsrs	r3, r3, #6
 8007278:	2200      	movs	r2, #0
 800727a:	623b      	str	r3, [r7, #32]
 800727c:	627a      	str	r2, [r7, #36]	; 0x24
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007284:	2100      	movs	r1, #0
 8007286:	4b47      	ldr	r3, [pc, #284]	; (80073a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007288:	fb03 f201 	mul.w	r2, r3, r1
 800728c:	2300      	movs	r3, #0
 800728e:	fb00 f303 	mul.w	r3, r0, r3
 8007292:	4413      	add	r3, r2
 8007294:	4a43      	ldr	r2, [pc, #268]	; (80073a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007296:	fba0 1202 	umull	r1, r2, r0, r2
 800729a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800729c:	460a      	mov	r2, r1
 800729e:	62ba      	str	r2, [r7, #40]	; 0x28
 80072a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072a2:	4413      	add	r3, r2
 80072a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a8:	2200      	movs	r2, #0
 80072aa:	61bb      	str	r3, [r7, #24]
 80072ac:	61fa      	str	r2, [r7, #28]
 80072ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80072b6:	f7f9 fcf7 	bl	8000ca8 <__aeabi_uldivmod>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4613      	mov	r3, r2
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c2:	e053      	b.n	800736c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072c4:	4b35      	ldr	r3, [pc, #212]	; (800739c <HAL_RCC_GetSysClockFreq+0x180>)
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	099b      	lsrs	r3, r3, #6
 80072ca:	2200      	movs	r2, #0
 80072cc:	613b      	str	r3, [r7, #16]
 80072ce:	617a      	str	r2, [r7, #20]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80072d6:	f04f 0b00 	mov.w	fp, #0
 80072da:	4652      	mov	r2, sl
 80072dc:	465b      	mov	r3, fp
 80072de:	f04f 0000 	mov.w	r0, #0
 80072e2:	f04f 0100 	mov.w	r1, #0
 80072e6:	0159      	lsls	r1, r3, #5
 80072e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072ec:	0150      	lsls	r0, r2, #5
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	ebb2 080a 	subs.w	r8, r2, sl
 80072f6:	eb63 090b 	sbc.w	r9, r3, fp
 80072fa:	f04f 0200 	mov.w	r2, #0
 80072fe:	f04f 0300 	mov.w	r3, #0
 8007302:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007306:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800730a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800730e:	ebb2 0408 	subs.w	r4, r2, r8
 8007312:	eb63 0509 	sbc.w	r5, r3, r9
 8007316:	f04f 0200 	mov.w	r2, #0
 800731a:	f04f 0300 	mov.w	r3, #0
 800731e:	00eb      	lsls	r3, r5, #3
 8007320:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007324:	00e2      	lsls	r2, r4, #3
 8007326:	4614      	mov	r4, r2
 8007328:	461d      	mov	r5, r3
 800732a:	eb14 030a 	adds.w	r3, r4, sl
 800732e:	603b      	str	r3, [r7, #0]
 8007330:	eb45 030b 	adc.w	r3, r5, fp
 8007334:	607b      	str	r3, [r7, #4]
 8007336:	f04f 0200 	mov.w	r2, #0
 800733a:	f04f 0300 	mov.w	r3, #0
 800733e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007342:	4629      	mov	r1, r5
 8007344:	028b      	lsls	r3, r1, #10
 8007346:	4621      	mov	r1, r4
 8007348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800734c:	4621      	mov	r1, r4
 800734e:	028a      	lsls	r2, r1, #10
 8007350:	4610      	mov	r0, r2
 8007352:	4619      	mov	r1, r3
 8007354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007356:	2200      	movs	r2, #0
 8007358:	60bb      	str	r3, [r7, #8]
 800735a:	60fa      	str	r2, [r7, #12]
 800735c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007360:	f7f9 fca2 	bl	8000ca8 <__aeabi_uldivmod>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4613      	mov	r3, r2
 800736a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800736c:	4b0b      	ldr	r3, [pc, #44]	; (800739c <HAL_RCC_GetSysClockFreq+0x180>)
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	0c1b      	lsrs	r3, r3, #16
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	3301      	adds	r3, #1
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800737c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	fbb2 f3f3 	udiv	r3, r2, r3
 8007384:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007386:	e002      	b.n	800738e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007388:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800738a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800738c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007390:	4618      	mov	r0, r3
 8007392:	3740      	adds	r7, #64	; 0x40
 8007394:	46bd      	mov	sp, r7
 8007396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800739a:	bf00      	nop
 800739c:	40023800 	.word	0x40023800
 80073a0:	00f42400 	.word	0x00f42400
 80073a4:	017d7840 	.word	0x017d7840

080073a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073ac:	4b03      	ldr	r3, [pc, #12]	; (80073bc <HAL_RCC_GetHCLKFreq+0x14>)
 80073ae:	681b      	ldr	r3, [r3, #0]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	20000004 	.word	0x20000004

080073c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073c4:	f7ff fff0 	bl	80073a8 <HAL_RCC_GetHCLKFreq>
 80073c8:	4602      	mov	r2, r0
 80073ca:	4b05      	ldr	r3, [pc, #20]	; (80073e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	0a9b      	lsrs	r3, r3, #10
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	4903      	ldr	r1, [pc, #12]	; (80073e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073d6:	5ccb      	ldrb	r3, [r1, r3]
 80073d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073dc:	4618      	mov	r0, r3
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	40023800 	.word	0x40023800
 80073e4:	08012324 	.word	0x08012324

080073e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073ec:	f7ff ffdc 	bl	80073a8 <HAL_RCC_GetHCLKFreq>
 80073f0:	4602      	mov	r2, r0
 80073f2:	4b05      	ldr	r3, [pc, #20]	; (8007408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	0b5b      	lsrs	r3, r3, #13
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	4903      	ldr	r1, [pc, #12]	; (800740c <HAL_RCC_GetPCLK2Freq+0x24>)
 80073fe:	5ccb      	ldrb	r3, [r1, r3]
 8007400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007404:	4618      	mov	r0, r3
 8007406:	bd80      	pop	{r7, pc}
 8007408:	40023800 	.word	0x40023800
 800740c:	08012324 	.word	0x08012324

08007410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e07b      	b.n	800751a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	2b00      	cmp	r3, #0
 8007428:	d108      	bne.n	800743c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007432:	d009      	beq.n	8007448 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	61da      	str	r2, [r3, #28]
 800743a:	e005      	b.n	8007448 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d106      	bne.n	8007468 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7fc fc44 	bl	8003cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800747e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007490:	431a      	orrs	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800749a:	431a      	orrs	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074cc:	ea42 0103 	orr.w	r1, r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	0c1b      	lsrs	r3, r3, #16
 80074e6:	f003 0104 	and.w	r1, r3, #4
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	f003 0210 	and.w	r2, r3, #16
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69da      	ldr	r2, [r3, #28]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007508:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b088      	sub	sp, #32
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	603b      	str	r3, [r7, #0]
 800752e:	4613      	mov	r3, r2
 8007530:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_SPI_Transmit+0x22>
 8007540:	2302      	movs	r3, #2
 8007542:	e126      	b.n	8007792 <HAL_SPI_Transmit+0x270>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800754c:	f7fd fb2c 	bl	8004ba8 <HAL_GetTick>
 8007550:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007552:	88fb      	ldrh	r3, [r7, #6]
 8007554:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b01      	cmp	r3, #1
 8007560:	d002      	beq.n	8007568 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007562:	2302      	movs	r3, #2
 8007564:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007566:	e10b      	b.n	8007780 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <HAL_SPI_Transmit+0x52>
 800756e:	88fb      	ldrh	r3, [r7, #6]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d102      	bne.n	800757a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007578:	e102      	b.n	8007780 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2203      	movs	r2, #3
 800757e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	88fa      	ldrh	r2, [r7, #6]
 8007592:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	88fa      	ldrh	r2, [r7, #6]
 8007598:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c0:	d10f      	bne.n	80075e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ec:	2b40      	cmp	r3, #64	; 0x40
 80075ee:	d007      	beq.n	8007600 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007608:	d14b      	bne.n	80076a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <HAL_SPI_Transmit+0xf6>
 8007612:	8afb      	ldrh	r3, [r7, #22]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d13e      	bne.n	8007696 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761c:	881a      	ldrh	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007628:	1c9a      	adds	r2, r3, #2
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007632:	b29b      	uxth	r3, r3
 8007634:	3b01      	subs	r3, #1
 8007636:	b29a      	uxth	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800763c:	e02b      	b.n	8007696 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b02      	cmp	r3, #2
 800764a:	d112      	bne.n	8007672 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007650:	881a      	ldrh	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765c:	1c9a      	adds	r2, r3, #2
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007666:	b29b      	uxth	r3, r3
 8007668:	3b01      	subs	r3, #1
 800766a:	b29a      	uxth	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007670:	e011      	b.n	8007696 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007672:	f7fd fa99 	bl	8004ba8 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	429a      	cmp	r2, r3
 8007680:	d803      	bhi.n	800768a <HAL_SPI_Transmit+0x168>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007688:	d102      	bne.n	8007690 <HAL_SPI_Transmit+0x16e>
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d102      	bne.n	8007696 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007694:	e074      	b.n	8007780 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800769a:	b29b      	uxth	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1ce      	bne.n	800763e <HAL_SPI_Transmit+0x11c>
 80076a0:	e04c      	b.n	800773c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <HAL_SPI_Transmit+0x18e>
 80076aa:	8afb      	ldrh	r3, [r7, #22]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d140      	bne.n	8007732 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	330c      	adds	r3, #12
 80076ba:	7812      	ldrb	r2, [r2, #0]
 80076bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076d6:	e02c      	b.n	8007732 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d113      	bne.n	800770e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	330c      	adds	r3, #12
 80076f0:	7812      	ldrb	r2, [r2, #0]
 80076f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007702:	b29b      	uxth	r3, r3
 8007704:	3b01      	subs	r3, #1
 8007706:	b29a      	uxth	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	86da      	strh	r2, [r3, #54]	; 0x36
 800770c:	e011      	b.n	8007732 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800770e:	f7fd fa4b 	bl	8004ba8 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	429a      	cmp	r2, r3
 800771c:	d803      	bhi.n	8007726 <HAL_SPI_Transmit+0x204>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007724:	d102      	bne.n	800772c <HAL_SPI_Transmit+0x20a>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d102      	bne.n	8007732 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007730:	e026      	b.n	8007780 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007736:	b29b      	uxth	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1cd      	bne.n	80076d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 fbd9 	bl	8007ef8 <SPI_EndRxTxTransaction>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2220      	movs	r2, #32
 8007750:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800775a:	2300      	movs	r3, #0
 800775c:	613b      	str	r3, [r7, #16]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	613b      	str	r3, [r7, #16]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	613b      	str	r3, [r7, #16]
 800776e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	77fb      	strb	r3, [r7, #31]
 800777c:	e000      	b.n	8007780 <HAL_SPI_Transmit+0x25e>
  }

error:
 800777e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007790:	7ffb      	ldrb	r3, [r7, #31]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b088      	sub	sp, #32
 800779e:	af02      	add	r7, sp, #8
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	4613      	mov	r3, r2
 80077a8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077b6:	d112      	bne.n	80077de <HAL_SPI_Receive+0x44>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10e      	bne.n	80077de <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2204      	movs	r2, #4
 80077c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80077c8:	88fa      	ldrh	r2, [r7, #6]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	4613      	mov	r3, r2
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	68b9      	ldr	r1, [r7, #8]
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 f8f1 	bl	80079bc <HAL_SPI_TransmitReceive>
 80077da:	4603      	mov	r3, r0
 80077dc:	e0ea      	b.n	80079b4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d101      	bne.n	80077ec <HAL_SPI_Receive+0x52>
 80077e8:	2302      	movs	r3, #2
 80077ea:	e0e3      	b.n	80079b4 <HAL_SPI_Receive+0x21a>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077f4:	f7fd f9d8 	bl	8004ba8 <HAL_GetTick>
 80077f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b01      	cmp	r3, #1
 8007804:	d002      	beq.n	800780c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007806:	2302      	movs	r3, #2
 8007808:	75fb      	strb	r3, [r7, #23]
    goto error;
 800780a:	e0ca      	b.n	80079a2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <HAL_SPI_Receive+0x7e>
 8007812:	88fb      	ldrh	r3, [r7, #6]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d102      	bne.n	800781e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800781c:	e0c1      	b.n	80079a2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2204      	movs	r2, #4
 8007822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	88fa      	ldrh	r2, [r7, #6]
 8007836:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	88fa      	ldrh	r2, [r7, #6]
 800783c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007864:	d10f      	bne.n	8007886 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007874:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007884:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007890:	2b40      	cmp	r3, #64	; 0x40
 8007892:	d007      	beq.n	80078a4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d162      	bne.n	8007972 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80078ac:	e02e      	b.n	800790c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d115      	bne.n	80078e8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f103 020c 	add.w	r2, r3, #12
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c8:	7812      	ldrb	r2, [r2, #0]
 80078ca:	b2d2      	uxtb	r2, r2
 80078cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078e6:	e011      	b.n	800790c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078e8:	f7fd f95e 	bl	8004ba8 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d803      	bhi.n	8007900 <HAL_SPI_Receive+0x166>
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fe:	d102      	bne.n	8007906 <HAL_SPI_Receive+0x16c>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d102      	bne.n	800790c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	75fb      	strb	r3, [r7, #23]
          goto error;
 800790a:	e04a      	b.n	80079a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007910:	b29b      	uxth	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1cb      	bne.n	80078ae <HAL_SPI_Receive+0x114>
 8007916:	e031      	b.n	800797c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b01      	cmp	r3, #1
 8007924:	d113      	bne.n	800794e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68da      	ldr	r2, [r3, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	b292      	uxth	r2, r2
 8007932:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007938:	1c9a      	adds	r2, r3, #2
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007942:	b29b      	uxth	r3, r3
 8007944:	3b01      	subs	r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800794c:	e011      	b.n	8007972 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800794e:	f7fd f92b 	bl	8004ba8 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	429a      	cmp	r2, r3
 800795c:	d803      	bhi.n	8007966 <HAL_SPI_Receive+0x1cc>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007964:	d102      	bne.n	800796c <HAL_SPI_Receive+0x1d2>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d102      	bne.n	8007972 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007970:	e017      	b.n	80079a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007976:	b29b      	uxth	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1cd      	bne.n	8007918 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 fa53 	bl	8007e2c <SPI_EndRxTransaction>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2220      	movs	r2, #32
 8007990:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	75fb      	strb	r3, [r7, #23]
 800799e:	e000      	b.n	80079a2 <HAL_SPI_Receive+0x208>
  }

error :
 80079a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08c      	sub	sp, #48	; 0x30
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079ca:	2301      	movs	r3, #1
 80079cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d101      	bne.n	80079e2 <HAL_SPI_TransmitReceive+0x26>
 80079de:	2302      	movs	r3, #2
 80079e0:	e18a      	b.n	8007cf8 <HAL_SPI_TransmitReceive+0x33c>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079ea:	f7fd f8dd 	bl	8004ba8 <HAL_GetTick>
 80079ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a00:	887b      	ldrh	r3, [r7, #2]
 8007a02:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d00f      	beq.n	8007a2c <HAL_SPI_TransmitReceive+0x70>
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a12:	d107      	bne.n	8007a24 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d103      	bne.n	8007a24 <HAL_SPI_TransmitReceive+0x68>
 8007a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d003      	beq.n	8007a2c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a24:	2302      	movs	r3, #2
 8007a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a2a:	e15b      	b.n	8007ce4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <HAL_SPI_TransmitReceive+0x82>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <HAL_SPI_TransmitReceive+0x82>
 8007a38:	887b      	ldrh	r3, [r7, #2]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d103      	bne.n	8007a46 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a44:	e14e      	b.n	8007ce4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d003      	beq.n	8007a5a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2205      	movs	r2, #5
 8007a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	887a      	ldrh	r2, [r7, #2]
 8007a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	887a      	ldrh	r2, [r7, #2]
 8007a70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	887a      	ldrh	r2, [r7, #2]
 8007a7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	887a      	ldrh	r2, [r7, #2]
 8007a82:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9a:	2b40      	cmp	r3, #64	; 0x40
 8007a9c:	d007      	beq.n	8007aae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ab6:	d178      	bne.n	8007baa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <HAL_SPI_TransmitReceive+0x10a>
 8007ac0:	8b7b      	ldrh	r3, [r7, #26]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d166      	bne.n	8007b94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aca:	881a      	ldrh	r2, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad6:	1c9a      	adds	r2, r3, #2
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aea:	e053      	b.n	8007b94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d11b      	bne.n	8007b32 <HAL_SPI_TransmitReceive+0x176>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d016      	beq.n	8007b32 <HAL_SPI_TransmitReceive+0x176>
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d113      	bne.n	8007b32 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0e:	881a      	ldrh	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1a:	1c9a      	adds	r2, r3, #2
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	3b01      	subs	r3, #1
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d119      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x1b8>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d014      	beq.n	8007b74 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b54:	b292      	uxth	r2, r2
 8007b56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	1c9a      	adds	r2, r3, #2
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b70:	2301      	movs	r3, #1
 8007b72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b74:	f7fd f818 	bl	8004ba8 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d807      	bhi.n	8007b94 <HAL_SPI_TransmitReceive+0x1d8>
 8007b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8a:	d003      	beq.n	8007b94 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b92:	e0a7      	b.n	8007ce4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1a6      	bne.n	8007aec <HAL_SPI_TransmitReceive+0x130>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1a1      	bne.n	8007aec <HAL_SPI_TransmitReceive+0x130>
 8007ba8:	e07c      	b.n	8007ca4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <HAL_SPI_TransmitReceive+0x1fc>
 8007bb2:	8b7b      	ldrh	r3, [r7, #26]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d16b      	bne.n	8007c90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	330c      	adds	r3, #12
 8007bc2:	7812      	ldrb	r2, [r2, #0]
 8007bc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bde:	e057      	b.n	8007c90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d11c      	bne.n	8007c28 <HAL_SPI_TransmitReceive+0x26c>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d017      	beq.n	8007c28 <HAL_SPI_TransmitReceive+0x26c>
 8007bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d114      	bne.n	8007c28 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	330c      	adds	r3, #12
 8007c08:	7812      	ldrb	r2, [r2, #0]
 8007c0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d119      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x2ae>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d014      	beq.n	8007c6a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4a:	b2d2      	uxtb	r2, r2
 8007c4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	1c5a      	adds	r2, r3, #1
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c66:	2301      	movs	r3, #1
 8007c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c6a:	f7fc ff9d 	bl	8004ba8 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d803      	bhi.n	8007c82 <HAL_SPI_TransmitReceive+0x2c6>
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c80:	d102      	bne.n	8007c88 <HAL_SPI_TransmitReceive+0x2cc>
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d103      	bne.n	8007c90 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c8e:	e029      	b.n	8007ce4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1a2      	bne.n	8007be0 <HAL_SPI_TransmitReceive+0x224>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d19d      	bne.n	8007be0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 f925 	bl	8007ef8 <SPI_EndRxTxTransaction>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d006      	beq.n	8007cc2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007cc0:	e010      	b.n	8007ce4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10b      	bne.n	8007ce2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cca:	2300      	movs	r3, #0
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	e000      	b.n	8007ce4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007ce2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007cf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3730      	adds	r7, #48	; 0x30
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d0e:	b2db      	uxtb	r3, r3
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	603b      	str	r3, [r7, #0]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d2c:	f7fc ff3c 	bl	8004ba8 <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d34:	1a9b      	subs	r3, r3, r2
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	4413      	add	r3, r2
 8007d3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d3c:	f7fc ff34 	bl	8004ba8 <HAL_GetTick>
 8007d40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d42:	4b39      	ldr	r3, [pc, #228]	; (8007e28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	015b      	lsls	r3, r3, #5
 8007d48:	0d1b      	lsrs	r3, r3, #20
 8007d4a:	69fa      	ldr	r2, [r7, #28]
 8007d4c:	fb02 f303 	mul.w	r3, r2, r3
 8007d50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d52:	e054      	b.n	8007dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5a:	d050      	beq.n	8007dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d5c:	f7fc ff24 	bl	8004ba8 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d902      	bls.n	8007d72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d13d      	bne.n	8007dee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d8a:	d111      	bne.n	8007db0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d94:	d004      	beq.n	8007da0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d9e:	d107      	bne.n	8007db0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007db8:	d10f      	bne.n	8007dda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e017      	b.n	8007e1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	4013      	ands	r3, r2
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	bf0c      	ite	eq
 8007e0e:	2301      	moveq	r3, #1
 8007e10:	2300      	movne	r3, #0
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d19b      	bne.n	8007d54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3720      	adds	r7, #32
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20000004 	.word	0x20000004

08007e2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e40:	d111      	bne.n	8007e66 <SPI_EndRxTransaction+0x3a>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e4a:	d004      	beq.n	8007e56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e54:	d107      	bne.n	8007e66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e64:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e6e:	d12a      	bne.n	8007ec6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e78:	d012      	beq.n	8007ea0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2200      	movs	r2, #0
 8007e82:	2180      	movs	r1, #128	; 0x80
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f7ff ff49 	bl	8007d1c <SPI_WaitFlagStateUntilTimeout>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d02d      	beq.n	8007eec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e94:	f043 0220 	orr.w	r2, r3, #32
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e026      	b.n	8007eee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f7ff ff36 	bl	8007d1c <SPI_WaitFlagStateUntilTimeout>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d01a      	beq.n	8007eec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eba:	f043 0220 	orr.w	r2, r3, #32
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e013      	b.n	8007eee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2101      	movs	r1, #1
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7ff ff23 	bl	8007d1c <SPI_WaitFlagStateUntilTimeout>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d007      	beq.n	8007eec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee0:	f043 0220 	orr.w	r2, r3, #32
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e000      	b.n	8007eee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f04:	4b1b      	ldr	r3, [pc, #108]	; (8007f74 <SPI_EndRxTxTransaction+0x7c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a1b      	ldr	r2, [pc, #108]	; (8007f78 <SPI_EndRxTxTransaction+0x80>)
 8007f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f0e:	0d5b      	lsrs	r3, r3, #21
 8007f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f14:	fb02 f303 	mul.w	r3, r2, r3
 8007f18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f22:	d112      	bne.n	8007f4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2180      	movs	r1, #128	; 0x80
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f7ff fef4 	bl	8007d1c <SPI_WaitFlagStateUntilTimeout>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d016      	beq.n	8007f68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f3e:	f043 0220 	orr.w	r2, r3, #32
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e00f      	b.n	8007f6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00a      	beq.n	8007f66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f60:	2b80      	cmp	r3, #128	; 0x80
 8007f62:	d0f2      	beq.n	8007f4a <SPI_EndRxTxTransaction+0x52>
 8007f64:	e000      	b.n	8007f68 <SPI_EndRxTxTransaction+0x70>
        break;
 8007f66:	bf00      	nop
  }

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20000004 	.word	0x20000004
 8007f78:	165e9f81 	.word	0x165e9f81

08007f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e041      	b.n	8008012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7fb ff40 	bl	8003e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4610      	mov	r0, r2
 8007fbc:	f000 fb2c 	bl	8008618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
	...

0800801c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b01      	cmp	r3, #1
 800802e:	d001      	beq.n	8008034 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e046      	b.n	80080c2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a23      	ldr	r2, [pc, #140]	; (80080d0 <HAL_TIM_Base_Start+0xb4>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d022      	beq.n	800808c <HAL_TIM_Base_Start+0x70>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800804e:	d01d      	beq.n	800808c <HAL_TIM_Base_Start+0x70>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a1f      	ldr	r2, [pc, #124]	; (80080d4 <HAL_TIM_Base_Start+0xb8>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d018      	beq.n	800808c <HAL_TIM_Base_Start+0x70>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a1e      	ldr	r2, [pc, #120]	; (80080d8 <HAL_TIM_Base_Start+0xbc>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d013      	beq.n	800808c <HAL_TIM_Base_Start+0x70>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a1c      	ldr	r2, [pc, #112]	; (80080dc <HAL_TIM_Base_Start+0xc0>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d00e      	beq.n	800808c <HAL_TIM_Base_Start+0x70>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a1b      	ldr	r2, [pc, #108]	; (80080e0 <HAL_TIM_Base_Start+0xc4>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d009      	beq.n	800808c <HAL_TIM_Base_Start+0x70>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a19      	ldr	r2, [pc, #100]	; (80080e4 <HAL_TIM_Base_Start+0xc8>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d004      	beq.n	800808c <HAL_TIM_Base_Start+0x70>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a18      	ldr	r2, [pc, #96]	; (80080e8 <HAL_TIM_Base_Start+0xcc>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d111      	bne.n	80080b0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b06      	cmp	r3, #6
 800809c:	d010      	beq.n	80080c0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f042 0201 	orr.w	r2, r2, #1
 80080ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ae:	e007      	b.n	80080c0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0201 	orr.w	r2, r2, #1
 80080be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	40010000 	.word	0x40010000
 80080d4:	40000400 	.word	0x40000400
 80080d8:	40000800 	.word	0x40000800
 80080dc:	40000c00 	.word	0x40000c00
 80080e0:	40010400 	.word	0x40010400
 80080e4:	40014000 	.word	0x40014000
 80080e8:	40001800 	.word	0x40001800

080080ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d001      	beq.n	8008104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e04e      	b.n	80081a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2202      	movs	r2, #2
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0201 	orr.w	r2, r2, #1
 800811a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a23      	ldr	r2, [pc, #140]	; (80081b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d022      	beq.n	800816c <HAL_TIM_Base_Start_IT+0x80>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800812e:	d01d      	beq.n	800816c <HAL_TIM_Base_Start_IT+0x80>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a1f      	ldr	r2, [pc, #124]	; (80081b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d018      	beq.n	800816c <HAL_TIM_Base_Start_IT+0x80>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a1e      	ldr	r2, [pc, #120]	; (80081b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d013      	beq.n	800816c <HAL_TIM_Base_Start_IT+0x80>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a1c      	ldr	r2, [pc, #112]	; (80081bc <HAL_TIM_Base_Start_IT+0xd0>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00e      	beq.n	800816c <HAL_TIM_Base_Start_IT+0x80>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a1b      	ldr	r2, [pc, #108]	; (80081c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d009      	beq.n	800816c <HAL_TIM_Base_Start_IT+0x80>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a19      	ldr	r2, [pc, #100]	; (80081c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d004      	beq.n	800816c <HAL_TIM_Base_Start_IT+0x80>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a18      	ldr	r2, [pc, #96]	; (80081c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d111      	bne.n	8008190 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f003 0307 	and.w	r3, r3, #7
 8008176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b06      	cmp	r3, #6
 800817c:	d010      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0201 	orr.w	r2, r2, #1
 800818c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800818e:	e007      	b.n	80081a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0201 	orr.w	r2, r2, #1
 800819e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	40010000 	.word	0x40010000
 80081b4:	40000400 	.word	0x40000400
 80081b8:	40000800 	.word	0x40000800
 80081bc:	40000c00 	.word	0x40000c00
 80081c0:	40010400 	.word	0x40010400
 80081c4:	40014000 	.word	0x40014000
 80081c8:	40001800 	.word	0x40001800

080081cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 0201 	bic.w	r2, r2, #1
 80081e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6a1a      	ldr	r2, [r3, #32]
 80081ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80081ee:	4013      	ands	r3, r2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10f      	bne.n	8008214 <HAL_TIM_Base_Stop_IT+0x48>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6a1a      	ldr	r2, [r3, #32]
 80081fa:	f240 4344 	movw	r3, #1092	; 0x444
 80081fe:	4013      	ands	r3, r2
 8008200:	2b00      	cmp	r3, #0
 8008202:	d107      	bne.n	8008214 <HAL_TIM_Base_Stop_IT+0x48>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0201 	bic.w	r2, r2, #1
 8008212:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	f003 0302 	and.w	r3, r3, #2
 800823c:	2b02      	cmp	r3, #2
 800823e:	d122      	bne.n	8008286 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b02      	cmp	r3, #2
 800824c:	d11b      	bne.n	8008286 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f06f 0202 	mvn.w	r2, #2
 8008256:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	2b00      	cmp	r3, #0
 800826a:	d003      	beq.n	8008274 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f9b5 	bl	80085dc <HAL_TIM_IC_CaptureCallback>
 8008272:	e005      	b.n	8008280 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f9a7 	bl	80085c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f9b8 	bl	80085f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	2b04      	cmp	r3, #4
 8008292:	d122      	bne.n	80082da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f003 0304 	and.w	r3, r3, #4
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d11b      	bne.n	80082da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f06f 0204 	mvn.w	r2, #4
 80082aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f98b 	bl	80085dc <HAL_TIM_IC_CaptureCallback>
 80082c6:	e005      	b.n	80082d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f97d 	bl	80085c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f98e 	bl	80085f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	d122      	bne.n	800832e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	f003 0308 	and.w	r3, r3, #8
 80082f2:	2b08      	cmp	r3, #8
 80082f4:	d11b      	bne.n	800832e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f06f 0208 	mvn.w	r2, #8
 80082fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2204      	movs	r2, #4
 8008304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	f003 0303 	and.w	r3, r3, #3
 8008310:	2b00      	cmp	r3, #0
 8008312:	d003      	beq.n	800831c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f961 	bl	80085dc <HAL_TIM_IC_CaptureCallback>
 800831a:	e005      	b.n	8008328 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f953 	bl	80085c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f964 	bl	80085f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	f003 0310 	and.w	r3, r3, #16
 8008338:	2b10      	cmp	r3, #16
 800833a:	d122      	bne.n	8008382 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	f003 0310 	and.w	r3, r3, #16
 8008346:	2b10      	cmp	r3, #16
 8008348:	d11b      	bne.n	8008382 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f06f 0210 	mvn.w	r2, #16
 8008352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2208      	movs	r2, #8
 8008358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f937 	bl	80085dc <HAL_TIM_IC_CaptureCallback>
 800836e:	e005      	b.n	800837c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f929 	bl	80085c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f93a 	bl	80085f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	2b01      	cmp	r3, #1
 800838e:	d10e      	bne.n	80083ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b01      	cmp	r3, #1
 800839c:	d107      	bne.n	80083ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f06f 0201 	mvn.w	r2, #1
 80083a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7fa ff13 	bl	80031d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b8:	2b80      	cmp	r3, #128	; 0x80
 80083ba:	d10e      	bne.n	80083da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c6:	2b80      	cmp	r3, #128	; 0x80
 80083c8:	d107      	bne.n	80083da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fadf 	bl	8008998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e4:	2b40      	cmp	r3, #64	; 0x40
 80083e6:	d10e      	bne.n	8008406 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f2:	2b40      	cmp	r3, #64	; 0x40
 80083f4:	d107      	bne.n	8008406 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f8ff 	bl	8008604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	f003 0320 	and.w	r3, r3, #32
 8008410:	2b20      	cmp	r3, #32
 8008412:	d10e      	bne.n	8008432 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b20      	cmp	r3, #32
 8008420:	d107      	bne.n	8008432 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f06f 0220 	mvn.w	r2, #32
 800842a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 faa9 	bl	8008984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008432:	bf00      	nop
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b084      	sub	sp, #16
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800844e:	2b01      	cmp	r3, #1
 8008450:	d101      	bne.n	8008456 <HAL_TIM_ConfigClockSource+0x1c>
 8008452:	2302      	movs	r3, #2
 8008454:	e0b4      	b.n	80085c0 <HAL_TIM_ConfigClockSource+0x186>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2202      	movs	r2, #2
 8008462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008474:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800847c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800848e:	d03e      	beq.n	800850e <HAL_TIM_ConfigClockSource+0xd4>
 8008490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008494:	f200 8087 	bhi.w	80085a6 <HAL_TIM_ConfigClockSource+0x16c>
 8008498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800849c:	f000 8086 	beq.w	80085ac <HAL_TIM_ConfigClockSource+0x172>
 80084a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a4:	d87f      	bhi.n	80085a6 <HAL_TIM_ConfigClockSource+0x16c>
 80084a6:	2b70      	cmp	r3, #112	; 0x70
 80084a8:	d01a      	beq.n	80084e0 <HAL_TIM_ConfigClockSource+0xa6>
 80084aa:	2b70      	cmp	r3, #112	; 0x70
 80084ac:	d87b      	bhi.n	80085a6 <HAL_TIM_ConfigClockSource+0x16c>
 80084ae:	2b60      	cmp	r3, #96	; 0x60
 80084b0:	d050      	beq.n	8008554 <HAL_TIM_ConfigClockSource+0x11a>
 80084b2:	2b60      	cmp	r3, #96	; 0x60
 80084b4:	d877      	bhi.n	80085a6 <HAL_TIM_ConfigClockSource+0x16c>
 80084b6:	2b50      	cmp	r3, #80	; 0x50
 80084b8:	d03c      	beq.n	8008534 <HAL_TIM_ConfigClockSource+0xfa>
 80084ba:	2b50      	cmp	r3, #80	; 0x50
 80084bc:	d873      	bhi.n	80085a6 <HAL_TIM_ConfigClockSource+0x16c>
 80084be:	2b40      	cmp	r3, #64	; 0x40
 80084c0:	d058      	beq.n	8008574 <HAL_TIM_ConfigClockSource+0x13a>
 80084c2:	2b40      	cmp	r3, #64	; 0x40
 80084c4:	d86f      	bhi.n	80085a6 <HAL_TIM_ConfigClockSource+0x16c>
 80084c6:	2b30      	cmp	r3, #48	; 0x30
 80084c8:	d064      	beq.n	8008594 <HAL_TIM_ConfigClockSource+0x15a>
 80084ca:	2b30      	cmp	r3, #48	; 0x30
 80084cc:	d86b      	bhi.n	80085a6 <HAL_TIM_ConfigClockSource+0x16c>
 80084ce:	2b20      	cmp	r3, #32
 80084d0:	d060      	beq.n	8008594 <HAL_TIM_ConfigClockSource+0x15a>
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	d867      	bhi.n	80085a6 <HAL_TIM_ConfigClockSource+0x16c>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d05c      	beq.n	8008594 <HAL_TIM_ConfigClockSource+0x15a>
 80084da:	2b10      	cmp	r3, #16
 80084dc:	d05a      	beq.n	8008594 <HAL_TIM_ConfigClockSource+0x15a>
 80084de:	e062      	b.n	80085a6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6818      	ldr	r0, [r3, #0]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	6899      	ldr	r1, [r3, #8]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f000 f9ac 	bl	800884c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008502:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	609a      	str	r2, [r3, #8]
      break;
 800850c:	e04f      	b.n	80085ae <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	6899      	ldr	r1, [r3, #8]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	f000 f995 	bl	800884c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008530:	609a      	str	r2, [r3, #8]
      break;
 8008532:	e03c      	b.n	80085ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6818      	ldr	r0, [r3, #0]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	6859      	ldr	r1, [r3, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	461a      	mov	r2, r3
 8008542:	f000 f909 	bl	8008758 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2150      	movs	r1, #80	; 0x50
 800854c:	4618      	mov	r0, r3
 800854e:	f000 f962 	bl	8008816 <TIM_ITRx_SetConfig>
      break;
 8008552:	e02c      	b.n	80085ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6818      	ldr	r0, [r3, #0]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	6859      	ldr	r1, [r3, #4]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	461a      	mov	r2, r3
 8008562:	f000 f928 	bl	80087b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2160      	movs	r1, #96	; 0x60
 800856c:	4618      	mov	r0, r3
 800856e:	f000 f952 	bl	8008816 <TIM_ITRx_SetConfig>
      break;
 8008572:	e01c      	b.n	80085ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6818      	ldr	r0, [r3, #0]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	6859      	ldr	r1, [r3, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	461a      	mov	r2, r3
 8008582:	f000 f8e9 	bl	8008758 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2140      	movs	r1, #64	; 0x40
 800858c:	4618      	mov	r0, r3
 800858e:	f000 f942 	bl	8008816 <TIM_ITRx_SetConfig>
      break;
 8008592:	e00c      	b.n	80085ae <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4619      	mov	r1, r3
 800859e:	4610      	mov	r0, r2
 80085a0:	f000 f939 	bl	8008816 <TIM_ITRx_SetConfig>
      break;
 80085a4:	e003      	b.n	80085ae <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	73fb      	strb	r3, [r7, #15]
      break;
 80085aa:	e000      	b.n	80085ae <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085be:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a40      	ldr	r2, [pc, #256]	; (800872c <TIM_Base_SetConfig+0x114>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d013      	beq.n	8008658 <TIM_Base_SetConfig+0x40>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008636:	d00f      	beq.n	8008658 <TIM_Base_SetConfig+0x40>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a3d      	ldr	r2, [pc, #244]	; (8008730 <TIM_Base_SetConfig+0x118>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d00b      	beq.n	8008658 <TIM_Base_SetConfig+0x40>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a3c      	ldr	r2, [pc, #240]	; (8008734 <TIM_Base_SetConfig+0x11c>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d007      	beq.n	8008658 <TIM_Base_SetConfig+0x40>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a3b      	ldr	r2, [pc, #236]	; (8008738 <TIM_Base_SetConfig+0x120>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d003      	beq.n	8008658 <TIM_Base_SetConfig+0x40>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a3a      	ldr	r2, [pc, #232]	; (800873c <TIM_Base_SetConfig+0x124>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d108      	bne.n	800866a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	4313      	orrs	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a2f      	ldr	r2, [pc, #188]	; (800872c <TIM_Base_SetConfig+0x114>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d02b      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008678:	d027      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a2c      	ldr	r2, [pc, #176]	; (8008730 <TIM_Base_SetConfig+0x118>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d023      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a2b      	ldr	r2, [pc, #172]	; (8008734 <TIM_Base_SetConfig+0x11c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d01f      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a2a      	ldr	r2, [pc, #168]	; (8008738 <TIM_Base_SetConfig+0x120>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d01b      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a29      	ldr	r2, [pc, #164]	; (800873c <TIM_Base_SetConfig+0x124>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d017      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a28      	ldr	r2, [pc, #160]	; (8008740 <TIM_Base_SetConfig+0x128>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d013      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a27      	ldr	r2, [pc, #156]	; (8008744 <TIM_Base_SetConfig+0x12c>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00f      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a26      	ldr	r2, [pc, #152]	; (8008748 <TIM_Base_SetConfig+0x130>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d00b      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a25      	ldr	r2, [pc, #148]	; (800874c <TIM_Base_SetConfig+0x134>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d007      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a24      	ldr	r2, [pc, #144]	; (8008750 <TIM_Base_SetConfig+0x138>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d003      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a23      	ldr	r2, [pc, #140]	; (8008754 <TIM_Base_SetConfig+0x13c>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d108      	bne.n	80086dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	4313      	orrs	r3, r2
 80086da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	695b      	ldr	r3, [r3, #20]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a0a      	ldr	r2, [pc, #40]	; (800872c <TIM_Base_SetConfig+0x114>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d003      	beq.n	8008710 <TIM_Base_SetConfig+0xf8>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a0c      	ldr	r2, [pc, #48]	; (800873c <TIM_Base_SetConfig+0x124>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d103      	bne.n	8008718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	691a      	ldr	r2, [r3, #16]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	615a      	str	r2, [r3, #20]
}
 800871e:	bf00      	nop
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	40010000 	.word	0x40010000
 8008730:	40000400 	.word	0x40000400
 8008734:	40000800 	.word	0x40000800
 8008738:	40000c00 	.word	0x40000c00
 800873c:	40010400 	.word	0x40010400
 8008740:	40014000 	.word	0x40014000
 8008744:	40014400 	.word	0x40014400
 8008748:	40014800 	.word	0x40014800
 800874c:	40001800 	.word	0x40001800
 8008750:	40001c00 	.word	0x40001c00
 8008754:	40002000 	.word	0x40002000

08008758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	f023 0201 	bic.w	r2, r3, #1
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	4313      	orrs	r3, r2
 800878c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f023 030a 	bic.w	r3, r3, #10
 8008794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	4313      	orrs	r3, r2
 800879c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	621a      	str	r2, [r3, #32]
}
 80087aa:	bf00      	nop
 80087ac:	371c      	adds	r7, #28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b087      	sub	sp, #28
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	60f8      	str	r0, [r7, #12]
 80087be:	60b9      	str	r1, [r7, #8]
 80087c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	f023 0210 	bic.w	r2, r3, #16
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	031b      	lsls	r3, r3, #12
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80087f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	011b      	lsls	r3, r3, #4
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	621a      	str	r2, [r3, #32]
}
 800880a:	bf00      	nop
 800880c:	371c      	adds	r7, #28
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008816:	b480      	push	{r7}
 8008818:	b085      	sub	sp, #20
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4313      	orrs	r3, r2
 8008834:	f043 0307 	orr.w	r3, r3, #7
 8008838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	609a      	str	r2, [r3, #8]
}
 8008840:	bf00      	nop
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008866:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	021a      	lsls	r2, r3, #8
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	431a      	orrs	r2, r3
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	4313      	orrs	r3, r2
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	4313      	orrs	r3, r2
 8008878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	609a      	str	r2, [r3, #8]
}
 8008880:	bf00      	nop
 8008882:	371c      	adds	r7, #28
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800889c:	2b01      	cmp	r3, #1
 800889e:	d101      	bne.n	80088a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088a0:	2302      	movs	r3, #2
 80088a2:	e05a      	b.n	800895a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2202      	movs	r2, #2
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a21      	ldr	r2, [pc, #132]	; (8008968 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d022      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f0:	d01d      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a1d      	ldr	r2, [pc, #116]	; (800896c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d018      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a1b      	ldr	r2, [pc, #108]	; (8008970 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d013      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a1a      	ldr	r2, [pc, #104]	; (8008974 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d00e      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a18      	ldr	r2, [pc, #96]	; (8008978 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d009      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a17      	ldr	r2, [pc, #92]	; (800897c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d004      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a15      	ldr	r2, [pc, #84]	; (8008980 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d10c      	bne.n	8008948 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	4313      	orrs	r3, r2
 800893e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	40010000 	.word	0x40010000
 800896c:	40000400 	.word	0x40000400
 8008970:	40000800 	.word	0x40000800
 8008974:	40000c00 	.word	0x40000c00
 8008978:	40010400 	.word	0x40010400
 800897c:	40014000 	.word	0x40014000
 8008980:	40001800 	.word	0x40001800

08008984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e03f      	b.n	8008a3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d106      	bne.n	80089d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7fb fa66 	bl	8003ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2224      	movs	r2, #36	; 0x24
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68da      	ldr	r2, [r3, #12]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 ff9b 	bl	800992c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	691a      	ldr	r2, [r3, #16]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	695a      	ldr	r2, [r3, #20]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68da      	ldr	r2, [r3, #12]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2220      	movs	r2, #32
 8008a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b08a      	sub	sp, #40	; 0x28
 8008a4a:	af02      	add	r7, sp, #8
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	603b      	str	r3, [r7, #0]
 8008a52:	4613      	mov	r3, r2
 8008a54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b20      	cmp	r3, #32
 8008a64:	d17c      	bne.n	8008b60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d002      	beq.n	8008a72 <HAL_UART_Transmit+0x2c>
 8008a6c:	88fb      	ldrh	r3, [r7, #6]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e075      	b.n	8008b62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d101      	bne.n	8008a84 <HAL_UART_Transmit+0x3e>
 8008a80:	2302      	movs	r3, #2
 8008a82:	e06e      	b.n	8008b62 <HAL_UART_Transmit+0x11c>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2221      	movs	r2, #33	; 0x21
 8008a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a9a:	f7fc f885 	bl	8004ba8 <HAL_GetTick>
 8008a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	88fa      	ldrh	r2, [r7, #6]
 8008aa4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	88fa      	ldrh	r2, [r7, #6]
 8008aaa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ab4:	d108      	bne.n	8008ac8 <HAL_UART_Transmit+0x82>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d104      	bne.n	8008ac8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	61bb      	str	r3, [r7, #24]
 8008ac6:	e003      	b.n	8008ad0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008acc:	2300      	movs	r3, #0
 8008ace:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008ad8:	e02a      	b.n	8008b30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2180      	movs	r1, #128	; 0x80
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 fc53 	bl	8009390 <UART_WaitOnFlagUntilTimeout>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e036      	b.n	8008b62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10b      	bne.n	8008b12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	881b      	ldrh	r3, [r3, #0]
 8008afe:	461a      	mov	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	3302      	adds	r3, #2
 8008b0e:	61bb      	str	r3, [r7, #24]
 8008b10:	e007      	b.n	8008b22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1cf      	bne.n	8008ada <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	2200      	movs	r2, #0
 8008b42:	2140      	movs	r1, #64	; 0x40
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f000 fc23 	bl	8009390 <UART_WaitOnFlagUntilTimeout>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e006      	b.n	8008b62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	e000      	b.n	8008b62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008b60:	2302      	movs	r3, #2
  }
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3720      	adds	r7, #32
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b08c      	sub	sp, #48	; 0x30
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	4613      	mov	r3, r2
 8008b76:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d152      	bne.n	8008c2a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008b8a:	88fb      	ldrh	r3, [r7, #6]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e04b      	b.n	8008c2c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d101      	bne.n	8008ba2 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	e044      	b.n	8008c2c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2201      	movs	r2, #1
 8008bae:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008bb0:	88fb      	ldrh	r3, [r7, #6]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	68b9      	ldr	r1, [r7, #8]
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 fc58 	bl	800946c <UART_Start_Receive_DMA>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d12c      	bne.n	8008c24 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d125      	bne.n	8008c1e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	613b      	str	r3, [r7, #16]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	613b      	str	r3, [r7, #16]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	613b      	str	r3, [r7, #16]
 8008be6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	330c      	adds	r3, #12
 8008bee:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	617b      	str	r3, [r7, #20]
   return(result);
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f043 0310 	orr.w	r3, r3, #16
 8008bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	330c      	adds	r3, #12
 8008c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c08:	627a      	str	r2, [r7, #36]	; 0x24
 8008c0a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	6a39      	ldr	r1, [r7, #32]
 8008c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e5      	bne.n	8008be8 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008c1c:	e002      	b.n	8008c24 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008c24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c28:	e000      	b.n	8008c2c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8008c2a:	2302      	movs	r3, #2
  }
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3730      	adds	r7, #48	; 0x30
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b0ba      	sub	sp, #232	; 0xe8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008c60:	2300      	movs	r3, #0
 8008c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c6a:	f003 030f 	and.w	r3, r3, #15
 8008c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008c72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10f      	bne.n	8008c9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c7e:	f003 0320 	and.w	r3, r3, #32
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d009      	beq.n	8008c9a <HAL_UART_IRQHandler+0x66>
 8008c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c8a:	f003 0320 	and.w	r3, r3, #32
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d003      	beq.n	8008c9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fd8f 	bl	80097b6 <UART_Receive_IT>
      return;
 8008c98:	e256      	b.n	8009148 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008c9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 80de 	beq.w	8008e60 <HAL_UART_IRQHandler+0x22c>
 8008ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ca8:	f003 0301 	and.w	r3, r3, #1
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d106      	bne.n	8008cbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 80d1 	beq.w	8008e60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00b      	beq.n	8008ce2 <HAL_UART_IRQHandler+0xae>
 8008cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d005      	beq.n	8008ce2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cda:	f043 0201 	orr.w	r2, r3, #1
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ce6:	f003 0304 	and.w	r3, r3, #4
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00b      	beq.n	8008d06 <HAL_UART_IRQHandler+0xd2>
 8008cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d005      	beq.n	8008d06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfe:	f043 0202 	orr.w	r2, r3, #2
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d0a:	f003 0302 	and.w	r3, r3, #2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00b      	beq.n	8008d2a <HAL_UART_IRQHandler+0xf6>
 8008d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d005      	beq.n	8008d2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d22:	f043 0204 	orr.w	r2, r3, #4
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d2e:	f003 0308 	and.w	r3, r3, #8
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d011      	beq.n	8008d5a <HAL_UART_IRQHandler+0x126>
 8008d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d3a:	f003 0320 	and.w	r3, r3, #32
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d105      	bne.n	8008d4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d005      	beq.n	8008d5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d52:	f043 0208 	orr.w	r2, r3, #8
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 81ed 	beq.w	800913e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d68:	f003 0320 	and.w	r3, r3, #32
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d008      	beq.n	8008d82 <HAL_UART_IRQHandler+0x14e>
 8008d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d74:	f003 0320 	and.w	r3, r3, #32
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d002      	beq.n	8008d82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fd1a 	bl	80097b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	695b      	ldr	r3, [r3, #20]
 8008d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8c:	2b40      	cmp	r3, #64	; 0x40
 8008d8e:	bf0c      	ite	eq
 8008d90:	2301      	moveq	r3, #1
 8008d92:	2300      	movne	r3, #0
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9e:	f003 0308 	and.w	r3, r3, #8
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d103      	bne.n	8008dae <HAL_UART_IRQHandler+0x17a>
 8008da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d04f      	beq.n	8008e4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fc22 	bl	80095f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dbe:	2b40      	cmp	r3, #64	; 0x40
 8008dc0:	d141      	bne.n	8008e46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3314      	adds	r3, #20
 8008dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dd0:	e853 3f00 	ldrex	r3, [r3]
 8008dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3314      	adds	r3, #20
 8008dea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008dee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008dfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1d9      	bne.n	8008dc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d013      	beq.n	8008e3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1a:	4a7d      	ldr	r2, [pc, #500]	; (8009010 <HAL_UART_IRQHandler+0x3dc>)
 8008e1c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fc fd8a 	bl	800593c <HAL_DMA_Abort_IT>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d016      	beq.n	8008e5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e3c:	e00e      	b.n	8008e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f9a4 	bl	800918c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e44:	e00a      	b.n	8008e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f9a0 	bl	800918c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e4c:	e006      	b.n	8008e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f99c 	bl	800918c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008e5a:	e170      	b.n	800913e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e5c:	bf00      	nop
    return;
 8008e5e:	e16e      	b.n	800913e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	f040 814a 	bne.w	80090fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e6e:	f003 0310 	and.w	r3, r3, #16
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 8143 	beq.w	80090fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e7c:	f003 0310 	and.w	r3, r3, #16
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 813c 	beq.w	80090fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e86:	2300      	movs	r3, #0
 8008e88:	60bb      	str	r3, [r7, #8]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	60bb      	str	r3, [r7, #8]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	60bb      	str	r3, [r7, #8]
 8008e9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea6:	2b40      	cmp	r3, #64	; 0x40
 8008ea8:	f040 80b4 	bne.w	8009014 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008eb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 8140 	beq.w	8009142 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	f080 8139 	bcs.w	8009142 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ed6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ee2:	f000 8088 	beq.w	8008ff6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	330c      	adds	r3, #12
 8008eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ef4:	e853 3f00 	ldrex	r3, [r3]
 8008ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	330c      	adds	r3, #12
 8008f0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008f12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008f1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f22:	e841 2300 	strex	r3, r2, [r1]
 8008f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1d9      	bne.n	8008ee6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3314      	adds	r3, #20
 8008f38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f3c:	e853 3f00 	ldrex	r3, [r3]
 8008f40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f44:	f023 0301 	bic.w	r3, r3, #1
 8008f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3314      	adds	r3, #20
 8008f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1e1      	bne.n	8008f32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3314      	adds	r3, #20
 8008f74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f78:	e853 3f00 	ldrex	r3, [r3]
 8008f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3314      	adds	r3, #20
 8008f8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f9a:	e841 2300 	strex	r3, r2, [r1]
 8008f9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1e3      	bne.n	8008f6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	330c      	adds	r3, #12
 8008fba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fbe:	e853 3f00 	ldrex	r3, [r3]
 8008fc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fc6:	f023 0310 	bic.w	r3, r3, #16
 8008fca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	330c      	adds	r3, #12
 8008fd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008fd8:	65ba      	str	r2, [r7, #88]	; 0x58
 8008fda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fe0:	e841 2300 	strex	r3, r2, [r1]
 8008fe4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1e3      	bne.n	8008fb4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fc fc33 	bl	800585c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	b29b      	uxth	r3, r3
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7f9 fd64 	bl	8002ad4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800900c:	e099      	b.n	8009142 <HAL_UART_IRQHandler+0x50e>
 800900e:	bf00      	nop
 8009010:	080096bf 	.word	0x080096bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800901c:	b29b      	uxth	r3, r3
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009028:	b29b      	uxth	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 808b 	beq.w	8009146 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009030:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 8086 	beq.w	8009146 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	330c      	adds	r3, #12
 8009040:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009044:	e853 3f00 	ldrex	r3, [r3]
 8009048:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800904a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009050:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	330c      	adds	r3, #12
 800905a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800905e:	647a      	str	r2, [r7, #68]	; 0x44
 8009060:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009062:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009064:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009066:	e841 2300 	strex	r3, r2, [r1]
 800906a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800906c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1e3      	bne.n	800903a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3314      	adds	r3, #20
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	623b      	str	r3, [r7, #32]
   return(result);
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	f023 0301 	bic.w	r3, r3, #1
 8009088:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3314      	adds	r3, #20
 8009092:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009096:	633a      	str	r2, [r7, #48]	; 0x30
 8009098:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800909c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e3      	bne.n	8009072 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2220      	movs	r2, #32
 80090ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	330c      	adds	r3, #12
 80090be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	e853 3f00 	ldrex	r3, [r3]
 80090c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f023 0310 	bic.w	r3, r3, #16
 80090ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	330c      	adds	r3, #12
 80090d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80090dc:	61fa      	str	r2, [r7, #28]
 80090de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e0:	69b9      	ldr	r1, [r7, #24]
 80090e2:	69fa      	ldr	r2, [r7, #28]
 80090e4:	e841 2300 	strex	r3, r2, [r1]
 80090e8:	617b      	str	r3, [r7, #20]
   return(result);
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1e3      	bne.n	80090b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7f9 fcec 	bl	8002ad4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80090fc:	e023      	b.n	8009146 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80090fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009106:	2b00      	cmp	r3, #0
 8009108:	d009      	beq.n	800911e <HAL_UART_IRQHandler+0x4ea>
 800910a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800910e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fae5 	bl	80096e6 <UART_Transmit_IT>
    return;
 800911c:	e014      	b.n	8009148 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800911e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00e      	beq.n	8009148 <HAL_UART_IRQHandler+0x514>
 800912a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800912e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009132:	2b00      	cmp	r3, #0
 8009134:	d008      	beq.n	8009148 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fb25 	bl	8009786 <UART_EndTransmit_IT>
    return;
 800913c:	e004      	b.n	8009148 <HAL_UART_IRQHandler+0x514>
    return;
 800913e:	bf00      	nop
 8009140:	e002      	b.n	8009148 <HAL_UART_IRQHandler+0x514>
      return;
 8009142:	bf00      	nop
 8009144:	e000      	b.n	8009148 <HAL_UART_IRQHandler+0x514>
      return;
 8009146:	bf00      	nop
  }
}
 8009148:	37e8      	adds	r7, #232	; 0xe8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop

08009150 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b09c      	sub	sp, #112	; 0x70
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d172      	bne.n	80092a2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80091bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091be:	2200      	movs	r2, #0
 80091c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	330c      	adds	r3, #12
 80091c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80091d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80091da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	330c      	adds	r3, #12
 80091e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80091e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091ea:	e841 2300 	strex	r3, r2, [r1]
 80091ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80091f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1e5      	bne.n	80091c2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3314      	adds	r3, #20
 80091fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009200:	e853 3f00 	ldrex	r3, [r3]
 8009204:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009208:	f023 0301 	bic.w	r3, r3, #1
 800920c:	667b      	str	r3, [r7, #100]	; 0x64
 800920e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3314      	adds	r3, #20
 8009214:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009216:	647a      	str	r2, [r7, #68]	; 0x44
 8009218:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800921c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e5      	bne.n	80091f6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800922a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3314      	adds	r3, #20
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	e853 3f00 	ldrex	r3, [r3]
 8009238:	623b      	str	r3, [r7, #32]
   return(result);
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009240:	663b      	str	r3, [r7, #96]	; 0x60
 8009242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3314      	adds	r3, #20
 8009248:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800924a:	633a      	str	r2, [r7, #48]	; 0x30
 800924c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009252:	e841 2300 	strex	r3, r2, [r1]
 8009256:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1e5      	bne.n	800922a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800925e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009260:	2220      	movs	r2, #32
 8009262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926a:	2b01      	cmp	r3, #1
 800926c:	d119      	bne.n	80092a2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800926e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	330c      	adds	r3, #12
 8009274:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	e853 3f00 	ldrex	r3, [r3]
 800927c:	60fb      	str	r3, [r7, #12]
   return(result);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f023 0310 	bic.w	r3, r3, #16
 8009284:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	330c      	adds	r3, #12
 800928c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800928e:	61fa      	str	r2, [r7, #28]
 8009290:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	69b9      	ldr	r1, [r7, #24]
 8009294:	69fa      	ldr	r2, [r7, #28]
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	617b      	str	r3, [r7, #20]
   return(result);
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e5      	bne.n	800926e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d106      	bne.n	80092b8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092ae:	4619      	mov	r1, r3
 80092b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80092b2:	f7f9 fc0f 	bl	8002ad4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092b6:	e002      	b.n	80092be <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80092b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80092ba:	f7ff ff53 	bl	8009164 <HAL_UART_RxCpltCallback>
}
 80092be:	bf00      	nop
 80092c0:	3770      	adds	r7, #112	; 0x70
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d108      	bne.n	80092ee <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092e0:	085b      	lsrs	r3, r3, #1
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	4619      	mov	r1, r3
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f7f9 fbf4 	bl	8002ad4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092ec:	e002      	b.n	80092f4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f7ff ff42 	bl	8009178 <HAL_UART_RxHalfCpltCallback>
}
 80092f4:	bf00      	nop
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009304:	2300      	movs	r3, #0
 8009306:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009318:	2b80      	cmp	r3, #128	; 0x80
 800931a:	bf0c      	ite	eq
 800931c:	2301      	moveq	r3, #1
 800931e:	2300      	movne	r3, #0
 8009320:	b2db      	uxtb	r3, r3
 8009322:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2b21      	cmp	r3, #33	; 0x21
 800932e:	d108      	bne.n	8009342 <UART_DMAError+0x46>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d005      	beq.n	8009342 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2200      	movs	r2, #0
 800933a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800933c:	68b8      	ldr	r0, [r7, #8]
 800933e:	f000 f933 	bl	80095a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800934c:	2b40      	cmp	r3, #64	; 0x40
 800934e:	bf0c      	ite	eq
 8009350:	2301      	moveq	r3, #1
 8009352:	2300      	movne	r3, #0
 8009354:	b2db      	uxtb	r3, r3
 8009356:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b22      	cmp	r3, #34	; 0x22
 8009362:	d108      	bne.n	8009376 <UART_DMAError+0x7a>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d005      	beq.n	8009376 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2200      	movs	r2, #0
 800936e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009370:	68b8      	ldr	r0, [r7, #8]
 8009372:	f000 f941 	bl	80095f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937a:	f043 0210 	orr.w	r2, r3, #16
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009382:	68b8      	ldr	r0, [r7, #8]
 8009384:	f7ff ff02 	bl	800918c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009388:	bf00      	nop
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b090      	sub	sp, #64	; 0x40
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	603b      	str	r3, [r7, #0]
 800939c:	4613      	mov	r3, r2
 800939e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093a0:	e050      	b.n	8009444 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a8:	d04c      	beq.n	8009444 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80093aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d007      	beq.n	80093c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80093b0:	f7fb fbfa 	bl	8004ba8 <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093bc:	429a      	cmp	r2, r3
 80093be:	d241      	bcs.n	8009444 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	330c      	adds	r3, #12
 80093c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ca:	e853 3f00 	ldrex	r3, [r3]
 80093ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80093d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	330c      	adds	r3, #12
 80093de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093e0:	637a      	str	r2, [r7, #52]	; 0x34
 80093e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093e8:	e841 2300 	strex	r3, r2, [r1]
 80093ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1e5      	bne.n	80093c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3314      	adds	r3, #20
 80093fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	e853 3f00 	ldrex	r3, [r3]
 8009402:	613b      	str	r3, [r7, #16]
   return(result);
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f023 0301 	bic.w	r3, r3, #1
 800940a:	63bb      	str	r3, [r7, #56]	; 0x38
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3314      	adds	r3, #20
 8009412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009414:	623a      	str	r2, [r7, #32]
 8009416:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	69f9      	ldr	r1, [r7, #28]
 800941a:	6a3a      	ldr	r2, [r7, #32]
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	61bb      	str	r3, [r7, #24]
   return(result);
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e5      	bne.n	80093f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2220      	movs	r2, #32
 800942c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2220      	movs	r2, #32
 8009434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e00f      	b.n	8009464 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	4013      	ands	r3, r2
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	429a      	cmp	r2, r3
 8009452:	bf0c      	ite	eq
 8009454:	2301      	moveq	r3, #1
 8009456:	2300      	movne	r3, #0
 8009458:	b2db      	uxtb	r3, r3
 800945a:	461a      	mov	r2, r3
 800945c:	79fb      	ldrb	r3, [r7, #7]
 800945e:	429a      	cmp	r2, r3
 8009460:	d09f      	beq.n	80093a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3740      	adds	r7, #64	; 0x40
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b098      	sub	sp, #96	; 0x60
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	4613      	mov	r3, r2
 8009478:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	88fa      	ldrh	r2, [r7, #6]
 8009484:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2222      	movs	r2, #34	; 0x22
 8009490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009498:	4a40      	ldr	r2, [pc, #256]	; (800959c <UART_Start_Receive_DMA+0x130>)
 800949a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a0:	4a3f      	ldr	r2, [pc, #252]	; (80095a0 <UART_Start_Receive_DMA+0x134>)
 80094a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a8:	4a3e      	ldr	r2, [pc, #248]	; (80095a4 <UART_Start_Receive_DMA+0x138>)
 80094aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b0:	2200      	movs	r2, #0
 80094b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80094b4:	f107 0308 	add.w	r3, r7, #8
 80094b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3304      	adds	r3, #4
 80094c4:	4619      	mov	r1, r3
 80094c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	88fb      	ldrh	r3, [r7, #6]
 80094cc:	f7fc f96e 	bl	80057ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80094d0:	2300      	movs	r3, #0
 80094d2:	613b      	str	r3, [r7, #16]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	613b      	str	r3, [r7, #16]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	613b      	str	r3, [r7, #16]
 80094e4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d019      	beq.n	800952a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	330c      	adds	r3, #12
 80094fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009500:	e853 3f00 	ldrex	r3, [r3]
 8009504:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800950c:	65bb      	str	r3, [r7, #88]	; 0x58
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	330c      	adds	r3, #12
 8009514:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009516:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009518:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800951c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800951e:	e841 2300 	strex	r3, r2, [r1]
 8009522:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1e5      	bne.n	80094f6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	3314      	adds	r3, #20
 8009530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	e853 3f00 	ldrex	r3, [r3]
 8009538:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953c:	f043 0301 	orr.w	r3, r3, #1
 8009540:	657b      	str	r3, [r7, #84]	; 0x54
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3314      	adds	r3, #20
 8009548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800954a:	63ba      	str	r2, [r7, #56]	; 0x38
 800954c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009552:	e841 2300 	strex	r3, r2, [r1]
 8009556:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1e5      	bne.n	800952a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3314      	adds	r3, #20
 8009564:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	e853 3f00 	ldrex	r3, [r3]
 800956c:	617b      	str	r3, [r7, #20]
   return(result);
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009574:	653b      	str	r3, [r7, #80]	; 0x50
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3314      	adds	r3, #20
 800957c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800957e:	627a      	str	r2, [r7, #36]	; 0x24
 8009580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	6a39      	ldr	r1, [r7, #32]
 8009584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009586:	e841 2300 	strex	r3, r2, [r1]
 800958a:	61fb      	str	r3, [r7, #28]
   return(result);
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1e5      	bne.n	800955e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3760      	adds	r7, #96	; 0x60
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	080091a1 	.word	0x080091a1
 80095a0:	080092c7 	.word	0x080092c7
 80095a4:	080092fd 	.word	0x080092fd

080095a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b089      	sub	sp, #36	; 0x24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	330c      	adds	r3, #12
 80095b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	e853 3f00 	ldrex	r3, [r3]
 80095be:	60bb      	str	r3, [r7, #8]
   return(result);
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80095c6:	61fb      	str	r3, [r7, #28]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	330c      	adds	r3, #12
 80095ce:	69fa      	ldr	r2, [r7, #28]
 80095d0:	61ba      	str	r2, [r7, #24]
 80095d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d4:	6979      	ldr	r1, [r7, #20]
 80095d6:	69ba      	ldr	r2, [r7, #24]
 80095d8:	e841 2300 	strex	r3, r2, [r1]
 80095dc:	613b      	str	r3, [r7, #16]
   return(result);
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e5      	bne.n	80095b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2220      	movs	r2, #32
 80095e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80095ec:	bf00      	nop
 80095ee:	3724      	adds	r7, #36	; 0x24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b095      	sub	sp, #84	; 0x54
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	330c      	adds	r3, #12
 8009606:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960a:	e853 3f00 	ldrex	r3, [r3]
 800960e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009612:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	330c      	adds	r3, #12
 800961e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009620:	643a      	str	r2, [r7, #64]	; 0x40
 8009622:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009624:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009626:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009628:	e841 2300 	strex	r3, r2, [r1]
 800962c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800962e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1e5      	bne.n	8009600 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3314      	adds	r3, #20
 800963a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963c:	6a3b      	ldr	r3, [r7, #32]
 800963e:	e853 3f00 	ldrex	r3, [r3]
 8009642:	61fb      	str	r3, [r7, #28]
   return(result);
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	f023 0301 	bic.w	r3, r3, #1
 800964a:	64bb      	str	r3, [r7, #72]	; 0x48
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3314      	adds	r3, #20
 8009652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009654:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800965a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800965c:	e841 2300 	strex	r3, r2, [r1]
 8009660:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1e5      	bne.n	8009634 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966c:	2b01      	cmp	r3, #1
 800966e:	d119      	bne.n	80096a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	330c      	adds	r3, #12
 8009676:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	e853 3f00 	ldrex	r3, [r3]
 800967e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f023 0310 	bic.w	r3, r3, #16
 8009686:	647b      	str	r3, [r7, #68]	; 0x44
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	330c      	adds	r3, #12
 800968e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009690:	61ba      	str	r2, [r7, #24]
 8009692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009694:	6979      	ldr	r1, [r7, #20]
 8009696:	69ba      	ldr	r2, [r7, #24]
 8009698:	e841 2300 	strex	r3, r2, [r1]
 800969c:	613b      	str	r3, [r7, #16]
   return(result);
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1e5      	bne.n	8009670 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2220      	movs	r2, #32
 80096a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80096b2:	bf00      	nop
 80096b4:	3754      	adds	r7, #84	; 0x54
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7ff fd57 	bl	800918c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096de:	bf00      	nop
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b085      	sub	sp, #20
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b21      	cmp	r3, #33	; 0x21
 80096f8:	d13e      	bne.n	8009778 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009702:	d114      	bne.n	800972e <UART_Transmit_IT+0x48>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d110      	bne.n	800972e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a1b      	ldr	r3, [r3, #32]
 8009710:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009720:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	1c9a      	adds	r2, r3, #2
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	621a      	str	r2, [r3, #32]
 800972c:	e008      	b.n	8009740 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	1c59      	adds	r1, r3, #1
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	6211      	str	r1, [r2, #32]
 8009738:	781a      	ldrb	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009744:	b29b      	uxth	r3, r3
 8009746:	3b01      	subs	r3, #1
 8009748:	b29b      	uxth	r3, r3
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	4619      	mov	r1, r3
 800974e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10f      	bne.n	8009774 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68da      	ldr	r2, [r3, #12]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009762:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009772:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	e000      	b.n	800977a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009778:	2302      	movs	r3, #2
  }
}
 800977a:	4618      	mov	r0, r3
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b082      	sub	sp, #8
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68da      	ldr	r2, [r3, #12]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800979c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2220      	movs	r2, #32
 80097a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff fcd2 	bl	8009150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b08c      	sub	sp, #48	; 0x30
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b22      	cmp	r3, #34	; 0x22
 80097c8:	f040 80ab 	bne.w	8009922 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097d4:	d117      	bne.n	8009806 <UART_Receive_IT+0x50>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d113      	bne.n	8009806 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80097de:	2300      	movs	r3, #0
 80097e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fe:	1c9a      	adds	r2, r3, #2
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	629a      	str	r2, [r3, #40]	; 0x28
 8009804:	e026      	b.n	8009854 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800980c:	2300      	movs	r3, #0
 800980e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009818:	d007      	beq.n	800982a <UART_Receive_IT+0x74>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10a      	bne.n	8009838 <UART_Receive_IT+0x82>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d106      	bne.n	8009838 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	b2da      	uxtb	r2, r3
 8009832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009834:	701a      	strb	r2, [r3, #0]
 8009836:	e008      	b.n	800984a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	b2db      	uxtb	r3, r3
 8009840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009844:	b2da      	uxtb	r2, r3
 8009846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009848:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009858:	b29b      	uxth	r3, r3
 800985a:	3b01      	subs	r3, #1
 800985c:	b29b      	uxth	r3, r3
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	4619      	mov	r1, r3
 8009862:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009864:	2b00      	cmp	r3, #0
 8009866:	d15a      	bne.n	800991e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f022 0220 	bic.w	r2, r2, #32
 8009876:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009886:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	695a      	ldr	r2, [r3, #20]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 0201 	bic.w	r2, r2, #1
 8009896:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2220      	movs	r2, #32
 800989c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d135      	bne.n	8009914 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	330c      	adds	r3, #12
 80098b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	613b      	str	r3, [r7, #16]
   return(result);
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	f023 0310 	bic.w	r3, r3, #16
 80098c4:	627b      	str	r3, [r7, #36]	; 0x24
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	330c      	adds	r3, #12
 80098cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ce:	623a      	str	r2, [r7, #32]
 80098d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	69f9      	ldr	r1, [r7, #28]
 80098d4:	6a3a      	ldr	r2, [r7, #32]
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	61bb      	str	r3, [r7, #24]
   return(result);
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e5      	bne.n	80098ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0310 	and.w	r3, r3, #16
 80098ec:	2b10      	cmp	r3, #16
 80098ee:	d10a      	bne.n	8009906 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098f0:	2300      	movs	r3, #0
 80098f2:	60fb      	str	r3, [r7, #12]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800990a:	4619      	mov	r1, r3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7f9 f8e1 	bl	8002ad4 <HAL_UARTEx_RxEventCallback>
 8009912:	e002      	b.n	800991a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7ff fc25 	bl	8009164 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	e002      	b.n	8009924 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	e000      	b.n	8009924 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009922:	2302      	movs	r3, #2
  }
}
 8009924:	4618      	mov	r0, r3
 8009926:	3730      	adds	r7, #48	; 0x30
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800992c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009930:	b0c0      	sub	sp, #256	; 0x100
 8009932:	af00      	add	r7, sp, #0
 8009934:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009948:	68d9      	ldr	r1, [r3, #12]
 800994a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	ea40 0301 	orr.w	r3, r0, r1
 8009954:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800995a:	689a      	ldr	r2, [r3, #8]
 800995c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	431a      	orrs	r2, r3
 8009964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	431a      	orrs	r2, r3
 800996c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009970:	69db      	ldr	r3, [r3, #28]
 8009972:	4313      	orrs	r3, r2
 8009974:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009984:	f021 010c 	bic.w	r1, r1, #12
 8009988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009992:	430b      	orrs	r3, r1
 8009994:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80099a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099a6:	6999      	ldr	r1, [r3, #24]
 80099a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	ea40 0301 	orr.w	r3, r0, r1
 80099b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80099b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	4b8f      	ldr	r3, [pc, #572]	; (8009bf8 <UART_SetConfig+0x2cc>)
 80099bc:	429a      	cmp	r2, r3
 80099be:	d005      	beq.n	80099cc <UART_SetConfig+0xa0>
 80099c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	4b8d      	ldr	r3, [pc, #564]	; (8009bfc <UART_SetConfig+0x2d0>)
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d104      	bne.n	80099d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80099cc:	f7fd fd0c 	bl	80073e8 <HAL_RCC_GetPCLK2Freq>
 80099d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80099d4:	e003      	b.n	80099de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80099d6:	f7fd fcf3 	bl	80073c0 <HAL_RCC_GetPCLK1Freq>
 80099da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099e8:	f040 810c 	bne.w	8009c04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80099ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099f0:	2200      	movs	r2, #0
 80099f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80099f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80099fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80099fe:	4622      	mov	r2, r4
 8009a00:	462b      	mov	r3, r5
 8009a02:	1891      	adds	r1, r2, r2
 8009a04:	65b9      	str	r1, [r7, #88]	; 0x58
 8009a06:	415b      	adcs	r3, r3
 8009a08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009a0e:	4621      	mov	r1, r4
 8009a10:	eb12 0801 	adds.w	r8, r2, r1
 8009a14:	4629      	mov	r1, r5
 8009a16:	eb43 0901 	adc.w	r9, r3, r1
 8009a1a:	f04f 0200 	mov.w	r2, #0
 8009a1e:	f04f 0300 	mov.w	r3, #0
 8009a22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a2e:	4690      	mov	r8, r2
 8009a30:	4699      	mov	r9, r3
 8009a32:	4623      	mov	r3, r4
 8009a34:	eb18 0303 	adds.w	r3, r8, r3
 8009a38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a3c:	462b      	mov	r3, r5
 8009a3e:	eb49 0303 	adc.w	r3, r9, r3
 8009a42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009a56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	18db      	adds	r3, r3, r3
 8009a5e:	653b      	str	r3, [r7, #80]	; 0x50
 8009a60:	4613      	mov	r3, r2
 8009a62:	eb42 0303 	adc.w	r3, r2, r3
 8009a66:	657b      	str	r3, [r7, #84]	; 0x54
 8009a68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009a70:	f7f7 f91a 	bl	8000ca8 <__aeabi_uldivmod>
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	4b61      	ldr	r3, [pc, #388]	; (8009c00 <UART_SetConfig+0x2d4>)
 8009a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8009a7e:	095b      	lsrs	r3, r3, #5
 8009a80:	011c      	lsls	r4, r3, #4
 8009a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a86:	2200      	movs	r2, #0
 8009a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009a90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009a94:	4642      	mov	r2, r8
 8009a96:	464b      	mov	r3, r9
 8009a98:	1891      	adds	r1, r2, r2
 8009a9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8009a9c:	415b      	adcs	r3, r3
 8009a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009aa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009aa4:	4641      	mov	r1, r8
 8009aa6:	eb12 0a01 	adds.w	sl, r2, r1
 8009aaa:	4649      	mov	r1, r9
 8009aac:	eb43 0b01 	adc.w	fp, r3, r1
 8009ab0:	f04f 0200 	mov.w	r2, #0
 8009ab4:	f04f 0300 	mov.w	r3, #0
 8009ab8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009abc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009ac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ac4:	4692      	mov	sl, r2
 8009ac6:	469b      	mov	fp, r3
 8009ac8:	4643      	mov	r3, r8
 8009aca:	eb1a 0303 	adds.w	r3, sl, r3
 8009ace:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ad2:	464b      	mov	r3, r9
 8009ad4:	eb4b 0303 	adc.w	r3, fp, r3
 8009ad8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ae8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009aec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009af0:	460b      	mov	r3, r1
 8009af2:	18db      	adds	r3, r3, r3
 8009af4:	643b      	str	r3, [r7, #64]	; 0x40
 8009af6:	4613      	mov	r3, r2
 8009af8:	eb42 0303 	adc.w	r3, r2, r3
 8009afc:	647b      	str	r3, [r7, #68]	; 0x44
 8009afe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009b02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009b06:	f7f7 f8cf 	bl	8000ca8 <__aeabi_uldivmod>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4611      	mov	r1, r2
 8009b10:	4b3b      	ldr	r3, [pc, #236]	; (8009c00 <UART_SetConfig+0x2d4>)
 8009b12:	fba3 2301 	umull	r2, r3, r3, r1
 8009b16:	095b      	lsrs	r3, r3, #5
 8009b18:	2264      	movs	r2, #100	; 0x64
 8009b1a:	fb02 f303 	mul.w	r3, r2, r3
 8009b1e:	1acb      	subs	r3, r1, r3
 8009b20:	00db      	lsls	r3, r3, #3
 8009b22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009b26:	4b36      	ldr	r3, [pc, #216]	; (8009c00 <UART_SetConfig+0x2d4>)
 8009b28:	fba3 2302 	umull	r2, r3, r3, r2
 8009b2c:	095b      	lsrs	r3, r3, #5
 8009b2e:	005b      	lsls	r3, r3, #1
 8009b30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b34:	441c      	add	r4, r3
 8009b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009b44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009b48:	4642      	mov	r2, r8
 8009b4a:	464b      	mov	r3, r9
 8009b4c:	1891      	adds	r1, r2, r2
 8009b4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009b50:	415b      	adcs	r3, r3
 8009b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b58:	4641      	mov	r1, r8
 8009b5a:	1851      	adds	r1, r2, r1
 8009b5c:	6339      	str	r1, [r7, #48]	; 0x30
 8009b5e:	4649      	mov	r1, r9
 8009b60:	414b      	adcs	r3, r1
 8009b62:	637b      	str	r3, [r7, #52]	; 0x34
 8009b64:	f04f 0200 	mov.w	r2, #0
 8009b68:	f04f 0300 	mov.w	r3, #0
 8009b6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009b70:	4659      	mov	r1, fp
 8009b72:	00cb      	lsls	r3, r1, #3
 8009b74:	4651      	mov	r1, sl
 8009b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b7a:	4651      	mov	r1, sl
 8009b7c:	00ca      	lsls	r2, r1, #3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	4619      	mov	r1, r3
 8009b82:	4603      	mov	r3, r0
 8009b84:	4642      	mov	r2, r8
 8009b86:	189b      	adds	r3, r3, r2
 8009b88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b8c:	464b      	mov	r3, r9
 8009b8e:	460a      	mov	r2, r1
 8009b90:	eb42 0303 	adc.w	r3, r2, r3
 8009b94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ba4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009ba8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009bac:	460b      	mov	r3, r1
 8009bae:	18db      	adds	r3, r3, r3
 8009bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	eb42 0303 	adc.w	r3, r2, r3
 8009bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009bbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009bc2:	f7f7 f871 	bl	8000ca8 <__aeabi_uldivmod>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4b0d      	ldr	r3, [pc, #52]	; (8009c00 <UART_SetConfig+0x2d4>)
 8009bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8009bd0:	095b      	lsrs	r3, r3, #5
 8009bd2:	2164      	movs	r1, #100	; 0x64
 8009bd4:	fb01 f303 	mul.w	r3, r1, r3
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	00db      	lsls	r3, r3, #3
 8009bdc:	3332      	adds	r3, #50	; 0x32
 8009bde:	4a08      	ldr	r2, [pc, #32]	; (8009c00 <UART_SetConfig+0x2d4>)
 8009be0:	fba2 2303 	umull	r2, r3, r2, r3
 8009be4:	095b      	lsrs	r3, r3, #5
 8009be6:	f003 0207 	and.w	r2, r3, #7
 8009bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4422      	add	r2, r4
 8009bf2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009bf4:	e105      	b.n	8009e02 <UART_SetConfig+0x4d6>
 8009bf6:	bf00      	nop
 8009bf8:	40011000 	.word	0x40011000
 8009bfc:	40011400 	.word	0x40011400
 8009c00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009c12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009c16:	4642      	mov	r2, r8
 8009c18:	464b      	mov	r3, r9
 8009c1a:	1891      	adds	r1, r2, r2
 8009c1c:	6239      	str	r1, [r7, #32]
 8009c1e:	415b      	adcs	r3, r3
 8009c20:	627b      	str	r3, [r7, #36]	; 0x24
 8009c22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c26:	4641      	mov	r1, r8
 8009c28:	1854      	adds	r4, r2, r1
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	eb43 0501 	adc.w	r5, r3, r1
 8009c30:	f04f 0200 	mov.w	r2, #0
 8009c34:	f04f 0300 	mov.w	r3, #0
 8009c38:	00eb      	lsls	r3, r5, #3
 8009c3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c3e:	00e2      	lsls	r2, r4, #3
 8009c40:	4614      	mov	r4, r2
 8009c42:	461d      	mov	r5, r3
 8009c44:	4643      	mov	r3, r8
 8009c46:	18e3      	adds	r3, r4, r3
 8009c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009c4c:	464b      	mov	r3, r9
 8009c4e:	eb45 0303 	adc.w	r3, r5, r3
 8009c52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c66:	f04f 0200 	mov.w	r2, #0
 8009c6a:	f04f 0300 	mov.w	r3, #0
 8009c6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009c72:	4629      	mov	r1, r5
 8009c74:	008b      	lsls	r3, r1, #2
 8009c76:	4621      	mov	r1, r4
 8009c78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	008a      	lsls	r2, r1, #2
 8009c80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009c84:	f7f7 f810 	bl	8000ca8 <__aeabi_uldivmod>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4b60      	ldr	r3, [pc, #384]	; (8009e10 <UART_SetConfig+0x4e4>)
 8009c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8009c92:	095b      	lsrs	r3, r3, #5
 8009c94:	011c      	lsls	r4, r3, #4
 8009c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ca0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ca4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009ca8:	4642      	mov	r2, r8
 8009caa:	464b      	mov	r3, r9
 8009cac:	1891      	adds	r1, r2, r2
 8009cae:	61b9      	str	r1, [r7, #24]
 8009cb0:	415b      	adcs	r3, r3
 8009cb2:	61fb      	str	r3, [r7, #28]
 8009cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009cb8:	4641      	mov	r1, r8
 8009cba:	1851      	adds	r1, r2, r1
 8009cbc:	6139      	str	r1, [r7, #16]
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	414b      	adcs	r3, r1
 8009cc2:	617b      	str	r3, [r7, #20]
 8009cc4:	f04f 0200 	mov.w	r2, #0
 8009cc8:	f04f 0300 	mov.w	r3, #0
 8009ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009cd0:	4659      	mov	r1, fp
 8009cd2:	00cb      	lsls	r3, r1, #3
 8009cd4:	4651      	mov	r1, sl
 8009cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cda:	4651      	mov	r1, sl
 8009cdc:	00ca      	lsls	r2, r1, #3
 8009cde:	4610      	mov	r0, r2
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	189b      	adds	r3, r3, r2
 8009ce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009cec:	464b      	mov	r3, r9
 8009cee:	460a      	mov	r2, r1
 8009cf0:	eb42 0303 	adc.w	r3, r2, r3
 8009cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009d04:	f04f 0200 	mov.w	r2, #0
 8009d08:	f04f 0300 	mov.w	r3, #0
 8009d0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009d10:	4649      	mov	r1, r9
 8009d12:	008b      	lsls	r3, r1, #2
 8009d14:	4641      	mov	r1, r8
 8009d16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d1a:	4641      	mov	r1, r8
 8009d1c:	008a      	lsls	r2, r1, #2
 8009d1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009d22:	f7f6 ffc1 	bl	8000ca8 <__aeabi_uldivmod>
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4b39      	ldr	r3, [pc, #228]	; (8009e10 <UART_SetConfig+0x4e4>)
 8009d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8009d30:	095b      	lsrs	r3, r3, #5
 8009d32:	2164      	movs	r1, #100	; 0x64
 8009d34:	fb01 f303 	mul.w	r3, r1, r3
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	011b      	lsls	r3, r3, #4
 8009d3c:	3332      	adds	r3, #50	; 0x32
 8009d3e:	4a34      	ldr	r2, [pc, #208]	; (8009e10 <UART_SetConfig+0x4e4>)
 8009d40:	fba2 2303 	umull	r2, r3, r2, r3
 8009d44:	095b      	lsrs	r3, r3, #5
 8009d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d4a:	441c      	add	r4, r3
 8009d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d50:	2200      	movs	r2, #0
 8009d52:	673b      	str	r3, [r7, #112]	; 0x70
 8009d54:	677a      	str	r2, [r7, #116]	; 0x74
 8009d56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009d5a:	4642      	mov	r2, r8
 8009d5c:	464b      	mov	r3, r9
 8009d5e:	1891      	adds	r1, r2, r2
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	415b      	adcs	r3, r3
 8009d64:	60fb      	str	r3, [r7, #12]
 8009d66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d6a:	4641      	mov	r1, r8
 8009d6c:	1851      	adds	r1, r2, r1
 8009d6e:	6039      	str	r1, [r7, #0]
 8009d70:	4649      	mov	r1, r9
 8009d72:	414b      	adcs	r3, r1
 8009d74:	607b      	str	r3, [r7, #4]
 8009d76:	f04f 0200 	mov.w	r2, #0
 8009d7a:	f04f 0300 	mov.w	r3, #0
 8009d7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009d82:	4659      	mov	r1, fp
 8009d84:	00cb      	lsls	r3, r1, #3
 8009d86:	4651      	mov	r1, sl
 8009d88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d8c:	4651      	mov	r1, sl
 8009d8e:	00ca      	lsls	r2, r1, #3
 8009d90:	4610      	mov	r0, r2
 8009d92:	4619      	mov	r1, r3
 8009d94:	4603      	mov	r3, r0
 8009d96:	4642      	mov	r2, r8
 8009d98:	189b      	adds	r3, r3, r2
 8009d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d9c:	464b      	mov	r3, r9
 8009d9e:	460a      	mov	r2, r1
 8009da0:	eb42 0303 	adc.w	r3, r2, r3
 8009da4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	663b      	str	r3, [r7, #96]	; 0x60
 8009db0:	667a      	str	r2, [r7, #100]	; 0x64
 8009db2:	f04f 0200 	mov.w	r2, #0
 8009db6:	f04f 0300 	mov.w	r3, #0
 8009dba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	008b      	lsls	r3, r1, #2
 8009dc2:	4641      	mov	r1, r8
 8009dc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009dc8:	4641      	mov	r1, r8
 8009dca:	008a      	lsls	r2, r1, #2
 8009dcc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009dd0:	f7f6 ff6a 	bl	8000ca8 <__aeabi_uldivmod>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4b0d      	ldr	r3, [pc, #52]	; (8009e10 <UART_SetConfig+0x4e4>)
 8009dda:	fba3 1302 	umull	r1, r3, r3, r2
 8009dde:	095b      	lsrs	r3, r3, #5
 8009de0:	2164      	movs	r1, #100	; 0x64
 8009de2:	fb01 f303 	mul.w	r3, r1, r3
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	011b      	lsls	r3, r3, #4
 8009dea:	3332      	adds	r3, #50	; 0x32
 8009dec:	4a08      	ldr	r2, [pc, #32]	; (8009e10 <UART_SetConfig+0x4e4>)
 8009dee:	fba2 2303 	umull	r2, r3, r2, r3
 8009df2:	095b      	lsrs	r3, r3, #5
 8009df4:	f003 020f 	and.w	r2, r3, #15
 8009df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4422      	add	r2, r4
 8009e00:	609a      	str	r2, [r3, #8]
}
 8009e02:	bf00      	nop
 8009e04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e0e:	bf00      	nop
 8009e10:	51eb851f 	.word	0x51eb851f

08009e14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009e18:	4904      	ldr	r1, [pc, #16]	; (8009e2c <MX_FATFS_Init+0x18>)
 8009e1a:	4805      	ldr	r0, [pc, #20]	; (8009e30 <MX_FATFS_Init+0x1c>)
 8009e1c:	f003 fb52 	bl	800d4c4 <FATFS_LinkDriver>
 8009e20:	4603      	mov	r3, r0
 8009e22:	461a      	mov	r2, r3
 8009e24:	4b03      	ldr	r3, [pc, #12]	; (8009e34 <MX_FATFS_Init+0x20>)
 8009e26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009e28:	bf00      	nop
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	20001250 	.word	0x20001250
 8009e30:	20000010 	.word	0x20000010
 8009e34:	2000124c 	.word	0x2000124c

08009e38 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009e3c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8009e52:	79fb      	ldrb	r3, [r7, #7]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7f7 facb 	bl	80013f0 <SD_disk_initialize>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b082      	sub	sp, #8
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	 return SD_disk_status(pdrv);
 8009e70:	79fb      	ldrb	r3, [r7, #7]
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7f7 fba6 	bl	80015c4 <SD_disk_status>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60b9      	str	r1, [r7, #8]
 8009e8c:	607a      	str	r2, [r7, #4]
 8009e8e:	603b      	str	r3, [r7, #0]
 8009e90:	4603      	mov	r3, r0
 8009e92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8009e94:	7bf8      	ldrb	r0, [r7, #15]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	68b9      	ldr	r1, [r7, #8]
 8009e9c:	f7f7 fba8 	bl	80015f0 <SD_disk_read>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60b9      	str	r1, [r7, #8]
 8009eb4:	607a      	str	r2, [r7, #4]
 8009eb6:	603b      	str	r3, [r7, #0]
 8009eb8:	4603      	mov	r3, r0
 8009eba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8009ebc:	7bf8      	ldrb	r0, [r7, #15]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	68b9      	ldr	r1, [r7, #8]
 8009ec4:	f7f7 fbfe 	bl	80016c4 <SD_disk_write>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	603a      	str	r2, [r7, #0]
 8009ede:	71fb      	strb	r3, [r7, #7]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8009ee4:	79fb      	ldrb	r3, [r7, #7]
 8009ee6:	79b9      	ldrb	r1, [r7, #6]
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7f7 fc6e 	bl	80017cc <SD_disk_ioctl>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	4603      	mov	r3, r0
 8009f04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	4a08      	ldr	r2, [pc, #32]	; (8009f2c <disk_status+0x30>)
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4413      	add	r3, r2
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	79fa      	ldrb	r2, [r7, #7]
 8009f14:	4905      	ldr	r1, [pc, #20]	; (8009f2c <disk_status+0x30>)
 8009f16:	440a      	add	r2, r1
 8009f18:	7a12      	ldrb	r2, [r2, #8]
 8009f1a:	4610      	mov	r0, r2
 8009f1c:	4798      	blx	r3
 8009f1e:	4603      	mov	r3, r0
 8009f20:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	2000147c 	.word	0x2000147c

08009f30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	4603      	mov	r3, r0
 8009f38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009f3e:	79fb      	ldrb	r3, [r7, #7]
 8009f40:	4a0d      	ldr	r2, [pc, #52]	; (8009f78 <disk_initialize+0x48>)
 8009f42:	5cd3      	ldrb	r3, [r2, r3]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d111      	bne.n	8009f6c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009f48:	79fb      	ldrb	r3, [r7, #7]
 8009f4a:	4a0b      	ldr	r2, [pc, #44]	; (8009f78 <disk_initialize+0x48>)
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009f50:	79fb      	ldrb	r3, [r7, #7]
 8009f52:	4a09      	ldr	r2, [pc, #36]	; (8009f78 <disk_initialize+0x48>)
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	4413      	add	r3, r2
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	79fa      	ldrb	r2, [r7, #7]
 8009f5e:	4906      	ldr	r1, [pc, #24]	; (8009f78 <disk_initialize+0x48>)
 8009f60:	440a      	add	r2, r1
 8009f62:	7a12      	ldrb	r2, [r2, #8]
 8009f64:	4610      	mov	r0, r2
 8009f66:	4798      	blx	r3
 8009f68:	4603      	mov	r3, r0
 8009f6a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	2000147c 	.word	0x2000147c

08009f7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009f7c:	b590      	push	{r4, r7, lr}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60b9      	str	r1, [r7, #8]
 8009f84:	607a      	str	r2, [r7, #4]
 8009f86:	603b      	str	r3, [r7, #0]
 8009f88:	4603      	mov	r3, r0
 8009f8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009f8c:	7bfb      	ldrb	r3, [r7, #15]
 8009f8e:	4a0a      	ldr	r2, [pc, #40]	; (8009fb8 <disk_read+0x3c>)
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	689c      	ldr	r4, [r3, #8]
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
 8009f9a:	4a07      	ldr	r2, [pc, #28]	; (8009fb8 <disk_read+0x3c>)
 8009f9c:	4413      	add	r3, r2
 8009f9e:	7a18      	ldrb	r0, [r3, #8]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	68b9      	ldr	r1, [r7, #8]
 8009fa6:	47a0      	blx	r4
 8009fa8:	4603      	mov	r3, r0
 8009faa:	75fb      	strb	r3, [r7, #23]
  return res;
 8009fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	371c      	adds	r7, #28
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd90      	pop	{r4, r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	2000147c 	.word	0x2000147c

08009fbc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009fbc:	b590      	push	{r4, r7, lr}
 8009fbe:	b087      	sub	sp, #28
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60b9      	str	r1, [r7, #8]
 8009fc4:	607a      	str	r2, [r7, #4]
 8009fc6:	603b      	str	r3, [r7, #0]
 8009fc8:	4603      	mov	r3, r0
 8009fca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
 8009fce:	4a0a      	ldr	r2, [pc, #40]	; (8009ff8 <disk_write+0x3c>)
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	68dc      	ldr	r4, [r3, #12]
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
 8009fda:	4a07      	ldr	r2, [pc, #28]	; (8009ff8 <disk_write+0x3c>)
 8009fdc:	4413      	add	r3, r2
 8009fde:	7a18      	ldrb	r0, [r3, #8]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	68b9      	ldr	r1, [r7, #8]
 8009fe6:	47a0      	blx	r4
 8009fe8:	4603      	mov	r3, r0
 8009fea:	75fb      	strb	r3, [r7, #23]
  return res;
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	371c      	adds	r7, #28
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd90      	pop	{r4, r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	2000147c 	.word	0x2000147c

08009ffc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	603a      	str	r2, [r7, #0]
 800a006:	71fb      	strb	r3, [r7, #7]
 800a008:	460b      	mov	r3, r1
 800a00a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a00c:	79fb      	ldrb	r3, [r7, #7]
 800a00e:	4a09      	ldr	r2, [pc, #36]	; (800a034 <disk_ioctl+0x38>)
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	79fa      	ldrb	r2, [r7, #7]
 800a01a:	4906      	ldr	r1, [pc, #24]	; (800a034 <disk_ioctl+0x38>)
 800a01c:	440a      	add	r2, r1
 800a01e:	7a10      	ldrb	r0, [r2, #8]
 800a020:	79b9      	ldrb	r1, [r7, #6]
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	4798      	blx	r3
 800a026:	4603      	mov	r3, r0
 800a028:	73fb      	strb	r3, [r7, #15]
  return res;
 800a02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	2000147c 	.word	0x2000147c

0800a038 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	3301      	adds	r3, #1
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a048:	89fb      	ldrh	r3, [r7, #14]
 800a04a:	021b      	lsls	r3, r3, #8
 800a04c:	b21a      	sxth	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	b21b      	sxth	r3, r3
 800a054:	4313      	orrs	r3, r2
 800a056:	b21b      	sxth	r3, r3
 800a058:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a05a:	89fb      	ldrh	r3, [r7, #14]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3303      	adds	r3, #3
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	021b      	lsls	r3, r3, #8
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	3202      	adds	r2, #2
 800a080:	7812      	ldrb	r2, [r2, #0]
 800a082:	4313      	orrs	r3, r2
 800a084:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	021b      	lsls	r3, r3, #8
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	3201      	adds	r2, #1
 800a08e:	7812      	ldrb	r2, [r2, #0]
 800a090:	4313      	orrs	r3, r2
 800a092:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	021b      	lsls	r3, r3, #8
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	7812      	ldrb	r2, [r2, #0]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	60fb      	str	r3, [r7, #12]
	return rv;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3714      	adds	r7, #20
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b083      	sub	sp, #12
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	1c5a      	adds	r2, r3, #1
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	887a      	ldrh	r2, [r7, #2]
 800a0c2:	b2d2      	uxtb	r2, r2
 800a0c4:	701a      	strb	r2, [r3, #0]
 800a0c6:	887b      	ldrh	r3, [r7, #2]
 800a0c8:	0a1b      	lsrs	r3, r3, #8
 800a0ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	1c5a      	adds	r2, r3, #1
 800a0d0:	607a      	str	r2, [r7, #4]
 800a0d2:	887a      	ldrh	r2, [r7, #2]
 800a0d4:	b2d2      	uxtb	r2, r2
 800a0d6:	701a      	strb	r2, [r3, #0]
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	b2d2      	uxtb	r2, r2
 800a0f8:	701a      	strb	r2, [r3, #0]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	0a1b      	lsrs	r3, r3, #8
 800a0fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	1c5a      	adds	r2, r3, #1
 800a104:	607a      	str	r2, [r7, #4]
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	b2d2      	uxtb	r2, r2
 800a10a:	701a      	strb	r2, [r3, #0]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	0a1b      	lsrs	r3, r3, #8
 800a110:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	1c5a      	adds	r2, r3, #1
 800a116:	607a      	str	r2, [r7, #4]
 800a118:	683a      	ldr	r2, [r7, #0]
 800a11a:	b2d2      	uxtb	r2, r2
 800a11c:	701a      	strb	r2, [r3, #0]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	0a1b      	lsrs	r3, r3, #8
 800a122:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	1c5a      	adds	r2, r3, #1
 800a128:	607a      	str	r2, [r7, #4]
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	b2d2      	uxtb	r2, r2
 800a12e:	701a      	strb	r2, [r3, #0]
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00d      	beq.n	800a172 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a156:	693a      	ldr	r2, [r7, #16]
 800a158:	1c53      	adds	r3, r2, #1
 800a15a:	613b      	str	r3, [r7, #16]
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	1c59      	adds	r1, r3, #1
 800a160:	6179      	str	r1, [r7, #20]
 800a162:	7812      	ldrb	r2, [r2, #0]
 800a164:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	3b01      	subs	r3, #1
 800a16a:	607b      	str	r3, [r7, #4]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1f1      	bne.n	800a156 <mem_cpy+0x1a>
	}
}
 800a172:	bf00      	nop
 800a174:	371c      	adds	r7, #28
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a17e:	b480      	push	{r7}
 800a180:	b087      	sub	sp, #28
 800a182:	af00      	add	r7, sp, #0
 800a184:	60f8      	str	r0, [r7, #12]
 800a186:	60b9      	str	r1, [r7, #8]
 800a188:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	1c5a      	adds	r2, r3, #1
 800a192:	617a      	str	r2, [r7, #20]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	b2d2      	uxtb	r2, r2
 800a198:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3b01      	subs	r3, #1
 800a19e:	607b      	str	r3, [r7, #4]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1f3      	bne.n	800a18e <mem_set+0x10>
}
 800a1a6:	bf00      	nop
 800a1a8:	bf00      	nop
 800a1aa:	371c      	adds	r7, #28
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a1b4:	b480      	push	{r7}
 800a1b6:	b089      	sub	sp, #36	; 0x24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	61fb      	str	r3, [r7, #28]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	1c5a      	adds	r2, r3, #1
 800a1d0:	61fa      	str	r2, [r7, #28]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	1c5a      	adds	r2, r3, #1
 800a1da:	61ba      	str	r2, [r7, #24]
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	1acb      	subs	r3, r1, r3
 800a1e0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	607b      	str	r3, [r7, #4]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d002      	beq.n	800a1f4 <mem_cmp+0x40>
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d0eb      	beq.n	800a1cc <mem_cmp+0x18>

	return r;
 800a1f4:	697b      	ldr	r3, [r7, #20]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3724      	adds	r7, #36	; 0x24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a202:	b480      	push	{r7}
 800a204:	b083      	sub	sp, #12
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a20c:	e002      	b.n	800a214 <chk_chr+0x12>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	3301      	adds	r3, #1
 800a212:	607b      	str	r3, [r7, #4]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d005      	beq.n	800a228 <chk_chr+0x26>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	461a      	mov	r2, r3
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	4293      	cmp	r3, r2
 800a226:	d1f2      	bne.n	800a20e <chk_chr+0xc>
	return *str;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	781b      	ldrb	r3, [r3, #0]
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a242:	2300      	movs	r3, #0
 800a244:	60bb      	str	r3, [r7, #8]
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	60fb      	str	r3, [r7, #12]
 800a24a:	e029      	b.n	800a2a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a24c:	4a27      	ldr	r2, [pc, #156]	; (800a2ec <chk_lock+0xb4>)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	011b      	lsls	r3, r3, #4
 800a252:	4413      	add	r3, r2
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d01d      	beq.n	800a296 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a25a:	4a24      	ldr	r2, [pc, #144]	; (800a2ec <chk_lock+0xb4>)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	011b      	lsls	r3, r3, #4
 800a260:	4413      	add	r3, r2
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d116      	bne.n	800a29a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a26c:	4a1f      	ldr	r2, [pc, #124]	; (800a2ec <chk_lock+0xb4>)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	011b      	lsls	r3, r3, #4
 800a272:	4413      	add	r3, r2
 800a274:	3304      	adds	r3, #4
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d10c      	bne.n	800a29a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a280:	4a1a      	ldr	r2, [pc, #104]	; (800a2ec <chk_lock+0xb4>)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	011b      	lsls	r3, r3, #4
 800a286:	4413      	add	r3, r2
 800a288:	3308      	adds	r3, #8
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a290:	429a      	cmp	r2, r3
 800a292:	d102      	bne.n	800a29a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a294:	e007      	b.n	800a2a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a296:	2301      	movs	r3, #1
 800a298:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	3301      	adds	r3, #1
 800a29e:	60fb      	str	r3, [r7, #12]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d9d2      	bls.n	800a24c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d109      	bne.n	800a2c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d102      	bne.n	800a2b8 <chk_lock+0x80>
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	d101      	bne.n	800a2bc <chk_lock+0x84>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	e010      	b.n	800a2de <chk_lock+0xa6>
 800a2bc:	2312      	movs	r3, #18
 800a2be:	e00e      	b.n	800a2de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d108      	bne.n	800a2d8 <chk_lock+0xa0>
 800a2c6:	4a09      	ldr	r2, [pc, #36]	; (800a2ec <chk_lock+0xb4>)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	011b      	lsls	r3, r3, #4
 800a2cc:	4413      	add	r3, r2
 800a2ce:	330c      	adds	r3, #12
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2d6:	d101      	bne.n	800a2dc <chk_lock+0xa4>
 800a2d8:	2310      	movs	r3, #16
 800a2da:	e000      	b.n	800a2de <chk_lock+0xa6>
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	2000125c 	.word	0x2000125c

0800a2f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	607b      	str	r3, [r7, #4]
 800a2fa:	e002      	b.n	800a302 <enq_lock+0x12>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	3301      	adds	r3, #1
 800a300:	607b      	str	r3, [r7, #4]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d806      	bhi.n	800a316 <enq_lock+0x26>
 800a308:	4a09      	ldr	r2, [pc, #36]	; (800a330 <enq_lock+0x40>)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	011b      	lsls	r3, r3, #4
 800a30e:	4413      	add	r3, r2
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1f2      	bne.n	800a2fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2b02      	cmp	r3, #2
 800a31a:	bf14      	ite	ne
 800a31c:	2301      	movne	r3, #1
 800a31e:	2300      	moveq	r3, #0
 800a320:	b2db      	uxtb	r3, r3
}
 800a322:	4618      	mov	r0, r3
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	2000125c 	.word	0x2000125c

0800a334 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a33e:	2300      	movs	r3, #0
 800a340:	60fb      	str	r3, [r7, #12]
 800a342:	e01f      	b.n	800a384 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a344:	4a41      	ldr	r2, [pc, #260]	; (800a44c <inc_lock+0x118>)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	011b      	lsls	r3, r3, #4
 800a34a:	4413      	add	r3, r2
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	429a      	cmp	r2, r3
 800a354:	d113      	bne.n	800a37e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a356:	4a3d      	ldr	r2, [pc, #244]	; (800a44c <inc_lock+0x118>)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	011b      	lsls	r3, r3, #4
 800a35c:	4413      	add	r3, r2
 800a35e:	3304      	adds	r3, #4
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a366:	429a      	cmp	r2, r3
 800a368:	d109      	bne.n	800a37e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a36a:	4a38      	ldr	r2, [pc, #224]	; (800a44c <inc_lock+0x118>)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	011b      	lsls	r3, r3, #4
 800a370:	4413      	add	r3, r2
 800a372:	3308      	adds	r3, #8
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d006      	beq.n	800a38c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3301      	adds	r3, #1
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b01      	cmp	r3, #1
 800a388:	d9dc      	bls.n	800a344 <inc_lock+0x10>
 800a38a:	e000      	b.n	800a38e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a38c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2b02      	cmp	r3, #2
 800a392:	d132      	bne.n	800a3fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a394:	2300      	movs	r3, #0
 800a396:	60fb      	str	r3, [r7, #12]
 800a398:	e002      	b.n	800a3a0 <inc_lock+0x6c>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	3301      	adds	r3, #1
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d806      	bhi.n	800a3b4 <inc_lock+0x80>
 800a3a6:	4a29      	ldr	r2, [pc, #164]	; (800a44c <inc_lock+0x118>)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	011b      	lsls	r3, r3, #4
 800a3ac:	4413      	add	r3, r2
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1f2      	bne.n	800a39a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d101      	bne.n	800a3be <inc_lock+0x8a>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	e040      	b.n	800a440 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	4922      	ldr	r1, [pc, #136]	; (800a44c <inc_lock+0x118>)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	011b      	lsls	r3, r3, #4
 800a3c8:	440b      	add	r3, r1
 800a3ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689a      	ldr	r2, [r3, #8]
 800a3d0:	491e      	ldr	r1, [pc, #120]	; (800a44c <inc_lock+0x118>)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	011b      	lsls	r3, r3, #4
 800a3d6:	440b      	add	r3, r1
 800a3d8:	3304      	adds	r3, #4
 800a3da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	695a      	ldr	r2, [r3, #20]
 800a3e0:	491a      	ldr	r1, [pc, #104]	; (800a44c <inc_lock+0x118>)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	011b      	lsls	r3, r3, #4
 800a3e6:	440b      	add	r3, r1
 800a3e8:	3308      	adds	r3, #8
 800a3ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a3ec:	4a17      	ldr	r2, [pc, #92]	; (800a44c <inc_lock+0x118>)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	011b      	lsls	r3, r3, #4
 800a3f2:	4413      	add	r3, r2
 800a3f4:	330c      	adds	r3, #12
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d009      	beq.n	800a414 <inc_lock+0xe0>
 800a400:	4a12      	ldr	r2, [pc, #72]	; (800a44c <inc_lock+0x118>)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	011b      	lsls	r3, r3, #4
 800a406:	4413      	add	r3, r2
 800a408:	330c      	adds	r3, #12
 800a40a:	881b      	ldrh	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d001      	beq.n	800a414 <inc_lock+0xe0>
 800a410:	2300      	movs	r3, #0
 800a412:	e015      	b.n	800a440 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d108      	bne.n	800a42c <inc_lock+0xf8>
 800a41a:	4a0c      	ldr	r2, [pc, #48]	; (800a44c <inc_lock+0x118>)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	011b      	lsls	r3, r3, #4
 800a420:	4413      	add	r3, r2
 800a422:	330c      	adds	r3, #12
 800a424:	881b      	ldrh	r3, [r3, #0]
 800a426:	3301      	adds	r3, #1
 800a428:	b29a      	uxth	r2, r3
 800a42a:	e001      	b.n	800a430 <inc_lock+0xfc>
 800a42c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a430:	4906      	ldr	r1, [pc, #24]	; (800a44c <inc_lock+0x118>)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	011b      	lsls	r3, r3, #4
 800a436:	440b      	add	r3, r1
 800a438:	330c      	adds	r3, #12
 800a43a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	3301      	adds	r3, #1
}
 800a440:	4618      	mov	r0, r3
 800a442:	3714      	adds	r7, #20
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	2000125c 	.word	0x2000125c

0800a450 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	3b01      	subs	r3, #1
 800a45c:	607b      	str	r3, [r7, #4]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d825      	bhi.n	800a4b0 <dec_lock+0x60>
		n = Files[i].ctr;
 800a464:	4a17      	ldr	r2, [pc, #92]	; (800a4c4 <dec_lock+0x74>)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	011b      	lsls	r3, r3, #4
 800a46a:	4413      	add	r3, r2
 800a46c:	330c      	adds	r3, #12
 800a46e:	881b      	ldrh	r3, [r3, #0]
 800a470:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a472:	89fb      	ldrh	r3, [r7, #14]
 800a474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a478:	d101      	bne.n	800a47e <dec_lock+0x2e>
 800a47a:	2300      	movs	r3, #0
 800a47c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a47e:	89fb      	ldrh	r3, [r7, #14]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d002      	beq.n	800a48a <dec_lock+0x3a>
 800a484:	89fb      	ldrh	r3, [r7, #14]
 800a486:	3b01      	subs	r3, #1
 800a488:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a48a:	4a0e      	ldr	r2, [pc, #56]	; (800a4c4 <dec_lock+0x74>)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	011b      	lsls	r3, r3, #4
 800a490:	4413      	add	r3, r2
 800a492:	330c      	adds	r3, #12
 800a494:	89fa      	ldrh	r2, [r7, #14]
 800a496:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a498:	89fb      	ldrh	r3, [r7, #14]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d105      	bne.n	800a4aa <dec_lock+0x5a>
 800a49e:	4a09      	ldr	r2, [pc, #36]	; (800a4c4 <dec_lock+0x74>)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	011b      	lsls	r3, r3, #4
 800a4a4:	4413      	add	r3, r2
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	737b      	strb	r3, [r7, #13]
 800a4ae:	e001      	b.n	800a4b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a4b4:	7b7b      	ldrb	r3, [r7, #13]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	2000125c 	.word	0x2000125c

0800a4c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	e010      	b.n	800a4f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a4d6:	4a0d      	ldr	r2, [pc, #52]	; (800a50c <clear_lock+0x44>)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	011b      	lsls	r3, r3, #4
 800a4dc:	4413      	add	r3, r2
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d105      	bne.n	800a4f2 <clear_lock+0x2a>
 800a4e6:	4a09      	ldr	r2, [pc, #36]	; (800a50c <clear_lock+0x44>)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	011b      	lsls	r3, r3, #4
 800a4ec:	4413      	add	r3, r2
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d9eb      	bls.n	800a4d6 <clear_lock+0xe>
	}
}
 800a4fe:	bf00      	nop
 800a500:	bf00      	nop
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	2000125c 	.word	0x2000125c

0800a510 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a518:	2300      	movs	r3, #0
 800a51a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	78db      	ldrb	r3, [r3, #3]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d034      	beq.n	800a58e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a528:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	7858      	ldrb	r0, [r3, #1]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a534:	2301      	movs	r3, #1
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	f7ff fd40 	bl	8009fbc <disk_write>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d002      	beq.n	800a548 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a542:	2301      	movs	r3, #1
 800a544:	73fb      	strb	r3, [r7, #15]
 800a546:	e022      	b.n	800a58e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	1ad2      	subs	r2, r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	69db      	ldr	r3, [r3, #28]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d217      	bcs.n	800a58e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	789b      	ldrb	r3, [r3, #2]
 800a562:	613b      	str	r3, [r7, #16]
 800a564:	e010      	b.n	800a588 <sync_window+0x78>
					wsect += fs->fsize;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	69db      	ldr	r3, [r3, #28]
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	4413      	add	r3, r2
 800a56e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	7858      	ldrb	r0, [r3, #1]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a57a:	2301      	movs	r3, #1
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	f7ff fd1d 	bl	8009fbc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	3b01      	subs	r3, #1
 800a586:	613b      	str	r3, [r7, #16]
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d8eb      	bhi.n	800a566 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a590:	4618      	mov	r0, r3
 800a592:	3718      	adds	r7, #24
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d01b      	beq.n	800a5e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f7ff ffad 	bl	800a510 <sync_window>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a5ba:	7bfb      	ldrb	r3, [r7, #15]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d113      	bne.n	800a5e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	7858      	ldrb	r0, [r3, #1]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	683a      	ldr	r2, [r7, #0]
 800a5ce:	f7ff fcd5 	bl	8009f7c <disk_read>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d004      	beq.n	800a5e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7ff ff87 	bl	800a510 <sync_window>
 800a602:	4603      	mov	r3, r0
 800a604:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a606:	7bfb      	ldrb	r3, [r7, #15]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d158      	bne.n	800a6be <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	2b03      	cmp	r3, #3
 800a612:	d148      	bne.n	800a6a6 <sync_fs+0xb2>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	791b      	ldrb	r3, [r3, #4]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d144      	bne.n	800a6a6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3334      	adds	r3, #52	; 0x34
 800a620:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a624:	2100      	movs	r1, #0
 800a626:	4618      	mov	r0, r3
 800a628:	f7ff fda9 	bl	800a17e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3334      	adds	r3, #52	; 0x34
 800a630:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a634:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a638:	4618      	mov	r0, r3
 800a63a:	f7ff fd38 	bl	800a0ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	3334      	adds	r3, #52	; 0x34
 800a642:	4921      	ldr	r1, [pc, #132]	; (800a6c8 <sync_fs+0xd4>)
 800a644:	4618      	mov	r0, r3
 800a646:	f7ff fd4d 	bl	800a0e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	3334      	adds	r3, #52	; 0x34
 800a64e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a652:	491e      	ldr	r1, [pc, #120]	; (800a6cc <sync_fs+0xd8>)
 800a654:	4618      	mov	r0, r3
 800a656:	f7ff fd45 	bl	800a0e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	3334      	adds	r3, #52	; 0x34
 800a65e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	4619      	mov	r1, r3
 800a668:	4610      	mov	r0, r2
 800a66a:	f7ff fd3b 	bl	800a0e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	3334      	adds	r3, #52	; 0x34
 800a672:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	4619      	mov	r1, r3
 800a67c:	4610      	mov	r0, r2
 800a67e:	f7ff fd31 	bl	800a0e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a1b      	ldr	r3, [r3, #32]
 800a686:	1c5a      	adds	r2, r3, #1
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	7858      	ldrb	r0, [r3, #1]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a69a:	2301      	movs	r3, #1
 800a69c:	f7ff fc8e 	bl	8009fbc <disk_write>
			fs->fsi_flag = 0;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	785b      	ldrb	r3, [r3, #1]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7ff fca4 	bl	8009ffc <disk_ioctl>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <sync_fs+0xca>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	41615252 	.word	0x41615252
 800a6cc:	61417272 	.word	0x61417272

0800a6d0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	3b02      	subs	r3, #2
 800a6de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	3b02      	subs	r3, #2
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d301      	bcc.n	800a6f0 <clust2sect+0x20>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	e008      	b.n	800a702 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	895b      	ldrh	r3, [r3, #10]
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	fb03 f202 	mul.w	r2, r3, r2
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a700:	4413      	add	r3, r2
}
 800a702:	4618      	mov	r0, r3
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b086      	sub	sp, #24
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d904      	bls.n	800a72e <get_fat+0x20>
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	699b      	ldr	r3, [r3, #24]
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d302      	bcc.n	800a734 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a72e:	2301      	movs	r3, #1
 800a730:	617b      	str	r3, [r7, #20]
 800a732:	e08f      	b.n	800a854 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a734:	f04f 33ff 	mov.w	r3, #4294967295
 800a738:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	2b03      	cmp	r3, #3
 800a740:	d062      	beq.n	800a808 <get_fat+0xfa>
 800a742:	2b03      	cmp	r3, #3
 800a744:	dc7c      	bgt.n	800a840 <get_fat+0x132>
 800a746:	2b01      	cmp	r3, #1
 800a748:	d002      	beq.n	800a750 <get_fat+0x42>
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d042      	beq.n	800a7d4 <get_fat+0xc6>
 800a74e:	e077      	b.n	800a840 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	60fb      	str	r3, [r7, #12]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	085b      	lsrs	r3, r3, #1
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	4413      	add	r3, r2
 800a75c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	0a5b      	lsrs	r3, r3, #9
 800a766:	4413      	add	r3, r2
 800a768:	4619      	mov	r1, r3
 800a76a:	6938      	ldr	r0, [r7, #16]
 800a76c:	f7ff ff14 	bl	800a598 <move_window>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d167      	bne.n	800a846 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	1c5a      	adds	r2, r3, #1
 800a77a:	60fa      	str	r2, [r7, #12]
 800a77c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	4413      	add	r3, r2
 800a784:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a788:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	0a5b      	lsrs	r3, r3, #9
 800a792:	4413      	add	r3, r2
 800a794:	4619      	mov	r1, r3
 800a796:	6938      	ldr	r0, [r7, #16]
 800a798:	f7ff fefe 	bl	800a598 <move_window>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d153      	bne.n	800a84a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7b0:	021b      	lsls	r3, r3, #8
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	f003 0301 	and.w	r3, r3, #1
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d002      	beq.n	800a7ca <get_fat+0xbc>
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	091b      	lsrs	r3, r3, #4
 800a7c8:	e002      	b.n	800a7d0 <get_fat+0xc2>
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7d0:	617b      	str	r3, [r7, #20]
			break;
 800a7d2:	e03f      	b.n	800a854 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	0a1b      	lsrs	r3, r3, #8
 800a7dc:	4413      	add	r3, r2
 800a7de:	4619      	mov	r1, r3
 800a7e0:	6938      	ldr	r0, [r7, #16]
 800a7e2:	f7ff fed9 	bl	800a598 <move_window>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d130      	bne.n	800a84e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a7fa:	4413      	add	r3, r2
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7ff fc1b 	bl	800a038 <ld_word>
 800a802:	4603      	mov	r3, r0
 800a804:	617b      	str	r3, [r7, #20]
			break;
 800a806:	e025      	b.n	800a854 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	09db      	lsrs	r3, r3, #7
 800a810:	4413      	add	r3, r2
 800a812:	4619      	mov	r1, r3
 800a814:	6938      	ldr	r0, [r7, #16]
 800a816:	f7ff febf 	bl	800a598 <move_window>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d118      	bne.n	800a852 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a82e:	4413      	add	r3, r2
 800a830:	4618      	mov	r0, r3
 800a832:	f7ff fc19 	bl	800a068 <ld_dword>
 800a836:	4603      	mov	r3, r0
 800a838:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a83c:	617b      	str	r3, [r7, #20]
			break;
 800a83e:	e009      	b.n	800a854 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a840:	2301      	movs	r3, #1
 800a842:	617b      	str	r3, [r7, #20]
 800a844:	e006      	b.n	800a854 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a846:	bf00      	nop
 800a848:	e004      	b.n	800a854 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a84a:	bf00      	nop
 800a84c:	e002      	b.n	800a854 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a84e:	bf00      	nop
 800a850:	e000      	b.n	800a854 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a852:	bf00      	nop
		}
	}

	return val;
 800a854:	697b      	ldr	r3, [r7, #20]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3718      	adds	r7, #24
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a85e:	b590      	push	{r4, r7, lr}
 800a860:	b089      	sub	sp, #36	; 0x24
 800a862:	af00      	add	r7, sp, #0
 800a864:	60f8      	str	r0, [r7, #12]
 800a866:	60b9      	str	r1, [r7, #8]
 800a868:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a86a:	2302      	movs	r3, #2
 800a86c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	2b01      	cmp	r3, #1
 800a872:	f240 80d2 	bls.w	800aa1a <put_fat+0x1bc>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	699b      	ldr	r3, [r3, #24]
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	f080 80cc 	bcs.w	800aa1a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	2b03      	cmp	r3, #3
 800a888:	f000 8096 	beq.w	800a9b8 <put_fat+0x15a>
 800a88c:	2b03      	cmp	r3, #3
 800a88e:	f300 80cd 	bgt.w	800aa2c <put_fat+0x1ce>
 800a892:	2b01      	cmp	r3, #1
 800a894:	d002      	beq.n	800a89c <put_fat+0x3e>
 800a896:	2b02      	cmp	r3, #2
 800a898:	d06e      	beq.n	800a978 <put_fat+0x11a>
 800a89a:	e0c7      	b.n	800aa2c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	61bb      	str	r3, [r7, #24]
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	085b      	lsrs	r3, r3, #1
 800a8a4:	69ba      	ldr	r2, [r7, #24]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	0a5b      	lsrs	r3, r3, #9
 800a8b2:	4413      	add	r3, r2
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f7ff fe6e 	bl	800a598 <move_window>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8c0:	7ffb      	ldrb	r3, [r7, #31]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f040 80ab 	bne.w	800aa1e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	1c59      	adds	r1, r3, #1
 800a8d2:	61b9      	str	r1, [r7, #24]
 800a8d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d8:	4413      	add	r3, r2
 800a8da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	f003 0301 	and.w	r3, r3, #1
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d00d      	beq.n	800a902 <put_fat+0xa4>
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	b25b      	sxtb	r3, r3
 800a8ec:	f003 030f 	and.w	r3, r3, #15
 800a8f0:	b25a      	sxtb	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	011b      	lsls	r3, r3, #4
 800a8f8:	b25b      	sxtb	r3, r3
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	b25b      	sxtb	r3, r3
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	e001      	b.n	800a906 <put_fat+0xa8>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	b2db      	uxtb	r3, r3
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2201      	movs	r2, #1
 800a90e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	0a5b      	lsrs	r3, r3, #9
 800a918:	4413      	add	r3, r2
 800a91a:	4619      	mov	r1, r3
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f7ff fe3b 	bl	800a598 <move_window>
 800a922:	4603      	mov	r3, r0
 800a924:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a926:	7ffb      	ldrb	r3, [r7, #31]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d17a      	bne.n	800aa22 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a938:	4413      	add	r3, r2
 800a93a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	f003 0301 	and.w	r3, r3, #1
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <put_fat+0xf0>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	091b      	lsrs	r3, r3, #4
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	e00e      	b.n	800a96c <put_fat+0x10e>
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	b25b      	sxtb	r3, r3
 800a954:	f023 030f 	bic.w	r3, r3, #15
 800a958:	b25a      	sxtb	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	0a1b      	lsrs	r3, r3, #8
 800a95e:	b25b      	sxtb	r3, r3
 800a960:	f003 030f 	and.w	r3, r3, #15
 800a964:	b25b      	sxtb	r3, r3
 800a966:	4313      	orrs	r3, r2
 800a968:	b25b      	sxtb	r3, r3
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	697a      	ldr	r2, [r7, #20]
 800a96e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2201      	movs	r2, #1
 800a974:	70da      	strb	r2, [r3, #3]
			break;
 800a976:	e059      	b.n	800aa2c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	0a1b      	lsrs	r3, r3, #8
 800a980:	4413      	add	r3, r2
 800a982:	4619      	mov	r1, r3
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f7ff fe07 	bl	800a598 <move_window>
 800a98a:	4603      	mov	r3, r0
 800a98c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a98e:	7ffb      	ldrb	r3, [r7, #31]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d148      	bne.n	800aa26 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	005b      	lsls	r3, r3, #1
 800a99e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a9a2:	4413      	add	r3, r2
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	b292      	uxth	r2, r2
 800a9a8:	4611      	mov	r1, r2
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7ff fb7f 	bl	800a0ae <st_word>
			fs->wflag = 1;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	70da      	strb	r2, [r3, #3]
			break;
 800a9b6:	e039      	b.n	800aa2c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	09db      	lsrs	r3, r3, #7
 800a9c0:	4413      	add	r3, r2
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f7ff fde7 	bl	800a598 <move_window>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9ce:	7ffb      	ldrb	r3, [r7, #31]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d12a      	bne.n	800aa2a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a9e8:	4413      	add	r3, r2
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7ff fb3c 	bl	800a068 <ld_dword>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a9f6:	4323      	orrs	r3, r4
 800a9f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800aa08:	4413      	add	r3, r2
 800aa0a:	6879      	ldr	r1, [r7, #4]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7ff fb69 	bl	800a0e4 <st_dword>
			fs->wflag = 1;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2201      	movs	r2, #1
 800aa16:	70da      	strb	r2, [r3, #3]
			break;
 800aa18:	e008      	b.n	800aa2c <put_fat+0x1ce>
		}
	}
 800aa1a:	bf00      	nop
 800aa1c:	e006      	b.n	800aa2c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800aa1e:	bf00      	nop
 800aa20:	e004      	b.n	800aa2c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800aa22:	bf00      	nop
 800aa24:	e002      	b.n	800aa2c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800aa26:	bf00      	nop
 800aa28:	e000      	b.n	800aa2c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800aa2a:	bf00      	nop
	return res;
 800aa2c:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3724      	adds	r7, #36	; 0x24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd90      	pop	{r4, r7, pc}

0800aa36 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b088      	sub	sp, #32
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	60f8      	str	r0, [r7, #12]
 800aa3e:	60b9      	str	r1, [r7, #8]
 800aa40:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d904      	bls.n	800aa5c <remove_chain+0x26>
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	68ba      	ldr	r2, [r7, #8]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d301      	bcc.n	800aa60 <remove_chain+0x2a>
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	e04b      	b.n	800aaf8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00c      	beq.n	800aa80 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800aa66:	f04f 32ff 	mov.w	r2, #4294967295
 800aa6a:	6879      	ldr	r1, [r7, #4]
 800aa6c:	69b8      	ldr	r0, [r7, #24]
 800aa6e:	f7ff fef6 	bl	800a85e <put_fat>
 800aa72:	4603      	mov	r3, r0
 800aa74:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800aa76:	7ffb      	ldrb	r3, [r7, #31]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d001      	beq.n	800aa80 <remove_chain+0x4a>
 800aa7c:	7ffb      	ldrb	r3, [r7, #31]
 800aa7e:	e03b      	b.n	800aaf8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800aa80:	68b9      	ldr	r1, [r7, #8]
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f7ff fe43 	bl	800a70e <get_fat>
 800aa88:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d031      	beq.n	800aaf4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d101      	bne.n	800aa9a <remove_chain+0x64>
 800aa96:	2302      	movs	r3, #2
 800aa98:	e02e      	b.n	800aaf8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa0:	d101      	bne.n	800aaa6 <remove_chain+0x70>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e028      	b.n	800aaf8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	68b9      	ldr	r1, [r7, #8]
 800aaaa:	69b8      	ldr	r0, [r7, #24]
 800aaac:	f7ff fed7 	bl	800a85e <put_fat>
 800aab0:	4603      	mov	r3, r0
 800aab2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800aab4:	7ffb      	ldrb	r3, [r7, #31]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <remove_chain+0x88>
 800aaba:	7ffb      	ldrb	r3, [r7, #31]
 800aabc:	e01c      	b.n	800aaf8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	695a      	ldr	r2, [r3, #20]
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	3b02      	subs	r3, #2
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d20b      	bcs.n	800aae4 <remove_chain+0xae>
			fs->free_clst++;
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	695b      	ldr	r3, [r3, #20]
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	791b      	ldrb	r3, [r3, #4]
 800aada:	f043 0301 	orr.w	r3, r3, #1
 800aade:	b2da      	uxtb	r2, r3
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	699b      	ldr	r3, [r3, #24]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d3c6      	bcc.n	800aa80 <remove_chain+0x4a>
 800aaf2:	e000      	b.n	800aaf6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800aaf4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3720      	adds	r7, #32
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b088      	sub	sp, #32
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10d      	bne.n	800ab32 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d004      	beq.n	800ab2c <create_chain+0x2c>
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	699b      	ldr	r3, [r3, #24]
 800ab26:	69ba      	ldr	r2, [r7, #24]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d31b      	bcc.n	800ab64 <create_chain+0x64>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	61bb      	str	r3, [r7, #24]
 800ab30:	e018      	b.n	800ab64 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ab32:	6839      	ldr	r1, [r7, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7ff fdea 	bl	800a70e <get_fat>
 800ab3a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d801      	bhi.n	800ab46 <create_chain+0x46>
 800ab42:	2301      	movs	r3, #1
 800ab44:	e070      	b.n	800ac28 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4c:	d101      	bne.n	800ab52 <create_chain+0x52>
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	e06a      	b.n	800ac28 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	699b      	ldr	r3, [r3, #24]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d201      	bcs.n	800ab60 <create_chain+0x60>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	e063      	b.n	800ac28 <create_chain+0x128>
		scl = clst;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	69fa      	ldr	r2, [r7, #28]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d307      	bcc.n	800ab88 <create_chain+0x88>
				ncl = 2;
 800ab78:	2302      	movs	r3, #2
 800ab7a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ab7c:	69fa      	ldr	r2, [r7, #28]
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d901      	bls.n	800ab88 <create_chain+0x88>
 800ab84:	2300      	movs	r3, #0
 800ab86:	e04f      	b.n	800ac28 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ab88:	69f9      	ldr	r1, [r7, #28]
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7ff fdbf 	bl	800a70e <get_fat>
 800ab90:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00e      	beq.n	800abb6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d003      	beq.n	800aba6 <create_chain+0xa6>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba4:	d101      	bne.n	800abaa <create_chain+0xaa>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	e03e      	b.n	800ac28 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800abaa:	69fa      	ldr	r2, [r7, #28]
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d1da      	bne.n	800ab68 <create_chain+0x68>
 800abb2:	2300      	movs	r3, #0
 800abb4:	e038      	b.n	800ac28 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800abb6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800abb8:	f04f 32ff 	mov.w	r2, #4294967295
 800abbc:	69f9      	ldr	r1, [r7, #28]
 800abbe:	6938      	ldr	r0, [r7, #16]
 800abc0:	f7ff fe4d 	bl	800a85e <put_fat>
 800abc4:	4603      	mov	r3, r0
 800abc6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800abc8:	7dfb      	ldrb	r3, [r7, #23]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d109      	bne.n	800abe2 <create_chain+0xe2>
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d006      	beq.n	800abe2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800abd4:	69fa      	ldr	r2, [r7, #28]
 800abd6:	6839      	ldr	r1, [r7, #0]
 800abd8:	6938      	ldr	r0, [r7, #16]
 800abda:	f7ff fe40 	bl	800a85e <put_fat>
 800abde:	4603      	mov	r3, r0
 800abe0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800abe2:	7dfb      	ldrb	r3, [r7, #23]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d116      	bne.n	800ac16 <create_chain+0x116>
		fs->last_clst = ncl;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	69fa      	ldr	r2, [r7, #28]
 800abec:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	695a      	ldr	r2, [r3, #20]
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	3b02      	subs	r3, #2
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d804      	bhi.n	800ac06 <create_chain+0x106>
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	695b      	ldr	r3, [r3, #20]
 800ac00:	1e5a      	subs	r2, r3, #1
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	791b      	ldrb	r3, [r3, #4]
 800ac0a:	f043 0301 	orr.w	r3, r3, #1
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	711a      	strb	r2, [r3, #4]
 800ac14:	e007      	b.n	800ac26 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ac16:	7dfb      	ldrb	r3, [r7, #23]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d102      	bne.n	800ac22 <create_chain+0x122>
 800ac1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac20:	e000      	b.n	800ac24 <create_chain+0x124>
 800ac22:	2301      	movs	r3, #1
 800ac24:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ac26:	69fb      	ldr	r3, [r7, #28]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3720      	adds	r7, #32
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b087      	sub	sp, #28
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac44:	3304      	adds	r3, #4
 800ac46:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	0a5b      	lsrs	r3, r3, #9
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	8952      	ldrh	r2, [r2, #10]
 800ac50:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac54:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	1d1a      	adds	r2, r3, #4
 800ac5a:	613a      	str	r2, [r7, #16]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d101      	bne.n	800ac6a <clmt_clust+0x3a>
 800ac66:	2300      	movs	r3, #0
 800ac68:	e010      	b.n	800ac8c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d307      	bcc.n	800ac82 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	617b      	str	r3, [r7, #20]
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	3304      	adds	r3, #4
 800ac7e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ac80:	e7e9      	b.n	800ac56 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ac82:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	4413      	add	r3, r2
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	371c      	adds	r7, #28
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acae:	d204      	bcs.n	800acba <dir_sdi+0x22>
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	f003 031f 	and.w	r3, r3, #31
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <dir_sdi+0x26>
		return FR_INT_ERR;
 800acba:	2302      	movs	r3, #2
 800acbc:	e063      	b.n	800ad86 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	683a      	ldr	r2, [r7, #0]
 800acc2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d106      	bne.n	800acde <dir_sdi+0x46>
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	d902      	bls.n	800acde <dir_sdi+0x46>
		clst = fs->dirbase;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acdc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d10c      	bne.n	800acfe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	095b      	lsrs	r3, r3, #5
 800ace8:	693a      	ldr	r2, [r7, #16]
 800acea:	8912      	ldrh	r2, [r2, #8]
 800acec:	4293      	cmp	r3, r2
 800acee:	d301      	bcc.n	800acf4 <dir_sdi+0x5c>
 800acf0:	2302      	movs	r3, #2
 800acf2:	e048      	b.n	800ad86 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	61da      	str	r2, [r3, #28]
 800acfc:	e029      	b.n	800ad52 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	895b      	ldrh	r3, [r3, #10]
 800ad02:	025b      	lsls	r3, r3, #9
 800ad04:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ad06:	e019      	b.n	800ad3c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6979      	ldr	r1, [r7, #20]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7ff fcfe 	bl	800a70e <get_fat>
 800ad12:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad1a:	d101      	bne.n	800ad20 <dir_sdi+0x88>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e032      	b.n	800ad86 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d904      	bls.n	800ad30 <dir_sdi+0x98>
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	697a      	ldr	r2, [r7, #20]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d301      	bcc.n	800ad34 <dir_sdi+0x9c>
 800ad30:	2302      	movs	r3, #2
 800ad32:	e028      	b.n	800ad86 <dir_sdi+0xee>
			ofs -= csz;
 800ad34:	683a      	ldr	r2, [r7, #0]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d2e1      	bcs.n	800ad08 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ad44:	6979      	ldr	r1, [r7, #20]
 800ad46:	6938      	ldr	r0, [r7, #16]
 800ad48:	f7ff fcc2 	bl	800a6d0 <clust2sect>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	697a      	ldr	r2, [r7, #20]
 800ad56:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	69db      	ldr	r3, [r3, #28]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <dir_sdi+0xcc>
 800ad60:	2302      	movs	r3, #2
 800ad62:	e010      	b.n	800ad86 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	69da      	ldr	r2, [r3, #28]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	0a5b      	lsrs	r3, r3, #9
 800ad6c:	441a      	add	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad7e:	441a      	add	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3718      	adds	r7, #24
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b086      	sub	sp, #24
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	695b      	ldr	r3, [r3, #20]
 800ada2:	3320      	adds	r3, #32
 800ada4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	69db      	ldr	r3, [r3, #28]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d003      	beq.n	800adb6 <dir_next+0x28>
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adb4:	d301      	bcc.n	800adba <dir_next+0x2c>
 800adb6:	2304      	movs	r3, #4
 800adb8:	e0aa      	b.n	800af10 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f040 8098 	bne.w	800aef6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	69db      	ldr	r3, [r3, #28]
 800adca:	1c5a      	adds	r2, r3, #1
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10b      	bne.n	800adf0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	095b      	lsrs	r3, r3, #5
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	8912      	ldrh	r2, [r2, #8]
 800ade0:	4293      	cmp	r3, r2
 800ade2:	f0c0 8088 	bcc.w	800aef6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	61da      	str	r2, [r3, #28]
 800adec:	2304      	movs	r3, #4
 800adee:	e08f      	b.n	800af10 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	0a5b      	lsrs	r3, r3, #9
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	8952      	ldrh	r2, [r2, #10]
 800adf8:	3a01      	subs	r2, #1
 800adfa:	4013      	ands	r3, r2
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d17a      	bne.n	800aef6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	4619      	mov	r1, r3
 800ae08:	4610      	mov	r0, r2
 800ae0a:	f7ff fc80 	bl	800a70e <get_fat>
 800ae0e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d801      	bhi.n	800ae1a <dir_next+0x8c>
 800ae16:	2302      	movs	r3, #2
 800ae18:	e07a      	b.n	800af10 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae20:	d101      	bne.n	800ae26 <dir_next+0x98>
 800ae22:	2301      	movs	r3, #1
 800ae24:	e074      	b.n	800af10 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	697a      	ldr	r2, [r7, #20]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d358      	bcc.n	800aee2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d104      	bne.n	800ae40 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	61da      	str	r2, [r3, #28]
 800ae3c:	2304      	movs	r3, #4
 800ae3e:	e067      	b.n	800af10 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	699b      	ldr	r3, [r3, #24]
 800ae46:	4619      	mov	r1, r3
 800ae48:	4610      	mov	r0, r2
 800ae4a:	f7ff fe59 	bl	800ab00 <create_chain>
 800ae4e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d101      	bne.n	800ae5a <dir_next+0xcc>
 800ae56:	2307      	movs	r3, #7
 800ae58:	e05a      	b.n	800af10 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d101      	bne.n	800ae64 <dir_next+0xd6>
 800ae60:	2302      	movs	r3, #2
 800ae62:	e055      	b.n	800af10 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae6a:	d101      	bne.n	800ae70 <dir_next+0xe2>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e04f      	b.n	800af10 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f7ff fb4d 	bl	800a510 <sync_window>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d001      	beq.n	800ae80 <dir_next+0xf2>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e047      	b.n	800af10 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3334      	adds	r3, #52	; 0x34
 800ae84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae88:	2100      	movs	r1, #0
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7ff f977 	bl	800a17e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae90:	2300      	movs	r3, #0
 800ae92:	613b      	str	r3, [r7, #16]
 800ae94:	6979      	ldr	r1, [r7, #20]
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f7ff fc1a 	bl	800a6d0 <clust2sect>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	631a      	str	r2, [r3, #48]	; 0x30
 800aea2:	e012      	b.n	800aeca <dir_next+0x13c>
						fs->wflag = 1;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2201      	movs	r2, #1
 800aea8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f7ff fb30 	bl	800a510 <sync_window>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d001      	beq.n	800aeba <dir_next+0x12c>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e02a      	b.n	800af10 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	3301      	adds	r3, #1
 800aebe:	613b      	str	r3, [r7, #16]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec4:	1c5a      	adds	r2, r3, #1
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	631a      	str	r2, [r3, #48]	; 0x30
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	895b      	ldrh	r3, [r3, #10]
 800aece:	461a      	mov	r2, r3
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d3e6      	bcc.n	800aea4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	1ad2      	subs	r2, r2, r3
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aee8:	6979      	ldr	r1, [r7, #20]
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f7ff fbf0 	bl	800a6d0 <clust2sect>
 800aef0:	4602      	mov	r2, r0
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af08:	441a      	add	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3718      	adds	r7, #24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800af28:	2100      	movs	r1, #0
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f7ff feb4 	bl	800ac98 <dir_sdi>
 800af30:	4603      	mov	r3, r0
 800af32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af34:	7dfb      	ldrb	r3, [r7, #23]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d12b      	bne.n	800af92 <dir_alloc+0x7a>
		n = 0;
 800af3a:	2300      	movs	r3, #0
 800af3c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	69db      	ldr	r3, [r3, #28]
 800af42:	4619      	mov	r1, r3
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f7ff fb27 	bl	800a598 <move_window>
 800af4a:	4603      	mov	r3, r0
 800af4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800af4e:	7dfb      	ldrb	r3, [r7, #23]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d11d      	bne.n	800af90 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6a1b      	ldr	r3, [r3, #32]
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	2be5      	cmp	r3, #229	; 0xe5
 800af5c:	d004      	beq.n	800af68 <dir_alloc+0x50>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d107      	bne.n	800af78 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	3301      	adds	r3, #1
 800af6c:	613b      	str	r3, [r7, #16]
 800af6e:	693a      	ldr	r2, [r7, #16]
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	429a      	cmp	r2, r3
 800af74:	d102      	bne.n	800af7c <dir_alloc+0x64>
 800af76:	e00c      	b.n	800af92 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800af78:	2300      	movs	r3, #0
 800af7a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800af7c:	2101      	movs	r1, #1
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7ff ff05 	bl	800ad8e <dir_next>
 800af84:	4603      	mov	r3, r0
 800af86:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800af88:	7dfb      	ldrb	r3, [r7, #23]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0d7      	beq.n	800af3e <dir_alloc+0x26>
 800af8e:	e000      	b.n	800af92 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800af90:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800af92:	7dfb      	ldrb	r3, [r7, #23]
 800af94:	2b04      	cmp	r3, #4
 800af96:	d101      	bne.n	800af9c <dir_alloc+0x84>
 800af98:	2307      	movs	r3, #7
 800af9a:	75fb      	strb	r3, [r7, #23]
	return res;
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3718      	adds	r7, #24
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b084      	sub	sp, #16
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
 800afae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	331a      	adds	r3, #26
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff f83f 	bl	800a038 <ld_word>
 800afba:	4603      	mov	r3, r0
 800afbc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d109      	bne.n	800afda <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	3314      	adds	r3, #20
 800afca:	4618      	mov	r0, r3
 800afcc:	f7ff f834 	bl	800a038 <ld_word>
 800afd0:	4603      	mov	r3, r0
 800afd2:	041b      	lsls	r3, r3, #16
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800afda:	68fb      	ldr	r3, [r7, #12]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	331a      	adds	r3, #26
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	b292      	uxth	r2, r2
 800aff8:	4611      	mov	r1, r2
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff f857 	bl	800a0ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	2b03      	cmp	r3, #3
 800b006:	d109      	bne.n	800b01c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	f103 0214 	add.w	r2, r3, #20
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	0c1b      	lsrs	r3, r3, #16
 800b012:	b29b      	uxth	r3, r3
 800b014:	4619      	mov	r1, r3
 800b016:	4610      	mov	r0, r2
 800b018:	f7ff f849 	bl	800a0ae <st_word>
	}
}
 800b01c:	bf00      	nop
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b024:	b590      	push	{r4, r7, lr}
 800b026:	b087      	sub	sp, #28
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	331a      	adds	r3, #26
 800b032:	4618      	mov	r0, r3
 800b034:	f7ff f800 	bl	800a038 <ld_word>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d001      	beq.n	800b042 <cmp_lfn+0x1e>
 800b03e:	2300      	movs	r3, #0
 800b040:	e059      	b.n	800b0f6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b04a:	1e5a      	subs	r2, r3, #1
 800b04c:	4613      	mov	r3, r2
 800b04e:	005b      	lsls	r3, r3, #1
 800b050:	4413      	add	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4413      	add	r3, r2
 800b056:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b058:	2301      	movs	r3, #1
 800b05a:	81fb      	strh	r3, [r7, #14]
 800b05c:	2300      	movs	r3, #0
 800b05e:	613b      	str	r3, [r7, #16]
 800b060:	e033      	b.n	800b0ca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b062:	4a27      	ldr	r2, [pc, #156]	; (800b100 <cmp_lfn+0xdc>)
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	4413      	add	r3, r2
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	461a      	mov	r2, r3
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	4413      	add	r3, r2
 800b070:	4618      	mov	r0, r3
 800b072:	f7fe ffe1 	bl	800a038 <ld_word>
 800b076:	4603      	mov	r3, r0
 800b078:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b07a:	89fb      	ldrh	r3, [r7, #14]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d01a      	beq.n	800b0b6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	2bfe      	cmp	r3, #254	; 0xfe
 800b084:	d812      	bhi.n	800b0ac <cmp_lfn+0x88>
 800b086:	89bb      	ldrh	r3, [r7, #12]
 800b088:	4618      	mov	r0, r3
 800b08a:	f002 fa67 	bl	800d55c <ff_wtoupper>
 800b08e:	4603      	mov	r3, r0
 800b090:	461c      	mov	r4, r3
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	1c5a      	adds	r2, r3, #1
 800b096:	617a      	str	r2, [r7, #20]
 800b098:	005b      	lsls	r3, r3, #1
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	4413      	add	r3, r2
 800b09e:	881b      	ldrh	r3, [r3, #0]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f002 fa5b 	bl	800d55c <ff_wtoupper>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	429c      	cmp	r4, r3
 800b0aa:	d001      	beq.n	800b0b0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	e022      	b.n	800b0f6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b0b0:	89bb      	ldrh	r3, [r7, #12]
 800b0b2:	81fb      	strh	r3, [r7, #14]
 800b0b4:	e006      	b.n	800b0c4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b0b6:	89bb      	ldrh	r3, [r7, #12]
 800b0b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d001      	beq.n	800b0c4 <cmp_lfn+0xa0>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	e018      	b.n	800b0f6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	613b      	str	r3, [r7, #16]
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	2b0c      	cmp	r3, #12
 800b0ce:	d9c8      	bls.n	800b062 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00b      	beq.n	800b0f4 <cmp_lfn+0xd0>
 800b0dc:	89fb      	ldrh	r3, [r7, #14]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d008      	beq.n	800b0f4 <cmp_lfn+0xd0>
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	005b      	lsls	r3, r3, #1
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	881b      	ldrh	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <cmp_lfn+0xd0>
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	e000      	b.n	800b0f6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b0f4:	2301      	movs	r3, #1
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	371c      	adds	r7, #28
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd90      	pop	{r4, r7, pc}
 800b0fe:	bf00      	nop
 800b100:	080123b4 	.word	0x080123b4

0800b104 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	331a      	adds	r3, #26
 800b112:	4618      	mov	r0, r3
 800b114:	f7fe ff90 	bl	800a038 <ld_word>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <pick_lfn+0x1e>
 800b11e:	2300      	movs	r3, #0
 800b120:	e04d      	b.n	800b1be <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b12a:	1e5a      	subs	r2, r3, #1
 800b12c:	4613      	mov	r3, r2
 800b12e:	005b      	lsls	r3, r3, #1
 800b130:	4413      	add	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4413      	add	r3, r2
 800b136:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b138:	2301      	movs	r3, #1
 800b13a:	81fb      	strh	r3, [r7, #14]
 800b13c:	2300      	movs	r3, #0
 800b13e:	613b      	str	r3, [r7, #16]
 800b140:	e028      	b.n	800b194 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b142:	4a21      	ldr	r2, [pc, #132]	; (800b1c8 <pick_lfn+0xc4>)
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	4413      	add	r3, r2
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	461a      	mov	r2, r3
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	4413      	add	r3, r2
 800b150:	4618      	mov	r0, r3
 800b152:	f7fe ff71 	bl	800a038 <ld_word>
 800b156:	4603      	mov	r3, r0
 800b158:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b15a:	89fb      	ldrh	r3, [r7, #14]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00f      	beq.n	800b180 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	2bfe      	cmp	r3, #254	; 0xfe
 800b164:	d901      	bls.n	800b16a <pick_lfn+0x66>
 800b166:	2300      	movs	r3, #0
 800b168:	e029      	b.n	800b1be <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b16a:	89bb      	ldrh	r3, [r7, #12]
 800b16c:	81fb      	strh	r3, [r7, #14]
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	1c5a      	adds	r2, r3, #1
 800b172:	617a      	str	r2, [r7, #20]
 800b174:	005b      	lsls	r3, r3, #1
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	4413      	add	r3, r2
 800b17a:	89fa      	ldrh	r2, [r7, #14]
 800b17c:	801a      	strh	r2, [r3, #0]
 800b17e:	e006      	b.n	800b18e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b180:	89bb      	ldrh	r3, [r7, #12]
 800b182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b186:	4293      	cmp	r3, r2
 800b188:	d001      	beq.n	800b18e <pick_lfn+0x8a>
 800b18a:	2300      	movs	r3, #0
 800b18c:	e017      	b.n	800b1be <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	3301      	adds	r3, #1
 800b192:	613b      	str	r3, [r7, #16]
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	2b0c      	cmp	r3, #12
 800b198:	d9d3      	bls.n	800b142 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00a      	beq.n	800b1bc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2bfe      	cmp	r3, #254	; 0xfe
 800b1aa:	d901      	bls.n	800b1b0 <pick_lfn+0xac>
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	e006      	b.n	800b1be <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	005b      	lsls	r3, r3, #1
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b1bc:	2301      	movs	r3, #1
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3718      	adds	r7, #24
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	080123b4 	.word	0x080123b4

0800b1cc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b088      	sub	sp, #32
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	461a      	mov	r2, r3
 800b1da:	460b      	mov	r3, r1
 800b1dc:	71fb      	strb	r3, [r7, #7]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	330d      	adds	r3, #13
 800b1e6:	79ba      	ldrb	r2, [r7, #6]
 800b1e8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	330b      	adds	r3, #11
 800b1ee:	220f      	movs	r2, #15
 800b1f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	330c      	adds	r3, #12
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	331a      	adds	r3, #26
 800b1fe:	2100      	movs	r1, #0
 800b200:	4618      	mov	r0, r3
 800b202:	f7fe ff54 	bl	800a0ae <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b206:	79fb      	ldrb	r3, [r7, #7]
 800b208:	1e5a      	subs	r2, r3, #1
 800b20a:	4613      	mov	r3, r2
 800b20c:	005b      	lsls	r3, r3, #1
 800b20e:	4413      	add	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	4413      	add	r3, r2
 800b214:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	82fb      	strh	r3, [r7, #22]
 800b21a:	2300      	movs	r3, #0
 800b21c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b21e:	8afb      	ldrh	r3, [r7, #22]
 800b220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b224:	4293      	cmp	r3, r2
 800b226:	d007      	beq.n	800b238 <put_lfn+0x6c>
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	1c5a      	adds	r2, r3, #1
 800b22c:	61fa      	str	r2, [r7, #28]
 800b22e:	005b      	lsls	r3, r3, #1
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	4413      	add	r3, r2
 800b234:	881b      	ldrh	r3, [r3, #0]
 800b236:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b238:	4a17      	ldr	r2, [pc, #92]	; (800b298 <put_lfn+0xcc>)
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	4413      	add	r3, r2
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	461a      	mov	r2, r3
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	4413      	add	r3, r2
 800b246:	8afa      	ldrh	r2, [r7, #22]
 800b248:	4611      	mov	r1, r2
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7fe ff2f 	bl	800a0ae <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b250:	8afb      	ldrh	r3, [r7, #22]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d102      	bne.n	800b25c <put_lfn+0x90>
 800b256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b25a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	3301      	adds	r3, #1
 800b260:	61bb      	str	r3, [r7, #24]
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	2b0c      	cmp	r3, #12
 800b266:	d9da      	bls.n	800b21e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b268:	8afb      	ldrh	r3, [r7, #22]
 800b26a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b26e:	4293      	cmp	r3, r2
 800b270:	d006      	beq.n	800b280 <put_lfn+0xb4>
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	005b      	lsls	r3, r3, #1
 800b276:	68fa      	ldr	r2, [r7, #12]
 800b278:	4413      	add	r3, r2
 800b27a:	881b      	ldrh	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d103      	bne.n	800b288 <put_lfn+0xbc>
 800b280:	79fb      	ldrb	r3, [r7, #7]
 800b282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b286:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	79fa      	ldrb	r2, [r7, #7]
 800b28c:	701a      	strb	r2, [r3, #0]
}
 800b28e:	bf00      	nop
 800b290:	3720      	adds	r7, #32
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	080123b4 	.word	0x080123b4

0800b29c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b08c      	sub	sp, #48	; 0x30
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	607a      	str	r2, [r7, #4]
 800b2a8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b2aa:	220b      	movs	r2, #11
 800b2ac:	68b9      	ldr	r1, [r7, #8]
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f7fe ff44 	bl	800a13c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	2b05      	cmp	r3, #5
 800b2b8:	d92b      	bls.n	800b312 <gen_numname+0x76>
		sr = seq;
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b2be:	e022      	b.n	800b306 <gen_numname+0x6a>
			wc = *lfn++;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	1c9a      	adds	r2, r3, #2
 800b2c4:	607a      	str	r2, [r7, #4]
 800b2c6:	881b      	ldrh	r3, [r3, #0]
 800b2c8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2ce:	e017      	b.n	800b300 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	005a      	lsls	r2, r3, #1
 800b2d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	4413      	add	r3, r2
 800b2dc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b2de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2e0:	085b      	lsrs	r3, r3, #1
 800b2e2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d005      	beq.n	800b2fa <gen_numname+0x5e>
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b2f4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b2f8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	2b0f      	cmp	r3, #15
 800b304:	d9e4      	bls.n	800b2d0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	881b      	ldrh	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1d8      	bne.n	800b2c0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b312:	2307      	movs	r3, #7
 800b314:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	f003 030f 	and.w	r3, r3, #15
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	3330      	adds	r3, #48	; 0x30
 800b322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b32a:	2b39      	cmp	r3, #57	; 0x39
 800b32c:	d904      	bls.n	800b338 <gen_numname+0x9c>
 800b32e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b332:	3307      	adds	r3, #7
 800b334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33a:	1e5a      	subs	r2, r3, #1
 800b33c:	62ba      	str	r2, [r7, #40]	; 0x28
 800b33e:	3330      	adds	r3, #48	; 0x30
 800b340:	443b      	add	r3, r7
 800b342:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b346:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	091b      	lsrs	r3, r3, #4
 800b34e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1df      	bne.n	800b316 <gen_numname+0x7a>
	ns[i] = '~';
 800b356:	f107 0214 	add.w	r2, r7, #20
 800b35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35c:	4413      	add	r3, r2
 800b35e:	227e      	movs	r2, #126	; 0x7e
 800b360:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b362:	2300      	movs	r3, #0
 800b364:	627b      	str	r3, [r7, #36]	; 0x24
 800b366:	e002      	b.n	800b36e <gen_numname+0xd2>
 800b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36a:	3301      	adds	r3, #1
 800b36c:	627b      	str	r3, [r7, #36]	; 0x24
 800b36e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b372:	429a      	cmp	r2, r3
 800b374:	d205      	bcs.n	800b382 <gen_numname+0xe6>
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37a:	4413      	add	r3, r2
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	2b20      	cmp	r3, #32
 800b380:	d1f2      	bne.n	800b368 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b384:	2b07      	cmp	r3, #7
 800b386:	d807      	bhi.n	800b398 <gen_numname+0xfc>
 800b388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	62ba      	str	r2, [r7, #40]	; 0x28
 800b38e:	3330      	adds	r3, #48	; 0x30
 800b390:	443b      	add	r3, r7
 800b392:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b396:	e000      	b.n	800b39a <gen_numname+0xfe>
 800b398:	2120      	movs	r1, #32
 800b39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39c:	1c5a      	adds	r2, r3, #1
 800b39e:	627a      	str	r2, [r7, #36]	; 0x24
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	460a      	mov	r2, r1
 800b3a6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3aa:	2b07      	cmp	r3, #7
 800b3ac:	d9e9      	bls.n	800b382 <gen_numname+0xe6>
}
 800b3ae:	bf00      	nop
 800b3b0:	bf00      	nop
 800b3b2:	3730      	adds	r7, #48	; 0x30
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b3c4:	230b      	movs	r3, #11
 800b3c6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b3c8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ca:	b2da      	uxtb	r2, r3
 800b3cc:	0852      	lsrs	r2, r2, #1
 800b3ce:	01db      	lsls	r3, r3, #7
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	b2da      	uxtb	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	1c59      	adds	r1, r3, #1
 800b3d8:	6079      	str	r1, [r7, #4]
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	4413      	add	r3, r2
 800b3de:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	60bb      	str	r3, [r7, #8]
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1ed      	bne.n	800b3c8 <sum_sfn+0x10>
	return sum;
 800b3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3714      	adds	r7, #20
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b086      	sub	sp, #24
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b404:	2304      	movs	r3, #4
 800b406:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800b40e:	23ff      	movs	r3, #255	; 0xff
 800b410:	757b      	strb	r3, [r7, #21]
 800b412:	23ff      	movs	r3, #255	; 0xff
 800b414:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b416:	e081      	b.n	800b51c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	69db      	ldr	r3, [r3, #28]
 800b41c:	4619      	mov	r1, r3
 800b41e:	6938      	ldr	r0, [r7, #16]
 800b420:	f7ff f8ba 	bl	800a598 <move_window>
 800b424:	4603      	mov	r3, r0
 800b426:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b428:	7dfb      	ldrb	r3, [r7, #23]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d17c      	bne.n	800b528 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a1b      	ldr	r3, [r3, #32]
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b436:	7dbb      	ldrb	r3, [r7, #22]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d102      	bne.n	800b442 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b43c:	2304      	movs	r3, #4
 800b43e:	75fb      	strb	r3, [r7, #23]
 800b440:	e077      	b.n	800b532 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a1b      	ldr	r3, [r3, #32]
 800b446:	330b      	adds	r3, #11
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b44e:	73fb      	strb	r3, [r7, #15]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	7bfa      	ldrb	r2, [r7, #15]
 800b454:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b456:	7dbb      	ldrb	r3, [r7, #22]
 800b458:	2be5      	cmp	r3, #229	; 0xe5
 800b45a:	d00e      	beq.n	800b47a <dir_read+0x80>
 800b45c:	7dbb      	ldrb	r3, [r7, #22]
 800b45e:	2b2e      	cmp	r3, #46	; 0x2e
 800b460:	d00b      	beq.n	800b47a <dir_read+0x80>
 800b462:	7bfb      	ldrb	r3, [r7, #15]
 800b464:	f023 0320 	bic.w	r3, r3, #32
 800b468:	2b08      	cmp	r3, #8
 800b46a:	bf0c      	ite	eq
 800b46c:	2301      	moveq	r3, #1
 800b46e:	2300      	movne	r3, #0
 800b470:	b2db      	uxtb	r3, r3
 800b472:	461a      	mov	r2, r3
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	4293      	cmp	r3, r2
 800b478:	d002      	beq.n	800b480 <dir_read+0x86>
				ord = 0xFF;
 800b47a:	23ff      	movs	r3, #255	; 0xff
 800b47c:	757b      	strb	r3, [r7, #21]
 800b47e:	e044      	b.n	800b50a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b480:	7bfb      	ldrb	r3, [r7, #15]
 800b482:	2b0f      	cmp	r3, #15
 800b484:	d12f      	bne.n	800b4e6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b486:	7dbb      	ldrb	r3, [r7, #22]
 800b488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00d      	beq.n	800b4ac <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6a1b      	ldr	r3, [r3, #32]
 800b494:	7b5b      	ldrb	r3, [r3, #13]
 800b496:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b498:	7dbb      	ldrb	r3, [r7, #22]
 800b49a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b49e:	75bb      	strb	r3, [r7, #22]
 800b4a0:	7dbb      	ldrb	r3, [r7, #22]
 800b4a2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	695a      	ldr	r2, [r3, #20]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b4ac:	7dba      	ldrb	r2, [r7, #22]
 800b4ae:	7d7b      	ldrb	r3, [r7, #21]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d115      	bne.n	800b4e0 <dir_read+0xe6>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6a1b      	ldr	r3, [r3, #32]
 800b4b8:	330d      	adds	r3, #13
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	7d3a      	ldrb	r2, [r7, #20]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d10e      	bne.n	800b4e0 <dir_read+0xe6>
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	68da      	ldr	r2, [r3, #12]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a1b      	ldr	r3, [r3, #32]
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	f7ff fe19 	bl	800b104 <pick_lfn>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d003      	beq.n	800b4e0 <dir_read+0xe6>
 800b4d8:	7d7b      	ldrb	r3, [r7, #21]
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	e000      	b.n	800b4e2 <dir_read+0xe8>
 800b4e0:	23ff      	movs	r3, #255	; 0xff
 800b4e2:	757b      	strb	r3, [r7, #21]
 800b4e4:	e011      	b.n	800b50a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b4e6:	7d7b      	ldrb	r3, [r7, #21]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d109      	bne.n	800b500 <dir_read+0x106>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6a1b      	ldr	r3, [r3, #32]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff ff61 	bl	800b3b8 <sum_sfn>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	7d3b      	ldrb	r3, [r7, #20]
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d015      	beq.n	800b52c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f04f 32ff 	mov.w	r2, #4294967295
 800b506:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800b508:	e010      	b.n	800b52c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b50a:	2100      	movs	r1, #0
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7ff fc3e 	bl	800ad8e <dir_next>
 800b512:	4603      	mov	r3, r0
 800b514:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b516:	7dfb      	ldrb	r3, [r7, #23]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d109      	bne.n	800b530 <dir_read+0x136>
	while (dp->sect) {
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	69db      	ldr	r3, [r3, #28]
 800b520:	2b00      	cmp	r3, #0
 800b522:	f47f af79 	bne.w	800b418 <dir_read+0x1e>
 800b526:	e004      	b.n	800b532 <dir_read+0x138>
		if (res != FR_OK) break;
 800b528:	bf00      	nop
 800b52a:	e002      	b.n	800b532 <dir_read+0x138>
					break;
 800b52c:	bf00      	nop
 800b52e:	e000      	b.n	800b532 <dir_read+0x138>
		if (res != FR_OK) break;
 800b530:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b532:	7dfb      	ldrb	r3, [r7, #23]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d002      	beq.n	800b53e <dir_read+0x144>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	61da      	str	r2, [r3, #28]
	return res;
 800b53e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3718      	adds	r7, #24
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b086      	sub	sp, #24
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b556:	2100      	movs	r1, #0
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f7ff fb9d 	bl	800ac98 <dir_sdi>
 800b55e:	4603      	mov	r3, r0
 800b560:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b562:	7dfb      	ldrb	r3, [r7, #23]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d001      	beq.n	800b56c <dir_find+0x24>
 800b568:	7dfb      	ldrb	r3, [r7, #23]
 800b56a:	e0a9      	b.n	800b6c0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b56c:	23ff      	movs	r3, #255	; 0xff
 800b56e:	753b      	strb	r3, [r7, #20]
 800b570:	7d3b      	ldrb	r3, [r7, #20]
 800b572:	757b      	strb	r3, [r7, #21]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f04f 32ff 	mov.w	r2, #4294967295
 800b57a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	69db      	ldr	r3, [r3, #28]
 800b580:	4619      	mov	r1, r3
 800b582:	6938      	ldr	r0, [r7, #16]
 800b584:	f7ff f808 	bl	800a598 <move_window>
 800b588:	4603      	mov	r3, r0
 800b58a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b58c:	7dfb      	ldrb	r3, [r7, #23]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	f040 8090 	bne.w	800b6b4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a1b      	ldr	r3, [r3, #32]
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b59c:	7dbb      	ldrb	r3, [r7, #22]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d102      	bne.n	800b5a8 <dir_find+0x60>
 800b5a2:	2304      	movs	r3, #4
 800b5a4:	75fb      	strb	r3, [r7, #23]
 800b5a6:	e08a      	b.n	800b6be <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a1b      	ldr	r3, [r3, #32]
 800b5ac:	330b      	adds	r3, #11
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5b4:	73fb      	strb	r3, [r7, #15]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	7bfa      	ldrb	r2, [r7, #15]
 800b5ba:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b5bc:	7dbb      	ldrb	r3, [r7, #22]
 800b5be:	2be5      	cmp	r3, #229	; 0xe5
 800b5c0:	d007      	beq.n	800b5d2 <dir_find+0x8a>
 800b5c2:	7bfb      	ldrb	r3, [r7, #15]
 800b5c4:	f003 0308 	and.w	r3, r3, #8
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d009      	beq.n	800b5e0 <dir_find+0x98>
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
 800b5ce:	2b0f      	cmp	r3, #15
 800b5d0:	d006      	beq.n	800b5e0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b5d2:	23ff      	movs	r3, #255	; 0xff
 800b5d4:	757b      	strb	r3, [r7, #21]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5dc:	631a      	str	r2, [r3, #48]	; 0x30
 800b5de:	e05e      	b.n	800b69e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
 800b5e2:	2b0f      	cmp	r3, #15
 800b5e4:	d136      	bne.n	800b654 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b5ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d154      	bne.n	800b69e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b5f4:	7dbb      	ldrb	r3, [r7, #22]
 800b5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00d      	beq.n	800b61a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	7b5b      	ldrb	r3, [r3, #13]
 800b604:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b606:	7dbb      	ldrb	r3, [r7, #22]
 800b608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b60c:	75bb      	strb	r3, [r7, #22]
 800b60e:	7dbb      	ldrb	r3, [r7, #22]
 800b610:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	695a      	ldr	r2, [r3, #20]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b61a:	7dba      	ldrb	r2, [r7, #22]
 800b61c:	7d7b      	ldrb	r3, [r7, #21]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d115      	bne.n	800b64e <dir_find+0x106>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a1b      	ldr	r3, [r3, #32]
 800b626:	330d      	adds	r3, #13
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	7d3a      	ldrb	r2, [r7, #20]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d10e      	bne.n	800b64e <dir_find+0x106>
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	68da      	ldr	r2, [r3, #12]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6a1b      	ldr	r3, [r3, #32]
 800b638:	4619      	mov	r1, r3
 800b63a:	4610      	mov	r0, r2
 800b63c:	f7ff fcf2 	bl	800b024 <cmp_lfn>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d003      	beq.n	800b64e <dir_find+0x106>
 800b646:	7d7b      	ldrb	r3, [r7, #21]
 800b648:	3b01      	subs	r3, #1
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	e000      	b.n	800b650 <dir_find+0x108>
 800b64e:	23ff      	movs	r3, #255	; 0xff
 800b650:	757b      	strb	r3, [r7, #21]
 800b652:	e024      	b.n	800b69e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b654:	7d7b      	ldrb	r3, [r7, #21]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d109      	bne.n	800b66e <dir_find+0x126>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	4618      	mov	r0, r3
 800b660:	f7ff feaa 	bl	800b3b8 <sum_sfn>
 800b664:	4603      	mov	r3, r0
 800b666:	461a      	mov	r2, r3
 800b668:	7d3b      	ldrb	r3, [r7, #20]
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d024      	beq.n	800b6b8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b674:	f003 0301 	and.w	r3, r3, #1
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10a      	bne.n	800b692 <dir_find+0x14a>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a18      	ldr	r0, [r3, #32]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	3324      	adds	r3, #36	; 0x24
 800b684:	220b      	movs	r2, #11
 800b686:	4619      	mov	r1, r3
 800b688:	f7fe fd94 	bl	800a1b4 <mem_cmp>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d014      	beq.n	800b6bc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b692:	23ff      	movs	r3, #255	; 0xff
 800b694:	757b      	strb	r3, [r7, #21]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f04f 32ff 	mov.w	r2, #4294967295
 800b69c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b69e:	2100      	movs	r1, #0
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7ff fb74 	bl	800ad8e <dir_next>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b6aa:	7dfb      	ldrb	r3, [r7, #23]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f43f af65 	beq.w	800b57c <dir_find+0x34>
 800b6b2:	e004      	b.n	800b6be <dir_find+0x176>
		if (res != FR_OK) break;
 800b6b4:	bf00      	nop
 800b6b6:	e002      	b.n	800b6be <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b6b8:	bf00      	nop
 800b6ba:	e000      	b.n	800b6be <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b6bc:	bf00      	nop

	return res;
 800b6be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b08c      	sub	sp, #48	; 0x30
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b6dc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d001      	beq.n	800b6e8 <dir_register+0x20>
 800b6e4:	2306      	movs	r3, #6
 800b6e6:	e0e0      	b.n	800b8aa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	627b      	str	r3, [r7, #36]	; 0x24
 800b6ec:	e002      	b.n	800b6f4 <dir_register+0x2c>
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	627b      	str	r3, [r7, #36]	; 0x24
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	68da      	ldr	r2, [r3, #12]
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	4413      	add	r3, r2
 800b6fe:	881b      	ldrh	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1f4      	bne.n	800b6ee <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b70a:	f107 030c 	add.w	r3, r7, #12
 800b70e:	220c      	movs	r2, #12
 800b710:	4618      	mov	r0, r3
 800b712:	f7fe fd13 	bl	800a13c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b716:	7dfb      	ldrb	r3, [r7, #23]
 800b718:	f003 0301 	and.w	r3, r3, #1
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d032      	beq.n	800b786 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2240      	movs	r2, #64	; 0x40
 800b724:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b728:	2301      	movs	r3, #1
 800b72a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b72c:	e016      	b.n	800b75c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	68da      	ldr	r2, [r3, #12]
 800b738:	f107 010c 	add.w	r1, r7, #12
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	f7ff fdad 	bl	800b29c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f7ff ff00 	bl	800b548 <dir_find>
 800b748:	4603      	mov	r3, r0
 800b74a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b74e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b752:	2b00      	cmp	r3, #0
 800b754:	d106      	bne.n	800b764 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b758:	3301      	adds	r3, #1
 800b75a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75e:	2b63      	cmp	r3, #99	; 0x63
 800b760:	d9e5      	bls.n	800b72e <dir_register+0x66>
 800b762:	e000      	b.n	800b766 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b764:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b768:	2b64      	cmp	r3, #100	; 0x64
 800b76a:	d101      	bne.n	800b770 <dir_register+0xa8>
 800b76c:	2307      	movs	r3, #7
 800b76e:	e09c      	b.n	800b8aa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b774:	2b04      	cmp	r3, #4
 800b776:	d002      	beq.n	800b77e <dir_register+0xb6>
 800b778:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b77c:	e095      	b.n	800b8aa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b77e:	7dfa      	ldrb	r2, [r7, #23]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b786:	7dfb      	ldrb	r3, [r7, #23]
 800b788:	f003 0302 	and.w	r3, r3, #2
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d007      	beq.n	800b7a0 <dir_register+0xd8>
 800b790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b792:	330c      	adds	r3, #12
 800b794:	4a47      	ldr	r2, [pc, #284]	; (800b8b4 <dir_register+0x1ec>)
 800b796:	fba2 2303 	umull	r2, r3, r2, r3
 800b79a:	089b      	lsrs	r3, r3, #2
 800b79c:	3301      	adds	r3, #1
 800b79e:	e000      	b.n	800b7a2 <dir_register+0xda>
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b7a4:	6a39      	ldr	r1, [r7, #32]
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7ff fbb6 	bl	800af18 <dir_alloc>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b7b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d148      	bne.n	800b84c <dir_register+0x184>
 800b7ba:	6a3b      	ldr	r3, [r7, #32]
 800b7bc:	3b01      	subs	r3, #1
 800b7be:	623b      	str	r3, [r7, #32]
 800b7c0:	6a3b      	ldr	r3, [r7, #32]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d042      	beq.n	800b84c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	695a      	ldr	r2, [r3, #20]
 800b7ca:	6a3b      	ldr	r3, [r7, #32]
 800b7cc:	015b      	lsls	r3, r3, #5
 800b7ce:	1ad3      	subs	r3, r2, r3
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7ff fa60 	bl	800ac98 <dir_sdi>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b7de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d132      	bne.n	800b84c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	3324      	adds	r3, #36	; 0x24
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7ff fde4 	bl	800b3b8 <sum_sfn>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	69db      	ldr	r3, [r3, #28]
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	69f8      	ldr	r0, [r7, #28]
 800b7fc:	f7fe fecc 	bl	800a598 <move_window>
 800b800:	4603      	mov	r3, r0
 800b802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d11d      	bne.n	800b84a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	68d8      	ldr	r0, [r3, #12]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a19      	ldr	r1, [r3, #32]
 800b816:	6a3b      	ldr	r3, [r7, #32]
 800b818:	b2da      	uxtb	r2, r3
 800b81a:	7efb      	ldrb	r3, [r7, #27]
 800b81c:	f7ff fcd6 	bl	800b1cc <put_lfn>
				fs->wflag = 1;
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	2201      	movs	r2, #1
 800b824:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b826:	2100      	movs	r1, #0
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7ff fab0 	bl	800ad8e <dir_next>
 800b82e:	4603      	mov	r3, r0
 800b830:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b834:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d107      	bne.n	800b84c <dir_register+0x184>
 800b83c:	6a3b      	ldr	r3, [r7, #32]
 800b83e:	3b01      	subs	r3, #1
 800b840:	623b      	str	r3, [r7, #32]
 800b842:	6a3b      	ldr	r3, [r7, #32]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1d5      	bne.n	800b7f4 <dir_register+0x12c>
 800b848:	e000      	b.n	800b84c <dir_register+0x184>
				if (res != FR_OK) break;
 800b84a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b84c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b850:	2b00      	cmp	r3, #0
 800b852:	d128      	bne.n	800b8a6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	69db      	ldr	r3, [r3, #28]
 800b858:	4619      	mov	r1, r3
 800b85a:	69f8      	ldr	r0, [r7, #28]
 800b85c:	f7fe fe9c 	bl	800a598 <move_window>
 800b860:	4603      	mov	r3, r0
 800b862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b866:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d11b      	bne.n	800b8a6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a1b      	ldr	r3, [r3, #32]
 800b872:	2220      	movs	r2, #32
 800b874:	2100      	movs	r1, #0
 800b876:	4618      	mov	r0, r3
 800b878:	f7fe fc81 	bl	800a17e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a18      	ldr	r0, [r3, #32]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	3324      	adds	r3, #36	; 0x24
 800b884:	220b      	movs	r2, #11
 800b886:	4619      	mov	r1, r3
 800b888:	f7fe fc58 	bl	800a13c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6a1b      	ldr	r3, [r3, #32]
 800b896:	330c      	adds	r3, #12
 800b898:	f002 0218 	and.w	r2, r2, #24
 800b89c:	b2d2      	uxtb	r2, r2
 800b89e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b8a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3730      	adds	r7, #48	; 0x30
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	4ec4ec4f 	.word	0x4ec4ec4f

0800b8b8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b086      	sub	sp, #24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	695b      	ldr	r3, [r3, #20]
 800b8ca:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8d4:	d007      	beq.n	800b8e6 <dir_remove+0x2e>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8da:	4619      	mov	r1, r3
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f7ff f9db 	bl	800ac98 <dir_sdi>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	e000      	b.n	800b8e8 <dir_remove+0x30>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d128      	bne.n	800b942 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	69db      	ldr	r3, [r3, #28]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	6938      	ldr	r0, [r7, #16]
 800b8f8:	f7fe fe4e 	bl	800a598 <move_window>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b900:	7dfb      	ldrb	r3, [r7, #23]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d115      	bne.n	800b932 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	22e5      	movs	r2, #229	; 0xe5
 800b90c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	2201      	movs	r2, #1
 800b912:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	695b      	ldr	r3, [r3, #20]
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d90b      	bls.n	800b936 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800b91e:	2100      	movs	r1, #0
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7ff fa34 	bl	800ad8e <dir_next>
 800b926:	4603      	mov	r3, r0
 800b928:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800b92a:	7dfb      	ldrb	r3, [r7, #23]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d0df      	beq.n	800b8f0 <dir_remove+0x38>
 800b930:	e002      	b.n	800b938 <dir_remove+0x80>
			if (res != FR_OK) break;
 800b932:	bf00      	nop
 800b934:	e000      	b.n	800b938 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800b936:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800b938:	7dfb      	ldrb	r3, [r7, #23]
 800b93a:	2b04      	cmp	r3, #4
 800b93c:	d101      	bne.n	800b942 <dir_remove+0x8a>
 800b93e:	2302      	movs	r3, #2
 800b940:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800b942:	7dfb      	ldrb	r3, [r7, #23]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3718      	adds	r7, #24
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08a      	sub	sp, #40	; 0x28
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	613b      	str	r3, [r7, #16]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	60fb      	str	r3, [r7, #12]
 800b964:	2300      	movs	r3, #0
 800b966:	617b      	str	r3, [r7, #20]
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	1c5a      	adds	r2, r3, #1
 800b970:	61ba      	str	r2, [r7, #24]
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	4413      	add	r3, r2
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b97a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b97c:	2b1f      	cmp	r3, #31
 800b97e:	d940      	bls.n	800ba02 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b982:	2b2f      	cmp	r3, #47	; 0x2f
 800b984:	d006      	beq.n	800b994 <create_name+0x48>
 800b986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b988:	2b5c      	cmp	r3, #92	; 0x5c
 800b98a:	d110      	bne.n	800b9ae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b98c:	e002      	b.n	800b994 <create_name+0x48>
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	3301      	adds	r3, #1
 800b992:	61bb      	str	r3, [r7, #24]
 800b994:	693a      	ldr	r2, [r7, #16]
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	4413      	add	r3, r2
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	2b2f      	cmp	r3, #47	; 0x2f
 800b99e:	d0f6      	beq.n	800b98e <create_name+0x42>
 800b9a0:	693a      	ldr	r2, [r7, #16]
 800b9a2:	69bb      	ldr	r3, [r7, #24]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	2b5c      	cmp	r3, #92	; 0x5c
 800b9aa:	d0f0      	beq.n	800b98e <create_name+0x42>
			break;
 800b9ac:	e02a      	b.n	800ba04 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	2bfe      	cmp	r3, #254	; 0xfe
 800b9b2:	d901      	bls.n	800b9b8 <create_name+0x6c>
 800b9b4:	2306      	movs	r3, #6
 800b9b6:	e17d      	b.n	800bcb4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b9b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b9be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9c0:	2101      	movs	r1, #1
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f001 fd8e 	bl	800d4e4 <ff_convert>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b9cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d101      	bne.n	800b9d6 <create_name+0x8a>
 800b9d2:	2306      	movs	r3, #6
 800b9d4:	e16e      	b.n	800bcb4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b9d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9d8:	2b7f      	cmp	r3, #127	; 0x7f
 800b9da:	d809      	bhi.n	800b9f0 <create_name+0xa4>
 800b9dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9de:	4619      	mov	r1, r3
 800b9e0:	488d      	ldr	r0, [pc, #564]	; (800bc18 <create_name+0x2cc>)
 800b9e2:	f7fe fc0e 	bl	800a202 <chk_chr>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d001      	beq.n	800b9f0 <create_name+0xa4>
 800b9ec:	2306      	movs	r3, #6
 800b9ee:	e161      	b.n	800bcb4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	1c5a      	adds	r2, r3, #1
 800b9f4:	617a      	str	r2, [r7, #20]
 800b9f6:	005b      	lsls	r3, r3, #1
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b9fe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ba00:	e7b4      	b.n	800b96c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ba02:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ba04:	693a      	ldr	r2, [r7, #16]
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	441a      	add	r2, r3
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ba0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba10:	2b1f      	cmp	r3, #31
 800ba12:	d801      	bhi.n	800ba18 <create_name+0xcc>
 800ba14:	2304      	movs	r3, #4
 800ba16:	e000      	b.n	800ba1a <create_name+0xce>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ba1e:	e011      	b.n	800ba44 <create_name+0xf8>
		w = lfn[di - 1];
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba26:	3b01      	subs	r3, #1
 800ba28:	005b      	lsls	r3, r3, #1
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	881b      	ldrh	r3, [r3, #0]
 800ba30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ba32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba34:	2b20      	cmp	r3, #32
 800ba36:	d002      	beq.n	800ba3e <create_name+0xf2>
 800ba38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba3a:	2b2e      	cmp	r3, #46	; 0x2e
 800ba3c:	d106      	bne.n	800ba4c <create_name+0x100>
		di--;
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	3b01      	subs	r3, #1
 800ba42:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1ea      	bne.n	800ba20 <create_name+0xd4>
 800ba4a:	e000      	b.n	800ba4e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ba4c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	005b      	lsls	r3, r3, #1
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	4413      	add	r3, r2
 800ba56:	2200      	movs	r2, #0
 800ba58:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d101      	bne.n	800ba64 <create_name+0x118>
 800ba60:	2306      	movs	r3, #6
 800ba62:	e127      	b.n	800bcb4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	3324      	adds	r3, #36	; 0x24
 800ba68:	220b      	movs	r2, #11
 800ba6a:	2120      	movs	r1, #32
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7fe fb86 	bl	800a17e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ba72:	2300      	movs	r3, #0
 800ba74:	61bb      	str	r3, [r7, #24]
 800ba76:	e002      	b.n	800ba7e <create_name+0x132>
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	61bb      	str	r3, [r7, #24]
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	005b      	lsls	r3, r3, #1
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	4413      	add	r3, r2
 800ba86:	881b      	ldrh	r3, [r3, #0]
 800ba88:	2b20      	cmp	r3, #32
 800ba8a:	d0f5      	beq.n	800ba78 <create_name+0x12c>
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	005b      	lsls	r3, r3, #1
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	4413      	add	r3, r2
 800ba94:	881b      	ldrh	r3, [r3, #0]
 800ba96:	2b2e      	cmp	r3, #46	; 0x2e
 800ba98:	d0ee      	beq.n	800ba78 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d009      	beq.n	800bab4 <create_name+0x168>
 800baa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baa4:	f043 0303 	orr.w	r3, r3, #3
 800baa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800baac:	e002      	b.n	800bab4 <create_name+0x168>
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	3b01      	subs	r3, #1
 800bab2:	617b      	str	r3, [r7, #20]
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d009      	beq.n	800bace <create_name+0x182>
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bac0:	3b01      	subs	r3, #1
 800bac2:	005b      	lsls	r3, r3, #1
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	4413      	add	r3, r2
 800bac8:	881b      	ldrh	r3, [r3, #0]
 800baca:	2b2e      	cmp	r3, #46	; 0x2e
 800bacc:	d1ef      	bne.n	800baae <create_name+0x162>

	i = b = 0; ni = 8;
 800bace:	2300      	movs	r3, #0
 800bad0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bad4:	2300      	movs	r3, #0
 800bad6:	623b      	str	r3, [r7, #32]
 800bad8:	2308      	movs	r3, #8
 800bada:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	1c5a      	adds	r2, r3, #1
 800bae0:	61ba      	str	r2, [r7, #24]
 800bae2:	005b      	lsls	r3, r3, #1
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	4413      	add	r3, r2
 800bae8:	881b      	ldrh	r3, [r3, #0]
 800baea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800baec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f000 8090 	beq.w	800bc14 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800baf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baf6:	2b20      	cmp	r3, #32
 800baf8:	d006      	beq.n	800bb08 <create_name+0x1bc>
 800bafa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bafc:	2b2e      	cmp	r3, #46	; 0x2e
 800bafe:	d10a      	bne.n	800bb16 <create_name+0x1ca>
 800bb00:	69ba      	ldr	r2, [r7, #24]
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d006      	beq.n	800bb16 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800bb08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb0c:	f043 0303 	orr.w	r3, r3, #3
 800bb10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb14:	e07d      	b.n	800bc12 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bb16:	6a3a      	ldr	r2, [r7, #32]
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d203      	bcs.n	800bb26 <create_name+0x1da>
 800bb1e:	69ba      	ldr	r2, [r7, #24]
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d123      	bne.n	800bb6e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	2b0b      	cmp	r3, #11
 800bb2a:	d106      	bne.n	800bb3a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800bb2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb30:	f043 0303 	orr.w	r3, r3, #3
 800bb34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb38:	e075      	b.n	800bc26 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bb3a:	69ba      	ldr	r2, [r7, #24]
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d005      	beq.n	800bb4e <create_name+0x202>
 800bb42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb46:	f043 0303 	orr.w	r3, r3, #3
 800bb4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800bb4e:	69ba      	ldr	r2, [r7, #24]
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d866      	bhi.n	800bc24 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	61bb      	str	r3, [r7, #24]
 800bb5a:	2308      	movs	r3, #8
 800bb5c:	623b      	str	r3, [r7, #32]
 800bb5e:	230b      	movs	r3, #11
 800bb60:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bb62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bb6c:	e051      	b.n	800bc12 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bb6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb70:	2b7f      	cmp	r3, #127	; 0x7f
 800bb72:	d914      	bls.n	800bb9e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bb74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb76:	2100      	movs	r1, #0
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f001 fcb3 	bl	800d4e4 <ff_convert>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bb82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d004      	beq.n	800bb92 <create_name+0x246>
 800bb88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb8a:	3b80      	subs	r3, #128	; 0x80
 800bb8c:	4a23      	ldr	r2, [pc, #140]	; (800bc1c <create_name+0x2d0>)
 800bb8e:	5cd3      	ldrb	r3, [r2, r3]
 800bb90:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bb92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb96:	f043 0302 	orr.w	r3, r3, #2
 800bb9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bb9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d007      	beq.n	800bbb4 <create_name+0x268>
 800bba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bba6:	4619      	mov	r1, r3
 800bba8:	481d      	ldr	r0, [pc, #116]	; (800bc20 <create_name+0x2d4>)
 800bbaa:	f7fe fb2a 	bl	800a202 <chk_chr>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d008      	beq.n	800bbc6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bbb4:	235f      	movs	r3, #95	; 0x5f
 800bbb6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bbb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbbc:	f043 0303 	orr.w	r3, r3, #3
 800bbc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bbc4:	e01b      	b.n	800bbfe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bbc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbc8:	2b40      	cmp	r3, #64	; 0x40
 800bbca:	d909      	bls.n	800bbe0 <create_name+0x294>
 800bbcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbce:	2b5a      	cmp	r3, #90	; 0x5a
 800bbd0:	d806      	bhi.n	800bbe0 <create_name+0x294>
					b |= 2;
 800bbd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbd6:	f043 0302 	orr.w	r3, r3, #2
 800bbda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bbde:	e00e      	b.n	800bbfe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bbe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbe2:	2b60      	cmp	r3, #96	; 0x60
 800bbe4:	d90b      	bls.n	800bbfe <create_name+0x2b2>
 800bbe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbe8:	2b7a      	cmp	r3, #122	; 0x7a
 800bbea:	d808      	bhi.n	800bbfe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800bbec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbf0:	f043 0301 	orr.w	r3, r3, #1
 800bbf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bbf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbfa:	3b20      	subs	r3, #32
 800bbfc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bbfe:	6a3b      	ldr	r3, [r7, #32]
 800bc00:	1c5a      	adds	r2, r3, #1
 800bc02:	623a      	str	r2, [r7, #32]
 800bc04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc06:	b2d1      	uxtb	r1, r2
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	460a      	mov	r2, r1
 800bc0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800bc12:	e763      	b.n	800badc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800bc14:	bf00      	nop
 800bc16:	e006      	b.n	800bc26 <create_name+0x2da>
 800bc18:	080122cc 	.word	0x080122cc
 800bc1c:	08012334 	.word	0x08012334
 800bc20:	080122d8 	.word	0x080122d8
			if (si > di) break;			/* No extension */
 800bc24:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bc2c:	2be5      	cmp	r3, #229	; 0xe5
 800bc2e:	d103      	bne.n	800bc38 <create_name+0x2ec>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2205      	movs	r2, #5
 800bc34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	2b08      	cmp	r3, #8
 800bc3c:	d104      	bne.n	800bc48 <create_name+0x2fc>
 800bc3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bc48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc4c:	f003 030c 	and.w	r3, r3, #12
 800bc50:	2b0c      	cmp	r3, #12
 800bc52:	d005      	beq.n	800bc60 <create_name+0x314>
 800bc54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc58:	f003 0303 	and.w	r3, r3, #3
 800bc5c:	2b03      	cmp	r3, #3
 800bc5e:	d105      	bne.n	800bc6c <create_name+0x320>
 800bc60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc64:	f043 0302 	orr.w	r3, r3, #2
 800bc68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc70:	f003 0302 	and.w	r3, r3, #2
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d117      	bne.n	800bca8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bc78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc7c:	f003 0303 	and.w	r3, r3, #3
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d105      	bne.n	800bc90 <create_name+0x344>
 800bc84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc88:	f043 0310 	orr.w	r3, r3, #16
 800bc8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bc90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc94:	f003 030c 	and.w	r3, r3, #12
 800bc98:	2b04      	cmp	r3, #4
 800bc9a:	d105      	bne.n	800bca8 <create_name+0x35c>
 800bc9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bca0:	f043 0308 	orr.w	r3, r3, #8
 800bca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bcae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800bcb2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3728      	adds	r7, #40	; 0x28
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bcd0:	e002      	b.n	800bcd8 <follow_path+0x1c>
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	603b      	str	r3, [r7, #0]
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	2b2f      	cmp	r3, #47	; 0x2f
 800bcde:	d0f8      	beq.n	800bcd2 <follow_path+0x16>
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	2b5c      	cmp	r3, #92	; 0x5c
 800bce6:	d0f4      	beq.n	800bcd2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	2200      	movs	r2, #0
 800bcec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	2b1f      	cmp	r3, #31
 800bcf4:	d80a      	bhi.n	800bd0c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2280      	movs	r2, #128	; 0x80
 800bcfa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bcfe:	2100      	movs	r1, #0
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f7fe ffc9 	bl	800ac98 <dir_sdi>
 800bd06:	4603      	mov	r3, r0
 800bd08:	75fb      	strb	r3, [r7, #23]
 800bd0a:	e043      	b.n	800bd94 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bd0c:	463b      	mov	r3, r7
 800bd0e:	4619      	mov	r1, r3
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f7ff fe1b 	bl	800b94c <create_name>
 800bd16:	4603      	mov	r3, r0
 800bd18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bd1a:	7dfb      	ldrb	r3, [r7, #23]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d134      	bne.n	800bd8a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f7ff fc11 	bl	800b548 <dir_find>
 800bd26:	4603      	mov	r3, r0
 800bd28:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bd30:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00a      	beq.n	800bd4e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bd38:	7dfb      	ldrb	r3, [r7, #23]
 800bd3a:	2b04      	cmp	r3, #4
 800bd3c:	d127      	bne.n	800bd8e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bd3e:	7afb      	ldrb	r3, [r7, #11]
 800bd40:	f003 0304 	and.w	r3, r3, #4
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d122      	bne.n	800bd8e <follow_path+0xd2>
 800bd48:	2305      	movs	r3, #5
 800bd4a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bd4c:	e01f      	b.n	800bd8e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd4e:	7afb      	ldrb	r3, [r7, #11]
 800bd50:	f003 0304 	and.w	r3, r3, #4
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d11c      	bne.n	800bd92 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	799b      	ldrb	r3, [r3, #6]
 800bd5c:	f003 0310 	and.w	r3, r3, #16
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d102      	bne.n	800bd6a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bd64:	2305      	movs	r3, #5
 800bd66:	75fb      	strb	r3, [r7, #23]
 800bd68:	e014      	b.n	800bd94 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	695b      	ldr	r3, [r3, #20]
 800bd74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd78:	4413      	add	r3, r2
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	f7ff f912 	bl	800afa6 <ld_clust>
 800bd82:	4602      	mov	r2, r0
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bd88:	e7c0      	b.n	800bd0c <follow_path+0x50>
			if (res != FR_OK) break;
 800bd8a:	bf00      	nop
 800bd8c:	e002      	b.n	800bd94 <follow_path+0xd8>
				break;
 800bd8e:	bf00      	nop
 800bd90:	e000      	b.n	800bd94 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd92:	bf00      	nop
			}
		}
	}

	return res;
 800bd94:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3718      	adds	r7, #24
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b087      	sub	sp, #28
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bda6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdaa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d031      	beq.n	800be18 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	617b      	str	r3, [r7, #20]
 800bdba:	e002      	b.n	800bdc2 <get_ldnumber+0x24>
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	617b      	str	r3, [r7, #20]
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b1f      	cmp	r3, #31
 800bdc8:	d903      	bls.n	800bdd2 <get_ldnumber+0x34>
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b3a      	cmp	r3, #58	; 0x3a
 800bdd0:	d1f4      	bne.n	800bdbc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	2b3a      	cmp	r3, #58	; 0x3a
 800bdd8:	d11c      	bne.n	800be14 <get_ldnumber+0x76>
			tp = *path;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	1c5a      	adds	r2, r3, #1
 800bde4:	60fa      	str	r2, [r7, #12]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	3b30      	subs	r3, #48	; 0x30
 800bdea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2b09      	cmp	r3, #9
 800bdf0:	d80e      	bhi.n	800be10 <get_ldnumber+0x72>
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d10a      	bne.n	800be10 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d107      	bne.n	800be10 <get_ldnumber+0x72>
					vol = (int)i;
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	3301      	adds	r3, #1
 800be08:	617b      	str	r3, [r7, #20]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	e002      	b.n	800be1a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800be14:	2300      	movs	r3, #0
 800be16:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800be18:	693b      	ldr	r3, [r7, #16]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	371c      	adds	r7, #28
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
	...

0800be28 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	70da      	strb	r2, [r3, #3]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f04f 32ff 	mov.w	r2, #4294967295
 800be3e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800be40:	6839      	ldr	r1, [r7, #0]
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f7fe fba8 	bl	800a598 <move_window>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <check_fs+0x2a>
 800be4e:	2304      	movs	r3, #4
 800be50:	e038      	b.n	800bec4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	3334      	adds	r3, #52	; 0x34
 800be56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fe f8ec 	bl	800a038 <ld_word>
 800be60:	4603      	mov	r3, r0
 800be62:	461a      	mov	r2, r3
 800be64:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800be68:	429a      	cmp	r2, r3
 800be6a:	d001      	beq.n	800be70 <check_fs+0x48>
 800be6c:	2303      	movs	r3, #3
 800be6e:	e029      	b.n	800bec4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be76:	2be9      	cmp	r3, #233	; 0xe9
 800be78:	d009      	beq.n	800be8e <check_fs+0x66>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be80:	2beb      	cmp	r3, #235	; 0xeb
 800be82:	d11e      	bne.n	800bec2 <check_fs+0x9a>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800be8a:	2b90      	cmp	r3, #144	; 0x90
 800be8c:	d119      	bne.n	800bec2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	3334      	adds	r3, #52	; 0x34
 800be92:	3336      	adds	r3, #54	; 0x36
 800be94:	4618      	mov	r0, r3
 800be96:	f7fe f8e7 	bl	800a068 <ld_dword>
 800be9a:	4603      	mov	r3, r0
 800be9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bea0:	4a0a      	ldr	r2, [pc, #40]	; (800becc <check_fs+0xa4>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d101      	bne.n	800beaa <check_fs+0x82>
 800bea6:	2300      	movs	r3, #0
 800bea8:	e00c      	b.n	800bec4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	3334      	adds	r3, #52	; 0x34
 800beae:	3352      	adds	r3, #82	; 0x52
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7fe f8d9 	bl	800a068 <ld_dword>
 800beb6:	4603      	mov	r3, r0
 800beb8:	4a05      	ldr	r2, [pc, #20]	; (800bed0 <check_fs+0xa8>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d101      	bne.n	800bec2 <check_fs+0x9a>
 800bebe:	2300      	movs	r3, #0
 800bec0:	e000      	b.n	800bec4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bec2:	2302      	movs	r3, #2
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	00544146 	.word	0x00544146
 800bed0:	33544146 	.word	0x33544146

0800bed4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b096      	sub	sp, #88	; 0x58
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	4613      	mov	r3, r2
 800bee0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	2200      	movs	r2, #0
 800bee6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f7ff ff58 	bl	800bd9e <get_ldnumber>
 800beee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	da01      	bge.n	800befa <find_volume+0x26>
 800bef6:	230b      	movs	r3, #11
 800bef8:	e230      	b.n	800c35c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800befa:	4aa1      	ldr	r2, [pc, #644]	; (800c180 <find_volume+0x2ac>)
 800befc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800befe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf02:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <find_volume+0x3a>
 800bf0a:	230c      	movs	r3, #12
 800bf0c:	e226      	b.n	800c35c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf12:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bf14:	79fb      	ldrb	r3, [r7, #7]
 800bf16:	f023 0301 	bic.w	r3, r3, #1
 800bf1a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d01a      	beq.n	800bf5a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf26:	785b      	ldrb	r3, [r3, #1]
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7fd ffe7 	bl	8009efc <disk_status>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bf34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf38:	f003 0301 	and.w	r3, r3, #1
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10c      	bne.n	800bf5a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bf40:	79fb      	ldrb	r3, [r7, #7]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d007      	beq.n	800bf56 <find_volume+0x82>
 800bf46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf4a:	f003 0304 	and.w	r3, r3, #4
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d001      	beq.n	800bf56 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bf52:	230a      	movs	r3, #10
 800bf54:	e202      	b.n	800c35c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800bf56:	2300      	movs	r3, #0
 800bf58:	e200      	b.n	800c35c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bf60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf62:	b2da      	uxtb	r2, r3
 800bf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf66:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6a:	785b      	ldrb	r3, [r3, #1]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fd ffdf 	bl	8009f30 <disk_initialize>
 800bf72:	4603      	mov	r3, r0
 800bf74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bf78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf7c:	f003 0301 	and.w	r3, r3, #1
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d001      	beq.n	800bf88 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bf84:	2303      	movs	r3, #3
 800bf86:	e1e9      	b.n	800c35c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bf88:	79fb      	ldrb	r3, [r7, #7]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d007      	beq.n	800bf9e <find_volume+0xca>
 800bf8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf92:	f003 0304 	and.w	r3, r3, #4
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d001      	beq.n	800bf9e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bf9a:	230a      	movs	r3, #10
 800bf9c:	e1de      	b.n	800c35c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bfa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bfa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfa6:	f7ff ff3f 	bl	800be28 <check_fs>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bfb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bfb4:	2b02      	cmp	r3, #2
 800bfb6:	d149      	bne.n	800c04c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bfb8:	2300      	movs	r3, #0
 800bfba:	643b      	str	r3, [r7, #64]	; 0x40
 800bfbc:	e01e      	b.n	800bffc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bfc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc6:	011b      	lsls	r3, r3, #4
 800bfc8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bfcc:	4413      	add	r3, r2
 800bfce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd2:	3304      	adds	r3, #4
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d006      	beq.n	800bfe8 <find_volume+0x114>
 800bfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfdc:	3308      	adds	r3, #8
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fe f842 	bl	800a068 <ld_dword>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	e000      	b.n	800bfea <find_volume+0x116>
 800bfe8:	2200      	movs	r2, #0
 800bfea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	3358      	adds	r3, #88	; 0x58
 800bff0:	443b      	add	r3, r7
 800bff2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bff8:	3301      	adds	r3, #1
 800bffa:	643b      	str	r3, [r7, #64]	; 0x40
 800bffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bffe:	2b03      	cmp	r3, #3
 800c000:	d9dd      	bls.n	800bfbe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c002:	2300      	movs	r3, #0
 800c004:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <find_volume+0x13e>
 800c00c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c00e:	3b01      	subs	r3, #1
 800c010:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	3358      	adds	r3, #88	; 0x58
 800c018:	443b      	add	r3, r7
 800c01a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c01e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c022:	2b00      	cmp	r3, #0
 800c024:	d005      	beq.n	800c032 <find_volume+0x15e>
 800c026:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c028:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c02a:	f7ff fefd 	bl	800be28 <check_fs>
 800c02e:	4603      	mov	r3, r0
 800c030:	e000      	b.n	800c034 <find_volume+0x160>
 800c032:	2303      	movs	r3, #3
 800c034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d905      	bls.n	800c04c <find_volume+0x178>
 800c040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c042:	3301      	adds	r3, #1
 800c044:	643b      	str	r3, [r7, #64]	; 0x40
 800c046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c048:	2b03      	cmp	r3, #3
 800c04a:	d9e2      	bls.n	800c012 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c04c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c050:	2b04      	cmp	r3, #4
 800c052:	d101      	bne.n	800c058 <find_volume+0x184>
 800c054:	2301      	movs	r3, #1
 800c056:	e181      	b.n	800c35c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c058:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d901      	bls.n	800c064 <find_volume+0x190>
 800c060:	230d      	movs	r3, #13
 800c062:	e17b      	b.n	800c35c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c066:	3334      	adds	r3, #52	; 0x34
 800c068:	330b      	adds	r3, #11
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fd ffe4 	bl	800a038 <ld_word>
 800c070:	4603      	mov	r3, r0
 800c072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c076:	d001      	beq.n	800c07c <find_volume+0x1a8>
 800c078:	230d      	movs	r3, #13
 800c07a:	e16f      	b.n	800c35c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07e:	3334      	adds	r3, #52	; 0x34
 800c080:	3316      	adds	r3, #22
 800c082:	4618      	mov	r0, r3
 800c084:	f7fd ffd8 	bl	800a038 <ld_word>
 800c088:	4603      	mov	r3, r0
 800c08a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d106      	bne.n	800c0a0 <find_volume+0x1cc>
 800c092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c094:	3334      	adds	r3, #52	; 0x34
 800c096:	3324      	adds	r3, #36	; 0x24
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fd ffe5 	bl	800a068 <ld_dword>
 800c09e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0a4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	789b      	ldrb	r3, [r3, #2]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d005      	beq.n	800c0c4 <find_volume+0x1f0>
 800c0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ba:	789b      	ldrb	r3, [r3, #2]
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	d001      	beq.n	800c0c4 <find_volume+0x1f0>
 800c0c0:	230d      	movs	r3, #13
 800c0c2:	e14b      	b.n	800c35c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c6:	789b      	ldrb	r3, [r3, #2]
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0cc:	fb02 f303 	mul.w	r3, r2, r3
 800c0d0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0d8:	b29a      	uxth	r2, r3
 800c0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e0:	895b      	ldrh	r3, [r3, #10]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d008      	beq.n	800c0f8 <find_volume+0x224>
 800c0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e8:	895b      	ldrh	r3, [r3, #10]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ee:	895b      	ldrh	r3, [r3, #10]
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	4013      	ands	r3, r2
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d001      	beq.n	800c0fc <find_volume+0x228>
 800c0f8:	230d      	movs	r3, #13
 800c0fa:	e12f      	b.n	800c35c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fe:	3334      	adds	r3, #52	; 0x34
 800c100:	3311      	adds	r3, #17
 800c102:	4618      	mov	r0, r3
 800c104:	f7fd ff98 	bl	800a038 <ld_word>
 800c108:	4603      	mov	r3, r0
 800c10a:	461a      	mov	r2, r3
 800c10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c112:	891b      	ldrh	r3, [r3, #8]
 800c114:	f003 030f 	and.w	r3, r3, #15
 800c118:	b29b      	uxth	r3, r3
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d001      	beq.n	800c122 <find_volume+0x24e>
 800c11e:	230d      	movs	r3, #13
 800c120:	e11c      	b.n	800c35c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c124:	3334      	adds	r3, #52	; 0x34
 800c126:	3313      	adds	r3, #19
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fd ff85 	bl	800a038 <ld_word>
 800c12e:	4603      	mov	r3, r0
 800c130:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c134:	2b00      	cmp	r3, #0
 800c136:	d106      	bne.n	800c146 <find_volume+0x272>
 800c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13a:	3334      	adds	r3, #52	; 0x34
 800c13c:	3320      	adds	r3, #32
 800c13e:	4618      	mov	r0, r3
 800c140:	f7fd ff92 	bl	800a068 <ld_dword>
 800c144:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c148:	3334      	adds	r3, #52	; 0x34
 800c14a:	330e      	adds	r3, #14
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fd ff73 	bl	800a038 <ld_word>
 800c152:	4603      	mov	r3, r0
 800c154:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d101      	bne.n	800c160 <find_volume+0x28c>
 800c15c:	230d      	movs	r3, #13
 800c15e:	e0fd      	b.n	800c35c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c160:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c164:	4413      	add	r3, r2
 800c166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c168:	8912      	ldrh	r2, [r2, #8]
 800c16a:	0912      	lsrs	r2, r2, #4
 800c16c:	b292      	uxth	r2, r2
 800c16e:	4413      	add	r3, r2
 800c170:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c176:	429a      	cmp	r2, r3
 800c178:	d204      	bcs.n	800c184 <find_volume+0x2b0>
 800c17a:	230d      	movs	r3, #13
 800c17c:	e0ee      	b.n	800c35c <find_volume+0x488>
 800c17e:	bf00      	nop
 800c180:	20001254 	.word	0x20001254
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c18c:	8952      	ldrh	r2, [r2, #10]
 800c18e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c192:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c196:	2b00      	cmp	r3, #0
 800c198:	d101      	bne.n	800c19e <find_volume+0x2ca>
 800c19a:	230d      	movs	r3, #13
 800c19c:	e0de      	b.n	800c35c <find_volume+0x488>
		fmt = FS_FAT32;
 800c19e:	2303      	movs	r3, #3
 800c1a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d802      	bhi.n	800c1b4 <find_volume+0x2e0>
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d802      	bhi.n	800c1c4 <find_volume+0x2f0>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c6:	1c9a      	adds	r2, r3, #2
 800c1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ca:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c1d0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c1d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c1d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1d6:	441a      	add	r2, r3
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1da:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c1dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e0:	441a      	add	r2, r3
 800c1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c1e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1ea:	2b03      	cmp	r3, #3
 800c1ec:	d11e      	bne.n	800c22c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f0:	3334      	adds	r3, #52	; 0x34
 800c1f2:	332a      	adds	r3, #42	; 0x2a
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fd ff1f 	bl	800a038 <ld_word>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d001      	beq.n	800c204 <find_volume+0x330>
 800c200:	230d      	movs	r3, #13
 800c202:	e0ab      	b.n	800c35c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c206:	891b      	ldrh	r3, [r3, #8]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d001      	beq.n	800c210 <find_volume+0x33c>
 800c20c:	230d      	movs	r3, #13
 800c20e:	e0a5      	b.n	800c35c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c212:	3334      	adds	r3, #52	; 0x34
 800c214:	332c      	adds	r3, #44	; 0x2c
 800c216:	4618      	mov	r0, r3
 800c218:	f7fd ff26 	bl	800a068 <ld_dword>
 800c21c:	4602      	mov	r2, r0
 800c21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c220:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c224:	699b      	ldr	r3, [r3, #24]
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	647b      	str	r3, [r7, #68]	; 0x44
 800c22a:	e01f      	b.n	800c26c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22e:	891b      	ldrh	r3, [r3, #8]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <find_volume+0x364>
 800c234:	230d      	movs	r3, #13
 800c236:	e091      	b.n	800c35c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c23c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c23e:	441a      	add	r2, r3
 800c240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c242:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d103      	bne.n	800c254 <find_volume+0x380>
 800c24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24e:	699b      	ldr	r3, [r3, #24]
 800c250:	005b      	lsls	r3, r3, #1
 800c252:	e00a      	b.n	800c26a <find_volume+0x396>
 800c254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c256:	699a      	ldr	r2, [r3, #24]
 800c258:	4613      	mov	r3, r2
 800c25a:	005b      	lsls	r3, r3, #1
 800c25c:	4413      	add	r3, r2
 800c25e:	085a      	lsrs	r2, r3, #1
 800c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c262:	699b      	ldr	r3, [r3, #24]
 800c264:	f003 0301 	and.w	r3, r3, #1
 800c268:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c26a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26e:	69da      	ldr	r2, [r3, #28]
 800c270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c272:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c276:	0a5b      	lsrs	r3, r3, #9
 800c278:	429a      	cmp	r2, r3
 800c27a:	d201      	bcs.n	800c280 <find_volume+0x3ac>
 800c27c:	230d      	movs	r3, #13
 800c27e:	e06d      	b.n	800c35c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c282:	f04f 32ff 	mov.w	r2, #4294967295
 800c286:	615a      	str	r2, [r3, #20]
 800c288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28a:	695a      	ldr	r2, [r3, #20]
 800c28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c292:	2280      	movs	r2, #128	; 0x80
 800c294:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c296:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	d149      	bne.n	800c332 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a0:	3334      	adds	r3, #52	; 0x34
 800c2a2:	3330      	adds	r3, #48	; 0x30
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7fd fec7 	bl	800a038 <ld_word>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d140      	bne.n	800c332 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c2b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c2b8:	f7fe f96e 	bl	800a598 <move_window>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d137      	bne.n	800c332 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ca:	3334      	adds	r3, #52	; 0x34
 800c2cc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7fd feb1 	bl	800a038 <ld_word>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	461a      	mov	r2, r3
 800c2da:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d127      	bne.n	800c332 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e4:	3334      	adds	r3, #52	; 0x34
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7fd febe 	bl	800a068 <ld_dword>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	4a1d      	ldr	r2, [pc, #116]	; (800c364 <find_volume+0x490>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d11e      	bne.n	800c332 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f6:	3334      	adds	r3, #52	; 0x34
 800c2f8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7fd feb3 	bl	800a068 <ld_dword>
 800c302:	4603      	mov	r3, r0
 800c304:	4a18      	ldr	r2, [pc, #96]	; (800c368 <find_volume+0x494>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d113      	bne.n	800c332 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30c:	3334      	adds	r3, #52	; 0x34
 800c30e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c312:	4618      	mov	r0, r3
 800c314:	f7fd fea8 	bl	800a068 <ld_dword>
 800c318:	4602      	mov	r2, r0
 800c31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c320:	3334      	adds	r3, #52	; 0x34
 800c322:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c326:	4618      	mov	r0, r3
 800c328:	f7fd fe9e 	bl	800a068 <ld_dword>
 800c32c:	4602      	mov	r2, r0
 800c32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c330:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c334:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c338:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c33a:	4b0c      	ldr	r3, [pc, #48]	; (800c36c <find_volume+0x498>)
 800c33c:	881b      	ldrh	r3, [r3, #0]
 800c33e:	3301      	adds	r3, #1
 800c340:	b29a      	uxth	r2, r3
 800c342:	4b0a      	ldr	r3, [pc, #40]	; (800c36c <find_volume+0x498>)
 800c344:	801a      	strh	r2, [r3, #0]
 800c346:	4b09      	ldr	r3, [pc, #36]	; (800c36c <find_volume+0x498>)
 800c348:	881a      	ldrh	r2, [r3, #0]
 800c34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c350:	4a07      	ldr	r2, [pc, #28]	; (800c370 <find_volume+0x49c>)
 800c352:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c354:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c356:	f7fe f8b7 	bl	800a4c8 <clear_lock>
#endif
	return FR_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3758      	adds	r7, #88	; 0x58
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	41615252 	.word	0x41615252
 800c368:	61417272 	.word	0x61417272
 800c36c:	20001258 	.word	0x20001258
 800c370:	2000127c 	.word	0x2000127c

0800c374 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c37e:	2309      	movs	r3, #9
 800c380:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d01c      	beq.n	800c3c2 <validate+0x4e>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d018      	beq.n	800c3c2 <validate+0x4e>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d013      	beq.n	800c3c2 <validate+0x4e>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	889a      	ldrh	r2, [r3, #4]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	88db      	ldrh	r3, [r3, #6]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d10c      	bne.n	800c3c2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	785b      	ldrb	r3, [r3, #1]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fd fda4 	bl	8009efc <disk_status>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	f003 0301 	and.w	r3, r3, #1
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d101      	bne.n	800c3c2 <validate+0x4e>
			res = FR_OK;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c3c2:	7bfb      	ldrb	r3, [r7, #15]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d102      	bne.n	800c3ce <validate+0x5a>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	e000      	b.n	800c3d0 <validate+0x5c>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	683a      	ldr	r2, [r7, #0]
 800c3d2:	6013      	str	r3, [r2, #0]
	return res;
 800c3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
	...

0800c3e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b088      	sub	sp, #32
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c3f2:	f107 0310 	add.w	r3, r7, #16
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7ff fcd1 	bl	800bd9e <get_ldnumber>
 800c3fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	2b00      	cmp	r3, #0
 800c402:	da01      	bge.n	800c408 <f_mount+0x28>
 800c404:	230b      	movs	r3, #11
 800c406:	e02b      	b.n	800c460 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c408:	4a17      	ldr	r2, [pc, #92]	; (800c468 <f_mount+0x88>)
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c410:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d005      	beq.n	800c424 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c418:	69b8      	ldr	r0, [r7, #24]
 800c41a:	f7fe f855 	bl	800a4c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	2200      	movs	r2, #0
 800c422:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d002      	beq.n	800c430 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2200      	movs	r2, #0
 800c42e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	490d      	ldr	r1, [pc, #52]	; (800c468 <f_mount+0x88>)
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <f_mount+0x66>
 800c440:	79fb      	ldrb	r3, [r7, #7]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d001      	beq.n	800c44a <f_mount+0x6a>
 800c446:	2300      	movs	r3, #0
 800c448:	e00a      	b.n	800c460 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c44a:	f107 010c 	add.w	r1, r7, #12
 800c44e:	f107 0308 	add.w	r3, r7, #8
 800c452:	2200      	movs	r2, #0
 800c454:	4618      	mov	r0, r3
 800c456:	f7ff fd3d 	bl	800bed4 <find_volume>
 800c45a:	4603      	mov	r3, r0
 800c45c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c45e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3720      	adds	r7, #32
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	20001254 	.word	0x20001254

0800c46c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b09a      	sub	sp, #104	; 0x68
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	4613      	mov	r3, r2
 800c478:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d101      	bne.n	800c484 <f_open+0x18>
 800c480:	2309      	movs	r3, #9
 800c482:	e1ad      	b.n	800c7e0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c484:	79fb      	ldrb	r3, [r7, #7]
 800c486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c48a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c48c:	79fa      	ldrb	r2, [r7, #7]
 800c48e:	f107 0114 	add.w	r1, r7, #20
 800c492:	f107 0308 	add.w	r3, r7, #8
 800c496:	4618      	mov	r0, r3
 800c498:	f7ff fd1c 	bl	800bed4 <find_volume>
 800c49c:	4603      	mov	r3, r0
 800c49e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c4a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	f040 8191 	bne.w	800c7ce <f_open+0x362>
		dj.obj.fs = fs;
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	f107 0318 	add.w	r3, r7, #24
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7ff fbff 	bl	800bcbc <follow_path>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c4c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d11a      	bne.n	800c502 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c4cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c4d0:	b25b      	sxtb	r3, r3
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	da03      	bge.n	800c4de <f_open+0x72>
				res = FR_INVALID_NAME;
 800c4d6:	2306      	movs	r3, #6
 800c4d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c4dc:	e011      	b.n	800c502 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4de:	79fb      	ldrb	r3, [r7, #7]
 800c4e0:	f023 0301 	bic.w	r3, r3, #1
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	bf14      	ite	ne
 800c4e8:	2301      	movne	r3, #1
 800c4ea:	2300      	moveq	r3, #0
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	f107 0318 	add.w	r3, r7, #24
 800c4f4:	4611      	mov	r1, r2
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7fd fe9e 	bl	800a238 <chk_lock>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c502:	79fb      	ldrb	r3, [r7, #7]
 800c504:	f003 031c 	and.w	r3, r3, #28
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d07f      	beq.n	800c60c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c50c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c510:	2b00      	cmp	r3, #0
 800c512:	d017      	beq.n	800c544 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c514:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c518:	2b04      	cmp	r3, #4
 800c51a:	d10e      	bne.n	800c53a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c51c:	f7fd fee8 	bl	800a2f0 <enq_lock>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d006      	beq.n	800c534 <f_open+0xc8>
 800c526:	f107 0318 	add.w	r3, r7, #24
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7ff f8cc 	bl	800b6c8 <dir_register>
 800c530:	4603      	mov	r3, r0
 800c532:	e000      	b.n	800c536 <f_open+0xca>
 800c534:	2312      	movs	r3, #18
 800c536:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c53a:	79fb      	ldrb	r3, [r7, #7]
 800c53c:	f043 0308 	orr.w	r3, r3, #8
 800c540:	71fb      	strb	r3, [r7, #7]
 800c542:	e010      	b.n	800c566 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c544:	7fbb      	ldrb	r3, [r7, #30]
 800c546:	f003 0311 	and.w	r3, r3, #17
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d003      	beq.n	800c556 <f_open+0xea>
					res = FR_DENIED;
 800c54e:	2307      	movs	r3, #7
 800c550:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c554:	e007      	b.n	800c566 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c556:	79fb      	ldrb	r3, [r7, #7]
 800c558:	f003 0304 	and.w	r3, r3, #4
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d002      	beq.n	800c566 <f_open+0xfa>
 800c560:	2308      	movs	r3, #8
 800c562:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c566:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d168      	bne.n	800c640 <f_open+0x1d4>
 800c56e:	79fb      	ldrb	r3, [r7, #7]
 800c570:	f003 0308 	and.w	r3, r3, #8
 800c574:	2b00      	cmp	r3, #0
 800c576:	d063      	beq.n	800c640 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c578:	f7fd fc5e 	bl	8009e38 <get_fattime>
 800c57c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c580:	330e      	adds	r3, #14
 800c582:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c584:	4618      	mov	r0, r3
 800c586:	f7fd fdad 	bl	800a0e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58c:	3316      	adds	r3, #22
 800c58e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c590:	4618      	mov	r0, r3
 800c592:	f7fd fda7 	bl	800a0e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c598:	330b      	adds	r3, #11
 800c59a:	2220      	movs	r2, #32
 800c59c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5a2:	4611      	mov	r1, r2
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7fe fcfe 	bl	800afa6 <ld_clust>
 800c5aa:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fe fd16 	bl	800afe4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ba:	331c      	adds	r3, #28
 800c5bc:	2100      	movs	r1, #0
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fd fd90 	bl	800a0e4 <st_dword>
					fs->wflag = 1;
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c5ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d037      	beq.n	800c640 <f_open+0x1d4>
						dw = fs->winsect;
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c5d6:	f107 0318 	add.w	r3, r7, #24
 800c5da:	2200      	movs	r2, #0
 800c5dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7fe fa29 	bl	800aa36 <remove_chain>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c5ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d126      	bne.n	800c640 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fd ffce 	bl	800a598 <move_window>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c606:	3a01      	subs	r2, #1
 800c608:	611a      	str	r2, [r3, #16]
 800c60a:	e019      	b.n	800c640 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c60c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c610:	2b00      	cmp	r3, #0
 800c612:	d115      	bne.n	800c640 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c614:	7fbb      	ldrb	r3, [r7, #30]
 800c616:	f003 0310 	and.w	r3, r3, #16
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d003      	beq.n	800c626 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c61e:	2304      	movs	r3, #4
 800c620:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c624:	e00c      	b.n	800c640 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c626:	79fb      	ldrb	r3, [r7, #7]
 800c628:	f003 0302 	and.w	r3, r3, #2
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d007      	beq.n	800c640 <f_open+0x1d4>
 800c630:	7fbb      	ldrb	r3, [r7, #30]
 800c632:	f003 0301 	and.w	r3, r3, #1
 800c636:	2b00      	cmp	r3, #0
 800c638:	d002      	beq.n	800c640 <f_open+0x1d4>
						res = FR_DENIED;
 800c63a:	2307      	movs	r3, #7
 800c63c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c640:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c644:	2b00      	cmp	r3, #0
 800c646:	d128      	bne.n	800c69a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c648:	79fb      	ldrb	r3, [r7, #7]
 800c64a:	f003 0308 	and.w	r3, r3, #8
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d003      	beq.n	800c65a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c652:	79fb      	ldrb	r3, [r7, #7]
 800c654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c658:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c668:	79fb      	ldrb	r3, [r7, #7]
 800c66a:	f023 0301 	bic.w	r3, r3, #1
 800c66e:	2b00      	cmp	r3, #0
 800c670:	bf14      	ite	ne
 800c672:	2301      	movne	r3, #1
 800c674:	2300      	moveq	r3, #0
 800c676:	b2db      	uxtb	r3, r3
 800c678:	461a      	mov	r2, r3
 800c67a:	f107 0318 	add.w	r3, r7, #24
 800c67e:	4611      	mov	r1, r2
 800c680:	4618      	mov	r0, r3
 800c682:	f7fd fe57 	bl	800a334 <inc_lock>
 800c686:	4602      	mov	r2, r0
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d102      	bne.n	800c69a <f_open+0x22e>
 800c694:	2302      	movs	r3, #2
 800c696:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c69a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f040 8095 	bne.w	800c7ce <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6a8:	4611      	mov	r1, r2
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7fe fc7b 	bl	800afa6 <ld_clust>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b8:	331c      	adds	r3, #28
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fd fcd4 	bl	800a068 <ld_dword>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c6cc:	697a      	ldr	r2, [r7, #20]
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	88da      	ldrh	r2, [r3, #6]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	79fa      	ldrb	r2, [r7, #7]
 800c6de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	3330      	adds	r3, #48	; 0x30
 800c6f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7fd fd3e 	bl	800a17e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c702:	79fb      	ldrb	r3, [r7, #7]
 800c704:	f003 0320 	and.w	r3, r3, #32
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d060      	beq.n	800c7ce <f_open+0x362>
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d05c      	beq.n	800c7ce <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	68da      	ldr	r2, [r3, #12]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	895b      	ldrh	r3, [r3, #10]
 800c720:	025b      	lsls	r3, r3, #9
 800c722:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c730:	e016      	b.n	800c760 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c736:	4618      	mov	r0, r3
 800c738:	f7fd ffe9 	bl	800a70e <get_fat>
 800c73c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c73e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c740:	2b01      	cmp	r3, #1
 800c742:	d802      	bhi.n	800c74a <f_open+0x2de>
 800c744:	2302      	movs	r3, #2
 800c746:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c74a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c750:	d102      	bne.n	800c758 <f_open+0x2ec>
 800c752:	2301      	movs	r3, #1
 800c754:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c758:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c75a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c75c:	1ad3      	subs	r3, r2, r3
 800c75e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c760:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c764:	2b00      	cmp	r3, #0
 800c766:	d103      	bne.n	800c770 <f_open+0x304>
 800c768:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c76a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d8e0      	bhi.n	800c732 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c774:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c776:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d127      	bne.n	800c7ce <f_open+0x362>
 800c77e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c784:	2b00      	cmp	r3, #0
 800c786:	d022      	beq.n	800c7ce <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7fd ff9f 	bl	800a6d0 <clust2sect>
 800c792:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c796:	2b00      	cmp	r3, #0
 800c798:	d103      	bne.n	800c7a2 <f_open+0x336>
						res = FR_INT_ERR;
 800c79a:	2302      	movs	r3, #2
 800c79c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c7a0:	e015      	b.n	800c7ce <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c7a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7a4:	0a5a      	lsrs	r2, r3, #9
 800c7a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7a8:	441a      	add	r2, r3
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	7858      	ldrb	r0, [r3, #1]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	6a1a      	ldr	r2, [r3, #32]
 800c7bc:	2301      	movs	r3, #1
 800c7be:	f7fd fbdd 	bl	8009f7c <disk_read>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d002      	beq.n	800c7ce <f_open+0x362>
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c7ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d002      	beq.n	800c7dc <f_open+0x370>
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c7dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3768      	adds	r7, #104	; 0x68
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b08c      	sub	sp, #48	; 0x30
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	607a      	str	r2, [r7, #4]
 800c7f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f107 0210 	add.w	r2, r7, #16
 800c806:	4611      	mov	r1, r2
 800c808:	4618      	mov	r0, r3
 800c80a:	f7ff fdb3 	bl	800c374 <validate>
 800c80e:	4603      	mov	r3, r0
 800c810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d107      	bne.n	800c82c <f_write+0x44>
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	7d5b      	ldrb	r3, [r3, #21]
 800c820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c824:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d002      	beq.n	800c832 <f_write+0x4a>
 800c82c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c830:	e14b      	b.n	800caca <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	7d1b      	ldrb	r3, [r3, #20]
 800c836:	f003 0302 	and.w	r3, r3, #2
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d101      	bne.n	800c842 <f_write+0x5a>
 800c83e:	2307      	movs	r3, #7
 800c840:	e143      	b.n	800caca <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	699a      	ldr	r2, [r3, #24]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	441a      	add	r2, r3
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	699b      	ldr	r3, [r3, #24]
 800c84e:	429a      	cmp	r2, r3
 800c850:	f080 812d 	bcs.w	800caae <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	699b      	ldr	r3, [r3, #24]
 800c858:	43db      	mvns	r3, r3
 800c85a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c85c:	e127      	b.n	800caae <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	699b      	ldr	r3, [r3, #24]
 800c862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c866:	2b00      	cmp	r3, #0
 800c868:	f040 80e3 	bne.w	800ca32 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	699b      	ldr	r3, [r3, #24]
 800c870:	0a5b      	lsrs	r3, r3, #9
 800c872:	693a      	ldr	r2, [r7, #16]
 800c874:	8952      	ldrh	r2, [r2, #10]
 800c876:	3a01      	subs	r2, #1
 800c878:	4013      	ands	r3, r2
 800c87a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c87c:	69bb      	ldr	r3, [r7, #24]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d143      	bne.n	800c90a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	699b      	ldr	r3, [r3, #24]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d10c      	bne.n	800c8a4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c892:	2b00      	cmp	r3, #0
 800c894:	d11a      	bne.n	800c8cc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2100      	movs	r1, #0
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fe f930 	bl	800ab00 <create_chain>
 800c8a0:	62b8      	str	r0, [r7, #40]	; 0x28
 800c8a2:	e013      	b.n	800c8cc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d007      	beq.n	800c8bc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	699b      	ldr	r3, [r3, #24]
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	f7fe f9bc 	bl	800ac30 <clmt_clust>
 800c8b8:	62b8      	str	r0, [r7, #40]	; 0x28
 800c8ba:	e007      	b.n	800c8cc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	69db      	ldr	r3, [r3, #28]
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	f7fe f91b 	bl	800ab00 <create_chain>
 800c8ca:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f000 80f2 	beq.w	800cab8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d104      	bne.n	800c8e4 <f_write+0xfc>
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2202      	movs	r2, #2
 800c8de:	755a      	strb	r2, [r3, #21]
 800c8e0:	2302      	movs	r3, #2
 800c8e2:	e0f2      	b.n	800caca <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ea:	d104      	bne.n	800c8f6 <f_write+0x10e>
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	755a      	strb	r2, [r3, #21]
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e0e9      	b.n	800caca <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8fa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d102      	bne.n	800c90a <f_write+0x122>
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c908:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	7d1b      	ldrb	r3, [r3, #20]
 800c90e:	b25b      	sxtb	r3, r3
 800c910:	2b00      	cmp	r3, #0
 800c912:	da18      	bge.n	800c946 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	7858      	ldrb	r0, [r3, #1]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6a1a      	ldr	r2, [r3, #32]
 800c922:	2301      	movs	r3, #1
 800c924:	f7fd fb4a 	bl	8009fbc <disk_write>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d004      	beq.n	800c938 <f_write+0x150>
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2201      	movs	r2, #1
 800c932:	755a      	strb	r2, [r3, #21]
 800c934:	2301      	movs	r3, #1
 800c936:	e0c8      	b.n	800caca <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	7d1b      	ldrb	r3, [r3, #20]
 800c93c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c940:	b2da      	uxtb	r2, r3
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c946:	693a      	ldr	r2, [r7, #16]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	69db      	ldr	r3, [r3, #28]
 800c94c:	4619      	mov	r1, r3
 800c94e:	4610      	mov	r0, r2
 800c950:	f7fd febe 	bl	800a6d0 <clust2sect>
 800c954:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d104      	bne.n	800c966 <f_write+0x17e>
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2202      	movs	r2, #2
 800c960:	755a      	strb	r2, [r3, #21]
 800c962:	2302      	movs	r3, #2
 800c964:	e0b1      	b.n	800caca <f_write+0x2e2>
			sect += csect;
 800c966:	697a      	ldr	r2, [r7, #20]
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	4413      	add	r3, r2
 800c96c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	0a5b      	lsrs	r3, r3, #9
 800c972:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c974:	6a3b      	ldr	r3, [r7, #32]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d03c      	beq.n	800c9f4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c97a:	69ba      	ldr	r2, [r7, #24]
 800c97c:	6a3b      	ldr	r3, [r7, #32]
 800c97e:	4413      	add	r3, r2
 800c980:	693a      	ldr	r2, [r7, #16]
 800c982:	8952      	ldrh	r2, [r2, #10]
 800c984:	4293      	cmp	r3, r2
 800c986:	d905      	bls.n	800c994 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	895b      	ldrh	r3, [r3, #10]
 800c98c:	461a      	mov	r2, r3
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	1ad3      	subs	r3, r2, r3
 800c992:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	7858      	ldrb	r0, [r3, #1]
 800c998:	6a3b      	ldr	r3, [r7, #32]
 800c99a:	697a      	ldr	r2, [r7, #20]
 800c99c:	69f9      	ldr	r1, [r7, #28]
 800c99e:	f7fd fb0d 	bl	8009fbc <disk_write>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d004      	beq.n	800c9b2 <f_write+0x1ca>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	755a      	strb	r2, [r3, #21]
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e08b      	b.n	800caca <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6a1a      	ldr	r2, [r3, #32]
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	6a3a      	ldr	r2, [r7, #32]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d915      	bls.n	800c9ec <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6a1a      	ldr	r2, [r3, #32]
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	1ad3      	subs	r3, r2, r3
 800c9ce:	025b      	lsls	r3, r3, #9
 800c9d0:	69fa      	ldr	r2, [r7, #28]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9d8:	4619      	mov	r1, r3
 800c9da:	f7fd fbaf 	bl	800a13c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	7d1b      	ldrb	r3, [r3, #20]
 800c9e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9e6:	b2da      	uxtb	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c9ec:	6a3b      	ldr	r3, [r7, #32]
 800c9ee:	025b      	lsls	r3, r3, #9
 800c9f0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c9f2:	e03f      	b.n	800ca74 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6a1b      	ldr	r3, [r3, #32]
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d016      	beq.n	800ca2c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	699a      	ldr	r2, [r3, #24]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d210      	bcs.n	800ca2c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	7858      	ldrb	r0, [r3, #1]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca14:	2301      	movs	r3, #1
 800ca16:	697a      	ldr	r2, [r7, #20]
 800ca18:	f7fd fab0 	bl	8009f7c <disk_read>
 800ca1c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d004      	beq.n	800ca2c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2201      	movs	r2, #1
 800ca26:	755a      	strb	r2, [r3, #21]
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e04e      	b.n	800caca <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	697a      	ldr	r2, [r7, #20]
 800ca30:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	699b      	ldr	r3, [r3, #24]
 800ca36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca3a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ca3e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ca40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d901      	bls.n	800ca4c <f_write+0x264>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	699b      	ldr	r3, [r3, #24]
 800ca56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca5a:	4413      	add	r3, r2
 800ca5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca5e:	69f9      	ldr	r1, [r7, #28]
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7fd fb6b 	bl	800a13c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	7d1b      	ldrb	r3, [r3, #20]
 800ca6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca6e:	b2da      	uxtb	r2, r3
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ca74:	69fa      	ldr	r2, [r7, #28]
 800ca76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca78:	4413      	add	r3, r2
 800ca7a:	61fb      	str	r3, [r7, #28]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	699a      	ldr	r2, [r3, #24]
 800ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca82:	441a      	add	r2, r3
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	619a      	str	r2, [r3, #24]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	68da      	ldr	r2, [r3, #12]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	699b      	ldr	r3, [r3, #24]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	bf38      	it	cc
 800ca94:	461a      	movcc	r2, r3
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	60da      	str	r2, [r3, #12]
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa0:	441a      	add	r2, r3
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	601a      	str	r2, [r3, #0]
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caaa:	1ad3      	subs	r3, r2, r3
 800caac:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f47f aed4 	bne.w	800c85e <f_write+0x76>
 800cab6:	e000      	b.n	800caba <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cab8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	7d1b      	ldrb	r3, [r3, #20]
 800cabe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cac2:	b2da      	uxtb	r2, r3
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3730      	adds	r7, #48	; 0x30
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b086      	sub	sp, #24
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f107 0208 	add.w	r2, r7, #8
 800cae0:	4611      	mov	r1, r2
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7ff fc46 	bl	800c374 <validate>
 800cae8:	4603      	mov	r3, r0
 800caea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800caec:	7dfb      	ldrb	r3, [r7, #23]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d168      	bne.n	800cbc4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	7d1b      	ldrb	r3, [r3, #20]
 800caf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d062      	beq.n	800cbc4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	7d1b      	ldrb	r3, [r3, #20]
 800cb02:	b25b      	sxtb	r3, r3
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	da15      	bge.n	800cb34 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	7858      	ldrb	r0, [r3, #1]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6a1a      	ldr	r2, [r3, #32]
 800cb16:	2301      	movs	r3, #1
 800cb18:	f7fd fa50 	bl	8009fbc <disk_write>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d001      	beq.n	800cb26 <f_sync+0x54>
 800cb22:	2301      	movs	r3, #1
 800cb24:	e04f      	b.n	800cbc6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	7d1b      	ldrb	r3, [r3, #20]
 800cb2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cb34:	f7fd f980 	bl	8009e38 <get_fattime>
 800cb38:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cb3a:	68ba      	ldr	r2, [r7, #8]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb40:	4619      	mov	r1, r3
 800cb42:	4610      	mov	r0, r2
 800cb44:	f7fd fd28 	bl	800a598 <move_window>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cb4c:	7dfb      	ldrb	r3, [r7, #23]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d138      	bne.n	800cbc4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb56:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	330b      	adds	r3, #11
 800cb5c:	781a      	ldrb	r2, [r3, #0]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	330b      	adds	r3, #11
 800cb62:	f042 0220 	orr.w	r2, r2, #32
 800cb66:	b2d2      	uxtb	r2, r2
 800cb68:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6818      	ldr	r0, [r3, #0]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	689b      	ldr	r3, [r3, #8]
 800cb72:	461a      	mov	r2, r3
 800cb74:	68f9      	ldr	r1, [r7, #12]
 800cb76:	f7fe fa35 	bl	800afe4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f103 021c 	add.w	r2, r3, #28
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	4619      	mov	r1, r3
 800cb86:	4610      	mov	r0, r2
 800cb88:	f7fd faac 	bl	800a0e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	3316      	adds	r3, #22
 800cb90:	6939      	ldr	r1, [r7, #16]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7fd faa6 	bl	800a0e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	3312      	adds	r3, #18
 800cb9c:	2100      	movs	r1, #0
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fd fa85 	bl	800a0ae <st_word>
					fs->wflag = 1;
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	2201      	movs	r2, #1
 800cba8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7fd fd21 	bl	800a5f4 <sync_fs>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	7d1b      	ldrb	r3, [r3, #20]
 800cbba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbbe:	b2da      	uxtb	r2, r3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cbc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3718      	adds	r7, #24
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b084      	sub	sp, #16
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f7ff ff7b 	bl	800cad2 <f_sync>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cbe0:	7bfb      	ldrb	r3, [r7, #15]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d118      	bne.n	800cc18 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f107 0208 	add.w	r2, r7, #8
 800cbec:	4611      	mov	r1, r2
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7ff fbc0 	bl	800c374 <validate>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cbf8:	7bfb      	ldrb	r3, [r7, #15]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d10c      	bne.n	800cc18 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fd fc24 	bl	800a450 <dec_lock>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d102      	bne.n	800cc18 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b090      	sub	sp, #64	; 0x40
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
 800cc2a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f107 0208 	add.w	r2, r7, #8
 800cc32:	4611      	mov	r1, r2
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff fb9d 	bl	800c374 <validate>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cc40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d103      	bne.n	800cc50 <f_lseek+0x2e>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	7d5b      	ldrb	r3, [r3, #21]
 800cc4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cc50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d002      	beq.n	800cc5e <f_lseek+0x3c>
 800cc58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc5c:	e1e6      	b.n	800d02c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f000 80d1 	beq.w	800ce0a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc6e:	d15a      	bne.n	800cd26 <f_lseek+0x104>
			tbl = fp->cltbl;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc74:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc78:	1d1a      	adds	r2, r3, #4
 800cc7a:	627a      	str	r2, [r7, #36]	; 0x24
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	617b      	str	r3, [r7, #20]
 800cc80:	2302      	movs	r3, #2
 800cc82:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d03a      	beq.n	800cd06 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc92:	613b      	str	r3, [r7, #16]
 800cc94:	2300      	movs	r3, #0
 800cc96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9a:	3302      	adds	r3, #2
 800cc9c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	60fb      	str	r3, [r7, #12]
 800cca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca4:	3301      	adds	r3, #1
 800cca6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7fd fd2e 	bl	800a70e <get_fat>
 800ccb2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ccb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d804      	bhi.n	800ccc4 <f_lseek+0xa2>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2202      	movs	r2, #2
 800ccbe:	755a      	strb	r2, [r3, #21]
 800ccc0:	2302      	movs	r3, #2
 800ccc2:	e1b3      	b.n	800d02c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ccc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccca:	d104      	bne.n	800ccd6 <f_lseek+0xb4>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	755a      	strb	r2, [r3, #21]
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e1aa      	b.n	800d02c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d0de      	beq.n	800cc9e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d809      	bhi.n	800ccfc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800cce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccea:	1d1a      	adds	r2, r3, #4
 800ccec:	627a      	str	r2, [r7, #36]	; 0x24
 800ccee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf4:	1d1a      	adds	r2, r3, #4
 800ccf6:	627a      	str	r2, [r7, #36]	; 0x24
 800ccf8:	693a      	ldr	r2, [r7, #16]
 800ccfa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	699b      	ldr	r3, [r3, #24]
 800cd00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d3c4      	bcc.n	800cc90 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd0c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800cd0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d803      	bhi.n	800cd1e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd18:	2200      	movs	r2, #0
 800cd1a:	601a      	str	r2, [r3, #0]
 800cd1c:	e184      	b.n	800d028 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cd1e:	2311      	movs	r3, #17
 800cd20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cd24:	e180      	b.n	800d028 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	683a      	ldr	r2, [r7, #0]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d902      	bls.n	800cd36 <f_lseek+0x114>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	683a      	ldr	r2, [r7, #0]
 800cd3a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	f000 8172 	beq.w	800d028 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	3b01      	subs	r3, #1
 800cd48:	4619      	mov	r1, r3
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7fd ff70 	bl	800ac30 <clmt_clust>
 800cd50:	4602      	mov	r2, r0
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cd56:	68ba      	ldr	r2, [r7, #8]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	69db      	ldr	r3, [r3, #28]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	4610      	mov	r0, r2
 800cd60:	f7fd fcb6 	bl	800a6d0 <clust2sect>
 800cd64:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d104      	bne.n	800cd76 <f_lseek+0x154>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2202      	movs	r2, #2
 800cd70:	755a      	strb	r2, [r3, #21]
 800cd72:	2302      	movs	r3, #2
 800cd74:	e15a      	b.n	800d02c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	0a5b      	lsrs	r3, r3, #9
 800cd7c:	68ba      	ldr	r2, [r7, #8]
 800cd7e:	8952      	ldrh	r2, [r2, #10]
 800cd80:	3a01      	subs	r2, #1
 800cd82:	4013      	ands	r3, r2
 800cd84:	69ba      	ldr	r2, [r7, #24]
 800cd86:	4413      	add	r3, r2
 800cd88:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	699b      	ldr	r3, [r3, #24]
 800cd8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f000 8148 	beq.w	800d028 <f_lseek+0x406>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6a1b      	ldr	r3, [r3, #32]
 800cd9c:	69ba      	ldr	r2, [r7, #24]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	f000 8142 	beq.w	800d028 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	7d1b      	ldrb	r3, [r3, #20]
 800cda8:	b25b      	sxtb	r3, r3
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	da18      	bge.n	800cde0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	7858      	ldrb	r0, [r3, #1]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6a1a      	ldr	r2, [r3, #32]
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	f7fd f8fd 	bl	8009fbc <disk_write>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d004      	beq.n	800cdd2 <f_lseek+0x1b0>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	755a      	strb	r2, [r3, #21]
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e12c      	b.n	800d02c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	7d1b      	ldrb	r3, [r3, #20]
 800cdd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdda:	b2da      	uxtb	r2, r3
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	7858      	ldrb	r0, [r3, #1]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cdea:	2301      	movs	r3, #1
 800cdec:	69ba      	ldr	r2, [r7, #24]
 800cdee:	f7fd f8c5 	bl	8009f7c <disk_read>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d004      	beq.n	800ce02 <f_lseek+0x1e0>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	755a      	strb	r2, [r3, #21]
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e114      	b.n	800d02c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	69ba      	ldr	r2, [r7, #24]
 800ce06:	621a      	str	r2, [r3, #32]
 800ce08:	e10e      	b.n	800d028 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	683a      	ldr	r2, [r7, #0]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d908      	bls.n	800ce26 <f_lseek+0x204>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	7d1b      	ldrb	r3, [r3, #20]
 800ce18:	f003 0302 	and.w	r3, r3, #2
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	699b      	ldr	r3, [r3, #24]
 800ce2a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce34:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f000 80a7 	beq.w	800cf8c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	895b      	ldrh	r3, [r3, #10]
 800ce42:	025b      	lsls	r3, r3, #9
 800ce44:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ce46:	6a3b      	ldr	r3, [r7, #32]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d01b      	beq.n	800ce84 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	1e5a      	subs	r2, r3, #1
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	fbb2 f2f3 	udiv	r2, r2, r3
 800ce56:	6a3b      	ldr	r3, [r7, #32]
 800ce58:	1e59      	subs	r1, r3, #1
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d30f      	bcc.n	800ce84 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ce64:	6a3b      	ldr	r3, [r7, #32]
 800ce66:	1e5a      	subs	r2, r3, #1
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	425b      	negs	r3, r3
 800ce6c:	401a      	ands	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	699b      	ldr	r3, [r3, #24]
 800ce76:	683a      	ldr	r2, [r7, #0]
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	69db      	ldr	r3, [r3, #28]
 800ce80:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce82:	e022      	b.n	800ceca <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ce8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d119      	bne.n	800cec4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2100      	movs	r1, #0
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7fd fe33 	bl	800ab00 <create_chain>
 800ce9a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d104      	bne.n	800ceac <f_lseek+0x28a>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2202      	movs	r2, #2
 800cea6:	755a      	strb	r2, [r3, #21]
 800cea8:	2302      	movs	r3, #2
 800ceaa:	e0bf      	b.n	800d02c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ceac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb2:	d104      	bne.n	800cebe <f_lseek+0x29c>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	755a      	strb	r2, [r3, #21]
 800ceba:	2301      	movs	r3, #1
 800cebc:	e0b6      	b.n	800d02c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cec2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cec8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ceca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d05d      	beq.n	800cf8c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ced0:	e03a      	b.n	800cf48 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	1ad3      	subs	r3, r2, r3
 800ced8:	603b      	str	r3, [r7, #0]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	699a      	ldr	r2, [r3, #24]
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	441a      	add	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	7d1b      	ldrb	r3, [r3, #20]
 800ceea:	f003 0302 	and.w	r3, r3, #2
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d00b      	beq.n	800cf0a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fd fe02 	bl	800ab00 <create_chain>
 800cefc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d108      	bne.n	800cf16 <f_lseek+0x2f4>
							ofs = 0; break;
 800cf04:	2300      	movs	r3, #0
 800cf06:	603b      	str	r3, [r7, #0]
 800cf08:	e022      	b.n	800cf50 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fd fbfd 	bl	800a70e <get_fat>
 800cf14:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf1c:	d104      	bne.n	800cf28 <f_lseek+0x306>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2201      	movs	r2, #1
 800cf22:	755a      	strb	r2, [r3, #21]
 800cf24:	2301      	movs	r3, #1
 800cf26:	e081      	b.n	800d02c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d904      	bls.n	800cf38 <f_lseek+0x316>
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	699b      	ldr	r3, [r3, #24]
 800cf32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d304      	bcc.n	800cf42 <f_lseek+0x320>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2202      	movs	r2, #2
 800cf3c:	755a      	strb	r2, [r3, #21]
 800cf3e:	2302      	movs	r3, #2
 800cf40:	e074      	b.n	800d02c <f_lseek+0x40a>
					fp->clust = clst;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf46:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cf48:	683a      	ldr	r2, [r7, #0]
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d8c0      	bhi.n	800ced2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	699a      	ldr	r2, [r3, #24]
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	441a      	add	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d012      	beq.n	800cf8c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fd fbb0 	bl	800a6d0 <clust2sect>
 800cf70:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cf72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d104      	bne.n	800cf82 <f_lseek+0x360>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2202      	movs	r2, #2
 800cf7c:	755a      	strb	r2, [r3, #21]
 800cf7e:	2302      	movs	r3, #2
 800cf80:	e054      	b.n	800d02c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	0a5b      	lsrs	r3, r3, #9
 800cf86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf88:	4413      	add	r3, r2
 800cf8a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	699a      	ldr	r2, [r3, #24]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d90a      	bls.n	800cfae <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	699a      	ldr	r2, [r3, #24]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	7d1b      	ldrb	r3, [r3, #20]
 800cfa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfa8:	b2da      	uxtb	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	699b      	ldr	r3, [r3, #24]
 800cfb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d036      	beq.n	800d028 <f_lseek+0x406>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6a1b      	ldr	r3, [r3, #32]
 800cfbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d031      	beq.n	800d028 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	7d1b      	ldrb	r3, [r3, #20]
 800cfc8:	b25b      	sxtb	r3, r3
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	da18      	bge.n	800d000 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	7858      	ldrb	r0, [r3, #1]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6a1a      	ldr	r2, [r3, #32]
 800cfdc:	2301      	movs	r3, #1
 800cfde:	f7fc ffed 	bl	8009fbc <disk_write>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d004      	beq.n	800cff2 <f_lseek+0x3d0>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2201      	movs	r2, #1
 800cfec:	755a      	strb	r2, [r3, #21]
 800cfee:	2301      	movs	r3, #1
 800cff0:	e01c      	b.n	800d02c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	7d1b      	ldrb	r3, [r3, #20]
 800cff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cffa:	b2da      	uxtb	r2, r3
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	7858      	ldrb	r0, [r3, #1]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d00a:	2301      	movs	r3, #1
 800d00c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d00e:	f7fc ffb5 	bl	8009f7c <disk_read>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d004      	beq.n	800d022 <f_lseek+0x400>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2201      	movs	r2, #1
 800d01c:	755a      	strb	r2, [r3, #21]
 800d01e:	2301      	movs	r3, #1
 800d020:	e004      	b.n	800d02c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d026:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d028:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3740      	adds	r7, #64	; 0x40
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b092      	sub	sp, #72	; 0x48
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d040:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d044:	f107 030c 	add.w	r3, r7, #12
 800d048:	2200      	movs	r2, #0
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7fe ff42 	bl	800bed4 <find_volume>
 800d050:	4603      	mov	r3, r0
 800d052:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d056:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	f040 8099 	bne.w	800d192 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d068:	695a      	ldr	r2, [r3, #20]
 800d06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06c:	699b      	ldr	r3, [r3, #24]
 800d06e:	3b02      	subs	r3, #2
 800d070:	429a      	cmp	r2, r3
 800d072:	d804      	bhi.n	800d07e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d076:	695a      	ldr	r2, [r3, #20]
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	601a      	str	r2, [r3, #0]
 800d07c:	e089      	b.n	800d192 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d07e:	2300      	movs	r3, #0
 800d080:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	2b01      	cmp	r3, #1
 800d088:	d128      	bne.n	800d0dc <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d08a:	2302      	movs	r3, #2
 800d08c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d090:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d092:	f107 0314 	add.w	r3, r7, #20
 800d096:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fd fb38 	bl	800a70e <get_fat>
 800d09e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0a6:	d103      	bne.n	800d0b0 <f_getfree+0x7c>
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d0ae:	e063      	b.n	800d178 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d103      	bne.n	800d0be <f_getfree+0x8a>
 800d0b6:	2302      	movs	r3, #2
 800d0b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d0bc:	e05c      	b.n	800d178 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d102      	bne.n	800d0ca <f_getfree+0x96>
 800d0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800d0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d2:	699b      	ldr	r3, [r3, #24]
 800d0d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d3db      	bcc.n	800d092 <f_getfree+0x5e>
 800d0da:	e04d      	b.n	800d178 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0de:	699b      	ldr	r3, [r3, #24]
 800d0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e6:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	637b      	str	r3, [r7, #52]	; 0x34
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800d0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d113      	bne.n	800d11e <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d0f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fa:	1c5a      	adds	r2, r3, #1
 800d0fc:	63ba      	str	r2, [r7, #56]	; 0x38
 800d0fe:	4619      	mov	r1, r3
 800d100:	f7fd fa4a 	bl	800a598 <move_window>
 800d104:	4603      	mov	r3, r0
 800d106:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800d10a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d131      	bne.n	800d176 <f_getfree+0x142>
							p = fs->win;
 800d112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d114:	3334      	adds	r3, #52	; 0x34
 800d116:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800d118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d11c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800d11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	2b02      	cmp	r3, #2
 800d124:	d10f      	bne.n	800d146 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800d126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d128:	f7fc ff86 	bl	800a038 <ld_word>
 800d12c:	4603      	mov	r3, r0
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d102      	bne.n	800d138 <f_getfree+0x104>
 800d132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d134:	3301      	adds	r3, #1
 800d136:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800d138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13a:	3302      	adds	r3, #2
 800d13c:	633b      	str	r3, [r7, #48]	; 0x30
 800d13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d140:	3b02      	subs	r3, #2
 800d142:	637b      	str	r3, [r7, #52]	; 0x34
 800d144:	e010      	b.n	800d168 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d148:	f7fc ff8e 	bl	800a068 <ld_dword>
 800d14c:	4603      	mov	r3, r0
 800d14e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d152:	2b00      	cmp	r3, #0
 800d154:	d102      	bne.n	800d15c <f_getfree+0x128>
 800d156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d158:	3301      	adds	r3, #1
 800d15a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800d15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15e:	3304      	adds	r3, #4
 800d160:	633b      	str	r3, [r7, #48]	; 0x30
 800d162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d164:	3b04      	subs	r3, #4
 800d166:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800d168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d16a:	3b01      	subs	r3, #1
 800d16c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d16e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1bd      	bne.n	800d0f0 <f_getfree+0xbc>
 800d174:	e000      	b.n	800d178 <f_getfree+0x144>
							if (res != FR_OK) break;
 800d176:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d17c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d180:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d182:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d186:	791a      	ldrb	r2, [r3, #4]
 800d188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18a:	f042 0201 	orr.w	r2, r2, #1
 800d18e:	b2d2      	uxtb	r2, r2
 800d190:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d192:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d196:	4618      	mov	r0, r3
 800d198:	3748      	adds	r7, #72	; 0x48
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b0a0      	sub	sp, #128	; 0x80
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800d1aa:	f107 010c 	add.w	r1, r7, #12
 800d1ae:	1d3b      	adds	r3, r7, #4
 800d1b0:	2202      	movs	r2, #2
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fe fe8e 	bl	800bed4 <find_volume>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800d1c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	f040 808e 	bne.w	800d2e8 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d1d2:	4611      	mov	r1, r2
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7fe fd71 	bl	800bcbc <follow_path>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800d1e0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d108      	bne.n	800d1fa <f_unlink+0x5c>
 800d1e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d1ec:	2102      	movs	r1, #2
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7fd f822 	bl	800a238 <chk_lock>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800d1fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d172      	bne.n	800d2e8 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800d202:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d206:	b25b      	sxtb	r3, r3
 800d208:	2b00      	cmp	r3, #0
 800d20a:	da03      	bge.n	800d214 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800d20c:	2306      	movs	r3, #6
 800d20e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d212:	e008      	b.n	800d226 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800d214:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d218:	f003 0301 	and.w	r3, r3, #1
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d002      	beq.n	800d226 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800d220:	2307      	movs	r3, #7
 800d222:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800d226:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d134      	bne.n	800d298 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d232:	4611      	mov	r1, r2
 800d234:	4618      	mov	r0, r3
 800d236:	f7fd feb6 	bl	800afa6 <ld_clust>
 800d23a:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800d23c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d240:	f003 0310 	and.w	r3, r3, #16
 800d244:	2b00      	cmp	r3, #0
 800d246:	d027      	beq.n	800d298 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800d24c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d24e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800d250:	f107 0310 	add.w	r3, r7, #16
 800d254:	2100      	movs	r1, #0
 800d256:	4618      	mov	r0, r3
 800d258:	f7fd fd1e 	bl	800ac98 <dir_sdi>
 800d25c:	4603      	mov	r3, r0
 800d25e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800d262:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d266:	2b00      	cmp	r3, #0
 800d268:	d116      	bne.n	800d298 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800d26a:	f107 0310 	add.w	r3, r7, #16
 800d26e:	2100      	movs	r1, #0
 800d270:	4618      	mov	r0, r3
 800d272:	f7fe f8c2 	bl	800b3fa <dir_read>
 800d276:	4603      	mov	r3, r0
 800d278:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800d27c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d280:	2b00      	cmp	r3, #0
 800d282:	d102      	bne.n	800d28a <f_unlink+0xec>
 800d284:	2307      	movs	r3, #7
 800d286:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800d28a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d28e:	2b04      	cmp	r3, #4
 800d290:	d102      	bne.n	800d298 <f_unlink+0xfa>
 800d292:	2300      	movs	r3, #0
 800d294:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800d298:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d123      	bne.n	800d2e8 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800d2a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fe fb07 	bl	800b8b8 <dir_remove>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800d2b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d10c      	bne.n	800d2d2 <f_unlink+0x134>
 800d2b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d009      	beq.n	800d2d2 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800d2be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7fd fbb5 	bl	800aa36 <remove_chain>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800d2d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d106      	bne.n	800d2e8 <f_unlink+0x14a>
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fd f989 	bl	800a5f4 <sync_fs>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d2e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3780      	adds	r7, #128	; 0x80
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	460b      	mov	r3, r1
 800d2fe:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800d300:	78fb      	ldrb	r3, [r7, #3]
 800d302:	2b0a      	cmp	r3, #10
 800d304:	d103      	bne.n	800d30e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800d306:	210d      	movs	r1, #13
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f7ff fff3 	bl	800d2f4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2b00      	cmp	r3, #0
 800d318:	db25      	blt.n	800d366 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	1c5a      	adds	r2, r3, #1
 800d31e:	60fa      	str	r2, [r7, #12]
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	4413      	add	r3, r2
 800d324:	78fa      	ldrb	r2, [r7, #3]
 800d326:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2b3c      	cmp	r3, #60	; 0x3c
 800d32c:	dd12      	ble.n	800d354 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6818      	ldr	r0, [r3, #0]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f103 010c 	add.w	r1, r3, #12
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	f107 0308 	add.w	r3, r7, #8
 800d33e:	f7ff fa53 	bl	800c7e8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d342:	68ba      	ldr	r2, [r7, #8]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	429a      	cmp	r2, r3
 800d348:	d101      	bne.n	800d34e <putc_bfd+0x5a>
 800d34a:	2300      	movs	r3, #0
 800d34c:	e001      	b.n	800d352 <putc_bfd+0x5e>
 800d34e:	f04f 33ff 	mov.w	r3, #4294967295
 800d352:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	1c5a      	adds	r2, r3, #1
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	609a      	str	r2, [r3, #8]
 800d364:	e000      	b.n	800d368 <putc_bfd+0x74>
	if (i < 0) return;
 800d366:	bf00      	nop
}
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b084      	sub	sp, #16
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	db16      	blt.n	800d3ac <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6818      	ldr	r0, [r3, #0]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f103 010c 	add.w	r1, r3, #12
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	461a      	mov	r2, r3
 800d38e:	f107 030c 	add.w	r3, r7, #12
 800d392:	f7ff fa29 	bl	800c7e8 <f_write>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d107      	bne.n	800d3ac <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	68fa      	ldr	r2, [r7, #12]
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d102      	bne.n	800d3ac <putc_flush+0x3e>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	689b      	ldr	r3, [r3, #8]
 800d3aa:	e001      	b.n	800d3b0 <putc_flush+0x42>
	return EOF;
 800d3ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3710      	adds	r7, #16
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	683a      	ldr	r2, [r7, #0]
 800d3c6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	605a      	str	r2, [r3, #4]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	685a      	ldr	r2, [r3, #4]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	609a      	str	r2, [r3, #8]
}
 800d3d6:	bf00      	nop
 800d3d8:	370c      	adds	r7, #12
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr

0800d3e2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b096      	sub	sp, #88	; 0x58
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
 800d3ea:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800d3ec:	f107 030c 	add.w	r3, r7, #12
 800d3f0:	6839      	ldr	r1, [r7, #0]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7ff ffe0 	bl	800d3b8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800d3f8:	e009      	b.n	800d40e <f_puts+0x2c>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	1c5a      	adds	r2, r3, #1
 800d3fe:	607a      	str	r2, [r7, #4]
 800d400:	781a      	ldrb	r2, [r3, #0]
 800d402:	f107 030c 	add.w	r3, r7, #12
 800d406:	4611      	mov	r1, r2
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff ff73 	bl	800d2f4 <putc_bfd>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d1f1      	bne.n	800d3fa <f_puts+0x18>
	return putc_flush(&pb);
 800d416:	f107 030c 	add.w	r3, r7, #12
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7ff ffa7 	bl	800d36e <putc_flush>
 800d420:	4603      	mov	r3, r0
}
 800d422:	4618      	mov	r0, r3
 800d424:	3758      	adds	r7, #88	; 0x58
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
	...

0800d42c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b087      	sub	sp, #28
 800d430:	af00      	add	r7, sp, #0
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	60b9      	str	r1, [r7, #8]
 800d436:	4613      	mov	r3, r2
 800d438:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d43a:	2301      	movs	r3, #1
 800d43c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d43e:	2300      	movs	r3, #0
 800d440:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d442:	4b1f      	ldr	r3, [pc, #124]	; (800d4c0 <FATFS_LinkDriverEx+0x94>)
 800d444:	7a5b      	ldrb	r3, [r3, #9]
 800d446:	b2db      	uxtb	r3, r3
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d131      	bne.n	800d4b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d44c:	4b1c      	ldr	r3, [pc, #112]	; (800d4c0 <FATFS_LinkDriverEx+0x94>)
 800d44e:	7a5b      	ldrb	r3, [r3, #9]
 800d450:	b2db      	uxtb	r3, r3
 800d452:	461a      	mov	r2, r3
 800d454:	4b1a      	ldr	r3, [pc, #104]	; (800d4c0 <FATFS_LinkDriverEx+0x94>)
 800d456:	2100      	movs	r1, #0
 800d458:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d45a:	4b19      	ldr	r3, [pc, #100]	; (800d4c0 <FATFS_LinkDriverEx+0x94>)
 800d45c:	7a5b      	ldrb	r3, [r3, #9]
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	4a17      	ldr	r2, [pc, #92]	; (800d4c0 <FATFS_LinkDriverEx+0x94>)
 800d462:	009b      	lsls	r3, r3, #2
 800d464:	4413      	add	r3, r2
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d46a:	4b15      	ldr	r3, [pc, #84]	; (800d4c0 <FATFS_LinkDriverEx+0x94>)
 800d46c:	7a5b      	ldrb	r3, [r3, #9]
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	461a      	mov	r2, r3
 800d472:	4b13      	ldr	r3, [pc, #76]	; (800d4c0 <FATFS_LinkDriverEx+0x94>)
 800d474:	4413      	add	r3, r2
 800d476:	79fa      	ldrb	r2, [r7, #7]
 800d478:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d47a:	4b11      	ldr	r3, [pc, #68]	; (800d4c0 <FATFS_LinkDriverEx+0x94>)
 800d47c:	7a5b      	ldrb	r3, [r3, #9]
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	1c5a      	adds	r2, r3, #1
 800d482:	b2d1      	uxtb	r1, r2
 800d484:	4a0e      	ldr	r2, [pc, #56]	; (800d4c0 <FATFS_LinkDriverEx+0x94>)
 800d486:	7251      	strb	r1, [r2, #9]
 800d488:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d48a:	7dbb      	ldrb	r3, [r7, #22]
 800d48c:	3330      	adds	r3, #48	; 0x30
 800d48e:	b2da      	uxtb	r2, r3
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	3301      	adds	r3, #1
 800d498:	223a      	movs	r2, #58	; 0x3a
 800d49a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	3302      	adds	r3, #2
 800d4a0:	222f      	movs	r2, #47	; 0x2f
 800d4a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	3303      	adds	r3, #3
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d4b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	371c      	adds	r7, #28
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr
 800d4be:	bf00      	nop
 800d4c0:	2000147c 	.word	0x2000147c

0800d4c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	6839      	ldr	r1, [r7, #0]
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f7ff ffaa 	bl	800d42c <FATFS_LinkDriverEx>
 800d4d8:	4603      	mov	r3, r0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
	...

0800d4e4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	6039      	str	r1, [r7, #0]
 800d4ee:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d4f0:	88fb      	ldrh	r3, [r7, #6]
 800d4f2:	2b7f      	cmp	r3, #127	; 0x7f
 800d4f4:	d802      	bhi.n	800d4fc <ff_convert+0x18>
		c = chr;
 800d4f6:	88fb      	ldrh	r3, [r7, #6]
 800d4f8:	81fb      	strh	r3, [r7, #14]
 800d4fa:	e025      	b.n	800d548 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00b      	beq.n	800d51a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d502:	88fb      	ldrh	r3, [r7, #6]
 800d504:	2bff      	cmp	r3, #255	; 0xff
 800d506:	d805      	bhi.n	800d514 <ff_convert+0x30>
 800d508:	88fb      	ldrh	r3, [r7, #6]
 800d50a:	3b80      	subs	r3, #128	; 0x80
 800d50c:	4a12      	ldr	r2, [pc, #72]	; (800d558 <ff_convert+0x74>)
 800d50e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d512:	e000      	b.n	800d516 <ff_convert+0x32>
 800d514:	2300      	movs	r3, #0
 800d516:	81fb      	strh	r3, [r7, #14]
 800d518:	e016      	b.n	800d548 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d51a:	2300      	movs	r3, #0
 800d51c:	81fb      	strh	r3, [r7, #14]
 800d51e:	e009      	b.n	800d534 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d520:	89fb      	ldrh	r3, [r7, #14]
 800d522:	4a0d      	ldr	r2, [pc, #52]	; (800d558 <ff_convert+0x74>)
 800d524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d528:	88fa      	ldrh	r2, [r7, #6]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d006      	beq.n	800d53c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d52e:	89fb      	ldrh	r3, [r7, #14]
 800d530:	3301      	adds	r3, #1
 800d532:	81fb      	strh	r3, [r7, #14]
 800d534:	89fb      	ldrh	r3, [r7, #14]
 800d536:	2b7f      	cmp	r3, #127	; 0x7f
 800d538:	d9f2      	bls.n	800d520 <ff_convert+0x3c>
 800d53a:	e000      	b.n	800d53e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d53c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d53e:	89fb      	ldrh	r3, [r7, #14]
 800d540:	3380      	adds	r3, #128	; 0x80
 800d542:	b29b      	uxth	r3, r3
 800d544:	b2db      	uxtb	r3, r3
 800d546:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d548:	89fb      	ldrh	r3, [r7, #14]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3714      	adds	r7, #20
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr
 800d556:	bf00      	nop
 800d558:	080123c4 	.word	0x080123c4

0800d55c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b087      	sub	sp, #28
 800d560:	af00      	add	r7, sp, #0
 800d562:	4603      	mov	r3, r0
 800d564:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d566:	88fb      	ldrh	r3, [r7, #6]
 800d568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d56c:	d201      	bcs.n	800d572 <ff_wtoupper+0x16>
 800d56e:	4b3e      	ldr	r3, [pc, #248]	; (800d668 <ff_wtoupper+0x10c>)
 800d570:	e000      	b.n	800d574 <ff_wtoupper+0x18>
 800d572:	4b3e      	ldr	r3, [pc, #248]	; (800d66c <ff_wtoupper+0x110>)
 800d574:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	1c9a      	adds	r2, r3, #2
 800d57a:	617a      	str	r2, [r7, #20]
 800d57c:	881b      	ldrh	r3, [r3, #0]
 800d57e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d580:	8a7b      	ldrh	r3, [r7, #18]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d068      	beq.n	800d658 <ff_wtoupper+0xfc>
 800d586:	88fa      	ldrh	r2, [r7, #6]
 800d588:	8a7b      	ldrh	r3, [r7, #18]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d364      	bcc.n	800d658 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	1c9a      	adds	r2, r3, #2
 800d592:	617a      	str	r2, [r7, #20]
 800d594:	881b      	ldrh	r3, [r3, #0]
 800d596:	823b      	strh	r3, [r7, #16]
 800d598:	8a3b      	ldrh	r3, [r7, #16]
 800d59a:	0a1b      	lsrs	r3, r3, #8
 800d59c:	81fb      	strh	r3, [r7, #14]
 800d59e:	8a3b      	ldrh	r3, [r7, #16]
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d5a4:	88fa      	ldrh	r2, [r7, #6]
 800d5a6:	8a79      	ldrh	r1, [r7, #18]
 800d5a8:	8a3b      	ldrh	r3, [r7, #16]
 800d5aa:	440b      	add	r3, r1
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	da49      	bge.n	800d644 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d5b0:	89fb      	ldrh	r3, [r7, #14]
 800d5b2:	2b08      	cmp	r3, #8
 800d5b4:	d84f      	bhi.n	800d656 <ff_wtoupper+0xfa>
 800d5b6:	a201      	add	r2, pc, #4	; (adr r2, 800d5bc <ff_wtoupper+0x60>)
 800d5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5bc:	0800d5e1 	.word	0x0800d5e1
 800d5c0:	0800d5f3 	.word	0x0800d5f3
 800d5c4:	0800d609 	.word	0x0800d609
 800d5c8:	0800d611 	.word	0x0800d611
 800d5cc:	0800d619 	.word	0x0800d619
 800d5d0:	0800d621 	.word	0x0800d621
 800d5d4:	0800d629 	.word	0x0800d629
 800d5d8:	0800d631 	.word	0x0800d631
 800d5dc:	0800d639 	.word	0x0800d639
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d5e0:	88fa      	ldrh	r2, [r7, #6]
 800d5e2:	8a7b      	ldrh	r3, [r7, #18]
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	005b      	lsls	r3, r3, #1
 800d5e8:	697a      	ldr	r2, [r7, #20]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	881b      	ldrh	r3, [r3, #0]
 800d5ee:	80fb      	strh	r3, [r7, #6]
 800d5f0:	e027      	b.n	800d642 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d5f2:	88fa      	ldrh	r2, [r7, #6]
 800d5f4:	8a7b      	ldrh	r3, [r7, #18]
 800d5f6:	1ad3      	subs	r3, r2, r3
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	f003 0301 	and.w	r3, r3, #1
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	88fa      	ldrh	r2, [r7, #6]
 800d602:	1ad3      	subs	r3, r2, r3
 800d604:	80fb      	strh	r3, [r7, #6]
 800d606:	e01c      	b.n	800d642 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d608:	88fb      	ldrh	r3, [r7, #6]
 800d60a:	3b10      	subs	r3, #16
 800d60c:	80fb      	strh	r3, [r7, #6]
 800d60e:	e018      	b.n	800d642 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d610:	88fb      	ldrh	r3, [r7, #6]
 800d612:	3b20      	subs	r3, #32
 800d614:	80fb      	strh	r3, [r7, #6]
 800d616:	e014      	b.n	800d642 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d618:	88fb      	ldrh	r3, [r7, #6]
 800d61a:	3b30      	subs	r3, #48	; 0x30
 800d61c:	80fb      	strh	r3, [r7, #6]
 800d61e:	e010      	b.n	800d642 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d620:	88fb      	ldrh	r3, [r7, #6]
 800d622:	3b1a      	subs	r3, #26
 800d624:	80fb      	strh	r3, [r7, #6]
 800d626:	e00c      	b.n	800d642 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d628:	88fb      	ldrh	r3, [r7, #6]
 800d62a:	3308      	adds	r3, #8
 800d62c:	80fb      	strh	r3, [r7, #6]
 800d62e:	e008      	b.n	800d642 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d630:	88fb      	ldrh	r3, [r7, #6]
 800d632:	3b50      	subs	r3, #80	; 0x50
 800d634:	80fb      	strh	r3, [r7, #6]
 800d636:	e004      	b.n	800d642 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d638:	88fb      	ldrh	r3, [r7, #6]
 800d63a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d63e:	80fb      	strh	r3, [r7, #6]
 800d640:	bf00      	nop
			}
			break;
 800d642:	e008      	b.n	800d656 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d644:	89fb      	ldrh	r3, [r7, #14]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d195      	bne.n	800d576 <ff_wtoupper+0x1a>
 800d64a:	8a3b      	ldrh	r3, [r7, #16]
 800d64c:	005b      	lsls	r3, r3, #1
 800d64e:	697a      	ldr	r2, [r7, #20]
 800d650:	4413      	add	r3, r2
 800d652:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d654:	e78f      	b.n	800d576 <ff_wtoupper+0x1a>
			break;
 800d656:	bf00      	nop
	}

	return chr;
 800d658:	88fb      	ldrh	r3, [r7, #6]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	371c      	adds	r7, #28
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	080124c4 	.word	0x080124c4
 800d66c:	080126b8 	.word	0x080126b8

0800d670 <__errno>:
 800d670:	4b01      	ldr	r3, [pc, #4]	; (800d678 <__errno+0x8>)
 800d672:	6818      	ldr	r0, [r3, #0]
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	20000024 	.word	0x20000024

0800d67c <__libc_init_array>:
 800d67c:	b570      	push	{r4, r5, r6, lr}
 800d67e:	4d0d      	ldr	r5, [pc, #52]	; (800d6b4 <__libc_init_array+0x38>)
 800d680:	4c0d      	ldr	r4, [pc, #52]	; (800d6b8 <__libc_init_array+0x3c>)
 800d682:	1b64      	subs	r4, r4, r5
 800d684:	10a4      	asrs	r4, r4, #2
 800d686:	2600      	movs	r6, #0
 800d688:	42a6      	cmp	r6, r4
 800d68a:	d109      	bne.n	800d6a0 <__libc_init_array+0x24>
 800d68c:	4d0b      	ldr	r5, [pc, #44]	; (800d6bc <__libc_init_array+0x40>)
 800d68e:	4c0c      	ldr	r4, [pc, #48]	; (800d6c0 <__libc_init_array+0x44>)
 800d690:	f004 fc90 	bl	8011fb4 <_init>
 800d694:	1b64      	subs	r4, r4, r5
 800d696:	10a4      	asrs	r4, r4, #2
 800d698:	2600      	movs	r6, #0
 800d69a:	42a6      	cmp	r6, r4
 800d69c:	d105      	bne.n	800d6aa <__libc_init_array+0x2e>
 800d69e:	bd70      	pop	{r4, r5, r6, pc}
 800d6a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6a4:	4798      	blx	r3
 800d6a6:	3601      	adds	r6, #1
 800d6a8:	e7ee      	b.n	800d688 <__libc_init_array+0xc>
 800d6aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6ae:	4798      	blx	r3
 800d6b0:	3601      	adds	r6, #1
 800d6b2:	e7f2      	b.n	800d69a <__libc_init_array+0x1e>
 800d6b4:	08012c28 	.word	0x08012c28
 800d6b8:	08012c28 	.word	0x08012c28
 800d6bc:	08012c28 	.word	0x08012c28
 800d6c0:	08012c2c 	.word	0x08012c2c

0800d6c4 <memcpy>:
 800d6c4:	440a      	add	r2, r1
 800d6c6:	4291      	cmp	r1, r2
 800d6c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6cc:	d100      	bne.n	800d6d0 <memcpy+0xc>
 800d6ce:	4770      	bx	lr
 800d6d0:	b510      	push	{r4, lr}
 800d6d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6da:	4291      	cmp	r1, r2
 800d6dc:	d1f9      	bne.n	800d6d2 <memcpy+0xe>
 800d6de:	bd10      	pop	{r4, pc}

0800d6e0 <memset>:
 800d6e0:	4402      	add	r2, r0
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d100      	bne.n	800d6ea <memset+0xa>
 800d6e8:	4770      	bx	lr
 800d6ea:	f803 1b01 	strb.w	r1, [r3], #1
 800d6ee:	e7f9      	b.n	800d6e4 <memset+0x4>

0800d6f0 <__cvt>:
 800d6f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6f4:	ec55 4b10 	vmov	r4, r5, d0
 800d6f8:	2d00      	cmp	r5, #0
 800d6fa:	460e      	mov	r6, r1
 800d6fc:	4619      	mov	r1, r3
 800d6fe:	462b      	mov	r3, r5
 800d700:	bfbb      	ittet	lt
 800d702:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d706:	461d      	movlt	r5, r3
 800d708:	2300      	movge	r3, #0
 800d70a:	232d      	movlt	r3, #45	; 0x2d
 800d70c:	700b      	strb	r3, [r1, #0]
 800d70e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d710:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d714:	4691      	mov	r9, r2
 800d716:	f023 0820 	bic.w	r8, r3, #32
 800d71a:	bfbc      	itt	lt
 800d71c:	4622      	movlt	r2, r4
 800d71e:	4614      	movlt	r4, r2
 800d720:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d724:	d005      	beq.n	800d732 <__cvt+0x42>
 800d726:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d72a:	d100      	bne.n	800d72e <__cvt+0x3e>
 800d72c:	3601      	adds	r6, #1
 800d72e:	2102      	movs	r1, #2
 800d730:	e000      	b.n	800d734 <__cvt+0x44>
 800d732:	2103      	movs	r1, #3
 800d734:	ab03      	add	r3, sp, #12
 800d736:	9301      	str	r3, [sp, #4]
 800d738:	ab02      	add	r3, sp, #8
 800d73a:	9300      	str	r3, [sp, #0]
 800d73c:	ec45 4b10 	vmov	d0, r4, r5
 800d740:	4653      	mov	r3, sl
 800d742:	4632      	mov	r2, r6
 800d744:	f001 fe8c 	bl	800f460 <_dtoa_r>
 800d748:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d74c:	4607      	mov	r7, r0
 800d74e:	d102      	bne.n	800d756 <__cvt+0x66>
 800d750:	f019 0f01 	tst.w	r9, #1
 800d754:	d022      	beq.n	800d79c <__cvt+0xac>
 800d756:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d75a:	eb07 0906 	add.w	r9, r7, r6
 800d75e:	d110      	bne.n	800d782 <__cvt+0x92>
 800d760:	783b      	ldrb	r3, [r7, #0]
 800d762:	2b30      	cmp	r3, #48	; 0x30
 800d764:	d10a      	bne.n	800d77c <__cvt+0x8c>
 800d766:	2200      	movs	r2, #0
 800d768:	2300      	movs	r3, #0
 800d76a:	4620      	mov	r0, r4
 800d76c:	4629      	mov	r1, r5
 800d76e:	f7f3 f9bb 	bl	8000ae8 <__aeabi_dcmpeq>
 800d772:	b918      	cbnz	r0, 800d77c <__cvt+0x8c>
 800d774:	f1c6 0601 	rsb	r6, r6, #1
 800d778:	f8ca 6000 	str.w	r6, [sl]
 800d77c:	f8da 3000 	ldr.w	r3, [sl]
 800d780:	4499      	add	r9, r3
 800d782:	2200      	movs	r2, #0
 800d784:	2300      	movs	r3, #0
 800d786:	4620      	mov	r0, r4
 800d788:	4629      	mov	r1, r5
 800d78a:	f7f3 f9ad 	bl	8000ae8 <__aeabi_dcmpeq>
 800d78e:	b108      	cbz	r0, 800d794 <__cvt+0xa4>
 800d790:	f8cd 900c 	str.w	r9, [sp, #12]
 800d794:	2230      	movs	r2, #48	; 0x30
 800d796:	9b03      	ldr	r3, [sp, #12]
 800d798:	454b      	cmp	r3, r9
 800d79a:	d307      	bcc.n	800d7ac <__cvt+0xbc>
 800d79c:	9b03      	ldr	r3, [sp, #12]
 800d79e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7a0:	1bdb      	subs	r3, r3, r7
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	6013      	str	r3, [r2, #0]
 800d7a6:	b004      	add	sp, #16
 800d7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ac:	1c59      	adds	r1, r3, #1
 800d7ae:	9103      	str	r1, [sp, #12]
 800d7b0:	701a      	strb	r2, [r3, #0]
 800d7b2:	e7f0      	b.n	800d796 <__cvt+0xa6>

0800d7b4 <__exponent>:
 800d7b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2900      	cmp	r1, #0
 800d7ba:	bfb8      	it	lt
 800d7bc:	4249      	neglt	r1, r1
 800d7be:	f803 2b02 	strb.w	r2, [r3], #2
 800d7c2:	bfb4      	ite	lt
 800d7c4:	222d      	movlt	r2, #45	; 0x2d
 800d7c6:	222b      	movge	r2, #43	; 0x2b
 800d7c8:	2909      	cmp	r1, #9
 800d7ca:	7042      	strb	r2, [r0, #1]
 800d7cc:	dd2a      	ble.n	800d824 <__exponent+0x70>
 800d7ce:	f10d 0407 	add.w	r4, sp, #7
 800d7d2:	46a4      	mov	ip, r4
 800d7d4:	270a      	movs	r7, #10
 800d7d6:	46a6      	mov	lr, r4
 800d7d8:	460a      	mov	r2, r1
 800d7da:	fb91 f6f7 	sdiv	r6, r1, r7
 800d7de:	fb07 1516 	mls	r5, r7, r6, r1
 800d7e2:	3530      	adds	r5, #48	; 0x30
 800d7e4:	2a63      	cmp	r2, #99	; 0x63
 800d7e6:	f104 34ff 	add.w	r4, r4, #4294967295
 800d7ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	dcf1      	bgt.n	800d7d6 <__exponent+0x22>
 800d7f2:	3130      	adds	r1, #48	; 0x30
 800d7f4:	f1ae 0502 	sub.w	r5, lr, #2
 800d7f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d7fc:	1c44      	adds	r4, r0, #1
 800d7fe:	4629      	mov	r1, r5
 800d800:	4561      	cmp	r1, ip
 800d802:	d30a      	bcc.n	800d81a <__exponent+0x66>
 800d804:	f10d 0209 	add.w	r2, sp, #9
 800d808:	eba2 020e 	sub.w	r2, r2, lr
 800d80c:	4565      	cmp	r5, ip
 800d80e:	bf88      	it	hi
 800d810:	2200      	movhi	r2, #0
 800d812:	4413      	add	r3, r2
 800d814:	1a18      	subs	r0, r3, r0
 800d816:	b003      	add	sp, #12
 800d818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d81a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d81e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d822:	e7ed      	b.n	800d800 <__exponent+0x4c>
 800d824:	2330      	movs	r3, #48	; 0x30
 800d826:	3130      	adds	r1, #48	; 0x30
 800d828:	7083      	strb	r3, [r0, #2]
 800d82a:	70c1      	strb	r1, [r0, #3]
 800d82c:	1d03      	adds	r3, r0, #4
 800d82e:	e7f1      	b.n	800d814 <__exponent+0x60>

0800d830 <_printf_float>:
 800d830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d834:	ed2d 8b02 	vpush	{d8}
 800d838:	b08d      	sub	sp, #52	; 0x34
 800d83a:	460c      	mov	r4, r1
 800d83c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d840:	4616      	mov	r6, r2
 800d842:	461f      	mov	r7, r3
 800d844:	4605      	mov	r5, r0
 800d846:	f003 f931 	bl	8010aac <_localeconv_r>
 800d84a:	f8d0 a000 	ldr.w	sl, [r0]
 800d84e:	4650      	mov	r0, sl
 800d850:	f7f2 fcc8 	bl	80001e4 <strlen>
 800d854:	2300      	movs	r3, #0
 800d856:	930a      	str	r3, [sp, #40]	; 0x28
 800d858:	6823      	ldr	r3, [r4, #0]
 800d85a:	9305      	str	r3, [sp, #20]
 800d85c:	f8d8 3000 	ldr.w	r3, [r8]
 800d860:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d864:	3307      	adds	r3, #7
 800d866:	f023 0307 	bic.w	r3, r3, #7
 800d86a:	f103 0208 	add.w	r2, r3, #8
 800d86e:	f8c8 2000 	str.w	r2, [r8]
 800d872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d876:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d87a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d87e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d882:	9307      	str	r3, [sp, #28]
 800d884:	f8cd 8018 	str.w	r8, [sp, #24]
 800d888:	ee08 0a10 	vmov	s16, r0
 800d88c:	4b9f      	ldr	r3, [pc, #636]	; (800db0c <_printf_float+0x2dc>)
 800d88e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d892:	f04f 32ff 	mov.w	r2, #4294967295
 800d896:	f7f3 f959 	bl	8000b4c <__aeabi_dcmpun>
 800d89a:	bb88      	cbnz	r0, 800d900 <_printf_float+0xd0>
 800d89c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8a0:	4b9a      	ldr	r3, [pc, #616]	; (800db0c <_printf_float+0x2dc>)
 800d8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8a6:	f7f3 f933 	bl	8000b10 <__aeabi_dcmple>
 800d8aa:	bb48      	cbnz	r0, 800d900 <_printf_float+0xd0>
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	4640      	mov	r0, r8
 800d8b2:	4649      	mov	r1, r9
 800d8b4:	f7f3 f922 	bl	8000afc <__aeabi_dcmplt>
 800d8b8:	b110      	cbz	r0, 800d8c0 <_printf_float+0x90>
 800d8ba:	232d      	movs	r3, #45	; 0x2d
 800d8bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8c0:	4b93      	ldr	r3, [pc, #588]	; (800db10 <_printf_float+0x2e0>)
 800d8c2:	4894      	ldr	r0, [pc, #592]	; (800db14 <_printf_float+0x2e4>)
 800d8c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d8c8:	bf94      	ite	ls
 800d8ca:	4698      	movls	r8, r3
 800d8cc:	4680      	movhi	r8, r0
 800d8ce:	2303      	movs	r3, #3
 800d8d0:	6123      	str	r3, [r4, #16]
 800d8d2:	9b05      	ldr	r3, [sp, #20]
 800d8d4:	f023 0204 	bic.w	r2, r3, #4
 800d8d8:	6022      	str	r2, [r4, #0]
 800d8da:	f04f 0900 	mov.w	r9, #0
 800d8de:	9700      	str	r7, [sp, #0]
 800d8e0:	4633      	mov	r3, r6
 800d8e2:	aa0b      	add	r2, sp, #44	; 0x2c
 800d8e4:	4621      	mov	r1, r4
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	f000 f9d8 	bl	800dc9c <_printf_common>
 800d8ec:	3001      	adds	r0, #1
 800d8ee:	f040 8090 	bne.w	800da12 <_printf_float+0x1e2>
 800d8f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f6:	b00d      	add	sp, #52	; 0x34
 800d8f8:	ecbd 8b02 	vpop	{d8}
 800d8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d900:	4642      	mov	r2, r8
 800d902:	464b      	mov	r3, r9
 800d904:	4640      	mov	r0, r8
 800d906:	4649      	mov	r1, r9
 800d908:	f7f3 f920 	bl	8000b4c <__aeabi_dcmpun>
 800d90c:	b140      	cbz	r0, 800d920 <_printf_float+0xf0>
 800d90e:	464b      	mov	r3, r9
 800d910:	2b00      	cmp	r3, #0
 800d912:	bfbc      	itt	lt
 800d914:	232d      	movlt	r3, #45	; 0x2d
 800d916:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d91a:	487f      	ldr	r0, [pc, #508]	; (800db18 <_printf_float+0x2e8>)
 800d91c:	4b7f      	ldr	r3, [pc, #508]	; (800db1c <_printf_float+0x2ec>)
 800d91e:	e7d1      	b.n	800d8c4 <_printf_float+0x94>
 800d920:	6863      	ldr	r3, [r4, #4]
 800d922:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d926:	9206      	str	r2, [sp, #24]
 800d928:	1c5a      	adds	r2, r3, #1
 800d92a:	d13f      	bne.n	800d9ac <_printf_float+0x17c>
 800d92c:	2306      	movs	r3, #6
 800d92e:	6063      	str	r3, [r4, #4]
 800d930:	9b05      	ldr	r3, [sp, #20]
 800d932:	6861      	ldr	r1, [r4, #4]
 800d934:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d938:	2300      	movs	r3, #0
 800d93a:	9303      	str	r3, [sp, #12]
 800d93c:	ab0a      	add	r3, sp, #40	; 0x28
 800d93e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d942:	ab09      	add	r3, sp, #36	; 0x24
 800d944:	ec49 8b10 	vmov	d0, r8, r9
 800d948:	9300      	str	r3, [sp, #0]
 800d94a:	6022      	str	r2, [r4, #0]
 800d94c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d950:	4628      	mov	r0, r5
 800d952:	f7ff fecd 	bl	800d6f0 <__cvt>
 800d956:	9b06      	ldr	r3, [sp, #24]
 800d958:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d95a:	2b47      	cmp	r3, #71	; 0x47
 800d95c:	4680      	mov	r8, r0
 800d95e:	d108      	bne.n	800d972 <_printf_float+0x142>
 800d960:	1cc8      	adds	r0, r1, #3
 800d962:	db02      	blt.n	800d96a <_printf_float+0x13a>
 800d964:	6863      	ldr	r3, [r4, #4]
 800d966:	4299      	cmp	r1, r3
 800d968:	dd41      	ble.n	800d9ee <_printf_float+0x1be>
 800d96a:	f1ab 0b02 	sub.w	fp, fp, #2
 800d96e:	fa5f fb8b 	uxtb.w	fp, fp
 800d972:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d976:	d820      	bhi.n	800d9ba <_printf_float+0x18a>
 800d978:	3901      	subs	r1, #1
 800d97a:	465a      	mov	r2, fp
 800d97c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d980:	9109      	str	r1, [sp, #36]	; 0x24
 800d982:	f7ff ff17 	bl	800d7b4 <__exponent>
 800d986:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d988:	1813      	adds	r3, r2, r0
 800d98a:	2a01      	cmp	r2, #1
 800d98c:	4681      	mov	r9, r0
 800d98e:	6123      	str	r3, [r4, #16]
 800d990:	dc02      	bgt.n	800d998 <_printf_float+0x168>
 800d992:	6822      	ldr	r2, [r4, #0]
 800d994:	07d2      	lsls	r2, r2, #31
 800d996:	d501      	bpl.n	800d99c <_printf_float+0x16c>
 800d998:	3301      	adds	r3, #1
 800d99a:	6123      	str	r3, [r4, #16]
 800d99c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d09c      	beq.n	800d8de <_printf_float+0xae>
 800d9a4:	232d      	movs	r3, #45	; 0x2d
 800d9a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9aa:	e798      	b.n	800d8de <_printf_float+0xae>
 800d9ac:	9a06      	ldr	r2, [sp, #24]
 800d9ae:	2a47      	cmp	r2, #71	; 0x47
 800d9b0:	d1be      	bne.n	800d930 <_printf_float+0x100>
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1bc      	bne.n	800d930 <_printf_float+0x100>
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e7b9      	b.n	800d92e <_printf_float+0xfe>
 800d9ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d9be:	d118      	bne.n	800d9f2 <_printf_float+0x1c2>
 800d9c0:	2900      	cmp	r1, #0
 800d9c2:	6863      	ldr	r3, [r4, #4]
 800d9c4:	dd0b      	ble.n	800d9de <_printf_float+0x1ae>
 800d9c6:	6121      	str	r1, [r4, #16]
 800d9c8:	b913      	cbnz	r3, 800d9d0 <_printf_float+0x1a0>
 800d9ca:	6822      	ldr	r2, [r4, #0]
 800d9cc:	07d0      	lsls	r0, r2, #31
 800d9ce:	d502      	bpl.n	800d9d6 <_printf_float+0x1a6>
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	440b      	add	r3, r1
 800d9d4:	6123      	str	r3, [r4, #16]
 800d9d6:	65a1      	str	r1, [r4, #88]	; 0x58
 800d9d8:	f04f 0900 	mov.w	r9, #0
 800d9dc:	e7de      	b.n	800d99c <_printf_float+0x16c>
 800d9de:	b913      	cbnz	r3, 800d9e6 <_printf_float+0x1b6>
 800d9e0:	6822      	ldr	r2, [r4, #0]
 800d9e2:	07d2      	lsls	r2, r2, #31
 800d9e4:	d501      	bpl.n	800d9ea <_printf_float+0x1ba>
 800d9e6:	3302      	adds	r3, #2
 800d9e8:	e7f4      	b.n	800d9d4 <_printf_float+0x1a4>
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e7f2      	b.n	800d9d4 <_printf_float+0x1a4>
 800d9ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d9f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9f4:	4299      	cmp	r1, r3
 800d9f6:	db05      	blt.n	800da04 <_printf_float+0x1d4>
 800d9f8:	6823      	ldr	r3, [r4, #0]
 800d9fa:	6121      	str	r1, [r4, #16]
 800d9fc:	07d8      	lsls	r0, r3, #31
 800d9fe:	d5ea      	bpl.n	800d9d6 <_printf_float+0x1a6>
 800da00:	1c4b      	adds	r3, r1, #1
 800da02:	e7e7      	b.n	800d9d4 <_printf_float+0x1a4>
 800da04:	2900      	cmp	r1, #0
 800da06:	bfd4      	ite	le
 800da08:	f1c1 0202 	rsble	r2, r1, #2
 800da0c:	2201      	movgt	r2, #1
 800da0e:	4413      	add	r3, r2
 800da10:	e7e0      	b.n	800d9d4 <_printf_float+0x1a4>
 800da12:	6823      	ldr	r3, [r4, #0]
 800da14:	055a      	lsls	r2, r3, #21
 800da16:	d407      	bmi.n	800da28 <_printf_float+0x1f8>
 800da18:	6923      	ldr	r3, [r4, #16]
 800da1a:	4642      	mov	r2, r8
 800da1c:	4631      	mov	r1, r6
 800da1e:	4628      	mov	r0, r5
 800da20:	47b8      	blx	r7
 800da22:	3001      	adds	r0, #1
 800da24:	d12c      	bne.n	800da80 <_printf_float+0x250>
 800da26:	e764      	b.n	800d8f2 <_printf_float+0xc2>
 800da28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800da2c:	f240 80e0 	bls.w	800dbf0 <_printf_float+0x3c0>
 800da30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da34:	2200      	movs	r2, #0
 800da36:	2300      	movs	r3, #0
 800da38:	f7f3 f856 	bl	8000ae8 <__aeabi_dcmpeq>
 800da3c:	2800      	cmp	r0, #0
 800da3e:	d034      	beq.n	800daaa <_printf_float+0x27a>
 800da40:	4a37      	ldr	r2, [pc, #220]	; (800db20 <_printf_float+0x2f0>)
 800da42:	2301      	movs	r3, #1
 800da44:	4631      	mov	r1, r6
 800da46:	4628      	mov	r0, r5
 800da48:	47b8      	blx	r7
 800da4a:	3001      	adds	r0, #1
 800da4c:	f43f af51 	beq.w	800d8f2 <_printf_float+0xc2>
 800da50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da54:	429a      	cmp	r2, r3
 800da56:	db02      	blt.n	800da5e <_printf_float+0x22e>
 800da58:	6823      	ldr	r3, [r4, #0]
 800da5a:	07d8      	lsls	r0, r3, #31
 800da5c:	d510      	bpl.n	800da80 <_printf_float+0x250>
 800da5e:	ee18 3a10 	vmov	r3, s16
 800da62:	4652      	mov	r2, sl
 800da64:	4631      	mov	r1, r6
 800da66:	4628      	mov	r0, r5
 800da68:	47b8      	blx	r7
 800da6a:	3001      	adds	r0, #1
 800da6c:	f43f af41 	beq.w	800d8f2 <_printf_float+0xc2>
 800da70:	f04f 0800 	mov.w	r8, #0
 800da74:	f104 091a 	add.w	r9, r4, #26
 800da78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da7a:	3b01      	subs	r3, #1
 800da7c:	4543      	cmp	r3, r8
 800da7e:	dc09      	bgt.n	800da94 <_printf_float+0x264>
 800da80:	6823      	ldr	r3, [r4, #0]
 800da82:	079b      	lsls	r3, r3, #30
 800da84:	f100 8105 	bmi.w	800dc92 <_printf_float+0x462>
 800da88:	68e0      	ldr	r0, [r4, #12]
 800da8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da8c:	4298      	cmp	r0, r3
 800da8e:	bfb8      	it	lt
 800da90:	4618      	movlt	r0, r3
 800da92:	e730      	b.n	800d8f6 <_printf_float+0xc6>
 800da94:	2301      	movs	r3, #1
 800da96:	464a      	mov	r2, r9
 800da98:	4631      	mov	r1, r6
 800da9a:	4628      	mov	r0, r5
 800da9c:	47b8      	blx	r7
 800da9e:	3001      	adds	r0, #1
 800daa0:	f43f af27 	beq.w	800d8f2 <_printf_float+0xc2>
 800daa4:	f108 0801 	add.w	r8, r8, #1
 800daa8:	e7e6      	b.n	800da78 <_printf_float+0x248>
 800daaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daac:	2b00      	cmp	r3, #0
 800daae:	dc39      	bgt.n	800db24 <_printf_float+0x2f4>
 800dab0:	4a1b      	ldr	r2, [pc, #108]	; (800db20 <_printf_float+0x2f0>)
 800dab2:	2301      	movs	r3, #1
 800dab4:	4631      	mov	r1, r6
 800dab6:	4628      	mov	r0, r5
 800dab8:	47b8      	blx	r7
 800daba:	3001      	adds	r0, #1
 800dabc:	f43f af19 	beq.w	800d8f2 <_printf_float+0xc2>
 800dac0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dac4:	4313      	orrs	r3, r2
 800dac6:	d102      	bne.n	800dace <_printf_float+0x29e>
 800dac8:	6823      	ldr	r3, [r4, #0]
 800daca:	07d9      	lsls	r1, r3, #31
 800dacc:	d5d8      	bpl.n	800da80 <_printf_float+0x250>
 800dace:	ee18 3a10 	vmov	r3, s16
 800dad2:	4652      	mov	r2, sl
 800dad4:	4631      	mov	r1, r6
 800dad6:	4628      	mov	r0, r5
 800dad8:	47b8      	blx	r7
 800dada:	3001      	adds	r0, #1
 800dadc:	f43f af09 	beq.w	800d8f2 <_printf_float+0xc2>
 800dae0:	f04f 0900 	mov.w	r9, #0
 800dae4:	f104 0a1a 	add.w	sl, r4, #26
 800dae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daea:	425b      	negs	r3, r3
 800daec:	454b      	cmp	r3, r9
 800daee:	dc01      	bgt.n	800daf4 <_printf_float+0x2c4>
 800daf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daf2:	e792      	b.n	800da1a <_printf_float+0x1ea>
 800daf4:	2301      	movs	r3, #1
 800daf6:	4652      	mov	r2, sl
 800daf8:	4631      	mov	r1, r6
 800dafa:	4628      	mov	r0, r5
 800dafc:	47b8      	blx	r7
 800dafe:	3001      	adds	r0, #1
 800db00:	f43f aef7 	beq.w	800d8f2 <_printf_float+0xc2>
 800db04:	f109 0901 	add.w	r9, r9, #1
 800db08:	e7ee      	b.n	800dae8 <_printf_float+0x2b8>
 800db0a:	bf00      	nop
 800db0c:	7fefffff 	.word	0x7fefffff
 800db10:	08012778 	.word	0x08012778
 800db14:	0801277c 	.word	0x0801277c
 800db18:	08012784 	.word	0x08012784
 800db1c:	08012780 	.word	0x08012780
 800db20:	08012788 	.word	0x08012788
 800db24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db28:	429a      	cmp	r2, r3
 800db2a:	bfa8      	it	ge
 800db2c:	461a      	movge	r2, r3
 800db2e:	2a00      	cmp	r2, #0
 800db30:	4691      	mov	r9, r2
 800db32:	dc37      	bgt.n	800dba4 <_printf_float+0x374>
 800db34:	f04f 0b00 	mov.w	fp, #0
 800db38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db3c:	f104 021a 	add.w	r2, r4, #26
 800db40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db42:	9305      	str	r3, [sp, #20]
 800db44:	eba3 0309 	sub.w	r3, r3, r9
 800db48:	455b      	cmp	r3, fp
 800db4a:	dc33      	bgt.n	800dbb4 <_printf_float+0x384>
 800db4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db50:	429a      	cmp	r2, r3
 800db52:	db3b      	blt.n	800dbcc <_printf_float+0x39c>
 800db54:	6823      	ldr	r3, [r4, #0]
 800db56:	07da      	lsls	r2, r3, #31
 800db58:	d438      	bmi.n	800dbcc <_printf_float+0x39c>
 800db5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db5c:	9a05      	ldr	r2, [sp, #20]
 800db5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db60:	1a9a      	subs	r2, r3, r2
 800db62:	eba3 0901 	sub.w	r9, r3, r1
 800db66:	4591      	cmp	r9, r2
 800db68:	bfa8      	it	ge
 800db6a:	4691      	movge	r9, r2
 800db6c:	f1b9 0f00 	cmp.w	r9, #0
 800db70:	dc35      	bgt.n	800dbde <_printf_float+0x3ae>
 800db72:	f04f 0800 	mov.w	r8, #0
 800db76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db7a:	f104 0a1a 	add.w	sl, r4, #26
 800db7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db82:	1a9b      	subs	r3, r3, r2
 800db84:	eba3 0309 	sub.w	r3, r3, r9
 800db88:	4543      	cmp	r3, r8
 800db8a:	f77f af79 	ble.w	800da80 <_printf_float+0x250>
 800db8e:	2301      	movs	r3, #1
 800db90:	4652      	mov	r2, sl
 800db92:	4631      	mov	r1, r6
 800db94:	4628      	mov	r0, r5
 800db96:	47b8      	blx	r7
 800db98:	3001      	adds	r0, #1
 800db9a:	f43f aeaa 	beq.w	800d8f2 <_printf_float+0xc2>
 800db9e:	f108 0801 	add.w	r8, r8, #1
 800dba2:	e7ec      	b.n	800db7e <_printf_float+0x34e>
 800dba4:	4613      	mov	r3, r2
 800dba6:	4631      	mov	r1, r6
 800dba8:	4642      	mov	r2, r8
 800dbaa:	4628      	mov	r0, r5
 800dbac:	47b8      	blx	r7
 800dbae:	3001      	adds	r0, #1
 800dbb0:	d1c0      	bne.n	800db34 <_printf_float+0x304>
 800dbb2:	e69e      	b.n	800d8f2 <_printf_float+0xc2>
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	4631      	mov	r1, r6
 800dbb8:	4628      	mov	r0, r5
 800dbba:	9205      	str	r2, [sp, #20]
 800dbbc:	47b8      	blx	r7
 800dbbe:	3001      	adds	r0, #1
 800dbc0:	f43f ae97 	beq.w	800d8f2 <_printf_float+0xc2>
 800dbc4:	9a05      	ldr	r2, [sp, #20]
 800dbc6:	f10b 0b01 	add.w	fp, fp, #1
 800dbca:	e7b9      	b.n	800db40 <_printf_float+0x310>
 800dbcc:	ee18 3a10 	vmov	r3, s16
 800dbd0:	4652      	mov	r2, sl
 800dbd2:	4631      	mov	r1, r6
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	47b8      	blx	r7
 800dbd8:	3001      	adds	r0, #1
 800dbda:	d1be      	bne.n	800db5a <_printf_float+0x32a>
 800dbdc:	e689      	b.n	800d8f2 <_printf_float+0xc2>
 800dbde:	9a05      	ldr	r2, [sp, #20]
 800dbe0:	464b      	mov	r3, r9
 800dbe2:	4442      	add	r2, r8
 800dbe4:	4631      	mov	r1, r6
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	47b8      	blx	r7
 800dbea:	3001      	adds	r0, #1
 800dbec:	d1c1      	bne.n	800db72 <_printf_float+0x342>
 800dbee:	e680      	b.n	800d8f2 <_printf_float+0xc2>
 800dbf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbf2:	2a01      	cmp	r2, #1
 800dbf4:	dc01      	bgt.n	800dbfa <_printf_float+0x3ca>
 800dbf6:	07db      	lsls	r3, r3, #31
 800dbf8:	d538      	bpl.n	800dc6c <_printf_float+0x43c>
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	4642      	mov	r2, r8
 800dbfe:	4631      	mov	r1, r6
 800dc00:	4628      	mov	r0, r5
 800dc02:	47b8      	blx	r7
 800dc04:	3001      	adds	r0, #1
 800dc06:	f43f ae74 	beq.w	800d8f2 <_printf_float+0xc2>
 800dc0a:	ee18 3a10 	vmov	r3, s16
 800dc0e:	4652      	mov	r2, sl
 800dc10:	4631      	mov	r1, r6
 800dc12:	4628      	mov	r0, r5
 800dc14:	47b8      	blx	r7
 800dc16:	3001      	adds	r0, #1
 800dc18:	f43f ae6b 	beq.w	800d8f2 <_printf_float+0xc2>
 800dc1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc20:	2200      	movs	r2, #0
 800dc22:	2300      	movs	r3, #0
 800dc24:	f7f2 ff60 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc28:	b9d8      	cbnz	r0, 800dc62 <_printf_float+0x432>
 800dc2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc2c:	f108 0201 	add.w	r2, r8, #1
 800dc30:	3b01      	subs	r3, #1
 800dc32:	4631      	mov	r1, r6
 800dc34:	4628      	mov	r0, r5
 800dc36:	47b8      	blx	r7
 800dc38:	3001      	adds	r0, #1
 800dc3a:	d10e      	bne.n	800dc5a <_printf_float+0x42a>
 800dc3c:	e659      	b.n	800d8f2 <_printf_float+0xc2>
 800dc3e:	2301      	movs	r3, #1
 800dc40:	4652      	mov	r2, sl
 800dc42:	4631      	mov	r1, r6
 800dc44:	4628      	mov	r0, r5
 800dc46:	47b8      	blx	r7
 800dc48:	3001      	adds	r0, #1
 800dc4a:	f43f ae52 	beq.w	800d8f2 <_printf_float+0xc2>
 800dc4e:	f108 0801 	add.w	r8, r8, #1
 800dc52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc54:	3b01      	subs	r3, #1
 800dc56:	4543      	cmp	r3, r8
 800dc58:	dcf1      	bgt.n	800dc3e <_printf_float+0x40e>
 800dc5a:	464b      	mov	r3, r9
 800dc5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dc60:	e6dc      	b.n	800da1c <_printf_float+0x1ec>
 800dc62:	f04f 0800 	mov.w	r8, #0
 800dc66:	f104 0a1a 	add.w	sl, r4, #26
 800dc6a:	e7f2      	b.n	800dc52 <_printf_float+0x422>
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	4642      	mov	r2, r8
 800dc70:	e7df      	b.n	800dc32 <_printf_float+0x402>
 800dc72:	2301      	movs	r3, #1
 800dc74:	464a      	mov	r2, r9
 800dc76:	4631      	mov	r1, r6
 800dc78:	4628      	mov	r0, r5
 800dc7a:	47b8      	blx	r7
 800dc7c:	3001      	adds	r0, #1
 800dc7e:	f43f ae38 	beq.w	800d8f2 <_printf_float+0xc2>
 800dc82:	f108 0801 	add.w	r8, r8, #1
 800dc86:	68e3      	ldr	r3, [r4, #12]
 800dc88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc8a:	1a5b      	subs	r3, r3, r1
 800dc8c:	4543      	cmp	r3, r8
 800dc8e:	dcf0      	bgt.n	800dc72 <_printf_float+0x442>
 800dc90:	e6fa      	b.n	800da88 <_printf_float+0x258>
 800dc92:	f04f 0800 	mov.w	r8, #0
 800dc96:	f104 0919 	add.w	r9, r4, #25
 800dc9a:	e7f4      	b.n	800dc86 <_printf_float+0x456>

0800dc9c <_printf_common>:
 800dc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dca0:	4616      	mov	r6, r2
 800dca2:	4699      	mov	r9, r3
 800dca4:	688a      	ldr	r2, [r1, #8]
 800dca6:	690b      	ldr	r3, [r1, #16]
 800dca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dcac:	4293      	cmp	r3, r2
 800dcae:	bfb8      	it	lt
 800dcb0:	4613      	movlt	r3, r2
 800dcb2:	6033      	str	r3, [r6, #0]
 800dcb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dcb8:	4607      	mov	r7, r0
 800dcba:	460c      	mov	r4, r1
 800dcbc:	b10a      	cbz	r2, 800dcc2 <_printf_common+0x26>
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	6033      	str	r3, [r6, #0]
 800dcc2:	6823      	ldr	r3, [r4, #0]
 800dcc4:	0699      	lsls	r1, r3, #26
 800dcc6:	bf42      	ittt	mi
 800dcc8:	6833      	ldrmi	r3, [r6, #0]
 800dcca:	3302      	addmi	r3, #2
 800dccc:	6033      	strmi	r3, [r6, #0]
 800dcce:	6825      	ldr	r5, [r4, #0]
 800dcd0:	f015 0506 	ands.w	r5, r5, #6
 800dcd4:	d106      	bne.n	800dce4 <_printf_common+0x48>
 800dcd6:	f104 0a19 	add.w	sl, r4, #25
 800dcda:	68e3      	ldr	r3, [r4, #12]
 800dcdc:	6832      	ldr	r2, [r6, #0]
 800dcde:	1a9b      	subs	r3, r3, r2
 800dce0:	42ab      	cmp	r3, r5
 800dce2:	dc26      	bgt.n	800dd32 <_printf_common+0x96>
 800dce4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dce8:	1e13      	subs	r3, r2, #0
 800dcea:	6822      	ldr	r2, [r4, #0]
 800dcec:	bf18      	it	ne
 800dcee:	2301      	movne	r3, #1
 800dcf0:	0692      	lsls	r2, r2, #26
 800dcf2:	d42b      	bmi.n	800dd4c <_printf_common+0xb0>
 800dcf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dcf8:	4649      	mov	r1, r9
 800dcfa:	4638      	mov	r0, r7
 800dcfc:	47c0      	blx	r8
 800dcfe:	3001      	adds	r0, #1
 800dd00:	d01e      	beq.n	800dd40 <_printf_common+0xa4>
 800dd02:	6823      	ldr	r3, [r4, #0]
 800dd04:	68e5      	ldr	r5, [r4, #12]
 800dd06:	6832      	ldr	r2, [r6, #0]
 800dd08:	f003 0306 	and.w	r3, r3, #6
 800dd0c:	2b04      	cmp	r3, #4
 800dd0e:	bf08      	it	eq
 800dd10:	1aad      	subeq	r5, r5, r2
 800dd12:	68a3      	ldr	r3, [r4, #8]
 800dd14:	6922      	ldr	r2, [r4, #16]
 800dd16:	bf0c      	ite	eq
 800dd18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd1c:	2500      	movne	r5, #0
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	bfc4      	itt	gt
 800dd22:	1a9b      	subgt	r3, r3, r2
 800dd24:	18ed      	addgt	r5, r5, r3
 800dd26:	2600      	movs	r6, #0
 800dd28:	341a      	adds	r4, #26
 800dd2a:	42b5      	cmp	r5, r6
 800dd2c:	d11a      	bne.n	800dd64 <_printf_common+0xc8>
 800dd2e:	2000      	movs	r0, #0
 800dd30:	e008      	b.n	800dd44 <_printf_common+0xa8>
 800dd32:	2301      	movs	r3, #1
 800dd34:	4652      	mov	r2, sl
 800dd36:	4649      	mov	r1, r9
 800dd38:	4638      	mov	r0, r7
 800dd3a:	47c0      	blx	r8
 800dd3c:	3001      	adds	r0, #1
 800dd3e:	d103      	bne.n	800dd48 <_printf_common+0xac>
 800dd40:	f04f 30ff 	mov.w	r0, #4294967295
 800dd44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd48:	3501      	adds	r5, #1
 800dd4a:	e7c6      	b.n	800dcda <_printf_common+0x3e>
 800dd4c:	18e1      	adds	r1, r4, r3
 800dd4e:	1c5a      	adds	r2, r3, #1
 800dd50:	2030      	movs	r0, #48	; 0x30
 800dd52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd56:	4422      	add	r2, r4
 800dd58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd60:	3302      	adds	r3, #2
 800dd62:	e7c7      	b.n	800dcf4 <_printf_common+0x58>
 800dd64:	2301      	movs	r3, #1
 800dd66:	4622      	mov	r2, r4
 800dd68:	4649      	mov	r1, r9
 800dd6a:	4638      	mov	r0, r7
 800dd6c:	47c0      	blx	r8
 800dd6e:	3001      	adds	r0, #1
 800dd70:	d0e6      	beq.n	800dd40 <_printf_common+0xa4>
 800dd72:	3601      	adds	r6, #1
 800dd74:	e7d9      	b.n	800dd2a <_printf_common+0x8e>
	...

0800dd78 <_printf_i>:
 800dd78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd7c:	7e0f      	ldrb	r7, [r1, #24]
 800dd7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dd80:	2f78      	cmp	r7, #120	; 0x78
 800dd82:	4691      	mov	r9, r2
 800dd84:	4680      	mov	r8, r0
 800dd86:	460c      	mov	r4, r1
 800dd88:	469a      	mov	sl, r3
 800dd8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dd8e:	d807      	bhi.n	800dda0 <_printf_i+0x28>
 800dd90:	2f62      	cmp	r7, #98	; 0x62
 800dd92:	d80a      	bhi.n	800ddaa <_printf_i+0x32>
 800dd94:	2f00      	cmp	r7, #0
 800dd96:	f000 80d8 	beq.w	800df4a <_printf_i+0x1d2>
 800dd9a:	2f58      	cmp	r7, #88	; 0x58
 800dd9c:	f000 80a3 	beq.w	800dee6 <_printf_i+0x16e>
 800dda0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dda4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dda8:	e03a      	b.n	800de20 <_printf_i+0xa8>
 800ddaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ddae:	2b15      	cmp	r3, #21
 800ddb0:	d8f6      	bhi.n	800dda0 <_printf_i+0x28>
 800ddb2:	a101      	add	r1, pc, #4	; (adr r1, 800ddb8 <_printf_i+0x40>)
 800ddb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ddb8:	0800de11 	.word	0x0800de11
 800ddbc:	0800de25 	.word	0x0800de25
 800ddc0:	0800dda1 	.word	0x0800dda1
 800ddc4:	0800dda1 	.word	0x0800dda1
 800ddc8:	0800dda1 	.word	0x0800dda1
 800ddcc:	0800dda1 	.word	0x0800dda1
 800ddd0:	0800de25 	.word	0x0800de25
 800ddd4:	0800dda1 	.word	0x0800dda1
 800ddd8:	0800dda1 	.word	0x0800dda1
 800dddc:	0800dda1 	.word	0x0800dda1
 800dde0:	0800dda1 	.word	0x0800dda1
 800dde4:	0800df31 	.word	0x0800df31
 800dde8:	0800de55 	.word	0x0800de55
 800ddec:	0800df13 	.word	0x0800df13
 800ddf0:	0800dda1 	.word	0x0800dda1
 800ddf4:	0800dda1 	.word	0x0800dda1
 800ddf8:	0800df53 	.word	0x0800df53
 800ddfc:	0800dda1 	.word	0x0800dda1
 800de00:	0800de55 	.word	0x0800de55
 800de04:	0800dda1 	.word	0x0800dda1
 800de08:	0800dda1 	.word	0x0800dda1
 800de0c:	0800df1b 	.word	0x0800df1b
 800de10:	682b      	ldr	r3, [r5, #0]
 800de12:	1d1a      	adds	r2, r3, #4
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	602a      	str	r2, [r5, #0]
 800de18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de20:	2301      	movs	r3, #1
 800de22:	e0a3      	b.n	800df6c <_printf_i+0x1f4>
 800de24:	6820      	ldr	r0, [r4, #0]
 800de26:	6829      	ldr	r1, [r5, #0]
 800de28:	0606      	lsls	r6, r0, #24
 800de2a:	f101 0304 	add.w	r3, r1, #4
 800de2e:	d50a      	bpl.n	800de46 <_printf_i+0xce>
 800de30:	680e      	ldr	r6, [r1, #0]
 800de32:	602b      	str	r3, [r5, #0]
 800de34:	2e00      	cmp	r6, #0
 800de36:	da03      	bge.n	800de40 <_printf_i+0xc8>
 800de38:	232d      	movs	r3, #45	; 0x2d
 800de3a:	4276      	negs	r6, r6
 800de3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de40:	485e      	ldr	r0, [pc, #376]	; (800dfbc <_printf_i+0x244>)
 800de42:	230a      	movs	r3, #10
 800de44:	e019      	b.n	800de7a <_printf_i+0x102>
 800de46:	680e      	ldr	r6, [r1, #0]
 800de48:	602b      	str	r3, [r5, #0]
 800de4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800de4e:	bf18      	it	ne
 800de50:	b236      	sxthne	r6, r6
 800de52:	e7ef      	b.n	800de34 <_printf_i+0xbc>
 800de54:	682b      	ldr	r3, [r5, #0]
 800de56:	6820      	ldr	r0, [r4, #0]
 800de58:	1d19      	adds	r1, r3, #4
 800de5a:	6029      	str	r1, [r5, #0]
 800de5c:	0601      	lsls	r1, r0, #24
 800de5e:	d501      	bpl.n	800de64 <_printf_i+0xec>
 800de60:	681e      	ldr	r6, [r3, #0]
 800de62:	e002      	b.n	800de6a <_printf_i+0xf2>
 800de64:	0646      	lsls	r6, r0, #25
 800de66:	d5fb      	bpl.n	800de60 <_printf_i+0xe8>
 800de68:	881e      	ldrh	r6, [r3, #0]
 800de6a:	4854      	ldr	r0, [pc, #336]	; (800dfbc <_printf_i+0x244>)
 800de6c:	2f6f      	cmp	r7, #111	; 0x6f
 800de6e:	bf0c      	ite	eq
 800de70:	2308      	moveq	r3, #8
 800de72:	230a      	movne	r3, #10
 800de74:	2100      	movs	r1, #0
 800de76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de7a:	6865      	ldr	r5, [r4, #4]
 800de7c:	60a5      	str	r5, [r4, #8]
 800de7e:	2d00      	cmp	r5, #0
 800de80:	bfa2      	ittt	ge
 800de82:	6821      	ldrge	r1, [r4, #0]
 800de84:	f021 0104 	bicge.w	r1, r1, #4
 800de88:	6021      	strge	r1, [r4, #0]
 800de8a:	b90e      	cbnz	r6, 800de90 <_printf_i+0x118>
 800de8c:	2d00      	cmp	r5, #0
 800de8e:	d04d      	beq.n	800df2c <_printf_i+0x1b4>
 800de90:	4615      	mov	r5, r2
 800de92:	fbb6 f1f3 	udiv	r1, r6, r3
 800de96:	fb03 6711 	mls	r7, r3, r1, r6
 800de9a:	5dc7      	ldrb	r7, [r0, r7]
 800de9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dea0:	4637      	mov	r7, r6
 800dea2:	42bb      	cmp	r3, r7
 800dea4:	460e      	mov	r6, r1
 800dea6:	d9f4      	bls.n	800de92 <_printf_i+0x11a>
 800dea8:	2b08      	cmp	r3, #8
 800deaa:	d10b      	bne.n	800dec4 <_printf_i+0x14c>
 800deac:	6823      	ldr	r3, [r4, #0]
 800deae:	07de      	lsls	r6, r3, #31
 800deb0:	d508      	bpl.n	800dec4 <_printf_i+0x14c>
 800deb2:	6923      	ldr	r3, [r4, #16]
 800deb4:	6861      	ldr	r1, [r4, #4]
 800deb6:	4299      	cmp	r1, r3
 800deb8:	bfde      	ittt	le
 800deba:	2330      	movle	r3, #48	; 0x30
 800debc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dec0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dec4:	1b52      	subs	r2, r2, r5
 800dec6:	6122      	str	r2, [r4, #16]
 800dec8:	f8cd a000 	str.w	sl, [sp]
 800decc:	464b      	mov	r3, r9
 800dece:	aa03      	add	r2, sp, #12
 800ded0:	4621      	mov	r1, r4
 800ded2:	4640      	mov	r0, r8
 800ded4:	f7ff fee2 	bl	800dc9c <_printf_common>
 800ded8:	3001      	adds	r0, #1
 800deda:	d14c      	bne.n	800df76 <_printf_i+0x1fe>
 800dedc:	f04f 30ff 	mov.w	r0, #4294967295
 800dee0:	b004      	add	sp, #16
 800dee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dee6:	4835      	ldr	r0, [pc, #212]	; (800dfbc <_printf_i+0x244>)
 800dee8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800deec:	6829      	ldr	r1, [r5, #0]
 800deee:	6823      	ldr	r3, [r4, #0]
 800def0:	f851 6b04 	ldr.w	r6, [r1], #4
 800def4:	6029      	str	r1, [r5, #0]
 800def6:	061d      	lsls	r5, r3, #24
 800def8:	d514      	bpl.n	800df24 <_printf_i+0x1ac>
 800defa:	07df      	lsls	r7, r3, #31
 800defc:	bf44      	itt	mi
 800defe:	f043 0320 	orrmi.w	r3, r3, #32
 800df02:	6023      	strmi	r3, [r4, #0]
 800df04:	b91e      	cbnz	r6, 800df0e <_printf_i+0x196>
 800df06:	6823      	ldr	r3, [r4, #0]
 800df08:	f023 0320 	bic.w	r3, r3, #32
 800df0c:	6023      	str	r3, [r4, #0]
 800df0e:	2310      	movs	r3, #16
 800df10:	e7b0      	b.n	800de74 <_printf_i+0xfc>
 800df12:	6823      	ldr	r3, [r4, #0]
 800df14:	f043 0320 	orr.w	r3, r3, #32
 800df18:	6023      	str	r3, [r4, #0]
 800df1a:	2378      	movs	r3, #120	; 0x78
 800df1c:	4828      	ldr	r0, [pc, #160]	; (800dfc0 <_printf_i+0x248>)
 800df1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df22:	e7e3      	b.n	800deec <_printf_i+0x174>
 800df24:	0659      	lsls	r1, r3, #25
 800df26:	bf48      	it	mi
 800df28:	b2b6      	uxthmi	r6, r6
 800df2a:	e7e6      	b.n	800defa <_printf_i+0x182>
 800df2c:	4615      	mov	r5, r2
 800df2e:	e7bb      	b.n	800dea8 <_printf_i+0x130>
 800df30:	682b      	ldr	r3, [r5, #0]
 800df32:	6826      	ldr	r6, [r4, #0]
 800df34:	6961      	ldr	r1, [r4, #20]
 800df36:	1d18      	adds	r0, r3, #4
 800df38:	6028      	str	r0, [r5, #0]
 800df3a:	0635      	lsls	r5, r6, #24
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	d501      	bpl.n	800df44 <_printf_i+0x1cc>
 800df40:	6019      	str	r1, [r3, #0]
 800df42:	e002      	b.n	800df4a <_printf_i+0x1d2>
 800df44:	0670      	lsls	r0, r6, #25
 800df46:	d5fb      	bpl.n	800df40 <_printf_i+0x1c8>
 800df48:	8019      	strh	r1, [r3, #0]
 800df4a:	2300      	movs	r3, #0
 800df4c:	6123      	str	r3, [r4, #16]
 800df4e:	4615      	mov	r5, r2
 800df50:	e7ba      	b.n	800dec8 <_printf_i+0x150>
 800df52:	682b      	ldr	r3, [r5, #0]
 800df54:	1d1a      	adds	r2, r3, #4
 800df56:	602a      	str	r2, [r5, #0]
 800df58:	681d      	ldr	r5, [r3, #0]
 800df5a:	6862      	ldr	r2, [r4, #4]
 800df5c:	2100      	movs	r1, #0
 800df5e:	4628      	mov	r0, r5
 800df60:	f7f2 f94e 	bl	8000200 <memchr>
 800df64:	b108      	cbz	r0, 800df6a <_printf_i+0x1f2>
 800df66:	1b40      	subs	r0, r0, r5
 800df68:	6060      	str	r0, [r4, #4]
 800df6a:	6863      	ldr	r3, [r4, #4]
 800df6c:	6123      	str	r3, [r4, #16]
 800df6e:	2300      	movs	r3, #0
 800df70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df74:	e7a8      	b.n	800dec8 <_printf_i+0x150>
 800df76:	6923      	ldr	r3, [r4, #16]
 800df78:	462a      	mov	r2, r5
 800df7a:	4649      	mov	r1, r9
 800df7c:	4640      	mov	r0, r8
 800df7e:	47d0      	blx	sl
 800df80:	3001      	adds	r0, #1
 800df82:	d0ab      	beq.n	800dedc <_printf_i+0x164>
 800df84:	6823      	ldr	r3, [r4, #0]
 800df86:	079b      	lsls	r3, r3, #30
 800df88:	d413      	bmi.n	800dfb2 <_printf_i+0x23a>
 800df8a:	68e0      	ldr	r0, [r4, #12]
 800df8c:	9b03      	ldr	r3, [sp, #12]
 800df8e:	4298      	cmp	r0, r3
 800df90:	bfb8      	it	lt
 800df92:	4618      	movlt	r0, r3
 800df94:	e7a4      	b.n	800dee0 <_printf_i+0x168>
 800df96:	2301      	movs	r3, #1
 800df98:	4632      	mov	r2, r6
 800df9a:	4649      	mov	r1, r9
 800df9c:	4640      	mov	r0, r8
 800df9e:	47d0      	blx	sl
 800dfa0:	3001      	adds	r0, #1
 800dfa2:	d09b      	beq.n	800dedc <_printf_i+0x164>
 800dfa4:	3501      	adds	r5, #1
 800dfa6:	68e3      	ldr	r3, [r4, #12]
 800dfa8:	9903      	ldr	r1, [sp, #12]
 800dfaa:	1a5b      	subs	r3, r3, r1
 800dfac:	42ab      	cmp	r3, r5
 800dfae:	dcf2      	bgt.n	800df96 <_printf_i+0x21e>
 800dfb0:	e7eb      	b.n	800df8a <_printf_i+0x212>
 800dfb2:	2500      	movs	r5, #0
 800dfb4:	f104 0619 	add.w	r6, r4, #25
 800dfb8:	e7f5      	b.n	800dfa6 <_printf_i+0x22e>
 800dfba:	bf00      	nop
 800dfbc:	0801278a 	.word	0x0801278a
 800dfc0:	0801279b 	.word	0x0801279b

0800dfc4 <_scanf_float>:
 800dfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc8:	b087      	sub	sp, #28
 800dfca:	4617      	mov	r7, r2
 800dfcc:	9303      	str	r3, [sp, #12]
 800dfce:	688b      	ldr	r3, [r1, #8]
 800dfd0:	1e5a      	subs	r2, r3, #1
 800dfd2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dfd6:	bf83      	ittte	hi
 800dfd8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dfdc:	195b      	addhi	r3, r3, r5
 800dfde:	9302      	strhi	r3, [sp, #8]
 800dfe0:	2300      	movls	r3, #0
 800dfe2:	bf86      	itte	hi
 800dfe4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dfe8:	608b      	strhi	r3, [r1, #8]
 800dfea:	9302      	strls	r3, [sp, #8]
 800dfec:	680b      	ldr	r3, [r1, #0]
 800dfee:	468b      	mov	fp, r1
 800dff0:	2500      	movs	r5, #0
 800dff2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800dff6:	f84b 3b1c 	str.w	r3, [fp], #28
 800dffa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dffe:	4680      	mov	r8, r0
 800e000:	460c      	mov	r4, r1
 800e002:	465e      	mov	r6, fp
 800e004:	46aa      	mov	sl, r5
 800e006:	46a9      	mov	r9, r5
 800e008:	9501      	str	r5, [sp, #4]
 800e00a:	68a2      	ldr	r2, [r4, #8]
 800e00c:	b152      	cbz	r2, 800e024 <_scanf_float+0x60>
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	2b4e      	cmp	r3, #78	; 0x4e
 800e014:	d864      	bhi.n	800e0e0 <_scanf_float+0x11c>
 800e016:	2b40      	cmp	r3, #64	; 0x40
 800e018:	d83c      	bhi.n	800e094 <_scanf_float+0xd0>
 800e01a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e01e:	b2c8      	uxtb	r0, r1
 800e020:	280e      	cmp	r0, #14
 800e022:	d93a      	bls.n	800e09a <_scanf_float+0xd6>
 800e024:	f1b9 0f00 	cmp.w	r9, #0
 800e028:	d003      	beq.n	800e032 <_scanf_float+0x6e>
 800e02a:	6823      	ldr	r3, [r4, #0]
 800e02c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e030:	6023      	str	r3, [r4, #0]
 800e032:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e036:	f1ba 0f01 	cmp.w	sl, #1
 800e03a:	f200 8113 	bhi.w	800e264 <_scanf_float+0x2a0>
 800e03e:	455e      	cmp	r6, fp
 800e040:	f200 8105 	bhi.w	800e24e <_scanf_float+0x28a>
 800e044:	2501      	movs	r5, #1
 800e046:	4628      	mov	r0, r5
 800e048:	b007      	add	sp, #28
 800e04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e04e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e052:	2a0d      	cmp	r2, #13
 800e054:	d8e6      	bhi.n	800e024 <_scanf_float+0x60>
 800e056:	a101      	add	r1, pc, #4	; (adr r1, 800e05c <_scanf_float+0x98>)
 800e058:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e05c:	0800e19b 	.word	0x0800e19b
 800e060:	0800e025 	.word	0x0800e025
 800e064:	0800e025 	.word	0x0800e025
 800e068:	0800e025 	.word	0x0800e025
 800e06c:	0800e1fb 	.word	0x0800e1fb
 800e070:	0800e1d3 	.word	0x0800e1d3
 800e074:	0800e025 	.word	0x0800e025
 800e078:	0800e025 	.word	0x0800e025
 800e07c:	0800e1a9 	.word	0x0800e1a9
 800e080:	0800e025 	.word	0x0800e025
 800e084:	0800e025 	.word	0x0800e025
 800e088:	0800e025 	.word	0x0800e025
 800e08c:	0800e025 	.word	0x0800e025
 800e090:	0800e161 	.word	0x0800e161
 800e094:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e098:	e7db      	b.n	800e052 <_scanf_float+0x8e>
 800e09a:	290e      	cmp	r1, #14
 800e09c:	d8c2      	bhi.n	800e024 <_scanf_float+0x60>
 800e09e:	a001      	add	r0, pc, #4	; (adr r0, 800e0a4 <_scanf_float+0xe0>)
 800e0a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e0a4:	0800e153 	.word	0x0800e153
 800e0a8:	0800e025 	.word	0x0800e025
 800e0ac:	0800e153 	.word	0x0800e153
 800e0b0:	0800e1e7 	.word	0x0800e1e7
 800e0b4:	0800e025 	.word	0x0800e025
 800e0b8:	0800e101 	.word	0x0800e101
 800e0bc:	0800e13d 	.word	0x0800e13d
 800e0c0:	0800e13d 	.word	0x0800e13d
 800e0c4:	0800e13d 	.word	0x0800e13d
 800e0c8:	0800e13d 	.word	0x0800e13d
 800e0cc:	0800e13d 	.word	0x0800e13d
 800e0d0:	0800e13d 	.word	0x0800e13d
 800e0d4:	0800e13d 	.word	0x0800e13d
 800e0d8:	0800e13d 	.word	0x0800e13d
 800e0dc:	0800e13d 	.word	0x0800e13d
 800e0e0:	2b6e      	cmp	r3, #110	; 0x6e
 800e0e2:	d809      	bhi.n	800e0f8 <_scanf_float+0x134>
 800e0e4:	2b60      	cmp	r3, #96	; 0x60
 800e0e6:	d8b2      	bhi.n	800e04e <_scanf_float+0x8a>
 800e0e8:	2b54      	cmp	r3, #84	; 0x54
 800e0ea:	d077      	beq.n	800e1dc <_scanf_float+0x218>
 800e0ec:	2b59      	cmp	r3, #89	; 0x59
 800e0ee:	d199      	bne.n	800e024 <_scanf_float+0x60>
 800e0f0:	2d07      	cmp	r5, #7
 800e0f2:	d197      	bne.n	800e024 <_scanf_float+0x60>
 800e0f4:	2508      	movs	r5, #8
 800e0f6:	e029      	b.n	800e14c <_scanf_float+0x188>
 800e0f8:	2b74      	cmp	r3, #116	; 0x74
 800e0fa:	d06f      	beq.n	800e1dc <_scanf_float+0x218>
 800e0fc:	2b79      	cmp	r3, #121	; 0x79
 800e0fe:	e7f6      	b.n	800e0ee <_scanf_float+0x12a>
 800e100:	6821      	ldr	r1, [r4, #0]
 800e102:	05c8      	lsls	r0, r1, #23
 800e104:	d51a      	bpl.n	800e13c <_scanf_float+0x178>
 800e106:	9b02      	ldr	r3, [sp, #8]
 800e108:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e10c:	6021      	str	r1, [r4, #0]
 800e10e:	f109 0901 	add.w	r9, r9, #1
 800e112:	b11b      	cbz	r3, 800e11c <_scanf_float+0x158>
 800e114:	3b01      	subs	r3, #1
 800e116:	3201      	adds	r2, #1
 800e118:	9302      	str	r3, [sp, #8]
 800e11a:	60a2      	str	r2, [r4, #8]
 800e11c:	68a3      	ldr	r3, [r4, #8]
 800e11e:	3b01      	subs	r3, #1
 800e120:	60a3      	str	r3, [r4, #8]
 800e122:	6923      	ldr	r3, [r4, #16]
 800e124:	3301      	adds	r3, #1
 800e126:	6123      	str	r3, [r4, #16]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	3b01      	subs	r3, #1
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	607b      	str	r3, [r7, #4]
 800e130:	f340 8084 	ble.w	800e23c <_scanf_float+0x278>
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	3301      	adds	r3, #1
 800e138:	603b      	str	r3, [r7, #0]
 800e13a:	e766      	b.n	800e00a <_scanf_float+0x46>
 800e13c:	eb1a 0f05 	cmn.w	sl, r5
 800e140:	f47f af70 	bne.w	800e024 <_scanf_float+0x60>
 800e144:	6822      	ldr	r2, [r4, #0]
 800e146:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e14a:	6022      	str	r2, [r4, #0]
 800e14c:	f806 3b01 	strb.w	r3, [r6], #1
 800e150:	e7e4      	b.n	800e11c <_scanf_float+0x158>
 800e152:	6822      	ldr	r2, [r4, #0]
 800e154:	0610      	lsls	r0, r2, #24
 800e156:	f57f af65 	bpl.w	800e024 <_scanf_float+0x60>
 800e15a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e15e:	e7f4      	b.n	800e14a <_scanf_float+0x186>
 800e160:	f1ba 0f00 	cmp.w	sl, #0
 800e164:	d10e      	bne.n	800e184 <_scanf_float+0x1c0>
 800e166:	f1b9 0f00 	cmp.w	r9, #0
 800e16a:	d10e      	bne.n	800e18a <_scanf_float+0x1c6>
 800e16c:	6822      	ldr	r2, [r4, #0]
 800e16e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e172:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e176:	d108      	bne.n	800e18a <_scanf_float+0x1c6>
 800e178:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e17c:	6022      	str	r2, [r4, #0]
 800e17e:	f04f 0a01 	mov.w	sl, #1
 800e182:	e7e3      	b.n	800e14c <_scanf_float+0x188>
 800e184:	f1ba 0f02 	cmp.w	sl, #2
 800e188:	d055      	beq.n	800e236 <_scanf_float+0x272>
 800e18a:	2d01      	cmp	r5, #1
 800e18c:	d002      	beq.n	800e194 <_scanf_float+0x1d0>
 800e18e:	2d04      	cmp	r5, #4
 800e190:	f47f af48 	bne.w	800e024 <_scanf_float+0x60>
 800e194:	3501      	adds	r5, #1
 800e196:	b2ed      	uxtb	r5, r5
 800e198:	e7d8      	b.n	800e14c <_scanf_float+0x188>
 800e19a:	f1ba 0f01 	cmp.w	sl, #1
 800e19e:	f47f af41 	bne.w	800e024 <_scanf_float+0x60>
 800e1a2:	f04f 0a02 	mov.w	sl, #2
 800e1a6:	e7d1      	b.n	800e14c <_scanf_float+0x188>
 800e1a8:	b97d      	cbnz	r5, 800e1ca <_scanf_float+0x206>
 800e1aa:	f1b9 0f00 	cmp.w	r9, #0
 800e1ae:	f47f af3c 	bne.w	800e02a <_scanf_float+0x66>
 800e1b2:	6822      	ldr	r2, [r4, #0]
 800e1b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e1b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e1bc:	f47f af39 	bne.w	800e032 <_scanf_float+0x6e>
 800e1c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e1c4:	6022      	str	r2, [r4, #0]
 800e1c6:	2501      	movs	r5, #1
 800e1c8:	e7c0      	b.n	800e14c <_scanf_float+0x188>
 800e1ca:	2d03      	cmp	r5, #3
 800e1cc:	d0e2      	beq.n	800e194 <_scanf_float+0x1d0>
 800e1ce:	2d05      	cmp	r5, #5
 800e1d0:	e7de      	b.n	800e190 <_scanf_float+0x1cc>
 800e1d2:	2d02      	cmp	r5, #2
 800e1d4:	f47f af26 	bne.w	800e024 <_scanf_float+0x60>
 800e1d8:	2503      	movs	r5, #3
 800e1da:	e7b7      	b.n	800e14c <_scanf_float+0x188>
 800e1dc:	2d06      	cmp	r5, #6
 800e1de:	f47f af21 	bne.w	800e024 <_scanf_float+0x60>
 800e1e2:	2507      	movs	r5, #7
 800e1e4:	e7b2      	b.n	800e14c <_scanf_float+0x188>
 800e1e6:	6822      	ldr	r2, [r4, #0]
 800e1e8:	0591      	lsls	r1, r2, #22
 800e1ea:	f57f af1b 	bpl.w	800e024 <_scanf_float+0x60>
 800e1ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e1f2:	6022      	str	r2, [r4, #0]
 800e1f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e1f8:	e7a8      	b.n	800e14c <_scanf_float+0x188>
 800e1fa:	6822      	ldr	r2, [r4, #0]
 800e1fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e200:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e204:	d006      	beq.n	800e214 <_scanf_float+0x250>
 800e206:	0550      	lsls	r0, r2, #21
 800e208:	f57f af0c 	bpl.w	800e024 <_scanf_float+0x60>
 800e20c:	f1b9 0f00 	cmp.w	r9, #0
 800e210:	f43f af0f 	beq.w	800e032 <_scanf_float+0x6e>
 800e214:	0591      	lsls	r1, r2, #22
 800e216:	bf58      	it	pl
 800e218:	9901      	ldrpl	r1, [sp, #4]
 800e21a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e21e:	bf58      	it	pl
 800e220:	eba9 0101 	subpl.w	r1, r9, r1
 800e224:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e228:	bf58      	it	pl
 800e22a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e22e:	6022      	str	r2, [r4, #0]
 800e230:	f04f 0900 	mov.w	r9, #0
 800e234:	e78a      	b.n	800e14c <_scanf_float+0x188>
 800e236:	f04f 0a03 	mov.w	sl, #3
 800e23a:	e787      	b.n	800e14c <_scanf_float+0x188>
 800e23c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e240:	4639      	mov	r1, r7
 800e242:	4640      	mov	r0, r8
 800e244:	4798      	blx	r3
 800e246:	2800      	cmp	r0, #0
 800e248:	f43f aedf 	beq.w	800e00a <_scanf_float+0x46>
 800e24c:	e6ea      	b.n	800e024 <_scanf_float+0x60>
 800e24e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e252:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e256:	463a      	mov	r2, r7
 800e258:	4640      	mov	r0, r8
 800e25a:	4798      	blx	r3
 800e25c:	6923      	ldr	r3, [r4, #16]
 800e25e:	3b01      	subs	r3, #1
 800e260:	6123      	str	r3, [r4, #16]
 800e262:	e6ec      	b.n	800e03e <_scanf_float+0x7a>
 800e264:	1e6b      	subs	r3, r5, #1
 800e266:	2b06      	cmp	r3, #6
 800e268:	d825      	bhi.n	800e2b6 <_scanf_float+0x2f2>
 800e26a:	2d02      	cmp	r5, #2
 800e26c:	d836      	bhi.n	800e2dc <_scanf_float+0x318>
 800e26e:	455e      	cmp	r6, fp
 800e270:	f67f aee8 	bls.w	800e044 <_scanf_float+0x80>
 800e274:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e278:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e27c:	463a      	mov	r2, r7
 800e27e:	4640      	mov	r0, r8
 800e280:	4798      	blx	r3
 800e282:	6923      	ldr	r3, [r4, #16]
 800e284:	3b01      	subs	r3, #1
 800e286:	6123      	str	r3, [r4, #16]
 800e288:	e7f1      	b.n	800e26e <_scanf_float+0x2aa>
 800e28a:	9802      	ldr	r0, [sp, #8]
 800e28c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e290:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e294:	9002      	str	r0, [sp, #8]
 800e296:	463a      	mov	r2, r7
 800e298:	4640      	mov	r0, r8
 800e29a:	4798      	blx	r3
 800e29c:	6923      	ldr	r3, [r4, #16]
 800e29e:	3b01      	subs	r3, #1
 800e2a0:	6123      	str	r3, [r4, #16]
 800e2a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2a6:	fa5f fa8a 	uxtb.w	sl, sl
 800e2aa:	f1ba 0f02 	cmp.w	sl, #2
 800e2ae:	d1ec      	bne.n	800e28a <_scanf_float+0x2c6>
 800e2b0:	3d03      	subs	r5, #3
 800e2b2:	b2ed      	uxtb	r5, r5
 800e2b4:	1b76      	subs	r6, r6, r5
 800e2b6:	6823      	ldr	r3, [r4, #0]
 800e2b8:	05da      	lsls	r2, r3, #23
 800e2ba:	d52f      	bpl.n	800e31c <_scanf_float+0x358>
 800e2bc:	055b      	lsls	r3, r3, #21
 800e2be:	d510      	bpl.n	800e2e2 <_scanf_float+0x31e>
 800e2c0:	455e      	cmp	r6, fp
 800e2c2:	f67f aebf 	bls.w	800e044 <_scanf_float+0x80>
 800e2c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e2ce:	463a      	mov	r2, r7
 800e2d0:	4640      	mov	r0, r8
 800e2d2:	4798      	blx	r3
 800e2d4:	6923      	ldr	r3, [r4, #16]
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	6123      	str	r3, [r4, #16]
 800e2da:	e7f1      	b.n	800e2c0 <_scanf_float+0x2fc>
 800e2dc:	46aa      	mov	sl, r5
 800e2de:	9602      	str	r6, [sp, #8]
 800e2e0:	e7df      	b.n	800e2a2 <_scanf_float+0x2de>
 800e2e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e2e6:	6923      	ldr	r3, [r4, #16]
 800e2e8:	2965      	cmp	r1, #101	; 0x65
 800e2ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800e2ee:	f106 35ff 	add.w	r5, r6, #4294967295
 800e2f2:	6123      	str	r3, [r4, #16]
 800e2f4:	d00c      	beq.n	800e310 <_scanf_float+0x34c>
 800e2f6:	2945      	cmp	r1, #69	; 0x45
 800e2f8:	d00a      	beq.n	800e310 <_scanf_float+0x34c>
 800e2fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2fe:	463a      	mov	r2, r7
 800e300:	4640      	mov	r0, r8
 800e302:	4798      	blx	r3
 800e304:	6923      	ldr	r3, [r4, #16]
 800e306:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e30a:	3b01      	subs	r3, #1
 800e30c:	1eb5      	subs	r5, r6, #2
 800e30e:	6123      	str	r3, [r4, #16]
 800e310:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e314:	463a      	mov	r2, r7
 800e316:	4640      	mov	r0, r8
 800e318:	4798      	blx	r3
 800e31a:	462e      	mov	r6, r5
 800e31c:	6825      	ldr	r5, [r4, #0]
 800e31e:	f015 0510 	ands.w	r5, r5, #16
 800e322:	d159      	bne.n	800e3d8 <_scanf_float+0x414>
 800e324:	7035      	strb	r5, [r6, #0]
 800e326:	6823      	ldr	r3, [r4, #0]
 800e328:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e32c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e330:	d11b      	bne.n	800e36a <_scanf_float+0x3a6>
 800e332:	9b01      	ldr	r3, [sp, #4]
 800e334:	454b      	cmp	r3, r9
 800e336:	eba3 0209 	sub.w	r2, r3, r9
 800e33a:	d123      	bne.n	800e384 <_scanf_float+0x3c0>
 800e33c:	2200      	movs	r2, #0
 800e33e:	4659      	mov	r1, fp
 800e340:	4640      	mov	r0, r8
 800e342:	f000 fe97 	bl	800f074 <_strtod_r>
 800e346:	6822      	ldr	r2, [r4, #0]
 800e348:	9b03      	ldr	r3, [sp, #12]
 800e34a:	f012 0f02 	tst.w	r2, #2
 800e34e:	ec57 6b10 	vmov	r6, r7, d0
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	d021      	beq.n	800e39a <_scanf_float+0x3d6>
 800e356:	9903      	ldr	r1, [sp, #12]
 800e358:	1d1a      	adds	r2, r3, #4
 800e35a:	600a      	str	r2, [r1, #0]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	e9c3 6700 	strd	r6, r7, [r3]
 800e362:	68e3      	ldr	r3, [r4, #12]
 800e364:	3301      	adds	r3, #1
 800e366:	60e3      	str	r3, [r4, #12]
 800e368:	e66d      	b.n	800e046 <_scanf_float+0x82>
 800e36a:	9b04      	ldr	r3, [sp, #16]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d0e5      	beq.n	800e33c <_scanf_float+0x378>
 800e370:	9905      	ldr	r1, [sp, #20]
 800e372:	230a      	movs	r3, #10
 800e374:	462a      	mov	r2, r5
 800e376:	3101      	adds	r1, #1
 800e378:	4640      	mov	r0, r8
 800e37a:	f000 ff03 	bl	800f184 <_strtol_r>
 800e37e:	9b04      	ldr	r3, [sp, #16]
 800e380:	9e05      	ldr	r6, [sp, #20]
 800e382:	1ac2      	subs	r2, r0, r3
 800e384:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e388:	429e      	cmp	r6, r3
 800e38a:	bf28      	it	cs
 800e38c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e390:	4912      	ldr	r1, [pc, #72]	; (800e3dc <_scanf_float+0x418>)
 800e392:	4630      	mov	r0, r6
 800e394:	f000 f82c 	bl	800e3f0 <siprintf>
 800e398:	e7d0      	b.n	800e33c <_scanf_float+0x378>
 800e39a:	9903      	ldr	r1, [sp, #12]
 800e39c:	f012 0f04 	tst.w	r2, #4
 800e3a0:	f103 0204 	add.w	r2, r3, #4
 800e3a4:	600a      	str	r2, [r1, #0]
 800e3a6:	d1d9      	bne.n	800e35c <_scanf_float+0x398>
 800e3a8:	f8d3 8000 	ldr.w	r8, [r3]
 800e3ac:	ee10 2a10 	vmov	r2, s0
 800e3b0:	ee10 0a10 	vmov	r0, s0
 800e3b4:	463b      	mov	r3, r7
 800e3b6:	4639      	mov	r1, r7
 800e3b8:	f7f2 fbc8 	bl	8000b4c <__aeabi_dcmpun>
 800e3bc:	b128      	cbz	r0, 800e3ca <_scanf_float+0x406>
 800e3be:	4808      	ldr	r0, [pc, #32]	; (800e3e0 <_scanf_float+0x41c>)
 800e3c0:	f000 f810 	bl	800e3e4 <nanf>
 800e3c4:	ed88 0a00 	vstr	s0, [r8]
 800e3c8:	e7cb      	b.n	800e362 <_scanf_float+0x39e>
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	f7f2 fc1b 	bl	8000c08 <__aeabi_d2f>
 800e3d2:	f8c8 0000 	str.w	r0, [r8]
 800e3d6:	e7c4      	b.n	800e362 <_scanf_float+0x39e>
 800e3d8:	2500      	movs	r5, #0
 800e3da:	e634      	b.n	800e046 <_scanf_float+0x82>
 800e3dc:	080127ac 	.word	0x080127ac
 800e3e0:	08012843 	.word	0x08012843

0800e3e4 <nanf>:
 800e3e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e3ec <nanf+0x8>
 800e3e8:	4770      	bx	lr
 800e3ea:	bf00      	nop
 800e3ec:	7fc00000 	.word	0x7fc00000

0800e3f0 <siprintf>:
 800e3f0:	b40e      	push	{r1, r2, r3}
 800e3f2:	b500      	push	{lr}
 800e3f4:	b09c      	sub	sp, #112	; 0x70
 800e3f6:	ab1d      	add	r3, sp, #116	; 0x74
 800e3f8:	9002      	str	r0, [sp, #8]
 800e3fa:	9006      	str	r0, [sp, #24]
 800e3fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e400:	4809      	ldr	r0, [pc, #36]	; (800e428 <siprintf+0x38>)
 800e402:	9107      	str	r1, [sp, #28]
 800e404:	9104      	str	r1, [sp, #16]
 800e406:	4909      	ldr	r1, [pc, #36]	; (800e42c <siprintf+0x3c>)
 800e408:	f853 2b04 	ldr.w	r2, [r3], #4
 800e40c:	9105      	str	r1, [sp, #20]
 800e40e:	6800      	ldr	r0, [r0, #0]
 800e410:	9301      	str	r3, [sp, #4]
 800e412:	a902      	add	r1, sp, #8
 800e414:	f003 f9e4 	bl	80117e0 <_svfiprintf_r>
 800e418:	9b02      	ldr	r3, [sp, #8]
 800e41a:	2200      	movs	r2, #0
 800e41c:	701a      	strb	r2, [r3, #0]
 800e41e:	b01c      	add	sp, #112	; 0x70
 800e420:	f85d eb04 	ldr.w	lr, [sp], #4
 800e424:	b003      	add	sp, #12
 800e426:	4770      	bx	lr
 800e428:	20000024 	.word	0x20000024
 800e42c:	ffff0208 	.word	0xffff0208

0800e430 <sulp>:
 800e430:	b570      	push	{r4, r5, r6, lr}
 800e432:	4604      	mov	r4, r0
 800e434:	460d      	mov	r5, r1
 800e436:	ec45 4b10 	vmov	d0, r4, r5
 800e43a:	4616      	mov	r6, r2
 800e43c:	f002 ff2e 	bl	801129c <__ulp>
 800e440:	ec51 0b10 	vmov	r0, r1, d0
 800e444:	b17e      	cbz	r6, 800e466 <sulp+0x36>
 800e446:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e44a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e44e:	2b00      	cmp	r3, #0
 800e450:	dd09      	ble.n	800e466 <sulp+0x36>
 800e452:	051b      	lsls	r3, r3, #20
 800e454:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e458:	2400      	movs	r4, #0
 800e45a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e45e:	4622      	mov	r2, r4
 800e460:	462b      	mov	r3, r5
 800e462:	f7f2 f8d9 	bl	8000618 <__aeabi_dmul>
 800e466:	bd70      	pop	{r4, r5, r6, pc}

0800e468 <_strtod_l>:
 800e468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e46c:	ed2d 8b02 	vpush	{d8}
 800e470:	b09d      	sub	sp, #116	; 0x74
 800e472:	461f      	mov	r7, r3
 800e474:	2300      	movs	r3, #0
 800e476:	9318      	str	r3, [sp, #96]	; 0x60
 800e478:	4ba2      	ldr	r3, [pc, #648]	; (800e704 <_strtod_l+0x29c>)
 800e47a:	9213      	str	r2, [sp, #76]	; 0x4c
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	9305      	str	r3, [sp, #20]
 800e480:	4604      	mov	r4, r0
 800e482:	4618      	mov	r0, r3
 800e484:	4688      	mov	r8, r1
 800e486:	f7f1 fead 	bl	80001e4 <strlen>
 800e48a:	f04f 0a00 	mov.w	sl, #0
 800e48e:	4605      	mov	r5, r0
 800e490:	f04f 0b00 	mov.w	fp, #0
 800e494:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e49a:	781a      	ldrb	r2, [r3, #0]
 800e49c:	2a2b      	cmp	r2, #43	; 0x2b
 800e49e:	d04e      	beq.n	800e53e <_strtod_l+0xd6>
 800e4a0:	d83b      	bhi.n	800e51a <_strtod_l+0xb2>
 800e4a2:	2a0d      	cmp	r2, #13
 800e4a4:	d834      	bhi.n	800e510 <_strtod_l+0xa8>
 800e4a6:	2a08      	cmp	r2, #8
 800e4a8:	d834      	bhi.n	800e514 <_strtod_l+0xac>
 800e4aa:	2a00      	cmp	r2, #0
 800e4ac:	d03e      	beq.n	800e52c <_strtod_l+0xc4>
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	930a      	str	r3, [sp, #40]	; 0x28
 800e4b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e4b4:	7833      	ldrb	r3, [r6, #0]
 800e4b6:	2b30      	cmp	r3, #48	; 0x30
 800e4b8:	f040 80b0 	bne.w	800e61c <_strtod_l+0x1b4>
 800e4bc:	7873      	ldrb	r3, [r6, #1]
 800e4be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e4c2:	2b58      	cmp	r3, #88	; 0x58
 800e4c4:	d168      	bne.n	800e598 <_strtod_l+0x130>
 800e4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4c8:	9301      	str	r3, [sp, #4]
 800e4ca:	ab18      	add	r3, sp, #96	; 0x60
 800e4cc:	9702      	str	r7, [sp, #8]
 800e4ce:	9300      	str	r3, [sp, #0]
 800e4d0:	4a8d      	ldr	r2, [pc, #564]	; (800e708 <_strtod_l+0x2a0>)
 800e4d2:	ab19      	add	r3, sp, #100	; 0x64
 800e4d4:	a917      	add	r1, sp, #92	; 0x5c
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	f001 ffe0 	bl	801049c <__gethex>
 800e4dc:	f010 0707 	ands.w	r7, r0, #7
 800e4e0:	4605      	mov	r5, r0
 800e4e2:	d005      	beq.n	800e4f0 <_strtod_l+0x88>
 800e4e4:	2f06      	cmp	r7, #6
 800e4e6:	d12c      	bne.n	800e542 <_strtod_l+0xda>
 800e4e8:	3601      	adds	r6, #1
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	9617      	str	r6, [sp, #92]	; 0x5c
 800e4ee:	930a      	str	r3, [sp, #40]	; 0x28
 800e4f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f040 8590 	bne.w	800f018 <_strtod_l+0xbb0>
 800e4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4fa:	b1eb      	cbz	r3, 800e538 <_strtod_l+0xd0>
 800e4fc:	4652      	mov	r2, sl
 800e4fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e502:	ec43 2b10 	vmov	d0, r2, r3
 800e506:	b01d      	add	sp, #116	; 0x74
 800e508:	ecbd 8b02 	vpop	{d8}
 800e50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e510:	2a20      	cmp	r2, #32
 800e512:	d1cc      	bne.n	800e4ae <_strtod_l+0x46>
 800e514:	3301      	adds	r3, #1
 800e516:	9317      	str	r3, [sp, #92]	; 0x5c
 800e518:	e7be      	b.n	800e498 <_strtod_l+0x30>
 800e51a:	2a2d      	cmp	r2, #45	; 0x2d
 800e51c:	d1c7      	bne.n	800e4ae <_strtod_l+0x46>
 800e51e:	2201      	movs	r2, #1
 800e520:	920a      	str	r2, [sp, #40]	; 0x28
 800e522:	1c5a      	adds	r2, r3, #1
 800e524:	9217      	str	r2, [sp, #92]	; 0x5c
 800e526:	785b      	ldrb	r3, [r3, #1]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d1c2      	bne.n	800e4b2 <_strtod_l+0x4a>
 800e52c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e52e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e532:	2b00      	cmp	r3, #0
 800e534:	f040 856e 	bne.w	800f014 <_strtod_l+0xbac>
 800e538:	4652      	mov	r2, sl
 800e53a:	465b      	mov	r3, fp
 800e53c:	e7e1      	b.n	800e502 <_strtod_l+0x9a>
 800e53e:	2200      	movs	r2, #0
 800e540:	e7ee      	b.n	800e520 <_strtod_l+0xb8>
 800e542:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e544:	b13a      	cbz	r2, 800e556 <_strtod_l+0xee>
 800e546:	2135      	movs	r1, #53	; 0x35
 800e548:	a81a      	add	r0, sp, #104	; 0x68
 800e54a:	f002 ffb2 	bl	80114b2 <__copybits>
 800e54e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e550:	4620      	mov	r0, r4
 800e552:	f002 fb71 	bl	8010c38 <_Bfree>
 800e556:	3f01      	subs	r7, #1
 800e558:	2f04      	cmp	r7, #4
 800e55a:	d806      	bhi.n	800e56a <_strtod_l+0x102>
 800e55c:	e8df f007 	tbb	[pc, r7]
 800e560:	1714030a 	.word	0x1714030a
 800e564:	0a          	.byte	0x0a
 800e565:	00          	.byte	0x00
 800e566:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800e56a:	0728      	lsls	r0, r5, #28
 800e56c:	d5c0      	bpl.n	800e4f0 <_strtod_l+0x88>
 800e56e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e572:	e7bd      	b.n	800e4f0 <_strtod_l+0x88>
 800e574:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800e578:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e57a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e57e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e582:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e586:	e7f0      	b.n	800e56a <_strtod_l+0x102>
 800e588:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e70c <_strtod_l+0x2a4>
 800e58c:	e7ed      	b.n	800e56a <_strtod_l+0x102>
 800e58e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e592:	f04f 3aff 	mov.w	sl, #4294967295
 800e596:	e7e8      	b.n	800e56a <_strtod_l+0x102>
 800e598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e59a:	1c5a      	adds	r2, r3, #1
 800e59c:	9217      	str	r2, [sp, #92]	; 0x5c
 800e59e:	785b      	ldrb	r3, [r3, #1]
 800e5a0:	2b30      	cmp	r3, #48	; 0x30
 800e5a2:	d0f9      	beq.n	800e598 <_strtod_l+0x130>
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d0a3      	beq.n	800e4f0 <_strtod_l+0x88>
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	f04f 0900 	mov.w	r9, #0
 800e5ae:	9304      	str	r3, [sp, #16]
 800e5b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e5b2:	9308      	str	r3, [sp, #32]
 800e5b4:	f8cd 901c 	str.w	r9, [sp, #28]
 800e5b8:	464f      	mov	r7, r9
 800e5ba:	220a      	movs	r2, #10
 800e5bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e5be:	7806      	ldrb	r6, [r0, #0]
 800e5c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e5c4:	b2d9      	uxtb	r1, r3
 800e5c6:	2909      	cmp	r1, #9
 800e5c8:	d92a      	bls.n	800e620 <_strtod_l+0x1b8>
 800e5ca:	9905      	ldr	r1, [sp, #20]
 800e5cc:	462a      	mov	r2, r5
 800e5ce:	f003 fbbe 	bl	8011d4e <strncmp>
 800e5d2:	b398      	cbz	r0, 800e63c <_strtod_l+0x1d4>
 800e5d4:	2000      	movs	r0, #0
 800e5d6:	4632      	mov	r2, r6
 800e5d8:	463d      	mov	r5, r7
 800e5da:	9005      	str	r0, [sp, #20]
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2a65      	cmp	r2, #101	; 0x65
 800e5e0:	d001      	beq.n	800e5e6 <_strtod_l+0x17e>
 800e5e2:	2a45      	cmp	r2, #69	; 0x45
 800e5e4:	d118      	bne.n	800e618 <_strtod_l+0x1b0>
 800e5e6:	b91d      	cbnz	r5, 800e5f0 <_strtod_l+0x188>
 800e5e8:	9a04      	ldr	r2, [sp, #16]
 800e5ea:	4302      	orrs	r2, r0
 800e5ec:	d09e      	beq.n	800e52c <_strtod_l+0xc4>
 800e5ee:	2500      	movs	r5, #0
 800e5f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800e5f4:	f108 0201 	add.w	r2, r8, #1
 800e5f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800e5fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e5fe:	2a2b      	cmp	r2, #43	; 0x2b
 800e600:	d075      	beq.n	800e6ee <_strtod_l+0x286>
 800e602:	2a2d      	cmp	r2, #45	; 0x2d
 800e604:	d07b      	beq.n	800e6fe <_strtod_l+0x296>
 800e606:	f04f 0c00 	mov.w	ip, #0
 800e60a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e60e:	2909      	cmp	r1, #9
 800e610:	f240 8082 	bls.w	800e718 <_strtod_l+0x2b0>
 800e614:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e618:	2600      	movs	r6, #0
 800e61a:	e09d      	b.n	800e758 <_strtod_l+0x2f0>
 800e61c:	2300      	movs	r3, #0
 800e61e:	e7c4      	b.n	800e5aa <_strtod_l+0x142>
 800e620:	2f08      	cmp	r7, #8
 800e622:	bfd8      	it	le
 800e624:	9907      	ldrle	r1, [sp, #28]
 800e626:	f100 0001 	add.w	r0, r0, #1
 800e62a:	bfda      	itte	le
 800e62c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e630:	9307      	strle	r3, [sp, #28]
 800e632:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e636:	3701      	adds	r7, #1
 800e638:	9017      	str	r0, [sp, #92]	; 0x5c
 800e63a:	e7bf      	b.n	800e5bc <_strtod_l+0x154>
 800e63c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e63e:	195a      	adds	r2, r3, r5
 800e640:	9217      	str	r2, [sp, #92]	; 0x5c
 800e642:	5d5a      	ldrb	r2, [r3, r5]
 800e644:	2f00      	cmp	r7, #0
 800e646:	d037      	beq.n	800e6b8 <_strtod_l+0x250>
 800e648:	9005      	str	r0, [sp, #20]
 800e64a:	463d      	mov	r5, r7
 800e64c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e650:	2b09      	cmp	r3, #9
 800e652:	d912      	bls.n	800e67a <_strtod_l+0x212>
 800e654:	2301      	movs	r3, #1
 800e656:	e7c2      	b.n	800e5de <_strtod_l+0x176>
 800e658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e65a:	1c5a      	adds	r2, r3, #1
 800e65c:	9217      	str	r2, [sp, #92]	; 0x5c
 800e65e:	785a      	ldrb	r2, [r3, #1]
 800e660:	3001      	adds	r0, #1
 800e662:	2a30      	cmp	r2, #48	; 0x30
 800e664:	d0f8      	beq.n	800e658 <_strtod_l+0x1f0>
 800e666:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e66a:	2b08      	cmp	r3, #8
 800e66c:	f200 84d9 	bhi.w	800f022 <_strtod_l+0xbba>
 800e670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e672:	9005      	str	r0, [sp, #20]
 800e674:	2000      	movs	r0, #0
 800e676:	9308      	str	r3, [sp, #32]
 800e678:	4605      	mov	r5, r0
 800e67a:	3a30      	subs	r2, #48	; 0x30
 800e67c:	f100 0301 	add.w	r3, r0, #1
 800e680:	d014      	beq.n	800e6ac <_strtod_l+0x244>
 800e682:	9905      	ldr	r1, [sp, #20]
 800e684:	4419      	add	r1, r3
 800e686:	9105      	str	r1, [sp, #20]
 800e688:	462b      	mov	r3, r5
 800e68a:	eb00 0e05 	add.w	lr, r0, r5
 800e68e:	210a      	movs	r1, #10
 800e690:	4573      	cmp	r3, lr
 800e692:	d113      	bne.n	800e6bc <_strtod_l+0x254>
 800e694:	182b      	adds	r3, r5, r0
 800e696:	2b08      	cmp	r3, #8
 800e698:	f105 0501 	add.w	r5, r5, #1
 800e69c:	4405      	add	r5, r0
 800e69e:	dc1c      	bgt.n	800e6da <_strtod_l+0x272>
 800e6a0:	9907      	ldr	r1, [sp, #28]
 800e6a2:	230a      	movs	r3, #10
 800e6a4:	fb03 2301 	mla	r3, r3, r1, r2
 800e6a8:	9307      	str	r3, [sp, #28]
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e6ae:	1c51      	adds	r1, r2, #1
 800e6b0:	9117      	str	r1, [sp, #92]	; 0x5c
 800e6b2:	7852      	ldrb	r2, [r2, #1]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	e7c9      	b.n	800e64c <_strtod_l+0x1e4>
 800e6b8:	4638      	mov	r0, r7
 800e6ba:	e7d2      	b.n	800e662 <_strtod_l+0x1fa>
 800e6bc:	2b08      	cmp	r3, #8
 800e6be:	dc04      	bgt.n	800e6ca <_strtod_l+0x262>
 800e6c0:	9e07      	ldr	r6, [sp, #28]
 800e6c2:	434e      	muls	r6, r1
 800e6c4:	9607      	str	r6, [sp, #28]
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	e7e2      	b.n	800e690 <_strtod_l+0x228>
 800e6ca:	f103 0c01 	add.w	ip, r3, #1
 800e6ce:	f1bc 0f10 	cmp.w	ip, #16
 800e6d2:	bfd8      	it	le
 800e6d4:	fb01 f909 	mulle.w	r9, r1, r9
 800e6d8:	e7f5      	b.n	800e6c6 <_strtod_l+0x25e>
 800e6da:	2d10      	cmp	r5, #16
 800e6dc:	bfdc      	itt	le
 800e6de:	230a      	movle	r3, #10
 800e6e0:	fb03 2909 	mlale	r9, r3, r9, r2
 800e6e4:	e7e1      	b.n	800e6aa <_strtod_l+0x242>
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	9305      	str	r3, [sp, #20]
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	e77c      	b.n	800e5e8 <_strtod_l+0x180>
 800e6ee:	f04f 0c00 	mov.w	ip, #0
 800e6f2:	f108 0202 	add.w	r2, r8, #2
 800e6f6:	9217      	str	r2, [sp, #92]	; 0x5c
 800e6f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e6fc:	e785      	b.n	800e60a <_strtod_l+0x1a2>
 800e6fe:	f04f 0c01 	mov.w	ip, #1
 800e702:	e7f6      	b.n	800e6f2 <_strtod_l+0x28a>
 800e704:	08012aa0 	.word	0x08012aa0
 800e708:	080127b4 	.word	0x080127b4
 800e70c:	7ff00000 	.word	0x7ff00000
 800e710:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e712:	1c51      	adds	r1, r2, #1
 800e714:	9117      	str	r1, [sp, #92]	; 0x5c
 800e716:	7852      	ldrb	r2, [r2, #1]
 800e718:	2a30      	cmp	r2, #48	; 0x30
 800e71a:	d0f9      	beq.n	800e710 <_strtod_l+0x2a8>
 800e71c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e720:	2908      	cmp	r1, #8
 800e722:	f63f af79 	bhi.w	800e618 <_strtod_l+0x1b0>
 800e726:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e72a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e72c:	9206      	str	r2, [sp, #24]
 800e72e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e730:	1c51      	adds	r1, r2, #1
 800e732:	9117      	str	r1, [sp, #92]	; 0x5c
 800e734:	7852      	ldrb	r2, [r2, #1]
 800e736:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e73a:	2e09      	cmp	r6, #9
 800e73c:	d937      	bls.n	800e7ae <_strtod_l+0x346>
 800e73e:	9e06      	ldr	r6, [sp, #24]
 800e740:	1b89      	subs	r1, r1, r6
 800e742:	2908      	cmp	r1, #8
 800e744:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e748:	dc02      	bgt.n	800e750 <_strtod_l+0x2e8>
 800e74a:	4576      	cmp	r6, lr
 800e74c:	bfa8      	it	ge
 800e74e:	4676      	movge	r6, lr
 800e750:	f1bc 0f00 	cmp.w	ip, #0
 800e754:	d000      	beq.n	800e758 <_strtod_l+0x2f0>
 800e756:	4276      	negs	r6, r6
 800e758:	2d00      	cmp	r5, #0
 800e75a:	d14d      	bne.n	800e7f8 <_strtod_l+0x390>
 800e75c:	9904      	ldr	r1, [sp, #16]
 800e75e:	4301      	orrs	r1, r0
 800e760:	f47f aec6 	bne.w	800e4f0 <_strtod_l+0x88>
 800e764:	2b00      	cmp	r3, #0
 800e766:	f47f aee1 	bne.w	800e52c <_strtod_l+0xc4>
 800e76a:	2a69      	cmp	r2, #105	; 0x69
 800e76c:	d027      	beq.n	800e7be <_strtod_l+0x356>
 800e76e:	dc24      	bgt.n	800e7ba <_strtod_l+0x352>
 800e770:	2a49      	cmp	r2, #73	; 0x49
 800e772:	d024      	beq.n	800e7be <_strtod_l+0x356>
 800e774:	2a4e      	cmp	r2, #78	; 0x4e
 800e776:	f47f aed9 	bne.w	800e52c <_strtod_l+0xc4>
 800e77a:	499f      	ldr	r1, [pc, #636]	; (800e9f8 <_strtod_l+0x590>)
 800e77c:	a817      	add	r0, sp, #92	; 0x5c
 800e77e:	f002 f8e5 	bl	801094c <__match>
 800e782:	2800      	cmp	r0, #0
 800e784:	f43f aed2 	beq.w	800e52c <_strtod_l+0xc4>
 800e788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	2b28      	cmp	r3, #40	; 0x28
 800e78e:	d12d      	bne.n	800e7ec <_strtod_l+0x384>
 800e790:	499a      	ldr	r1, [pc, #616]	; (800e9fc <_strtod_l+0x594>)
 800e792:	aa1a      	add	r2, sp, #104	; 0x68
 800e794:	a817      	add	r0, sp, #92	; 0x5c
 800e796:	f002 f8ed 	bl	8010974 <__hexnan>
 800e79a:	2805      	cmp	r0, #5
 800e79c:	d126      	bne.n	800e7ec <_strtod_l+0x384>
 800e79e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e7a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e7a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e7a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e7ac:	e6a0      	b.n	800e4f0 <_strtod_l+0x88>
 800e7ae:	210a      	movs	r1, #10
 800e7b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800e7b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e7b8:	e7b9      	b.n	800e72e <_strtod_l+0x2c6>
 800e7ba:	2a6e      	cmp	r2, #110	; 0x6e
 800e7bc:	e7db      	b.n	800e776 <_strtod_l+0x30e>
 800e7be:	4990      	ldr	r1, [pc, #576]	; (800ea00 <_strtod_l+0x598>)
 800e7c0:	a817      	add	r0, sp, #92	; 0x5c
 800e7c2:	f002 f8c3 	bl	801094c <__match>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	f43f aeb0 	beq.w	800e52c <_strtod_l+0xc4>
 800e7cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e7ce:	498d      	ldr	r1, [pc, #564]	; (800ea04 <_strtod_l+0x59c>)
 800e7d0:	3b01      	subs	r3, #1
 800e7d2:	a817      	add	r0, sp, #92	; 0x5c
 800e7d4:	9317      	str	r3, [sp, #92]	; 0x5c
 800e7d6:	f002 f8b9 	bl	801094c <__match>
 800e7da:	b910      	cbnz	r0, 800e7e2 <_strtod_l+0x37a>
 800e7dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e7de:	3301      	adds	r3, #1
 800e7e0:	9317      	str	r3, [sp, #92]	; 0x5c
 800e7e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ea14 <_strtod_l+0x5ac>
 800e7e6:	f04f 0a00 	mov.w	sl, #0
 800e7ea:	e681      	b.n	800e4f0 <_strtod_l+0x88>
 800e7ec:	4886      	ldr	r0, [pc, #536]	; (800ea08 <_strtod_l+0x5a0>)
 800e7ee:	f003 fa53 	bl	8011c98 <nan>
 800e7f2:	ec5b ab10 	vmov	sl, fp, d0
 800e7f6:	e67b      	b.n	800e4f0 <_strtod_l+0x88>
 800e7f8:	9b05      	ldr	r3, [sp, #20]
 800e7fa:	9807      	ldr	r0, [sp, #28]
 800e7fc:	1af3      	subs	r3, r6, r3
 800e7fe:	2f00      	cmp	r7, #0
 800e800:	bf08      	it	eq
 800e802:	462f      	moveq	r7, r5
 800e804:	2d10      	cmp	r5, #16
 800e806:	9306      	str	r3, [sp, #24]
 800e808:	46a8      	mov	r8, r5
 800e80a:	bfa8      	it	ge
 800e80c:	f04f 0810 	movge.w	r8, #16
 800e810:	f7f1 fe88 	bl	8000524 <__aeabi_ui2d>
 800e814:	2d09      	cmp	r5, #9
 800e816:	4682      	mov	sl, r0
 800e818:	468b      	mov	fp, r1
 800e81a:	dd13      	ble.n	800e844 <_strtod_l+0x3dc>
 800e81c:	4b7b      	ldr	r3, [pc, #492]	; (800ea0c <_strtod_l+0x5a4>)
 800e81e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e822:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e826:	f7f1 fef7 	bl	8000618 <__aeabi_dmul>
 800e82a:	4682      	mov	sl, r0
 800e82c:	4648      	mov	r0, r9
 800e82e:	468b      	mov	fp, r1
 800e830:	f7f1 fe78 	bl	8000524 <__aeabi_ui2d>
 800e834:	4602      	mov	r2, r0
 800e836:	460b      	mov	r3, r1
 800e838:	4650      	mov	r0, sl
 800e83a:	4659      	mov	r1, fp
 800e83c:	f7f1 fd36 	bl	80002ac <__adddf3>
 800e840:	4682      	mov	sl, r0
 800e842:	468b      	mov	fp, r1
 800e844:	2d0f      	cmp	r5, #15
 800e846:	dc38      	bgt.n	800e8ba <_strtod_l+0x452>
 800e848:	9b06      	ldr	r3, [sp, #24]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	f43f ae50 	beq.w	800e4f0 <_strtod_l+0x88>
 800e850:	dd24      	ble.n	800e89c <_strtod_l+0x434>
 800e852:	2b16      	cmp	r3, #22
 800e854:	dc0b      	bgt.n	800e86e <_strtod_l+0x406>
 800e856:	496d      	ldr	r1, [pc, #436]	; (800ea0c <_strtod_l+0x5a4>)
 800e858:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e85c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e860:	4652      	mov	r2, sl
 800e862:	465b      	mov	r3, fp
 800e864:	f7f1 fed8 	bl	8000618 <__aeabi_dmul>
 800e868:	4682      	mov	sl, r0
 800e86a:	468b      	mov	fp, r1
 800e86c:	e640      	b.n	800e4f0 <_strtod_l+0x88>
 800e86e:	9a06      	ldr	r2, [sp, #24]
 800e870:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e874:	4293      	cmp	r3, r2
 800e876:	db20      	blt.n	800e8ba <_strtod_l+0x452>
 800e878:	4c64      	ldr	r4, [pc, #400]	; (800ea0c <_strtod_l+0x5a4>)
 800e87a:	f1c5 050f 	rsb	r5, r5, #15
 800e87e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e882:	4652      	mov	r2, sl
 800e884:	465b      	mov	r3, fp
 800e886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e88a:	f7f1 fec5 	bl	8000618 <__aeabi_dmul>
 800e88e:	9b06      	ldr	r3, [sp, #24]
 800e890:	1b5d      	subs	r5, r3, r5
 800e892:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e896:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e89a:	e7e3      	b.n	800e864 <_strtod_l+0x3fc>
 800e89c:	9b06      	ldr	r3, [sp, #24]
 800e89e:	3316      	adds	r3, #22
 800e8a0:	db0b      	blt.n	800e8ba <_strtod_l+0x452>
 800e8a2:	9b05      	ldr	r3, [sp, #20]
 800e8a4:	1b9e      	subs	r6, r3, r6
 800e8a6:	4b59      	ldr	r3, [pc, #356]	; (800ea0c <_strtod_l+0x5a4>)
 800e8a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e8ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e8b0:	4650      	mov	r0, sl
 800e8b2:	4659      	mov	r1, fp
 800e8b4:	f7f1 ffda 	bl	800086c <__aeabi_ddiv>
 800e8b8:	e7d6      	b.n	800e868 <_strtod_l+0x400>
 800e8ba:	9b06      	ldr	r3, [sp, #24]
 800e8bc:	eba5 0808 	sub.w	r8, r5, r8
 800e8c0:	4498      	add	r8, r3
 800e8c2:	f1b8 0f00 	cmp.w	r8, #0
 800e8c6:	dd74      	ble.n	800e9b2 <_strtod_l+0x54a>
 800e8c8:	f018 030f 	ands.w	r3, r8, #15
 800e8cc:	d00a      	beq.n	800e8e4 <_strtod_l+0x47c>
 800e8ce:	494f      	ldr	r1, [pc, #316]	; (800ea0c <_strtod_l+0x5a4>)
 800e8d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e8d4:	4652      	mov	r2, sl
 800e8d6:	465b      	mov	r3, fp
 800e8d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8dc:	f7f1 fe9c 	bl	8000618 <__aeabi_dmul>
 800e8e0:	4682      	mov	sl, r0
 800e8e2:	468b      	mov	fp, r1
 800e8e4:	f038 080f 	bics.w	r8, r8, #15
 800e8e8:	d04f      	beq.n	800e98a <_strtod_l+0x522>
 800e8ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e8ee:	dd22      	ble.n	800e936 <_strtod_l+0x4ce>
 800e8f0:	2500      	movs	r5, #0
 800e8f2:	462e      	mov	r6, r5
 800e8f4:	9507      	str	r5, [sp, #28]
 800e8f6:	9505      	str	r5, [sp, #20]
 800e8f8:	2322      	movs	r3, #34	; 0x22
 800e8fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ea14 <_strtod_l+0x5ac>
 800e8fe:	6023      	str	r3, [r4, #0]
 800e900:	f04f 0a00 	mov.w	sl, #0
 800e904:	9b07      	ldr	r3, [sp, #28]
 800e906:	2b00      	cmp	r3, #0
 800e908:	f43f adf2 	beq.w	800e4f0 <_strtod_l+0x88>
 800e90c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e90e:	4620      	mov	r0, r4
 800e910:	f002 f992 	bl	8010c38 <_Bfree>
 800e914:	9905      	ldr	r1, [sp, #20]
 800e916:	4620      	mov	r0, r4
 800e918:	f002 f98e 	bl	8010c38 <_Bfree>
 800e91c:	4631      	mov	r1, r6
 800e91e:	4620      	mov	r0, r4
 800e920:	f002 f98a 	bl	8010c38 <_Bfree>
 800e924:	9907      	ldr	r1, [sp, #28]
 800e926:	4620      	mov	r0, r4
 800e928:	f002 f986 	bl	8010c38 <_Bfree>
 800e92c:	4629      	mov	r1, r5
 800e92e:	4620      	mov	r0, r4
 800e930:	f002 f982 	bl	8010c38 <_Bfree>
 800e934:	e5dc      	b.n	800e4f0 <_strtod_l+0x88>
 800e936:	4b36      	ldr	r3, [pc, #216]	; (800ea10 <_strtod_l+0x5a8>)
 800e938:	9304      	str	r3, [sp, #16]
 800e93a:	2300      	movs	r3, #0
 800e93c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e940:	4650      	mov	r0, sl
 800e942:	4659      	mov	r1, fp
 800e944:	4699      	mov	r9, r3
 800e946:	f1b8 0f01 	cmp.w	r8, #1
 800e94a:	dc21      	bgt.n	800e990 <_strtod_l+0x528>
 800e94c:	b10b      	cbz	r3, 800e952 <_strtod_l+0x4ea>
 800e94e:	4682      	mov	sl, r0
 800e950:	468b      	mov	fp, r1
 800e952:	4b2f      	ldr	r3, [pc, #188]	; (800ea10 <_strtod_l+0x5a8>)
 800e954:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e958:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e95c:	4652      	mov	r2, sl
 800e95e:	465b      	mov	r3, fp
 800e960:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e964:	f7f1 fe58 	bl	8000618 <__aeabi_dmul>
 800e968:	4b2a      	ldr	r3, [pc, #168]	; (800ea14 <_strtod_l+0x5ac>)
 800e96a:	460a      	mov	r2, r1
 800e96c:	400b      	ands	r3, r1
 800e96e:	492a      	ldr	r1, [pc, #168]	; (800ea18 <_strtod_l+0x5b0>)
 800e970:	428b      	cmp	r3, r1
 800e972:	4682      	mov	sl, r0
 800e974:	d8bc      	bhi.n	800e8f0 <_strtod_l+0x488>
 800e976:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e97a:	428b      	cmp	r3, r1
 800e97c:	bf86      	itte	hi
 800e97e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ea1c <_strtod_l+0x5b4>
 800e982:	f04f 3aff 	movhi.w	sl, #4294967295
 800e986:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e98a:	2300      	movs	r3, #0
 800e98c:	9304      	str	r3, [sp, #16]
 800e98e:	e084      	b.n	800ea9a <_strtod_l+0x632>
 800e990:	f018 0f01 	tst.w	r8, #1
 800e994:	d005      	beq.n	800e9a2 <_strtod_l+0x53a>
 800e996:	9b04      	ldr	r3, [sp, #16]
 800e998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99c:	f7f1 fe3c 	bl	8000618 <__aeabi_dmul>
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	9a04      	ldr	r2, [sp, #16]
 800e9a4:	3208      	adds	r2, #8
 800e9a6:	f109 0901 	add.w	r9, r9, #1
 800e9aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e9ae:	9204      	str	r2, [sp, #16]
 800e9b0:	e7c9      	b.n	800e946 <_strtod_l+0x4de>
 800e9b2:	d0ea      	beq.n	800e98a <_strtod_l+0x522>
 800e9b4:	f1c8 0800 	rsb	r8, r8, #0
 800e9b8:	f018 020f 	ands.w	r2, r8, #15
 800e9bc:	d00a      	beq.n	800e9d4 <_strtod_l+0x56c>
 800e9be:	4b13      	ldr	r3, [pc, #76]	; (800ea0c <_strtod_l+0x5a4>)
 800e9c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9c4:	4650      	mov	r0, sl
 800e9c6:	4659      	mov	r1, fp
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	f7f1 ff4e 	bl	800086c <__aeabi_ddiv>
 800e9d0:	4682      	mov	sl, r0
 800e9d2:	468b      	mov	fp, r1
 800e9d4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e9d8:	d0d7      	beq.n	800e98a <_strtod_l+0x522>
 800e9da:	f1b8 0f1f 	cmp.w	r8, #31
 800e9de:	dd1f      	ble.n	800ea20 <_strtod_l+0x5b8>
 800e9e0:	2500      	movs	r5, #0
 800e9e2:	462e      	mov	r6, r5
 800e9e4:	9507      	str	r5, [sp, #28]
 800e9e6:	9505      	str	r5, [sp, #20]
 800e9e8:	2322      	movs	r3, #34	; 0x22
 800e9ea:	f04f 0a00 	mov.w	sl, #0
 800e9ee:	f04f 0b00 	mov.w	fp, #0
 800e9f2:	6023      	str	r3, [r4, #0]
 800e9f4:	e786      	b.n	800e904 <_strtod_l+0x49c>
 800e9f6:	bf00      	nop
 800e9f8:	08012785 	.word	0x08012785
 800e9fc:	080127c8 	.word	0x080127c8
 800ea00:	0801277d 	.word	0x0801277d
 800ea04:	08012948 	.word	0x08012948
 800ea08:	08012843 	.word	0x08012843
 800ea0c:	08012b38 	.word	0x08012b38
 800ea10:	08012b10 	.word	0x08012b10
 800ea14:	7ff00000 	.word	0x7ff00000
 800ea18:	7ca00000 	.word	0x7ca00000
 800ea1c:	7fefffff 	.word	0x7fefffff
 800ea20:	f018 0310 	ands.w	r3, r8, #16
 800ea24:	bf18      	it	ne
 800ea26:	236a      	movne	r3, #106	; 0x6a
 800ea28:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800edd8 <_strtod_l+0x970>
 800ea2c:	9304      	str	r3, [sp, #16]
 800ea2e:	4650      	mov	r0, sl
 800ea30:	4659      	mov	r1, fp
 800ea32:	2300      	movs	r3, #0
 800ea34:	f018 0f01 	tst.w	r8, #1
 800ea38:	d004      	beq.n	800ea44 <_strtod_l+0x5dc>
 800ea3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ea3e:	f7f1 fdeb 	bl	8000618 <__aeabi_dmul>
 800ea42:	2301      	movs	r3, #1
 800ea44:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ea48:	f109 0908 	add.w	r9, r9, #8
 800ea4c:	d1f2      	bne.n	800ea34 <_strtod_l+0x5cc>
 800ea4e:	b10b      	cbz	r3, 800ea54 <_strtod_l+0x5ec>
 800ea50:	4682      	mov	sl, r0
 800ea52:	468b      	mov	fp, r1
 800ea54:	9b04      	ldr	r3, [sp, #16]
 800ea56:	b1c3      	cbz	r3, 800ea8a <_strtod_l+0x622>
 800ea58:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ea5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	4659      	mov	r1, fp
 800ea64:	dd11      	ble.n	800ea8a <_strtod_l+0x622>
 800ea66:	2b1f      	cmp	r3, #31
 800ea68:	f340 8124 	ble.w	800ecb4 <_strtod_l+0x84c>
 800ea6c:	2b34      	cmp	r3, #52	; 0x34
 800ea6e:	bfde      	ittt	le
 800ea70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ea74:	f04f 33ff 	movle.w	r3, #4294967295
 800ea78:	fa03 f202 	lslle.w	r2, r3, r2
 800ea7c:	f04f 0a00 	mov.w	sl, #0
 800ea80:	bfcc      	ite	gt
 800ea82:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ea86:	ea02 0b01 	andle.w	fp, r2, r1
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	4650      	mov	r0, sl
 800ea90:	4659      	mov	r1, fp
 800ea92:	f7f2 f829 	bl	8000ae8 <__aeabi_dcmpeq>
 800ea96:	2800      	cmp	r0, #0
 800ea98:	d1a2      	bne.n	800e9e0 <_strtod_l+0x578>
 800ea9a:	9b07      	ldr	r3, [sp, #28]
 800ea9c:	9300      	str	r3, [sp, #0]
 800ea9e:	9908      	ldr	r1, [sp, #32]
 800eaa0:	462b      	mov	r3, r5
 800eaa2:	463a      	mov	r2, r7
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	f002 f92f 	bl	8010d08 <__s2b>
 800eaaa:	9007      	str	r0, [sp, #28]
 800eaac:	2800      	cmp	r0, #0
 800eaae:	f43f af1f 	beq.w	800e8f0 <_strtod_l+0x488>
 800eab2:	9b05      	ldr	r3, [sp, #20]
 800eab4:	1b9e      	subs	r6, r3, r6
 800eab6:	9b06      	ldr	r3, [sp, #24]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	bfb4      	ite	lt
 800eabc:	4633      	movlt	r3, r6
 800eabe:	2300      	movge	r3, #0
 800eac0:	930c      	str	r3, [sp, #48]	; 0x30
 800eac2:	9b06      	ldr	r3, [sp, #24]
 800eac4:	2500      	movs	r5, #0
 800eac6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eaca:	9312      	str	r3, [sp, #72]	; 0x48
 800eacc:	462e      	mov	r6, r5
 800eace:	9b07      	ldr	r3, [sp, #28]
 800ead0:	4620      	mov	r0, r4
 800ead2:	6859      	ldr	r1, [r3, #4]
 800ead4:	f002 f870 	bl	8010bb8 <_Balloc>
 800ead8:	9005      	str	r0, [sp, #20]
 800eada:	2800      	cmp	r0, #0
 800eadc:	f43f af0c 	beq.w	800e8f8 <_strtod_l+0x490>
 800eae0:	9b07      	ldr	r3, [sp, #28]
 800eae2:	691a      	ldr	r2, [r3, #16]
 800eae4:	3202      	adds	r2, #2
 800eae6:	f103 010c 	add.w	r1, r3, #12
 800eaea:	0092      	lsls	r2, r2, #2
 800eaec:	300c      	adds	r0, #12
 800eaee:	f7fe fde9 	bl	800d6c4 <memcpy>
 800eaf2:	ec4b ab10 	vmov	d0, sl, fp
 800eaf6:	aa1a      	add	r2, sp, #104	; 0x68
 800eaf8:	a919      	add	r1, sp, #100	; 0x64
 800eafa:	4620      	mov	r0, r4
 800eafc:	f002 fc4a 	bl	8011394 <__d2b>
 800eb00:	ec4b ab18 	vmov	d8, sl, fp
 800eb04:	9018      	str	r0, [sp, #96]	; 0x60
 800eb06:	2800      	cmp	r0, #0
 800eb08:	f43f aef6 	beq.w	800e8f8 <_strtod_l+0x490>
 800eb0c:	2101      	movs	r1, #1
 800eb0e:	4620      	mov	r0, r4
 800eb10:	f002 f994 	bl	8010e3c <__i2b>
 800eb14:	4606      	mov	r6, r0
 800eb16:	2800      	cmp	r0, #0
 800eb18:	f43f aeee 	beq.w	800e8f8 <_strtod_l+0x490>
 800eb1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eb1e:	9904      	ldr	r1, [sp, #16]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	bfab      	itete	ge
 800eb24:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800eb26:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800eb28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800eb2a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800eb2e:	bfac      	ite	ge
 800eb30:	eb03 0902 	addge.w	r9, r3, r2
 800eb34:	1ad7      	sublt	r7, r2, r3
 800eb36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800eb38:	eba3 0801 	sub.w	r8, r3, r1
 800eb3c:	4490      	add	r8, r2
 800eb3e:	4ba1      	ldr	r3, [pc, #644]	; (800edc4 <_strtod_l+0x95c>)
 800eb40:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb44:	4598      	cmp	r8, r3
 800eb46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eb4a:	f280 80c7 	bge.w	800ecdc <_strtod_l+0x874>
 800eb4e:	eba3 0308 	sub.w	r3, r3, r8
 800eb52:	2b1f      	cmp	r3, #31
 800eb54:	eba2 0203 	sub.w	r2, r2, r3
 800eb58:	f04f 0101 	mov.w	r1, #1
 800eb5c:	f300 80b1 	bgt.w	800ecc2 <_strtod_l+0x85a>
 800eb60:	fa01 f303 	lsl.w	r3, r1, r3
 800eb64:	930d      	str	r3, [sp, #52]	; 0x34
 800eb66:	2300      	movs	r3, #0
 800eb68:	9308      	str	r3, [sp, #32]
 800eb6a:	eb09 0802 	add.w	r8, r9, r2
 800eb6e:	9b04      	ldr	r3, [sp, #16]
 800eb70:	45c1      	cmp	r9, r8
 800eb72:	4417      	add	r7, r2
 800eb74:	441f      	add	r7, r3
 800eb76:	464b      	mov	r3, r9
 800eb78:	bfa8      	it	ge
 800eb7a:	4643      	movge	r3, r8
 800eb7c:	42bb      	cmp	r3, r7
 800eb7e:	bfa8      	it	ge
 800eb80:	463b      	movge	r3, r7
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	bfc2      	ittt	gt
 800eb86:	eba8 0803 	subgt.w	r8, r8, r3
 800eb8a:	1aff      	subgt	r7, r7, r3
 800eb8c:	eba9 0903 	subgt.w	r9, r9, r3
 800eb90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	dd17      	ble.n	800ebc6 <_strtod_l+0x75e>
 800eb96:	4631      	mov	r1, r6
 800eb98:	461a      	mov	r2, r3
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f002 fa0e 	bl	8010fbc <__pow5mult>
 800eba0:	4606      	mov	r6, r0
 800eba2:	2800      	cmp	r0, #0
 800eba4:	f43f aea8 	beq.w	800e8f8 <_strtod_l+0x490>
 800eba8:	4601      	mov	r1, r0
 800ebaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ebac:	4620      	mov	r0, r4
 800ebae:	f002 f95b 	bl	8010e68 <__multiply>
 800ebb2:	900b      	str	r0, [sp, #44]	; 0x2c
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	f43f ae9f 	beq.w	800e8f8 <_strtod_l+0x490>
 800ebba:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	f002 f83b 	bl	8010c38 <_Bfree>
 800ebc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebc4:	9318      	str	r3, [sp, #96]	; 0x60
 800ebc6:	f1b8 0f00 	cmp.w	r8, #0
 800ebca:	f300 808c 	bgt.w	800ece6 <_strtod_l+0x87e>
 800ebce:	9b06      	ldr	r3, [sp, #24]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	dd08      	ble.n	800ebe6 <_strtod_l+0x77e>
 800ebd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ebd6:	9905      	ldr	r1, [sp, #20]
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f002 f9ef 	bl	8010fbc <__pow5mult>
 800ebde:	9005      	str	r0, [sp, #20]
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	f43f ae89 	beq.w	800e8f8 <_strtod_l+0x490>
 800ebe6:	2f00      	cmp	r7, #0
 800ebe8:	dd08      	ble.n	800ebfc <_strtod_l+0x794>
 800ebea:	9905      	ldr	r1, [sp, #20]
 800ebec:	463a      	mov	r2, r7
 800ebee:	4620      	mov	r0, r4
 800ebf0:	f002 fa3e 	bl	8011070 <__lshift>
 800ebf4:	9005      	str	r0, [sp, #20]
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	f43f ae7e 	beq.w	800e8f8 <_strtod_l+0x490>
 800ebfc:	f1b9 0f00 	cmp.w	r9, #0
 800ec00:	dd08      	ble.n	800ec14 <_strtod_l+0x7ac>
 800ec02:	4631      	mov	r1, r6
 800ec04:	464a      	mov	r2, r9
 800ec06:	4620      	mov	r0, r4
 800ec08:	f002 fa32 	bl	8011070 <__lshift>
 800ec0c:	4606      	mov	r6, r0
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	f43f ae72 	beq.w	800e8f8 <_strtod_l+0x490>
 800ec14:	9a05      	ldr	r2, [sp, #20]
 800ec16:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ec18:	4620      	mov	r0, r4
 800ec1a:	f002 fab5 	bl	8011188 <__mdiff>
 800ec1e:	4605      	mov	r5, r0
 800ec20:	2800      	cmp	r0, #0
 800ec22:	f43f ae69 	beq.w	800e8f8 <_strtod_l+0x490>
 800ec26:	68c3      	ldr	r3, [r0, #12]
 800ec28:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	60c3      	str	r3, [r0, #12]
 800ec2e:	4631      	mov	r1, r6
 800ec30:	f002 fa8e 	bl	8011150 <__mcmp>
 800ec34:	2800      	cmp	r0, #0
 800ec36:	da60      	bge.n	800ecfa <_strtod_l+0x892>
 800ec38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec3a:	ea53 030a 	orrs.w	r3, r3, sl
 800ec3e:	f040 8082 	bne.w	800ed46 <_strtod_l+0x8de>
 800ec42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d17d      	bne.n	800ed46 <_strtod_l+0x8de>
 800ec4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ec4e:	0d1b      	lsrs	r3, r3, #20
 800ec50:	051b      	lsls	r3, r3, #20
 800ec52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ec56:	d976      	bls.n	800ed46 <_strtod_l+0x8de>
 800ec58:	696b      	ldr	r3, [r5, #20]
 800ec5a:	b913      	cbnz	r3, 800ec62 <_strtod_l+0x7fa>
 800ec5c:	692b      	ldr	r3, [r5, #16]
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	dd71      	ble.n	800ed46 <_strtod_l+0x8de>
 800ec62:	4629      	mov	r1, r5
 800ec64:	2201      	movs	r2, #1
 800ec66:	4620      	mov	r0, r4
 800ec68:	f002 fa02 	bl	8011070 <__lshift>
 800ec6c:	4631      	mov	r1, r6
 800ec6e:	4605      	mov	r5, r0
 800ec70:	f002 fa6e 	bl	8011150 <__mcmp>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	dd66      	ble.n	800ed46 <_strtod_l+0x8de>
 800ec78:	9904      	ldr	r1, [sp, #16]
 800ec7a:	4a53      	ldr	r2, [pc, #332]	; (800edc8 <_strtod_l+0x960>)
 800ec7c:	465b      	mov	r3, fp
 800ec7e:	2900      	cmp	r1, #0
 800ec80:	f000 8081 	beq.w	800ed86 <_strtod_l+0x91e>
 800ec84:	ea02 010b 	and.w	r1, r2, fp
 800ec88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ec8c:	dc7b      	bgt.n	800ed86 <_strtod_l+0x91e>
 800ec8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ec92:	f77f aea9 	ble.w	800e9e8 <_strtod_l+0x580>
 800ec96:	4b4d      	ldr	r3, [pc, #308]	; (800edcc <_strtod_l+0x964>)
 800ec98:	4650      	mov	r0, sl
 800ec9a:	4659      	mov	r1, fp
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	f7f1 fcbb 	bl	8000618 <__aeabi_dmul>
 800eca2:	460b      	mov	r3, r1
 800eca4:	4303      	orrs	r3, r0
 800eca6:	bf08      	it	eq
 800eca8:	2322      	moveq	r3, #34	; 0x22
 800ecaa:	4682      	mov	sl, r0
 800ecac:	468b      	mov	fp, r1
 800ecae:	bf08      	it	eq
 800ecb0:	6023      	streq	r3, [r4, #0]
 800ecb2:	e62b      	b.n	800e90c <_strtod_l+0x4a4>
 800ecb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ecb8:	fa02 f303 	lsl.w	r3, r2, r3
 800ecbc:	ea03 0a0a 	and.w	sl, r3, sl
 800ecc0:	e6e3      	b.n	800ea8a <_strtod_l+0x622>
 800ecc2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ecc6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ecca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ecce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ecd2:	fa01 f308 	lsl.w	r3, r1, r8
 800ecd6:	9308      	str	r3, [sp, #32]
 800ecd8:	910d      	str	r1, [sp, #52]	; 0x34
 800ecda:	e746      	b.n	800eb6a <_strtod_l+0x702>
 800ecdc:	2300      	movs	r3, #0
 800ecde:	9308      	str	r3, [sp, #32]
 800ece0:	2301      	movs	r3, #1
 800ece2:	930d      	str	r3, [sp, #52]	; 0x34
 800ece4:	e741      	b.n	800eb6a <_strtod_l+0x702>
 800ece6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ece8:	4642      	mov	r2, r8
 800ecea:	4620      	mov	r0, r4
 800ecec:	f002 f9c0 	bl	8011070 <__lshift>
 800ecf0:	9018      	str	r0, [sp, #96]	; 0x60
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	f47f af6b 	bne.w	800ebce <_strtod_l+0x766>
 800ecf8:	e5fe      	b.n	800e8f8 <_strtod_l+0x490>
 800ecfa:	465f      	mov	r7, fp
 800ecfc:	d16e      	bne.n	800eddc <_strtod_l+0x974>
 800ecfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ed00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed04:	b342      	cbz	r2, 800ed58 <_strtod_l+0x8f0>
 800ed06:	4a32      	ldr	r2, [pc, #200]	; (800edd0 <_strtod_l+0x968>)
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	d128      	bne.n	800ed5e <_strtod_l+0x8f6>
 800ed0c:	9b04      	ldr	r3, [sp, #16]
 800ed0e:	4651      	mov	r1, sl
 800ed10:	b1eb      	cbz	r3, 800ed4e <_strtod_l+0x8e6>
 800ed12:	4b2d      	ldr	r3, [pc, #180]	; (800edc8 <_strtod_l+0x960>)
 800ed14:	403b      	ands	r3, r7
 800ed16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ed1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed1e:	d819      	bhi.n	800ed54 <_strtod_l+0x8ec>
 800ed20:	0d1b      	lsrs	r3, r3, #20
 800ed22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ed26:	fa02 f303 	lsl.w	r3, r2, r3
 800ed2a:	4299      	cmp	r1, r3
 800ed2c:	d117      	bne.n	800ed5e <_strtod_l+0x8f6>
 800ed2e:	4b29      	ldr	r3, [pc, #164]	; (800edd4 <_strtod_l+0x96c>)
 800ed30:	429f      	cmp	r7, r3
 800ed32:	d102      	bne.n	800ed3a <_strtod_l+0x8d2>
 800ed34:	3101      	adds	r1, #1
 800ed36:	f43f addf 	beq.w	800e8f8 <_strtod_l+0x490>
 800ed3a:	4b23      	ldr	r3, [pc, #140]	; (800edc8 <_strtod_l+0x960>)
 800ed3c:	403b      	ands	r3, r7
 800ed3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ed42:	f04f 0a00 	mov.w	sl, #0
 800ed46:	9b04      	ldr	r3, [sp, #16]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d1a4      	bne.n	800ec96 <_strtod_l+0x82e>
 800ed4c:	e5de      	b.n	800e90c <_strtod_l+0x4a4>
 800ed4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed52:	e7ea      	b.n	800ed2a <_strtod_l+0x8c2>
 800ed54:	4613      	mov	r3, r2
 800ed56:	e7e8      	b.n	800ed2a <_strtod_l+0x8c2>
 800ed58:	ea53 030a 	orrs.w	r3, r3, sl
 800ed5c:	d08c      	beq.n	800ec78 <_strtod_l+0x810>
 800ed5e:	9b08      	ldr	r3, [sp, #32]
 800ed60:	b1db      	cbz	r3, 800ed9a <_strtod_l+0x932>
 800ed62:	423b      	tst	r3, r7
 800ed64:	d0ef      	beq.n	800ed46 <_strtod_l+0x8de>
 800ed66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed68:	9a04      	ldr	r2, [sp, #16]
 800ed6a:	4650      	mov	r0, sl
 800ed6c:	4659      	mov	r1, fp
 800ed6e:	b1c3      	cbz	r3, 800eda2 <_strtod_l+0x93a>
 800ed70:	f7ff fb5e 	bl	800e430 <sulp>
 800ed74:	4602      	mov	r2, r0
 800ed76:	460b      	mov	r3, r1
 800ed78:	ec51 0b18 	vmov	r0, r1, d8
 800ed7c:	f7f1 fa96 	bl	80002ac <__adddf3>
 800ed80:	4682      	mov	sl, r0
 800ed82:	468b      	mov	fp, r1
 800ed84:	e7df      	b.n	800ed46 <_strtod_l+0x8de>
 800ed86:	4013      	ands	r3, r2
 800ed88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ed8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ed90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ed94:	f04f 3aff 	mov.w	sl, #4294967295
 800ed98:	e7d5      	b.n	800ed46 <_strtod_l+0x8de>
 800ed9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed9c:	ea13 0f0a 	tst.w	r3, sl
 800eda0:	e7e0      	b.n	800ed64 <_strtod_l+0x8fc>
 800eda2:	f7ff fb45 	bl	800e430 <sulp>
 800eda6:	4602      	mov	r2, r0
 800eda8:	460b      	mov	r3, r1
 800edaa:	ec51 0b18 	vmov	r0, r1, d8
 800edae:	f7f1 fa7b 	bl	80002a8 <__aeabi_dsub>
 800edb2:	2200      	movs	r2, #0
 800edb4:	2300      	movs	r3, #0
 800edb6:	4682      	mov	sl, r0
 800edb8:	468b      	mov	fp, r1
 800edba:	f7f1 fe95 	bl	8000ae8 <__aeabi_dcmpeq>
 800edbe:	2800      	cmp	r0, #0
 800edc0:	d0c1      	beq.n	800ed46 <_strtod_l+0x8de>
 800edc2:	e611      	b.n	800e9e8 <_strtod_l+0x580>
 800edc4:	fffffc02 	.word	0xfffffc02
 800edc8:	7ff00000 	.word	0x7ff00000
 800edcc:	39500000 	.word	0x39500000
 800edd0:	000fffff 	.word	0x000fffff
 800edd4:	7fefffff 	.word	0x7fefffff
 800edd8:	080127e0 	.word	0x080127e0
 800eddc:	4631      	mov	r1, r6
 800edde:	4628      	mov	r0, r5
 800ede0:	f002 fb34 	bl	801144c <__ratio>
 800ede4:	ec59 8b10 	vmov	r8, r9, d0
 800ede8:	ee10 0a10 	vmov	r0, s0
 800edec:	2200      	movs	r2, #0
 800edee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800edf2:	4649      	mov	r1, r9
 800edf4:	f7f1 fe8c 	bl	8000b10 <__aeabi_dcmple>
 800edf8:	2800      	cmp	r0, #0
 800edfa:	d07a      	beq.n	800eef2 <_strtod_l+0xa8a>
 800edfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d04a      	beq.n	800ee98 <_strtod_l+0xa30>
 800ee02:	4b95      	ldr	r3, [pc, #596]	; (800f058 <_strtod_l+0xbf0>)
 800ee04:	2200      	movs	r2, #0
 800ee06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ee0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f058 <_strtod_l+0xbf0>
 800ee0e:	f04f 0800 	mov.w	r8, #0
 800ee12:	4b92      	ldr	r3, [pc, #584]	; (800f05c <_strtod_l+0xbf4>)
 800ee14:	403b      	ands	r3, r7
 800ee16:	930d      	str	r3, [sp, #52]	; 0x34
 800ee18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee1a:	4b91      	ldr	r3, [pc, #580]	; (800f060 <_strtod_l+0xbf8>)
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	f040 80b0 	bne.w	800ef82 <_strtod_l+0xb1a>
 800ee22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ee26:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ee2a:	ec4b ab10 	vmov	d0, sl, fp
 800ee2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ee32:	f002 fa33 	bl	801129c <__ulp>
 800ee36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ee3a:	ec53 2b10 	vmov	r2, r3, d0
 800ee3e:	f7f1 fbeb 	bl	8000618 <__aeabi_dmul>
 800ee42:	4652      	mov	r2, sl
 800ee44:	465b      	mov	r3, fp
 800ee46:	f7f1 fa31 	bl	80002ac <__adddf3>
 800ee4a:	460b      	mov	r3, r1
 800ee4c:	4983      	ldr	r1, [pc, #524]	; (800f05c <_strtod_l+0xbf4>)
 800ee4e:	4a85      	ldr	r2, [pc, #532]	; (800f064 <_strtod_l+0xbfc>)
 800ee50:	4019      	ands	r1, r3
 800ee52:	4291      	cmp	r1, r2
 800ee54:	4682      	mov	sl, r0
 800ee56:	d960      	bls.n	800ef1a <_strtod_l+0xab2>
 800ee58:	ee18 3a90 	vmov	r3, s17
 800ee5c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ee60:	4293      	cmp	r3, r2
 800ee62:	d104      	bne.n	800ee6e <_strtod_l+0xa06>
 800ee64:	ee18 3a10 	vmov	r3, s16
 800ee68:	3301      	adds	r3, #1
 800ee6a:	f43f ad45 	beq.w	800e8f8 <_strtod_l+0x490>
 800ee6e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f070 <_strtod_l+0xc08>
 800ee72:	f04f 3aff 	mov.w	sl, #4294967295
 800ee76:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f001 fedd 	bl	8010c38 <_Bfree>
 800ee7e:	9905      	ldr	r1, [sp, #20]
 800ee80:	4620      	mov	r0, r4
 800ee82:	f001 fed9 	bl	8010c38 <_Bfree>
 800ee86:	4631      	mov	r1, r6
 800ee88:	4620      	mov	r0, r4
 800ee8a:	f001 fed5 	bl	8010c38 <_Bfree>
 800ee8e:	4629      	mov	r1, r5
 800ee90:	4620      	mov	r0, r4
 800ee92:	f001 fed1 	bl	8010c38 <_Bfree>
 800ee96:	e61a      	b.n	800eace <_strtod_l+0x666>
 800ee98:	f1ba 0f00 	cmp.w	sl, #0
 800ee9c:	d11b      	bne.n	800eed6 <_strtod_l+0xa6e>
 800ee9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eea2:	b9f3      	cbnz	r3, 800eee2 <_strtod_l+0xa7a>
 800eea4:	4b6c      	ldr	r3, [pc, #432]	; (800f058 <_strtod_l+0xbf0>)
 800eea6:	2200      	movs	r2, #0
 800eea8:	4640      	mov	r0, r8
 800eeaa:	4649      	mov	r1, r9
 800eeac:	f7f1 fe26 	bl	8000afc <__aeabi_dcmplt>
 800eeb0:	b9d0      	cbnz	r0, 800eee8 <_strtod_l+0xa80>
 800eeb2:	4640      	mov	r0, r8
 800eeb4:	4649      	mov	r1, r9
 800eeb6:	4b6c      	ldr	r3, [pc, #432]	; (800f068 <_strtod_l+0xc00>)
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f7f1 fbad 	bl	8000618 <__aeabi_dmul>
 800eebe:	4680      	mov	r8, r0
 800eec0:	4689      	mov	r9, r1
 800eec2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800eec6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800eeca:	9315      	str	r3, [sp, #84]	; 0x54
 800eecc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800eed0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eed4:	e79d      	b.n	800ee12 <_strtod_l+0x9aa>
 800eed6:	f1ba 0f01 	cmp.w	sl, #1
 800eeda:	d102      	bne.n	800eee2 <_strtod_l+0xa7a>
 800eedc:	2f00      	cmp	r7, #0
 800eede:	f43f ad83 	beq.w	800e9e8 <_strtod_l+0x580>
 800eee2:	4b62      	ldr	r3, [pc, #392]	; (800f06c <_strtod_l+0xc04>)
 800eee4:	2200      	movs	r2, #0
 800eee6:	e78e      	b.n	800ee06 <_strtod_l+0x99e>
 800eee8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f068 <_strtod_l+0xc00>
 800eeec:	f04f 0800 	mov.w	r8, #0
 800eef0:	e7e7      	b.n	800eec2 <_strtod_l+0xa5a>
 800eef2:	4b5d      	ldr	r3, [pc, #372]	; (800f068 <_strtod_l+0xc00>)
 800eef4:	4640      	mov	r0, r8
 800eef6:	4649      	mov	r1, r9
 800eef8:	2200      	movs	r2, #0
 800eefa:	f7f1 fb8d 	bl	8000618 <__aeabi_dmul>
 800eefe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef00:	4680      	mov	r8, r0
 800ef02:	4689      	mov	r9, r1
 800ef04:	b933      	cbnz	r3, 800ef14 <_strtod_l+0xaac>
 800ef06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef0a:	900e      	str	r0, [sp, #56]	; 0x38
 800ef0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ef12:	e7dd      	b.n	800eed0 <_strtod_l+0xa68>
 800ef14:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ef18:	e7f9      	b.n	800ef0e <_strtod_l+0xaa6>
 800ef1a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ef1e:	9b04      	ldr	r3, [sp, #16]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d1a8      	bne.n	800ee76 <_strtod_l+0xa0e>
 800ef24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ef28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ef2a:	0d1b      	lsrs	r3, r3, #20
 800ef2c:	051b      	lsls	r3, r3, #20
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d1a1      	bne.n	800ee76 <_strtod_l+0xa0e>
 800ef32:	4640      	mov	r0, r8
 800ef34:	4649      	mov	r1, r9
 800ef36:	f7f1 fecf 	bl	8000cd8 <__aeabi_d2lz>
 800ef3a:	f7f1 fb3f 	bl	80005bc <__aeabi_l2d>
 800ef3e:	4602      	mov	r2, r0
 800ef40:	460b      	mov	r3, r1
 800ef42:	4640      	mov	r0, r8
 800ef44:	4649      	mov	r1, r9
 800ef46:	f7f1 f9af 	bl	80002a8 <__aeabi_dsub>
 800ef4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef50:	ea43 030a 	orr.w	r3, r3, sl
 800ef54:	4313      	orrs	r3, r2
 800ef56:	4680      	mov	r8, r0
 800ef58:	4689      	mov	r9, r1
 800ef5a:	d055      	beq.n	800f008 <_strtod_l+0xba0>
 800ef5c:	a336      	add	r3, pc, #216	; (adr r3, 800f038 <_strtod_l+0xbd0>)
 800ef5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef62:	f7f1 fdcb 	bl	8000afc <__aeabi_dcmplt>
 800ef66:	2800      	cmp	r0, #0
 800ef68:	f47f acd0 	bne.w	800e90c <_strtod_l+0x4a4>
 800ef6c:	a334      	add	r3, pc, #208	; (adr r3, 800f040 <_strtod_l+0xbd8>)
 800ef6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef72:	4640      	mov	r0, r8
 800ef74:	4649      	mov	r1, r9
 800ef76:	f7f1 fddf 	bl	8000b38 <__aeabi_dcmpgt>
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	f43f af7b 	beq.w	800ee76 <_strtod_l+0xa0e>
 800ef80:	e4c4      	b.n	800e90c <_strtod_l+0x4a4>
 800ef82:	9b04      	ldr	r3, [sp, #16]
 800ef84:	b333      	cbz	r3, 800efd4 <_strtod_l+0xb6c>
 800ef86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef88:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ef8c:	d822      	bhi.n	800efd4 <_strtod_l+0xb6c>
 800ef8e:	a32e      	add	r3, pc, #184	; (adr r3, 800f048 <_strtod_l+0xbe0>)
 800ef90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef94:	4640      	mov	r0, r8
 800ef96:	4649      	mov	r1, r9
 800ef98:	f7f1 fdba 	bl	8000b10 <__aeabi_dcmple>
 800ef9c:	b1a0      	cbz	r0, 800efc8 <_strtod_l+0xb60>
 800ef9e:	4649      	mov	r1, r9
 800efa0:	4640      	mov	r0, r8
 800efa2:	f7f1 fe11 	bl	8000bc8 <__aeabi_d2uiz>
 800efa6:	2801      	cmp	r0, #1
 800efa8:	bf38      	it	cc
 800efaa:	2001      	movcc	r0, #1
 800efac:	f7f1 faba 	bl	8000524 <__aeabi_ui2d>
 800efb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efb2:	4680      	mov	r8, r0
 800efb4:	4689      	mov	r9, r1
 800efb6:	bb23      	cbnz	r3, 800f002 <_strtod_l+0xb9a>
 800efb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efbc:	9010      	str	r0, [sp, #64]	; 0x40
 800efbe:	9311      	str	r3, [sp, #68]	; 0x44
 800efc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800efc4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800efc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800efcc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800efd0:	1a9b      	subs	r3, r3, r2
 800efd2:	9309      	str	r3, [sp, #36]	; 0x24
 800efd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800efd8:	eeb0 0a48 	vmov.f32	s0, s16
 800efdc:	eef0 0a68 	vmov.f32	s1, s17
 800efe0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800efe4:	f002 f95a 	bl	801129c <__ulp>
 800efe8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800efec:	ec53 2b10 	vmov	r2, r3, d0
 800eff0:	f7f1 fb12 	bl	8000618 <__aeabi_dmul>
 800eff4:	ec53 2b18 	vmov	r2, r3, d8
 800eff8:	f7f1 f958 	bl	80002ac <__adddf3>
 800effc:	4682      	mov	sl, r0
 800effe:	468b      	mov	fp, r1
 800f000:	e78d      	b.n	800ef1e <_strtod_l+0xab6>
 800f002:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f006:	e7db      	b.n	800efc0 <_strtod_l+0xb58>
 800f008:	a311      	add	r3, pc, #68	; (adr r3, 800f050 <_strtod_l+0xbe8>)
 800f00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00e:	f7f1 fd75 	bl	8000afc <__aeabi_dcmplt>
 800f012:	e7b2      	b.n	800ef7a <_strtod_l+0xb12>
 800f014:	2300      	movs	r3, #0
 800f016:	930a      	str	r3, [sp, #40]	; 0x28
 800f018:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f01a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f01c:	6013      	str	r3, [r2, #0]
 800f01e:	f7ff ba6b 	b.w	800e4f8 <_strtod_l+0x90>
 800f022:	2a65      	cmp	r2, #101	; 0x65
 800f024:	f43f ab5f 	beq.w	800e6e6 <_strtod_l+0x27e>
 800f028:	2a45      	cmp	r2, #69	; 0x45
 800f02a:	f43f ab5c 	beq.w	800e6e6 <_strtod_l+0x27e>
 800f02e:	2301      	movs	r3, #1
 800f030:	f7ff bb94 	b.w	800e75c <_strtod_l+0x2f4>
 800f034:	f3af 8000 	nop.w
 800f038:	94a03595 	.word	0x94a03595
 800f03c:	3fdfffff 	.word	0x3fdfffff
 800f040:	35afe535 	.word	0x35afe535
 800f044:	3fe00000 	.word	0x3fe00000
 800f048:	ffc00000 	.word	0xffc00000
 800f04c:	41dfffff 	.word	0x41dfffff
 800f050:	94a03595 	.word	0x94a03595
 800f054:	3fcfffff 	.word	0x3fcfffff
 800f058:	3ff00000 	.word	0x3ff00000
 800f05c:	7ff00000 	.word	0x7ff00000
 800f060:	7fe00000 	.word	0x7fe00000
 800f064:	7c9fffff 	.word	0x7c9fffff
 800f068:	3fe00000 	.word	0x3fe00000
 800f06c:	bff00000 	.word	0xbff00000
 800f070:	7fefffff 	.word	0x7fefffff

0800f074 <_strtod_r>:
 800f074:	4b01      	ldr	r3, [pc, #4]	; (800f07c <_strtod_r+0x8>)
 800f076:	f7ff b9f7 	b.w	800e468 <_strtod_l>
 800f07a:	bf00      	nop
 800f07c:	2000008c 	.word	0x2000008c

0800f080 <_strtol_l.constprop.0>:
 800f080:	2b01      	cmp	r3, #1
 800f082:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f086:	d001      	beq.n	800f08c <_strtol_l.constprop.0+0xc>
 800f088:	2b24      	cmp	r3, #36	; 0x24
 800f08a:	d906      	bls.n	800f09a <_strtol_l.constprop.0+0x1a>
 800f08c:	f7fe faf0 	bl	800d670 <__errno>
 800f090:	2316      	movs	r3, #22
 800f092:	6003      	str	r3, [r0, #0]
 800f094:	2000      	movs	r0, #0
 800f096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f09a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f180 <_strtol_l.constprop.0+0x100>
 800f09e:	460d      	mov	r5, r1
 800f0a0:	462e      	mov	r6, r5
 800f0a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f0aa:	f017 0708 	ands.w	r7, r7, #8
 800f0ae:	d1f7      	bne.n	800f0a0 <_strtol_l.constprop.0+0x20>
 800f0b0:	2c2d      	cmp	r4, #45	; 0x2d
 800f0b2:	d132      	bne.n	800f11a <_strtol_l.constprop.0+0x9a>
 800f0b4:	782c      	ldrb	r4, [r5, #0]
 800f0b6:	2701      	movs	r7, #1
 800f0b8:	1cb5      	adds	r5, r6, #2
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d05b      	beq.n	800f176 <_strtol_l.constprop.0+0xf6>
 800f0be:	2b10      	cmp	r3, #16
 800f0c0:	d109      	bne.n	800f0d6 <_strtol_l.constprop.0+0x56>
 800f0c2:	2c30      	cmp	r4, #48	; 0x30
 800f0c4:	d107      	bne.n	800f0d6 <_strtol_l.constprop.0+0x56>
 800f0c6:	782c      	ldrb	r4, [r5, #0]
 800f0c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f0cc:	2c58      	cmp	r4, #88	; 0x58
 800f0ce:	d14d      	bne.n	800f16c <_strtol_l.constprop.0+0xec>
 800f0d0:	786c      	ldrb	r4, [r5, #1]
 800f0d2:	2310      	movs	r3, #16
 800f0d4:	3502      	adds	r5, #2
 800f0d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f0da:	f108 38ff 	add.w	r8, r8, #4294967295
 800f0de:	f04f 0c00 	mov.w	ip, #0
 800f0e2:	fbb8 f9f3 	udiv	r9, r8, r3
 800f0e6:	4666      	mov	r6, ip
 800f0e8:	fb03 8a19 	mls	sl, r3, r9, r8
 800f0ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f0f0:	f1be 0f09 	cmp.w	lr, #9
 800f0f4:	d816      	bhi.n	800f124 <_strtol_l.constprop.0+0xa4>
 800f0f6:	4674      	mov	r4, lr
 800f0f8:	42a3      	cmp	r3, r4
 800f0fa:	dd24      	ble.n	800f146 <_strtol_l.constprop.0+0xc6>
 800f0fc:	f1bc 0f00 	cmp.w	ip, #0
 800f100:	db1e      	blt.n	800f140 <_strtol_l.constprop.0+0xc0>
 800f102:	45b1      	cmp	r9, r6
 800f104:	d31c      	bcc.n	800f140 <_strtol_l.constprop.0+0xc0>
 800f106:	d101      	bne.n	800f10c <_strtol_l.constprop.0+0x8c>
 800f108:	45a2      	cmp	sl, r4
 800f10a:	db19      	blt.n	800f140 <_strtol_l.constprop.0+0xc0>
 800f10c:	fb06 4603 	mla	r6, r6, r3, r4
 800f110:	f04f 0c01 	mov.w	ip, #1
 800f114:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f118:	e7e8      	b.n	800f0ec <_strtol_l.constprop.0+0x6c>
 800f11a:	2c2b      	cmp	r4, #43	; 0x2b
 800f11c:	bf04      	itt	eq
 800f11e:	782c      	ldrbeq	r4, [r5, #0]
 800f120:	1cb5      	addeq	r5, r6, #2
 800f122:	e7ca      	b.n	800f0ba <_strtol_l.constprop.0+0x3a>
 800f124:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f128:	f1be 0f19 	cmp.w	lr, #25
 800f12c:	d801      	bhi.n	800f132 <_strtol_l.constprop.0+0xb2>
 800f12e:	3c37      	subs	r4, #55	; 0x37
 800f130:	e7e2      	b.n	800f0f8 <_strtol_l.constprop.0+0x78>
 800f132:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f136:	f1be 0f19 	cmp.w	lr, #25
 800f13a:	d804      	bhi.n	800f146 <_strtol_l.constprop.0+0xc6>
 800f13c:	3c57      	subs	r4, #87	; 0x57
 800f13e:	e7db      	b.n	800f0f8 <_strtol_l.constprop.0+0x78>
 800f140:	f04f 3cff 	mov.w	ip, #4294967295
 800f144:	e7e6      	b.n	800f114 <_strtol_l.constprop.0+0x94>
 800f146:	f1bc 0f00 	cmp.w	ip, #0
 800f14a:	da05      	bge.n	800f158 <_strtol_l.constprop.0+0xd8>
 800f14c:	2322      	movs	r3, #34	; 0x22
 800f14e:	6003      	str	r3, [r0, #0]
 800f150:	4646      	mov	r6, r8
 800f152:	b942      	cbnz	r2, 800f166 <_strtol_l.constprop.0+0xe6>
 800f154:	4630      	mov	r0, r6
 800f156:	e79e      	b.n	800f096 <_strtol_l.constprop.0+0x16>
 800f158:	b107      	cbz	r7, 800f15c <_strtol_l.constprop.0+0xdc>
 800f15a:	4276      	negs	r6, r6
 800f15c:	2a00      	cmp	r2, #0
 800f15e:	d0f9      	beq.n	800f154 <_strtol_l.constprop.0+0xd4>
 800f160:	f1bc 0f00 	cmp.w	ip, #0
 800f164:	d000      	beq.n	800f168 <_strtol_l.constprop.0+0xe8>
 800f166:	1e69      	subs	r1, r5, #1
 800f168:	6011      	str	r1, [r2, #0]
 800f16a:	e7f3      	b.n	800f154 <_strtol_l.constprop.0+0xd4>
 800f16c:	2430      	movs	r4, #48	; 0x30
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d1b1      	bne.n	800f0d6 <_strtol_l.constprop.0+0x56>
 800f172:	2308      	movs	r3, #8
 800f174:	e7af      	b.n	800f0d6 <_strtol_l.constprop.0+0x56>
 800f176:	2c30      	cmp	r4, #48	; 0x30
 800f178:	d0a5      	beq.n	800f0c6 <_strtol_l.constprop.0+0x46>
 800f17a:	230a      	movs	r3, #10
 800f17c:	e7ab      	b.n	800f0d6 <_strtol_l.constprop.0+0x56>
 800f17e:	bf00      	nop
 800f180:	08012845 	.word	0x08012845

0800f184 <_strtol_r>:
 800f184:	f7ff bf7c 	b.w	800f080 <_strtol_l.constprop.0>

0800f188 <__swbuf_r>:
 800f188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f18a:	460e      	mov	r6, r1
 800f18c:	4614      	mov	r4, r2
 800f18e:	4605      	mov	r5, r0
 800f190:	b118      	cbz	r0, 800f19a <__swbuf_r+0x12>
 800f192:	6983      	ldr	r3, [r0, #24]
 800f194:	b90b      	cbnz	r3, 800f19a <__swbuf_r+0x12>
 800f196:	f001 f86b 	bl	8010270 <__sinit>
 800f19a:	4b21      	ldr	r3, [pc, #132]	; (800f220 <__swbuf_r+0x98>)
 800f19c:	429c      	cmp	r4, r3
 800f19e:	d12b      	bne.n	800f1f8 <__swbuf_r+0x70>
 800f1a0:	686c      	ldr	r4, [r5, #4]
 800f1a2:	69a3      	ldr	r3, [r4, #24]
 800f1a4:	60a3      	str	r3, [r4, #8]
 800f1a6:	89a3      	ldrh	r3, [r4, #12]
 800f1a8:	071a      	lsls	r2, r3, #28
 800f1aa:	d52f      	bpl.n	800f20c <__swbuf_r+0x84>
 800f1ac:	6923      	ldr	r3, [r4, #16]
 800f1ae:	b36b      	cbz	r3, 800f20c <__swbuf_r+0x84>
 800f1b0:	6923      	ldr	r3, [r4, #16]
 800f1b2:	6820      	ldr	r0, [r4, #0]
 800f1b4:	1ac0      	subs	r0, r0, r3
 800f1b6:	6963      	ldr	r3, [r4, #20]
 800f1b8:	b2f6      	uxtb	r6, r6
 800f1ba:	4283      	cmp	r3, r0
 800f1bc:	4637      	mov	r7, r6
 800f1be:	dc04      	bgt.n	800f1ca <__swbuf_r+0x42>
 800f1c0:	4621      	mov	r1, r4
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	f000 ffc0 	bl	8010148 <_fflush_r>
 800f1c8:	bb30      	cbnz	r0, 800f218 <__swbuf_r+0x90>
 800f1ca:	68a3      	ldr	r3, [r4, #8]
 800f1cc:	3b01      	subs	r3, #1
 800f1ce:	60a3      	str	r3, [r4, #8]
 800f1d0:	6823      	ldr	r3, [r4, #0]
 800f1d2:	1c5a      	adds	r2, r3, #1
 800f1d4:	6022      	str	r2, [r4, #0]
 800f1d6:	701e      	strb	r6, [r3, #0]
 800f1d8:	6963      	ldr	r3, [r4, #20]
 800f1da:	3001      	adds	r0, #1
 800f1dc:	4283      	cmp	r3, r0
 800f1de:	d004      	beq.n	800f1ea <__swbuf_r+0x62>
 800f1e0:	89a3      	ldrh	r3, [r4, #12]
 800f1e2:	07db      	lsls	r3, r3, #31
 800f1e4:	d506      	bpl.n	800f1f4 <__swbuf_r+0x6c>
 800f1e6:	2e0a      	cmp	r6, #10
 800f1e8:	d104      	bne.n	800f1f4 <__swbuf_r+0x6c>
 800f1ea:	4621      	mov	r1, r4
 800f1ec:	4628      	mov	r0, r5
 800f1ee:	f000 ffab 	bl	8010148 <_fflush_r>
 800f1f2:	b988      	cbnz	r0, 800f218 <__swbuf_r+0x90>
 800f1f4:	4638      	mov	r0, r7
 800f1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1f8:	4b0a      	ldr	r3, [pc, #40]	; (800f224 <__swbuf_r+0x9c>)
 800f1fa:	429c      	cmp	r4, r3
 800f1fc:	d101      	bne.n	800f202 <__swbuf_r+0x7a>
 800f1fe:	68ac      	ldr	r4, [r5, #8]
 800f200:	e7cf      	b.n	800f1a2 <__swbuf_r+0x1a>
 800f202:	4b09      	ldr	r3, [pc, #36]	; (800f228 <__swbuf_r+0xa0>)
 800f204:	429c      	cmp	r4, r3
 800f206:	bf08      	it	eq
 800f208:	68ec      	ldreq	r4, [r5, #12]
 800f20a:	e7ca      	b.n	800f1a2 <__swbuf_r+0x1a>
 800f20c:	4621      	mov	r1, r4
 800f20e:	4628      	mov	r0, r5
 800f210:	f000 f80c 	bl	800f22c <__swsetup_r>
 800f214:	2800      	cmp	r0, #0
 800f216:	d0cb      	beq.n	800f1b0 <__swbuf_r+0x28>
 800f218:	f04f 37ff 	mov.w	r7, #4294967295
 800f21c:	e7ea      	b.n	800f1f4 <__swbuf_r+0x6c>
 800f21e:	bf00      	nop
 800f220:	080129f8 	.word	0x080129f8
 800f224:	08012a18 	.word	0x08012a18
 800f228:	080129d8 	.word	0x080129d8

0800f22c <__swsetup_r>:
 800f22c:	4b32      	ldr	r3, [pc, #200]	; (800f2f8 <__swsetup_r+0xcc>)
 800f22e:	b570      	push	{r4, r5, r6, lr}
 800f230:	681d      	ldr	r5, [r3, #0]
 800f232:	4606      	mov	r6, r0
 800f234:	460c      	mov	r4, r1
 800f236:	b125      	cbz	r5, 800f242 <__swsetup_r+0x16>
 800f238:	69ab      	ldr	r3, [r5, #24]
 800f23a:	b913      	cbnz	r3, 800f242 <__swsetup_r+0x16>
 800f23c:	4628      	mov	r0, r5
 800f23e:	f001 f817 	bl	8010270 <__sinit>
 800f242:	4b2e      	ldr	r3, [pc, #184]	; (800f2fc <__swsetup_r+0xd0>)
 800f244:	429c      	cmp	r4, r3
 800f246:	d10f      	bne.n	800f268 <__swsetup_r+0x3c>
 800f248:	686c      	ldr	r4, [r5, #4]
 800f24a:	89a3      	ldrh	r3, [r4, #12]
 800f24c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f250:	0719      	lsls	r1, r3, #28
 800f252:	d42c      	bmi.n	800f2ae <__swsetup_r+0x82>
 800f254:	06dd      	lsls	r5, r3, #27
 800f256:	d411      	bmi.n	800f27c <__swsetup_r+0x50>
 800f258:	2309      	movs	r3, #9
 800f25a:	6033      	str	r3, [r6, #0]
 800f25c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f260:	81a3      	strh	r3, [r4, #12]
 800f262:	f04f 30ff 	mov.w	r0, #4294967295
 800f266:	e03e      	b.n	800f2e6 <__swsetup_r+0xba>
 800f268:	4b25      	ldr	r3, [pc, #148]	; (800f300 <__swsetup_r+0xd4>)
 800f26a:	429c      	cmp	r4, r3
 800f26c:	d101      	bne.n	800f272 <__swsetup_r+0x46>
 800f26e:	68ac      	ldr	r4, [r5, #8]
 800f270:	e7eb      	b.n	800f24a <__swsetup_r+0x1e>
 800f272:	4b24      	ldr	r3, [pc, #144]	; (800f304 <__swsetup_r+0xd8>)
 800f274:	429c      	cmp	r4, r3
 800f276:	bf08      	it	eq
 800f278:	68ec      	ldreq	r4, [r5, #12]
 800f27a:	e7e6      	b.n	800f24a <__swsetup_r+0x1e>
 800f27c:	0758      	lsls	r0, r3, #29
 800f27e:	d512      	bpl.n	800f2a6 <__swsetup_r+0x7a>
 800f280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f282:	b141      	cbz	r1, 800f296 <__swsetup_r+0x6a>
 800f284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f288:	4299      	cmp	r1, r3
 800f28a:	d002      	beq.n	800f292 <__swsetup_r+0x66>
 800f28c:	4630      	mov	r0, r6
 800f28e:	f002 f96b 	bl	8011568 <_free_r>
 800f292:	2300      	movs	r3, #0
 800f294:	6363      	str	r3, [r4, #52]	; 0x34
 800f296:	89a3      	ldrh	r3, [r4, #12]
 800f298:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f29c:	81a3      	strh	r3, [r4, #12]
 800f29e:	2300      	movs	r3, #0
 800f2a0:	6063      	str	r3, [r4, #4]
 800f2a2:	6923      	ldr	r3, [r4, #16]
 800f2a4:	6023      	str	r3, [r4, #0]
 800f2a6:	89a3      	ldrh	r3, [r4, #12]
 800f2a8:	f043 0308 	orr.w	r3, r3, #8
 800f2ac:	81a3      	strh	r3, [r4, #12]
 800f2ae:	6923      	ldr	r3, [r4, #16]
 800f2b0:	b94b      	cbnz	r3, 800f2c6 <__swsetup_r+0x9a>
 800f2b2:	89a3      	ldrh	r3, [r4, #12]
 800f2b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f2b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2bc:	d003      	beq.n	800f2c6 <__swsetup_r+0x9a>
 800f2be:	4621      	mov	r1, r4
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	f001 fc1f 	bl	8010b04 <__smakebuf_r>
 800f2c6:	89a0      	ldrh	r0, [r4, #12]
 800f2c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2cc:	f010 0301 	ands.w	r3, r0, #1
 800f2d0:	d00a      	beq.n	800f2e8 <__swsetup_r+0xbc>
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	60a3      	str	r3, [r4, #8]
 800f2d6:	6963      	ldr	r3, [r4, #20]
 800f2d8:	425b      	negs	r3, r3
 800f2da:	61a3      	str	r3, [r4, #24]
 800f2dc:	6923      	ldr	r3, [r4, #16]
 800f2de:	b943      	cbnz	r3, 800f2f2 <__swsetup_r+0xc6>
 800f2e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f2e4:	d1ba      	bne.n	800f25c <__swsetup_r+0x30>
 800f2e6:	bd70      	pop	{r4, r5, r6, pc}
 800f2e8:	0781      	lsls	r1, r0, #30
 800f2ea:	bf58      	it	pl
 800f2ec:	6963      	ldrpl	r3, [r4, #20]
 800f2ee:	60a3      	str	r3, [r4, #8]
 800f2f0:	e7f4      	b.n	800f2dc <__swsetup_r+0xb0>
 800f2f2:	2000      	movs	r0, #0
 800f2f4:	e7f7      	b.n	800f2e6 <__swsetup_r+0xba>
 800f2f6:	bf00      	nop
 800f2f8:	20000024 	.word	0x20000024
 800f2fc:	080129f8 	.word	0x080129f8
 800f300:	08012a18 	.word	0x08012a18
 800f304:	080129d8 	.word	0x080129d8

0800f308 <__assert_func>:
 800f308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f30a:	4614      	mov	r4, r2
 800f30c:	461a      	mov	r2, r3
 800f30e:	4b09      	ldr	r3, [pc, #36]	; (800f334 <__assert_func+0x2c>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	4605      	mov	r5, r0
 800f314:	68d8      	ldr	r0, [r3, #12]
 800f316:	b14c      	cbz	r4, 800f32c <__assert_func+0x24>
 800f318:	4b07      	ldr	r3, [pc, #28]	; (800f338 <__assert_func+0x30>)
 800f31a:	9100      	str	r1, [sp, #0]
 800f31c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f320:	4906      	ldr	r1, [pc, #24]	; (800f33c <__assert_func+0x34>)
 800f322:	462b      	mov	r3, r5
 800f324:	f001 f822 	bl	801036c <fiprintf>
 800f328:	f002 fd44 	bl	8011db4 <abort>
 800f32c:	4b04      	ldr	r3, [pc, #16]	; (800f340 <__assert_func+0x38>)
 800f32e:	461c      	mov	r4, r3
 800f330:	e7f3      	b.n	800f31a <__assert_func+0x12>
 800f332:	bf00      	nop
 800f334:	20000024 	.word	0x20000024
 800f338:	08012808 	.word	0x08012808
 800f33c:	08012815 	.word	0x08012815
 800f340:	08012843 	.word	0x08012843

0800f344 <quorem>:
 800f344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f348:	6903      	ldr	r3, [r0, #16]
 800f34a:	690c      	ldr	r4, [r1, #16]
 800f34c:	42a3      	cmp	r3, r4
 800f34e:	4607      	mov	r7, r0
 800f350:	f2c0 8081 	blt.w	800f456 <quorem+0x112>
 800f354:	3c01      	subs	r4, #1
 800f356:	f101 0814 	add.w	r8, r1, #20
 800f35a:	f100 0514 	add.w	r5, r0, #20
 800f35e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f362:	9301      	str	r3, [sp, #4]
 800f364:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f368:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f36c:	3301      	adds	r3, #1
 800f36e:	429a      	cmp	r2, r3
 800f370:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f374:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f378:	fbb2 f6f3 	udiv	r6, r2, r3
 800f37c:	d331      	bcc.n	800f3e2 <quorem+0x9e>
 800f37e:	f04f 0e00 	mov.w	lr, #0
 800f382:	4640      	mov	r0, r8
 800f384:	46ac      	mov	ip, r5
 800f386:	46f2      	mov	sl, lr
 800f388:	f850 2b04 	ldr.w	r2, [r0], #4
 800f38c:	b293      	uxth	r3, r2
 800f38e:	fb06 e303 	mla	r3, r6, r3, lr
 800f392:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f396:	b29b      	uxth	r3, r3
 800f398:	ebaa 0303 	sub.w	r3, sl, r3
 800f39c:	f8dc a000 	ldr.w	sl, [ip]
 800f3a0:	0c12      	lsrs	r2, r2, #16
 800f3a2:	fa13 f38a 	uxtah	r3, r3, sl
 800f3a6:	fb06 e202 	mla	r2, r6, r2, lr
 800f3aa:	9300      	str	r3, [sp, #0]
 800f3ac:	9b00      	ldr	r3, [sp, #0]
 800f3ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f3b2:	b292      	uxth	r2, r2
 800f3b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f3b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f3bc:	f8bd 3000 	ldrh.w	r3, [sp]
 800f3c0:	4581      	cmp	r9, r0
 800f3c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3c6:	f84c 3b04 	str.w	r3, [ip], #4
 800f3ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f3ce:	d2db      	bcs.n	800f388 <quorem+0x44>
 800f3d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800f3d4:	b92b      	cbnz	r3, 800f3e2 <quorem+0x9e>
 800f3d6:	9b01      	ldr	r3, [sp, #4]
 800f3d8:	3b04      	subs	r3, #4
 800f3da:	429d      	cmp	r5, r3
 800f3dc:	461a      	mov	r2, r3
 800f3de:	d32e      	bcc.n	800f43e <quorem+0xfa>
 800f3e0:	613c      	str	r4, [r7, #16]
 800f3e2:	4638      	mov	r0, r7
 800f3e4:	f001 feb4 	bl	8011150 <__mcmp>
 800f3e8:	2800      	cmp	r0, #0
 800f3ea:	db24      	blt.n	800f436 <quorem+0xf2>
 800f3ec:	3601      	adds	r6, #1
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	f04f 0c00 	mov.w	ip, #0
 800f3f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800f3f8:	f8d0 e000 	ldr.w	lr, [r0]
 800f3fc:	b293      	uxth	r3, r2
 800f3fe:	ebac 0303 	sub.w	r3, ip, r3
 800f402:	0c12      	lsrs	r2, r2, #16
 800f404:	fa13 f38e 	uxtah	r3, r3, lr
 800f408:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f40c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f410:	b29b      	uxth	r3, r3
 800f412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f416:	45c1      	cmp	r9, r8
 800f418:	f840 3b04 	str.w	r3, [r0], #4
 800f41c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f420:	d2e8      	bcs.n	800f3f4 <quorem+0xb0>
 800f422:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f426:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f42a:	b922      	cbnz	r2, 800f436 <quorem+0xf2>
 800f42c:	3b04      	subs	r3, #4
 800f42e:	429d      	cmp	r5, r3
 800f430:	461a      	mov	r2, r3
 800f432:	d30a      	bcc.n	800f44a <quorem+0x106>
 800f434:	613c      	str	r4, [r7, #16]
 800f436:	4630      	mov	r0, r6
 800f438:	b003      	add	sp, #12
 800f43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f43e:	6812      	ldr	r2, [r2, #0]
 800f440:	3b04      	subs	r3, #4
 800f442:	2a00      	cmp	r2, #0
 800f444:	d1cc      	bne.n	800f3e0 <quorem+0x9c>
 800f446:	3c01      	subs	r4, #1
 800f448:	e7c7      	b.n	800f3da <quorem+0x96>
 800f44a:	6812      	ldr	r2, [r2, #0]
 800f44c:	3b04      	subs	r3, #4
 800f44e:	2a00      	cmp	r2, #0
 800f450:	d1f0      	bne.n	800f434 <quorem+0xf0>
 800f452:	3c01      	subs	r4, #1
 800f454:	e7eb      	b.n	800f42e <quorem+0xea>
 800f456:	2000      	movs	r0, #0
 800f458:	e7ee      	b.n	800f438 <quorem+0xf4>
 800f45a:	0000      	movs	r0, r0
 800f45c:	0000      	movs	r0, r0
	...

0800f460 <_dtoa_r>:
 800f460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f464:	ed2d 8b04 	vpush	{d8-d9}
 800f468:	ec57 6b10 	vmov	r6, r7, d0
 800f46c:	b093      	sub	sp, #76	; 0x4c
 800f46e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f470:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f474:	9106      	str	r1, [sp, #24]
 800f476:	ee10 aa10 	vmov	sl, s0
 800f47a:	4604      	mov	r4, r0
 800f47c:	9209      	str	r2, [sp, #36]	; 0x24
 800f47e:	930c      	str	r3, [sp, #48]	; 0x30
 800f480:	46bb      	mov	fp, r7
 800f482:	b975      	cbnz	r5, 800f4a2 <_dtoa_r+0x42>
 800f484:	2010      	movs	r0, #16
 800f486:	f001 fb7d 	bl	8010b84 <malloc>
 800f48a:	4602      	mov	r2, r0
 800f48c:	6260      	str	r0, [r4, #36]	; 0x24
 800f48e:	b920      	cbnz	r0, 800f49a <_dtoa_r+0x3a>
 800f490:	4ba7      	ldr	r3, [pc, #668]	; (800f730 <_dtoa_r+0x2d0>)
 800f492:	21ea      	movs	r1, #234	; 0xea
 800f494:	48a7      	ldr	r0, [pc, #668]	; (800f734 <_dtoa_r+0x2d4>)
 800f496:	f7ff ff37 	bl	800f308 <__assert_func>
 800f49a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f49e:	6005      	str	r5, [r0, #0]
 800f4a0:	60c5      	str	r5, [r0, #12]
 800f4a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4a4:	6819      	ldr	r1, [r3, #0]
 800f4a6:	b151      	cbz	r1, 800f4be <_dtoa_r+0x5e>
 800f4a8:	685a      	ldr	r2, [r3, #4]
 800f4aa:	604a      	str	r2, [r1, #4]
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	4093      	lsls	r3, r2
 800f4b0:	608b      	str	r3, [r1, #8]
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	f001 fbc0 	bl	8010c38 <_Bfree>
 800f4b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	601a      	str	r2, [r3, #0]
 800f4be:	1e3b      	subs	r3, r7, #0
 800f4c0:	bfaa      	itet	ge
 800f4c2:	2300      	movge	r3, #0
 800f4c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f4c8:	f8c8 3000 	strge.w	r3, [r8]
 800f4cc:	4b9a      	ldr	r3, [pc, #616]	; (800f738 <_dtoa_r+0x2d8>)
 800f4ce:	bfbc      	itt	lt
 800f4d0:	2201      	movlt	r2, #1
 800f4d2:	f8c8 2000 	strlt.w	r2, [r8]
 800f4d6:	ea33 030b 	bics.w	r3, r3, fp
 800f4da:	d11b      	bne.n	800f514 <_dtoa_r+0xb4>
 800f4dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f4de:	f242 730f 	movw	r3, #9999	; 0x270f
 800f4e2:	6013      	str	r3, [r2, #0]
 800f4e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f4e8:	4333      	orrs	r3, r6
 800f4ea:	f000 8592 	beq.w	8010012 <_dtoa_r+0xbb2>
 800f4ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4f0:	b963      	cbnz	r3, 800f50c <_dtoa_r+0xac>
 800f4f2:	4b92      	ldr	r3, [pc, #584]	; (800f73c <_dtoa_r+0x2dc>)
 800f4f4:	e022      	b.n	800f53c <_dtoa_r+0xdc>
 800f4f6:	4b92      	ldr	r3, [pc, #584]	; (800f740 <_dtoa_r+0x2e0>)
 800f4f8:	9301      	str	r3, [sp, #4]
 800f4fa:	3308      	adds	r3, #8
 800f4fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f4fe:	6013      	str	r3, [r2, #0]
 800f500:	9801      	ldr	r0, [sp, #4]
 800f502:	b013      	add	sp, #76	; 0x4c
 800f504:	ecbd 8b04 	vpop	{d8-d9}
 800f508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f50c:	4b8b      	ldr	r3, [pc, #556]	; (800f73c <_dtoa_r+0x2dc>)
 800f50e:	9301      	str	r3, [sp, #4]
 800f510:	3303      	adds	r3, #3
 800f512:	e7f3      	b.n	800f4fc <_dtoa_r+0x9c>
 800f514:	2200      	movs	r2, #0
 800f516:	2300      	movs	r3, #0
 800f518:	4650      	mov	r0, sl
 800f51a:	4659      	mov	r1, fp
 800f51c:	f7f1 fae4 	bl	8000ae8 <__aeabi_dcmpeq>
 800f520:	ec4b ab19 	vmov	d9, sl, fp
 800f524:	4680      	mov	r8, r0
 800f526:	b158      	cbz	r0, 800f540 <_dtoa_r+0xe0>
 800f528:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f52a:	2301      	movs	r3, #1
 800f52c:	6013      	str	r3, [r2, #0]
 800f52e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f530:	2b00      	cmp	r3, #0
 800f532:	f000 856b 	beq.w	801000c <_dtoa_r+0xbac>
 800f536:	4883      	ldr	r0, [pc, #524]	; (800f744 <_dtoa_r+0x2e4>)
 800f538:	6018      	str	r0, [r3, #0]
 800f53a:	1e43      	subs	r3, r0, #1
 800f53c:	9301      	str	r3, [sp, #4]
 800f53e:	e7df      	b.n	800f500 <_dtoa_r+0xa0>
 800f540:	ec4b ab10 	vmov	d0, sl, fp
 800f544:	aa10      	add	r2, sp, #64	; 0x40
 800f546:	a911      	add	r1, sp, #68	; 0x44
 800f548:	4620      	mov	r0, r4
 800f54a:	f001 ff23 	bl	8011394 <__d2b>
 800f54e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f552:	ee08 0a10 	vmov	s16, r0
 800f556:	2d00      	cmp	r5, #0
 800f558:	f000 8084 	beq.w	800f664 <_dtoa_r+0x204>
 800f55c:	ee19 3a90 	vmov	r3, s19
 800f560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f564:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f568:	4656      	mov	r6, sl
 800f56a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f56e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f572:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f576:	4b74      	ldr	r3, [pc, #464]	; (800f748 <_dtoa_r+0x2e8>)
 800f578:	2200      	movs	r2, #0
 800f57a:	4630      	mov	r0, r6
 800f57c:	4639      	mov	r1, r7
 800f57e:	f7f0 fe93 	bl	80002a8 <__aeabi_dsub>
 800f582:	a365      	add	r3, pc, #404	; (adr r3, 800f718 <_dtoa_r+0x2b8>)
 800f584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f588:	f7f1 f846 	bl	8000618 <__aeabi_dmul>
 800f58c:	a364      	add	r3, pc, #400	; (adr r3, 800f720 <_dtoa_r+0x2c0>)
 800f58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f592:	f7f0 fe8b 	bl	80002ac <__adddf3>
 800f596:	4606      	mov	r6, r0
 800f598:	4628      	mov	r0, r5
 800f59a:	460f      	mov	r7, r1
 800f59c:	f7f0 ffd2 	bl	8000544 <__aeabi_i2d>
 800f5a0:	a361      	add	r3, pc, #388	; (adr r3, 800f728 <_dtoa_r+0x2c8>)
 800f5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a6:	f7f1 f837 	bl	8000618 <__aeabi_dmul>
 800f5aa:	4602      	mov	r2, r0
 800f5ac:	460b      	mov	r3, r1
 800f5ae:	4630      	mov	r0, r6
 800f5b0:	4639      	mov	r1, r7
 800f5b2:	f7f0 fe7b 	bl	80002ac <__adddf3>
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	460f      	mov	r7, r1
 800f5ba:	f7f1 fadd 	bl	8000b78 <__aeabi_d2iz>
 800f5be:	2200      	movs	r2, #0
 800f5c0:	9000      	str	r0, [sp, #0]
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	4630      	mov	r0, r6
 800f5c6:	4639      	mov	r1, r7
 800f5c8:	f7f1 fa98 	bl	8000afc <__aeabi_dcmplt>
 800f5cc:	b150      	cbz	r0, 800f5e4 <_dtoa_r+0x184>
 800f5ce:	9800      	ldr	r0, [sp, #0]
 800f5d0:	f7f0 ffb8 	bl	8000544 <__aeabi_i2d>
 800f5d4:	4632      	mov	r2, r6
 800f5d6:	463b      	mov	r3, r7
 800f5d8:	f7f1 fa86 	bl	8000ae8 <__aeabi_dcmpeq>
 800f5dc:	b910      	cbnz	r0, 800f5e4 <_dtoa_r+0x184>
 800f5de:	9b00      	ldr	r3, [sp, #0]
 800f5e0:	3b01      	subs	r3, #1
 800f5e2:	9300      	str	r3, [sp, #0]
 800f5e4:	9b00      	ldr	r3, [sp, #0]
 800f5e6:	2b16      	cmp	r3, #22
 800f5e8:	d85a      	bhi.n	800f6a0 <_dtoa_r+0x240>
 800f5ea:	9a00      	ldr	r2, [sp, #0]
 800f5ec:	4b57      	ldr	r3, [pc, #348]	; (800f74c <_dtoa_r+0x2ec>)
 800f5ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f6:	ec51 0b19 	vmov	r0, r1, d9
 800f5fa:	f7f1 fa7f 	bl	8000afc <__aeabi_dcmplt>
 800f5fe:	2800      	cmp	r0, #0
 800f600:	d050      	beq.n	800f6a4 <_dtoa_r+0x244>
 800f602:	9b00      	ldr	r3, [sp, #0]
 800f604:	3b01      	subs	r3, #1
 800f606:	9300      	str	r3, [sp, #0]
 800f608:	2300      	movs	r3, #0
 800f60a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f60c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f60e:	1b5d      	subs	r5, r3, r5
 800f610:	1e6b      	subs	r3, r5, #1
 800f612:	9305      	str	r3, [sp, #20]
 800f614:	bf45      	ittet	mi
 800f616:	f1c5 0301 	rsbmi	r3, r5, #1
 800f61a:	9304      	strmi	r3, [sp, #16]
 800f61c:	2300      	movpl	r3, #0
 800f61e:	2300      	movmi	r3, #0
 800f620:	bf4c      	ite	mi
 800f622:	9305      	strmi	r3, [sp, #20]
 800f624:	9304      	strpl	r3, [sp, #16]
 800f626:	9b00      	ldr	r3, [sp, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	db3d      	blt.n	800f6a8 <_dtoa_r+0x248>
 800f62c:	9b05      	ldr	r3, [sp, #20]
 800f62e:	9a00      	ldr	r2, [sp, #0]
 800f630:	920a      	str	r2, [sp, #40]	; 0x28
 800f632:	4413      	add	r3, r2
 800f634:	9305      	str	r3, [sp, #20]
 800f636:	2300      	movs	r3, #0
 800f638:	9307      	str	r3, [sp, #28]
 800f63a:	9b06      	ldr	r3, [sp, #24]
 800f63c:	2b09      	cmp	r3, #9
 800f63e:	f200 8089 	bhi.w	800f754 <_dtoa_r+0x2f4>
 800f642:	2b05      	cmp	r3, #5
 800f644:	bfc4      	itt	gt
 800f646:	3b04      	subgt	r3, #4
 800f648:	9306      	strgt	r3, [sp, #24]
 800f64a:	9b06      	ldr	r3, [sp, #24]
 800f64c:	f1a3 0302 	sub.w	r3, r3, #2
 800f650:	bfcc      	ite	gt
 800f652:	2500      	movgt	r5, #0
 800f654:	2501      	movle	r5, #1
 800f656:	2b03      	cmp	r3, #3
 800f658:	f200 8087 	bhi.w	800f76a <_dtoa_r+0x30a>
 800f65c:	e8df f003 	tbb	[pc, r3]
 800f660:	59383a2d 	.word	0x59383a2d
 800f664:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f668:	441d      	add	r5, r3
 800f66a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f66e:	2b20      	cmp	r3, #32
 800f670:	bfc1      	itttt	gt
 800f672:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f676:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f67a:	fa0b f303 	lslgt.w	r3, fp, r3
 800f67e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f682:	bfda      	itte	le
 800f684:	f1c3 0320 	rsble	r3, r3, #32
 800f688:	fa06 f003 	lslle.w	r0, r6, r3
 800f68c:	4318      	orrgt	r0, r3
 800f68e:	f7f0 ff49 	bl	8000524 <__aeabi_ui2d>
 800f692:	2301      	movs	r3, #1
 800f694:	4606      	mov	r6, r0
 800f696:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f69a:	3d01      	subs	r5, #1
 800f69c:	930e      	str	r3, [sp, #56]	; 0x38
 800f69e:	e76a      	b.n	800f576 <_dtoa_r+0x116>
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	e7b2      	b.n	800f60a <_dtoa_r+0x1aa>
 800f6a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800f6a6:	e7b1      	b.n	800f60c <_dtoa_r+0x1ac>
 800f6a8:	9b04      	ldr	r3, [sp, #16]
 800f6aa:	9a00      	ldr	r2, [sp, #0]
 800f6ac:	1a9b      	subs	r3, r3, r2
 800f6ae:	9304      	str	r3, [sp, #16]
 800f6b0:	4253      	negs	r3, r2
 800f6b2:	9307      	str	r3, [sp, #28]
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	930a      	str	r3, [sp, #40]	; 0x28
 800f6b8:	e7bf      	b.n	800f63a <_dtoa_r+0x1da>
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	9308      	str	r3, [sp, #32]
 800f6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	dc55      	bgt.n	800f770 <_dtoa_r+0x310>
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	9209      	str	r2, [sp, #36]	; 0x24
 800f6ce:	e00c      	b.n	800f6ea <_dtoa_r+0x28a>
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	e7f3      	b.n	800f6bc <_dtoa_r+0x25c>
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6d8:	9308      	str	r3, [sp, #32]
 800f6da:	9b00      	ldr	r3, [sp, #0]
 800f6dc:	4413      	add	r3, r2
 800f6de:	9302      	str	r3, [sp, #8]
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	9303      	str	r3, [sp, #12]
 800f6e6:	bfb8      	it	lt
 800f6e8:	2301      	movlt	r3, #1
 800f6ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	6042      	str	r2, [r0, #4]
 800f6f0:	2204      	movs	r2, #4
 800f6f2:	f102 0614 	add.w	r6, r2, #20
 800f6f6:	429e      	cmp	r6, r3
 800f6f8:	6841      	ldr	r1, [r0, #4]
 800f6fa:	d93d      	bls.n	800f778 <_dtoa_r+0x318>
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f001 fa5b 	bl	8010bb8 <_Balloc>
 800f702:	9001      	str	r0, [sp, #4]
 800f704:	2800      	cmp	r0, #0
 800f706:	d13b      	bne.n	800f780 <_dtoa_r+0x320>
 800f708:	4b11      	ldr	r3, [pc, #68]	; (800f750 <_dtoa_r+0x2f0>)
 800f70a:	4602      	mov	r2, r0
 800f70c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f710:	e6c0      	b.n	800f494 <_dtoa_r+0x34>
 800f712:	2301      	movs	r3, #1
 800f714:	e7df      	b.n	800f6d6 <_dtoa_r+0x276>
 800f716:	bf00      	nop
 800f718:	636f4361 	.word	0x636f4361
 800f71c:	3fd287a7 	.word	0x3fd287a7
 800f720:	8b60c8b3 	.word	0x8b60c8b3
 800f724:	3fc68a28 	.word	0x3fc68a28
 800f728:	509f79fb 	.word	0x509f79fb
 800f72c:	3fd34413 	.word	0x3fd34413
 800f730:	08012952 	.word	0x08012952
 800f734:	08012969 	.word	0x08012969
 800f738:	7ff00000 	.word	0x7ff00000
 800f73c:	0801294e 	.word	0x0801294e
 800f740:	08012945 	.word	0x08012945
 800f744:	08012789 	.word	0x08012789
 800f748:	3ff80000 	.word	0x3ff80000
 800f74c:	08012b38 	.word	0x08012b38
 800f750:	080129c4 	.word	0x080129c4
 800f754:	2501      	movs	r5, #1
 800f756:	2300      	movs	r3, #0
 800f758:	9306      	str	r3, [sp, #24]
 800f75a:	9508      	str	r5, [sp, #32]
 800f75c:	f04f 33ff 	mov.w	r3, #4294967295
 800f760:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f764:	2200      	movs	r2, #0
 800f766:	2312      	movs	r3, #18
 800f768:	e7b0      	b.n	800f6cc <_dtoa_r+0x26c>
 800f76a:	2301      	movs	r3, #1
 800f76c:	9308      	str	r3, [sp, #32]
 800f76e:	e7f5      	b.n	800f75c <_dtoa_r+0x2fc>
 800f770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f772:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f776:	e7b8      	b.n	800f6ea <_dtoa_r+0x28a>
 800f778:	3101      	adds	r1, #1
 800f77a:	6041      	str	r1, [r0, #4]
 800f77c:	0052      	lsls	r2, r2, #1
 800f77e:	e7b8      	b.n	800f6f2 <_dtoa_r+0x292>
 800f780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f782:	9a01      	ldr	r2, [sp, #4]
 800f784:	601a      	str	r2, [r3, #0]
 800f786:	9b03      	ldr	r3, [sp, #12]
 800f788:	2b0e      	cmp	r3, #14
 800f78a:	f200 809d 	bhi.w	800f8c8 <_dtoa_r+0x468>
 800f78e:	2d00      	cmp	r5, #0
 800f790:	f000 809a 	beq.w	800f8c8 <_dtoa_r+0x468>
 800f794:	9b00      	ldr	r3, [sp, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	dd32      	ble.n	800f800 <_dtoa_r+0x3a0>
 800f79a:	4ab7      	ldr	r2, [pc, #732]	; (800fa78 <_dtoa_r+0x618>)
 800f79c:	f003 030f 	and.w	r3, r3, #15
 800f7a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f7a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f7a8:	9b00      	ldr	r3, [sp, #0]
 800f7aa:	05d8      	lsls	r0, r3, #23
 800f7ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f7b0:	d516      	bpl.n	800f7e0 <_dtoa_r+0x380>
 800f7b2:	4bb2      	ldr	r3, [pc, #712]	; (800fa7c <_dtoa_r+0x61c>)
 800f7b4:	ec51 0b19 	vmov	r0, r1, d9
 800f7b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f7bc:	f7f1 f856 	bl	800086c <__aeabi_ddiv>
 800f7c0:	f007 070f 	and.w	r7, r7, #15
 800f7c4:	4682      	mov	sl, r0
 800f7c6:	468b      	mov	fp, r1
 800f7c8:	2503      	movs	r5, #3
 800f7ca:	4eac      	ldr	r6, [pc, #688]	; (800fa7c <_dtoa_r+0x61c>)
 800f7cc:	b957      	cbnz	r7, 800f7e4 <_dtoa_r+0x384>
 800f7ce:	4642      	mov	r2, r8
 800f7d0:	464b      	mov	r3, r9
 800f7d2:	4650      	mov	r0, sl
 800f7d4:	4659      	mov	r1, fp
 800f7d6:	f7f1 f849 	bl	800086c <__aeabi_ddiv>
 800f7da:	4682      	mov	sl, r0
 800f7dc:	468b      	mov	fp, r1
 800f7de:	e028      	b.n	800f832 <_dtoa_r+0x3d2>
 800f7e0:	2502      	movs	r5, #2
 800f7e2:	e7f2      	b.n	800f7ca <_dtoa_r+0x36a>
 800f7e4:	07f9      	lsls	r1, r7, #31
 800f7e6:	d508      	bpl.n	800f7fa <_dtoa_r+0x39a>
 800f7e8:	4640      	mov	r0, r8
 800f7ea:	4649      	mov	r1, r9
 800f7ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f7f0:	f7f0 ff12 	bl	8000618 <__aeabi_dmul>
 800f7f4:	3501      	adds	r5, #1
 800f7f6:	4680      	mov	r8, r0
 800f7f8:	4689      	mov	r9, r1
 800f7fa:	107f      	asrs	r7, r7, #1
 800f7fc:	3608      	adds	r6, #8
 800f7fe:	e7e5      	b.n	800f7cc <_dtoa_r+0x36c>
 800f800:	f000 809b 	beq.w	800f93a <_dtoa_r+0x4da>
 800f804:	9b00      	ldr	r3, [sp, #0]
 800f806:	4f9d      	ldr	r7, [pc, #628]	; (800fa7c <_dtoa_r+0x61c>)
 800f808:	425e      	negs	r6, r3
 800f80a:	4b9b      	ldr	r3, [pc, #620]	; (800fa78 <_dtoa_r+0x618>)
 800f80c:	f006 020f 	and.w	r2, r6, #15
 800f810:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f818:	ec51 0b19 	vmov	r0, r1, d9
 800f81c:	f7f0 fefc 	bl	8000618 <__aeabi_dmul>
 800f820:	1136      	asrs	r6, r6, #4
 800f822:	4682      	mov	sl, r0
 800f824:	468b      	mov	fp, r1
 800f826:	2300      	movs	r3, #0
 800f828:	2502      	movs	r5, #2
 800f82a:	2e00      	cmp	r6, #0
 800f82c:	d17a      	bne.n	800f924 <_dtoa_r+0x4c4>
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d1d3      	bne.n	800f7da <_dtoa_r+0x37a>
 800f832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f834:	2b00      	cmp	r3, #0
 800f836:	f000 8082 	beq.w	800f93e <_dtoa_r+0x4de>
 800f83a:	4b91      	ldr	r3, [pc, #580]	; (800fa80 <_dtoa_r+0x620>)
 800f83c:	2200      	movs	r2, #0
 800f83e:	4650      	mov	r0, sl
 800f840:	4659      	mov	r1, fp
 800f842:	f7f1 f95b 	bl	8000afc <__aeabi_dcmplt>
 800f846:	2800      	cmp	r0, #0
 800f848:	d079      	beq.n	800f93e <_dtoa_r+0x4de>
 800f84a:	9b03      	ldr	r3, [sp, #12]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d076      	beq.n	800f93e <_dtoa_r+0x4de>
 800f850:	9b02      	ldr	r3, [sp, #8]
 800f852:	2b00      	cmp	r3, #0
 800f854:	dd36      	ble.n	800f8c4 <_dtoa_r+0x464>
 800f856:	9b00      	ldr	r3, [sp, #0]
 800f858:	4650      	mov	r0, sl
 800f85a:	4659      	mov	r1, fp
 800f85c:	1e5f      	subs	r7, r3, #1
 800f85e:	2200      	movs	r2, #0
 800f860:	4b88      	ldr	r3, [pc, #544]	; (800fa84 <_dtoa_r+0x624>)
 800f862:	f7f0 fed9 	bl	8000618 <__aeabi_dmul>
 800f866:	9e02      	ldr	r6, [sp, #8]
 800f868:	4682      	mov	sl, r0
 800f86a:	468b      	mov	fp, r1
 800f86c:	3501      	adds	r5, #1
 800f86e:	4628      	mov	r0, r5
 800f870:	f7f0 fe68 	bl	8000544 <__aeabi_i2d>
 800f874:	4652      	mov	r2, sl
 800f876:	465b      	mov	r3, fp
 800f878:	f7f0 fece 	bl	8000618 <__aeabi_dmul>
 800f87c:	4b82      	ldr	r3, [pc, #520]	; (800fa88 <_dtoa_r+0x628>)
 800f87e:	2200      	movs	r2, #0
 800f880:	f7f0 fd14 	bl	80002ac <__adddf3>
 800f884:	46d0      	mov	r8, sl
 800f886:	46d9      	mov	r9, fp
 800f888:	4682      	mov	sl, r0
 800f88a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f88e:	2e00      	cmp	r6, #0
 800f890:	d158      	bne.n	800f944 <_dtoa_r+0x4e4>
 800f892:	4b7e      	ldr	r3, [pc, #504]	; (800fa8c <_dtoa_r+0x62c>)
 800f894:	2200      	movs	r2, #0
 800f896:	4640      	mov	r0, r8
 800f898:	4649      	mov	r1, r9
 800f89a:	f7f0 fd05 	bl	80002a8 <__aeabi_dsub>
 800f89e:	4652      	mov	r2, sl
 800f8a0:	465b      	mov	r3, fp
 800f8a2:	4680      	mov	r8, r0
 800f8a4:	4689      	mov	r9, r1
 800f8a6:	f7f1 f947 	bl	8000b38 <__aeabi_dcmpgt>
 800f8aa:	2800      	cmp	r0, #0
 800f8ac:	f040 8295 	bne.w	800fdda <_dtoa_r+0x97a>
 800f8b0:	4652      	mov	r2, sl
 800f8b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f8b6:	4640      	mov	r0, r8
 800f8b8:	4649      	mov	r1, r9
 800f8ba:	f7f1 f91f 	bl	8000afc <__aeabi_dcmplt>
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	f040 8289 	bne.w	800fdd6 <_dtoa_r+0x976>
 800f8c4:	ec5b ab19 	vmov	sl, fp, d9
 800f8c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	f2c0 8148 	blt.w	800fb60 <_dtoa_r+0x700>
 800f8d0:	9a00      	ldr	r2, [sp, #0]
 800f8d2:	2a0e      	cmp	r2, #14
 800f8d4:	f300 8144 	bgt.w	800fb60 <_dtoa_r+0x700>
 800f8d8:	4b67      	ldr	r3, [pc, #412]	; (800fa78 <_dtoa_r+0x618>)
 800f8da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	f280 80d5 	bge.w	800fa94 <_dtoa_r+0x634>
 800f8ea:	9b03      	ldr	r3, [sp, #12]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	f300 80d1 	bgt.w	800fa94 <_dtoa_r+0x634>
 800f8f2:	f040 826f 	bne.w	800fdd4 <_dtoa_r+0x974>
 800f8f6:	4b65      	ldr	r3, [pc, #404]	; (800fa8c <_dtoa_r+0x62c>)
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	4640      	mov	r0, r8
 800f8fc:	4649      	mov	r1, r9
 800f8fe:	f7f0 fe8b 	bl	8000618 <__aeabi_dmul>
 800f902:	4652      	mov	r2, sl
 800f904:	465b      	mov	r3, fp
 800f906:	f7f1 f90d 	bl	8000b24 <__aeabi_dcmpge>
 800f90a:	9e03      	ldr	r6, [sp, #12]
 800f90c:	4637      	mov	r7, r6
 800f90e:	2800      	cmp	r0, #0
 800f910:	f040 8245 	bne.w	800fd9e <_dtoa_r+0x93e>
 800f914:	9d01      	ldr	r5, [sp, #4]
 800f916:	2331      	movs	r3, #49	; 0x31
 800f918:	f805 3b01 	strb.w	r3, [r5], #1
 800f91c:	9b00      	ldr	r3, [sp, #0]
 800f91e:	3301      	adds	r3, #1
 800f920:	9300      	str	r3, [sp, #0]
 800f922:	e240      	b.n	800fda6 <_dtoa_r+0x946>
 800f924:	07f2      	lsls	r2, r6, #31
 800f926:	d505      	bpl.n	800f934 <_dtoa_r+0x4d4>
 800f928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f92c:	f7f0 fe74 	bl	8000618 <__aeabi_dmul>
 800f930:	3501      	adds	r5, #1
 800f932:	2301      	movs	r3, #1
 800f934:	1076      	asrs	r6, r6, #1
 800f936:	3708      	adds	r7, #8
 800f938:	e777      	b.n	800f82a <_dtoa_r+0x3ca>
 800f93a:	2502      	movs	r5, #2
 800f93c:	e779      	b.n	800f832 <_dtoa_r+0x3d2>
 800f93e:	9f00      	ldr	r7, [sp, #0]
 800f940:	9e03      	ldr	r6, [sp, #12]
 800f942:	e794      	b.n	800f86e <_dtoa_r+0x40e>
 800f944:	9901      	ldr	r1, [sp, #4]
 800f946:	4b4c      	ldr	r3, [pc, #304]	; (800fa78 <_dtoa_r+0x618>)
 800f948:	4431      	add	r1, r6
 800f94a:	910d      	str	r1, [sp, #52]	; 0x34
 800f94c:	9908      	ldr	r1, [sp, #32]
 800f94e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f952:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f956:	2900      	cmp	r1, #0
 800f958:	d043      	beq.n	800f9e2 <_dtoa_r+0x582>
 800f95a:	494d      	ldr	r1, [pc, #308]	; (800fa90 <_dtoa_r+0x630>)
 800f95c:	2000      	movs	r0, #0
 800f95e:	f7f0 ff85 	bl	800086c <__aeabi_ddiv>
 800f962:	4652      	mov	r2, sl
 800f964:	465b      	mov	r3, fp
 800f966:	f7f0 fc9f 	bl	80002a8 <__aeabi_dsub>
 800f96a:	9d01      	ldr	r5, [sp, #4]
 800f96c:	4682      	mov	sl, r0
 800f96e:	468b      	mov	fp, r1
 800f970:	4649      	mov	r1, r9
 800f972:	4640      	mov	r0, r8
 800f974:	f7f1 f900 	bl	8000b78 <__aeabi_d2iz>
 800f978:	4606      	mov	r6, r0
 800f97a:	f7f0 fde3 	bl	8000544 <__aeabi_i2d>
 800f97e:	4602      	mov	r2, r0
 800f980:	460b      	mov	r3, r1
 800f982:	4640      	mov	r0, r8
 800f984:	4649      	mov	r1, r9
 800f986:	f7f0 fc8f 	bl	80002a8 <__aeabi_dsub>
 800f98a:	3630      	adds	r6, #48	; 0x30
 800f98c:	f805 6b01 	strb.w	r6, [r5], #1
 800f990:	4652      	mov	r2, sl
 800f992:	465b      	mov	r3, fp
 800f994:	4680      	mov	r8, r0
 800f996:	4689      	mov	r9, r1
 800f998:	f7f1 f8b0 	bl	8000afc <__aeabi_dcmplt>
 800f99c:	2800      	cmp	r0, #0
 800f99e:	d163      	bne.n	800fa68 <_dtoa_r+0x608>
 800f9a0:	4642      	mov	r2, r8
 800f9a2:	464b      	mov	r3, r9
 800f9a4:	4936      	ldr	r1, [pc, #216]	; (800fa80 <_dtoa_r+0x620>)
 800f9a6:	2000      	movs	r0, #0
 800f9a8:	f7f0 fc7e 	bl	80002a8 <__aeabi_dsub>
 800f9ac:	4652      	mov	r2, sl
 800f9ae:	465b      	mov	r3, fp
 800f9b0:	f7f1 f8a4 	bl	8000afc <__aeabi_dcmplt>
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	f040 80b5 	bne.w	800fb24 <_dtoa_r+0x6c4>
 800f9ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9bc:	429d      	cmp	r5, r3
 800f9be:	d081      	beq.n	800f8c4 <_dtoa_r+0x464>
 800f9c0:	4b30      	ldr	r3, [pc, #192]	; (800fa84 <_dtoa_r+0x624>)
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	4650      	mov	r0, sl
 800f9c6:	4659      	mov	r1, fp
 800f9c8:	f7f0 fe26 	bl	8000618 <__aeabi_dmul>
 800f9cc:	4b2d      	ldr	r3, [pc, #180]	; (800fa84 <_dtoa_r+0x624>)
 800f9ce:	4682      	mov	sl, r0
 800f9d0:	468b      	mov	fp, r1
 800f9d2:	4640      	mov	r0, r8
 800f9d4:	4649      	mov	r1, r9
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f7f0 fe1e 	bl	8000618 <__aeabi_dmul>
 800f9dc:	4680      	mov	r8, r0
 800f9de:	4689      	mov	r9, r1
 800f9e0:	e7c6      	b.n	800f970 <_dtoa_r+0x510>
 800f9e2:	4650      	mov	r0, sl
 800f9e4:	4659      	mov	r1, fp
 800f9e6:	f7f0 fe17 	bl	8000618 <__aeabi_dmul>
 800f9ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9ec:	9d01      	ldr	r5, [sp, #4]
 800f9ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800f9f0:	4682      	mov	sl, r0
 800f9f2:	468b      	mov	fp, r1
 800f9f4:	4649      	mov	r1, r9
 800f9f6:	4640      	mov	r0, r8
 800f9f8:	f7f1 f8be 	bl	8000b78 <__aeabi_d2iz>
 800f9fc:	4606      	mov	r6, r0
 800f9fe:	f7f0 fda1 	bl	8000544 <__aeabi_i2d>
 800fa02:	3630      	adds	r6, #48	; 0x30
 800fa04:	4602      	mov	r2, r0
 800fa06:	460b      	mov	r3, r1
 800fa08:	4640      	mov	r0, r8
 800fa0a:	4649      	mov	r1, r9
 800fa0c:	f7f0 fc4c 	bl	80002a8 <__aeabi_dsub>
 800fa10:	f805 6b01 	strb.w	r6, [r5], #1
 800fa14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa16:	429d      	cmp	r5, r3
 800fa18:	4680      	mov	r8, r0
 800fa1a:	4689      	mov	r9, r1
 800fa1c:	f04f 0200 	mov.w	r2, #0
 800fa20:	d124      	bne.n	800fa6c <_dtoa_r+0x60c>
 800fa22:	4b1b      	ldr	r3, [pc, #108]	; (800fa90 <_dtoa_r+0x630>)
 800fa24:	4650      	mov	r0, sl
 800fa26:	4659      	mov	r1, fp
 800fa28:	f7f0 fc40 	bl	80002ac <__adddf3>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	460b      	mov	r3, r1
 800fa30:	4640      	mov	r0, r8
 800fa32:	4649      	mov	r1, r9
 800fa34:	f7f1 f880 	bl	8000b38 <__aeabi_dcmpgt>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	d173      	bne.n	800fb24 <_dtoa_r+0x6c4>
 800fa3c:	4652      	mov	r2, sl
 800fa3e:	465b      	mov	r3, fp
 800fa40:	4913      	ldr	r1, [pc, #76]	; (800fa90 <_dtoa_r+0x630>)
 800fa42:	2000      	movs	r0, #0
 800fa44:	f7f0 fc30 	bl	80002a8 <__aeabi_dsub>
 800fa48:	4602      	mov	r2, r0
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	4640      	mov	r0, r8
 800fa4e:	4649      	mov	r1, r9
 800fa50:	f7f1 f854 	bl	8000afc <__aeabi_dcmplt>
 800fa54:	2800      	cmp	r0, #0
 800fa56:	f43f af35 	beq.w	800f8c4 <_dtoa_r+0x464>
 800fa5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fa5c:	1e6b      	subs	r3, r5, #1
 800fa5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fa64:	2b30      	cmp	r3, #48	; 0x30
 800fa66:	d0f8      	beq.n	800fa5a <_dtoa_r+0x5fa>
 800fa68:	9700      	str	r7, [sp, #0]
 800fa6a:	e049      	b.n	800fb00 <_dtoa_r+0x6a0>
 800fa6c:	4b05      	ldr	r3, [pc, #20]	; (800fa84 <_dtoa_r+0x624>)
 800fa6e:	f7f0 fdd3 	bl	8000618 <__aeabi_dmul>
 800fa72:	4680      	mov	r8, r0
 800fa74:	4689      	mov	r9, r1
 800fa76:	e7bd      	b.n	800f9f4 <_dtoa_r+0x594>
 800fa78:	08012b38 	.word	0x08012b38
 800fa7c:	08012b10 	.word	0x08012b10
 800fa80:	3ff00000 	.word	0x3ff00000
 800fa84:	40240000 	.word	0x40240000
 800fa88:	401c0000 	.word	0x401c0000
 800fa8c:	40140000 	.word	0x40140000
 800fa90:	3fe00000 	.word	0x3fe00000
 800fa94:	9d01      	ldr	r5, [sp, #4]
 800fa96:	4656      	mov	r6, sl
 800fa98:	465f      	mov	r7, fp
 800fa9a:	4642      	mov	r2, r8
 800fa9c:	464b      	mov	r3, r9
 800fa9e:	4630      	mov	r0, r6
 800faa0:	4639      	mov	r1, r7
 800faa2:	f7f0 fee3 	bl	800086c <__aeabi_ddiv>
 800faa6:	f7f1 f867 	bl	8000b78 <__aeabi_d2iz>
 800faaa:	4682      	mov	sl, r0
 800faac:	f7f0 fd4a 	bl	8000544 <__aeabi_i2d>
 800fab0:	4642      	mov	r2, r8
 800fab2:	464b      	mov	r3, r9
 800fab4:	f7f0 fdb0 	bl	8000618 <__aeabi_dmul>
 800fab8:	4602      	mov	r2, r0
 800faba:	460b      	mov	r3, r1
 800fabc:	4630      	mov	r0, r6
 800fabe:	4639      	mov	r1, r7
 800fac0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fac4:	f7f0 fbf0 	bl	80002a8 <__aeabi_dsub>
 800fac8:	f805 6b01 	strb.w	r6, [r5], #1
 800facc:	9e01      	ldr	r6, [sp, #4]
 800face:	9f03      	ldr	r7, [sp, #12]
 800fad0:	1bae      	subs	r6, r5, r6
 800fad2:	42b7      	cmp	r7, r6
 800fad4:	4602      	mov	r2, r0
 800fad6:	460b      	mov	r3, r1
 800fad8:	d135      	bne.n	800fb46 <_dtoa_r+0x6e6>
 800fada:	f7f0 fbe7 	bl	80002ac <__adddf3>
 800fade:	4642      	mov	r2, r8
 800fae0:	464b      	mov	r3, r9
 800fae2:	4606      	mov	r6, r0
 800fae4:	460f      	mov	r7, r1
 800fae6:	f7f1 f827 	bl	8000b38 <__aeabi_dcmpgt>
 800faea:	b9d0      	cbnz	r0, 800fb22 <_dtoa_r+0x6c2>
 800faec:	4642      	mov	r2, r8
 800faee:	464b      	mov	r3, r9
 800faf0:	4630      	mov	r0, r6
 800faf2:	4639      	mov	r1, r7
 800faf4:	f7f0 fff8 	bl	8000ae8 <__aeabi_dcmpeq>
 800faf8:	b110      	cbz	r0, 800fb00 <_dtoa_r+0x6a0>
 800fafa:	f01a 0f01 	tst.w	sl, #1
 800fafe:	d110      	bne.n	800fb22 <_dtoa_r+0x6c2>
 800fb00:	4620      	mov	r0, r4
 800fb02:	ee18 1a10 	vmov	r1, s16
 800fb06:	f001 f897 	bl	8010c38 <_Bfree>
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	9800      	ldr	r0, [sp, #0]
 800fb0e:	702b      	strb	r3, [r5, #0]
 800fb10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb12:	3001      	adds	r0, #1
 800fb14:	6018      	str	r0, [r3, #0]
 800fb16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	f43f acf1 	beq.w	800f500 <_dtoa_r+0xa0>
 800fb1e:	601d      	str	r5, [r3, #0]
 800fb20:	e4ee      	b.n	800f500 <_dtoa_r+0xa0>
 800fb22:	9f00      	ldr	r7, [sp, #0]
 800fb24:	462b      	mov	r3, r5
 800fb26:	461d      	mov	r5, r3
 800fb28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb2c:	2a39      	cmp	r2, #57	; 0x39
 800fb2e:	d106      	bne.n	800fb3e <_dtoa_r+0x6de>
 800fb30:	9a01      	ldr	r2, [sp, #4]
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d1f7      	bne.n	800fb26 <_dtoa_r+0x6c6>
 800fb36:	9901      	ldr	r1, [sp, #4]
 800fb38:	2230      	movs	r2, #48	; 0x30
 800fb3a:	3701      	adds	r7, #1
 800fb3c:	700a      	strb	r2, [r1, #0]
 800fb3e:	781a      	ldrb	r2, [r3, #0]
 800fb40:	3201      	adds	r2, #1
 800fb42:	701a      	strb	r2, [r3, #0]
 800fb44:	e790      	b.n	800fa68 <_dtoa_r+0x608>
 800fb46:	4ba6      	ldr	r3, [pc, #664]	; (800fde0 <_dtoa_r+0x980>)
 800fb48:	2200      	movs	r2, #0
 800fb4a:	f7f0 fd65 	bl	8000618 <__aeabi_dmul>
 800fb4e:	2200      	movs	r2, #0
 800fb50:	2300      	movs	r3, #0
 800fb52:	4606      	mov	r6, r0
 800fb54:	460f      	mov	r7, r1
 800fb56:	f7f0 ffc7 	bl	8000ae8 <__aeabi_dcmpeq>
 800fb5a:	2800      	cmp	r0, #0
 800fb5c:	d09d      	beq.n	800fa9a <_dtoa_r+0x63a>
 800fb5e:	e7cf      	b.n	800fb00 <_dtoa_r+0x6a0>
 800fb60:	9a08      	ldr	r2, [sp, #32]
 800fb62:	2a00      	cmp	r2, #0
 800fb64:	f000 80d7 	beq.w	800fd16 <_dtoa_r+0x8b6>
 800fb68:	9a06      	ldr	r2, [sp, #24]
 800fb6a:	2a01      	cmp	r2, #1
 800fb6c:	f300 80ba 	bgt.w	800fce4 <_dtoa_r+0x884>
 800fb70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb72:	2a00      	cmp	r2, #0
 800fb74:	f000 80b2 	beq.w	800fcdc <_dtoa_r+0x87c>
 800fb78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fb7c:	9e07      	ldr	r6, [sp, #28]
 800fb7e:	9d04      	ldr	r5, [sp, #16]
 800fb80:	9a04      	ldr	r2, [sp, #16]
 800fb82:	441a      	add	r2, r3
 800fb84:	9204      	str	r2, [sp, #16]
 800fb86:	9a05      	ldr	r2, [sp, #20]
 800fb88:	2101      	movs	r1, #1
 800fb8a:	441a      	add	r2, r3
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	9205      	str	r2, [sp, #20]
 800fb90:	f001 f954 	bl	8010e3c <__i2b>
 800fb94:	4607      	mov	r7, r0
 800fb96:	2d00      	cmp	r5, #0
 800fb98:	dd0c      	ble.n	800fbb4 <_dtoa_r+0x754>
 800fb9a:	9b05      	ldr	r3, [sp, #20]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	dd09      	ble.n	800fbb4 <_dtoa_r+0x754>
 800fba0:	42ab      	cmp	r3, r5
 800fba2:	9a04      	ldr	r2, [sp, #16]
 800fba4:	bfa8      	it	ge
 800fba6:	462b      	movge	r3, r5
 800fba8:	1ad2      	subs	r2, r2, r3
 800fbaa:	9204      	str	r2, [sp, #16]
 800fbac:	9a05      	ldr	r2, [sp, #20]
 800fbae:	1aed      	subs	r5, r5, r3
 800fbb0:	1ad3      	subs	r3, r2, r3
 800fbb2:	9305      	str	r3, [sp, #20]
 800fbb4:	9b07      	ldr	r3, [sp, #28]
 800fbb6:	b31b      	cbz	r3, 800fc00 <_dtoa_r+0x7a0>
 800fbb8:	9b08      	ldr	r3, [sp, #32]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f000 80af 	beq.w	800fd1e <_dtoa_r+0x8be>
 800fbc0:	2e00      	cmp	r6, #0
 800fbc2:	dd13      	ble.n	800fbec <_dtoa_r+0x78c>
 800fbc4:	4639      	mov	r1, r7
 800fbc6:	4632      	mov	r2, r6
 800fbc8:	4620      	mov	r0, r4
 800fbca:	f001 f9f7 	bl	8010fbc <__pow5mult>
 800fbce:	ee18 2a10 	vmov	r2, s16
 800fbd2:	4601      	mov	r1, r0
 800fbd4:	4607      	mov	r7, r0
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	f001 f946 	bl	8010e68 <__multiply>
 800fbdc:	ee18 1a10 	vmov	r1, s16
 800fbe0:	4680      	mov	r8, r0
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	f001 f828 	bl	8010c38 <_Bfree>
 800fbe8:	ee08 8a10 	vmov	s16, r8
 800fbec:	9b07      	ldr	r3, [sp, #28]
 800fbee:	1b9a      	subs	r2, r3, r6
 800fbf0:	d006      	beq.n	800fc00 <_dtoa_r+0x7a0>
 800fbf2:	ee18 1a10 	vmov	r1, s16
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	f001 f9e0 	bl	8010fbc <__pow5mult>
 800fbfc:	ee08 0a10 	vmov	s16, r0
 800fc00:	2101      	movs	r1, #1
 800fc02:	4620      	mov	r0, r4
 800fc04:	f001 f91a 	bl	8010e3c <__i2b>
 800fc08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	4606      	mov	r6, r0
 800fc0e:	f340 8088 	ble.w	800fd22 <_dtoa_r+0x8c2>
 800fc12:	461a      	mov	r2, r3
 800fc14:	4601      	mov	r1, r0
 800fc16:	4620      	mov	r0, r4
 800fc18:	f001 f9d0 	bl	8010fbc <__pow5mult>
 800fc1c:	9b06      	ldr	r3, [sp, #24]
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	4606      	mov	r6, r0
 800fc22:	f340 8081 	ble.w	800fd28 <_dtoa_r+0x8c8>
 800fc26:	f04f 0800 	mov.w	r8, #0
 800fc2a:	6933      	ldr	r3, [r6, #16]
 800fc2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fc30:	6918      	ldr	r0, [r3, #16]
 800fc32:	f001 f8b3 	bl	8010d9c <__hi0bits>
 800fc36:	f1c0 0020 	rsb	r0, r0, #32
 800fc3a:	9b05      	ldr	r3, [sp, #20]
 800fc3c:	4418      	add	r0, r3
 800fc3e:	f010 001f 	ands.w	r0, r0, #31
 800fc42:	f000 8092 	beq.w	800fd6a <_dtoa_r+0x90a>
 800fc46:	f1c0 0320 	rsb	r3, r0, #32
 800fc4a:	2b04      	cmp	r3, #4
 800fc4c:	f340 808a 	ble.w	800fd64 <_dtoa_r+0x904>
 800fc50:	f1c0 001c 	rsb	r0, r0, #28
 800fc54:	9b04      	ldr	r3, [sp, #16]
 800fc56:	4403      	add	r3, r0
 800fc58:	9304      	str	r3, [sp, #16]
 800fc5a:	9b05      	ldr	r3, [sp, #20]
 800fc5c:	4403      	add	r3, r0
 800fc5e:	4405      	add	r5, r0
 800fc60:	9305      	str	r3, [sp, #20]
 800fc62:	9b04      	ldr	r3, [sp, #16]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	dd07      	ble.n	800fc78 <_dtoa_r+0x818>
 800fc68:	ee18 1a10 	vmov	r1, s16
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	4620      	mov	r0, r4
 800fc70:	f001 f9fe 	bl	8011070 <__lshift>
 800fc74:	ee08 0a10 	vmov	s16, r0
 800fc78:	9b05      	ldr	r3, [sp, #20]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	dd05      	ble.n	800fc8a <_dtoa_r+0x82a>
 800fc7e:	4631      	mov	r1, r6
 800fc80:	461a      	mov	r2, r3
 800fc82:	4620      	mov	r0, r4
 800fc84:	f001 f9f4 	bl	8011070 <__lshift>
 800fc88:	4606      	mov	r6, r0
 800fc8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d06e      	beq.n	800fd6e <_dtoa_r+0x90e>
 800fc90:	ee18 0a10 	vmov	r0, s16
 800fc94:	4631      	mov	r1, r6
 800fc96:	f001 fa5b 	bl	8011150 <__mcmp>
 800fc9a:	2800      	cmp	r0, #0
 800fc9c:	da67      	bge.n	800fd6e <_dtoa_r+0x90e>
 800fc9e:	9b00      	ldr	r3, [sp, #0]
 800fca0:	3b01      	subs	r3, #1
 800fca2:	ee18 1a10 	vmov	r1, s16
 800fca6:	9300      	str	r3, [sp, #0]
 800fca8:	220a      	movs	r2, #10
 800fcaa:	2300      	movs	r3, #0
 800fcac:	4620      	mov	r0, r4
 800fcae:	f000 ffe5 	bl	8010c7c <__multadd>
 800fcb2:	9b08      	ldr	r3, [sp, #32]
 800fcb4:	ee08 0a10 	vmov	s16, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f000 81b1 	beq.w	8010020 <_dtoa_r+0xbc0>
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	4639      	mov	r1, r7
 800fcc2:	220a      	movs	r2, #10
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	f000 ffd9 	bl	8010c7c <__multadd>
 800fcca:	9b02      	ldr	r3, [sp, #8]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	4607      	mov	r7, r0
 800fcd0:	f300 808e 	bgt.w	800fdf0 <_dtoa_r+0x990>
 800fcd4:	9b06      	ldr	r3, [sp, #24]
 800fcd6:	2b02      	cmp	r3, #2
 800fcd8:	dc51      	bgt.n	800fd7e <_dtoa_r+0x91e>
 800fcda:	e089      	b.n	800fdf0 <_dtoa_r+0x990>
 800fcdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fcde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fce2:	e74b      	b.n	800fb7c <_dtoa_r+0x71c>
 800fce4:	9b03      	ldr	r3, [sp, #12]
 800fce6:	1e5e      	subs	r6, r3, #1
 800fce8:	9b07      	ldr	r3, [sp, #28]
 800fcea:	42b3      	cmp	r3, r6
 800fcec:	bfbf      	itttt	lt
 800fcee:	9b07      	ldrlt	r3, [sp, #28]
 800fcf0:	9607      	strlt	r6, [sp, #28]
 800fcf2:	1af2      	sublt	r2, r6, r3
 800fcf4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800fcf6:	bfb6      	itet	lt
 800fcf8:	189b      	addlt	r3, r3, r2
 800fcfa:	1b9e      	subge	r6, r3, r6
 800fcfc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800fcfe:	9b03      	ldr	r3, [sp, #12]
 800fd00:	bfb8      	it	lt
 800fd02:	2600      	movlt	r6, #0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	bfb7      	itett	lt
 800fd08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800fd0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800fd10:	1a9d      	sublt	r5, r3, r2
 800fd12:	2300      	movlt	r3, #0
 800fd14:	e734      	b.n	800fb80 <_dtoa_r+0x720>
 800fd16:	9e07      	ldr	r6, [sp, #28]
 800fd18:	9d04      	ldr	r5, [sp, #16]
 800fd1a:	9f08      	ldr	r7, [sp, #32]
 800fd1c:	e73b      	b.n	800fb96 <_dtoa_r+0x736>
 800fd1e:	9a07      	ldr	r2, [sp, #28]
 800fd20:	e767      	b.n	800fbf2 <_dtoa_r+0x792>
 800fd22:	9b06      	ldr	r3, [sp, #24]
 800fd24:	2b01      	cmp	r3, #1
 800fd26:	dc18      	bgt.n	800fd5a <_dtoa_r+0x8fa>
 800fd28:	f1ba 0f00 	cmp.w	sl, #0
 800fd2c:	d115      	bne.n	800fd5a <_dtoa_r+0x8fa>
 800fd2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd32:	b993      	cbnz	r3, 800fd5a <_dtoa_r+0x8fa>
 800fd34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fd38:	0d1b      	lsrs	r3, r3, #20
 800fd3a:	051b      	lsls	r3, r3, #20
 800fd3c:	b183      	cbz	r3, 800fd60 <_dtoa_r+0x900>
 800fd3e:	9b04      	ldr	r3, [sp, #16]
 800fd40:	3301      	adds	r3, #1
 800fd42:	9304      	str	r3, [sp, #16]
 800fd44:	9b05      	ldr	r3, [sp, #20]
 800fd46:	3301      	adds	r3, #1
 800fd48:	9305      	str	r3, [sp, #20]
 800fd4a:	f04f 0801 	mov.w	r8, #1
 800fd4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	f47f af6a 	bne.w	800fc2a <_dtoa_r+0x7ca>
 800fd56:	2001      	movs	r0, #1
 800fd58:	e76f      	b.n	800fc3a <_dtoa_r+0x7da>
 800fd5a:	f04f 0800 	mov.w	r8, #0
 800fd5e:	e7f6      	b.n	800fd4e <_dtoa_r+0x8ee>
 800fd60:	4698      	mov	r8, r3
 800fd62:	e7f4      	b.n	800fd4e <_dtoa_r+0x8ee>
 800fd64:	f43f af7d 	beq.w	800fc62 <_dtoa_r+0x802>
 800fd68:	4618      	mov	r0, r3
 800fd6a:	301c      	adds	r0, #28
 800fd6c:	e772      	b.n	800fc54 <_dtoa_r+0x7f4>
 800fd6e:	9b03      	ldr	r3, [sp, #12]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	dc37      	bgt.n	800fde4 <_dtoa_r+0x984>
 800fd74:	9b06      	ldr	r3, [sp, #24]
 800fd76:	2b02      	cmp	r3, #2
 800fd78:	dd34      	ble.n	800fde4 <_dtoa_r+0x984>
 800fd7a:	9b03      	ldr	r3, [sp, #12]
 800fd7c:	9302      	str	r3, [sp, #8]
 800fd7e:	9b02      	ldr	r3, [sp, #8]
 800fd80:	b96b      	cbnz	r3, 800fd9e <_dtoa_r+0x93e>
 800fd82:	4631      	mov	r1, r6
 800fd84:	2205      	movs	r2, #5
 800fd86:	4620      	mov	r0, r4
 800fd88:	f000 ff78 	bl	8010c7c <__multadd>
 800fd8c:	4601      	mov	r1, r0
 800fd8e:	4606      	mov	r6, r0
 800fd90:	ee18 0a10 	vmov	r0, s16
 800fd94:	f001 f9dc 	bl	8011150 <__mcmp>
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	f73f adbb 	bgt.w	800f914 <_dtoa_r+0x4b4>
 800fd9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fda0:	9d01      	ldr	r5, [sp, #4]
 800fda2:	43db      	mvns	r3, r3
 800fda4:	9300      	str	r3, [sp, #0]
 800fda6:	f04f 0800 	mov.w	r8, #0
 800fdaa:	4631      	mov	r1, r6
 800fdac:	4620      	mov	r0, r4
 800fdae:	f000 ff43 	bl	8010c38 <_Bfree>
 800fdb2:	2f00      	cmp	r7, #0
 800fdb4:	f43f aea4 	beq.w	800fb00 <_dtoa_r+0x6a0>
 800fdb8:	f1b8 0f00 	cmp.w	r8, #0
 800fdbc:	d005      	beq.n	800fdca <_dtoa_r+0x96a>
 800fdbe:	45b8      	cmp	r8, r7
 800fdc0:	d003      	beq.n	800fdca <_dtoa_r+0x96a>
 800fdc2:	4641      	mov	r1, r8
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	f000 ff37 	bl	8010c38 <_Bfree>
 800fdca:	4639      	mov	r1, r7
 800fdcc:	4620      	mov	r0, r4
 800fdce:	f000 ff33 	bl	8010c38 <_Bfree>
 800fdd2:	e695      	b.n	800fb00 <_dtoa_r+0x6a0>
 800fdd4:	2600      	movs	r6, #0
 800fdd6:	4637      	mov	r7, r6
 800fdd8:	e7e1      	b.n	800fd9e <_dtoa_r+0x93e>
 800fdda:	9700      	str	r7, [sp, #0]
 800fddc:	4637      	mov	r7, r6
 800fdde:	e599      	b.n	800f914 <_dtoa_r+0x4b4>
 800fde0:	40240000 	.word	0x40240000
 800fde4:	9b08      	ldr	r3, [sp, #32]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	f000 80ca 	beq.w	800ff80 <_dtoa_r+0xb20>
 800fdec:	9b03      	ldr	r3, [sp, #12]
 800fdee:	9302      	str	r3, [sp, #8]
 800fdf0:	2d00      	cmp	r5, #0
 800fdf2:	dd05      	ble.n	800fe00 <_dtoa_r+0x9a0>
 800fdf4:	4639      	mov	r1, r7
 800fdf6:	462a      	mov	r2, r5
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	f001 f939 	bl	8011070 <__lshift>
 800fdfe:	4607      	mov	r7, r0
 800fe00:	f1b8 0f00 	cmp.w	r8, #0
 800fe04:	d05b      	beq.n	800febe <_dtoa_r+0xa5e>
 800fe06:	6879      	ldr	r1, [r7, #4]
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f000 fed5 	bl	8010bb8 <_Balloc>
 800fe0e:	4605      	mov	r5, r0
 800fe10:	b928      	cbnz	r0, 800fe1e <_dtoa_r+0x9be>
 800fe12:	4b87      	ldr	r3, [pc, #540]	; (8010030 <_dtoa_r+0xbd0>)
 800fe14:	4602      	mov	r2, r0
 800fe16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fe1a:	f7ff bb3b 	b.w	800f494 <_dtoa_r+0x34>
 800fe1e:	693a      	ldr	r2, [r7, #16]
 800fe20:	3202      	adds	r2, #2
 800fe22:	0092      	lsls	r2, r2, #2
 800fe24:	f107 010c 	add.w	r1, r7, #12
 800fe28:	300c      	adds	r0, #12
 800fe2a:	f7fd fc4b 	bl	800d6c4 <memcpy>
 800fe2e:	2201      	movs	r2, #1
 800fe30:	4629      	mov	r1, r5
 800fe32:	4620      	mov	r0, r4
 800fe34:	f001 f91c 	bl	8011070 <__lshift>
 800fe38:	9b01      	ldr	r3, [sp, #4]
 800fe3a:	f103 0901 	add.w	r9, r3, #1
 800fe3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800fe42:	4413      	add	r3, r2
 800fe44:	9305      	str	r3, [sp, #20]
 800fe46:	f00a 0301 	and.w	r3, sl, #1
 800fe4a:	46b8      	mov	r8, r7
 800fe4c:	9304      	str	r3, [sp, #16]
 800fe4e:	4607      	mov	r7, r0
 800fe50:	4631      	mov	r1, r6
 800fe52:	ee18 0a10 	vmov	r0, s16
 800fe56:	f7ff fa75 	bl	800f344 <quorem>
 800fe5a:	4641      	mov	r1, r8
 800fe5c:	9002      	str	r0, [sp, #8]
 800fe5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fe62:	ee18 0a10 	vmov	r0, s16
 800fe66:	f001 f973 	bl	8011150 <__mcmp>
 800fe6a:	463a      	mov	r2, r7
 800fe6c:	9003      	str	r0, [sp, #12]
 800fe6e:	4631      	mov	r1, r6
 800fe70:	4620      	mov	r0, r4
 800fe72:	f001 f989 	bl	8011188 <__mdiff>
 800fe76:	68c2      	ldr	r2, [r0, #12]
 800fe78:	f109 3bff 	add.w	fp, r9, #4294967295
 800fe7c:	4605      	mov	r5, r0
 800fe7e:	bb02      	cbnz	r2, 800fec2 <_dtoa_r+0xa62>
 800fe80:	4601      	mov	r1, r0
 800fe82:	ee18 0a10 	vmov	r0, s16
 800fe86:	f001 f963 	bl	8011150 <__mcmp>
 800fe8a:	4602      	mov	r2, r0
 800fe8c:	4629      	mov	r1, r5
 800fe8e:	4620      	mov	r0, r4
 800fe90:	9207      	str	r2, [sp, #28]
 800fe92:	f000 fed1 	bl	8010c38 <_Bfree>
 800fe96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800fe9a:	ea43 0102 	orr.w	r1, r3, r2
 800fe9e:	9b04      	ldr	r3, [sp, #16]
 800fea0:	430b      	orrs	r3, r1
 800fea2:	464d      	mov	r5, r9
 800fea4:	d10f      	bne.n	800fec6 <_dtoa_r+0xa66>
 800fea6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800feaa:	d02a      	beq.n	800ff02 <_dtoa_r+0xaa2>
 800feac:	9b03      	ldr	r3, [sp, #12]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	dd02      	ble.n	800feb8 <_dtoa_r+0xa58>
 800feb2:	9b02      	ldr	r3, [sp, #8]
 800feb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800feb8:	f88b a000 	strb.w	sl, [fp]
 800febc:	e775      	b.n	800fdaa <_dtoa_r+0x94a>
 800febe:	4638      	mov	r0, r7
 800fec0:	e7ba      	b.n	800fe38 <_dtoa_r+0x9d8>
 800fec2:	2201      	movs	r2, #1
 800fec4:	e7e2      	b.n	800fe8c <_dtoa_r+0xa2c>
 800fec6:	9b03      	ldr	r3, [sp, #12]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	db04      	blt.n	800fed6 <_dtoa_r+0xa76>
 800fecc:	9906      	ldr	r1, [sp, #24]
 800fece:	430b      	orrs	r3, r1
 800fed0:	9904      	ldr	r1, [sp, #16]
 800fed2:	430b      	orrs	r3, r1
 800fed4:	d122      	bne.n	800ff1c <_dtoa_r+0xabc>
 800fed6:	2a00      	cmp	r2, #0
 800fed8:	ddee      	ble.n	800feb8 <_dtoa_r+0xa58>
 800feda:	ee18 1a10 	vmov	r1, s16
 800fede:	2201      	movs	r2, #1
 800fee0:	4620      	mov	r0, r4
 800fee2:	f001 f8c5 	bl	8011070 <__lshift>
 800fee6:	4631      	mov	r1, r6
 800fee8:	ee08 0a10 	vmov	s16, r0
 800feec:	f001 f930 	bl	8011150 <__mcmp>
 800fef0:	2800      	cmp	r0, #0
 800fef2:	dc03      	bgt.n	800fefc <_dtoa_r+0xa9c>
 800fef4:	d1e0      	bne.n	800feb8 <_dtoa_r+0xa58>
 800fef6:	f01a 0f01 	tst.w	sl, #1
 800fefa:	d0dd      	beq.n	800feb8 <_dtoa_r+0xa58>
 800fefc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ff00:	d1d7      	bne.n	800feb2 <_dtoa_r+0xa52>
 800ff02:	2339      	movs	r3, #57	; 0x39
 800ff04:	f88b 3000 	strb.w	r3, [fp]
 800ff08:	462b      	mov	r3, r5
 800ff0a:	461d      	mov	r5, r3
 800ff0c:	3b01      	subs	r3, #1
 800ff0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ff12:	2a39      	cmp	r2, #57	; 0x39
 800ff14:	d071      	beq.n	800fffa <_dtoa_r+0xb9a>
 800ff16:	3201      	adds	r2, #1
 800ff18:	701a      	strb	r2, [r3, #0]
 800ff1a:	e746      	b.n	800fdaa <_dtoa_r+0x94a>
 800ff1c:	2a00      	cmp	r2, #0
 800ff1e:	dd07      	ble.n	800ff30 <_dtoa_r+0xad0>
 800ff20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ff24:	d0ed      	beq.n	800ff02 <_dtoa_r+0xaa2>
 800ff26:	f10a 0301 	add.w	r3, sl, #1
 800ff2a:	f88b 3000 	strb.w	r3, [fp]
 800ff2e:	e73c      	b.n	800fdaa <_dtoa_r+0x94a>
 800ff30:	9b05      	ldr	r3, [sp, #20]
 800ff32:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ff36:	4599      	cmp	r9, r3
 800ff38:	d047      	beq.n	800ffca <_dtoa_r+0xb6a>
 800ff3a:	ee18 1a10 	vmov	r1, s16
 800ff3e:	2300      	movs	r3, #0
 800ff40:	220a      	movs	r2, #10
 800ff42:	4620      	mov	r0, r4
 800ff44:	f000 fe9a 	bl	8010c7c <__multadd>
 800ff48:	45b8      	cmp	r8, r7
 800ff4a:	ee08 0a10 	vmov	s16, r0
 800ff4e:	f04f 0300 	mov.w	r3, #0
 800ff52:	f04f 020a 	mov.w	r2, #10
 800ff56:	4641      	mov	r1, r8
 800ff58:	4620      	mov	r0, r4
 800ff5a:	d106      	bne.n	800ff6a <_dtoa_r+0xb0a>
 800ff5c:	f000 fe8e 	bl	8010c7c <__multadd>
 800ff60:	4680      	mov	r8, r0
 800ff62:	4607      	mov	r7, r0
 800ff64:	f109 0901 	add.w	r9, r9, #1
 800ff68:	e772      	b.n	800fe50 <_dtoa_r+0x9f0>
 800ff6a:	f000 fe87 	bl	8010c7c <__multadd>
 800ff6e:	4639      	mov	r1, r7
 800ff70:	4680      	mov	r8, r0
 800ff72:	2300      	movs	r3, #0
 800ff74:	220a      	movs	r2, #10
 800ff76:	4620      	mov	r0, r4
 800ff78:	f000 fe80 	bl	8010c7c <__multadd>
 800ff7c:	4607      	mov	r7, r0
 800ff7e:	e7f1      	b.n	800ff64 <_dtoa_r+0xb04>
 800ff80:	9b03      	ldr	r3, [sp, #12]
 800ff82:	9302      	str	r3, [sp, #8]
 800ff84:	9d01      	ldr	r5, [sp, #4]
 800ff86:	ee18 0a10 	vmov	r0, s16
 800ff8a:	4631      	mov	r1, r6
 800ff8c:	f7ff f9da 	bl	800f344 <quorem>
 800ff90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ff94:	9b01      	ldr	r3, [sp, #4]
 800ff96:	f805 ab01 	strb.w	sl, [r5], #1
 800ff9a:	1aea      	subs	r2, r5, r3
 800ff9c:	9b02      	ldr	r3, [sp, #8]
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	dd09      	ble.n	800ffb6 <_dtoa_r+0xb56>
 800ffa2:	ee18 1a10 	vmov	r1, s16
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	220a      	movs	r2, #10
 800ffaa:	4620      	mov	r0, r4
 800ffac:	f000 fe66 	bl	8010c7c <__multadd>
 800ffb0:	ee08 0a10 	vmov	s16, r0
 800ffb4:	e7e7      	b.n	800ff86 <_dtoa_r+0xb26>
 800ffb6:	9b02      	ldr	r3, [sp, #8]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	bfc8      	it	gt
 800ffbc:	461d      	movgt	r5, r3
 800ffbe:	9b01      	ldr	r3, [sp, #4]
 800ffc0:	bfd8      	it	le
 800ffc2:	2501      	movle	r5, #1
 800ffc4:	441d      	add	r5, r3
 800ffc6:	f04f 0800 	mov.w	r8, #0
 800ffca:	ee18 1a10 	vmov	r1, s16
 800ffce:	2201      	movs	r2, #1
 800ffd0:	4620      	mov	r0, r4
 800ffd2:	f001 f84d 	bl	8011070 <__lshift>
 800ffd6:	4631      	mov	r1, r6
 800ffd8:	ee08 0a10 	vmov	s16, r0
 800ffdc:	f001 f8b8 	bl	8011150 <__mcmp>
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	dc91      	bgt.n	800ff08 <_dtoa_r+0xaa8>
 800ffe4:	d102      	bne.n	800ffec <_dtoa_r+0xb8c>
 800ffe6:	f01a 0f01 	tst.w	sl, #1
 800ffea:	d18d      	bne.n	800ff08 <_dtoa_r+0xaa8>
 800ffec:	462b      	mov	r3, r5
 800ffee:	461d      	mov	r5, r3
 800fff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fff4:	2a30      	cmp	r2, #48	; 0x30
 800fff6:	d0fa      	beq.n	800ffee <_dtoa_r+0xb8e>
 800fff8:	e6d7      	b.n	800fdaa <_dtoa_r+0x94a>
 800fffa:	9a01      	ldr	r2, [sp, #4]
 800fffc:	429a      	cmp	r2, r3
 800fffe:	d184      	bne.n	800ff0a <_dtoa_r+0xaaa>
 8010000:	9b00      	ldr	r3, [sp, #0]
 8010002:	3301      	adds	r3, #1
 8010004:	9300      	str	r3, [sp, #0]
 8010006:	2331      	movs	r3, #49	; 0x31
 8010008:	7013      	strb	r3, [r2, #0]
 801000a:	e6ce      	b.n	800fdaa <_dtoa_r+0x94a>
 801000c:	4b09      	ldr	r3, [pc, #36]	; (8010034 <_dtoa_r+0xbd4>)
 801000e:	f7ff ba95 	b.w	800f53c <_dtoa_r+0xdc>
 8010012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010014:	2b00      	cmp	r3, #0
 8010016:	f47f aa6e 	bne.w	800f4f6 <_dtoa_r+0x96>
 801001a:	4b07      	ldr	r3, [pc, #28]	; (8010038 <_dtoa_r+0xbd8>)
 801001c:	f7ff ba8e 	b.w	800f53c <_dtoa_r+0xdc>
 8010020:	9b02      	ldr	r3, [sp, #8]
 8010022:	2b00      	cmp	r3, #0
 8010024:	dcae      	bgt.n	800ff84 <_dtoa_r+0xb24>
 8010026:	9b06      	ldr	r3, [sp, #24]
 8010028:	2b02      	cmp	r3, #2
 801002a:	f73f aea8 	bgt.w	800fd7e <_dtoa_r+0x91e>
 801002e:	e7a9      	b.n	800ff84 <_dtoa_r+0xb24>
 8010030:	080129c4 	.word	0x080129c4
 8010034:	08012788 	.word	0x08012788
 8010038:	08012945 	.word	0x08012945

0801003c <__sflush_r>:
 801003c:	898a      	ldrh	r2, [r1, #12]
 801003e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010042:	4605      	mov	r5, r0
 8010044:	0710      	lsls	r0, r2, #28
 8010046:	460c      	mov	r4, r1
 8010048:	d458      	bmi.n	80100fc <__sflush_r+0xc0>
 801004a:	684b      	ldr	r3, [r1, #4]
 801004c:	2b00      	cmp	r3, #0
 801004e:	dc05      	bgt.n	801005c <__sflush_r+0x20>
 8010050:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010052:	2b00      	cmp	r3, #0
 8010054:	dc02      	bgt.n	801005c <__sflush_r+0x20>
 8010056:	2000      	movs	r0, #0
 8010058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801005c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801005e:	2e00      	cmp	r6, #0
 8010060:	d0f9      	beq.n	8010056 <__sflush_r+0x1a>
 8010062:	2300      	movs	r3, #0
 8010064:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010068:	682f      	ldr	r7, [r5, #0]
 801006a:	602b      	str	r3, [r5, #0]
 801006c:	d032      	beq.n	80100d4 <__sflush_r+0x98>
 801006e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010070:	89a3      	ldrh	r3, [r4, #12]
 8010072:	075a      	lsls	r2, r3, #29
 8010074:	d505      	bpl.n	8010082 <__sflush_r+0x46>
 8010076:	6863      	ldr	r3, [r4, #4]
 8010078:	1ac0      	subs	r0, r0, r3
 801007a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801007c:	b10b      	cbz	r3, 8010082 <__sflush_r+0x46>
 801007e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010080:	1ac0      	subs	r0, r0, r3
 8010082:	2300      	movs	r3, #0
 8010084:	4602      	mov	r2, r0
 8010086:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010088:	6a21      	ldr	r1, [r4, #32]
 801008a:	4628      	mov	r0, r5
 801008c:	47b0      	blx	r6
 801008e:	1c43      	adds	r3, r0, #1
 8010090:	89a3      	ldrh	r3, [r4, #12]
 8010092:	d106      	bne.n	80100a2 <__sflush_r+0x66>
 8010094:	6829      	ldr	r1, [r5, #0]
 8010096:	291d      	cmp	r1, #29
 8010098:	d82c      	bhi.n	80100f4 <__sflush_r+0xb8>
 801009a:	4a2a      	ldr	r2, [pc, #168]	; (8010144 <__sflush_r+0x108>)
 801009c:	40ca      	lsrs	r2, r1
 801009e:	07d6      	lsls	r6, r2, #31
 80100a0:	d528      	bpl.n	80100f4 <__sflush_r+0xb8>
 80100a2:	2200      	movs	r2, #0
 80100a4:	6062      	str	r2, [r4, #4]
 80100a6:	04d9      	lsls	r1, r3, #19
 80100a8:	6922      	ldr	r2, [r4, #16]
 80100aa:	6022      	str	r2, [r4, #0]
 80100ac:	d504      	bpl.n	80100b8 <__sflush_r+0x7c>
 80100ae:	1c42      	adds	r2, r0, #1
 80100b0:	d101      	bne.n	80100b6 <__sflush_r+0x7a>
 80100b2:	682b      	ldr	r3, [r5, #0]
 80100b4:	b903      	cbnz	r3, 80100b8 <__sflush_r+0x7c>
 80100b6:	6560      	str	r0, [r4, #84]	; 0x54
 80100b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100ba:	602f      	str	r7, [r5, #0]
 80100bc:	2900      	cmp	r1, #0
 80100be:	d0ca      	beq.n	8010056 <__sflush_r+0x1a>
 80100c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100c4:	4299      	cmp	r1, r3
 80100c6:	d002      	beq.n	80100ce <__sflush_r+0x92>
 80100c8:	4628      	mov	r0, r5
 80100ca:	f001 fa4d 	bl	8011568 <_free_r>
 80100ce:	2000      	movs	r0, #0
 80100d0:	6360      	str	r0, [r4, #52]	; 0x34
 80100d2:	e7c1      	b.n	8010058 <__sflush_r+0x1c>
 80100d4:	6a21      	ldr	r1, [r4, #32]
 80100d6:	2301      	movs	r3, #1
 80100d8:	4628      	mov	r0, r5
 80100da:	47b0      	blx	r6
 80100dc:	1c41      	adds	r1, r0, #1
 80100de:	d1c7      	bne.n	8010070 <__sflush_r+0x34>
 80100e0:	682b      	ldr	r3, [r5, #0]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d0c4      	beq.n	8010070 <__sflush_r+0x34>
 80100e6:	2b1d      	cmp	r3, #29
 80100e8:	d001      	beq.n	80100ee <__sflush_r+0xb2>
 80100ea:	2b16      	cmp	r3, #22
 80100ec:	d101      	bne.n	80100f2 <__sflush_r+0xb6>
 80100ee:	602f      	str	r7, [r5, #0]
 80100f0:	e7b1      	b.n	8010056 <__sflush_r+0x1a>
 80100f2:	89a3      	ldrh	r3, [r4, #12]
 80100f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100f8:	81a3      	strh	r3, [r4, #12]
 80100fa:	e7ad      	b.n	8010058 <__sflush_r+0x1c>
 80100fc:	690f      	ldr	r7, [r1, #16]
 80100fe:	2f00      	cmp	r7, #0
 8010100:	d0a9      	beq.n	8010056 <__sflush_r+0x1a>
 8010102:	0793      	lsls	r3, r2, #30
 8010104:	680e      	ldr	r6, [r1, #0]
 8010106:	bf08      	it	eq
 8010108:	694b      	ldreq	r3, [r1, #20]
 801010a:	600f      	str	r7, [r1, #0]
 801010c:	bf18      	it	ne
 801010e:	2300      	movne	r3, #0
 8010110:	eba6 0807 	sub.w	r8, r6, r7
 8010114:	608b      	str	r3, [r1, #8]
 8010116:	f1b8 0f00 	cmp.w	r8, #0
 801011a:	dd9c      	ble.n	8010056 <__sflush_r+0x1a>
 801011c:	6a21      	ldr	r1, [r4, #32]
 801011e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010120:	4643      	mov	r3, r8
 8010122:	463a      	mov	r2, r7
 8010124:	4628      	mov	r0, r5
 8010126:	47b0      	blx	r6
 8010128:	2800      	cmp	r0, #0
 801012a:	dc06      	bgt.n	801013a <__sflush_r+0xfe>
 801012c:	89a3      	ldrh	r3, [r4, #12]
 801012e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010132:	81a3      	strh	r3, [r4, #12]
 8010134:	f04f 30ff 	mov.w	r0, #4294967295
 8010138:	e78e      	b.n	8010058 <__sflush_r+0x1c>
 801013a:	4407      	add	r7, r0
 801013c:	eba8 0800 	sub.w	r8, r8, r0
 8010140:	e7e9      	b.n	8010116 <__sflush_r+0xda>
 8010142:	bf00      	nop
 8010144:	20400001 	.word	0x20400001

08010148 <_fflush_r>:
 8010148:	b538      	push	{r3, r4, r5, lr}
 801014a:	690b      	ldr	r3, [r1, #16]
 801014c:	4605      	mov	r5, r0
 801014e:	460c      	mov	r4, r1
 8010150:	b913      	cbnz	r3, 8010158 <_fflush_r+0x10>
 8010152:	2500      	movs	r5, #0
 8010154:	4628      	mov	r0, r5
 8010156:	bd38      	pop	{r3, r4, r5, pc}
 8010158:	b118      	cbz	r0, 8010162 <_fflush_r+0x1a>
 801015a:	6983      	ldr	r3, [r0, #24]
 801015c:	b90b      	cbnz	r3, 8010162 <_fflush_r+0x1a>
 801015e:	f000 f887 	bl	8010270 <__sinit>
 8010162:	4b14      	ldr	r3, [pc, #80]	; (80101b4 <_fflush_r+0x6c>)
 8010164:	429c      	cmp	r4, r3
 8010166:	d11b      	bne.n	80101a0 <_fflush_r+0x58>
 8010168:	686c      	ldr	r4, [r5, #4]
 801016a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d0ef      	beq.n	8010152 <_fflush_r+0xa>
 8010172:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010174:	07d0      	lsls	r0, r2, #31
 8010176:	d404      	bmi.n	8010182 <_fflush_r+0x3a>
 8010178:	0599      	lsls	r1, r3, #22
 801017a:	d402      	bmi.n	8010182 <_fflush_r+0x3a>
 801017c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801017e:	f000 fc9a 	bl	8010ab6 <__retarget_lock_acquire_recursive>
 8010182:	4628      	mov	r0, r5
 8010184:	4621      	mov	r1, r4
 8010186:	f7ff ff59 	bl	801003c <__sflush_r>
 801018a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801018c:	07da      	lsls	r2, r3, #31
 801018e:	4605      	mov	r5, r0
 8010190:	d4e0      	bmi.n	8010154 <_fflush_r+0xc>
 8010192:	89a3      	ldrh	r3, [r4, #12]
 8010194:	059b      	lsls	r3, r3, #22
 8010196:	d4dd      	bmi.n	8010154 <_fflush_r+0xc>
 8010198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801019a:	f000 fc8d 	bl	8010ab8 <__retarget_lock_release_recursive>
 801019e:	e7d9      	b.n	8010154 <_fflush_r+0xc>
 80101a0:	4b05      	ldr	r3, [pc, #20]	; (80101b8 <_fflush_r+0x70>)
 80101a2:	429c      	cmp	r4, r3
 80101a4:	d101      	bne.n	80101aa <_fflush_r+0x62>
 80101a6:	68ac      	ldr	r4, [r5, #8]
 80101a8:	e7df      	b.n	801016a <_fflush_r+0x22>
 80101aa:	4b04      	ldr	r3, [pc, #16]	; (80101bc <_fflush_r+0x74>)
 80101ac:	429c      	cmp	r4, r3
 80101ae:	bf08      	it	eq
 80101b0:	68ec      	ldreq	r4, [r5, #12]
 80101b2:	e7da      	b.n	801016a <_fflush_r+0x22>
 80101b4:	080129f8 	.word	0x080129f8
 80101b8:	08012a18 	.word	0x08012a18
 80101bc:	080129d8 	.word	0x080129d8

080101c0 <std>:
 80101c0:	2300      	movs	r3, #0
 80101c2:	b510      	push	{r4, lr}
 80101c4:	4604      	mov	r4, r0
 80101c6:	e9c0 3300 	strd	r3, r3, [r0]
 80101ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80101ce:	6083      	str	r3, [r0, #8]
 80101d0:	8181      	strh	r1, [r0, #12]
 80101d2:	6643      	str	r3, [r0, #100]	; 0x64
 80101d4:	81c2      	strh	r2, [r0, #14]
 80101d6:	6183      	str	r3, [r0, #24]
 80101d8:	4619      	mov	r1, r3
 80101da:	2208      	movs	r2, #8
 80101dc:	305c      	adds	r0, #92	; 0x5c
 80101de:	f7fd fa7f 	bl	800d6e0 <memset>
 80101e2:	4b05      	ldr	r3, [pc, #20]	; (80101f8 <std+0x38>)
 80101e4:	6263      	str	r3, [r4, #36]	; 0x24
 80101e6:	4b05      	ldr	r3, [pc, #20]	; (80101fc <std+0x3c>)
 80101e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80101ea:	4b05      	ldr	r3, [pc, #20]	; (8010200 <std+0x40>)
 80101ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80101ee:	4b05      	ldr	r3, [pc, #20]	; (8010204 <std+0x44>)
 80101f0:	6224      	str	r4, [r4, #32]
 80101f2:	6323      	str	r3, [r4, #48]	; 0x30
 80101f4:	bd10      	pop	{r4, pc}
 80101f6:	bf00      	nop
 80101f8:	08011cc9 	.word	0x08011cc9
 80101fc:	08011ceb 	.word	0x08011ceb
 8010200:	08011d23 	.word	0x08011d23
 8010204:	08011d47 	.word	0x08011d47

08010208 <_cleanup_r>:
 8010208:	4901      	ldr	r1, [pc, #4]	; (8010210 <_cleanup_r+0x8>)
 801020a:	f000 b8c1 	b.w	8010390 <_fwalk_reent>
 801020e:	bf00      	nop
 8010210:	08010149 	.word	0x08010149

08010214 <__sfmoreglue>:
 8010214:	b570      	push	{r4, r5, r6, lr}
 8010216:	2268      	movs	r2, #104	; 0x68
 8010218:	1e4d      	subs	r5, r1, #1
 801021a:	4355      	muls	r5, r2
 801021c:	460e      	mov	r6, r1
 801021e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010222:	f001 fa0d 	bl	8011640 <_malloc_r>
 8010226:	4604      	mov	r4, r0
 8010228:	b140      	cbz	r0, 801023c <__sfmoreglue+0x28>
 801022a:	2100      	movs	r1, #0
 801022c:	e9c0 1600 	strd	r1, r6, [r0]
 8010230:	300c      	adds	r0, #12
 8010232:	60a0      	str	r0, [r4, #8]
 8010234:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010238:	f7fd fa52 	bl	800d6e0 <memset>
 801023c:	4620      	mov	r0, r4
 801023e:	bd70      	pop	{r4, r5, r6, pc}

08010240 <__sfp_lock_acquire>:
 8010240:	4801      	ldr	r0, [pc, #4]	; (8010248 <__sfp_lock_acquire+0x8>)
 8010242:	f000 bc38 	b.w	8010ab6 <__retarget_lock_acquire_recursive>
 8010246:	bf00      	nop
 8010248:	20001489 	.word	0x20001489

0801024c <__sfp_lock_release>:
 801024c:	4801      	ldr	r0, [pc, #4]	; (8010254 <__sfp_lock_release+0x8>)
 801024e:	f000 bc33 	b.w	8010ab8 <__retarget_lock_release_recursive>
 8010252:	bf00      	nop
 8010254:	20001489 	.word	0x20001489

08010258 <__sinit_lock_acquire>:
 8010258:	4801      	ldr	r0, [pc, #4]	; (8010260 <__sinit_lock_acquire+0x8>)
 801025a:	f000 bc2c 	b.w	8010ab6 <__retarget_lock_acquire_recursive>
 801025e:	bf00      	nop
 8010260:	2000148a 	.word	0x2000148a

08010264 <__sinit_lock_release>:
 8010264:	4801      	ldr	r0, [pc, #4]	; (801026c <__sinit_lock_release+0x8>)
 8010266:	f000 bc27 	b.w	8010ab8 <__retarget_lock_release_recursive>
 801026a:	bf00      	nop
 801026c:	2000148a 	.word	0x2000148a

08010270 <__sinit>:
 8010270:	b510      	push	{r4, lr}
 8010272:	4604      	mov	r4, r0
 8010274:	f7ff fff0 	bl	8010258 <__sinit_lock_acquire>
 8010278:	69a3      	ldr	r3, [r4, #24]
 801027a:	b11b      	cbz	r3, 8010284 <__sinit+0x14>
 801027c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010280:	f7ff bff0 	b.w	8010264 <__sinit_lock_release>
 8010284:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010288:	6523      	str	r3, [r4, #80]	; 0x50
 801028a:	4b13      	ldr	r3, [pc, #76]	; (80102d8 <__sinit+0x68>)
 801028c:	4a13      	ldr	r2, [pc, #76]	; (80102dc <__sinit+0x6c>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	62a2      	str	r2, [r4, #40]	; 0x28
 8010292:	42a3      	cmp	r3, r4
 8010294:	bf04      	itt	eq
 8010296:	2301      	moveq	r3, #1
 8010298:	61a3      	streq	r3, [r4, #24]
 801029a:	4620      	mov	r0, r4
 801029c:	f000 f820 	bl	80102e0 <__sfp>
 80102a0:	6060      	str	r0, [r4, #4]
 80102a2:	4620      	mov	r0, r4
 80102a4:	f000 f81c 	bl	80102e0 <__sfp>
 80102a8:	60a0      	str	r0, [r4, #8]
 80102aa:	4620      	mov	r0, r4
 80102ac:	f000 f818 	bl	80102e0 <__sfp>
 80102b0:	2200      	movs	r2, #0
 80102b2:	60e0      	str	r0, [r4, #12]
 80102b4:	2104      	movs	r1, #4
 80102b6:	6860      	ldr	r0, [r4, #4]
 80102b8:	f7ff ff82 	bl	80101c0 <std>
 80102bc:	68a0      	ldr	r0, [r4, #8]
 80102be:	2201      	movs	r2, #1
 80102c0:	2109      	movs	r1, #9
 80102c2:	f7ff ff7d 	bl	80101c0 <std>
 80102c6:	68e0      	ldr	r0, [r4, #12]
 80102c8:	2202      	movs	r2, #2
 80102ca:	2112      	movs	r1, #18
 80102cc:	f7ff ff78 	bl	80101c0 <std>
 80102d0:	2301      	movs	r3, #1
 80102d2:	61a3      	str	r3, [r4, #24]
 80102d4:	e7d2      	b.n	801027c <__sinit+0xc>
 80102d6:	bf00      	nop
 80102d8:	08012774 	.word	0x08012774
 80102dc:	08010209 	.word	0x08010209

080102e0 <__sfp>:
 80102e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102e2:	4607      	mov	r7, r0
 80102e4:	f7ff ffac 	bl	8010240 <__sfp_lock_acquire>
 80102e8:	4b1e      	ldr	r3, [pc, #120]	; (8010364 <__sfp+0x84>)
 80102ea:	681e      	ldr	r6, [r3, #0]
 80102ec:	69b3      	ldr	r3, [r6, #24]
 80102ee:	b913      	cbnz	r3, 80102f6 <__sfp+0x16>
 80102f0:	4630      	mov	r0, r6
 80102f2:	f7ff ffbd 	bl	8010270 <__sinit>
 80102f6:	3648      	adds	r6, #72	; 0x48
 80102f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80102fc:	3b01      	subs	r3, #1
 80102fe:	d503      	bpl.n	8010308 <__sfp+0x28>
 8010300:	6833      	ldr	r3, [r6, #0]
 8010302:	b30b      	cbz	r3, 8010348 <__sfp+0x68>
 8010304:	6836      	ldr	r6, [r6, #0]
 8010306:	e7f7      	b.n	80102f8 <__sfp+0x18>
 8010308:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801030c:	b9d5      	cbnz	r5, 8010344 <__sfp+0x64>
 801030e:	4b16      	ldr	r3, [pc, #88]	; (8010368 <__sfp+0x88>)
 8010310:	60e3      	str	r3, [r4, #12]
 8010312:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010316:	6665      	str	r5, [r4, #100]	; 0x64
 8010318:	f000 fbcc 	bl	8010ab4 <__retarget_lock_init_recursive>
 801031c:	f7ff ff96 	bl	801024c <__sfp_lock_release>
 8010320:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010324:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010328:	6025      	str	r5, [r4, #0]
 801032a:	61a5      	str	r5, [r4, #24]
 801032c:	2208      	movs	r2, #8
 801032e:	4629      	mov	r1, r5
 8010330:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010334:	f7fd f9d4 	bl	800d6e0 <memset>
 8010338:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801033c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010340:	4620      	mov	r0, r4
 8010342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010344:	3468      	adds	r4, #104	; 0x68
 8010346:	e7d9      	b.n	80102fc <__sfp+0x1c>
 8010348:	2104      	movs	r1, #4
 801034a:	4638      	mov	r0, r7
 801034c:	f7ff ff62 	bl	8010214 <__sfmoreglue>
 8010350:	4604      	mov	r4, r0
 8010352:	6030      	str	r0, [r6, #0]
 8010354:	2800      	cmp	r0, #0
 8010356:	d1d5      	bne.n	8010304 <__sfp+0x24>
 8010358:	f7ff ff78 	bl	801024c <__sfp_lock_release>
 801035c:	230c      	movs	r3, #12
 801035e:	603b      	str	r3, [r7, #0]
 8010360:	e7ee      	b.n	8010340 <__sfp+0x60>
 8010362:	bf00      	nop
 8010364:	08012774 	.word	0x08012774
 8010368:	ffff0001 	.word	0xffff0001

0801036c <fiprintf>:
 801036c:	b40e      	push	{r1, r2, r3}
 801036e:	b503      	push	{r0, r1, lr}
 8010370:	4601      	mov	r1, r0
 8010372:	ab03      	add	r3, sp, #12
 8010374:	4805      	ldr	r0, [pc, #20]	; (801038c <fiprintf+0x20>)
 8010376:	f853 2b04 	ldr.w	r2, [r3], #4
 801037a:	6800      	ldr	r0, [r0, #0]
 801037c:	9301      	str	r3, [sp, #4]
 801037e:	f001 fb59 	bl	8011a34 <_vfiprintf_r>
 8010382:	b002      	add	sp, #8
 8010384:	f85d eb04 	ldr.w	lr, [sp], #4
 8010388:	b003      	add	sp, #12
 801038a:	4770      	bx	lr
 801038c:	20000024 	.word	0x20000024

08010390 <_fwalk_reent>:
 8010390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010394:	4606      	mov	r6, r0
 8010396:	4688      	mov	r8, r1
 8010398:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801039c:	2700      	movs	r7, #0
 801039e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80103a2:	f1b9 0901 	subs.w	r9, r9, #1
 80103a6:	d505      	bpl.n	80103b4 <_fwalk_reent+0x24>
 80103a8:	6824      	ldr	r4, [r4, #0]
 80103aa:	2c00      	cmp	r4, #0
 80103ac:	d1f7      	bne.n	801039e <_fwalk_reent+0xe>
 80103ae:	4638      	mov	r0, r7
 80103b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103b4:	89ab      	ldrh	r3, [r5, #12]
 80103b6:	2b01      	cmp	r3, #1
 80103b8:	d907      	bls.n	80103ca <_fwalk_reent+0x3a>
 80103ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80103be:	3301      	adds	r3, #1
 80103c0:	d003      	beq.n	80103ca <_fwalk_reent+0x3a>
 80103c2:	4629      	mov	r1, r5
 80103c4:	4630      	mov	r0, r6
 80103c6:	47c0      	blx	r8
 80103c8:	4307      	orrs	r7, r0
 80103ca:	3568      	adds	r5, #104	; 0x68
 80103cc:	e7e9      	b.n	80103a2 <_fwalk_reent+0x12>

080103ce <rshift>:
 80103ce:	6903      	ldr	r3, [r0, #16]
 80103d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80103d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103d8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80103dc:	f100 0414 	add.w	r4, r0, #20
 80103e0:	dd45      	ble.n	801046e <rshift+0xa0>
 80103e2:	f011 011f 	ands.w	r1, r1, #31
 80103e6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80103ea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80103ee:	d10c      	bne.n	801040a <rshift+0x3c>
 80103f0:	f100 0710 	add.w	r7, r0, #16
 80103f4:	4629      	mov	r1, r5
 80103f6:	42b1      	cmp	r1, r6
 80103f8:	d334      	bcc.n	8010464 <rshift+0x96>
 80103fa:	1a9b      	subs	r3, r3, r2
 80103fc:	009b      	lsls	r3, r3, #2
 80103fe:	1eea      	subs	r2, r5, #3
 8010400:	4296      	cmp	r6, r2
 8010402:	bf38      	it	cc
 8010404:	2300      	movcc	r3, #0
 8010406:	4423      	add	r3, r4
 8010408:	e015      	b.n	8010436 <rshift+0x68>
 801040a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801040e:	f1c1 0820 	rsb	r8, r1, #32
 8010412:	40cf      	lsrs	r7, r1
 8010414:	f105 0e04 	add.w	lr, r5, #4
 8010418:	46a1      	mov	r9, r4
 801041a:	4576      	cmp	r6, lr
 801041c:	46f4      	mov	ip, lr
 801041e:	d815      	bhi.n	801044c <rshift+0x7e>
 8010420:	1a9a      	subs	r2, r3, r2
 8010422:	0092      	lsls	r2, r2, #2
 8010424:	3a04      	subs	r2, #4
 8010426:	3501      	adds	r5, #1
 8010428:	42ae      	cmp	r6, r5
 801042a:	bf38      	it	cc
 801042c:	2200      	movcc	r2, #0
 801042e:	18a3      	adds	r3, r4, r2
 8010430:	50a7      	str	r7, [r4, r2]
 8010432:	b107      	cbz	r7, 8010436 <rshift+0x68>
 8010434:	3304      	adds	r3, #4
 8010436:	1b1a      	subs	r2, r3, r4
 8010438:	42a3      	cmp	r3, r4
 801043a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801043e:	bf08      	it	eq
 8010440:	2300      	moveq	r3, #0
 8010442:	6102      	str	r2, [r0, #16]
 8010444:	bf08      	it	eq
 8010446:	6143      	streq	r3, [r0, #20]
 8010448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801044c:	f8dc c000 	ldr.w	ip, [ip]
 8010450:	fa0c fc08 	lsl.w	ip, ip, r8
 8010454:	ea4c 0707 	orr.w	r7, ip, r7
 8010458:	f849 7b04 	str.w	r7, [r9], #4
 801045c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010460:	40cf      	lsrs	r7, r1
 8010462:	e7da      	b.n	801041a <rshift+0x4c>
 8010464:	f851 cb04 	ldr.w	ip, [r1], #4
 8010468:	f847 cf04 	str.w	ip, [r7, #4]!
 801046c:	e7c3      	b.n	80103f6 <rshift+0x28>
 801046e:	4623      	mov	r3, r4
 8010470:	e7e1      	b.n	8010436 <rshift+0x68>

08010472 <__hexdig_fun>:
 8010472:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010476:	2b09      	cmp	r3, #9
 8010478:	d802      	bhi.n	8010480 <__hexdig_fun+0xe>
 801047a:	3820      	subs	r0, #32
 801047c:	b2c0      	uxtb	r0, r0
 801047e:	4770      	bx	lr
 8010480:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010484:	2b05      	cmp	r3, #5
 8010486:	d801      	bhi.n	801048c <__hexdig_fun+0x1a>
 8010488:	3847      	subs	r0, #71	; 0x47
 801048a:	e7f7      	b.n	801047c <__hexdig_fun+0xa>
 801048c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010490:	2b05      	cmp	r3, #5
 8010492:	d801      	bhi.n	8010498 <__hexdig_fun+0x26>
 8010494:	3827      	subs	r0, #39	; 0x27
 8010496:	e7f1      	b.n	801047c <__hexdig_fun+0xa>
 8010498:	2000      	movs	r0, #0
 801049a:	4770      	bx	lr

0801049c <__gethex>:
 801049c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a0:	ed2d 8b02 	vpush	{d8}
 80104a4:	b089      	sub	sp, #36	; 0x24
 80104a6:	ee08 0a10 	vmov	s16, r0
 80104aa:	9304      	str	r3, [sp, #16]
 80104ac:	4bb4      	ldr	r3, [pc, #720]	; (8010780 <__gethex+0x2e4>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	9301      	str	r3, [sp, #4]
 80104b2:	4618      	mov	r0, r3
 80104b4:	468b      	mov	fp, r1
 80104b6:	4690      	mov	r8, r2
 80104b8:	f7ef fe94 	bl	80001e4 <strlen>
 80104bc:	9b01      	ldr	r3, [sp, #4]
 80104be:	f8db 2000 	ldr.w	r2, [fp]
 80104c2:	4403      	add	r3, r0
 80104c4:	4682      	mov	sl, r0
 80104c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80104ca:	9305      	str	r3, [sp, #20]
 80104cc:	1c93      	adds	r3, r2, #2
 80104ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80104d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80104d6:	32fe      	adds	r2, #254	; 0xfe
 80104d8:	18d1      	adds	r1, r2, r3
 80104da:	461f      	mov	r7, r3
 80104dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80104e0:	9100      	str	r1, [sp, #0]
 80104e2:	2830      	cmp	r0, #48	; 0x30
 80104e4:	d0f8      	beq.n	80104d8 <__gethex+0x3c>
 80104e6:	f7ff ffc4 	bl	8010472 <__hexdig_fun>
 80104ea:	4604      	mov	r4, r0
 80104ec:	2800      	cmp	r0, #0
 80104ee:	d13a      	bne.n	8010566 <__gethex+0xca>
 80104f0:	9901      	ldr	r1, [sp, #4]
 80104f2:	4652      	mov	r2, sl
 80104f4:	4638      	mov	r0, r7
 80104f6:	f001 fc2a 	bl	8011d4e <strncmp>
 80104fa:	4605      	mov	r5, r0
 80104fc:	2800      	cmp	r0, #0
 80104fe:	d168      	bne.n	80105d2 <__gethex+0x136>
 8010500:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010504:	eb07 060a 	add.w	r6, r7, sl
 8010508:	f7ff ffb3 	bl	8010472 <__hexdig_fun>
 801050c:	2800      	cmp	r0, #0
 801050e:	d062      	beq.n	80105d6 <__gethex+0x13a>
 8010510:	4633      	mov	r3, r6
 8010512:	7818      	ldrb	r0, [r3, #0]
 8010514:	2830      	cmp	r0, #48	; 0x30
 8010516:	461f      	mov	r7, r3
 8010518:	f103 0301 	add.w	r3, r3, #1
 801051c:	d0f9      	beq.n	8010512 <__gethex+0x76>
 801051e:	f7ff ffa8 	bl	8010472 <__hexdig_fun>
 8010522:	2301      	movs	r3, #1
 8010524:	fab0 f480 	clz	r4, r0
 8010528:	0964      	lsrs	r4, r4, #5
 801052a:	4635      	mov	r5, r6
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	463a      	mov	r2, r7
 8010530:	4616      	mov	r6, r2
 8010532:	3201      	adds	r2, #1
 8010534:	7830      	ldrb	r0, [r6, #0]
 8010536:	f7ff ff9c 	bl	8010472 <__hexdig_fun>
 801053a:	2800      	cmp	r0, #0
 801053c:	d1f8      	bne.n	8010530 <__gethex+0x94>
 801053e:	9901      	ldr	r1, [sp, #4]
 8010540:	4652      	mov	r2, sl
 8010542:	4630      	mov	r0, r6
 8010544:	f001 fc03 	bl	8011d4e <strncmp>
 8010548:	b980      	cbnz	r0, 801056c <__gethex+0xd0>
 801054a:	b94d      	cbnz	r5, 8010560 <__gethex+0xc4>
 801054c:	eb06 050a 	add.w	r5, r6, sl
 8010550:	462a      	mov	r2, r5
 8010552:	4616      	mov	r6, r2
 8010554:	3201      	adds	r2, #1
 8010556:	7830      	ldrb	r0, [r6, #0]
 8010558:	f7ff ff8b 	bl	8010472 <__hexdig_fun>
 801055c:	2800      	cmp	r0, #0
 801055e:	d1f8      	bne.n	8010552 <__gethex+0xb6>
 8010560:	1bad      	subs	r5, r5, r6
 8010562:	00ad      	lsls	r5, r5, #2
 8010564:	e004      	b.n	8010570 <__gethex+0xd4>
 8010566:	2400      	movs	r4, #0
 8010568:	4625      	mov	r5, r4
 801056a:	e7e0      	b.n	801052e <__gethex+0x92>
 801056c:	2d00      	cmp	r5, #0
 801056e:	d1f7      	bne.n	8010560 <__gethex+0xc4>
 8010570:	7833      	ldrb	r3, [r6, #0]
 8010572:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010576:	2b50      	cmp	r3, #80	; 0x50
 8010578:	d13b      	bne.n	80105f2 <__gethex+0x156>
 801057a:	7873      	ldrb	r3, [r6, #1]
 801057c:	2b2b      	cmp	r3, #43	; 0x2b
 801057e:	d02c      	beq.n	80105da <__gethex+0x13e>
 8010580:	2b2d      	cmp	r3, #45	; 0x2d
 8010582:	d02e      	beq.n	80105e2 <__gethex+0x146>
 8010584:	1c71      	adds	r1, r6, #1
 8010586:	f04f 0900 	mov.w	r9, #0
 801058a:	7808      	ldrb	r0, [r1, #0]
 801058c:	f7ff ff71 	bl	8010472 <__hexdig_fun>
 8010590:	1e43      	subs	r3, r0, #1
 8010592:	b2db      	uxtb	r3, r3
 8010594:	2b18      	cmp	r3, #24
 8010596:	d82c      	bhi.n	80105f2 <__gethex+0x156>
 8010598:	f1a0 0210 	sub.w	r2, r0, #16
 801059c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80105a0:	f7ff ff67 	bl	8010472 <__hexdig_fun>
 80105a4:	1e43      	subs	r3, r0, #1
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	2b18      	cmp	r3, #24
 80105aa:	d91d      	bls.n	80105e8 <__gethex+0x14c>
 80105ac:	f1b9 0f00 	cmp.w	r9, #0
 80105b0:	d000      	beq.n	80105b4 <__gethex+0x118>
 80105b2:	4252      	negs	r2, r2
 80105b4:	4415      	add	r5, r2
 80105b6:	f8cb 1000 	str.w	r1, [fp]
 80105ba:	b1e4      	cbz	r4, 80105f6 <__gethex+0x15a>
 80105bc:	9b00      	ldr	r3, [sp, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	bf14      	ite	ne
 80105c2:	2700      	movne	r7, #0
 80105c4:	2706      	moveq	r7, #6
 80105c6:	4638      	mov	r0, r7
 80105c8:	b009      	add	sp, #36	; 0x24
 80105ca:	ecbd 8b02 	vpop	{d8}
 80105ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d2:	463e      	mov	r6, r7
 80105d4:	4625      	mov	r5, r4
 80105d6:	2401      	movs	r4, #1
 80105d8:	e7ca      	b.n	8010570 <__gethex+0xd4>
 80105da:	f04f 0900 	mov.w	r9, #0
 80105de:	1cb1      	adds	r1, r6, #2
 80105e0:	e7d3      	b.n	801058a <__gethex+0xee>
 80105e2:	f04f 0901 	mov.w	r9, #1
 80105e6:	e7fa      	b.n	80105de <__gethex+0x142>
 80105e8:	230a      	movs	r3, #10
 80105ea:	fb03 0202 	mla	r2, r3, r2, r0
 80105ee:	3a10      	subs	r2, #16
 80105f0:	e7d4      	b.n	801059c <__gethex+0x100>
 80105f2:	4631      	mov	r1, r6
 80105f4:	e7df      	b.n	80105b6 <__gethex+0x11a>
 80105f6:	1bf3      	subs	r3, r6, r7
 80105f8:	3b01      	subs	r3, #1
 80105fa:	4621      	mov	r1, r4
 80105fc:	2b07      	cmp	r3, #7
 80105fe:	dc0b      	bgt.n	8010618 <__gethex+0x17c>
 8010600:	ee18 0a10 	vmov	r0, s16
 8010604:	f000 fad8 	bl	8010bb8 <_Balloc>
 8010608:	4604      	mov	r4, r0
 801060a:	b940      	cbnz	r0, 801061e <__gethex+0x182>
 801060c:	4b5d      	ldr	r3, [pc, #372]	; (8010784 <__gethex+0x2e8>)
 801060e:	4602      	mov	r2, r0
 8010610:	21de      	movs	r1, #222	; 0xde
 8010612:	485d      	ldr	r0, [pc, #372]	; (8010788 <__gethex+0x2ec>)
 8010614:	f7fe fe78 	bl	800f308 <__assert_func>
 8010618:	3101      	adds	r1, #1
 801061a:	105b      	asrs	r3, r3, #1
 801061c:	e7ee      	b.n	80105fc <__gethex+0x160>
 801061e:	f100 0914 	add.w	r9, r0, #20
 8010622:	f04f 0b00 	mov.w	fp, #0
 8010626:	f1ca 0301 	rsb	r3, sl, #1
 801062a:	f8cd 9008 	str.w	r9, [sp, #8]
 801062e:	f8cd b000 	str.w	fp, [sp]
 8010632:	9306      	str	r3, [sp, #24]
 8010634:	42b7      	cmp	r7, r6
 8010636:	d340      	bcc.n	80106ba <__gethex+0x21e>
 8010638:	9802      	ldr	r0, [sp, #8]
 801063a:	9b00      	ldr	r3, [sp, #0]
 801063c:	f840 3b04 	str.w	r3, [r0], #4
 8010640:	eba0 0009 	sub.w	r0, r0, r9
 8010644:	1080      	asrs	r0, r0, #2
 8010646:	0146      	lsls	r6, r0, #5
 8010648:	6120      	str	r0, [r4, #16]
 801064a:	4618      	mov	r0, r3
 801064c:	f000 fba6 	bl	8010d9c <__hi0bits>
 8010650:	1a30      	subs	r0, r6, r0
 8010652:	f8d8 6000 	ldr.w	r6, [r8]
 8010656:	42b0      	cmp	r0, r6
 8010658:	dd63      	ble.n	8010722 <__gethex+0x286>
 801065a:	1b87      	subs	r7, r0, r6
 801065c:	4639      	mov	r1, r7
 801065e:	4620      	mov	r0, r4
 8010660:	f000 ff4a 	bl	80114f8 <__any_on>
 8010664:	4682      	mov	sl, r0
 8010666:	b1a8      	cbz	r0, 8010694 <__gethex+0x1f8>
 8010668:	1e7b      	subs	r3, r7, #1
 801066a:	1159      	asrs	r1, r3, #5
 801066c:	f003 021f 	and.w	r2, r3, #31
 8010670:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010674:	f04f 0a01 	mov.w	sl, #1
 8010678:	fa0a f202 	lsl.w	r2, sl, r2
 801067c:	420a      	tst	r2, r1
 801067e:	d009      	beq.n	8010694 <__gethex+0x1f8>
 8010680:	4553      	cmp	r3, sl
 8010682:	dd05      	ble.n	8010690 <__gethex+0x1f4>
 8010684:	1eb9      	subs	r1, r7, #2
 8010686:	4620      	mov	r0, r4
 8010688:	f000 ff36 	bl	80114f8 <__any_on>
 801068c:	2800      	cmp	r0, #0
 801068e:	d145      	bne.n	801071c <__gethex+0x280>
 8010690:	f04f 0a02 	mov.w	sl, #2
 8010694:	4639      	mov	r1, r7
 8010696:	4620      	mov	r0, r4
 8010698:	f7ff fe99 	bl	80103ce <rshift>
 801069c:	443d      	add	r5, r7
 801069e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80106a2:	42ab      	cmp	r3, r5
 80106a4:	da4c      	bge.n	8010740 <__gethex+0x2a4>
 80106a6:	ee18 0a10 	vmov	r0, s16
 80106aa:	4621      	mov	r1, r4
 80106ac:	f000 fac4 	bl	8010c38 <_Bfree>
 80106b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80106b2:	2300      	movs	r3, #0
 80106b4:	6013      	str	r3, [r2, #0]
 80106b6:	27a3      	movs	r7, #163	; 0xa3
 80106b8:	e785      	b.n	80105c6 <__gethex+0x12a>
 80106ba:	1e73      	subs	r3, r6, #1
 80106bc:	9a05      	ldr	r2, [sp, #20]
 80106be:	9303      	str	r3, [sp, #12]
 80106c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80106c4:	4293      	cmp	r3, r2
 80106c6:	d019      	beq.n	80106fc <__gethex+0x260>
 80106c8:	f1bb 0f20 	cmp.w	fp, #32
 80106cc:	d107      	bne.n	80106de <__gethex+0x242>
 80106ce:	9b02      	ldr	r3, [sp, #8]
 80106d0:	9a00      	ldr	r2, [sp, #0]
 80106d2:	f843 2b04 	str.w	r2, [r3], #4
 80106d6:	9302      	str	r3, [sp, #8]
 80106d8:	2300      	movs	r3, #0
 80106da:	9300      	str	r3, [sp, #0]
 80106dc:	469b      	mov	fp, r3
 80106de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80106e2:	f7ff fec6 	bl	8010472 <__hexdig_fun>
 80106e6:	9b00      	ldr	r3, [sp, #0]
 80106e8:	f000 000f 	and.w	r0, r0, #15
 80106ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80106f0:	4303      	orrs	r3, r0
 80106f2:	9300      	str	r3, [sp, #0]
 80106f4:	f10b 0b04 	add.w	fp, fp, #4
 80106f8:	9b03      	ldr	r3, [sp, #12]
 80106fa:	e00d      	b.n	8010718 <__gethex+0x27c>
 80106fc:	9b03      	ldr	r3, [sp, #12]
 80106fe:	9a06      	ldr	r2, [sp, #24]
 8010700:	4413      	add	r3, r2
 8010702:	42bb      	cmp	r3, r7
 8010704:	d3e0      	bcc.n	80106c8 <__gethex+0x22c>
 8010706:	4618      	mov	r0, r3
 8010708:	9901      	ldr	r1, [sp, #4]
 801070a:	9307      	str	r3, [sp, #28]
 801070c:	4652      	mov	r2, sl
 801070e:	f001 fb1e 	bl	8011d4e <strncmp>
 8010712:	9b07      	ldr	r3, [sp, #28]
 8010714:	2800      	cmp	r0, #0
 8010716:	d1d7      	bne.n	80106c8 <__gethex+0x22c>
 8010718:	461e      	mov	r6, r3
 801071a:	e78b      	b.n	8010634 <__gethex+0x198>
 801071c:	f04f 0a03 	mov.w	sl, #3
 8010720:	e7b8      	b.n	8010694 <__gethex+0x1f8>
 8010722:	da0a      	bge.n	801073a <__gethex+0x29e>
 8010724:	1a37      	subs	r7, r6, r0
 8010726:	4621      	mov	r1, r4
 8010728:	ee18 0a10 	vmov	r0, s16
 801072c:	463a      	mov	r2, r7
 801072e:	f000 fc9f 	bl	8011070 <__lshift>
 8010732:	1bed      	subs	r5, r5, r7
 8010734:	4604      	mov	r4, r0
 8010736:	f100 0914 	add.w	r9, r0, #20
 801073a:	f04f 0a00 	mov.w	sl, #0
 801073e:	e7ae      	b.n	801069e <__gethex+0x202>
 8010740:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010744:	42a8      	cmp	r0, r5
 8010746:	dd72      	ble.n	801082e <__gethex+0x392>
 8010748:	1b45      	subs	r5, r0, r5
 801074a:	42ae      	cmp	r6, r5
 801074c:	dc36      	bgt.n	80107bc <__gethex+0x320>
 801074e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010752:	2b02      	cmp	r3, #2
 8010754:	d02a      	beq.n	80107ac <__gethex+0x310>
 8010756:	2b03      	cmp	r3, #3
 8010758:	d02c      	beq.n	80107b4 <__gethex+0x318>
 801075a:	2b01      	cmp	r3, #1
 801075c:	d11c      	bne.n	8010798 <__gethex+0x2fc>
 801075e:	42ae      	cmp	r6, r5
 8010760:	d11a      	bne.n	8010798 <__gethex+0x2fc>
 8010762:	2e01      	cmp	r6, #1
 8010764:	d112      	bne.n	801078c <__gethex+0x2f0>
 8010766:	9a04      	ldr	r2, [sp, #16]
 8010768:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801076c:	6013      	str	r3, [r2, #0]
 801076e:	2301      	movs	r3, #1
 8010770:	6123      	str	r3, [r4, #16]
 8010772:	f8c9 3000 	str.w	r3, [r9]
 8010776:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010778:	2762      	movs	r7, #98	; 0x62
 801077a:	601c      	str	r4, [r3, #0]
 801077c:	e723      	b.n	80105c6 <__gethex+0x12a>
 801077e:	bf00      	nop
 8010780:	08012aa0 	.word	0x08012aa0
 8010784:	080129c4 	.word	0x080129c4
 8010788:	08012a38 	.word	0x08012a38
 801078c:	1e71      	subs	r1, r6, #1
 801078e:	4620      	mov	r0, r4
 8010790:	f000 feb2 	bl	80114f8 <__any_on>
 8010794:	2800      	cmp	r0, #0
 8010796:	d1e6      	bne.n	8010766 <__gethex+0x2ca>
 8010798:	ee18 0a10 	vmov	r0, s16
 801079c:	4621      	mov	r1, r4
 801079e:	f000 fa4b 	bl	8010c38 <_Bfree>
 80107a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80107a4:	2300      	movs	r3, #0
 80107a6:	6013      	str	r3, [r2, #0]
 80107a8:	2750      	movs	r7, #80	; 0x50
 80107aa:	e70c      	b.n	80105c6 <__gethex+0x12a>
 80107ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d1f2      	bne.n	8010798 <__gethex+0x2fc>
 80107b2:	e7d8      	b.n	8010766 <__gethex+0x2ca>
 80107b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d1d5      	bne.n	8010766 <__gethex+0x2ca>
 80107ba:	e7ed      	b.n	8010798 <__gethex+0x2fc>
 80107bc:	1e6f      	subs	r7, r5, #1
 80107be:	f1ba 0f00 	cmp.w	sl, #0
 80107c2:	d131      	bne.n	8010828 <__gethex+0x38c>
 80107c4:	b127      	cbz	r7, 80107d0 <__gethex+0x334>
 80107c6:	4639      	mov	r1, r7
 80107c8:	4620      	mov	r0, r4
 80107ca:	f000 fe95 	bl	80114f8 <__any_on>
 80107ce:	4682      	mov	sl, r0
 80107d0:	117b      	asrs	r3, r7, #5
 80107d2:	2101      	movs	r1, #1
 80107d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80107d8:	f007 071f 	and.w	r7, r7, #31
 80107dc:	fa01 f707 	lsl.w	r7, r1, r7
 80107e0:	421f      	tst	r7, r3
 80107e2:	4629      	mov	r1, r5
 80107e4:	4620      	mov	r0, r4
 80107e6:	bf18      	it	ne
 80107e8:	f04a 0a02 	orrne.w	sl, sl, #2
 80107ec:	1b76      	subs	r6, r6, r5
 80107ee:	f7ff fdee 	bl	80103ce <rshift>
 80107f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80107f6:	2702      	movs	r7, #2
 80107f8:	f1ba 0f00 	cmp.w	sl, #0
 80107fc:	d048      	beq.n	8010890 <__gethex+0x3f4>
 80107fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010802:	2b02      	cmp	r3, #2
 8010804:	d015      	beq.n	8010832 <__gethex+0x396>
 8010806:	2b03      	cmp	r3, #3
 8010808:	d017      	beq.n	801083a <__gethex+0x39e>
 801080a:	2b01      	cmp	r3, #1
 801080c:	d109      	bne.n	8010822 <__gethex+0x386>
 801080e:	f01a 0f02 	tst.w	sl, #2
 8010812:	d006      	beq.n	8010822 <__gethex+0x386>
 8010814:	f8d9 0000 	ldr.w	r0, [r9]
 8010818:	ea4a 0a00 	orr.w	sl, sl, r0
 801081c:	f01a 0f01 	tst.w	sl, #1
 8010820:	d10e      	bne.n	8010840 <__gethex+0x3a4>
 8010822:	f047 0710 	orr.w	r7, r7, #16
 8010826:	e033      	b.n	8010890 <__gethex+0x3f4>
 8010828:	f04f 0a01 	mov.w	sl, #1
 801082c:	e7d0      	b.n	80107d0 <__gethex+0x334>
 801082e:	2701      	movs	r7, #1
 8010830:	e7e2      	b.n	80107f8 <__gethex+0x35c>
 8010832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010834:	f1c3 0301 	rsb	r3, r3, #1
 8010838:	9315      	str	r3, [sp, #84]	; 0x54
 801083a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801083c:	2b00      	cmp	r3, #0
 801083e:	d0f0      	beq.n	8010822 <__gethex+0x386>
 8010840:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010844:	f104 0314 	add.w	r3, r4, #20
 8010848:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801084c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010850:	f04f 0c00 	mov.w	ip, #0
 8010854:	4618      	mov	r0, r3
 8010856:	f853 2b04 	ldr.w	r2, [r3], #4
 801085a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801085e:	d01c      	beq.n	801089a <__gethex+0x3fe>
 8010860:	3201      	adds	r2, #1
 8010862:	6002      	str	r2, [r0, #0]
 8010864:	2f02      	cmp	r7, #2
 8010866:	f104 0314 	add.w	r3, r4, #20
 801086a:	d13f      	bne.n	80108ec <__gethex+0x450>
 801086c:	f8d8 2000 	ldr.w	r2, [r8]
 8010870:	3a01      	subs	r2, #1
 8010872:	42b2      	cmp	r2, r6
 8010874:	d10a      	bne.n	801088c <__gethex+0x3f0>
 8010876:	1171      	asrs	r1, r6, #5
 8010878:	2201      	movs	r2, #1
 801087a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801087e:	f006 061f 	and.w	r6, r6, #31
 8010882:	fa02 f606 	lsl.w	r6, r2, r6
 8010886:	421e      	tst	r6, r3
 8010888:	bf18      	it	ne
 801088a:	4617      	movne	r7, r2
 801088c:	f047 0720 	orr.w	r7, r7, #32
 8010890:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010892:	601c      	str	r4, [r3, #0]
 8010894:	9b04      	ldr	r3, [sp, #16]
 8010896:	601d      	str	r5, [r3, #0]
 8010898:	e695      	b.n	80105c6 <__gethex+0x12a>
 801089a:	4299      	cmp	r1, r3
 801089c:	f843 cc04 	str.w	ip, [r3, #-4]
 80108a0:	d8d8      	bhi.n	8010854 <__gethex+0x3b8>
 80108a2:	68a3      	ldr	r3, [r4, #8]
 80108a4:	459b      	cmp	fp, r3
 80108a6:	db19      	blt.n	80108dc <__gethex+0x440>
 80108a8:	6861      	ldr	r1, [r4, #4]
 80108aa:	ee18 0a10 	vmov	r0, s16
 80108ae:	3101      	adds	r1, #1
 80108b0:	f000 f982 	bl	8010bb8 <_Balloc>
 80108b4:	4681      	mov	r9, r0
 80108b6:	b918      	cbnz	r0, 80108c0 <__gethex+0x424>
 80108b8:	4b1a      	ldr	r3, [pc, #104]	; (8010924 <__gethex+0x488>)
 80108ba:	4602      	mov	r2, r0
 80108bc:	2184      	movs	r1, #132	; 0x84
 80108be:	e6a8      	b.n	8010612 <__gethex+0x176>
 80108c0:	6922      	ldr	r2, [r4, #16]
 80108c2:	3202      	adds	r2, #2
 80108c4:	f104 010c 	add.w	r1, r4, #12
 80108c8:	0092      	lsls	r2, r2, #2
 80108ca:	300c      	adds	r0, #12
 80108cc:	f7fc fefa 	bl	800d6c4 <memcpy>
 80108d0:	4621      	mov	r1, r4
 80108d2:	ee18 0a10 	vmov	r0, s16
 80108d6:	f000 f9af 	bl	8010c38 <_Bfree>
 80108da:	464c      	mov	r4, r9
 80108dc:	6923      	ldr	r3, [r4, #16]
 80108de:	1c5a      	adds	r2, r3, #1
 80108e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80108e4:	6122      	str	r2, [r4, #16]
 80108e6:	2201      	movs	r2, #1
 80108e8:	615a      	str	r2, [r3, #20]
 80108ea:	e7bb      	b.n	8010864 <__gethex+0x3c8>
 80108ec:	6922      	ldr	r2, [r4, #16]
 80108ee:	455a      	cmp	r2, fp
 80108f0:	dd0b      	ble.n	801090a <__gethex+0x46e>
 80108f2:	2101      	movs	r1, #1
 80108f4:	4620      	mov	r0, r4
 80108f6:	f7ff fd6a 	bl	80103ce <rshift>
 80108fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80108fe:	3501      	adds	r5, #1
 8010900:	42ab      	cmp	r3, r5
 8010902:	f6ff aed0 	blt.w	80106a6 <__gethex+0x20a>
 8010906:	2701      	movs	r7, #1
 8010908:	e7c0      	b.n	801088c <__gethex+0x3f0>
 801090a:	f016 061f 	ands.w	r6, r6, #31
 801090e:	d0fa      	beq.n	8010906 <__gethex+0x46a>
 8010910:	4453      	add	r3, sl
 8010912:	f1c6 0620 	rsb	r6, r6, #32
 8010916:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801091a:	f000 fa3f 	bl	8010d9c <__hi0bits>
 801091e:	42b0      	cmp	r0, r6
 8010920:	dbe7      	blt.n	80108f2 <__gethex+0x456>
 8010922:	e7f0      	b.n	8010906 <__gethex+0x46a>
 8010924:	080129c4 	.word	0x080129c4

08010928 <L_shift>:
 8010928:	f1c2 0208 	rsb	r2, r2, #8
 801092c:	0092      	lsls	r2, r2, #2
 801092e:	b570      	push	{r4, r5, r6, lr}
 8010930:	f1c2 0620 	rsb	r6, r2, #32
 8010934:	6843      	ldr	r3, [r0, #4]
 8010936:	6804      	ldr	r4, [r0, #0]
 8010938:	fa03 f506 	lsl.w	r5, r3, r6
 801093c:	432c      	orrs	r4, r5
 801093e:	40d3      	lsrs	r3, r2
 8010940:	6004      	str	r4, [r0, #0]
 8010942:	f840 3f04 	str.w	r3, [r0, #4]!
 8010946:	4288      	cmp	r0, r1
 8010948:	d3f4      	bcc.n	8010934 <L_shift+0xc>
 801094a:	bd70      	pop	{r4, r5, r6, pc}

0801094c <__match>:
 801094c:	b530      	push	{r4, r5, lr}
 801094e:	6803      	ldr	r3, [r0, #0]
 8010950:	3301      	adds	r3, #1
 8010952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010956:	b914      	cbnz	r4, 801095e <__match+0x12>
 8010958:	6003      	str	r3, [r0, #0]
 801095a:	2001      	movs	r0, #1
 801095c:	bd30      	pop	{r4, r5, pc}
 801095e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010962:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010966:	2d19      	cmp	r5, #25
 8010968:	bf98      	it	ls
 801096a:	3220      	addls	r2, #32
 801096c:	42a2      	cmp	r2, r4
 801096e:	d0f0      	beq.n	8010952 <__match+0x6>
 8010970:	2000      	movs	r0, #0
 8010972:	e7f3      	b.n	801095c <__match+0x10>

08010974 <__hexnan>:
 8010974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010978:	680b      	ldr	r3, [r1, #0]
 801097a:	115e      	asrs	r6, r3, #5
 801097c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010980:	f013 031f 	ands.w	r3, r3, #31
 8010984:	b087      	sub	sp, #28
 8010986:	bf18      	it	ne
 8010988:	3604      	addne	r6, #4
 801098a:	2500      	movs	r5, #0
 801098c:	1f37      	subs	r7, r6, #4
 801098e:	4690      	mov	r8, r2
 8010990:	6802      	ldr	r2, [r0, #0]
 8010992:	9301      	str	r3, [sp, #4]
 8010994:	4682      	mov	sl, r0
 8010996:	f846 5c04 	str.w	r5, [r6, #-4]
 801099a:	46b9      	mov	r9, r7
 801099c:	463c      	mov	r4, r7
 801099e:	9502      	str	r5, [sp, #8]
 80109a0:	46ab      	mov	fp, r5
 80109a2:	7851      	ldrb	r1, [r2, #1]
 80109a4:	1c53      	adds	r3, r2, #1
 80109a6:	9303      	str	r3, [sp, #12]
 80109a8:	b341      	cbz	r1, 80109fc <__hexnan+0x88>
 80109aa:	4608      	mov	r0, r1
 80109ac:	9205      	str	r2, [sp, #20]
 80109ae:	9104      	str	r1, [sp, #16]
 80109b0:	f7ff fd5f 	bl	8010472 <__hexdig_fun>
 80109b4:	2800      	cmp	r0, #0
 80109b6:	d14f      	bne.n	8010a58 <__hexnan+0xe4>
 80109b8:	9904      	ldr	r1, [sp, #16]
 80109ba:	9a05      	ldr	r2, [sp, #20]
 80109bc:	2920      	cmp	r1, #32
 80109be:	d818      	bhi.n	80109f2 <__hexnan+0x7e>
 80109c0:	9b02      	ldr	r3, [sp, #8]
 80109c2:	459b      	cmp	fp, r3
 80109c4:	dd13      	ble.n	80109ee <__hexnan+0x7a>
 80109c6:	454c      	cmp	r4, r9
 80109c8:	d206      	bcs.n	80109d8 <__hexnan+0x64>
 80109ca:	2d07      	cmp	r5, #7
 80109cc:	dc04      	bgt.n	80109d8 <__hexnan+0x64>
 80109ce:	462a      	mov	r2, r5
 80109d0:	4649      	mov	r1, r9
 80109d2:	4620      	mov	r0, r4
 80109d4:	f7ff ffa8 	bl	8010928 <L_shift>
 80109d8:	4544      	cmp	r4, r8
 80109da:	d950      	bls.n	8010a7e <__hexnan+0x10a>
 80109dc:	2300      	movs	r3, #0
 80109de:	f1a4 0904 	sub.w	r9, r4, #4
 80109e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80109e6:	f8cd b008 	str.w	fp, [sp, #8]
 80109ea:	464c      	mov	r4, r9
 80109ec:	461d      	mov	r5, r3
 80109ee:	9a03      	ldr	r2, [sp, #12]
 80109f0:	e7d7      	b.n	80109a2 <__hexnan+0x2e>
 80109f2:	2929      	cmp	r1, #41	; 0x29
 80109f4:	d156      	bne.n	8010aa4 <__hexnan+0x130>
 80109f6:	3202      	adds	r2, #2
 80109f8:	f8ca 2000 	str.w	r2, [sl]
 80109fc:	f1bb 0f00 	cmp.w	fp, #0
 8010a00:	d050      	beq.n	8010aa4 <__hexnan+0x130>
 8010a02:	454c      	cmp	r4, r9
 8010a04:	d206      	bcs.n	8010a14 <__hexnan+0xa0>
 8010a06:	2d07      	cmp	r5, #7
 8010a08:	dc04      	bgt.n	8010a14 <__hexnan+0xa0>
 8010a0a:	462a      	mov	r2, r5
 8010a0c:	4649      	mov	r1, r9
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f7ff ff8a 	bl	8010928 <L_shift>
 8010a14:	4544      	cmp	r4, r8
 8010a16:	d934      	bls.n	8010a82 <__hexnan+0x10e>
 8010a18:	f1a8 0204 	sub.w	r2, r8, #4
 8010a1c:	4623      	mov	r3, r4
 8010a1e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010a22:	f842 1f04 	str.w	r1, [r2, #4]!
 8010a26:	429f      	cmp	r7, r3
 8010a28:	d2f9      	bcs.n	8010a1e <__hexnan+0xaa>
 8010a2a:	1b3b      	subs	r3, r7, r4
 8010a2c:	f023 0303 	bic.w	r3, r3, #3
 8010a30:	3304      	adds	r3, #4
 8010a32:	3401      	adds	r4, #1
 8010a34:	3e03      	subs	r6, #3
 8010a36:	42b4      	cmp	r4, r6
 8010a38:	bf88      	it	hi
 8010a3a:	2304      	movhi	r3, #4
 8010a3c:	4443      	add	r3, r8
 8010a3e:	2200      	movs	r2, #0
 8010a40:	f843 2b04 	str.w	r2, [r3], #4
 8010a44:	429f      	cmp	r7, r3
 8010a46:	d2fb      	bcs.n	8010a40 <__hexnan+0xcc>
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	b91b      	cbnz	r3, 8010a54 <__hexnan+0xe0>
 8010a4c:	4547      	cmp	r7, r8
 8010a4e:	d127      	bne.n	8010aa0 <__hexnan+0x12c>
 8010a50:	2301      	movs	r3, #1
 8010a52:	603b      	str	r3, [r7, #0]
 8010a54:	2005      	movs	r0, #5
 8010a56:	e026      	b.n	8010aa6 <__hexnan+0x132>
 8010a58:	3501      	adds	r5, #1
 8010a5a:	2d08      	cmp	r5, #8
 8010a5c:	f10b 0b01 	add.w	fp, fp, #1
 8010a60:	dd06      	ble.n	8010a70 <__hexnan+0xfc>
 8010a62:	4544      	cmp	r4, r8
 8010a64:	d9c3      	bls.n	80109ee <__hexnan+0x7a>
 8010a66:	2300      	movs	r3, #0
 8010a68:	f844 3c04 	str.w	r3, [r4, #-4]
 8010a6c:	2501      	movs	r5, #1
 8010a6e:	3c04      	subs	r4, #4
 8010a70:	6822      	ldr	r2, [r4, #0]
 8010a72:	f000 000f 	and.w	r0, r0, #15
 8010a76:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010a7a:	6022      	str	r2, [r4, #0]
 8010a7c:	e7b7      	b.n	80109ee <__hexnan+0x7a>
 8010a7e:	2508      	movs	r5, #8
 8010a80:	e7b5      	b.n	80109ee <__hexnan+0x7a>
 8010a82:	9b01      	ldr	r3, [sp, #4]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d0df      	beq.n	8010a48 <__hexnan+0xd4>
 8010a88:	f04f 32ff 	mov.w	r2, #4294967295
 8010a8c:	f1c3 0320 	rsb	r3, r3, #32
 8010a90:	fa22 f303 	lsr.w	r3, r2, r3
 8010a94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010a98:	401a      	ands	r2, r3
 8010a9a:	f846 2c04 	str.w	r2, [r6, #-4]
 8010a9e:	e7d3      	b.n	8010a48 <__hexnan+0xd4>
 8010aa0:	3f04      	subs	r7, #4
 8010aa2:	e7d1      	b.n	8010a48 <__hexnan+0xd4>
 8010aa4:	2004      	movs	r0, #4
 8010aa6:	b007      	add	sp, #28
 8010aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010aac <_localeconv_r>:
 8010aac:	4800      	ldr	r0, [pc, #0]	; (8010ab0 <_localeconv_r+0x4>)
 8010aae:	4770      	bx	lr
 8010ab0:	2000017c 	.word	0x2000017c

08010ab4 <__retarget_lock_init_recursive>:
 8010ab4:	4770      	bx	lr

08010ab6 <__retarget_lock_acquire_recursive>:
 8010ab6:	4770      	bx	lr

08010ab8 <__retarget_lock_release_recursive>:
 8010ab8:	4770      	bx	lr

08010aba <__swhatbuf_r>:
 8010aba:	b570      	push	{r4, r5, r6, lr}
 8010abc:	460e      	mov	r6, r1
 8010abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ac2:	2900      	cmp	r1, #0
 8010ac4:	b096      	sub	sp, #88	; 0x58
 8010ac6:	4614      	mov	r4, r2
 8010ac8:	461d      	mov	r5, r3
 8010aca:	da08      	bge.n	8010ade <__swhatbuf_r+0x24>
 8010acc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	602a      	str	r2, [r5, #0]
 8010ad4:	061a      	lsls	r2, r3, #24
 8010ad6:	d410      	bmi.n	8010afa <__swhatbuf_r+0x40>
 8010ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010adc:	e00e      	b.n	8010afc <__swhatbuf_r+0x42>
 8010ade:	466a      	mov	r2, sp
 8010ae0:	f001 f980 	bl	8011de4 <_fstat_r>
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	dbf1      	blt.n	8010acc <__swhatbuf_r+0x12>
 8010ae8:	9a01      	ldr	r2, [sp, #4]
 8010aea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010aee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010af2:	425a      	negs	r2, r3
 8010af4:	415a      	adcs	r2, r3
 8010af6:	602a      	str	r2, [r5, #0]
 8010af8:	e7ee      	b.n	8010ad8 <__swhatbuf_r+0x1e>
 8010afa:	2340      	movs	r3, #64	; 0x40
 8010afc:	2000      	movs	r0, #0
 8010afe:	6023      	str	r3, [r4, #0]
 8010b00:	b016      	add	sp, #88	; 0x58
 8010b02:	bd70      	pop	{r4, r5, r6, pc}

08010b04 <__smakebuf_r>:
 8010b04:	898b      	ldrh	r3, [r1, #12]
 8010b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b08:	079d      	lsls	r5, r3, #30
 8010b0a:	4606      	mov	r6, r0
 8010b0c:	460c      	mov	r4, r1
 8010b0e:	d507      	bpl.n	8010b20 <__smakebuf_r+0x1c>
 8010b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b14:	6023      	str	r3, [r4, #0]
 8010b16:	6123      	str	r3, [r4, #16]
 8010b18:	2301      	movs	r3, #1
 8010b1a:	6163      	str	r3, [r4, #20]
 8010b1c:	b002      	add	sp, #8
 8010b1e:	bd70      	pop	{r4, r5, r6, pc}
 8010b20:	ab01      	add	r3, sp, #4
 8010b22:	466a      	mov	r2, sp
 8010b24:	f7ff ffc9 	bl	8010aba <__swhatbuf_r>
 8010b28:	9900      	ldr	r1, [sp, #0]
 8010b2a:	4605      	mov	r5, r0
 8010b2c:	4630      	mov	r0, r6
 8010b2e:	f000 fd87 	bl	8011640 <_malloc_r>
 8010b32:	b948      	cbnz	r0, 8010b48 <__smakebuf_r+0x44>
 8010b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b38:	059a      	lsls	r2, r3, #22
 8010b3a:	d4ef      	bmi.n	8010b1c <__smakebuf_r+0x18>
 8010b3c:	f023 0303 	bic.w	r3, r3, #3
 8010b40:	f043 0302 	orr.w	r3, r3, #2
 8010b44:	81a3      	strh	r3, [r4, #12]
 8010b46:	e7e3      	b.n	8010b10 <__smakebuf_r+0xc>
 8010b48:	4b0d      	ldr	r3, [pc, #52]	; (8010b80 <__smakebuf_r+0x7c>)
 8010b4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010b4c:	89a3      	ldrh	r3, [r4, #12]
 8010b4e:	6020      	str	r0, [r4, #0]
 8010b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b54:	81a3      	strh	r3, [r4, #12]
 8010b56:	9b00      	ldr	r3, [sp, #0]
 8010b58:	6163      	str	r3, [r4, #20]
 8010b5a:	9b01      	ldr	r3, [sp, #4]
 8010b5c:	6120      	str	r0, [r4, #16]
 8010b5e:	b15b      	cbz	r3, 8010b78 <__smakebuf_r+0x74>
 8010b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b64:	4630      	mov	r0, r6
 8010b66:	f001 f94f 	bl	8011e08 <_isatty_r>
 8010b6a:	b128      	cbz	r0, 8010b78 <__smakebuf_r+0x74>
 8010b6c:	89a3      	ldrh	r3, [r4, #12]
 8010b6e:	f023 0303 	bic.w	r3, r3, #3
 8010b72:	f043 0301 	orr.w	r3, r3, #1
 8010b76:	81a3      	strh	r3, [r4, #12]
 8010b78:	89a0      	ldrh	r0, [r4, #12]
 8010b7a:	4305      	orrs	r5, r0
 8010b7c:	81a5      	strh	r5, [r4, #12]
 8010b7e:	e7cd      	b.n	8010b1c <__smakebuf_r+0x18>
 8010b80:	08010209 	.word	0x08010209

08010b84 <malloc>:
 8010b84:	4b02      	ldr	r3, [pc, #8]	; (8010b90 <malloc+0xc>)
 8010b86:	4601      	mov	r1, r0
 8010b88:	6818      	ldr	r0, [r3, #0]
 8010b8a:	f000 bd59 	b.w	8011640 <_malloc_r>
 8010b8e:	bf00      	nop
 8010b90:	20000024 	.word	0x20000024

08010b94 <__ascii_mbtowc>:
 8010b94:	b082      	sub	sp, #8
 8010b96:	b901      	cbnz	r1, 8010b9a <__ascii_mbtowc+0x6>
 8010b98:	a901      	add	r1, sp, #4
 8010b9a:	b142      	cbz	r2, 8010bae <__ascii_mbtowc+0x1a>
 8010b9c:	b14b      	cbz	r3, 8010bb2 <__ascii_mbtowc+0x1e>
 8010b9e:	7813      	ldrb	r3, [r2, #0]
 8010ba0:	600b      	str	r3, [r1, #0]
 8010ba2:	7812      	ldrb	r2, [r2, #0]
 8010ba4:	1e10      	subs	r0, r2, #0
 8010ba6:	bf18      	it	ne
 8010ba8:	2001      	movne	r0, #1
 8010baa:	b002      	add	sp, #8
 8010bac:	4770      	bx	lr
 8010bae:	4610      	mov	r0, r2
 8010bb0:	e7fb      	b.n	8010baa <__ascii_mbtowc+0x16>
 8010bb2:	f06f 0001 	mvn.w	r0, #1
 8010bb6:	e7f8      	b.n	8010baa <__ascii_mbtowc+0x16>

08010bb8 <_Balloc>:
 8010bb8:	b570      	push	{r4, r5, r6, lr}
 8010bba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	460d      	mov	r5, r1
 8010bc0:	b976      	cbnz	r6, 8010be0 <_Balloc+0x28>
 8010bc2:	2010      	movs	r0, #16
 8010bc4:	f7ff ffde 	bl	8010b84 <malloc>
 8010bc8:	4602      	mov	r2, r0
 8010bca:	6260      	str	r0, [r4, #36]	; 0x24
 8010bcc:	b920      	cbnz	r0, 8010bd8 <_Balloc+0x20>
 8010bce:	4b18      	ldr	r3, [pc, #96]	; (8010c30 <_Balloc+0x78>)
 8010bd0:	4818      	ldr	r0, [pc, #96]	; (8010c34 <_Balloc+0x7c>)
 8010bd2:	2166      	movs	r1, #102	; 0x66
 8010bd4:	f7fe fb98 	bl	800f308 <__assert_func>
 8010bd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010bdc:	6006      	str	r6, [r0, #0]
 8010bde:	60c6      	str	r6, [r0, #12]
 8010be0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010be2:	68f3      	ldr	r3, [r6, #12]
 8010be4:	b183      	cbz	r3, 8010c08 <_Balloc+0x50>
 8010be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010be8:	68db      	ldr	r3, [r3, #12]
 8010bea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010bee:	b9b8      	cbnz	r0, 8010c20 <_Balloc+0x68>
 8010bf0:	2101      	movs	r1, #1
 8010bf2:	fa01 f605 	lsl.w	r6, r1, r5
 8010bf6:	1d72      	adds	r2, r6, #5
 8010bf8:	0092      	lsls	r2, r2, #2
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	f000 fc9d 	bl	801153a <_calloc_r>
 8010c00:	b160      	cbz	r0, 8010c1c <_Balloc+0x64>
 8010c02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010c06:	e00e      	b.n	8010c26 <_Balloc+0x6e>
 8010c08:	2221      	movs	r2, #33	; 0x21
 8010c0a:	2104      	movs	r1, #4
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	f000 fc94 	bl	801153a <_calloc_r>
 8010c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c14:	60f0      	str	r0, [r6, #12]
 8010c16:	68db      	ldr	r3, [r3, #12]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d1e4      	bne.n	8010be6 <_Balloc+0x2e>
 8010c1c:	2000      	movs	r0, #0
 8010c1e:	bd70      	pop	{r4, r5, r6, pc}
 8010c20:	6802      	ldr	r2, [r0, #0]
 8010c22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010c26:	2300      	movs	r3, #0
 8010c28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010c2c:	e7f7      	b.n	8010c1e <_Balloc+0x66>
 8010c2e:	bf00      	nop
 8010c30:	08012952 	.word	0x08012952
 8010c34:	08012ab4 	.word	0x08012ab4

08010c38 <_Bfree>:
 8010c38:	b570      	push	{r4, r5, r6, lr}
 8010c3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010c3c:	4605      	mov	r5, r0
 8010c3e:	460c      	mov	r4, r1
 8010c40:	b976      	cbnz	r6, 8010c60 <_Bfree+0x28>
 8010c42:	2010      	movs	r0, #16
 8010c44:	f7ff ff9e 	bl	8010b84 <malloc>
 8010c48:	4602      	mov	r2, r0
 8010c4a:	6268      	str	r0, [r5, #36]	; 0x24
 8010c4c:	b920      	cbnz	r0, 8010c58 <_Bfree+0x20>
 8010c4e:	4b09      	ldr	r3, [pc, #36]	; (8010c74 <_Bfree+0x3c>)
 8010c50:	4809      	ldr	r0, [pc, #36]	; (8010c78 <_Bfree+0x40>)
 8010c52:	218a      	movs	r1, #138	; 0x8a
 8010c54:	f7fe fb58 	bl	800f308 <__assert_func>
 8010c58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c5c:	6006      	str	r6, [r0, #0]
 8010c5e:	60c6      	str	r6, [r0, #12]
 8010c60:	b13c      	cbz	r4, 8010c72 <_Bfree+0x3a>
 8010c62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010c64:	6862      	ldr	r2, [r4, #4]
 8010c66:	68db      	ldr	r3, [r3, #12]
 8010c68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010c6c:	6021      	str	r1, [r4, #0]
 8010c6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010c72:	bd70      	pop	{r4, r5, r6, pc}
 8010c74:	08012952 	.word	0x08012952
 8010c78:	08012ab4 	.word	0x08012ab4

08010c7c <__multadd>:
 8010c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c80:	690d      	ldr	r5, [r1, #16]
 8010c82:	4607      	mov	r7, r0
 8010c84:	460c      	mov	r4, r1
 8010c86:	461e      	mov	r6, r3
 8010c88:	f101 0c14 	add.w	ip, r1, #20
 8010c8c:	2000      	movs	r0, #0
 8010c8e:	f8dc 3000 	ldr.w	r3, [ip]
 8010c92:	b299      	uxth	r1, r3
 8010c94:	fb02 6101 	mla	r1, r2, r1, r6
 8010c98:	0c1e      	lsrs	r6, r3, #16
 8010c9a:	0c0b      	lsrs	r3, r1, #16
 8010c9c:	fb02 3306 	mla	r3, r2, r6, r3
 8010ca0:	b289      	uxth	r1, r1
 8010ca2:	3001      	adds	r0, #1
 8010ca4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010ca8:	4285      	cmp	r5, r0
 8010caa:	f84c 1b04 	str.w	r1, [ip], #4
 8010cae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010cb2:	dcec      	bgt.n	8010c8e <__multadd+0x12>
 8010cb4:	b30e      	cbz	r6, 8010cfa <__multadd+0x7e>
 8010cb6:	68a3      	ldr	r3, [r4, #8]
 8010cb8:	42ab      	cmp	r3, r5
 8010cba:	dc19      	bgt.n	8010cf0 <__multadd+0x74>
 8010cbc:	6861      	ldr	r1, [r4, #4]
 8010cbe:	4638      	mov	r0, r7
 8010cc0:	3101      	adds	r1, #1
 8010cc2:	f7ff ff79 	bl	8010bb8 <_Balloc>
 8010cc6:	4680      	mov	r8, r0
 8010cc8:	b928      	cbnz	r0, 8010cd6 <__multadd+0x5a>
 8010cca:	4602      	mov	r2, r0
 8010ccc:	4b0c      	ldr	r3, [pc, #48]	; (8010d00 <__multadd+0x84>)
 8010cce:	480d      	ldr	r0, [pc, #52]	; (8010d04 <__multadd+0x88>)
 8010cd0:	21b5      	movs	r1, #181	; 0xb5
 8010cd2:	f7fe fb19 	bl	800f308 <__assert_func>
 8010cd6:	6922      	ldr	r2, [r4, #16]
 8010cd8:	3202      	adds	r2, #2
 8010cda:	f104 010c 	add.w	r1, r4, #12
 8010cde:	0092      	lsls	r2, r2, #2
 8010ce0:	300c      	adds	r0, #12
 8010ce2:	f7fc fcef 	bl	800d6c4 <memcpy>
 8010ce6:	4621      	mov	r1, r4
 8010ce8:	4638      	mov	r0, r7
 8010cea:	f7ff ffa5 	bl	8010c38 <_Bfree>
 8010cee:	4644      	mov	r4, r8
 8010cf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010cf4:	3501      	adds	r5, #1
 8010cf6:	615e      	str	r6, [r3, #20]
 8010cf8:	6125      	str	r5, [r4, #16]
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d00:	080129c4 	.word	0x080129c4
 8010d04:	08012ab4 	.word	0x08012ab4

08010d08 <__s2b>:
 8010d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d0c:	460c      	mov	r4, r1
 8010d0e:	4615      	mov	r5, r2
 8010d10:	461f      	mov	r7, r3
 8010d12:	2209      	movs	r2, #9
 8010d14:	3308      	adds	r3, #8
 8010d16:	4606      	mov	r6, r0
 8010d18:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d1c:	2100      	movs	r1, #0
 8010d1e:	2201      	movs	r2, #1
 8010d20:	429a      	cmp	r2, r3
 8010d22:	db09      	blt.n	8010d38 <__s2b+0x30>
 8010d24:	4630      	mov	r0, r6
 8010d26:	f7ff ff47 	bl	8010bb8 <_Balloc>
 8010d2a:	b940      	cbnz	r0, 8010d3e <__s2b+0x36>
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	4b19      	ldr	r3, [pc, #100]	; (8010d94 <__s2b+0x8c>)
 8010d30:	4819      	ldr	r0, [pc, #100]	; (8010d98 <__s2b+0x90>)
 8010d32:	21ce      	movs	r1, #206	; 0xce
 8010d34:	f7fe fae8 	bl	800f308 <__assert_func>
 8010d38:	0052      	lsls	r2, r2, #1
 8010d3a:	3101      	adds	r1, #1
 8010d3c:	e7f0      	b.n	8010d20 <__s2b+0x18>
 8010d3e:	9b08      	ldr	r3, [sp, #32]
 8010d40:	6143      	str	r3, [r0, #20]
 8010d42:	2d09      	cmp	r5, #9
 8010d44:	f04f 0301 	mov.w	r3, #1
 8010d48:	6103      	str	r3, [r0, #16]
 8010d4a:	dd16      	ble.n	8010d7a <__s2b+0x72>
 8010d4c:	f104 0909 	add.w	r9, r4, #9
 8010d50:	46c8      	mov	r8, r9
 8010d52:	442c      	add	r4, r5
 8010d54:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010d58:	4601      	mov	r1, r0
 8010d5a:	3b30      	subs	r3, #48	; 0x30
 8010d5c:	220a      	movs	r2, #10
 8010d5e:	4630      	mov	r0, r6
 8010d60:	f7ff ff8c 	bl	8010c7c <__multadd>
 8010d64:	45a0      	cmp	r8, r4
 8010d66:	d1f5      	bne.n	8010d54 <__s2b+0x4c>
 8010d68:	f1a5 0408 	sub.w	r4, r5, #8
 8010d6c:	444c      	add	r4, r9
 8010d6e:	1b2d      	subs	r5, r5, r4
 8010d70:	1963      	adds	r3, r4, r5
 8010d72:	42bb      	cmp	r3, r7
 8010d74:	db04      	blt.n	8010d80 <__s2b+0x78>
 8010d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d7a:	340a      	adds	r4, #10
 8010d7c:	2509      	movs	r5, #9
 8010d7e:	e7f6      	b.n	8010d6e <__s2b+0x66>
 8010d80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010d84:	4601      	mov	r1, r0
 8010d86:	3b30      	subs	r3, #48	; 0x30
 8010d88:	220a      	movs	r2, #10
 8010d8a:	4630      	mov	r0, r6
 8010d8c:	f7ff ff76 	bl	8010c7c <__multadd>
 8010d90:	e7ee      	b.n	8010d70 <__s2b+0x68>
 8010d92:	bf00      	nop
 8010d94:	080129c4 	.word	0x080129c4
 8010d98:	08012ab4 	.word	0x08012ab4

08010d9c <__hi0bits>:
 8010d9c:	0c03      	lsrs	r3, r0, #16
 8010d9e:	041b      	lsls	r3, r3, #16
 8010da0:	b9d3      	cbnz	r3, 8010dd8 <__hi0bits+0x3c>
 8010da2:	0400      	lsls	r0, r0, #16
 8010da4:	2310      	movs	r3, #16
 8010da6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010daa:	bf04      	itt	eq
 8010dac:	0200      	lsleq	r0, r0, #8
 8010dae:	3308      	addeq	r3, #8
 8010db0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010db4:	bf04      	itt	eq
 8010db6:	0100      	lsleq	r0, r0, #4
 8010db8:	3304      	addeq	r3, #4
 8010dba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010dbe:	bf04      	itt	eq
 8010dc0:	0080      	lsleq	r0, r0, #2
 8010dc2:	3302      	addeq	r3, #2
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	db05      	blt.n	8010dd4 <__hi0bits+0x38>
 8010dc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010dcc:	f103 0301 	add.w	r3, r3, #1
 8010dd0:	bf08      	it	eq
 8010dd2:	2320      	moveq	r3, #32
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	4770      	bx	lr
 8010dd8:	2300      	movs	r3, #0
 8010dda:	e7e4      	b.n	8010da6 <__hi0bits+0xa>

08010ddc <__lo0bits>:
 8010ddc:	6803      	ldr	r3, [r0, #0]
 8010dde:	f013 0207 	ands.w	r2, r3, #7
 8010de2:	4601      	mov	r1, r0
 8010de4:	d00b      	beq.n	8010dfe <__lo0bits+0x22>
 8010de6:	07da      	lsls	r2, r3, #31
 8010de8:	d423      	bmi.n	8010e32 <__lo0bits+0x56>
 8010dea:	0798      	lsls	r0, r3, #30
 8010dec:	bf49      	itett	mi
 8010dee:	085b      	lsrmi	r3, r3, #1
 8010df0:	089b      	lsrpl	r3, r3, #2
 8010df2:	2001      	movmi	r0, #1
 8010df4:	600b      	strmi	r3, [r1, #0]
 8010df6:	bf5c      	itt	pl
 8010df8:	600b      	strpl	r3, [r1, #0]
 8010dfa:	2002      	movpl	r0, #2
 8010dfc:	4770      	bx	lr
 8010dfe:	b298      	uxth	r0, r3
 8010e00:	b9a8      	cbnz	r0, 8010e2e <__lo0bits+0x52>
 8010e02:	0c1b      	lsrs	r3, r3, #16
 8010e04:	2010      	movs	r0, #16
 8010e06:	b2da      	uxtb	r2, r3
 8010e08:	b90a      	cbnz	r2, 8010e0e <__lo0bits+0x32>
 8010e0a:	3008      	adds	r0, #8
 8010e0c:	0a1b      	lsrs	r3, r3, #8
 8010e0e:	071a      	lsls	r2, r3, #28
 8010e10:	bf04      	itt	eq
 8010e12:	091b      	lsreq	r3, r3, #4
 8010e14:	3004      	addeq	r0, #4
 8010e16:	079a      	lsls	r2, r3, #30
 8010e18:	bf04      	itt	eq
 8010e1a:	089b      	lsreq	r3, r3, #2
 8010e1c:	3002      	addeq	r0, #2
 8010e1e:	07da      	lsls	r2, r3, #31
 8010e20:	d403      	bmi.n	8010e2a <__lo0bits+0x4e>
 8010e22:	085b      	lsrs	r3, r3, #1
 8010e24:	f100 0001 	add.w	r0, r0, #1
 8010e28:	d005      	beq.n	8010e36 <__lo0bits+0x5a>
 8010e2a:	600b      	str	r3, [r1, #0]
 8010e2c:	4770      	bx	lr
 8010e2e:	4610      	mov	r0, r2
 8010e30:	e7e9      	b.n	8010e06 <__lo0bits+0x2a>
 8010e32:	2000      	movs	r0, #0
 8010e34:	4770      	bx	lr
 8010e36:	2020      	movs	r0, #32
 8010e38:	4770      	bx	lr
	...

08010e3c <__i2b>:
 8010e3c:	b510      	push	{r4, lr}
 8010e3e:	460c      	mov	r4, r1
 8010e40:	2101      	movs	r1, #1
 8010e42:	f7ff feb9 	bl	8010bb8 <_Balloc>
 8010e46:	4602      	mov	r2, r0
 8010e48:	b928      	cbnz	r0, 8010e56 <__i2b+0x1a>
 8010e4a:	4b05      	ldr	r3, [pc, #20]	; (8010e60 <__i2b+0x24>)
 8010e4c:	4805      	ldr	r0, [pc, #20]	; (8010e64 <__i2b+0x28>)
 8010e4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010e52:	f7fe fa59 	bl	800f308 <__assert_func>
 8010e56:	2301      	movs	r3, #1
 8010e58:	6144      	str	r4, [r0, #20]
 8010e5a:	6103      	str	r3, [r0, #16]
 8010e5c:	bd10      	pop	{r4, pc}
 8010e5e:	bf00      	nop
 8010e60:	080129c4 	.word	0x080129c4
 8010e64:	08012ab4 	.word	0x08012ab4

08010e68 <__multiply>:
 8010e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e6c:	4691      	mov	r9, r2
 8010e6e:	690a      	ldr	r2, [r1, #16]
 8010e70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010e74:	429a      	cmp	r2, r3
 8010e76:	bfb8      	it	lt
 8010e78:	460b      	movlt	r3, r1
 8010e7a:	460c      	mov	r4, r1
 8010e7c:	bfbc      	itt	lt
 8010e7e:	464c      	movlt	r4, r9
 8010e80:	4699      	movlt	r9, r3
 8010e82:	6927      	ldr	r7, [r4, #16]
 8010e84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010e88:	68a3      	ldr	r3, [r4, #8]
 8010e8a:	6861      	ldr	r1, [r4, #4]
 8010e8c:	eb07 060a 	add.w	r6, r7, sl
 8010e90:	42b3      	cmp	r3, r6
 8010e92:	b085      	sub	sp, #20
 8010e94:	bfb8      	it	lt
 8010e96:	3101      	addlt	r1, #1
 8010e98:	f7ff fe8e 	bl	8010bb8 <_Balloc>
 8010e9c:	b930      	cbnz	r0, 8010eac <__multiply+0x44>
 8010e9e:	4602      	mov	r2, r0
 8010ea0:	4b44      	ldr	r3, [pc, #272]	; (8010fb4 <__multiply+0x14c>)
 8010ea2:	4845      	ldr	r0, [pc, #276]	; (8010fb8 <__multiply+0x150>)
 8010ea4:	f240 115d 	movw	r1, #349	; 0x15d
 8010ea8:	f7fe fa2e 	bl	800f308 <__assert_func>
 8010eac:	f100 0514 	add.w	r5, r0, #20
 8010eb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010eb4:	462b      	mov	r3, r5
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	4543      	cmp	r3, r8
 8010eba:	d321      	bcc.n	8010f00 <__multiply+0x98>
 8010ebc:	f104 0314 	add.w	r3, r4, #20
 8010ec0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010ec4:	f109 0314 	add.w	r3, r9, #20
 8010ec8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010ecc:	9202      	str	r2, [sp, #8]
 8010ece:	1b3a      	subs	r2, r7, r4
 8010ed0:	3a15      	subs	r2, #21
 8010ed2:	f022 0203 	bic.w	r2, r2, #3
 8010ed6:	3204      	adds	r2, #4
 8010ed8:	f104 0115 	add.w	r1, r4, #21
 8010edc:	428f      	cmp	r7, r1
 8010ede:	bf38      	it	cc
 8010ee0:	2204      	movcc	r2, #4
 8010ee2:	9201      	str	r2, [sp, #4]
 8010ee4:	9a02      	ldr	r2, [sp, #8]
 8010ee6:	9303      	str	r3, [sp, #12]
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d80c      	bhi.n	8010f06 <__multiply+0x9e>
 8010eec:	2e00      	cmp	r6, #0
 8010eee:	dd03      	ble.n	8010ef8 <__multiply+0x90>
 8010ef0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d05a      	beq.n	8010fae <__multiply+0x146>
 8010ef8:	6106      	str	r6, [r0, #16]
 8010efa:	b005      	add	sp, #20
 8010efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f00:	f843 2b04 	str.w	r2, [r3], #4
 8010f04:	e7d8      	b.n	8010eb8 <__multiply+0x50>
 8010f06:	f8b3 a000 	ldrh.w	sl, [r3]
 8010f0a:	f1ba 0f00 	cmp.w	sl, #0
 8010f0e:	d024      	beq.n	8010f5a <__multiply+0xf2>
 8010f10:	f104 0e14 	add.w	lr, r4, #20
 8010f14:	46a9      	mov	r9, r5
 8010f16:	f04f 0c00 	mov.w	ip, #0
 8010f1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010f1e:	f8d9 1000 	ldr.w	r1, [r9]
 8010f22:	fa1f fb82 	uxth.w	fp, r2
 8010f26:	b289      	uxth	r1, r1
 8010f28:	fb0a 110b 	mla	r1, sl, fp, r1
 8010f2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010f30:	f8d9 2000 	ldr.w	r2, [r9]
 8010f34:	4461      	add	r1, ip
 8010f36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010f3a:	fb0a c20b 	mla	r2, sl, fp, ip
 8010f3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010f42:	b289      	uxth	r1, r1
 8010f44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010f48:	4577      	cmp	r7, lr
 8010f4a:	f849 1b04 	str.w	r1, [r9], #4
 8010f4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010f52:	d8e2      	bhi.n	8010f1a <__multiply+0xb2>
 8010f54:	9a01      	ldr	r2, [sp, #4]
 8010f56:	f845 c002 	str.w	ip, [r5, r2]
 8010f5a:	9a03      	ldr	r2, [sp, #12]
 8010f5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010f60:	3304      	adds	r3, #4
 8010f62:	f1b9 0f00 	cmp.w	r9, #0
 8010f66:	d020      	beq.n	8010faa <__multiply+0x142>
 8010f68:	6829      	ldr	r1, [r5, #0]
 8010f6a:	f104 0c14 	add.w	ip, r4, #20
 8010f6e:	46ae      	mov	lr, r5
 8010f70:	f04f 0a00 	mov.w	sl, #0
 8010f74:	f8bc b000 	ldrh.w	fp, [ip]
 8010f78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010f7c:	fb09 220b 	mla	r2, r9, fp, r2
 8010f80:	4492      	add	sl, r2
 8010f82:	b289      	uxth	r1, r1
 8010f84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010f88:	f84e 1b04 	str.w	r1, [lr], #4
 8010f8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010f90:	f8be 1000 	ldrh.w	r1, [lr]
 8010f94:	0c12      	lsrs	r2, r2, #16
 8010f96:	fb09 1102 	mla	r1, r9, r2, r1
 8010f9a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010f9e:	4567      	cmp	r7, ip
 8010fa0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010fa4:	d8e6      	bhi.n	8010f74 <__multiply+0x10c>
 8010fa6:	9a01      	ldr	r2, [sp, #4]
 8010fa8:	50a9      	str	r1, [r5, r2]
 8010faa:	3504      	adds	r5, #4
 8010fac:	e79a      	b.n	8010ee4 <__multiply+0x7c>
 8010fae:	3e01      	subs	r6, #1
 8010fb0:	e79c      	b.n	8010eec <__multiply+0x84>
 8010fb2:	bf00      	nop
 8010fb4:	080129c4 	.word	0x080129c4
 8010fb8:	08012ab4 	.word	0x08012ab4

08010fbc <__pow5mult>:
 8010fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fc0:	4615      	mov	r5, r2
 8010fc2:	f012 0203 	ands.w	r2, r2, #3
 8010fc6:	4606      	mov	r6, r0
 8010fc8:	460f      	mov	r7, r1
 8010fca:	d007      	beq.n	8010fdc <__pow5mult+0x20>
 8010fcc:	4c25      	ldr	r4, [pc, #148]	; (8011064 <__pow5mult+0xa8>)
 8010fce:	3a01      	subs	r2, #1
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010fd6:	f7ff fe51 	bl	8010c7c <__multadd>
 8010fda:	4607      	mov	r7, r0
 8010fdc:	10ad      	asrs	r5, r5, #2
 8010fde:	d03d      	beq.n	801105c <__pow5mult+0xa0>
 8010fe0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010fe2:	b97c      	cbnz	r4, 8011004 <__pow5mult+0x48>
 8010fe4:	2010      	movs	r0, #16
 8010fe6:	f7ff fdcd 	bl	8010b84 <malloc>
 8010fea:	4602      	mov	r2, r0
 8010fec:	6270      	str	r0, [r6, #36]	; 0x24
 8010fee:	b928      	cbnz	r0, 8010ffc <__pow5mult+0x40>
 8010ff0:	4b1d      	ldr	r3, [pc, #116]	; (8011068 <__pow5mult+0xac>)
 8010ff2:	481e      	ldr	r0, [pc, #120]	; (801106c <__pow5mult+0xb0>)
 8010ff4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010ff8:	f7fe f986 	bl	800f308 <__assert_func>
 8010ffc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011000:	6004      	str	r4, [r0, #0]
 8011002:	60c4      	str	r4, [r0, #12]
 8011004:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011008:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801100c:	b94c      	cbnz	r4, 8011022 <__pow5mult+0x66>
 801100e:	f240 2171 	movw	r1, #625	; 0x271
 8011012:	4630      	mov	r0, r6
 8011014:	f7ff ff12 	bl	8010e3c <__i2b>
 8011018:	2300      	movs	r3, #0
 801101a:	f8c8 0008 	str.w	r0, [r8, #8]
 801101e:	4604      	mov	r4, r0
 8011020:	6003      	str	r3, [r0, #0]
 8011022:	f04f 0900 	mov.w	r9, #0
 8011026:	07eb      	lsls	r3, r5, #31
 8011028:	d50a      	bpl.n	8011040 <__pow5mult+0x84>
 801102a:	4639      	mov	r1, r7
 801102c:	4622      	mov	r2, r4
 801102e:	4630      	mov	r0, r6
 8011030:	f7ff ff1a 	bl	8010e68 <__multiply>
 8011034:	4639      	mov	r1, r7
 8011036:	4680      	mov	r8, r0
 8011038:	4630      	mov	r0, r6
 801103a:	f7ff fdfd 	bl	8010c38 <_Bfree>
 801103e:	4647      	mov	r7, r8
 8011040:	106d      	asrs	r5, r5, #1
 8011042:	d00b      	beq.n	801105c <__pow5mult+0xa0>
 8011044:	6820      	ldr	r0, [r4, #0]
 8011046:	b938      	cbnz	r0, 8011058 <__pow5mult+0x9c>
 8011048:	4622      	mov	r2, r4
 801104a:	4621      	mov	r1, r4
 801104c:	4630      	mov	r0, r6
 801104e:	f7ff ff0b 	bl	8010e68 <__multiply>
 8011052:	6020      	str	r0, [r4, #0]
 8011054:	f8c0 9000 	str.w	r9, [r0]
 8011058:	4604      	mov	r4, r0
 801105a:	e7e4      	b.n	8011026 <__pow5mult+0x6a>
 801105c:	4638      	mov	r0, r7
 801105e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011062:	bf00      	nop
 8011064:	08012c00 	.word	0x08012c00
 8011068:	08012952 	.word	0x08012952
 801106c:	08012ab4 	.word	0x08012ab4

08011070 <__lshift>:
 8011070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011074:	460c      	mov	r4, r1
 8011076:	6849      	ldr	r1, [r1, #4]
 8011078:	6923      	ldr	r3, [r4, #16]
 801107a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801107e:	68a3      	ldr	r3, [r4, #8]
 8011080:	4607      	mov	r7, r0
 8011082:	4691      	mov	r9, r2
 8011084:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011088:	f108 0601 	add.w	r6, r8, #1
 801108c:	42b3      	cmp	r3, r6
 801108e:	db0b      	blt.n	80110a8 <__lshift+0x38>
 8011090:	4638      	mov	r0, r7
 8011092:	f7ff fd91 	bl	8010bb8 <_Balloc>
 8011096:	4605      	mov	r5, r0
 8011098:	b948      	cbnz	r0, 80110ae <__lshift+0x3e>
 801109a:	4602      	mov	r2, r0
 801109c:	4b2a      	ldr	r3, [pc, #168]	; (8011148 <__lshift+0xd8>)
 801109e:	482b      	ldr	r0, [pc, #172]	; (801114c <__lshift+0xdc>)
 80110a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80110a4:	f7fe f930 	bl	800f308 <__assert_func>
 80110a8:	3101      	adds	r1, #1
 80110aa:	005b      	lsls	r3, r3, #1
 80110ac:	e7ee      	b.n	801108c <__lshift+0x1c>
 80110ae:	2300      	movs	r3, #0
 80110b0:	f100 0114 	add.w	r1, r0, #20
 80110b4:	f100 0210 	add.w	r2, r0, #16
 80110b8:	4618      	mov	r0, r3
 80110ba:	4553      	cmp	r3, sl
 80110bc:	db37      	blt.n	801112e <__lshift+0xbe>
 80110be:	6920      	ldr	r0, [r4, #16]
 80110c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80110c4:	f104 0314 	add.w	r3, r4, #20
 80110c8:	f019 091f 	ands.w	r9, r9, #31
 80110cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80110d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80110d4:	d02f      	beq.n	8011136 <__lshift+0xc6>
 80110d6:	f1c9 0e20 	rsb	lr, r9, #32
 80110da:	468a      	mov	sl, r1
 80110dc:	f04f 0c00 	mov.w	ip, #0
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	fa02 f209 	lsl.w	r2, r2, r9
 80110e6:	ea42 020c 	orr.w	r2, r2, ip
 80110ea:	f84a 2b04 	str.w	r2, [sl], #4
 80110ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80110f2:	4298      	cmp	r0, r3
 80110f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80110f8:	d8f2      	bhi.n	80110e0 <__lshift+0x70>
 80110fa:	1b03      	subs	r3, r0, r4
 80110fc:	3b15      	subs	r3, #21
 80110fe:	f023 0303 	bic.w	r3, r3, #3
 8011102:	3304      	adds	r3, #4
 8011104:	f104 0215 	add.w	r2, r4, #21
 8011108:	4290      	cmp	r0, r2
 801110a:	bf38      	it	cc
 801110c:	2304      	movcc	r3, #4
 801110e:	f841 c003 	str.w	ip, [r1, r3]
 8011112:	f1bc 0f00 	cmp.w	ip, #0
 8011116:	d001      	beq.n	801111c <__lshift+0xac>
 8011118:	f108 0602 	add.w	r6, r8, #2
 801111c:	3e01      	subs	r6, #1
 801111e:	4638      	mov	r0, r7
 8011120:	612e      	str	r6, [r5, #16]
 8011122:	4621      	mov	r1, r4
 8011124:	f7ff fd88 	bl	8010c38 <_Bfree>
 8011128:	4628      	mov	r0, r5
 801112a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801112e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011132:	3301      	adds	r3, #1
 8011134:	e7c1      	b.n	80110ba <__lshift+0x4a>
 8011136:	3904      	subs	r1, #4
 8011138:	f853 2b04 	ldr.w	r2, [r3], #4
 801113c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011140:	4298      	cmp	r0, r3
 8011142:	d8f9      	bhi.n	8011138 <__lshift+0xc8>
 8011144:	e7ea      	b.n	801111c <__lshift+0xac>
 8011146:	bf00      	nop
 8011148:	080129c4 	.word	0x080129c4
 801114c:	08012ab4 	.word	0x08012ab4

08011150 <__mcmp>:
 8011150:	b530      	push	{r4, r5, lr}
 8011152:	6902      	ldr	r2, [r0, #16]
 8011154:	690c      	ldr	r4, [r1, #16]
 8011156:	1b12      	subs	r2, r2, r4
 8011158:	d10e      	bne.n	8011178 <__mcmp+0x28>
 801115a:	f100 0314 	add.w	r3, r0, #20
 801115e:	3114      	adds	r1, #20
 8011160:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011164:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011168:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801116c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011170:	42a5      	cmp	r5, r4
 8011172:	d003      	beq.n	801117c <__mcmp+0x2c>
 8011174:	d305      	bcc.n	8011182 <__mcmp+0x32>
 8011176:	2201      	movs	r2, #1
 8011178:	4610      	mov	r0, r2
 801117a:	bd30      	pop	{r4, r5, pc}
 801117c:	4283      	cmp	r3, r0
 801117e:	d3f3      	bcc.n	8011168 <__mcmp+0x18>
 8011180:	e7fa      	b.n	8011178 <__mcmp+0x28>
 8011182:	f04f 32ff 	mov.w	r2, #4294967295
 8011186:	e7f7      	b.n	8011178 <__mcmp+0x28>

08011188 <__mdiff>:
 8011188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801118c:	460c      	mov	r4, r1
 801118e:	4606      	mov	r6, r0
 8011190:	4611      	mov	r1, r2
 8011192:	4620      	mov	r0, r4
 8011194:	4690      	mov	r8, r2
 8011196:	f7ff ffdb 	bl	8011150 <__mcmp>
 801119a:	1e05      	subs	r5, r0, #0
 801119c:	d110      	bne.n	80111c0 <__mdiff+0x38>
 801119e:	4629      	mov	r1, r5
 80111a0:	4630      	mov	r0, r6
 80111a2:	f7ff fd09 	bl	8010bb8 <_Balloc>
 80111a6:	b930      	cbnz	r0, 80111b6 <__mdiff+0x2e>
 80111a8:	4b3a      	ldr	r3, [pc, #232]	; (8011294 <__mdiff+0x10c>)
 80111aa:	4602      	mov	r2, r0
 80111ac:	f240 2132 	movw	r1, #562	; 0x232
 80111b0:	4839      	ldr	r0, [pc, #228]	; (8011298 <__mdiff+0x110>)
 80111b2:	f7fe f8a9 	bl	800f308 <__assert_func>
 80111b6:	2301      	movs	r3, #1
 80111b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80111bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c0:	bfa4      	itt	ge
 80111c2:	4643      	movge	r3, r8
 80111c4:	46a0      	movge	r8, r4
 80111c6:	4630      	mov	r0, r6
 80111c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80111cc:	bfa6      	itte	ge
 80111ce:	461c      	movge	r4, r3
 80111d0:	2500      	movge	r5, #0
 80111d2:	2501      	movlt	r5, #1
 80111d4:	f7ff fcf0 	bl	8010bb8 <_Balloc>
 80111d8:	b920      	cbnz	r0, 80111e4 <__mdiff+0x5c>
 80111da:	4b2e      	ldr	r3, [pc, #184]	; (8011294 <__mdiff+0x10c>)
 80111dc:	4602      	mov	r2, r0
 80111de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80111e2:	e7e5      	b.n	80111b0 <__mdiff+0x28>
 80111e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80111e8:	6926      	ldr	r6, [r4, #16]
 80111ea:	60c5      	str	r5, [r0, #12]
 80111ec:	f104 0914 	add.w	r9, r4, #20
 80111f0:	f108 0514 	add.w	r5, r8, #20
 80111f4:	f100 0e14 	add.w	lr, r0, #20
 80111f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80111fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011200:	f108 0210 	add.w	r2, r8, #16
 8011204:	46f2      	mov	sl, lr
 8011206:	2100      	movs	r1, #0
 8011208:	f859 3b04 	ldr.w	r3, [r9], #4
 801120c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011210:	fa1f f883 	uxth.w	r8, r3
 8011214:	fa11 f18b 	uxtah	r1, r1, fp
 8011218:	0c1b      	lsrs	r3, r3, #16
 801121a:	eba1 0808 	sub.w	r8, r1, r8
 801121e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011222:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011226:	fa1f f888 	uxth.w	r8, r8
 801122a:	1419      	asrs	r1, r3, #16
 801122c:	454e      	cmp	r6, r9
 801122e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011232:	f84a 3b04 	str.w	r3, [sl], #4
 8011236:	d8e7      	bhi.n	8011208 <__mdiff+0x80>
 8011238:	1b33      	subs	r3, r6, r4
 801123a:	3b15      	subs	r3, #21
 801123c:	f023 0303 	bic.w	r3, r3, #3
 8011240:	3304      	adds	r3, #4
 8011242:	3415      	adds	r4, #21
 8011244:	42a6      	cmp	r6, r4
 8011246:	bf38      	it	cc
 8011248:	2304      	movcc	r3, #4
 801124a:	441d      	add	r5, r3
 801124c:	4473      	add	r3, lr
 801124e:	469e      	mov	lr, r3
 8011250:	462e      	mov	r6, r5
 8011252:	4566      	cmp	r6, ip
 8011254:	d30e      	bcc.n	8011274 <__mdiff+0xec>
 8011256:	f10c 0203 	add.w	r2, ip, #3
 801125a:	1b52      	subs	r2, r2, r5
 801125c:	f022 0203 	bic.w	r2, r2, #3
 8011260:	3d03      	subs	r5, #3
 8011262:	45ac      	cmp	ip, r5
 8011264:	bf38      	it	cc
 8011266:	2200      	movcc	r2, #0
 8011268:	441a      	add	r2, r3
 801126a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801126e:	b17b      	cbz	r3, 8011290 <__mdiff+0x108>
 8011270:	6107      	str	r7, [r0, #16]
 8011272:	e7a3      	b.n	80111bc <__mdiff+0x34>
 8011274:	f856 8b04 	ldr.w	r8, [r6], #4
 8011278:	fa11 f288 	uxtah	r2, r1, r8
 801127c:	1414      	asrs	r4, r2, #16
 801127e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011282:	b292      	uxth	r2, r2
 8011284:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011288:	f84e 2b04 	str.w	r2, [lr], #4
 801128c:	1421      	asrs	r1, r4, #16
 801128e:	e7e0      	b.n	8011252 <__mdiff+0xca>
 8011290:	3f01      	subs	r7, #1
 8011292:	e7ea      	b.n	801126a <__mdiff+0xe2>
 8011294:	080129c4 	.word	0x080129c4
 8011298:	08012ab4 	.word	0x08012ab4

0801129c <__ulp>:
 801129c:	b082      	sub	sp, #8
 801129e:	ed8d 0b00 	vstr	d0, [sp]
 80112a2:	9b01      	ldr	r3, [sp, #4]
 80112a4:	4912      	ldr	r1, [pc, #72]	; (80112f0 <__ulp+0x54>)
 80112a6:	4019      	ands	r1, r3
 80112a8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80112ac:	2900      	cmp	r1, #0
 80112ae:	dd05      	ble.n	80112bc <__ulp+0x20>
 80112b0:	2200      	movs	r2, #0
 80112b2:	460b      	mov	r3, r1
 80112b4:	ec43 2b10 	vmov	d0, r2, r3
 80112b8:	b002      	add	sp, #8
 80112ba:	4770      	bx	lr
 80112bc:	4249      	negs	r1, r1
 80112be:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80112c2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80112c6:	f04f 0200 	mov.w	r2, #0
 80112ca:	f04f 0300 	mov.w	r3, #0
 80112ce:	da04      	bge.n	80112da <__ulp+0x3e>
 80112d0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80112d4:	fa41 f300 	asr.w	r3, r1, r0
 80112d8:	e7ec      	b.n	80112b4 <__ulp+0x18>
 80112da:	f1a0 0114 	sub.w	r1, r0, #20
 80112de:	291e      	cmp	r1, #30
 80112e0:	bfda      	itte	le
 80112e2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80112e6:	fa20 f101 	lsrle.w	r1, r0, r1
 80112ea:	2101      	movgt	r1, #1
 80112ec:	460a      	mov	r2, r1
 80112ee:	e7e1      	b.n	80112b4 <__ulp+0x18>
 80112f0:	7ff00000 	.word	0x7ff00000

080112f4 <__b2d>:
 80112f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112f6:	6905      	ldr	r5, [r0, #16]
 80112f8:	f100 0714 	add.w	r7, r0, #20
 80112fc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011300:	1f2e      	subs	r6, r5, #4
 8011302:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011306:	4620      	mov	r0, r4
 8011308:	f7ff fd48 	bl	8010d9c <__hi0bits>
 801130c:	f1c0 0320 	rsb	r3, r0, #32
 8011310:	280a      	cmp	r0, #10
 8011312:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011390 <__b2d+0x9c>
 8011316:	600b      	str	r3, [r1, #0]
 8011318:	dc14      	bgt.n	8011344 <__b2d+0x50>
 801131a:	f1c0 0e0b 	rsb	lr, r0, #11
 801131e:	fa24 f10e 	lsr.w	r1, r4, lr
 8011322:	42b7      	cmp	r7, r6
 8011324:	ea41 030c 	orr.w	r3, r1, ip
 8011328:	bf34      	ite	cc
 801132a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801132e:	2100      	movcs	r1, #0
 8011330:	3015      	adds	r0, #21
 8011332:	fa04 f000 	lsl.w	r0, r4, r0
 8011336:	fa21 f10e 	lsr.w	r1, r1, lr
 801133a:	ea40 0201 	orr.w	r2, r0, r1
 801133e:	ec43 2b10 	vmov	d0, r2, r3
 8011342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011344:	42b7      	cmp	r7, r6
 8011346:	bf3a      	itte	cc
 8011348:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801134c:	f1a5 0608 	subcc.w	r6, r5, #8
 8011350:	2100      	movcs	r1, #0
 8011352:	380b      	subs	r0, #11
 8011354:	d017      	beq.n	8011386 <__b2d+0x92>
 8011356:	f1c0 0c20 	rsb	ip, r0, #32
 801135a:	fa04 f500 	lsl.w	r5, r4, r0
 801135e:	42be      	cmp	r6, r7
 8011360:	fa21 f40c 	lsr.w	r4, r1, ip
 8011364:	ea45 0504 	orr.w	r5, r5, r4
 8011368:	bf8c      	ite	hi
 801136a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801136e:	2400      	movls	r4, #0
 8011370:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011374:	fa01 f000 	lsl.w	r0, r1, r0
 8011378:	fa24 f40c 	lsr.w	r4, r4, ip
 801137c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011380:	ea40 0204 	orr.w	r2, r0, r4
 8011384:	e7db      	b.n	801133e <__b2d+0x4a>
 8011386:	ea44 030c 	orr.w	r3, r4, ip
 801138a:	460a      	mov	r2, r1
 801138c:	e7d7      	b.n	801133e <__b2d+0x4a>
 801138e:	bf00      	nop
 8011390:	3ff00000 	.word	0x3ff00000

08011394 <__d2b>:
 8011394:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011398:	4689      	mov	r9, r1
 801139a:	2101      	movs	r1, #1
 801139c:	ec57 6b10 	vmov	r6, r7, d0
 80113a0:	4690      	mov	r8, r2
 80113a2:	f7ff fc09 	bl	8010bb8 <_Balloc>
 80113a6:	4604      	mov	r4, r0
 80113a8:	b930      	cbnz	r0, 80113b8 <__d2b+0x24>
 80113aa:	4602      	mov	r2, r0
 80113ac:	4b25      	ldr	r3, [pc, #148]	; (8011444 <__d2b+0xb0>)
 80113ae:	4826      	ldr	r0, [pc, #152]	; (8011448 <__d2b+0xb4>)
 80113b0:	f240 310a 	movw	r1, #778	; 0x30a
 80113b4:	f7fd ffa8 	bl	800f308 <__assert_func>
 80113b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80113bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80113c0:	bb35      	cbnz	r5, 8011410 <__d2b+0x7c>
 80113c2:	2e00      	cmp	r6, #0
 80113c4:	9301      	str	r3, [sp, #4]
 80113c6:	d028      	beq.n	801141a <__d2b+0x86>
 80113c8:	4668      	mov	r0, sp
 80113ca:	9600      	str	r6, [sp, #0]
 80113cc:	f7ff fd06 	bl	8010ddc <__lo0bits>
 80113d0:	9900      	ldr	r1, [sp, #0]
 80113d2:	b300      	cbz	r0, 8011416 <__d2b+0x82>
 80113d4:	9a01      	ldr	r2, [sp, #4]
 80113d6:	f1c0 0320 	rsb	r3, r0, #32
 80113da:	fa02 f303 	lsl.w	r3, r2, r3
 80113de:	430b      	orrs	r3, r1
 80113e0:	40c2      	lsrs	r2, r0
 80113e2:	6163      	str	r3, [r4, #20]
 80113e4:	9201      	str	r2, [sp, #4]
 80113e6:	9b01      	ldr	r3, [sp, #4]
 80113e8:	61a3      	str	r3, [r4, #24]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	bf14      	ite	ne
 80113ee:	2202      	movne	r2, #2
 80113f0:	2201      	moveq	r2, #1
 80113f2:	6122      	str	r2, [r4, #16]
 80113f4:	b1d5      	cbz	r5, 801142c <__d2b+0x98>
 80113f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80113fa:	4405      	add	r5, r0
 80113fc:	f8c9 5000 	str.w	r5, [r9]
 8011400:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011404:	f8c8 0000 	str.w	r0, [r8]
 8011408:	4620      	mov	r0, r4
 801140a:	b003      	add	sp, #12
 801140c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011414:	e7d5      	b.n	80113c2 <__d2b+0x2e>
 8011416:	6161      	str	r1, [r4, #20]
 8011418:	e7e5      	b.n	80113e6 <__d2b+0x52>
 801141a:	a801      	add	r0, sp, #4
 801141c:	f7ff fcde 	bl	8010ddc <__lo0bits>
 8011420:	9b01      	ldr	r3, [sp, #4]
 8011422:	6163      	str	r3, [r4, #20]
 8011424:	2201      	movs	r2, #1
 8011426:	6122      	str	r2, [r4, #16]
 8011428:	3020      	adds	r0, #32
 801142a:	e7e3      	b.n	80113f4 <__d2b+0x60>
 801142c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011430:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011434:	f8c9 0000 	str.w	r0, [r9]
 8011438:	6918      	ldr	r0, [r3, #16]
 801143a:	f7ff fcaf 	bl	8010d9c <__hi0bits>
 801143e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011442:	e7df      	b.n	8011404 <__d2b+0x70>
 8011444:	080129c4 	.word	0x080129c4
 8011448:	08012ab4 	.word	0x08012ab4

0801144c <__ratio>:
 801144c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011450:	4688      	mov	r8, r1
 8011452:	4669      	mov	r1, sp
 8011454:	4681      	mov	r9, r0
 8011456:	f7ff ff4d 	bl	80112f4 <__b2d>
 801145a:	a901      	add	r1, sp, #4
 801145c:	4640      	mov	r0, r8
 801145e:	ec55 4b10 	vmov	r4, r5, d0
 8011462:	f7ff ff47 	bl	80112f4 <__b2d>
 8011466:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801146a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801146e:	eba3 0c02 	sub.w	ip, r3, r2
 8011472:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011476:	1a9b      	subs	r3, r3, r2
 8011478:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801147c:	ec51 0b10 	vmov	r0, r1, d0
 8011480:	2b00      	cmp	r3, #0
 8011482:	bfd6      	itet	le
 8011484:	460a      	movle	r2, r1
 8011486:	462a      	movgt	r2, r5
 8011488:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801148c:	468b      	mov	fp, r1
 801148e:	462f      	mov	r7, r5
 8011490:	bfd4      	ite	le
 8011492:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011496:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801149a:	4620      	mov	r0, r4
 801149c:	ee10 2a10 	vmov	r2, s0
 80114a0:	465b      	mov	r3, fp
 80114a2:	4639      	mov	r1, r7
 80114a4:	f7ef f9e2 	bl	800086c <__aeabi_ddiv>
 80114a8:	ec41 0b10 	vmov	d0, r0, r1
 80114ac:	b003      	add	sp, #12
 80114ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080114b2 <__copybits>:
 80114b2:	3901      	subs	r1, #1
 80114b4:	b570      	push	{r4, r5, r6, lr}
 80114b6:	1149      	asrs	r1, r1, #5
 80114b8:	6914      	ldr	r4, [r2, #16]
 80114ba:	3101      	adds	r1, #1
 80114bc:	f102 0314 	add.w	r3, r2, #20
 80114c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80114c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80114c8:	1f05      	subs	r5, r0, #4
 80114ca:	42a3      	cmp	r3, r4
 80114cc:	d30c      	bcc.n	80114e8 <__copybits+0x36>
 80114ce:	1aa3      	subs	r3, r4, r2
 80114d0:	3b11      	subs	r3, #17
 80114d2:	f023 0303 	bic.w	r3, r3, #3
 80114d6:	3211      	adds	r2, #17
 80114d8:	42a2      	cmp	r2, r4
 80114da:	bf88      	it	hi
 80114dc:	2300      	movhi	r3, #0
 80114de:	4418      	add	r0, r3
 80114e0:	2300      	movs	r3, #0
 80114e2:	4288      	cmp	r0, r1
 80114e4:	d305      	bcc.n	80114f2 <__copybits+0x40>
 80114e6:	bd70      	pop	{r4, r5, r6, pc}
 80114e8:	f853 6b04 	ldr.w	r6, [r3], #4
 80114ec:	f845 6f04 	str.w	r6, [r5, #4]!
 80114f0:	e7eb      	b.n	80114ca <__copybits+0x18>
 80114f2:	f840 3b04 	str.w	r3, [r0], #4
 80114f6:	e7f4      	b.n	80114e2 <__copybits+0x30>

080114f8 <__any_on>:
 80114f8:	f100 0214 	add.w	r2, r0, #20
 80114fc:	6900      	ldr	r0, [r0, #16]
 80114fe:	114b      	asrs	r3, r1, #5
 8011500:	4298      	cmp	r0, r3
 8011502:	b510      	push	{r4, lr}
 8011504:	db11      	blt.n	801152a <__any_on+0x32>
 8011506:	dd0a      	ble.n	801151e <__any_on+0x26>
 8011508:	f011 011f 	ands.w	r1, r1, #31
 801150c:	d007      	beq.n	801151e <__any_on+0x26>
 801150e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011512:	fa24 f001 	lsr.w	r0, r4, r1
 8011516:	fa00 f101 	lsl.w	r1, r0, r1
 801151a:	428c      	cmp	r4, r1
 801151c:	d10b      	bne.n	8011536 <__any_on+0x3e>
 801151e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011522:	4293      	cmp	r3, r2
 8011524:	d803      	bhi.n	801152e <__any_on+0x36>
 8011526:	2000      	movs	r0, #0
 8011528:	bd10      	pop	{r4, pc}
 801152a:	4603      	mov	r3, r0
 801152c:	e7f7      	b.n	801151e <__any_on+0x26>
 801152e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011532:	2900      	cmp	r1, #0
 8011534:	d0f5      	beq.n	8011522 <__any_on+0x2a>
 8011536:	2001      	movs	r0, #1
 8011538:	e7f6      	b.n	8011528 <__any_on+0x30>

0801153a <_calloc_r>:
 801153a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801153c:	fba1 2402 	umull	r2, r4, r1, r2
 8011540:	b94c      	cbnz	r4, 8011556 <_calloc_r+0x1c>
 8011542:	4611      	mov	r1, r2
 8011544:	9201      	str	r2, [sp, #4]
 8011546:	f000 f87b 	bl	8011640 <_malloc_r>
 801154a:	9a01      	ldr	r2, [sp, #4]
 801154c:	4605      	mov	r5, r0
 801154e:	b930      	cbnz	r0, 801155e <_calloc_r+0x24>
 8011550:	4628      	mov	r0, r5
 8011552:	b003      	add	sp, #12
 8011554:	bd30      	pop	{r4, r5, pc}
 8011556:	220c      	movs	r2, #12
 8011558:	6002      	str	r2, [r0, #0]
 801155a:	2500      	movs	r5, #0
 801155c:	e7f8      	b.n	8011550 <_calloc_r+0x16>
 801155e:	4621      	mov	r1, r4
 8011560:	f7fc f8be 	bl	800d6e0 <memset>
 8011564:	e7f4      	b.n	8011550 <_calloc_r+0x16>
	...

08011568 <_free_r>:
 8011568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801156a:	2900      	cmp	r1, #0
 801156c:	d044      	beq.n	80115f8 <_free_r+0x90>
 801156e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011572:	9001      	str	r0, [sp, #4]
 8011574:	2b00      	cmp	r3, #0
 8011576:	f1a1 0404 	sub.w	r4, r1, #4
 801157a:	bfb8      	it	lt
 801157c:	18e4      	addlt	r4, r4, r3
 801157e:	f000 fc7f 	bl	8011e80 <__malloc_lock>
 8011582:	4a1e      	ldr	r2, [pc, #120]	; (80115fc <_free_r+0x94>)
 8011584:	9801      	ldr	r0, [sp, #4]
 8011586:	6813      	ldr	r3, [r2, #0]
 8011588:	b933      	cbnz	r3, 8011598 <_free_r+0x30>
 801158a:	6063      	str	r3, [r4, #4]
 801158c:	6014      	str	r4, [r2, #0]
 801158e:	b003      	add	sp, #12
 8011590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011594:	f000 bc7a 	b.w	8011e8c <__malloc_unlock>
 8011598:	42a3      	cmp	r3, r4
 801159a:	d908      	bls.n	80115ae <_free_r+0x46>
 801159c:	6825      	ldr	r5, [r4, #0]
 801159e:	1961      	adds	r1, r4, r5
 80115a0:	428b      	cmp	r3, r1
 80115a2:	bf01      	itttt	eq
 80115a4:	6819      	ldreq	r1, [r3, #0]
 80115a6:	685b      	ldreq	r3, [r3, #4]
 80115a8:	1949      	addeq	r1, r1, r5
 80115aa:	6021      	streq	r1, [r4, #0]
 80115ac:	e7ed      	b.n	801158a <_free_r+0x22>
 80115ae:	461a      	mov	r2, r3
 80115b0:	685b      	ldr	r3, [r3, #4]
 80115b2:	b10b      	cbz	r3, 80115b8 <_free_r+0x50>
 80115b4:	42a3      	cmp	r3, r4
 80115b6:	d9fa      	bls.n	80115ae <_free_r+0x46>
 80115b8:	6811      	ldr	r1, [r2, #0]
 80115ba:	1855      	adds	r5, r2, r1
 80115bc:	42a5      	cmp	r5, r4
 80115be:	d10b      	bne.n	80115d8 <_free_r+0x70>
 80115c0:	6824      	ldr	r4, [r4, #0]
 80115c2:	4421      	add	r1, r4
 80115c4:	1854      	adds	r4, r2, r1
 80115c6:	42a3      	cmp	r3, r4
 80115c8:	6011      	str	r1, [r2, #0]
 80115ca:	d1e0      	bne.n	801158e <_free_r+0x26>
 80115cc:	681c      	ldr	r4, [r3, #0]
 80115ce:	685b      	ldr	r3, [r3, #4]
 80115d0:	6053      	str	r3, [r2, #4]
 80115d2:	4421      	add	r1, r4
 80115d4:	6011      	str	r1, [r2, #0]
 80115d6:	e7da      	b.n	801158e <_free_r+0x26>
 80115d8:	d902      	bls.n	80115e0 <_free_r+0x78>
 80115da:	230c      	movs	r3, #12
 80115dc:	6003      	str	r3, [r0, #0]
 80115de:	e7d6      	b.n	801158e <_free_r+0x26>
 80115e0:	6825      	ldr	r5, [r4, #0]
 80115e2:	1961      	adds	r1, r4, r5
 80115e4:	428b      	cmp	r3, r1
 80115e6:	bf04      	itt	eq
 80115e8:	6819      	ldreq	r1, [r3, #0]
 80115ea:	685b      	ldreq	r3, [r3, #4]
 80115ec:	6063      	str	r3, [r4, #4]
 80115ee:	bf04      	itt	eq
 80115f0:	1949      	addeq	r1, r1, r5
 80115f2:	6021      	streq	r1, [r4, #0]
 80115f4:	6054      	str	r4, [r2, #4]
 80115f6:	e7ca      	b.n	801158e <_free_r+0x26>
 80115f8:	b003      	add	sp, #12
 80115fa:	bd30      	pop	{r4, r5, pc}
 80115fc:	2000148c 	.word	0x2000148c

08011600 <sbrk_aligned>:
 8011600:	b570      	push	{r4, r5, r6, lr}
 8011602:	4e0e      	ldr	r6, [pc, #56]	; (801163c <sbrk_aligned+0x3c>)
 8011604:	460c      	mov	r4, r1
 8011606:	6831      	ldr	r1, [r6, #0]
 8011608:	4605      	mov	r5, r0
 801160a:	b911      	cbnz	r1, 8011612 <sbrk_aligned+0x12>
 801160c:	f000 fb4c 	bl	8011ca8 <_sbrk_r>
 8011610:	6030      	str	r0, [r6, #0]
 8011612:	4621      	mov	r1, r4
 8011614:	4628      	mov	r0, r5
 8011616:	f000 fb47 	bl	8011ca8 <_sbrk_r>
 801161a:	1c43      	adds	r3, r0, #1
 801161c:	d00a      	beq.n	8011634 <sbrk_aligned+0x34>
 801161e:	1cc4      	adds	r4, r0, #3
 8011620:	f024 0403 	bic.w	r4, r4, #3
 8011624:	42a0      	cmp	r0, r4
 8011626:	d007      	beq.n	8011638 <sbrk_aligned+0x38>
 8011628:	1a21      	subs	r1, r4, r0
 801162a:	4628      	mov	r0, r5
 801162c:	f000 fb3c 	bl	8011ca8 <_sbrk_r>
 8011630:	3001      	adds	r0, #1
 8011632:	d101      	bne.n	8011638 <sbrk_aligned+0x38>
 8011634:	f04f 34ff 	mov.w	r4, #4294967295
 8011638:	4620      	mov	r0, r4
 801163a:	bd70      	pop	{r4, r5, r6, pc}
 801163c:	20001490 	.word	0x20001490

08011640 <_malloc_r>:
 8011640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011644:	1ccd      	adds	r5, r1, #3
 8011646:	f025 0503 	bic.w	r5, r5, #3
 801164a:	3508      	adds	r5, #8
 801164c:	2d0c      	cmp	r5, #12
 801164e:	bf38      	it	cc
 8011650:	250c      	movcc	r5, #12
 8011652:	2d00      	cmp	r5, #0
 8011654:	4607      	mov	r7, r0
 8011656:	db01      	blt.n	801165c <_malloc_r+0x1c>
 8011658:	42a9      	cmp	r1, r5
 801165a:	d905      	bls.n	8011668 <_malloc_r+0x28>
 801165c:	230c      	movs	r3, #12
 801165e:	603b      	str	r3, [r7, #0]
 8011660:	2600      	movs	r6, #0
 8011662:	4630      	mov	r0, r6
 8011664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011668:	4e2e      	ldr	r6, [pc, #184]	; (8011724 <_malloc_r+0xe4>)
 801166a:	f000 fc09 	bl	8011e80 <__malloc_lock>
 801166e:	6833      	ldr	r3, [r6, #0]
 8011670:	461c      	mov	r4, r3
 8011672:	bb34      	cbnz	r4, 80116c2 <_malloc_r+0x82>
 8011674:	4629      	mov	r1, r5
 8011676:	4638      	mov	r0, r7
 8011678:	f7ff ffc2 	bl	8011600 <sbrk_aligned>
 801167c:	1c43      	adds	r3, r0, #1
 801167e:	4604      	mov	r4, r0
 8011680:	d14d      	bne.n	801171e <_malloc_r+0xde>
 8011682:	6834      	ldr	r4, [r6, #0]
 8011684:	4626      	mov	r6, r4
 8011686:	2e00      	cmp	r6, #0
 8011688:	d140      	bne.n	801170c <_malloc_r+0xcc>
 801168a:	6823      	ldr	r3, [r4, #0]
 801168c:	4631      	mov	r1, r6
 801168e:	4638      	mov	r0, r7
 8011690:	eb04 0803 	add.w	r8, r4, r3
 8011694:	f000 fb08 	bl	8011ca8 <_sbrk_r>
 8011698:	4580      	cmp	r8, r0
 801169a:	d13a      	bne.n	8011712 <_malloc_r+0xd2>
 801169c:	6821      	ldr	r1, [r4, #0]
 801169e:	3503      	adds	r5, #3
 80116a0:	1a6d      	subs	r5, r5, r1
 80116a2:	f025 0503 	bic.w	r5, r5, #3
 80116a6:	3508      	adds	r5, #8
 80116a8:	2d0c      	cmp	r5, #12
 80116aa:	bf38      	it	cc
 80116ac:	250c      	movcc	r5, #12
 80116ae:	4629      	mov	r1, r5
 80116b0:	4638      	mov	r0, r7
 80116b2:	f7ff ffa5 	bl	8011600 <sbrk_aligned>
 80116b6:	3001      	adds	r0, #1
 80116b8:	d02b      	beq.n	8011712 <_malloc_r+0xd2>
 80116ba:	6823      	ldr	r3, [r4, #0]
 80116bc:	442b      	add	r3, r5
 80116be:	6023      	str	r3, [r4, #0]
 80116c0:	e00e      	b.n	80116e0 <_malloc_r+0xa0>
 80116c2:	6822      	ldr	r2, [r4, #0]
 80116c4:	1b52      	subs	r2, r2, r5
 80116c6:	d41e      	bmi.n	8011706 <_malloc_r+0xc6>
 80116c8:	2a0b      	cmp	r2, #11
 80116ca:	d916      	bls.n	80116fa <_malloc_r+0xba>
 80116cc:	1961      	adds	r1, r4, r5
 80116ce:	42a3      	cmp	r3, r4
 80116d0:	6025      	str	r5, [r4, #0]
 80116d2:	bf18      	it	ne
 80116d4:	6059      	strne	r1, [r3, #4]
 80116d6:	6863      	ldr	r3, [r4, #4]
 80116d8:	bf08      	it	eq
 80116da:	6031      	streq	r1, [r6, #0]
 80116dc:	5162      	str	r2, [r4, r5]
 80116de:	604b      	str	r3, [r1, #4]
 80116e0:	4638      	mov	r0, r7
 80116e2:	f104 060b 	add.w	r6, r4, #11
 80116e6:	f000 fbd1 	bl	8011e8c <__malloc_unlock>
 80116ea:	f026 0607 	bic.w	r6, r6, #7
 80116ee:	1d23      	adds	r3, r4, #4
 80116f0:	1af2      	subs	r2, r6, r3
 80116f2:	d0b6      	beq.n	8011662 <_malloc_r+0x22>
 80116f4:	1b9b      	subs	r3, r3, r6
 80116f6:	50a3      	str	r3, [r4, r2]
 80116f8:	e7b3      	b.n	8011662 <_malloc_r+0x22>
 80116fa:	6862      	ldr	r2, [r4, #4]
 80116fc:	42a3      	cmp	r3, r4
 80116fe:	bf0c      	ite	eq
 8011700:	6032      	streq	r2, [r6, #0]
 8011702:	605a      	strne	r2, [r3, #4]
 8011704:	e7ec      	b.n	80116e0 <_malloc_r+0xa0>
 8011706:	4623      	mov	r3, r4
 8011708:	6864      	ldr	r4, [r4, #4]
 801170a:	e7b2      	b.n	8011672 <_malloc_r+0x32>
 801170c:	4634      	mov	r4, r6
 801170e:	6876      	ldr	r6, [r6, #4]
 8011710:	e7b9      	b.n	8011686 <_malloc_r+0x46>
 8011712:	230c      	movs	r3, #12
 8011714:	603b      	str	r3, [r7, #0]
 8011716:	4638      	mov	r0, r7
 8011718:	f000 fbb8 	bl	8011e8c <__malloc_unlock>
 801171c:	e7a1      	b.n	8011662 <_malloc_r+0x22>
 801171e:	6025      	str	r5, [r4, #0]
 8011720:	e7de      	b.n	80116e0 <_malloc_r+0xa0>
 8011722:	bf00      	nop
 8011724:	2000148c 	.word	0x2000148c

08011728 <__ssputs_r>:
 8011728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801172c:	688e      	ldr	r6, [r1, #8]
 801172e:	429e      	cmp	r6, r3
 8011730:	4682      	mov	sl, r0
 8011732:	460c      	mov	r4, r1
 8011734:	4690      	mov	r8, r2
 8011736:	461f      	mov	r7, r3
 8011738:	d838      	bhi.n	80117ac <__ssputs_r+0x84>
 801173a:	898a      	ldrh	r2, [r1, #12]
 801173c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011740:	d032      	beq.n	80117a8 <__ssputs_r+0x80>
 8011742:	6825      	ldr	r5, [r4, #0]
 8011744:	6909      	ldr	r1, [r1, #16]
 8011746:	eba5 0901 	sub.w	r9, r5, r1
 801174a:	6965      	ldr	r5, [r4, #20]
 801174c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011750:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011754:	3301      	adds	r3, #1
 8011756:	444b      	add	r3, r9
 8011758:	106d      	asrs	r5, r5, #1
 801175a:	429d      	cmp	r5, r3
 801175c:	bf38      	it	cc
 801175e:	461d      	movcc	r5, r3
 8011760:	0553      	lsls	r3, r2, #21
 8011762:	d531      	bpl.n	80117c8 <__ssputs_r+0xa0>
 8011764:	4629      	mov	r1, r5
 8011766:	f7ff ff6b 	bl	8011640 <_malloc_r>
 801176a:	4606      	mov	r6, r0
 801176c:	b950      	cbnz	r0, 8011784 <__ssputs_r+0x5c>
 801176e:	230c      	movs	r3, #12
 8011770:	f8ca 3000 	str.w	r3, [sl]
 8011774:	89a3      	ldrh	r3, [r4, #12]
 8011776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801177a:	81a3      	strh	r3, [r4, #12]
 801177c:	f04f 30ff 	mov.w	r0, #4294967295
 8011780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011784:	6921      	ldr	r1, [r4, #16]
 8011786:	464a      	mov	r2, r9
 8011788:	f7fb ff9c 	bl	800d6c4 <memcpy>
 801178c:	89a3      	ldrh	r3, [r4, #12]
 801178e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011796:	81a3      	strh	r3, [r4, #12]
 8011798:	6126      	str	r6, [r4, #16]
 801179a:	6165      	str	r5, [r4, #20]
 801179c:	444e      	add	r6, r9
 801179e:	eba5 0509 	sub.w	r5, r5, r9
 80117a2:	6026      	str	r6, [r4, #0]
 80117a4:	60a5      	str	r5, [r4, #8]
 80117a6:	463e      	mov	r6, r7
 80117a8:	42be      	cmp	r6, r7
 80117aa:	d900      	bls.n	80117ae <__ssputs_r+0x86>
 80117ac:	463e      	mov	r6, r7
 80117ae:	6820      	ldr	r0, [r4, #0]
 80117b0:	4632      	mov	r2, r6
 80117b2:	4641      	mov	r1, r8
 80117b4:	f000 fb4a 	bl	8011e4c <memmove>
 80117b8:	68a3      	ldr	r3, [r4, #8]
 80117ba:	1b9b      	subs	r3, r3, r6
 80117bc:	60a3      	str	r3, [r4, #8]
 80117be:	6823      	ldr	r3, [r4, #0]
 80117c0:	4433      	add	r3, r6
 80117c2:	6023      	str	r3, [r4, #0]
 80117c4:	2000      	movs	r0, #0
 80117c6:	e7db      	b.n	8011780 <__ssputs_r+0x58>
 80117c8:	462a      	mov	r2, r5
 80117ca:	f000 fb65 	bl	8011e98 <_realloc_r>
 80117ce:	4606      	mov	r6, r0
 80117d0:	2800      	cmp	r0, #0
 80117d2:	d1e1      	bne.n	8011798 <__ssputs_r+0x70>
 80117d4:	6921      	ldr	r1, [r4, #16]
 80117d6:	4650      	mov	r0, sl
 80117d8:	f7ff fec6 	bl	8011568 <_free_r>
 80117dc:	e7c7      	b.n	801176e <__ssputs_r+0x46>
	...

080117e0 <_svfiprintf_r>:
 80117e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e4:	4698      	mov	r8, r3
 80117e6:	898b      	ldrh	r3, [r1, #12]
 80117e8:	061b      	lsls	r3, r3, #24
 80117ea:	b09d      	sub	sp, #116	; 0x74
 80117ec:	4607      	mov	r7, r0
 80117ee:	460d      	mov	r5, r1
 80117f0:	4614      	mov	r4, r2
 80117f2:	d50e      	bpl.n	8011812 <_svfiprintf_r+0x32>
 80117f4:	690b      	ldr	r3, [r1, #16]
 80117f6:	b963      	cbnz	r3, 8011812 <_svfiprintf_r+0x32>
 80117f8:	2140      	movs	r1, #64	; 0x40
 80117fa:	f7ff ff21 	bl	8011640 <_malloc_r>
 80117fe:	6028      	str	r0, [r5, #0]
 8011800:	6128      	str	r0, [r5, #16]
 8011802:	b920      	cbnz	r0, 801180e <_svfiprintf_r+0x2e>
 8011804:	230c      	movs	r3, #12
 8011806:	603b      	str	r3, [r7, #0]
 8011808:	f04f 30ff 	mov.w	r0, #4294967295
 801180c:	e0d1      	b.n	80119b2 <_svfiprintf_r+0x1d2>
 801180e:	2340      	movs	r3, #64	; 0x40
 8011810:	616b      	str	r3, [r5, #20]
 8011812:	2300      	movs	r3, #0
 8011814:	9309      	str	r3, [sp, #36]	; 0x24
 8011816:	2320      	movs	r3, #32
 8011818:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801181c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011820:	2330      	movs	r3, #48	; 0x30
 8011822:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80119cc <_svfiprintf_r+0x1ec>
 8011826:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801182a:	f04f 0901 	mov.w	r9, #1
 801182e:	4623      	mov	r3, r4
 8011830:	469a      	mov	sl, r3
 8011832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011836:	b10a      	cbz	r2, 801183c <_svfiprintf_r+0x5c>
 8011838:	2a25      	cmp	r2, #37	; 0x25
 801183a:	d1f9      	bne.n	8011830 <_svfiprintf_r+0x50>
 801183c:	ebba 0b04 	subs.w	fp, sl, r4
 8011840:	d00b      	beq.n	801185a <_svfiprintf_r+0x7a>
 8011842:	465b      	mov	r3, fp
 8011844:	4622      	mov	r2, r4
 8011846:	4629      	mov	r1, r5
 8011848:	4638      	mov	r0, r7
 801184a:	f7ff ff6d 	bl	8011728 <__ssputs_r>
 801184e:	3001      	adds	r0, #1
 8011850:	f000 80aa 	beq.w	80119a8 <_svfiprintf_r+0x1c8>
 8011854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011856:	445a      	add	r2, fp
 8011858:	9209      	str	r2, [sp, #36]	; 0x24
 801185a:	f89a 3000 	ldrb.w	r3, [sl]
 801185e:	2b00      	cmp	r3, #0
 8011860:	f000 80a2 	beq.w	80119a8 <_svfiprintf_r+0x1c8>
 8011864:	2300      	movs	r3, #0
 8011866:	f04f 32ff 	mov.w	r2, #4294967295
 801186a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801186e:	f10a 0a01 	add.w	sl, sl, #1
 8011872:	9304      	str	r3, [sp, #16]
 8011874:	9307      	str	r3, [sp, #28]
 8011876:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801187a:	931a      	str	r3, [sp, #104]	; 0x68
 801187c:	4654      	mov	r4, sl
 801187e:	2205      	movs	r2, #5
 8011880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011884:	4851      	ldr	r0, [pc, #324]	; (80119cc <_svfiprintf_r+0x1ec>)
 8011886:	f7ee fcbb 	bl	8000200 <memchr>
 801188a:	9a04      	ldr	r2, [sp, #16]
 801188c:	b9d8      	cbnz	r0, 80118c6 <_svfiprintf_r+0xe6>
 801188e:	06d0      	lsls	r0, r2, #27
 8011890:	bf44      	itt	mi
 8011892:	2320      	movmi	r3, #32
 8011894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011898:	0711      	lsls	r1, r2, #28
 801189a:	bf44      	itt	mi
 801189c:	232b      	movmi	r3, #43	; 0x2b
 801189e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118a2:	f89a 3000 	ldrb.w	r3, [sl]
 80118a6:	2b2a      	cmp	r3, #42	; 0x2a
 80118a8:	d015      	beq.n	80118d6 <_svfiprintf_r+0xf6>
 80118aa:	9a07      	ldr	r2, [sp, #28]
 80118ac:	4654      	mov	r4, sl
 80118ae:	2000      	movs	r0, #0
 80118b0:	f04f 0c0a 	mov.w	ip, #10
 80118b4:	4621      	mov	r1, r4
 80118b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118ba:	3b30      	subs	r3, #48	; 0x30
 80118bc:	2b09      	cmp	r3, #9
 80118be:	d94e      	bls.n	801195e <_svfiprintf_r+0x17e>
 80118c0:	b1b0      	cbz	r0, 80118f0 <_svfiprintf_r+0x110>
 80118c2:	9207      	str	r2, [sp, #28]
 80118c4:	e014      	b.n	80118f0 <_svfiprintf_r+0x110>
 80118c6:	eba0 0308 	sub.w	r3, r0, r8
 80118ca:	fa09 f303 	lsl.w	r3, r9, r3
 80118ce:	4313      	orrs	r3, r2
 80118d0:	9304      	str	r3, [sp, #16]
 80118d2:	46a2      	mov	sl, r4
 80118d4:	e7d2      	b.n	801187c <_svfiprintf_r+0x9c>
 80118d6:	9b03      	ldr	r3, [sp, #12]
 80118d8:	1d19      	adds	r1, r3, #4
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	9103      	str	r1, [sp, #12]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	bfbb      	ittet	lt
 80118e2:	425b      	neglt	r3, r3
 80118e4:	f042 0202 	orrlt.w	r2, r2, #2
 80118e8:	9307      	strge	r3, [sp, #28]
 80118ea:	9307      	strlt	r3, [sp, #28]
 80118ec:	bfb8      	it	lt
 80118ee:	9204      	strlt	r2, [sp, #16]
 80118f0:	7823      	ldrb	r3, [r4, #0]
 80118f2:	2b2e      	cmp	r3, #46	; 0x2e
 80118f4:	d10c      	bne.n	8011910 <_svfiprintf_r+0x130>
 80118f6:	7863      	ldrb	r3, [r4, #1]
 80118f8:	2b2a      	cmp	r3, #42	; 0x2a
 80118fa:	d135      	bne.n	8011968 <_svfiprintf_r+0x188>
 80118fc:	9b03      	ldr	r3, [sp, #12]
 80118fe:	1d1a      	adds	r2, r3, #4
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	9203      	str	r2, [sp, #12]
 8011904:	2b00      	cmp	r3, #0
 8011906:	bfb8      	it	lt
 8011908:	f04f 33ff 	movlt.w	r3, #4294967295
 801190c:	3402      	adds	r4, #2
 801190e:	9305      	str	r3, [sp, #20]
 8011910:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80119dc <_svfiprintf_r+0x1fc>
 8011914:	7821      	ldrb	r1, [r4, #0]
 8011916:	2203      	movs	r2, #3
 8011918:	4650      	mov	r0, sl
 801191a:	f7ee fc71 	bl	8000200 <memchr>
 801191e:	b140      	cbz	r0, 8011932 <_svfiprintf_r+0x152>
 8011920:	2340      	movs	r3, #64	; 0x40
 8011922:	eba0 000a 	sub.w	r0, r0, sl
 8011926:	fa03 f000 	lsl.w	r0, r3, r0
 801192a:	9b04      	ldr	r3, [sp, #16]
 801192c:	4303      	orrs	r3, r0
 801192e:	3401      	adds	r4, #1
 8011930:	9304      	str	r3, [sp, #16]
 8011932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011936:	4826      	ldr	r0, [pc, #152]	; (80119d0 <_svfiprintf_r+0x1f0>)
 8011938:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801193c:	2206      	movs	r2, #6
 801193e:	f7ee fc5f 	bl	8000200 <memchr>
 8011942:	2800      	cmp	r0, #0
 8011944:	d038      	beq.n	80119b8 <_svfiprintf_r+0x1d8>
 8011946:	4b23      	ldr	r3, [pc, #140]	; (80119d4 <_svfiprintf_r+0x1f4>)
 8011948:	bb1b      	cbnz	r3, 8011992 <_svfiprintf_r+0x1b2>
 801194a:	9b03      	ldr	r3, [sp, #12]
 801194c:	3307      	adds	r3, #7
 801194e:	f023 0307 	bic.w	r3, r3, #7
 8011952:	3308      	adds	r3, #8
 8011954:	9303      	str	r3, [sp, #12]
 8011956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011958:	4433      	add	r3, r6
 801195a:	9309      	str	r3, [sp, #36]	; 0x24
 801195c:	e767      	b.n	801182e <_svfiprintf_r+0x4e>
 801195e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011962:	460c      	mov	r4, r1
 8011964:	2001      	movs	r0, #1
 8011966:	e7a5      	b.n	80118b4 <_svfiprintf_r+0xd4>
 8011968:	2300      	movs	r3, #0
 801196a:	3401      	adds	r4, #1
 801196c:	9305      	str	r3, [sp, #20]
 801196e:	4619      	mov	r1, r3
 8011970:	f04f 0c0a 	mov.w	ip, #10
 8011974:	4620      	mov	r0, r4
 8011976:	f810 2b01 	ldrb.w	r2, [r0], #1
 801197a:	3a30      	subs	r2, #48	; 0x30
 801197c:	2a09      	cmp	r2, #9
 801197e:	d903      	bls.n	8011988 <_svfiprintf_r+0x1a8>
 8011980:	2b00      	cmp	r3, #0
 8011982:	d0c5      	beq.n	8011910 <_svfiprintf_r+0x130>
 8011984:	9105      	str	r1, [sp, #20]
 8011986:	e7c3      	b.n	8011910 <_svfiprintf_r+0x130>
 8011988:	fb0c 2101 	mla	r1, ip, r1, r2
 801198c:	4604      	mov	r4, r0
 801198e:	2301      	movs	r3, #1
 8011990:	e7f0      	b.n	8011974 <_svfiprintf_r+0x194>
 8011992:	ab03      	add	r3, sp, #12
 8011994:	9300      	str	r3, [sp, #0]
 8011996:	462a      	mov	r2, r5
 8011998:	4b0f      	ldr	r3, [pc, #60]	; (80119d8 <_svfiprintf_r+0x1f8>)
 801199a:	a904      	add	r1, sp, #16
 801199c:	4638      	mov	r0, r7
 801199e:	f7fb ff47 	bl	800d830 <_printf_float>
 80119a2:	1c42      	adds	r2, r0, #1
 80119a4:	4606      	mov	r6, r0
 80119a6:	d1d6      	bne.n	8011956 <_svfiprintf_r+0x176>
 80119a8:	89ab      	ldrh	r3, [r5, #12]
 80119aa:	065b      	lsls	r3, r3, #25
 80119ac:	f53f af2c 	bmi.w	8011808 <_svfiprintf_r+0x28>
 80119b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119b2:	b01d      	add	sp, #116	; 0x74
 80119b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119b8:	ab03      	add	r3, sp, #12
 80119ba:	9300      	str	r3, [sp, #0]
 80119bc:	462a      	mov	r2, r5
 80119be:	4b06      	ldr	r3, [pc, #24]	; (80119d8 <_svfiprintf_r+0x1f8>)
 80119c0:	a904      	add	r1, sp, #16
 80119c2:	4638      	mov	r0, r7
 80119c4:	f7fc f9d8 	bl	800dd78 <_printf_i>
 80119c8:	e7eb      	b.n	80119a2 <_svfiprintf_r+0x1c2>
 80119ca:	bf00      	nop
 80119cc:	08012c0c 	.word	0x08012c0c
 80119d0:	08012c16 	.word	0x08012c16
 80119d4:	0800d831 	.word	0x0800d831
 80119d8:	08011729 	.word	0x08011729
 80119dc:	08012c12 	.word	0x08012c12

080119e0 <__sfputc_r>:
 80119e0:	6893      	ldr	r3, [r2, #8]
 80119e2:	3b01      	subs	r3, #1
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	b410      	push	{r4}
 80119e8:	6093      	str	r3, [r2, #8]
 80119ea:	da08      	bge.n	80119fe <__sfputc_r+0x1e>
 80119ec:	6994      	ldr	r4, [r2, #24]
 80119ee:	42a3      	cmp	r3, r4
 80119f0:	db01      	blt.n	80119f6 <__sfputc_r+0x16>
 80119f2:	290a      	cmp	r1, #10
 80119f4:	d103      	bne.n	80119fe <__sfputc_r+0x1e>
 80119f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119fa:	f7fd bbc5 	b.w	800f188 <__swbuf_r>
 80119fe:	6813      	ldr	r3, [r2, #0]
 8011a00:	1c58      	adds	r0, r3, #1
 8011a02:	6010      	str	r0, [r2, #0]
 8011a04:	7019      	strb	r1, [r3, #0]
 8011a06:	4608      	mov	r0, r1
 8011a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a0c:	4770      	bx	lr

08011a0e <__sfputs_r>:
 8011a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a10:	4606      	mov	r6, r0
 8011a12:	460f      	mov	r7, r1
 8011a14:	4614      	mov	r4, r2
 8011a16:	18d5      	adds	r5, r2, r3
 8011a18:	42ac      	cmp	r4, r5
 8011a1a:	d101      	bne.n	8011a20 <__sfputs_r+0x12>
 8011a1c:	2000      	movs	r0, #0
 8011a1e:	e007      	b.n	8011a30 <__sfputs_r+0x22>
 8011a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a24:	463a      	mov	r2, r7
 8011a26:	4630      	mov	r0, r6
 8011a28:	f7ff ffda 	bl	80119e0 <__sfputc_r>
 8011a2c:	1c43      	adds	r3, r0, #1
 8011a2e:	d1f3      	bne.n	8011a18 <__sfputs_r+0xa>
 8011a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011a34 <_vfiprintf_r>:
 8011a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a38:	460d      	mov	r5, r1
 8011a3a:	b09d      	sub	sp, #116	; 0x74
 8011a3c:	4614      	mov	r4, r2
 8011a3e:	4698      	mov	r8, r3
 8011a40:	4606      	mov	r6, r0
 8011a42:	b118      	cbz	r0, 8011a4c <_vfiprintf_r+0x18>
 8011a44:	6983      	ldr	r3, [r0, #24]
 8011a46:	b90b      	cbnz	r3, 8011a4c <_vfiprintf_r+0x18>
 8011a48:	f7fe fc12 	bl	8010270 <__sinit>
 8011a4c:	4b89      	ldr	r3, [pc, #548]	; (8011c74 <_vfiprintf_r+0x240>)
 8011a4e:	429d      	cmp	r5, r3
 8011a50:	d11b      	bne.n	8011a8a <_vfiprintf_r+0x56>
 8011a52:	6875      	ldr	r5, [r6, #4]
 8011a54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a56:	07d9      	lsls	r1, r3, #31
 8011a58:	d405      	bmi.n	8011a66 <_vfiprintf_r+0x32>
 8011a5a:	89ab      	ldrh	r3, [r5, #12]
 8011a5c:	059a      	lsls	r2, r3, #22
 8011a5e:	d402      	bmi.n	8011a66 <_vfiprintf_r+0x32>
 8011a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a62:	f7ff f828 	bl	8010ab6 <__retarget_lock_acquire_recursive>
 8011a66:	89ab      	ldrh	r3, [r5, #12]
 8011a68:	071b      	lsls	r3, r3, #28
 8011a6a:	d501      	bpl.n	8011a70 <_vfiprintf_r+0x3c>
 8011a6c:	692b      	ldr	r3, [r5, #16]
 8011a6e:	b9eb      	cbnz	r3, 8011aac <_vfiprintf_r+0x78>
 8011a70:	4629      	mov	r1, r5
 8011a72:	4630      	mov	r0, r6
 8011a74:	f7fd fbda 	bl	800f22c <__swsetup_r>
 8011a78:	b1c0      	cbz	r0, 8011aac <_vfiprintf_r+0x78>
 8011a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a7c:	07dc      	lsls	r4, r3, #31
 8011a7e:	d50e      	bpl.n	8011a9e <_vfiprintf_r+0x6a>
 8011a80:	f04f 30ff 	mov.w	r0, #4294967295
 8011a84:	b01d      	add	sp, #116	; 0x74
 8011a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a8a:	4b7b      	ldr	r3, [pc, #492]	; (8011c78 <_vfiprintf_r+0x244>)
 8011a8c:	429d      	cmp	r5, r3
 8011a8e:	d101      	bne.n	8011a94 <_vfiprintf_r+0x60>
 8011a90:	68b5      	ldr	r5, [r6, #8]
 8011a92:	e7df      	b.n	8011a54 <_vfiprintf_r+0x20>
 8011a94:	4b79      	ldr	r3, [pc, #484]	; (8011c7c <_vfiprintf_r+0x248>)
 8011a96:	429d      	cmp	r5, r3
 8011a98:	bf08      	it	eq
 8011a9a:	68f5      	ldreq	r5, [r6, #12]
 8011a9c:	e7da      	b.n	8011a54 <_vfiprintf_r+0x20>
 8011a9e:	89ab      	ldrh	r3, [r5, #12]
 8011aa0:	0598      	lsls	r0, r3, #22
 8011aa2:	d4ed      	bmi.n	8011a80 <_vfiprintf_r+0x4c>
 8011aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011aa6:	f7ff f807 	bl	8010ab8 <__retarget_lock_release_recursive>
 8011aaa:	e7e9      	b.n	8011a80 <_vfiprintf_r+0x4c>
 8011aac:	2300      	movs	r3, #0
 8011aae:	9309      	str	r3, [sp, #36]	; 0x24
 8011ab0:	2320      	movs	r3, #32
 8011ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011aba:	2330      	movs	r3, #48	; 0x30
 8011abc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011c80 <_vfiprintf_r+0x24c>
 8011ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ac4:	f04f 0901 	mov.w	r9, #1
 8011ac8:	4623      	mov	r3, r4
 8011aca:	469a      	mov	sl, r3
 8011acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ad0:	b10a      	cbz	r2, 8011ad6 <_vfiprintf_r+0xa2>
 8011ad2:	2a25      	cmp	r2, #37	; 0x25
 8011ad4:	d1f9      	bne.n	8011aca <_vfiprintf_r+0x96>
 8011ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8011ada:	d00b      	beq.n	8011af4 <_vfiprintf_r+0xc0>
 8011adc:	465b      	mov	r3, fp
 8011ade:	4622      	mov	r2, r4
 8011ae0:	4629      	mov	r1, r5
 8011ae2:	4630      	mov	r0, r6
 8011ae4:	f7ff ff93 	bl	8011a0e <__sfputs_r>
 8011ae8:	3001      	adds	r0, #1
 8011aea:	f000 80aa 	beq.w	8011c42 <_vfiprintf_r+0x20e>
 8011aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011af0:	445a      	add	r2, fp
 8011af2:	9209      	str	r2, [sp, #36]	; 0x24
 8011af4:	f89a 3000 	ldrb.w	r3, [sl]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	f000 80a2 	beq.w	8011c42 <_vfiprintf_r+0x20e>
 8011afe:	2300      	movs	r3, #0
 8011b00:	f04f 32ff 	mov.w	r2, #4294967295
 8011b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b08:	f10a 0a01 	add.w	sl, sl, #1
 8011b0c:	9304      	str	r3, [sp, #16]
 8011b0e:	9307      	str	r3, [sp, #28]
 8011b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b14:	931a      	str	r3, [sp, #104]	; 0x68
 8011b16:	4654      	mov	r4, sl
 8011b18:	2205      	movs	r2, #5
 8011b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b1e:	4858      	ldr	r0, [pc, #352]	; (8011c80 <_vfiprintf_r+0x24c>)
 8011b20:	f7ee fb6e 	bl	8000200 <memchr>
 8011b24:	9a04      	ldr	r2, [sp, #16]
 8011b26:	b9d8      	cbnz	r0, 8011b60 <_vfiprintf_r+0x12c>
 8011b28:	06d1      	lsls	r1, r2, #27
 8011b2a:	bf44      	itt	mi
 8011b2c:	2320      	movmi	r3, #32
 8011b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b32:	0713      	lsls	r3, r2, #28
 8011b34:	bf44      	itt	mi
 8011b36:	232b      	movmi	r3, #43	; 0x2b
 8011b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8011b40:	2b2a      	cmp	r3, #42	; 0x2a
 8011b42:	d015      	beq.n	8011b70 <_vfiprintf_r+0x13c>
 8011b44:	9a07      	ldr	r2, [sp, #28]
 8011b46:	4654      	mov	r4, sl
 8011b48:	2000      	movs	r0, #0
 8011b4a:	f04f 0c0a 	mov.w	ip, #10
 8011b4e:	4621      	mov	r1, r4
 8011b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b54:	3b30      	subs	r3, #48	; 0x30
 8011b56:	2b09      	cmp	r3, #9
 8011b58:	d94e      	bls.n	8011bf8 <_vfiprintf_r+0x1c4>
 8011b5a:	b1b0      	cbz	r0, 8011b8a <_vfiprintf_r+0x156>
 8011b5c:	9207      	str	r2, [sp, #28]
 8011b5e:	e014      	b.n	8011b8a <_vfiprintf_r+0x156>
 8011b60:	eba0 0308 	sub.w	r3, r0, r8
 8011b64:	fa09 f303 	lsl.w	r3, r9, r3
 8011b68:	4313      	orrs	r3, r2
 8011b6a:	9304      	str	r3, [sp, #16]
 8011b6c:	46a2      	mov	sl, r4
 8011b6e:	e7d2      	b.n	8011b16 <_vfiprintf_r+0xe2>
 8011b70:	9b03      	ldr	r3, [sp, #12]
 8011b72:	1d19      	adds	r1, r3, #4
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	9103      	str	r1, [sp, #12]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	bfbb      	ittet	lt
 8011b7c:	425b      	neglt	r3, r3
 8011b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8011b82:	9307      	strge	r3, [sp, #28]
 8011b84:	9307      	strlt	r3, [sp, #28]
 8011b86:	bfb8      	it	lt
 8011b88:	9204      	strlt	r2, [sp, #16]
 8011b8a:	7823      	ldrb	r3, [r4, #0]
 8011b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8011b8e:	d10c      	bne.n	8011baa <_vfiprintf_r+0x176>
 8011b90:	7863      	ldrb	r3, [r4, #1]
 8011b92:	2b2a      	cmp	r3, #42	; 0x2a
 8011b94:	d135      	bne.n	8011c02 <_vfiprintf_r+0x1ce>
 8011b96:	9b03      	ldr	r3, [sp, #12]
 8011b98:	1d1a      	adds	r2, r3, #4
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	9203      	str	r2, [sp, #12]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	bfb8      	it	lt
 8011ba2:	f04f 33ff 	movlt.w	r3, #4294967295
 8011ba6:	3402      	adds	r4, #2
 8011ba8:	9305      	str	r3, [sp, #20]
 8011baa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011c90 <_vfiprintf_r+0x25c>
 8011bae:	7821      	ldrb	r1, [r4, #0]
 8011bb0:	2203      	movs	r2, #3
 8011bb2:	4650      	mov	r0, sl
 8011bb4:	f7ee fb24 	bl	8000200 <memchr>
 8011bb8:	b140      	cbz	r0, 8011bcc <_vfiprintf_r+0x198>
 8011bba:	2340      	movs	r3, #64	; 0x40
 8011bbc:	eba0 000a 	sub.w	r0, r0, sl
 8011bc0:	fa03 f000 	lsl.w	r0, r3, r0
 8011bc4:	9b04      	ldr	r3, [sp, #16]
 8011bc6:	4303      	orrs	r3, r0
 8011bc8:	3401      	adds	r4, #1
 8011bca:	9304      	str	r3, [sp, #16]
 8011bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bd0:	482c      	ldr	r0, [pc, #176]	; (8011c84 <_vfiprintf_r+0x250>)
 8011bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011bd6:	2206      	movs	r2, #6
 8011bd8:	f7ee fb12 	bl	8000200 <memchr>
 8011bdc:	2800      	cmp	r0, #0
 8011bde:	d03f      	beq.n	8011c60 <_vfiprintf_r+0x22c>
 8011be0:	4b29      	ldr	r3, [pc, #164]	; (8011c88 <_vfiprintf_r+0x254>)
 8011be2:	bb1b      	cbnz	r3, 8011c2c <_vfiprintf_r+0x1f8>
 8011be4:	9b03      	ldr	r3, [sp, #12]
 8011be6:	3307      	adds	r3, #7
 8011be8:	f023 0307 	bic.w	r3, r3, #7
 8011bec:	3308      	adds	r3, #8
 8011bee:	9303      	str	r3, [sp, #12]
 8011bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bf2:	443b      	add	r3, r7
 8011bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8011bf6:	e767      	b.n	8011ac8 <_vfiprintf_r+0x94>
 8011bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011bfc:	460c      	mov	r4, r1
 8011bfe:	2001      	movs	r0, #1
 8011c00:	e7a5      	b.n	8011b4e <_vfiprintf_r+0x11a>
 8011c02:	2300      	movs	r3, #0
 8011c04:	3401      	adds	r4, #1
 8011c06:	9305      	str	r3, [sp, #20]
 8011c08:	4619      	mov	r1, r3
 8011c0a:	f04f 0c0a 	mov.w	ip, #10
 8011c0e:	4620      	mov	r0, r4
 8011c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c14:	3a30      	subs	r2, #48	; 0x30
 8011c16:	2a09      	cmp	r2, #9
 8011c18:	d903      	bls.n	8011c22 <_vfiprintf_r+0x1ee>
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d0c5      	beq.n	8011baa <_vfiprintf_r+0x176>
 8011c1e:	9105      	str	r1, [sp, #20]
 8011c20:	e7c3      	b.n	8011baa <_vfiprintf_r+0x176>
 8011c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c26:	4604      	mov	r4, r0
 8011c28:	2301      	movs	r3, #1
 8011c2a:	e7f0      	b.n	8011c0e <_vfiprintf_r+0x1da>
 8011c2c:	ab03      	add	r3, sp, #12
 8011c2e:	9300      	str	r3, [sp, #0]
 8011c30:	462a      	mov	r2, r5
 8011c32:	4b16      	ldr	r3, [pc, #88]	; (8011c8c <_vfiprintf_r+0x258>)
 8011c34:	a904      	add	r1, sp, #16
 8011c36:	4630      	mov	r0, r6
 8011c38:	f7fb fdfa 	bl	800d830 <_printf_float>
 8011c3c:	4607      	mov	r7, r0
 8011c3e:	1c78      	adds	r0, r7, #1
 8011c40:	d1d6      	bne.n	8011bf0 <_vfiprintf_r+0x1bc>
 8011c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c44:	07d9      	lsls	r1, r3, #31
 8011c46:	d405      	bmi.n	8011c54 <_vfiprintf_r+0x220>
 8011c48:	89ab      	ldrh	r3, [r5, #12]
 8011c4a:	059a      	lsls	r2, r3, #22
 8011c4c:	d402      	bmi.n	8011c54 <_vfiprintf_r+0x220>
 8011c4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c50:	f7fe ff32 	bl	8010ab8 <__retarget_lock_release_recursive>
 8011c54:	89ab      	ldrh	r3, [r5, #12]
 8011c56:	065b      	lsls	r3, r3, #25
 8011c58:	f53f af12 	bmi.w	8011a80 <_vfiprintf_r+0x4c>
 8011c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c5e:	e711      	b.n	8011a84 <_vfiprintf_r+0x50>
 8011c60:	ab03      	add	r3, sp, #12
 8011c62:	9300      	str	r3, [sp, #0]
 8011c64:	462a      	mov	r2, r5
 8011c66:	4b09      	ldr	r3, [pc, #36]	; (8011c8c <_vfiprintf_r+0x258>)
 8011c68:	a904      	add	r1, sp, #16
 8011c6a:	4630      	mov	r0, r6
 8011c6c:	f7fc f884 	bl	800dd78 <_printf_i>
 8011c70:	e7e4      	b.n	8011c3c <_vfiprintf_r+0x208>
 8011c72:	bf00      	nop
 8011c74:	080129f8 	.word	0x080129f8
 8011c78:	08012a18 	.word	0x08012a18
 8011c7c:	080129d8 	.word	0x080129d8
 8011c80:	08012c0c 	.word	0x08012c0c
 8011c84:	08012c16 	.word	0x08012c16
 8011c88:	0800d831 	.word	0x0800d831
 8011c8c:	08011a0f 	.word	0x08011a0f
 8011c90:	08012c12 	.word	0x08012c12
 8011c94:	00000000 	.word	0x00000000

08011c98 <nan>:
 8011c98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011ca0 <nan+0x8>
 8011c9c:	4770      	bx	lr
 8011c9e:	bf00      	nop
 8011ca0:	00000000 	.word	0x00000000
 8011ca4:	7ff80000 	.word	0x7ff80000

08011ca8 <_sbrk_r>:
 8011ca8:	b538      	push	{r3, r4, r5, lr}
 8011caa:	4d06      	ldr	r5, [pc, #24]	; (8011cc4 <_sbrk_r+0x1c>)
 8011cac:	2300      	movs	r3, #0
 8011cae:	4604      	mov	r4, r0
 8011cb0:	4608      	mov	r0, r1
 8011cb2:	602b      	str	r3, [r5, #0]
 8011cb4:	f7f2 fa92 	bl	80041dc <_sbrk>
 8011cb8:	1c43      	adds	r3, r0, #1
 8011cba:	d102      	bne.n	8011cc2 <_sbrk_r+0x1a>
 8011cbc:	682b      	ldr	r3, [r5, #0]
 8011cbe:	b103      	cbz	r3, 8011cc2 <_sbrk_r+0x1a>
 8011cc0:	6023      	str	r3, [r4, #0]
 8011cc2:	bd38      	pop	{r3, r4, r5, pc}
 8011cc4:	20001494 	.word	0x20001494

08011cc8 <__sread>:
 8011cc8:	b510      	push	{r4, lr}
 8011cca:	460c      	mov	r4, r1
 8011ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cd0:	f000 f912 	bl	8011ef8 <_read_r>
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	bfab      	itete	ge
 8011cd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011cda:	89a3      	ldrhlt	r3, [r4, #12]
 8011cdc:	181b      	addge	r3, r3, r0
 8011cde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011ce2:	bfac      	ite	ge
 8011ce4:	6563      	strge	r3, [r4, #84]	; 0x54
 8011ce6:	81a3      	strhlt	r3, [r4, #12]
 8011ce8:	bd10      	pop	{r4, pc}

08011cea <__swrite>:
 8011cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cee:	461f      	mov	r7, r3
 8011cf0:	898b      	ldrh	r3, [r1, #12]
 8011cf2:	05db      	lsls	r3, r3, #23
 8011cf4:	4605      	mov	r5, r0
 8011cf6:	460c      	mov	r4, r1
 8011cf8:	4616      	mov	r6, r2
 8011cfa:	d505      	bpl.n	8011d08 <__swrite+0x1e>
 8011cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d00:	2302      	movs	r3, #2
 8011d02:	2200      	movs	r2, #0
 8011d04:	f000 f890 	bl	8011e28 <_lseek_r>
 8011d08:	89a3      	ldrh	r3, [r4, #12]
 8011d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011d12:	81a3      	strh	r3, [r4, #12]
 8011d14:	4632      	mov	r2, r6
 8011d16:	463b      	mov	r3, r7
 8011d18:	4628      	mov	r0, r5
 8011d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d1e:	f000 b837 	b.w	8011d90 <_write_r>

08011d22 <__sseek>:
 8011d22:	b510      	push	{r4, lr}
 8011d24:	460c      	mov	r4, r1
 8011d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d2a:	f000 f87d 	bl	8011e28 <_lseek_r>
 8011d2e:	1c43      	adds	r3, r0, #1
 8011d30:	89a3      	ldrh	r3, [r4, #12]
 8011d32:	bf15      	itete	ne
 8011d34:	6560      	strne	r0, [r4, #84]	; 0x54
 8011d36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011d3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011d3e:	81a3      	strheq	r3, [r4, #12]
 8011d40:	bf18      	it	ne
 8011d42:	81a3      	strhne	r3, [r4, #12]
 8011d44:	bd10      	pop	{r4, pc}

08011d46 <__sclose>:
 8011d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d4a:	f000 b83b 	b.w	8011dc4 <_close_r>

08011d4e <strncmp>:
 8011d4e:	b510      	push	{r4, lr}
 8011d50:	b17a      	cbz	r2, 8011d72 <strncmp+0x24>
 8011d52:	4603      	mov	r3, r0
 8011d54:	3901      	subs	r1, #1
 8011d56:	1884      	adds	r4, r0, r2
 8011d58:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011d5c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011d60:	4290      	cmp	r0, r2
 8011d62:	d101      	bne.n	8011d68 <strncmp+0x1a>
 8011d64:	42a3      	cmp	r3, r4
 8011d66:	d101      	bne.n	8011d6c <strncmp+0x1e>
 8011d68:	1a80      	subs	r0, r0, r2
 8011d6a:	bd10      	pop	{r4, pc}
 8011d6c:	2800      	cmp	r0, #0
 8011d6e:	d1f3      	bne.n	8011d58 <strncmp+0xa>
 8011d70:	e7fa      	b.n	8011d68 <strncmp+0x1a>
 8011d72:	4610      	mov	r0, r2
 8011d74:	e7f9      	b.n	8011d6a <strncmp+0x1c>

08011d76 <__ascii_wctomb>:
 8011d76:	b149      	cbz	r1, 8011d8c <__ascii_wctomb+0x16>
 8011d78:	2aff      	cmp	r2, #255	; 0xff
 8011d7a:	bf85      	ittet	hi
 8011d7c:	238a      	movhi	r3, #138	; 0x8a
 8011d7e:	6003      	strhi	r3, [r0, #0]
 8011d80:	700a      	strbls	r2, [r1, #0]
 8011d82:	f04f 30ff 	movhi.w	r0, #4294967295
 8011d86:	bf98      	it	ls
 8011d88:	2001      	movls	r0, #1
 8011d8a:	4770      	bx	lr
 8011d8c:	4608      	mov	r0, r1
 8011d8e:	4770      	bx	lr

08011d90 <_write_r>:
 8011d90:	b538      	push	{r3, r4, r5, lr}
 8011d92:	4d07      	ldr	r5, [pc, #28]	; (8011db0 <_write_r+0x20>)
 8011d94:	4604      	mov	r4, r0
 8011d96:	4608      	mov	r0, r1
 8011d98:	4611      	mov	r1, r2
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	602a      	str	r2, [r5, #0]
 8011d9e:	461a      	mov	r2, r3
 8011da0:	f7f2 f9cb 	bl	800413a <_write>
 8011da4:	1c43      	adds	r3, r0, #1
 8011da6:	d102      	bne.n	8011dae <_write_r+0x1e>
 8011da8:	682b      	ldr	r3, [r5, #0]
 8011daa:	b103      	cbz	r3, 8011dae <_write_r+0x1e>
 8011dac:	6023      	str	r3, [r4, #0]
 8011dae:	bd38      	pop	{r3, r4, r5, pc}
 8011db0:	20001494 	.word	0x20001494

08011db4 <abort>:
 8011db4:	b508      	push	{r3, lr}
 8011db6:	2006      	movs	r0, #6
 8011db8:	f000 f8d8 	bl	8011f6c <raise>
 8011dbc:	2001      	movs	r0, #1
 8011dbe:	f7f2 f995 	bl	80040ec <_exit>
	...

08011dc4 <_close_r>:
 8011dc4:	b538      	push	{r3, r4, r5, lr}
 8011dc6:	4d06      	ldr	r5, [pc, #24]	; (8011de0 <_close_r+0x1c>)
 8011dc8:	2300      	movs	r3, #0
 8011dca:	4604      	mov	r4, r0
 8011dcc:	4608      	mov	r0, r1
 8011dce:	602b      	str	r3, [r5, #0]
 8011dd0:	f7f2 f9cf 	bl	8004172 <_close>
 8011dd4:	1c43      	adds	r3, r0, #1
 8011dd6:	d102      	bne.n	8011dde <_close_r+0x1a>
 8011dd8:	682b      	ldr	r3, [r5, #0]
 8011dda:	b103      	cbz	r3, 8011dde <_close_r+0x1a>
 8011ddc:	6023      	str	r3, [r4, #0]
 8011dde:	bd38      	pop	{r3, r4, r5, pc}
 8011de0:	20001494 	.word	0x20001494

08011de4 <_fstat_r>:
 8011de4:	b538      	push	{r3, r4, r5, lr}
 8011de6:	4d07      	ldr	r5, [pc, #28]	; (8011e04 <_fstat_r+0x20>)
 8011de8:	2300      	movs	r3, #0
 8011dea:	4604      	mov	r4, r0
 8011dec:	4608      	mov	r0, r1
 8011dee:	4611      	mov	r1, r2
 8011df0:	602b      	str	r3, [r5, #0]
 8011df2:	f7f2 f9ca 	bl	800418a <_fstat>
 8011df6:	1c43      	adds	r3, r0, #1
 8011df8:	d102      	bne.n	8011e00 <_fstat_r+0x1c>
 8011dfa:	682b      	ldr	r3, [r5, #0]
 8011dfc:	b103      	cbz	r3, 8011e00 <_fstat_r+0x1c>
 8011dfe:	6023      	str	r3, [r4, #0]
 8011e00:	bd38      	pop	{r3, r4, r5, pc}
 8011e02:	bf00      	nop
 8011e04:	20001494 	.word	0x20001494

08011e08 <_isatty_r>:
 8011e08:	b538      	push	{r3, r4, r5, lr}
 8011e0a:	4d06      	ldr	r5, [pc, #24]	; (8011e24 <_isatty_r+0x1c>)
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	4604      	mov	r4, r0
 8011e10:	4608      	mov	r0, r1
 8011e12:	602b      	str	r3, [r5, #0]
 8011e14:	f7f2 f9c9 	bl	80041aa <_isatty>
 8011e18:	1c43      	adds	r3, r0, #1
 8011e1a:	d102      	bne.n	8011e22 <_isatty_r+0x1a>
 8011e1c:	682b      	ldr	r3, [r5, #0]
 8011e1e:	b103      	cbz	r3, 8011e22 <_isatty_r+0x1a>
 8011e20:	6023      	str	r3, [r4, #0]
 8011e22:	bd38      	pop	{r3, r4, r5, pc}
 8011e24:	20001494 	.word	0x20001494

08011e28 <_lseek_r>:
 8011e28:	b538      	push	{r3, r4, r5, lr}
 8011e2a:	4d07      	ldr	r5, [pc, #28]	; (8011e48 <_lseek_r+0x20>)
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	4608      	mov	r0, r1
 8011e30:	4611      	mov	r1, r2
 8011e32:	2200      	movs	r2, #0
 8011e34:	602a      	str	r2, [r5, #0]
 8011e36:	461a      	mov	r2, r3
 8011e38:	f7f2 f9c2 	bl	80041c0 <_lseek>
 8011e3c:	1c43      	adds	r3, r0, #1
 8011e3e:	d102      	bne.n	8011e46 <_lseek_r+0x1e>
 8011e40:	682b      	ldr	r3, [r5, #0]
 8011e42:	b103      	cbz	r3, 8011e46 <_lseek_r+0x1e>
 8011e44:	6023      	str	r3, [r4, #0]
 8011e46:	bd38      	pop	{r3, r4, r5, pc}
 8011e48:	20001494 	.word	0x20001494

08011e4c <memmove>:
 8011e4c:	4288      	cmp	r0, r1
 8011e4e:	b510      	push	{r4, lr}
 8011e50:	eb01 0402 	add.w	r4, r1, r2
 8011e54:	d902      	bls.n	8011e5c <memmove+0x10>
 8011e56:	4284      	cmp	r4, r0
 8011e58:	4623      	mov	r3, r4
 8011e5a:	d807      	bhi.n	8011e6c <memmove+0x20>
 8011e5c:	1e43      	subs	r3, r0, #1
 8011e5e:	42a1      	cmp	r1, r4
 8011e60:	d008      	beq.n	8011e74 <memmove+0x28>
 8011e62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e6a:	e7f8      	b.n	8011e5e <memmove+0x12>
 8011e6c:	4402      	add	r2, r0
 8011e6e:	4601      	mov	r1, r0
 8011e70:	428a      	cmp	r2, r1
 8011e72:	d100      	bne.n	8011e76 <memmove+0x2a>
 8011e74:	bd10      	pop	{r4, pc}
 8011e76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e7e:	e7f7      	b.n	8011e70 <memmove+0x24>

08011e80 <__malloc_lock>:
 8011e80:	4801      	ldr	r0, [pc, #4]	; (8011e88 <__malloc_lock+0x8>)
 8011e82:	f7fe be18 	b.w	8010ab6 <__retarget_lock_acquire_recursive>
 8011e86:	bf00      	nop
 8011e88:	20001488 	.word	0x20001488

08011e8c <__malloc_unlock>:
 8011e8c:	4801      	ldr	r0, [pc, #4]	; (8011e94 <__malloc_unlock+0x8>)
 8011e8e:	f7fe be13 	b.w	8010ab8 <__retarget_lock_release_recursive>
 8011e92:	bf00      	nop
 8011e94:	20001488 	.word	0x20001488

08011e98 <_realloc_r>:
 8011e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e9c:	4680      	mov	r8, r0
 8011e9e:	4614      	mov	r4, r2
 8011ea0:	460e      	mov	r6, r1
 8011ea2:	b921      	cbnz	r1, 8011eae <_realloc_r+0x16>
 8011ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ea8:	4611      	mov	r1, r2
 8011eaa:	f7ff bbc9 	b.w	8011640 <_malloc_r>
 8011eae:	b92a      	cbnz	r2, 8011ebc <_realloc_r+0x24>
 8011eb0:	f7ff fb5a 	bl	8011568 <_free_r>
 8011eb4:	4625      	mov	r5, r4
 8011eb6:	4628      	mov	r0, r5
 8011eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ebc:	f000 f872 	bl	8011fa4 <_malloc_usable_size_r>
 8011ec0:	4284      	cmp	r4, r0
 8011ec2:	4607      	mov	r7, r0
 8011ec4:	d802      	bhi.n	8011ecc <_realloc_r+0x34>
 8011ec6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011eca:	d812      	bhi.n	8011ef2 <_realloc_r+0x5a>
 8011ecc:	4621      	mov	r1, r4
 8011ece:	4640      	mov	r0, r8
 8011ed0:	f7ff fbb6 	bl	8011640 <_malloc_r>
 8011ed4:	4605      	mov	r5, r0
 8011ed6:	2800      	cmp	r0, #0
 8011ed8:	d0ed      	beq.n	8011eb6 <_realloc_r+0x1e>
 8011eda:	42bc      	cmp	r4, r7
 8011edc:	4622      	mov	r2, r4
 8011ede:	4631      	mov	r1, r6
 8011ee0:	bf28      	it	cs
 8011ee2:	463a      	movcs	r2, r7
 8011ee4:	f7fb fbee 	bl	800d6c4 <memcpy>
 8011ee8:	4631      	mov	r1, r6
 8011eea:	4640      	mov	r0, r8
 8011eec:	f7ff fb3c 	bl	8011568 <_free_r>
 8011ef0:	e7e1      	b.n	8011eb6 <_realloc_r+0x1e>
 8011ef2:	4635      	mov	r5, r6
 8011ef4:	e7df      	b.n	8011eb6 <_realloc_r+0x1e>
	...

08011ef8 <_read_r>:
 8011ef8:	b538      	push	{r3, r4, r5, lr}
 8011efa:	4d07      	ldr	r5, [pc, #28]	; (8011f18 <_read_r+0x20>)
 8011efc:	4604      	mov	r4, r0
 8011efe:	4608      	mov	r0, r1
 8011f00:	4611      	mov	r1, r2
 8011f02:	2200      	movs	r2, #0
 8011f04:	602a      	str	r2, [r5, #0]
 8011f06:	461a      	mov	r2, r3
 8011f08:	f7f2 f8fa 	bl	8004100 <_read>
 8011f0c:	1c43      	adds	r3, r0, #1
 8011f0e:	d102      	bne.n	8011f16 <_read_r+0x1e>
 8011f10:	682b      	ldr	r3, [r5, #0]
 8011f12:	b103      	cbz	r3, 8011f16 <_read_r+0x1e>
 8011f14:	6023      	str	r3, [r4, #0]
 8011f16:	bd38      	pop	{r3, r4, r5, pc}
 8011f18:	20001494 	.word	0x20001494

08011f1c <_raise_r>:
 8011f1c:	291f      	cmp	r1, #31
 8011f1e:	b538      	push	{r3, r4, r5, lr}
 8011f20:	4604      	mov	r4, r0
 8011f22:	460d      	mov	r5, r1
 8011f24:	d904      	bls.n	8011f30 <_raise_r+0x14>
 8011f26:	2316      	movs	r3, #22
 8011f28:	6003      	str	r3, [r0, #0]
 8011f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f2e:	bd38      	pop	{r3, r4, r5, pc}
 8011f30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011f32:	b112      	cbz	r2, 8011f3a <_raise_r+0x1e>
 8011f34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f38:	b94b      	cbnz	r3, 8011f4e <_raise_r+0x32>
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	f000 f830 	bl	8011fa0 <_getpid_r>
 8011f40:	462a      	mov	r2, r5
 8011f42:	4601      	mov	r1, r0
 8011f44:	4620      	mov	r0, r4
 8011f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f4a:	f000 b817 	b.w	8011f7c <_kill_r>
 8011f4e:	2b01      	cmp	r3, #1
 8011f50:	d00a      	beq.n	8011f68 <_raise_r+0x4c>
 8011f52:	1c59      	adds	r1, r3, #1
 8011f54:	d103      	bne.n	8011f5e <_raise_r+0x42>
 8011f56:	2316      	movs	r3, #22
 8011f58:	6003      	str	r3, [r0, #0]
 8011f5a:	2001      	movs	r0, #1
 8011f5c:	e7e7      	b.n	8011f2e <_raise_r+0x12>
 8011f5e:	2400      	movs	r4, #0
 8011f60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f64:	4628      	mov	r0, r5
 8011f66:	4798      	blx	r3
 8011f68:	2000      	movs	r0, #0
 8011f6a:	e7e0      	b.n	8011f2e <_raise_r+0x12>

08011f6c <raise>:
 8011f6c:	4b02      	ldr	r3, [pc, #8]	; (8011f78 <raise+0xc>)
 8011f6e:	4601      	mov	r1, r0
 8011f70:	6818      	ldr	r0, [r3, #0]
 8011f72:	f7ff bfd3 	b.w	8011f1c <_raise_r>
 8011f76:	bf00      	nop
 8011f78:	20000024 	.word	0x20000024

08011f7c <_kill_r>:
 8011f7c:	b538      	push	{r3, r4, r5, lr}
 8011f7e:	4d07      	ldr	r5, [pc, #28]	; (8011f9c <_kill_r+0x20>)
 8011f80:	2300      	movs	r3, #0
 8011f82:	4604      	mov	r4, r0
 8011f84:	4608      	mov	r0, r1
 8011f86:	4611      	mov	r1, r2
 8011f88:	602b      	str	r3, [r5, #0]
 8011f8a:	f7f2 f89f 	bl	80040cc <_kill>
 8011f8e:	1c43      	adds	r3, r0, #1
 8011f90:	d102      	bne.n	8011f98 <_kill_r+0x1c>
 8011f92:	682b      	ldr	r3, [r5, #0]
 8011f94:	b103      	cbz	r3, 8011f98 <_kill_r+0x1c>
 8011f96:	6023      	str	r3, [r4, #0]
 8011f98:	bd38      	pop	{r3, r4, r5, pc}
 8011f9a:	bf00      	nop
 8011f9c:	20001494 	.word	0x20001494

08011fa0 <_getpid_r>:
 8011fa0:	f7f2 b88c 	b.w	80040bc <_getpid>

08011fa4 <_malloc_usable_size_r>:
 8011fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fa8:	1f18      	subs	r0, r3, #4
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	bfbc      	itt	lt
 8011fae:	580b      	ldrlt	r3, [r1, r0]
 8011fb0:	18c0      	addlt	r0, r0, r3
 8011fb2:	4770      	bx	lr

08011fb4 <_init>:
 8011fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fb6:	bf00      	nop
 8011fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fba:	bc08      	pop	{r3}
 8011fbc:	469e      	mov	lr, r3
 8011fbe:	4770      	bx	lr

08011fc0 <_fini>:
 8011fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fc2:	bf00      	nop
 8011fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fc6:	bc08      	pop	{r3}
 8011fc8:	469e      	mov	lr, r3
 8011fca:	4770      	bx	lr
