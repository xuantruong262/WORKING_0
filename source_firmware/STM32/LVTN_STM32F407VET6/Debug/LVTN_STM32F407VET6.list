
LVTN_STM32F407VET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012604  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c18  08012798  08012798  00022798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080133b0  080133b0  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  080133b0  080133b0  000233b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080133b8  080133b8  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080133b8  080133b8  000233b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080133bc  080133bc  000233bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080133c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          00001300  200001f8  200001f8  000301f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200014f8  200014f8  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cf27  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004076  00000000  00000000  0004d14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e8  00000000  00000000  000511c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001880  00000000  00000000  00052bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277f7  00000000  00000000  00054430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022f53  00000000  00000000  0007bc27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e087c  00000000  00000000  0009eb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017f3f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008260  00000000  00000000  0017f448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801277c 	.word	0x0801277c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0801277c 	.word	0x0801277c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <BUFFER_CLEAR>:
#include"common.h"

extern TIM_HandleTypeDef htim6;

void BUFFER_CLEAR(uint8_t *buff, uint32_t sizebuff)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<sizebuff;i++)
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e007      	b.n	8001038 <BUFFER_CLEAR+0x20>
	{
		buff[i] = '\0';
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<sizebuff;i++)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3301      	adds	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f3      	bhi.n	8001028 <BUFFER_CLEAR+0x10>
	}
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <BUFF_SIZE>:

unsigned int BUFF_SIZE(uint8_t *buff)
{
 800104e:	b480      	push	{r7}
 8001050:	b085      	sub	sp, #20
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
	while(*(buff++) != '\0')
 800105a:	e002      	b.n	8001062 <BUFF_SIZE+0x14>
	{i++;}
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3301      	adds	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
	while(*(buff++) != '\0')
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f6      	bne.n	800105c <BUFF_SIZE+0xe>
	return i;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DS1307_GetRegByte>:
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
    uint8_t bytes[2] = { regAddr, val };
    HAL_I2C_Master_Transmit(&hi2c3, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
}

uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    HAL_I2C_Master_Transmit(&hi2c3, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8001086:	1dfa      	adds	r2, r7, #7
 8001088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2301      	movs	r3, #1
 8001090:	21d0      	movs	r1, #208	; 0xd0
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <DS1307_GetRegByte+0x3c>)
 8001094:	f005 fc94 	bl	80069c0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c3, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8001098:	f107 020f 	add.w	r2, r7, #15
 800109c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	21d0      	movs	r1, #208	; 0xd0
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <DS1307_GetRegByte+0x3c>)
 80010a8:	f005 fd88 	bl	8006bbc <HAL_I2C_Master_Receive>
    return val;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000340 	.word	0x20000340

080010bc <DS1307_DecodeBCD>:
}
void DS1307_config(){
    DS1307_SetClockHalt(0);
    DS1307_SetTimeZone(+8, 00);
}
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
    return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	091b      	lsrs	r3, r3, #4
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4413      	add	r3, r2
 80010e0:	b2db      	uxtb	r3, r3
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <DS1307_gettime>:
    DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));//month Month, 1 to 12.
    DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
    DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));//2000 to 2099.
}

void DS1307_gettime(){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
    uint16_t cen;
    ds1307.sec=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff ffc0 	bl	800107c <DS1307_GetRegByte>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ffd9 	bl	80010bc <DS1307_DecodeBCD>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <DS1307_gettime+0xd8>)
 8001110:	701a      	strb	r2, [r3, #0]
    ds1307.min=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8001112:	2001      	movs	r0, #1
 8001114:	f7ff ffb2 	bl	800107c <DS1307_GetRegByte>
 8001118:	4603      	mov	r3, r0
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ffce 	bl	80010bc <DS1307_DecodeBCD>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <DS1307_gettime+0xd8>)
 8001126:	705a      	strb	r2, [r3, #1]
    ds1307.hour=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8001128:	2002      	movs	r0, #2
 800112a:	f7ff ffa7 	bl	800107c <DS1307_GetRegByte>
 800112e:	4603      	mov	r3, r0
 8001130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ffc0 	bl	80010bc <DS1307_DecodeBCD>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <DS1307_gettime+0xd8>)
 8001142:	709a      	strb	r2, [r3, #2]
    ds1307.dow=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 8001144:	2003      	movs	r0, #3
 8001146:	f7ff ff99 	bl	800107c <DS1307_GetRegByte>
 800114a:	4603      	mov	r3, r0
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ffb5 	bl	80010bc <DS1307_DecodeBCD>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <DS1307_gettime+0xd8>)
 8001158:	70da      	strb	r2, [r3, #3]
    ds1307.date=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 800115a:	2004      	movs	r0, #4
 800115c:	f7ff ff8e 	bl	800107c <DS1307_GetRegByte>
 8001160:	4603      	mov	r3, r0
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ffaa 	bl	80010bc <DS1307_DecodeBCD>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <DS1307_gettime+0xd8>)
 800116e:	711a      	strb	r2, [r3, #4]
    ds1307.month=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8001170:	2005      	movs	r0, #5
 8001172:	f7ff ff83 	bl	800107c <DS1307_GetRegByte>
 8001176:	4603      	mov	r3, r0
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff9f 	bl	80010bc <DS1307_DecodeBCD>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <DS1307_gettime+0xd8>)
 8001184:	715a      	strb	r2, [r3, #5]
    cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8001186:	2010      	movs	r0, #16
 8001188:	f7ff ff78 	bl	800107c <DS1307_GetRegByte>
 800118c:	4603      	mov	r3, r0
 800118e:	b29b      	uxth	r3, r3
 8001190:	461a      	mov	r2, r3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4413      	add	r3, r2
 8001196:	461a      	mov	r2, r3
 8001198:	0091      	lsls	r1, r2, #2
 800119a:	461a      	mov	r2, r3
 800119c:	460b      	mov	r3, r1
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	80fb      	strh	r3, [r7, #6]
    ds1307.year=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 80011a4:	2006      	movs	r0, #6
 80011a6:	f7ff ff69 	bl	800107c <DS1307_GetRegByte>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff85 	bl	80010bc <DS1307_DecodeBCD>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	4413      	add	r3, r2
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b02      	ldr	r3, [pc, #8]	; (80011c8 <DS1307_gettime+0xd8>)
 80011be:	80da      	strh	r2, [r3, #6]
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000214 	.word	0x20000214

080011cc <SELECT>:
#define SD_CS_GPIO_Port GPIOC
#define SD_CS_Pin GPIO_PIN_1

/* SPI Chip Select */
static void SELECT(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2102      	movs	r1, #2
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <SELECT+0x14>)
 80011d6:	f005 fa7b 	bl	80066d0 <HAL_GPIO_WritePin>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40020800 	.word	0x40020800

080011e4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2102      	movs	r1, #2
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <DESELECT+0x14>)
 80011ee:	f005 fa6f 	bl	80066d0 <HAL_GPIO_WritePin>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40020800 	.word	0x40020800

080011fc <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8001206:	bf00      	nop
 8001208:	4808      	ldr	r0, [pc, #32]	; (800122c <SPI_TxByte+0x30>)
 800120a:	f007 fb4d 	bl	80088a8 <HAL_SPI_GetState>
 800120e:	4603      	mov	r3, r0
 8001210:	2b01      	cmp	r3, #1
 8001212:	d1f9      	bne.n	8001208 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8001214:	1df9      	adds	r1, r7, #7
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	2201      	movs	r2, #1
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <SPI_TxByte+0x30>)
 800121e:	f006 ff54 	bl	80080ca <HAL_SPI_Transmit>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200003f8 	.word	0x200003f8

08001230 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001236:	23ff      	movs	r3, #255	; 0xff
 8001238:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 800123e:	bf00      	nop
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <SPI_RxByte+0x38>)
 8001242:	f007 fb31 	bl	80088a8 <HAL_SPI_GetState>
 8001246:	4603      	mov	r3, r0
 8001248:	2b01      	cmp	r3, #1
 800124a:	d1f9      	bne.n	8001240 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 800124c:	1dba      	adds	r2, r7, #6
 800124e:	1df9      	adds	r1, r7, #7
 8001250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <SPI_RxByte+0x38>)
 800125a:	f007 f983 	bl	8008564 <HAL_SPI_TransmitReceive>

  return data;
 800125e:	79bb      	ldrb	r3, [r7, #6]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200003f8 	.word	0x200003f8

0800126c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001274:	f7ff ffdc 	bl	8001230 <SPI_RxByte>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	701a      	strb	r2, [r3, #0]
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <SD_ReadyWait+0x34>)
 8001290:	2232      	movs	r2, #50	; 0x32
 8001292:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001294:	f7ff ffcc 	bl	8001230 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001298:	f7ff ffca 	bl	8001230 <SPI_RxByte>
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	2bff      	cmp	r3, #255	; 0xff
 80012a4:	d004      	beq.n	80012b0 <SD_ReadyWait+0x28>
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SD_ReadyWait+0x34>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f3      	bne.n	8001298 <SD_ReadyWait+0x10>

  return res;
 80012b0:	79fb      	ldrb	r3, [r7, #7]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000127a 	.word	0x2000127a

080012c0 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80012c6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80012ca:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80012cc:	f7ff ff8a 	bl	80011e4 <DESELECT>

  for(int i = 0; i < 10; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	e005      	b.n	80012e2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80012d6:	20ff      	movs	r0, #255	; 0xff
 80012d8:	f7ff ff90 	bl	80011fc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	3301      	adds	r3, #1
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	2b09      	cmp	r3, #9
 80012e6:	ddf6      	ble.n	80012d6 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80012e8:	f7ff ff70 	bl	80011cc <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80012ec:	2340      	movs	r3, #64	; 0x40
 80012ee:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001300:	2395      	movs	r3, #149	; 0x95
 8001302:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	e009      	b.n	800131e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800130a:	1d3a      	adds	r2, r7, #4
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff72 	bl	80011fc <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2b05      	cmp	r3, #5
 8001322:	ddf2      	ble.n	800130a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001324:	e002      	b.n	800132c <SD_PowerOn+0x6c>
  {
    Count--;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3b01      	subs	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800132c:	f7ff ff80 	bl	8001230 <SPI_RxByte>
 8001330:	4603      	mov	r3, r0
 8001332:	2b01      	cmp	r3, #1
 8001334:	d002      	beq.n	800133c <SD_PowerOn+0x7c>
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f4      	bne.n	8001326 <SD_PowerOn+0x66>
  }

  DESELECT();
 800133c:	f7ff ff52 	bl	80011e4 <DESELECT>
  SPI_TxByte(0XFF);
 8001340:	20ff      	movs	r0, #255	; 0xff
 8001342:	f7ff ff5b 	bl	80011fc <SPI_TxByte>

  PowerFlag = 1;
 8001346:	4b03      	ldr	r3, [pc, #12]	; (8001354 <SD_PowerOn+0x94>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
}
 800134c:	bf00      	nop
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	2000021d 	.word	0x2000021d

08001358 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <SD_PowerOff+0x14>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	2000021d 	.word	0x2000021d

08001370 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <SD_CheckPower+0x14>)
 8001376:	781b      	ldrb	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	2000021d 	.word	0x2000021d

08001388 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <SD_RxDataBlock+0x68>)
 8001394:	220a      	movs	r2, #10
 8001396:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001398:	f7ff ff4a 	bl	8001230 <SPI_RxByte>
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	2bff      	cmp	r3, #255	; 0xff
 80013a4:	d104      	bne.n	80013b0 <SD_RxDataBlock+0x28>
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <SD_RxDataBlock+0x68>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f3      	bne.n	8001398 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	2bfe      	cmp	r3, #254	; 0xfe
 80013b4:	d001      	beq.n	80013ba <SD_RxDataBlock+0x32>
    return FALSE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e016      	b.n	80013e8 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff53 	bl	800126c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff4d 	bl	800126c <SPI_RxBytePtr>
  } while(btr -= 2);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	3b02      	subs	r3, #2
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1ed      	bne.n	80013ba <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80013de:	f7ff ff27 	bl	8001230 <SPI_RxByte>
  SPI_RxByte();
 80013e2:	f7ff ff25 	bl	8001230 <SPI_RxByte>

  return TRUE;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20001279 	.word	0x20001279

080013f4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001404:	f7ff ff40 	bl	8001288 <SD_ReadyWait>
 8001408:	4603      	mov	r3, r0
 800140a:	2bff      	cmp	r3, #255	; 0xff
 800140c:	d001      	beq.n	8001412 <SD_TxDataBlock+0x1e>
    return FALSE;
 800140e:	2300      	movs	r3, #0
 8001410:	e040      	b.n	8001494 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fef1 	bl	80011fc <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	2bfd      	cmp	r3, #253	; 0xfd
 800141e:	d031      	beq.n	8001484 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fee5 	bl	80011fc <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fede 	bl	80011fc <SPI_TxByte>
    } while (--wc);
 8001440:	7bbb      	ldrb	r3, [r7, #14]
 8001442:	3b01      	subs	r3, #1
 8001444:	73bb      	strb	r3, [r7, #14]
 8001446:	7bbb      	ldrb	r3, [r7, #14]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1eb      	bne.n	8001424 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 800144c:	f7ff fef0 	bl	8001230 <SPI_RxByte>
    SPI_RxByte();
 8001450:	f7ff feee 	bl	8001230 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001454:	e00b      	b.n	800146e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001456:	f7ff feeb 	bl	8001230 <SPI_RxByte>
 800145a:	4603      	mov	r3, r0
 800145c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	2b05      	cmp	r3, #5
 8001466:	d006      	beq.n	8001476 <SD_TxDataBlock+0x82>
        break;

      i++;
 8001468:	7b7b      	ldrb	r3, [r7, #13]
 800146a:	3301      	adds	r3, #1
 800146c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800146e:	7b7b      	ldrb	r3, [r7, #13]
 8001470:	2b40      	cmp	r3, #64	; 0x40
 8001472:	d9f0      	bls.n	8001456 <SD_TxDataBlock+0x62>
 8001474:	e000      	b.n	8001478 <SD_TxDataBlock+0x84>
        break;
 8001476:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001478:	bf00      	nop
 800147a:	f7ff fed9 	bl	8001230 <SPI_RxByte>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0fa      	beq.n	800147a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	f003 031f 	and.w	r3, r3, #31
 800148a:	2b05      	cmp	r3, #5
 800148c:	d101      	bne.n	8001492 <SD_TxDataBlock+0x9e>
    return TRUE;
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80014a8:	f7ff feee 	bl	8001288 <SD_ReadyWait>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2bff      	cmp	r3, #255	; 0xff
 80014b0:	d001      	beq.n	80014b6 <SD_SendCmd+0x1a>
    return 0xFF;
 80014b2:	23ff      	movs	r3, #255	; 0xff
 80014b4:	e040      	b.n	8001538 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fe9f 	bl	80011fc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	0e1b      	lsrs	r3, r3, #24
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fe99 	bl	80011fc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	0c1b      	lsrs	r3, r3, #16
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fe93 	bl	80011fc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fe8d 	bl	80011fc <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fe88 	bl	80011fc <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	2b40      	cmp	r3, #64	; 0x40
 80014f4:	d101      	bne.n	80014fa <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80014f6:	2395      	movs	r3, #149	; 0x95
 80014f8:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b48      	cmp	r3, #72	; 0x48
 80014fe:	d101      	bne.n	8001504 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001500:	2387      	movs	r3, #135	; 0x87
 8001502:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fe78 	bl	80011fc <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b4c      	cmp	r3, #76	; 0x4c
 8001510:	d101      	bne.n	8001516 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001512:	f7ff fe8d 	bl	8001230 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001516:	230a      	movs	r3, #10
 8001518:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800151a:	f7ff fe89 	bl	8001230 <SPI_RxByte>
 800151e:	4603      	mov	r3, r0
 8001520:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001522:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001526:	2b00      	cmp	r3, #0
 8001528:	da05      	bge.n	8001536 <SD_SendCmd+0x9a>
 800152a:	7bbb      	ldrb	r3, [r7, #14]
 800152c:	3b01      	subs	r3, #1
 800152e:	73bb      	strb	r3, [r7, #14]
 8001530:	7bbb      	ldrb	r3, [r7, #14]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f1      	bne.n	800151a <SD_SendCmd+0x7e>

  return res;
 8001536:	7b7b      	ldrb	r3, [r7, #13]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001550:	2301      	movs	r3, #1
 8001552:	e0d5      	b.n	8001700 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001554:	4b6c      	ldr	r3, [pc, #432]	; (8001708 <SD_disk_initialize+0x1c8>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <SD_disk_initialize+0x2a>
    return Stat;
 8001562:	4b69      	ldr	r3, [pc, #420]	; (8001708 <SD_disk_initialize+0x1c8>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	e0ca      	b.n	8001700 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800156a:	f7ff fea9 	bl	80012c0 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800156e:	f7ff fe2d 	bl	80011cc <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001576:	2100      	movs	r1, #0
 8001578:	2040      	movs	r0, #64	; 0x40
 800157a:	f7ff ff8f 	bl	800149c <SD_SendCmd>
 800157e:	4603      	mov	r3, r0
 8001580:	2b01      	cmp	r3, #1
 8001582:	f040 80a5 	bne.w	80016d0 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001586:	4b61      	ldr	r3, [pc, #388]	; (800170c <SD_disk_initialize+0x1cc>)
 8001588:	2264      	movs	r2, #100	; 0x64
 800158a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800158c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001590:	2048      	movs	r0, #72	; 0x48
 8001592:	f7ff ff83 	bl	800149c <SD_SendCmd>
 8001596:	4603      	mov	r3, r0
 8001598:	2b01      	cmp	r3, #1
 800159a:	d158      	bne.n	800164e <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e00c      	b.n	80015bc <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80015a2:	7bfc      	ldrb	r4, [r7, #15]
 80015a4:	f7ff fe44 	bl	8001230 <SPI_RxByte>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	f104 0310 	add.w	r3, r4, #16
 80015b0:	443b      	add	r3, r7
 80015b2:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	3301      	adds	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d9ef      	bls.n	80015a2 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80015c2:	7abb      	ldrb	r3, [r7, #10]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	f040 8083 	bne.w	80016d0 <SD_disk_initialize+0x190>
 80015ca:	7afb      	ldrb	r3, [r7, #11]
 80015cc:	2baa      	cmp	r3, #170	; 0xaa
 80015ce:	d17f      	bne.n	80016d0 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80015d0:	2100      	movs	r1, #0
 80015d2:	2077      	movs	r0, #119	; 0x77
 80015d4:	f7ff ff62 	bl	800149c <SD_SendCmd>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d807      	bhi.n	80015ee <SD_disk_initialize+0xae>
 80015de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015e2:	2069      	movs	r0, #105	; 0x69
 80015e4:	f7ff ff5a 	bl	800149c <SD_SendCmd>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d005      	beq.n	80015fa <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <SD_disk_initialize+0x1cc>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1eb      	bne.n	80015d0 <SD_disk_initialize+0x90>
 80015f8:	e000      	b.n	80015fc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80015fa:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80015fc:	4b43      	ldr	r3, [pc, #268]	; (800170c <SD_disk_initialize+0x1cc>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d064      	beq.n	80016d0 <SD_disk_initialize+0x190>
 8001606:	2100      	movs	r1, #0
 8001608:	207a      	movs	r0, #122	; 0x7a
 800160a:	f7ff ff47 	bl	800149c <SD_SendCmd>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d15d      	bne.n	80016d0 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e00c      	b.n	8001634 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800161a:	7bfc      	ldrb	r4, [r7, #15]
 800161c:	f7ff fe08 	bl	8001230 <SPI_RxByte>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	f104 0310 	add.w	r3, r4, #16
 8001628:	443b      	add	r3, r7
 800162a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	3301      	adds	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d9ef      	bls.n	800161a <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800163a:	7a3b      	ldrb	r3, [r7, #8]
 800163c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SD_disk_initialize+0x108>
 8001644:	2306      	movs	r3, #6
 8001646:	e000      	b.n	800164a <SD_disk_initialize+0x10a>
 8001648:	2302      	movs	r3, #2
 800164a:	73bb      	strb	r3, [r7, #14]
 800164c:	e040      	b.n	80016d0 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800164e:	2100      	movs	r1, #0
 8001650:	2077      	movs	r0, #119	; 0x77
 8001652:	f7ff ff23 	bl	800149c <SD_SendCmd>
 8001656:	4603      	mov	r3, r0
 8001658:	2b01      	cmp	r3, #1
 800165a:	d808      	bhi.n	800166e <SD_disk_initialize+0x12e>
 800165c:	2100      	movs	r1, #0
 800165e:	2069      	movs	r0, #105	; 0x69
 8001660:	f7ff ff1c 	bl	800149c <SD_SendCmd>
 8001664:	4603      	mov	r3, r0
 8001666:	2b01      	cmp	r3, #1
 8001668:	d801      	bhi.n	800166e <SD_disk_initialize+0x12e>
 800166a:	2302      	movs	r3, #2
 800166c:	e000      	b.n	8001670 <SD_disk_initialize+0x130>
 800166e:	2301      	movs	r3, #1
 8001670:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001672:	7bbb      	ldrb	r3, [r7, #14]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d10e      	bne.n	8001696 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001678:	2100      	movs	r1, #0
 800167a:	2077      	movs	r0, #119	; 0x77
 800167c:	f7ff ff0e 	bl	800149c <SD_SendCmd>
 8001680:	4603      	mov	r3, r0
 8001682:	2b01      	cmp	r3, #1
 8001684:	d80e      	bhi.n	80016a4 <SD_disk_initialize+0x164>
 8001686:	2100      	movs	r1, #0
 8001688:	2069      	movs	r0, #105	; 0x69
 800168a:	f7ff ff07 	bl	800149c <SD_SendCmd>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d107      	bne.n	80016a4 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001694:	e00d      	b.n	80016b2 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001696:	2100      	movs	r1, #0
 8001698:	2041      	movs	r0, #65	; 0x41
 800169a:	f7ff feff 	bl	800149c <SD_SendCmd>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <SD_disk_initialize+0x1cc>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1e1      	bne.n	8001672 <SD_disk_initialize+0x132>
 80016ae:	e000      	b.n	80016b2 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80016b0:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <SD_disk_initialize+0x1cc>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <SD_disk_initialize+0x18c>
 80016bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c0:	2050      	movs	r0, #80	; 0x50
 80016c2:	f7ff feeb 	bl	800149c <SD_SendCmd>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80016d0:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <SD_disk_initialize+0x1d0>)
 80016d2:	7bbb      	ldrb	r3, [r7, #14]
 80016d4:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80016d6:	f7ff fd85 	bl	80011e4 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80016da:	f7ff fda9 	bl	8001230 <SPI_RxByte>

  if (type)
 80016de:	7bbb      	ldrb	r3, [r7, #14]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <SD_disk_initialize+0x1c8>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f023 0301 	bic.w	r3, r3, #1
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SD_disk_initialize+0x1c8>)
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e001      	b.n	80016fa <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80016f6:	f7ff fe2f 	bl	8001358 <SD_PowerOff>
  }

  return Stat;
 80016fa:	4b03      	ldr	r3, [pc, #12]	; (8001708 <SD_disk_initialize+0x1c8>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b2db      	uxtb	r3, r3
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bd90      	pop	{r4, r7, pc}
 8001708:	20000000 	.word	0x20000000
 800170c:	20001279 	.word	0x20001279
 8001710:	2000021c 	.word	0x2000021c

08001714 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001724:	2301      	movs	r3, #1
 8001726:	e002      	b.n	800172e <SD_disk_status+0x1a>

  return Stat;
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <SD_disk_status+0x28>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000000 	.word	0x20000000

08001740 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <SD_disk_read+0x1c>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <SD_disk_read+0x20>
    return RES_PARERR;
 800175c:	2304      	movs	r3, #4
 800175e:	e051      	b.n	8001804 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001760:	4b2a      	ldr	r3, [pc, #168]	; (800180c <SD_disk_read+0xcc>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800176e:	2303      	movs	r3, #3
 8001770:	e048      	b.n	8001804 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001772:	4b27      	ldr	r3, [pc, #156]	; (8001810 <SD_disk_read+0xd0>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	025b      	lsls	r3, r3, #9
 8001782:	607b      	str	r3, [r7, #4]

  SELECT();
 8001784:	f7ff fd22 	bl	80011cc <SELECT>

  if (count == 1)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d111      	bne.n	80017b2 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	2051      	movs	r0, #81	; 0x51
 8001792:	f7ff fe83 	bl	800149c <SD_SendCmd>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d129      	bne.n	80017f0 <SD_disk_read+0xb0>
 800179c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017a0:	68b8      	ldr	r0, [r7, #8]
 80017a2:	f7ff fdf1 	bl	8001388 <SD_RxDataBlock>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d021      	beq.n	80017f0 <SD_disk_read+0xb0>
      count = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	e01e      	b.n	80017f0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	2052      	movs	r0, #82	; 0x52
 80017b6:	f7ff fe71 	bl	800149c <SD_SendCmd>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d117      	bne.n	80017f0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80017c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c4:	68b8      	ldr	r0, [r7, #8]
 80017c6:	f7ff fddf 	bl	8001388 <SD_RxDataBlock>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00a      	beq.n	80017e6 <SD_disk_read+0xa6>
          break;

        buff += 512;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80017d6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	3b01      	subs	r3, #1
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1ed      	bne.n	80017c0 <SD_disk_read+0x80>
 80017e4:	e000      	b.n	80017e8 <SD_disk_read+0xa8>
          break;
 80017e6:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80017e8:	2100      	movs	r1, #0
 80017ea:	204c      	movs	r0, #76	; 0x4c
 80017ec:	f7ff fe56 	bl	800149c <SD_SendCmd>
    }
  }

  DESELECT();
 80017f0:	f7ff fcf8 	bl	80011e4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80017f4:	f7ff fd1c 	bl	8001230 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2db      	uxtb	r3, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000000 	.word	0x20000000
 8001810:	2000021c 	.word	0x2000021c

08001814 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	4603      	mov	r3, r0
 8001822:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <SD_disk_write+0x1c>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <SD_disk_write+0x20>
    return RES_PARERR;
 8001830:	2304      	movs	r3, #4
 8001832:	e06b      	b.n	800190c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001834:	4b37      	ldr	r3, [pc, #220]	; (8001914 <SD_disk_write+0x100>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001842:	2303      	movs	r3, #3
 8001844:	e062      	b.n	800190c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001846:	4b33      	ldr	r3, [pc, #204]	; (8001914 <SD_disk_write+0x100>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001854:	2302      	movs	r3, #2
 8001856:	e059      	b.n	800190c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001858:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <SD_disk_write+0x104>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	025b      	lsls	r3, r3, #9
 8001868:	607b      	str	r3, [r7, #4]

  SELECT();
 800186a:	f7ff fcaf 	bl	80011cc <SELECT>

  if (count == 1)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d110      	bne.n	8001896 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	2058      	movs	r0, #88	; 0x58
 8001878:	f7ff fe10 	bl	800149c <SD_SendCmd>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d13a      	bne.n	80018f8 <SD_disk_write+0xe4>
 8001882:	21fe      	movs	r1, #254	; 0xfe
 8001884:	68b8      	ldr	r0, [r7, #8]
 8001886:	f7ff fdb5 	bl	80013f4 <SD_TxDataBlock>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d033      	beq.n	80018f8 <SD_disk_write+0xe4>
      count = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	e030      	b.n	80018f8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <SD_disk_write+0x104>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80018a2:	2100      	movs	r1, #0
 80018a4:	2077      	movs	r0, #119	; 0x77
 80018a6:	f7ff fdf9 	bl	800149c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80018aa:	6839      	ldr	r1, [r7, #0]
 80018ac:	2057      	movs	r0, #87	; 0x57
 80018ae:	f7ff fdf5 	bl	800149c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	2059      	movs	r0, #89	; 0x59
 80018b6:	f7ff fdf1 	bl	800149c <SD_SendCmd>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d11b      	bne.n	80018f8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80018c0:	21fc      	movs	r1, #252	; 0xfc
 80018c2:	68b8      	ldr	r0, [r7, #8]
 80018c4:	f7ff fd96 	bl	80013f4 <SD_TxDataBlock>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00a      	beq.n	80018e4 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018d4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	3b01      	subs	r3, #1
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1ee      	bne.n	80018c0 <SD_disk_write+0xac>
 80018e2:	e000      	b.n	80018e6 <SD_disk_write+0xd2>
          break;
 80018e4:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80018e6:	21fd      	movs	r1, #253	; 0xfd
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff fd83 	bl	80013f4 <SD_TxDataBlock>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <SD_disk_write+0xe4>
      {
        count = 1;
 80018f4:	2301      	movs	r3, #1
 80018f6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80018f8:	f7ff fc74 	bl	80011e4 <DESELECT>
  SPI_RxByte();
 80018fc:	f7ff fc98 	bl	8001230 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf14      	ite	ne
 8001906:	2301      	movne	r3, #1
 8001908:	2300      	moveq	r3, #0
 800190a:	b2db      	uxtb	r3, r3
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000000 	.word	0x20000000
 8001918:	2000021c 	.word	0x2000021c

0800191c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b08b      	sub	sp, #44	; 0x2c
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	603a      	str	r2, [r7, #0]
 8001926:	71fb      	strb	r3, [r7, #7]
 8001928:	460b      	mov	r3, r1
 800192a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001936:	2304      	movs	r3, #4
 8001938:	e11b      	b.n	8001b72 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001940:	79bb      	ldrb	r3, [r7, #6]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d129      	bne.n	800199a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d017      	beq.n	800197e <SD_disk_ioctl+0x62>
 800194e:	2b02      	cmp	r3, #2
 8001950:	dc1f      	bgt.n	8001992 <SD_disk_ioctl+0x76>
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <SD_disk_ioctl+0x40>
 8001956:	2b01      	cmp	r3, #1
 8001958:	d00b      	beq.n	8001972 <SD_disk_ioctl+0x56>
 800195a:	e01a      	b.n	8001992 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800195c:	f7ff fd08 	bl	8001370 <SD_CheckPower>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001966:	f7ff fcf7 	bl	8001358 <SD_PowerOff>
      res = RES_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001970:	e0fd      	b.n	8001b6e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001972:	f7ff fca5 	bl	80012c0 <SD_PowerOn>
      res = RES_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800197c:	e0f7      	b.n	8001b6e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	1c5c      	adds	r4, r3, #1
 8001982:	f7ff fcf5 	bl	8001370 <SD_CheckPower>
 8001986:	4603      	mov	r3, r0
 8001988:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800198a:	2300      	movs	r3, #0
 800198c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001990:	e0ed      	b.n	8001b6e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001992:	2304      	movs	r3, #4
 8001994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001998:	e0e9      	b.n	8001b6e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800199a:	4b78      	ldr	r3, [pc, #480]	; (8001b7c <SD_disk_ioctl+0x260>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e0e2      	b.n	8001b72 <SD_disk_ioctl+0x256>

    SELECT();
 80019ac:	f7ff fc0e 	bl	80011cc <SELECT>

    switch (ctrl)
 80019b0:	79bb      	ldrb	r3, [r7, #6]
 80019b2:	2b0d      	cmp	r3, #13
 80019b4:	f200 80cc 	bhi.w	8001b50 <SD_disk_ioctl+0x234>
 80019b8:	a201      	add	r2, pc, #4	; (adr r2, 80019c0 <SD_disk_ioctl+0xa4>)
 80019ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019be:	bf00      	nop
 80019c0:	08001abb 	.word	0x08001abb
 80019c4:	080019f9 	.word	0x080019f9
 80019c8:	08001aab 	.word	0x08001aab
 80019cc:	08001b51 	.word	0x08001b51
 80019d0:	08001b51 	.word	0x08001b51
 80019d4:	08001b51 	.word	0x08001b51
 80019d8:	08001b51 	.word	0x08001b51
 80019dc:	08001b51 	.word	0x08001b51
 80019e0:	08001b51 	.word	0x08001b51
 80019e4:	08001b51 	.word	0x08001b51
 80019e8:	08001b51 	.word	0x08001b51
 80019ec:	08001acd 	.word	0x08001acd
 80019f0:	08001af1 	.word	0x08001af1
 80019f4:	08001b15 	.word	0x08001b15
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80019f8:	2100      	movs	r1, #0
 80019fa:	2049      	movs	r0, #73	; 0x49
 80019fc:	f7ff fd4e 	bl	800149c <SD_SendCmd>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f040 80a8 	bne.w	8001b58 <SD_disk_ioctl+0x23c>
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	2110      	movs	r1, #16
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fcba 	bl	8001388 <SD_RxDataBlock>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 809e 	beq.w	8001b58 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001a1c:	7b3b      	ldrb	r3, [r7, #12]
 8001a1e:	099b      	lsrs	r3, r3, #6
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d10e      	bne.n	8001a44 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a26:	7d7b      	ldrb	r3, [r7, #21]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	7d3b      	ldrb	r3, [r7, #20]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001a3a:	8bfb      	ldrh	r3, [r7, #30]
 8001a3c:	029a      	lsls	r2, r3, #10
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	e02e      	b.n	8001aa2 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a44:	7c7b      	ldrb	r3, [r7, #17]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	7dbb      	ldrb	r3, [r7, #22]
 8001a4e:	09db      	lsrs	r3, r3, #7
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	7d7b      	ldrb	r3, [r7, #21]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f003 0306 	and.w	r3, r3, #6
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	3302      	adds	r3, #2
 8001a68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a6c:	7d3b      	ldrb	r3, [r7, #20]
 8001a6e:	099b      	lsrs	r3, r3, #6
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	7cfb      	ldrb	r3, [r7, #19]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	7cbb      	ldrb	r3, [r7, #18]
 8001a82:	029b      	lsls	r3, r3, #10
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001a94:	8bfa      	ldrh	r2, [r7, #30]
 8001a96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a9a:	3b09      	subs	r3, #9
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001aa8:	e056      	b.n	8001b58 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ab8:	e055      	b.n	8001b66 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001aba:	f7ff fbe5 	bl	8001288 <SD_ReadyWait>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2bff      	cmp	r3, #255	; 0xff
 8001ac2:	d14b      	bne.n	8001b5c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001aca:	e047      	b.n	8001b5c <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001acc:	2100      	movs	r1, #0
 8001ace:	2049      	movs	r0, #73	; 0x49
 8001ad0:	f7ff fce4 	bl	800149c <SD_SendCmd>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d142      	bne.n	8001b60 <SD_disk_ioctl+0x244>
 8001ada:	2110      	movs	r1, #16
 8001adc:	6a38      	ldr	r0, [r7, #32]
 8001ade:	f7ff fc53 	bl	8001388 <SD_RxDataBlock>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d03b      	beq.n	8001b60 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001aee:	e037      	b.n	8001b60 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001af0:	2100      	movs	r1, #0
 8001af2:	204a      	movs	r0, #74	; 0x4a
 8001af4:	f7ff fcd2 	bl	800149c <SD_SendCmd>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d132      	bne.n	8001b64 <SD_disk_ioctl+0x248>
 8001afe:	2110      	movs	r1, #16
 8001b00:	6a38      	ldr	r0, [r7, #32]
 8001b02:	f7ff fc41 	bl	8001388 <SD_RxDataBlock>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d02b      	beq.n	8001b64 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b12:	e027      	b.n	8001b64 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001b14:	2100      	movs	r1, #0
 8001b16:	207a      	movs	r0, #122	; 0x7a
 8001b18:	f7ff fcc0 	bl	800149c <SD_SendCmd>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d116      	bne.n	8001b50 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b28:	e00b      	b.n	8001b42 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001b2a:	6a3c      	ldr	r4, [r7, #32]
 8001b2c:	1c63      	adds	r3, r4, #1
 8001b2e:	623b      	str	r3, [r7, #32]
 8001b30:	f7ff fb7e 	bl	8001230 <SPI_RxByte>
 8001b34:	4603      	mov	r3, r0
 8001b36:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001b38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d9ef      	bls.n	8001b2a <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001b50:	2304      	movs	r3, #4
 8001b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b56:	e006      	b.n	8001b66 <SD_disk_ioctl+0x24a>
      break;
 8001b58:	bf00      	nop
 8001b5a:	e004      	b.n	8001b66 <SD_disk_ioctl+0x24a>
      break;
 8001b5c:	bf00      	nop
 8001b5e:	e002      	b.n	8001b66 <SD_disk_ioctl+0x24a>
      break;
 8001b60:	bf00      	nop
 8001b62:	e000      	b.n	8001b66 <SD_disk_ioctl+0x24a>
      break;
 8001b64:	bf00      	nop
    }

    DESELECT();
 8001b66:	f7ff fb3d 	bl	80011e4 <DESELECT>
    SPI_RxByte();
 8001b6a:	f7ff fb61 	bl	8001230 <SPI_RxByte>
  }

  return res;
 8001b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	372c      	adds	r7, #44	; 0x2c
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd90      	pop	{r4, r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000000 	.word	0x20000000

08001b80 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f023 030f 	bic.w	r3, r3, #15
 8001b90:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	f043 030c 	orr.w	r3, r3, #12
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	f043 030c 	orr.w	r3, r3, #12
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001bb6:	7bbb      	ldrb	r3, [r7, #14]
 8001bb8:	f043 0308 	orr.w	r3, r3, #8
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bc0:	f107 0208 	add.w	r2, r7, #8
 8001bc4:	2364      	movs	r3, #100	; 0x64
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2304      	movs	r3, #4
 8001bca:	214e      	movs	r1, #78	; 0x4e
 8001bcc:	4803      	ldr	r0, [pc, #12]	; (8001bdc <lcd_send_cmd+0x5c>)
 8001bce:	f004 fef7 	bl	80069c0 <HAL_I2C_Master_Transmit>
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200002ec 	.word	0x200002ec

08001be0 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f023 030f 	bic.w	r3, r3, #15
 8001bf0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	f043 030d 	orr.w	r3, r3, #13
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	f043 0309 	orr.w	r3, r3, #9
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001c0c:	7bbb      	ldrb	r3, [r7, #14]
 8001c0e:	f043 030d 	orr.w	r3, r3, #13
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1sssssssss
 8001c16:	7bbb      	ldrb	r3, [r7, #14]
 8001c18:	f043 0309 	orr.w	r3, r3, #9
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c20:	f107 0208 	add.w	r2, r7, #8
 8001c24:	2364      	movs	r3, #100	; 0x64
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2304      	movs	r3, #4
 8001c2a:	214e      	movs	r1, #78	; 0x4e
 8001c2c:	4803      	ldr	r0, [pc, #12]	; (8001c3c <lcd_send_data+0x5c>)
 8001c2e:	f004 fec7 	bl	80069c0 <HAL_I2C_Master_Transmit>
}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200002ec 	.word	0x200002ec

08001c40 <lcd_clear>:

void lcd_clear (void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7ff ff9a 	bl	8001b80 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	e005      	b.n	8001c5e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001c52:	2020      	movs	r0, #32
 8001c54:	f7ff ffc4 	bl	8001be0 <lcd_send_data>
	for (int i=0; i<100; i++)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b63      	cmp	r3, #99	; 0x63
 8001c62:	ddf6      	ble.n	8001c52 <lcd_clear+0x12>
	}
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <lcd_init>:

void lcd_init (void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001c72:	2032      	movs	r0, #50	; 0x32
 8001c74:	f003 fa2e 	bl	80050d4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001c78:	2030      	movs	r0, #48	; 0x30
 8001c7a:	f7ff ff81 	bl	8001b80 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001c7e:	2005      	movs	r0, #5
 8001c80:	f003 fa28 	bl	80050d4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001c84:	2030      	movs	r0, #48	; 0x30
 8001c86:	f7ff ff7b 	bl	8001b80 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f003 fa22 	bl	80050d4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001c90:	2030      	movs	r0, #48	; 0x30
 8001c92:	f7ff ff75 	bl	8001b80 <lcd_send_cmd>
	HAL_Delay(10);
 8001c96:	200a      	movs	r0, #10
 8001c98:	f003 fa1c 	bl	80050d4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001c9c:	2020      	movs	r0, #32
 8001c9e:	f7ff ff6f 	bl	8001b80 <lcd_send_cmd>
	HAL_Delay(10);
 8001ca2:	200a      	movs	r0, #10
 8001ca4:	f003 fa16 	bl	80050d4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001ca8:	2028      	movs	r0, #40	; 0x28
 8001caa:	f7ff ff69 	bl	8001b80 <lcd_send_cmd>
	HAL_Delay(1);
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f003 fa10 	bl	80050d4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001cb4:	2008      	movs	r0, #8
 8001cb6:	f7ff ff63 	bl	8001b80 <lcd_send_cmd>
	HAL_Delay(1);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f003 fa0a 	bl	80050d4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f7ff ff5d 	bl	8001b80 <lcd_send_cmd>
	HAL_Delay(1);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f003 fa04 	bl	80050d4 <HAL_Delay>
	HAL_Delay(1);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f003 fa01 	bl	80050d4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001cd2:	2006      	movs	r0, #6
 8001cd4:	f7ff ff54 	bl	8001b80 <lcd_send_cmd>
	HAL_Delay(1);
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f003 f9fb 	bl	80050d4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001cde:	200c      	movs	r0, #12
 8001ce0:	f7ff ff4e 	bl	8001b80 <lcd_send_cmd>
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001cf0:	e006      	b.n	8001d00 <lcd_send_string+0x18>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff70 	bl	8001be0 <lcd_send_data>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f4      	bne.n	8001cf2 <lcd_send_string+0xa>
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <Rotary_init>:
extern void  PH_Calibration();
extern void TDS_Calibration();
extern void Wifi_Config();
extern float TDS_Calculator(float k , uint16_t adc);
void Rotary_init()
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	rotary_first_value = HAL_GPIO_ReadPin(GPIOE, Rotary_CLK_Pin);
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	4804      	ldr	r0, [pc, #16]	; (8001d2c <Rotary_init+0x18>)
 8001d1c:	f004 fcc0 	bl	80066a0 <HAL_GPIO_ReadPin>
 8001d20:	4603      	mov	r3, r0
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b02      	ldr	r3, [pc, #8]	; (8001d30 <Rotary_init+0x1c>)
 8001d26:	601a      	str	r2, [r3, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	2000023c 	.word	0x2000023c

08001d34 <Rotary_volum>:
int  Rotary_volum()
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	rotary_curent_value = HAL_GPIO_ReadPin(GPIOE, Rotary_CLK_Pin);
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	4817      	ldr	r0, [pc, #92]	; (8001d98 <Rotary_volum+0x64>)
 8001d3c:	f004 fcb0 	bl	80066a0 <HAL_GPIO_ReadPin>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <Rotary_volum+0x68>)
 8001d46:	601a      	str	r2, [r3, #0]
	if (rotary_curent_value != rotary_first_value)
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <Rotary_volum+0x68>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <Rotary_volum+0x6c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d019      	beq.n	8001d88 <Rotary_volum+0x54>
	   {
	     if (HAL_GPIO_ReadPin(GPIOE, Rotary_DT_Pin) != rotary_curent_value)
 8001d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d58:	480f      	ldr	r0, [pc, #60]	; (8001d98 <Rotary_volum+0x64>)
 8001d5a:	f004 fca1 	bl	80066a0 <HAL_GPIO_ReadPin>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <Rotary_volum+0x68>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d007      	beq.n	8001d7a <Rotary_volum+0x46>
	     {
	    	 lcd_clear();
 8001d6a:	f7ff ff69 	bl	8001c40 <lcd_clear>
	    	 lcd_pointer_1 +=1;
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <Rotary_volum+0x70>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	3301      	adds	r3, #1
 8001d74:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <Rotary_volum+0x70>)
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e006      	b.n	8001d88 <Rotary_volum+0x54>

	     }
	     else
	     {
	    	 lcd_clear();
 8001d7a:	f7ff ff61 	bl	8001c40 <lcd_clear>
	    	 lcd_pointer_1 -=1;
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <Rotary_volum+0x70>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <Rotary_volum+0x70>)
 8001d86:	6013      	str	r3, [r2, #0]
	     }
	   }
	rotary_first_value = rotary_curent_value;
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <Rotary_volum+0x68>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <Rotary_volum+0x6c>)
 8001d8e:	6013      	str	r3, [r2, #0]
	return lcd_pointer_1;
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <Rotary_volum+0x70>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	20000240 	.word	0x20000240
 8001da0:	2000023c 	.word	0x2000023c
 8001da4:	20000234 	.word	0x20000234

08001da8 <Push_Slect>:
void Push_Slect()
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	  if(HAL_GPIO_ReadPin(GPIOE, Rotary_SW_Pin) == 0)
 8001dac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001db0:	4813      	ldr	r0, [pc, #76]	; (8001e00 <Push_Slect+0x58>)
 8001db2:	f004 fc75 	bl	80066a0 <HAL_GPIO_ReadPin>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d11c      	bne.n	8001df6 <Push_Slect+0x4e>
	  		{
	  			HAL_Delay(20);
 8001dbc:	2014      	movs	r0, #20
 8001dbe:	f003 f989 	bl	80050d4 <HAL_Delay>
	  			if((HAL_GPIO_ReadPin(GPIOE, Rotary_SW_Pin) == 0) && (isPress == 0)) // nut nhan da bam
 8001dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dc6:	480e      	ldr	r0, [pc, #56]	; (8001e00 <Push_Slect+0x58>)
 8001dc8:	f004 fc6a 	bl	80066a0 <HAL_GPIO_ReadPin>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d114      	bne.n	8001dfc <Push_Slect+0x54>
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <Push_Slect+0x5c>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d110      	bne.n	8001dfc <Push_Slect+0x54>
	  			{
	  				lcd_clear();
 8001dda:	f7ff ff31 	bl	8001c40 <lcd_clear>
	  				Rpush_number++;
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <Push_Slect+0x60>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3301      	adds	r3, #1
 8001de4:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <Push_Slect+0x60>)
 8001de6:	6013      	str	r3, [r2, #0]
	  				isPress = 1;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <Push_Slect+0x5c>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
	  				button_flag = 0;
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <Push_Slect+0x64>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
	  			}
	  		}
	  		else{isPress = 0;}
}
 8001df4:	e002      	b.n	8001dfc <Push_Slect+0x54>
	  		else{isPress = 0;}
 8001df6:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <Push_Slect+0x5c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	20000238 	.word	0x20000238
 8001e08:	20000228 	.word	0x20000228
 8001e0c:	2000022c 	.word	0x2000022c

08001e10 <Pointer_Status>:
void Pointer_Status(uint32_t volume)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	if(volume > last)
 8001e18:	4b33      	ldr	r3, [pc, #204]	; (8001ee8 <Pointer_Status+0xd8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d905      	bls.n	8001e2e <Pointer_Status+0x1e>
	{
		pointer_position++;
 8001e22:	4b32      	ldr	r3, [pc, #200]	; (8001eec <Pointer_Status+0xdc>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	4a30      	ldr	r2, [pc, #192]	; (8001eec <Pointer_Status+0xdc>)
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	e009      	b.n	8001e42 <Pointer_Status+0x32>
	}
	else if(volume < last)
 8001e2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <Pointer_Status+0xd8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d204      	bcs.n	8001e42 <Pointer_Status+0x32>
	{
		pointer_position--;
 8001e38:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <Pointer_Status+0xdc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	4a2b      	ldr	r2, [pc, #172]	; (8001eec <Pointer_Status+0xdc>)
 8001e40:	6013      	str	r3, [r2, #0]
	}
	last = volume;
 8001e42:	4a29      	ldr	r2, [pc, #164]	; (8001ee8 <Pointer_Status+0xd8>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6013      	str	r3, [r2, #0]

	switch(pointer_position)
 8001e48:	4b28      	ldr	r3, [pc, #160]	; (8001eec <Pointer_Status+0xdc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d838      	bhi.n	8001ec2 <Pointer_Status+0xb2>
 8001e50:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <Pointer_Status+0x48>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e7d 	.word	0x08001e7d
 8001e5c:	08001ec3 	.word	0x08001ec3
 8001e60:	08001e8b 	.word	0x08001e8b
 8001e64:	08001ec3 	.word	0x08001ec3
 8001e68:	08001e99 	.word	0x08001e99
 8001e6c:	08001ec3 	.word	0x08001ec3
 8001e70:	08001ea7 	.word	0x08001ea7
 8001e74:	08001ec3 	.word	0x08001ec3
 8001e78:	08001eb5 	.word	0x08001eb5
	{
		case 0:
			lcd_send_cmd(0x80 | 0x00); //PH
 8001e7c:	2080      	movs	r0, #128	; 0x80
 8001e7e:	f7ff fe7f 	bl	8001b80 <lcd_send_cmd>
			lcd_send_string("->");
 8001e82:	481b      	ldr	r0, [pc, #108]	; (8001ef0 <Pointer_Status+0xe0>)
 8001e84:	f7ff ff30 	bl	8001ce8 <lcd_send_string>
			break;
 8001e88:	e029      	b.n	8001ede <Pointer_Status+0xce>
		case 2:
			lcd_send_cmd(0x80 | 0x40); //PH
 8001e8a:	20c0      	movs	r0, #192	; 0xc0
 8001e8c:	f7ff fe78 	bl	8001b80 <lcd_send_cmd>
			lcd_send_string("->");
 8001e90:	4817      	ldr	r0, [pc, #92]	; (8001ef0 <Pointer_Status+0xe0>)
 8001e92:	f7ff ff29 	bl	8001ce8 <lcd_send_string>
			break;
 8001e96:	e022      	b.n	8001ede <Pointer_Status+0xce>
		case 4:
			lcd_send_cmd(0x80 | 0x14); //PH
 8001e98:	2094      	movs	r0, #148	; 0x94
 8001e9a:	f7ff fe71 	bl	8001b80 <lcd_send_cmd>
			lcd_send_string("->");
 8001e9e:	4814      	ldr	r0, [pc, #80]	; (8001ef0 <Pointer_Status+0xe0>)
 8001ea0:	f7ff ff22 	bl	8001ce8 <lcd_send_string>
			break;
 8001ea4:	e01b      	b.n	8001ede <Pointer_Status+0xce>
		case 6:
			lcd_send_cmd(0x80 | 0x54); //PH
 8001ea6:	20d4      	movs	r0, #212	; 0xd4
 8001ea8:	f7ff fe6a 	bl	8001b80 <lcd_send_cmd>
			lcd_send_string("->");
 8001eac:	4810      	ldr	r0, [pc, #64]	; (8001ef0 <Pointer_Status+0xe0>)
 8001eae:	f7ff ff1b 	bl	8001ce8 <lcd_send_string>
			break;
 8001eb2:	e014      	b.n	8001ede <Pointer_Status+0xce>
		case 8:
			if(Rpush_number == 2||3)
			{
				lcd_send_cmd(0x80 | 0x66);
 8001eb4:	20e6      	movs	r0, #230	; 0xe6
 8001eb6:	f7ff fe63 	bl	8001b80 <lcd_send_cmd>
				lcd_send_string(">>");
 8001eba:	480e      	ldr	r0, [pc, #56]	; (8001ef4 <Pointer_Status+0xe4>)
 8001ebc:	f7ff ff14 	bl	8001ce8 <lcd_send_string>
			}
			break;
 8001ec0:	e00d      	b.n	8001ede <Pointer_Status+0xce>
		default:
			if(pointer_position>9)
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <Pointer_Status+0xdc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b09      	cmp	r3, #9
 8001ec8:	d908      	bls.n	8001edc <Pointer_Status+0xcc>
			{
				pointer_position = 0;
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <Pointer_Status+0xdc>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(0x80 | 0x00); //PH
 8001ed0:	2080      	movs	r0, #128	; 0x80
 8001ed2:	f7ff fe55 	bl	8001b80 <lcd_send_cmd>
				lcd_send_string("->");
 8001ed6:	4806      	ldr	r0, [pc, #24]	; (8001ef0 <Pointer_Status+0xe0>)
 8001ed8:	f7ff ff06 	bl	8001ce8 <lcd_send_string>
			}
			break;
 8001edc:	bf00      	nop
	}
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000220 	.word	0x20000220
 8001eec:	20000224 	.word	0x20000224
 8001ef0:	08012798 	.word	0x08012798
 8001ef4:	0801279c 	.word	0x0801279c

08001ef8 <Pointer_2_Status>:
void Pointer_2_Status(uint32_t line)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	if(line == 0)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <Pointer_2_Status+0x1c>
		{
		lcd_send_cmd(0x80 | 0x0A); //PH
 8001f06:	208a      	movs	r0, #138	; 0x8a
 8001f08:	f7ff fe3a 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("<");
 8001f0c:	4812      	ldr	r0, [pc, #72]	; (8001f58 <Pointer_2_Status+0x60>)
 8001f0e:	f7ff feeb 	bl	8001ce8 <lcd_send_string>
		else if(line == 6)
		{
		lcd_send_cmd(0x80 | 0x5E); //PH
		lcd_send_string("<");
		}
}
 8001f12:	e01c      	b.n	8001f4e <Pointer_2_Status+0x56>
		else if(line == 2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d106      	bne.n	8001f28 <Pointer_2_Status+0x30>
		lcd_send_cmd(0x80 | 0x4A); //PH
 8001f1a:	20ca      	movs	r0, #202	; 0xca
 8001f1c:	f7ff fe30 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("<");
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <Pointer_2_Status+0x60>)
 8001f22:	f7ff fee1 	bl	8001ce8 <lcd_send_string>
}
 8001f26:	e012      	b.n	8001f4e <Pointer_2_Status+0x56>
		else if(line == 4)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d106      	bne.n	8001f3c <Pointer_2_Status+0x44>
		lcd_send_cmd(0x80 | 0x1E); //PH
 8001f2e:	209e      	movs	r0, #158	; 0x9e
 8001f30:	f7ff fe26 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("<");
 8001f34:	4808      	ldr	r0, [pc, #32]	; (8001f58 <Pointer_2_Status+0x60>)
 8001f36:	f7ff fed7 	bl	8001ce8 <lcd_send_string>
}
 8001f3a:	e008      	b.n	8001f4e <Pointer_2_Status+0x56>
		else if(line == 6)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d105      	bne.n	8001f4e <Pointer_2_Status+0x56>
		lcd_send_cmd(0x80 | 0x5E); //PH
 8001f42:	20de      	movs	r0, #222	; 0xde
 8001f44:	f7ff fe1c 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("<");
 8001f48:	4803      	ldr	r0, [pc, #12]	; (8001f58 <Pointer_2_Status+0x60>)
 8001f4a:	f7ff fecd 	bl	8001ce8 <lcd_send_string>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	080127a0 	.word	0x080127a0

08001f5c <LCD_Menu_2_1>:
void LCD_Menu_2_1()
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b09a      	sub	sp, #104	; 0x68
 8001f60:	af00      	add	r7, sp, #0
	char buffer_string[100];
	lcd_send_cmd(0x80 | 0x02); //PH
 8001f62:	2082      	movs	r0, #130	; 0x82
 8001f64:	f7ff fe0c 	bl	8001b80 <lcd_send_cmd>
	lcd_send_string("PH:");
 8001f68:	4844      	ldr	r0, [pc, #272]	; (800207c <LCD_Menu_2_1+0x120>)
 8001f6a:	f7ff febd 	bl	8001ce8 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x42); //PH
 8001f6e:	20c2      	movs	r0, #194	; 0xc2
 8001f70:	f7ff fe06 	bl	8001b80 <lcd_send_cmd>
	lcd_send_string("PH_Thr:");
 8001f74:	4842      	ldr	r0, [pc, #264]	; (8002080 <LCD_Menu_2_1+0x124>)
 8001f76:	f7ff feb7 	bl	8001ce8 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x16); //PH
 8001f7a:	2096      	movs	r0, #150	; 0x96
 8001f7c:	f7ff fe00 	bl	8001b80 <lcd_send_cmd>
	lcd_send_string("TDS:");
 8001f80:	4840      	ldr	r0, [pc, #256]	; (8002084 <LCD_Menu_2_1+0x128>)
 8001f82:	f7ff feb1 	bl	8001ce8 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x56); //PH
 8001f86:	20d6      	movs	r0, #214	; 0xd6
 8001f88:	f7ff fdfa 	bl	8001b80 <lcd_send_cmd>
	lcd_send_string("TDS_Thr:");
 8001f8c:	483e      	ldr	r0, [pc, #248]	; (8002088 <LCD_Menu_2_1+0x12c>)
 8001f8e:	f7ff feab 	bl	8001ce8 <lcd_send_string>


	lcd_send_cmd(0x80 | 0x0B); //PH_Setpoint
 8001f92:	208b      	movs	r0, #139	; 0x8b
 8001f94:	f7ff fdf4 	bl	8001b80 <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",PH_SetPoint);
 8001f98:	4b3c      	ldr	r3, [pc, #240]	; (800208c <LCD_Menu_2_1+0x130>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fae3 	bl	8000568 <__aeabi_f2d>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	1d38      	adds	r0, r7, #4
 8001fa8:	4939      	ldr	r1, [pc, #228]	; (8002090 <LCD_Menu_2_1+0x134>)
 8001faa:	f00c fdf5 	bl	800eb98 <siprintf>
	lcd_send_string(buffer_string);
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fe99 	bl	8001ce8 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe f913 	bl	80001e4 <strlen>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00b ff5f 	bl	800de88 <memset>


	lcd_send_cmd(0x80 | 0x4B); //PH_THR_Setpoint
 8001fca:	20cb      	movs	r0, #203	; 0xcb
 8001fcc:	f7ff fdd8 	bl	8001b80 <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",PH_THR_SetPoint);
 8001fd0:	4b30      	ldr	r3, [pc, #192]	; (8002094 <LCD_Menu_2_1+0x138>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fac7 	bl	8000568 <__aeabi_f2d>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	1d38      	adds	r0, r7, #4
 8001fe0:	492b      	ldr	r1, [pc, #172]	; (8002090 <LCD_Menu_2_1+0x134>)
 8001fe2:	f00c fdd9 	bl	800eb98 <siprintf>
	lcd_send_string(buffer_string);
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fe7d 	bl	8001ce8 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe f8f7 	bl	80001e4 <strlen>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f00b ff43 	bl	800de88 <memset>

	lcd_send_cmd(0x80 | 0x1F); //TDS_Setpoint
 8002002:	209f      	movs	r0, #159	; 0x9f
 8002004:	f7ff fdbc 	bl	8001b80 <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",TDS_SetPoint);
 8002008:	4b23      	ldr	r3, [pc, #140]	; (8002098 <LCD_Menu_2_1+0x13c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe faab 	bl	8000568 <__aeabi_f2d>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	1d38      	adds	r0, r7, #4
 8002018:	491d      	ldr	r1, [pc, #116]	; (8002090 <LCD_Menu_2_1+0x134>)
 800201a:	f00c fdbd 	bl	800eb98 <siprintf>
	lcd_send_string(buffer_string);
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fe61 	bl	8001ce8 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe f8db 	bl	80001e4 <strlen>
 800202e:	4602      	mov	r2, r0
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f00b ff27 	bl	800de88 <memset>


	lcd_send_cmd(0x80 | 0x5F); //TDS_THR_Setpoint
 800203a:	20df      	movs	r0, #223	; 0xdf
 800203c:	f7ff fda0 	bl	8001b80 <lcd_send_cmd>
	sprintf(buffer_string,"%.2f",TDS_THR_SetPoint);
 8002040:	4b16      	ldr	r3, [pc, #88]	; (800209c <LCD_Menu_2_1+0x140>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fa8f 	bl	8000568 <__aeabi_f2d>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	1d38      	adds	r0, r7, #4
 8002050:	490f      	ldr	r1, [pc, #60]	; (8002090 <LCD_Menu_2_1+0x134>)
 8002052:	f00c fda1 	bl	800eb98 <siprintf>
	lcd_send_string(buffer_string);
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fe45 	bl	8001ce8 <lcd_send_string>
	memset(buffer_string,0,strlen(buffer_string));
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe f8bf 	bl	80001e4 <strlen>
 8002066:	4602      	mov	r2, r0
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f00b ff0b 	bl	800de88 <memset>
}
 8002072:	bf00      	nop
 8002074:	3768      	adds	r7, #104	; 0x68
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	080127a4 	.word	0x080127a4
 8002080:	080127a8 	.word	0x080127a8
 8002084:	080127b0 	.word	0x080127b0
 8002088:	080127b8 	.word	0x080127b8
 800208c:	200005a0 	.word	0x200005a0
 8002090:	080127c4 	.word	0x080127c4
 8002094:	2000059c 	.word	0x2000059c
 8002098:	20000594 	.word	0x20000594
 800209c:	20000598 	.word	0x20000598

080020a0 <LCD_Menu_2_2>:
void LCD_Menu_2_2()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x02); //PH
 80020a4:	2082      	movs	r0, #130	; 0x82
 80020a6:	f7ff fd6b 	bl	8001b80 <lcd_send_cmd>
	lcd_send_string("Pump 1:");
 80020aa:	480b      	ldr	r0, [pc, #44]	; (80020d8 <LCD_Menu_2_2+0x38>)
 80020ac:	f7ff fe1c 	bl	8001ce8 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x42); //PH
 80020b0:	20c2      	movs	r0, #194	; 0xc2
 80020b2:	f7ff fd65 	bl	8001b80 <lcd_send_cmd>
	lcd_send_string("Pump 2:");
 80020b6:	4809      	ldr	r0, [pc, #36]	; (80020dc <LCD_Menu_2_2+0x3c>)
 80020b8:	f7ff fe16 	bl	8001ce8 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x16); //PH
 80020bc:	2096      	movs	r0, #150	; 0x96
 80020be:	f7ff fd5f 	bl	8001b80 <lcd_send_cmd>
	lcd_send_string("Pump 3:");
 80020c2:	4807      	ldr	r0, [pc, #28]	; (80020e0 <LCD_Menu_2_2+0x40>)
 80020c4:	f7ff fe10 	bl	8001ce8 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x56); //PH
 80020c8:	20d6      	movs	r0, #214	; 0xd6
 80020ca:	f7ff fd59 	bl	8001b80 <lcd_send_cmd>
	lcd_send_string("Pump 4:");
 80020ce:	4805      	ldr	r0, [pc, #20]	; (80020e4 <LCD_Menu_2_2+0x44>)
 80020d0:	f7ff fe0a 	bl	8001ce8 <lcd_send_string>
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	080127cc 	.word	0x080127cc
 80020dc:	080127d4 	.word	0x080127d4
 80020e0:	080127dc 	.word	0x080127dc
 80020e4:	080127e4 	.word	0x080127e4

080020e8 <LCD_Menu_2_3>:
void LCD_Menu_2_3(uint8_t isCalib)
{
 80020e8:	b5b0      	push	{r4, r5, r7, lr}
 80020ea:	b0a0      	sub	sp, #128	; 0x80
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
	char buffer_String[100] = {0};
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	f107 0310 	add.w	r3, r7, #16
 80020fa:	2260      	movs	r2, #96	; 0x60
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f00b fec2 	bl	800de88 <memset>
	float PH_Calib = 0;
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	677b      	str	r3, [r7, #116]	; 0x74
	float TDS_Calib = 0;
 800210a:	f04f 0300 	mov.w	r3, #0
 800210e:	673b      	str	r3, [r7, #112]	; 0x70
	if(isCalib == 0)
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d15c      	bne.n	80021d0 <LCD_Menu_2_3+0xe8>
	{
		/*PH:*/
		lcd_send_cmd(0x80 | 0x02); //PH
 8002116:	2082      	movs	r0, #130	; 0x82
 8002118:	f7ff fd32 	bl	8001b80 <lcd_send_cmd>
		sprintf(buffer_String,"PH:%.2f",PH);
 800211c:	4b61      	ldr	r3, [pc, #388]	; (80022a4 <LCD_Menu_2_3+0x1bc>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fa21 	bl	8000568 <__aeabi_f2d>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	f107 000c 	add.w	r0, r7, #12
 800212e:	495e      	ldr	r1, [pc, #376]	; (80022a8 <LCD_Menu_2_3+0x1c0>)
 8002130:	f00c fd32 	bl	800eb98 <siprintf>
		lcd_send_string(buffer_String);
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fdd5 	bl	8001ce8 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x43); //PH
 800213e:	20c3      	movs	r0, #195	; 0xc3
 8002140:	f7ff fd1e 	bl	8001b80 <lcd_send_cmd>
		sprintf(buffer_String,"=>%.4f|%.4f",ph_a_value,ph_b_value);
 8002144:	4b59      	ldr	r3, [pc, #356]	; (80022ac <LCD_Menu_2_3+0x1c4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fa0d 	bl	8000568 <__aeabi_f2d>
 800214e:	4604      	mov	r4, r0
 8002150:	460d      	mov	r5, r1
 8002152:	4b57      	ldr	r3, [pc, #348]	; (80022b0 <LCD_Menu_2_3+0x1c8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fa06 	bl	8000568 <__aeabi_f2d>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	f107 000c 	add.w	r0, r7, #12
 8002164:	e9cd 2300 	strd	r2, r3, [sp]
 8002168:	4622      	mov	r2, r4
 800216a:	462b      	mov	r3, r5
 800216c:	4951      	ldr	r1, [pc, #324]	; (80022b4 <LCD_Menu_2_3+0x1cc>)
 800216e:	f00c fd13 	bl	800eb98 <siprintf>
		lcd_send_string(buffer_String);
 8002172:	f107 030c 	add.w	r3, r7, #12
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fdb6 	bl	8001ce8 <lcd_send_string>

		/*TDS*/
		lcd_send_cmd(0x80 | 0x16); //PH
 800217c:	2096      	movs	r0, #150	; 0x96
 800217e:	f7ff fcff 	bl	8001b80 <lcd_send_cmd>
		sprintf(buffer_String,"TDS:%d",(int)TDS);
 8002182:	4b4d      	ldr	r3, [pc, #308]	; (80022b8 <LCD_Menu_2_3+0x1d0>)
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	ee17 2a90 	vmov	r2, s15
 8002194:	4949      	ldr	r1, [pc, #292]	; (80022bc <LCD_Menu_2_3+0x1d4>)
 8002196:	4618      	mov	r0, r3
 8002198:	f00c fcfe 	bl	800eb98 <siprintf>
		lcd_send_string(buffer_String);
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fda1 	bl	8001ce8 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x57); //PH
 80021a6:	20d7      	movs	r0, #215	; 0xd7
 80021a8:	f7ff fcea 	bl	8001b80 <lcd_send_cmd>
		sprintf(buffer_String,"=>%.2f",tds_k_value);
 80021ac:	4b44      	ldr	r3, [pc, #272]	; (80022c0 <LCD_Menu_2_3+0x1d8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f9d9 	bl	8000568 <__aeabi_f2d>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	f107 000c 	add.w	r0, r7, #12
 80021be:	4941      	ldr	r1, [pc, #260]	; (80022c4 <LCD_Menu_2_3+0x1dc>)
 80021c0:	f00c fcea 	bl	800eb98 <siprintf>
		lcd_send_string(buffer_String);
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fd8d 	bl	8001ce8 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x41);
		lcd_send_string(buffer_String);
		lcd_send_cmd(0x80 | 0x54);
		lcd_send_string("tds_400 or ph_900");
	}
}
 80021ce:	e065      	b.n	800229c <LCD_Menu_2_3+0x1b4>
	else if(isCalib == 1)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d132      	bne.n	800223c <LCD_Menu_2_3+0x154>
		lcd_send_cmd(0x80 | 0x02);
 80021d6:	2082      	movs	r0, #130	; 0x82
 80021d8:	f7ff fcd2 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("Calib PH mode...");
 80021dc:	483a      	ldr	r0, [pc, #232]	; (80022c8 <LCD_Menu_2_3+0x1e0>)
 80021de:	f7ff fd83 	bl	8001ce8 <lcd_send_string>
		PH_Calib = PH_Calculator(ph_a_value, ph_b_value, ADC_Value[0]);
 80021e2:	4b32      	ldr	r3, [pc, #200]	; (80022ac <LCD_Menu_2_3+0x1c4>)
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	4b31      	ldr	r3, [pc, #196]	; (80022b0 <LCD_Menu_2_3+0x1c8>)
 80021ea:	ed93 7a00 	vldr	s14, [r3]
 80021ee:	4b37      	ldr	r3, [pc, #220]	; (80022cc <LCD_Menu_2_3+0x1e4>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	eef0 0a47 	vmov.f32	s1, s14
 80021f8:	eeb0 0a67 	vmov.f32	s0, s15
 80021fc:	f000 fe4c 	bl	8002e98 <PH_Calculator>
 8002200:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
		sprintf(buffer_String,"%.2f---%d",PH_Calib,ADC_Value[0]);
 8002204:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002206:	f7fe f9af 	bl	8000568 <__aeabi_f2d>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	492f      	ldr	r1, [pc, #188]	; (80022cc <LCD_Menu_2_3+0x1e4>)
 8002210:	8809      	ldrh	r1, [r1, #0]
 8002212:	f107 000c 	add.w	r0, r7, #12
 8002216:	9100      	str	r1, [sp, #0]
 8002218:	492d      	ldr	r1, [pc, #180]	; (80022d0 <LCD_Menu_2_3+0x1e8>)
 800221a:	f00c fcbd 	bl	800eb98 <siprintf>
		lcd_send_cmd(0x80 | 0x41);
 800221e:	20c1      	movs	r0, #193	; 0xc1
 8002220:	f7ff fcae 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string(buffer_String);
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fd5d 	bl	8001ce8 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800222e:	20d4      	movs	r0, #212	; 0xd4
 8002230:	f7ff fca6 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("ph_7 or ph_4");
 8002234:	4827      	ldr	r0, [pc, #156]	; (80022d4 <LCD_Menu_2_3+0x1ec>)
 8002236:	f7ff fd57 	bl	8001ce8 <lcd_send_string>
}
 800223a:	e02f      	b.n	800229c <LCD_Menu_2_3+0x1b4>
	else if(isCalib == 2)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d12c      	bne.n	800229c <LCD_Menu_2_3+0x1b4>
		lcd_send_cmd(0x80 | 0x02);
 8002242:	2082      	movs	r0, #130	; 0x82
 8002244:	f7ff fc9c 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("Calib TDS mode...");
 8002248:	4823      	ldr	r0, [pc, #140]	; (80022d8 <LCD_Menu_2_3+0x1f0>)
 800224a:	f7ff fd4d 	bl	8001ce8 <lcd_send_string>
		TDS_Calib = TDS_Calculator(tds_k_value, ADC_Value[1]);
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <LCD_Menu_2_3+0x1d8>)
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <LCD_Menu_2_3+0x1e4>)
 8002256:	885b      	ldrh	r3, [r3, #2]
 8002258:	4618      	mov	r0, r3
 800225a:	eeb0 0a67 	vmov.f32	s0, s15
 800225e:	f000 fe57 	bl	8002f10 <TDS_Calculator>
 8002262:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		sprintf(buffer_String,"%.1f-%d",(float)TDS_Calib,ADC_Value[1]);
 8002266:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002268:	f7fe f97e 	bl	8000568 <__aeabi_f2d>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4916      	ldr	r1, [pc, #88]	; (80022cc <LCD_Menu_2_3+0x1e4>)
 8002272:	8849      	ldrh	r1, [r1, #2]
 8002274:	f107 000c 	add.w	r0, r7, #12
 8002278:	9100      	str	r1, [sp, #0]
 800227a:	4918      	ldr	r1, [pc, #96]	; (80022dc <LCD_Menu_2_3+0x1f4>)
 800227c:	f00c fc8c 	bl	800eb98 <siprintf>
		lcd_send_cmd(0x80 | 0x41);
 8002280:	20c1      	movs	r0, #193	; 0xc1
 8002282:	f7ff fc7d 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string(buffer_String);
 8002286:	f107 030c 	add.w	r3, r7, #12
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fd2c 	bl	8001ce8 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8002290:	20d4      	movs	r0, #212	; 0xd4
 8002292:	f7ff fc75 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("tds_400 or ph_900");
 8002296:	4812      	ldr	r0, [pc, #72]	; (80022e0 <LCD_Menu_2_3+0x1f8>)
 8002298:	f7ff fd26 	bl	8001ce8 <lcd_send_string>
}
 800229c:	bf00      	nop
 800229e:	3778      	adds	r7, #120	; 0x78
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bdb0      	pop	{r4, r5, r7, pc}
 80022a4:	2000058c 	.word	0x2000058c
 80022a8:	080127ec 	.word	0x080127ec
 80022ac:	20000df0 	.word	0x20000df0
 80022b0:	20000df4 	.word	0x20000df4
 80022b4:	080127f4 	.word	0x080127f4
 80022b8:	20000588 	.word	0x20000588
 80022bc:	08012800 	.word	0x08012800
 80022c0:	20000df8 	.word	0x20000df8
 80022c4:	08012808 	.word	0x08012808
 80022c8:	08012810 	.word	0x08012810
 80022cc:	20000de4 	.word	0x20000de4
 80022d0:	08012824 	.word	0x08012824
 80022d4:	08012830 	.word	0x08012830
 80022d8:	08012840 	.word	0x08012840
 80022dc:	08012854 	.word	0x08012854
 80022e0:	0801285c 	.word	0x0801285c

080022e4 <LCD_Menu_2_4_>:

void LCD_Menu_2_4_(uint8_t isWifi)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
	if(isWifi == 0)
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d118      	bne.n	8002326 <LCD_Menu_2_4_+0x42>
	{
		lcd_send_cmd(0x80 | 0x02);
 80022f4:	2082      	movs	r0, #130	; 0x82
 80022f6:	f7ff fc43 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("login MyHydroponic");
 80022fa:	4817      	ldr	r0, [pc, #92]	; (8002358 <LCD_Menu_2_4_+0x74>)
 80022fc:	f7ff fcf4 	bl	8001ce8 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x42);
 8002300:	20c2      	movs	r0, #194	; 0xc2
 8002302:	f7ff fc3d 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("goto 192.168.4.1");
 8002306:	4815      	ldr	r0, [pc, #84]	; (800235c <LCD_Menu_2_4_+0x78>)
 8002308:	f7ff fcee 	bl	8001ce8 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x16);
 800230c:	2096      	movs	r0, #150	; 0x96
 800230e:	f7ff fc37 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("Start");
 8002312:	4813      	ldr	r0, [pc, #76]	; (8002360 <LCD_Menu_2_4_+0x7c>)
 8002314:	f7ff fce8 	bl	8001ce8 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x56);
 8002318:	20d6      	movs	r0, #214	; 0xd6
 800231a:	f7ff fc31 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("End");
 800231e:	4811      	ldr	r0, [pc, #68]	; (8002364 <LCD_Menu_2_4_+0x80>)
 8002320:	f7ff fce2 	bl	8001ce8 <lcd_send_string>
		lcd_send_string("goto 192.168.4.1");
		lcd_send_cmd(0x80 | 0x16);
		lcd_send_string("Config_wifi ...");
	}

}
 8002324:	e014      	b.n	8002350 <LCD_Menu_2_4_+0x6c>
	else if(isWifi == 1)
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d111      	bne.n	8002350 <LCD_Menu_2_4_+0x6c>
		lcd_send_cmd(0x80 | 0x02);
 800232c:	2082      	movs	r0, #130	; 0x82
 800232e:	f7ff fc27 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("login MyHydroponic");
 8002332:	4809      	ldr	r0, [pc, #36]	; (8002358 <LCD_Menu_2_4_+0x74>)
 8002334:	f7ff fcd8 	bl	8001ce8 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x42);
 8002338:	20c2      	movs	r0, #194	; 0xc2
 800233a:	f7ff fc21 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("goto 192.168.4.1");
 800233e:	4807      	ldr	r0, [pc, #28]	; (800235c <LCD_Menu_2_4_+0x78>)
 8002340:	f7ff fcd2 	bl	8001ce8 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x16);
 8002344:	2096      	movs	r0, #150	; 0x96
 8002346:	f7ff fc1b 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("Config_wifi ...");
 800234a:	4807      	ldr	r0, [pc, #28]	; (8002368 <LCD_Menu_2_4_+0x84>)
 800234c:	f7ff fccc 	bl	8001ce8 <lcd_send_string>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	08012870 	.word	0x08012870
 800235c:	08012884 	.word	0x08012884
 8002360:	08012898 	.word	0x08012898
 8002364:	080128a0 	.word	0x080128a0
 8002368:	080128a4 	.word	0x080128a4

0800236c <LCD_Menu_1>:
void LCD_Menu_1()
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x02);
 8002370:	2082      	movs	r0, #130	; 0x82
 8002372:	f7ff fc05 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("Set point");
 8002376:	480b      	ldr	r0, [pc, #44]	; (80023a4 <LCD_Menu_1+0x38>)
 8002378:	f7ff fcb6 	bl	8001ce8 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x42);
 800237c:	20c2      	movs	r0, #194	; 0xc2
 800237e:	f7ff fbff 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("Testing");
 8002382:	4809      	ldr	r0, [pc, #36]	; (80023a8 <LCD_Menu_1+0x3c>)
 8002384:	f7ff fcb0 	bl	8001ce8 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x16);
 8002388:	2096      	movs	r0, #150	; 0x96
 800238a:	f7ff fbf9 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("Calibration sensor");
 800238e:	4807      	ldr	r0, [pc, #28]	; (80023ac <LCD_Menu_1+0x40>)
 8002390:	f7ff fcaa 	bl	8001ce8 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x56);
 8002394:	20d6      	movs	r0, #214	; 0xd6
 8002396:	f7ff fbf3 	bl	8001b80 <lcd_send_cmd>
		lcd_send_string("Wifi Config");
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <LCD_Menu_1+0x44>)
 800239c:	f7ff fca4 	bl	8001ce8 <lcd_send_string>
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	080128b4 	.word	0x080128b4
 80023a8:	080128c0 	.word	0x080128c0
 80023ac:	080128c8 	.word	0x080128c8
 80023b0:	080128dc 	.word	0x080128dc

080023b4 <LCD_Normal_Mode>:
void LCD_Normal_Mode()
{
 80023b4:	b5b0      	push	{r4, r5, r7, lr}
 80023b6:	b09e      	sub	sp, #120	; 0x78
 80023b8:	af04      	add	r7, sp, #16
	char String[100];
	sprintf(String,"PH  :%.2f   ",PH);
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <LCD_Normal_Mode+0xf4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe f8d2 	bl	8000568 <__aeabi_f2d>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	1d38      	adds	r0, r7, #4
 80023ca:	4938      	ldr	r1, [pc, #224]	; (80024ac <LCD_Normal_Mode+0xf8>)
 80023cc:	f00c fbe4 	bl	800eb98 <siprintf>
	lcd_send_cmd(0x80 | 0x03); //PH
 80023d0:	2083      	movs	r0, #131	; 0x83
 80023d2:	f7ff fbd5 	bl	8001b80 <lcd_send_cmd>
	lcd_send_string(String) ;
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fc85 	bl	8001ce8 <lcd_send_string>
	memset(String,0,strlen(String));
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fd feff 	bl	80001e4 <strlen>
 80023e6:	4602      	mov	r2, r0
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f00b fd4b 	bl	800de88 <memset>

	sprintf(String,"TDS :%.0f   ",TDS);
 80023f2:	4b2f      	ldr	r3, [pc, #188]	; (80024b0 <LCD_Normal_Mode+0xfc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f8b6 	bl	8000568 <__aeabi_f2d>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	1d38      	adds	r0, r7, #4
 8002402:	492c      	ldr	r1, [pc, #176]	; (80024b4 <LCD_Normal_Mode+0x100>)
 8002404:	f00c fbc8 	bl	800eb98 <siprintf>
	lcd_send_cmd(0x80 | 0x43); //PH
 8002408:	20c3      	movs	r0, #195	; 0xc3
 800240a:	f7ff fbb9 	bl	8001b80 <lcd_send_cmd>
	lcd_send_string(String);
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fc69 	bl	8001ce8 <lcd_send_string>
	memset(String,0,strlen(String));
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	4618      	mov	r0, r3
 800241a:	f7fd fee3 	bl	80001e4 <strlen>
 800241e:	4602      	mov	r2, r0
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f00b fd2f 	bl	800de88 <memset>

	sprintf(String,"TEMP:%.2f   ",Temperature);
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <LCD_Normal_Mode+0x104>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe f89a 	bl	8000568 <__aeabi_f2d>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	1d38      	adds	r0, r7, #4
 800243a:	4920      	ldr	r1, [pc, #128]	; (80024bc <LCD_Normal_Mode+0x108>)
 800243c:	f00c fbac 	bl	800eb98 <siprintf>
	lcd_send_cmd(0x80 | 0x17); //PH
 8002440:	2097      	movs	r0, #151	; 0x97
 8002442:	f7ff fb9d 	bl	8001b80 <lcd_send_cmd>
	lcd_send_string(String);
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fc4d 	bl	8001ce8 <lcd_send_string>
	memset(String,0,strlen(String));
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	4618      	mov	r0, r3
 8002452:	f7fd fec7 	bl	80001e4 <strlen>
 8002456:	4602      	mov	r2, r0
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f00b fd13 	bl	800de88 <memset>
	sprintf(String,"%d/%d/%d- %d:%d ",ds1307.date,ds1307.month,ds1307.year,ds1307.hour,ds1307.min);
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <LCD_Normal_Mode+0x10c>)
 8002464:	791b      	ldrb	r3, [r3, #4]
 8002466:	461c      	mov	r4, r3
 8002468:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <LCD_Normal_Mode+0x10c>)
 800246a:	795b      	ldrb	r3, [r3, #5]
 800246c:	461d      	mov	r5, r3
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <LCD_Normal_Mode+0x10c>)
 8002470:	88db      	ldrh	r3, [r3, #6]
 8002472:	461a      	mov	r2, r3
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <LCD_Normal_Mode+0x10c>)
 8002476:	789b      	ldrb	r3, [r3, #2]
 8002478:	4619      	mov	r1, r3
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <LCD_Normal_Mode+0x10c>)
 800247c:	785b      	ldrb	r3, [r3, #1]
 800247e:	1d38      	adds	r0, r7, #4
 8002480:	9302      	str	r3, [sp, #8]
 8002482:	9101      	str	r1, [sp, #4]
 8002484:	9200      	str	r2, [sp, #0]
 8002486:	462b      	mov	r3, r5
 8002488:	4622      	mov	r2, r4
 800248a:	490e      	ldr	r1, [pc, #56]	; (80024c4 <LCD_Normal_Mode+0x110>)
 800248c:	f00c fb84 	bl	800eb98 <siprintf>
	lcd_send_cmd(0x80 | 0x54); //PH
 8002490:	20d4      	movs	r0, #212	; 0xd4
 8002492:	f7ff fb75 	bl	8001b80 <lcd_send_cmd>
	lcd_send_string(String);
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fc25 	bl	8001ce8 <lcd_send_string>
}
 800249e:	bf00      	nop
 80024a0:	3768      	adds	r7, #104	; 0x68
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bdb0      	pop	{r4, r5, r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000058c 	.word	0x2000058c
 80024ac:	080128e8 	.word	0x080128e8
 80024b0:	20000588 	.word	0x20000588
 80024b4:	080128f8 	.word	0x080128f8
 80024b8:	20000590 	.word	0x20000590
 80024bc:	08012908 	.word	0x08012908
 80024c0:	20000214 	.word	0x20000214
 80024c4:	08012918 	.word	0x08012918

080024c8 <LCD_Display>:
void LCD_Display()
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
	float tamp  = 0;
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	607b      	str	r3, [r7, #4]
	float tamp2 = 0;
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	603b      	str	r3, [r7, #0]
	{
	Push_Slect();
 80024da:	f7ff fc65 	bl	8001da8 <Push_Slect>
	if(Rpush_number == 0)
 80024de:	4b8d      	ldr	r3, [pc, #564]	; (8002714 <LCD_Display+0x24c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d103      	bne.n	80024ee <LCD_Display+0x26>
	{
		Page = 0;
 80024e6:	4b8c      	ldr	r3, [pc, #560]	; (8002718 <LCD_Display+0x250>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e155      	b.n	800279a <LCD_Display+0x2d2>
	}
	else if(Rpush_number == 1)
 80024ee:	4b89      	ldr	r3, [pc, #548]	; (8002714 <LCD_Display+0x24c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d103      	bne.n	80024fe <LCD_Display+0x36>
	{
		Page = 1;
 80024f6:	4b88      	ldr	r3, [pc, #544]	; (8002718 <LCD_Display+0x250>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	e14d      	b.n	800279a <LCD_Display+0x2d2>
	}
	else if(Rpush_number == 2)
 80024fe:	4b85      	ldr	r3, [pc, #532]	; (8002714 <LCD_Display+0x24c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d144      	bne.n	8002590 <LCD_Display+0xc8>
	{
		if(button_flag == 0)
 8002506:	4b85      	ldr	r3, [pc, #532]	; (800271c <LCD_Display+0x254>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f040 8145 	bne.w	800279a <LCD_Display+0x2d2>
		{
			switch(pointer_position)
 8002510:	4b83      	ldr	r3, [pc, #524]	; (8002720 <LCD_Display+0x258>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b06      	cmp	r3, #6
 8002516:	d82d      	bhi.n	8002574 <LCD_Display+0xac>
 8002518:	a201      	add	r2, pc, #4	; (adr r2, 8002520 <LCD_Display+0x58>)
 800251a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251e:	bf00      	nop
 8002520:	0800253d 	.word	0x0800253d
 8002524:	08002575 	.word	0x08002575
 8002528:	0800254b 	.word	0x0800254b
 800252c:	08002575 	.word	0x08002575
 8002530:	08002559 	.word	0x08002559
 8002534:	08002575 	.word	0x08002575
 8002538:	08002567 	.word	0x08002567
		  {
			case 0:
				option_page_1 = Page1_SetPoint;
 800253c:	4b79      	ldr	r3, [pc, #484]	; (8002724 <LCD_Display+0x25c>)
 800253e:	2202      	movs	r2, #2
 8002540:	701a      	strb	r2, [r3, #0]
				Page = 2;
 8002542:	4b75      	ldr	r3, [pc, #468]	; (8002718 <LCD_Display+0x250>)
 8002544:	2202      	movs	r2, #2
 8002546:	601a      	str	r2, [r3, #0]
				break;
 8002548:	e01e      	b.n	8002588 <LCD_Display+0xc0>
			case 2:
				option_page_1 = Page1_Testing;
 800254a:	4b76      	ldr	r3, [pc, #472]	; (8002724 <LCD_Display+0x25c>)
 800254c:	2203      	movs	r2, #3
 800254e:	701a      	strb	r2, [r3, #0]
				Page = 2;
 8002550:	4b71      	ldr	r3, [pc, #452]	; (8002718 <LCD_Display+0x250>)
 8002552:	2202      	movs	r2, #2
 8002554:	601a      	str	r2, [r3, #0]
				break;
 8002556:	e017      	b.n	8002588 <LCD_Display+0xc0>
			case 4:
				option_page_1 = Page1_Calbration_sensor;
 8002558:	4b72      	ldr	r3, [pc, #456]	; (8002724 <LCD_Display+0x25c>)
 800255a:	2204      	movs	r2, #4
 800255c:	701a      	strb	r2, [r3, #0]
				Page = 2;
 800255e:	4b6e      	ldr	r3, [pc, #440]	; (8002718 <LCD_Display+0x250>)
 8002560:	2202      	movs	r2, #2
 8002562:	601a      	str	r2, [r3, #0]
				break;
 8002564:	e010      	b.n	8002588 <LCD_Display+0xc0>
			case 6:
				option_page_1 = Page1_WifiConfig;
 8002566:	4b6f      	ldr	r3, [pc, #444]	; (8002724 <LCD_Display+0x25c>)
 8002568:	2205      	movs	r2, #5
 800256a:	701a      	strb	r2, [r3, #0]
				Page = 2;
 800256c:	4b6a      	ldr	r3, [pc, #424]	; (8002718 <LCD_Display+0x250>)
 800256e:	2202      	movs	r2, #2
 8002570:	601a      	str	r2, [r3, #0]
				break;
 8002572:	e009      	b.n	8002588 <LCD_Display+0xc0>
			default:
				option_page_1 = Page1_Back;
 8002574:	4b6b      	ldr	r3, [pc, #428]	; (8002724 <LCD_Display+0x25c>)
 8002576:	2206      	movs	r2, #6
 8002578:	701a      	strb	r2, [r3, #0]
				Page = 0;
 800257a:	4b67      	ldr	r3, [pc, #412]	; (8002718 <LCD_Display+0x250>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
				Rpush_number = 0;
 8002580:	4b64      	ldr	r3, [pc, #400]	; (8002714 <LCD_Display+0x24c>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
				break;
 8002586:	bf00      	nop
			}
			button_flag =1;
 8002588:	4b64      	ldr	r3, [pc, #400]	; (800271c <LCD_Display+0x254>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e104      	b.n	800279a <LCD_Display+0x2d2>
		}
	}
	else if(Rpush_number == 3)
 8002590:	4b60      	ldr	r3, [pc, #384]	; (8002714 <LCD_Display+0x24c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d17c      	bne.n	8002692 <LCD_Display+0x1ca>
	{
			// OPTION SETPOINT AT PAGE 1
			if(option_page_1 == Page1_SetPoint)
 8002598:	4b62      	ldr	r3, [pc, #392]	; (8002724 <LCD_Display+0x25c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d123      	bne.n	80025e8 <LCD_Display+0x120>
			{
				if(pointer_position == 0)
 80025a0:	4b5f      	ldr	r3, [pc, #380]	; (8002720 <LCD_Display+0x258>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d103      	bne.n	80025b0 <LCD_Display+0xe8>
				{
					option_page_2 = Page2_ph;
 80025a8:	4b5f      	ldr	r3, [pc, #380]	; (8002728 <LCD_Display+0x260>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
 80025ae:	e0f4      	b.n	800279a <LCD_Display+0x2d2>
				}
				else if(pointer_position == 2)
 80025b0:	4b5b      	ldr	r3, [pc, #364]	; (8002720 <LCD_Display+0x258>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d103      	bne.n	80025c0 <LCD_Display+0xf8>
				{
					option_page_2 = Page2_ph_thr;
 80025b8:	4b5b      	ldr	r3, [pc, #364]	; (8002728 <LCD_Display+0x260>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
 80025be:	e0ec      	b.n	800279a <LCD_Display+0x2d2>
				}
				else if(pointer_position == 4)
 80025c0:	4b57      	ldr	r3, [pc, #348]	; (8002720 <LCD_Display+0x258>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d103      	bne.n	80025d0 <LCD_Display+0x108>
				{
					option_page_2 = Page2_tds;
 80025c8:	4b57      	ldr	r3, [pc, #348]	; (8002728 <LCD_Display+0x260>)
 80025ca:	2202      	movs	r2, #2
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	e0e4      	b.n	800279a <LCD_Display+0x2d2>
				}
				else if(pointer_position == 6)
 80025d0:	4b53      	ldr	r3, [pc, #332]	; (8002720 <LCD_Display+0x258>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b06      	cmp	r3, #6
 80025d6:	d103      	bne.n	80025e0 <LCD_Display+0x118>
				{
					option_page_2 = Page2_tds_thr;
 80025d8:	4b53      	ldr	r3, [pc, #332]	; (8002728 <LCD_Display+0x260>)
 80025da:	2203      	movs	r2, #3
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	e0dc      	b.n	800279a <LCD_Display+0x2d2>
				}
				else
				{
					option_page_2 = Page2_Back;
 80025e0:	4b51      	ldr	r3, [pc, #324]	; (8002728 <LCD_Display+0x260>)
 80025e2:	220c      	movs	r2, #12
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	e0d8      	b.n	800279a <LCD_Display+0x2d2>
				}

			}
			//// OPTION TESTING AT PAGE 1
			else if (option_page_1 ==Page1_Testing)
 80025e8:	4b4e      	ldr	r3, [pc, #312]	; (8002724 <LCD_Display+0x25c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d123      	bne.n	8002638 <LCD_Display+0x170>
			{
				if(pointer_position == 0)
 80025f0:	4b4b      	ldr	r3, [pc, #300]	; (8002720 <LCD_Display+0x258>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d103      	bne.n	8002600 <LCD_Display+0x138>
				{
					option_page_2 = Page2_pump_1;
 80025f8:	4b4b      	ldr	r3, [pc, #300]	; (8002728 <LCD_Display+0x260>)
 80025fa:	2204      	movs	r2, #4
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	e0cc      	b.n	800279a <LCD_Display+0x2d2>
				}
				else if(pointer_position == 2)
 8002600:	4b47      	ldr	r3, [pc, #284]	; (8002720 <LCD_Display+0x258>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d103      	bne.n	8002610 <LCD_Display+0x148>
				{
					option_page_2 = Page2_pump_2;
 8002608:	4b47      	ldr	r3, [pc, #284]	; (8002728 <LCD_Display+0x260>)
 800260a:	2205      	movs	r2, #5
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e0c4      	b.n	800279a <LCD_Display+0x2d2>
				}
				else if(pointer_position == 4)
 8002610:	4b43      	ldr	r3, [pc, #268]	; (8002720 <LCD_Display+0x258>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b04      	cmp	r3, #4
 8002616:	d103      	bne.n	8002620 <LCD_Display+0x158>
				{
					option_page_2 = Page2_pump_3;
 8002618:	4b43      	ldr	r3, [pc, #268]	; (8002728 <LCD_Display+0x260>)
 800261a:	2206      	movs	r2, #6
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	e0bc      	b.n	800279a <LCD_Display+0x2d2>
				}
				else if(pointer_position == 6)
 8002620:	4b3f      	ldr	r3, [pc, #252]	; (8002720 <LCD_Display+0x258>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b06      	cmp	r3, #6
 8002626:	d103      	bne.n	8002630 <LCD_Display+0x168>
				{
					option_page_2 = Page2_pump_4;
 8002628:	4b3f      	ldr	r3, [pc, #252]	; (8002728 <LCD_Display+0x260>)
 800262a:	2207      	movs	r2, #7
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e0b4      	b.n	800279a <LCD_Display+0x2d2>
				}
				else
				{
					option_page_2 = Page2_Back;
 8002630:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <LCD_Display+0x260>)
 8002632:	220c      	movs	r2, #12
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	e0b0      	b.n	800279a <LCD_Display+0x2d2>
				}

			}
			///// OPTION CALIB AT PAGE 1
			else if(option_page_1 == Page1_Calbration_sensor)
 8002638:	4b3a      	ldr	r3, [pc, #232]	; (8002724 <LCD_Display+0x25c>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b04      	cmp	r3, #4
 800263e:	d117      	bne.n	8002670 <LCD_Display+0x1a8>
			{

				if(pointer_position == 0)
 8002640:	4b37      	ldr	r3, [pc, #220]	; (8002720 <LCD_Display+0x258>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <LCD_Display+0x18c>
				{
					option_page_2 = Page2_calib_ph;
 8002648:	4b37      	ldr	r3, [pc, #220]	; (8002728 <LCD_Display+0x260>)
 800264a:	2208      	movs	r2, #8
 800264c:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 800264e:	f7ff faf7 	bl	8001c40 <lcd_clear>
 8002652:	e0a2      	b.n	800279a <LCD_Display+0x2d2>
				}
				else if(pointer_position == 4)
 8002654:	4b32      	ldr	r3, [pc, #200]	; (8002720 <LCD_Display+0x258>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d105      	bne.n	8002668 <LCD_Display+0x1a0>
				{
					option_page_2 = Page2_calib_tds;
 800265c:	4b32      	ldr	r3, [pc, #200]	; (8002728 <LCD_Display+0x260>)
 800265e:	2209      	movs	r2, #9
 8002660:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 8002662:	f7ff faed 	bl	8001c40 <lcd_clear>
 8002666:	e098      	b.n	800279a <LCD_Display+0x2d2>
				}
				else
				{
					option_page_2 = Page2_Back;
 8002668:	4b2f      	ldr	r3, [pc, #188]	; (8002728 <LCD_Display+0x260>)
 800266a:	220c      	movs	r2, #12
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	e094      	b.n	800279a <LCD_Display+0x2d2>
				}
			}
			///OPTION WIFICONFIG PAGE 1
			else if(option_page_1 == Page1_WifiConfig)
 8002670:	4b2c      	ldr	r3, [pc, #176]	; (8002724 <LCD_Display+0x25c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b05      	cmp	r3, #5
 8002676:	f040 8090 	bne.w	800279a <LCD_Display+0x2d2>
			{
				if(pointer_position == 4)
 800267a:	4b29      	ldr	r3, [pc, #164]	; (8002720 <LCD_Display+0x258>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b04      	cmp	r3, #4
 8002680:	d103      	bne.n	800268a <LCD_Display+0x1c2>
				{
					option_page_2 = Page2_start;
 8002682:	4b29      	ldr	r3, [pc, #164]	; (8002728 <LCD_Display+0x260>)
 8002684:	220a      	movs	r2, #10
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e087      	b.n	800279a <LCD_Display+0x2d2>
				}
				else
				{
					option_page_2 = Page2_Back;
 800268a:	4b27      	ldr	r3, [pc, #156]	; (8002728 <LCD_Display+0x260>)
 800268c:	220c      	movs	r2, #12
 800268e:	701a      	strb	r2, [r3, #0]
 8002690:	e083      	b.n	800279a <LCD_Display+0x2d2>
				}
			}
		}
		else if(Rpush_number == 4)  // Only for Set up value
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <LCD_Display+0x24c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b04      	cmp	r3, #4
 8002698:	d17f      	bne.n	800279a <LCD_Display+0x2d2>
		{
			if(option_page_1 == Page1_SetPoint)
 800269a:	4b22      	ldr	r3, [pc, #136]	; (8002724 <LCD_Display+0x25c>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d116      	bne.n	80026d0 <LCD_Display+0x208>
			{
				option_page_2 = Page2_Nothing;
 80026a2:	4b21      	ldr	r3, [pc, #132]	; (8002728 <LCD_Display+0x260>)
 80026a4:	220d      	movs	r2, #13
 80026a6:	701a      	strb	r2, [r3, #0]
				Rpush_number = 2;
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <LCD_Display+0x24c>)
 80026aa:	2202      	movs	r2, #2
 80026ac:	601a      	str	r2, [r3, #0]
				button_flag = 1;
 80026ae:	4b1b      	ldr	r3, [pc, #108]	; (800271c <LCD_Display+0x254>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
				pointer_position = pointer_position + 1;
 80026b4:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <LCD_Display+0x258>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	4a19      	ldr	r2, [pc, #100]	; (8002720 <LCD_Display+0x258>)
 80026bc:	6013      	str	r3, [r2, #0]
				Save_SetPoint(flash_setpoint);
 80026be:	2000      	movs	r0, #0
 80026c0:	f000 fc3e 	bl	8002f40 <Save_SetPoint>
				HAL_TIM_Base_Start_IT(&htim4);
 80026c4:	4819      	ldr	r0, [pc, #100]	; (800272c <LCD_Display+0x264>)
 80026c6:	f006 fae5 	bl	8008c94 <HAL_TIM_Base_Start_IT>
				lcd_clear();
 80026ca:	f7ff fab9 	bl	8001c40 <lcd_clear>
 80026ce:	e064      	b.n	800279a <LCD_Display+0x2d2>
			}
			else if(option_page_1 == Page1_Calbration_sensor)
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <LCD_Display+0x25c>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d149      	bne.n	800276c <LCD_Display+0x2a4>
			{
				if(option_page_2 == Page2_calib_ph)
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <LCD_Display+0x260>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d127      	bne.n	8002730 <LCD_Display+0x268>
				{
					option_page_2 = Page2_Nothing;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <LCD_Display+0x260>)
 80026e2:	220d      	movs	r2, #13
 80026e4:	701a      	strb	r2, [r3, #0]
					Rpush_number = 2;
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <LCD_Display+0x24c>)
 80026e8:	2202      	movs	r2, #2
 80026ea:	601a      	str	r2, [r3, #0]
					button_flag = 1;
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <LCD_Display+0x254>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
					pointer_position = pointer_position + 1;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <LCD_Display+0x258>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3301      	adds	r3, #1
 80026f8:	4a09      	ldr	r2, [pc, #36]	; (8002720 <LCD_Display+0x258>)
 80026fa:	6013      	str	r3, [r2, #0]
					Save_SetPoint(flash_calibration_ph);
 80026fc:	2001      	movs	r0, #1
 80026fe:	f000 fc1f 	bl	8002f40 <Save_SetPoint>
					Read_SetPoint(flash_calibration_ph);
 8002702:	2001      	movs	r0, #1
 8002704:	f000 fc7e 	bl	8003004 <Read_SetPoint>
					HAL_TIM_Base_Start_IT(&htim4);
 8002708:	4808      	ldr	r0, [pc, #32]	; (800272c <LCD_Display+0x264>)
 800270a:	f006 fac3 	bl	8008c94 <HAL_TIM_Base_Start_IT>
					lcd_clear();
 800270e:	f7ff fa97 	bl	8001c40 <lcd_clear>
 8002712:	e042      	b.n	800279a <LCD_Display+0x2d2>
 8002714:	20000228 	.word	0x20000228
 8002718:	20000230 	.word	0x20000230
 800271c:	2000022c 	.word	0x2000022c
 8002720:	20000224 	.word	0x20000224
 8002724:	20000001 	.word	0x20000001
 8002728:	20000002 	.word	0x20000002
 800272c:	20000450 	.word	0x20000450
				}
				else if(option_page_2 ==Page2_calib_tds)
 8002730:	4bb3      	ldr	r3, [pc, #716]	; (8002a00 <LCD_Display+0x538>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b09      	cmp	r3, #9
 8002736:	d130      	bne.n	800279a <LCD_Display+0x2d2>
				{
					option_page_2 = Page2_Nothing;
 8002738:	4bb1      	ldr	r3, [pc, #708]	; (8002a00 <LCD_Display+0x538>)
 800273a:	220d      	movs	r2, #13
 800273c:	701a      	strb	r2, [r3, #0]
					Rpush_number = 2;
 800273e:	4bb1      	ldr	r3, [pc, #708]	; (8002a04 <LCD_Display+0x53c>)
 8002740:	2202      	movs	r2, #2
 8002742:	601a      	str	r2, [r3, #0]
					button_flag = 1;
 8002744:	4bb0      	ldr	r3, [pc, #704]	; (8002a08 <LCD_Display+0x540>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]
					pointer_position = pointer_position + 1;
 800274a:	4bb0      	ldr	r3, [pc, #704]	; (8002a0c <LCD_Display+0x544>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3301      	adds	r3, #1
 8002750:	4aae      	ldr	r2, [pc, #696]	; (8002a0c <LCD_Display+0x544>)
 8002752:	6013      	str	r3, [r2, #0]
					Save_SetPoint(flash_calibration_tds);
 8002754:	2002      	movs	r0, #2
 8002756:	f000 fbf3 	bl	8002f40 <Save_SetPoint>
					Read_SetPoint(flash_calibration_tds);
 800275a:	2002      	movs	r0, #2
 800275c:	f000 fc52 	bl	8003004 <Read_SetPoint>
					HAL_TIM_Base_Start_IT(&htim4);
 8002760:	48ab      	ldr	r0, [pc, #684]	; (8002a10 <LCD_Display+0x548>)
 8002762:	f006 fa97 	bl	8008c94 <HAL_TIM_Base_Start_IT>
					lcd_clear();
 8002766:	f7ff fa6b 	bl	8001c40 <lcd_clear>
 800276a:	e016      	b.n	800279a <LCD_Display+0x2d2>
				}

			}
			else if(option_page_2 ==Page2_start)
 800276c:	4ba4      	ldr	r3, [pc, #656]	; (8002a00 <LCD_Display+0x538>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b0a      	cmp	r3, #10
 8002772:	d112      	bne.n	800279a <LCD_Display+0x2d2>
			{
				button_flag = 1;
 8002774:	4ba4      	ldr	r3, [pc, #656]	; (8002a08 <LCD_Display+0x540>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]
				option_page_2 = Page2_Nothing;
 800277a:	4ba1      	ldr	r3, [pc, #644]	; (8002a00 <LCD_Display+0x538>)
 800277c:	220d      	movs	r2, #13
 800277e:	701a      	strb	r2, [r3, #0]
				Rpush_number = 2;
 8002780:	4ba0      	ldr	r3, [pc, #640]	; (8002a04 <LCD_Display+0x53c>)
 8002782:	2202      	movs	r2, #2
 8002784:	601a      	str	r2, [r3, #0]
				pointer_position = pointer_position + 1;
 8002786:	4ba1      	ldr	r3, [pc, #644]	; (8002a0c <LCD_Display+0x544>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3301      	adds	r3, #1
 800278c:	4a9f      	ldr	r2, [pc, #636]	; (8002a0c <LCD_Display+0x544>)
 800278e:	6013      	str	r3, [r2, #0]
				HAL_TIM_Base_Start_IT(&htim4);
 8002790:	489f      	ldr	r0, [pc, #636]	; (8002a10 <LCD_Display+0x548>)
 8002792:	f006 fa7f 	bl	8008c94 <HAL_TIM_Base_Start_IT>
				lcd_clear();
 8002796:	f7ff fa53 	bl	8001c40 <lcd_clear>
	}




	switch(Page)
 800279a:	4b9e      	ldr	r3, [pc, #632]	; (8002a14 <LCD_Display+0x54c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d017      	beq.n	80027d2 <LCD_Display+0x30a>
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	f200 8227 	bhi.w	8002bf6 <LCD_Display+0x72e>
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <LCD_Display+0x2ea>
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d003      	beq.n	80027b8 <LCD_Display+0x2f0>
				}
			}
			break;

		default:
			break;
 80027b0:	e221      	b.n	8002bf6 <LCD_Display+0x72e>
			LCD_Normal_Mode();
 80027b2:	f7ff fdff 	bl	80023b4 <LCD_Normal_Mode>
			break;
 80027b6:	e221      	b.n	8002bfc <LCD_Display+0x734>
			Pointer_Status(Rotary_volum());
 80027b8:	f7ff fabc 	bl	8001d34 <Rotary_volum>
 80027bc:	4603      	mov	r3, r0
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fb26 	bl	8001e10 <Pointer_Status>
			LCD_Menu_1(Rotary_volum());
 80027c4:	f7ff fab6 	bl	8001d34 <Rotary_volum>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fdce 	bl	800236c <LCD_Menu_1>
			break;
 80027d0:	e214      	b.n	8002bfc <LCD_Display+0x734>
			Pointer_Status(Rotary_volum());
 80027d2:	f7ff faaf 	bl	8001d34 <Rotary_volum>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fb19 	bl	8001e10 <Pointer_Status>
			if(option_page_1 == Page1_SetPoint)
 80027de:	4b8e      	ldr	r3, [pc, #568]	; (8002a18 <LCD_Display+0x550>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	f040 813a 	bne.w	8002a5c <LCD_Display+0x594>
				  Read_SetPoint(flash_setpoint);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f000 fc0b 	bl	8003004 <Read_SetPoint>
				  LCD_Menu_2_1();
 80027ee:	f7ff fbb5 	bl	8001f5c <LCD_Menu_2_1>
				  if(option_page_2 == Page2_ph)
 80027f2:	4b83      	ldr	r3, [pc, #524]	; (8002a00 <LCD_Display+0x538>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d137      	bne.n	800286a <LCD_Display+0x3a2>
					  lcd_pointer_1 = PH_SetPoint;
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <LCD_Display+0x554>)
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002804:	ee17 2a90 	vmov	r2, s15
 8002808:	4b85      	ldr	r3, [pc, #532]	; (8002a20 <LCD_Display+0x558>)
 800280a:	601a      	str	r2, [r3, #0]
					  tamp = PH_SetPoint;
 800280c:	4b83      	ldr	r3, [pc, #524]	; (8002a1c <LCD_Display+0x554>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	607b      	str	r3, [r7, #4]
					  HAL_TIM_Base_Stop_IT(&htim4);
 8002812:	487f      	ldr	r0, [pc, #508]	; (8002a10 <LCD_Display+0x548>)
 8002814:	f006 faae 	bl	8008d74 <HAL_TIM_Base_Stop_IT>
						while(Rpush_number == 3) 		// Setting setpoint for PH
 8002818:	e022      	b.n	8002860 <LCD_Display+0x398>
											LCD_Menu_2_1();
 800281a:	f7ff fb9f 	bl	8001f5c <LCD_Menu_2_1>
											Push_Slect();
 800281e:	f7ff fac3 	bl	8001da8 <Push_Slect>
											Pointer_2_Status(0);
 8002822:	2000      	movs	r0, #0
 8002824:	f7ff fb68 	bl	8001ef8 <Pointer_2_Status>
											tamp2= (float)((Rotary_volum()- tamp)/10);
 8002828:	f7ff fa84 	bl	8001d34 <Rotary_volum>
 800282c:	ee07 0a90 	vmov	s15, r0
 8002830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002834:	edd7 7a01 	vldr	s15, [r7, #4]
 8002838:	ee37 7a67 	vsub.f32	s14, s14, s15
 800283c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002844:	edc7 7a00 	vstr	s15, [r7]
											PH_SetPoint = tamp2 + tamp;
 8002848:	ed97 7a00 	vldr	s14, [r7]
 800284c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002854:	4b71      	ldr	r3, [pc, #452]	; (8002a1c <LCD_Display+0x554>)
 8002856:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 800285a:	4872      	ldr	r0, [pc, #456]	; (8002a24 <LCD_Display+0x55c>)
 800285c:	f004 ff43 	bl	80076e6 <HAL_IWDG_Refresh>
						while(Rpush_number == 3) 		// Setting setpoint for PH
 8002860:	4b68      	ldr	r3, [pc, #416]	; (8002a04 <LCD_Display+0x53c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d0d8      	beq.n	800281a <LCD_Display+0x352>
			break;
 8002868:	e1c7      	b.n	8002bfa <LCD_Display+0x732>
				  else if(option_page_2== Page2_ph_thr) // Setting setpoint for PH_THR
 800286a:	4b65      	ldr	r3, [pc, #404]	; (8002a00 <LCD_Display+0x538>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d137      	bne.n	80028e2 <LCD_Display+0x41a>
					  lcd_pointer_1 = PH_THR_SetPoint;
 8002872:	4b6d      	ldr	r3, [pc, #436]	; (8002a28 <LCD_Display+0x560>)
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800287c:	ee17 2a90 	vmov	r2, s15
 8002880:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <LCD_Display+0x558>)
 8002882:	601a      	str	r2, [r3, #0]
				  	  tamp = PH_THR_SetPoint;
 8002884:	4b68      	ldr	r3, [pc, #416]	; (8002a28 <LCD_Display+0x560>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	607b      	str	r3, [r7, #4]
					  HAL_TIM_Base_Stop_IT(&htim4);
 800288a:	4861      	ldr	r0, [pc, #388]	; (8002a10 <LCD_Display+0x548>)
 800288c:	f006 fa72 	bl	8008d74 <HAL_TIM_Base_Stop_IT>
						while(Rpush_number== 3)
 8002890:	e022      	b.n	80028d8 <LCD_Display+0x410>
											LCD_Menu_2_1();
 8002892:	f7ff fb63 	bl	8001f5c <LCD_Menu_2_1>
											Push_Slect();
 8002896:	f7ff fa87 	bl	8001da8 <Push_Slect>
											Pointer_2_Status(2);
 800289a:	2002      	movs	r0, #2
 800289c:	f7ff fb2c 	bl	8001ef8 <Pointer_2_Status>
											tamp2 = (float)((Rotary_volum()- tamp)/10);
 80028a0:	f7ff fa48 	bl	8001d34 <Rotary_volum>
 80028a4:	ee07 0a90 	vmov	s15, r0
 80028a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80028b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028b4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80028b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028bc:	edc7 7a00 	vstr	s15, [r7]
											PH_THR_SetPoint =  tamp2 + tamp;
 80028c0:	ed97 7a00 	vldr	s14, [r7]
 80028c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80028c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028cc:	4b56      	ldr	r3, [pc, #344]	; (8002a28 <LCD_Display+0x560>)
 80028ce:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 80028d2:	4854      	ldr	r0, [pc, #336]	; (8002a24 <LCD_Display+0x55c>)
 80028d4:	f004 ff07 	bl	80076e6 <HAL_IWDG_Refresh>
						while(Rpush_number== 3)
 80028d8:	4b4a      	ldr	r3, [pc, #296]	; (8002a04 <LCD_Display+0x53c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d0d8      	beq.n	8002892 <LCD_Display+0x3ca>
			break;
 80028e0:	e18b      	b.n	8002bfa <LCD_Display+0x732>
				  else if(option_page_2==Page2_tds)		// Setting setpoint for TDS
 80028e2:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <LCD_Display+0x538>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d142      	bne.n	8002970 <LCD_Display+0x4a8>
					  lcd_pointer_1 = TDS_SetPoint;
 80028ea:	4b50      	ldr	r3, [pc, #320]	; (8002a2c <LCD_Display+0x564>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f4:	ee17 2a90 	vmov	r2, s15
 80028f8:	4b49      	ldr	r3, [pc, #292]	; (8002a20 <LCD_Display+0x558>)
 80028fa:	601a      	str	r2, [r3, #0]
					  tamp = TDS_SetPoint;
 80028fc:	4b4b      	ldr	r3, [pc, #300]	; (8002a2c <LCD_Display+0x564>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	607b      	str	r3, [r7, #4]
					  HAL_TIM_Base_Stop_IT(&htim4);
 8002902:	4843      	ldr	r0, [pc, #268]	; (8002a10 <LCD_Display+0x548>)
 8002904:	f006 fa36 	bl	8008d74 <HAL_TIM_Base_Stop_IT>
						while(Rpush_number== 3)
 8002908:	e02d      	b.n	8002966 <LCD_Display+0x49e>
											LCD_Menu_2_1();
 800290a:	f7ff fb27 	bl	8001f5c <LCD_Menu_2_1>
											Push_Slect();
 800290e:	f7ff fa4b 	bl	8001da8 <Push_Slect>
											Pointer_2_Status(4);
 8002912:	2004      	movs	r0, #4
 8002914:	f7ff faf0 	bl	8001ef8 <Pointer_2_Status>
											tamp2 = ((Rotary_volum()- tamp)*10);
 8002918:	f7ff fa0c 	bl	8001d34 <Rotary_volum>
 800291c:	ee07 0a90 	vmov	s15, r0
 8002920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002924:	edd7 7a01 	vldr	s15, [r7, #4]
 8002928:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002934:	edc7 7a00 	vstr	s15, [r7]
											TDS_SetPoint =  (int)tamp2 + (int)tamp;
 8002938:	edd7 7a00 	vldr	s15, [r7]
 800293c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002940:	ee17 2a90 	vmov	r2, s15
 8002944:	edd7 7a01 	vldr	s15, [r7, #4]
 8002948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800294c:	ee17 3a90 	vmov	r3, s15
 8002950:	4413      	add	r3, r2
 8002952:	ee07 3a90 	vmov	s15, r3
 8002956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800295a:	4b34      	ldr	r3, [pc, #208]	; (8002a2c <LCD_Display+0x564>)
 800295c:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 8002960:	4830      	ldr	r0, [pc, #192]	; (8002a24 <LCD_Display+0x55c>)
 8002962:	f004 fec0 	bl	80076e6 <HAL_IWDG_Refresh>
						while(Rpush_number== 3)
 8002966:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <LCD_Display+0x53c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b03      	cmp	r3, #3
 800296c:	d0cd      	beq.n	800290a <LCD_Display+0x442>
			break;
 800296e:	e144      	b.n	8002bfa <LCD_Display+0x732>
				  else if(option_page_2==Page2_tds_thr)	// Setting setpoint for TDS_thr
 8002970:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <LCD_Display+0x538>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d15d      	bne.n	8002a34 <LCD_Display+0x56c>
					  	HAL_TIM_Base_Stop_IT(&htim4);
 8002978:	4825      	ldr	r0, [pc, #148]	; (8002a10 <LCD_Display+0x548>)
 800297a:	f006 f9fb 	bl	8008d74 <HAL_TIM_Base_Stop_IT>
					  	tamp = TDS_THR_SetPoint;
 800297e:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <LCD_Display+0x568>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	607b      	str	r3, [r7, #4]
					    lcd_pointer_1 = TDS_THR_SetPoint;
 8002984:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <LCD_Display+0x568>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800298e:	ee17 2a90 	vmov	r2, s15
 8002992:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <LCD_Display+0x558>)
 8002994:	601a      	str	r2, [r3, #0]
						while(Rpush_number == 3)
 8002996:	e02d      	b.n	80029f4 <LCD_Display+0x52c>
											LCD_Menu_2_1();
 8002998:	f7ff fae0 	bl	8001f5c <LCD_Menu_2_1>
											Push_Slect();
 800299c:	f7ff fa04 	bl	8001da8 <Push_Slect>
											Pointer_2_Status(6);
 80029a0:	2006      	movs	r0, #6
 80029a2:	f7ff faa9 	bl	8001ef8 <Pointer_2_Status>
											tamp2 = ((Rotary_volum()- tamp)*10);
 80029a6:	f7ff f9c5 	bl	8001d34 <Rotary_volum>
 80029aa:	ee07 0a90 	vmov	s15, r0
 80029ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029c2:	edc7 7a00 	vstr	s15, [r7]
											TDS_THR_SetPoint = (int)tamp2 + (int)tamp;
 80029c6:	edd7 7a00 	vldr	s15, [r7]
 80029ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ce:	ee17 2a90 	vmov	r2, s15
 80029d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029da:	ee17 3a90 	vmov	r3, s15
 80029de:	4413      	add	r3, r2
 80029e0:	ee07 3a90 	vmov	s15, r3
 80029e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <LCD_Display+0x568>)
 80029ea:	edc3 7a00 	vstr	s15, [r3]
											HAL_IWDG_Refresh(&hiwdg);
 80029ee:	480d      	ldr	r0, [pc, #52]	; (8002a24 <LCD_Display+0x55c>)
 80029f0:	f004 fe79 	bl	80076e6 <HAL_IWDG_Refresh>
						while(Rpush_number == 3)
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <LCD_Display+0x53c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d0cd      	beq.n	8002998 <LCD_Display+0x4d0>
			break;
 80029fc:	e0fd      	b.n	8002bfa <LCD_Display+0x732>
 80029fe:	bf00      	nop
 8002a00:	20000002 	.word	0x20000002
 8002a04:	20000228 	.word	0x20000228
 8002a08:	2000022c 	.word	0x2000022c
 8002a0c:	20000224 	.word	0x20000224
 8002a10:	20000450 	.word	0x20000450
 8002a14:	20000230 	.word	0x20000230
 8002a18:	20000001 	.word	0x20000001
 8002a1c:	200005a0 	.word	0x200005a0
 8002a20:	20000234 	.word	0x20000234
 8002a24:	20000394 	.word	0x20000394
 8002a28:	2000059c 	.word	0x2000059c
 8002a2c:	20000594 	.word	0x20000594
 8002a30:	20000598 	.word	0x20000598
				  else if(option_page_2 == Page2_Back)	//Back option
 8002a34:	4b73      	ldr	r3, [pc, #460]	; (8002c04 <LCD_Display+0x73c>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b0c      	cmp	r3, #12
 8002a3a:	f040 80de 	bne.w	8002bfa <LCD_Display+0x732>
					  Page = 1;
 8002a3e:	4b72      	ldr	r3, [pc, #456]	; (8002c08 <LCD_Display+0x740>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
					  Rpush_number = 1;
 8002a44:	4b71      	ldr	r3, [pc, #452]	; (8002c0c <LCD_Display+0x744>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
					  button_flag = 0;
 8002a4a:	4b71      	ldr	r3, [pc, #452]	; (8002c10 <LCD_Display+0x748>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
					  option_page_2 = Page2_Nothing;
 8002a50:	4b6c      	ldr	r3, [pc, #432]	; (8002c04 <LCD_Display+0x73c>)
 8002a52:	220d      	movs	r2, #13
 8002a54:	701a      	strb	r2, [r3, #0]
					  lcd_clear();
 8002a56:	f7ff f8f3 	bl	8001c40 <lcd_clear>
			break;
 8002a5a:	e0ce      	b.n	8002bfa <LCD_Display+0x732>
			else if(option_page_1 == Page1_Testing) // Display with option testing
 8002a5c:	4b6d      	ldr	r3, [pc, #436]	; (8002c14 <LCD_Display+0x74c>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d129      	bne.n	8002ab8 <LCD_Display+0x5f0>
				 LCD_Menu_2_2();
 8002a64:	f7ff fb1c 	bl	80020a0 <LCD_Menu_2_2>
				  if(option_page_2 == Page2_pump_1)
 8002a68:	4b66      	ldr	r3, [pc, #408]	; (8002c04 <LCD_Display+0x73c>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	f000 80c4 	beq.w	8002bfa <LCD_Display+0x732>
				  else if(option_page_2== Page2_pump_2)
 8002a72:	4b64      	ldr	r3, [pc, #400]	; (8002c04 <LCD_Display+0x73c>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b05      	cmp	r3, #5
 8002a78:	f000 80bf 	beq.w	8002bfa <LCD_Display+0x732>
				  else if(option_page_2==Page2_pump_3)
 8002a7c:	4b61      	ldr	r3, [pc, #388]	; (8002c04 <LCD_Display+0x73c>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b06      	cmp	r3, #6
 8002a82:	f000 80ba 	beq.w	8002bfa <LCD_Display+0x732>
				  else if(option_page_2==Page2_pump_4)
 8002a86:	4b5f      	ldr	r3, [pc, #380]	; (8002c04 <LCD_Display+0x73c>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b07      	cmp	r3, #7
 8002a8c:	f000 80b5 	beq.w	8002bfa <LCD_Display+0x732>
				  else if(option_page_2 == Page2_Back)
 8002a90:	4b5c      	ldr	r3, [pc, #368]	; (8002c04 <LCD_Display+0x73c>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b0c      	cmp	r3, #12
 8002a96:	f040 80b0 	bne.w	8002bfa <LCD_Display+0x732>
					  Page = 1;
 8002a9a:	4b5b      	ldr	r3, [pc, #364]	; (8002c08 <LCD_Display+0x740>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
					  Rpush_number = 1;
 8002aa0:	4b5a      	ldr	r3, [pc, #360]	; (8002c0c <LCD_Display+0x744>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
					  button_flag = 0;
 8002aa6:	4b5a      	ldr	r3, [pc, #360]	; (8002c10 <LCD_Display+0x748>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
					  option_page_2 = Page2_Nothing;
 8002aac:	4b55      	ldr	r3, [pc, #340]	; (8002c04 <LCD_Display+0x73c>)
 8002aae:	220d      	movs	r2, #13
 8002ab0:	701a      	strb	r2, [r3, #0]
					  lcd_clear();
 8002ab2:	f7ff f8c5 	bl	8001c40 <lcd_clear>
			break;
 8002ab6:	e0a0      	b.n	8002bfa <LCD_Display+0x732>
			else if(option_page_1 == Page1_Calbration_sensor) // Display with calibration
 8002ab8:	4b56      	ldr	r3, [pc, #344]	; (8002c14 <LCD_Display+0x74c>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d155      	bne.n	8002b6c <LCD_Display+0x6a4>
					Read_SetPoint(flash_calibration_ph);
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f000 fa9f 	bl	8003004 <Read_SetPoint>
					Read_SetPoint(flash_calibration_tds);
 8002ac6:	2002      	movs	r0, #2
 8002ac8:	f000 fa9c 	bl	8003004 <Read_SetPoint>
					LCD_Menu_2_3(0);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7ff fb0b 	bl	80020e8 <LCD_Menu_2_3>
					if(option_page_2 == Page2_calib_ph)
 8002ad2:	4b4c      	ldr	r3, [pc, #304]	; (8002c04 <LCD_Display+0x73c>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d118      	bne.n	8002b0c <LCD_Display+0x644>
						HAL_TIM_Base_Stop_IT(&htim4);
 8002ada:	484f      	ldr	r0, [pc, #316]	; (8002c18 <LCD_Display+0x750>)
 8002adc:	f006 f94a 	bl	8008d74 <HAL_TIM_Base_Stop_IT>
						while(Rpush_number == 3)
 8002ae0:	e00f      	b.n	8002b02 <LCD_Display+0x63a>
											PH_Calibration();
 8002ae2:	f000 f973 	bl	8002dcc <PH_Calibration>
											LCD_Menu_2_3(1);
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f7ff fafe 	bl	80020e8 <LCD_Menu_2_3>
											Push_Slect();
 8002aec:	f7ff f95c 	bl	8001da8 <Push_Slect>
											HAL_Delay(500);
 8002af0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002af4:	f002 faee 	bl	80050d4 <HAL_Delay>
											lcd_clear();
 8002af8:	f7ff f8a2 	bl	8001c40 <lcd_clear>
											HAL_IWDG_Refresh(&hiwdg);
 8002afc:	4847      	ldr	r0, [pc, #284]	; (8002c1c <LCD_Display+0x754>)
 8002afe:	f004 fdf2 	bl	80076e6 <HAL_IWDG_Refresh>
						while(Rpush_number == 3)
 8002b02:	4b42      	ldr	r3, [pc, #264]	; (8002c0c <LCD_Display+0x744>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d0eb      	beq.n	8002ae2 <LCD_Display+0x61a>
			break;
 8002b0a:	e076      	b.n	8002bfa <LCD_Display+0x732>
					else if(option_page_2 == Page2_calib_tds)
 8002b0c:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <LCD_Display+0x73c>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b09      	cmp	r3, #9
 8002b12:	d118      	bne.n	8002b46 <LCD_Display+0x67e>
						HAL_TIM_Base_Stop_IT(&htim4);
 8002b14:	4840      	ldr	r0, [pc, #256]	; (8002c18 <LCD_Display+0x750>)
 8002b16:	f006 f92d 	bl	8008d74 <HAL_TIM_Base_Stop_IT>
						while(Rpush_number == 3)
 8002b1a:	e00f      	b.n	8002b3c <LCD_Display+0x674>
											TDS_Calibration();
 8002b1c:	f000 f9da 	bl	8002ed4 <TDS_Calibration>
											LCD_Menu_2_3(2);
 8002b20:	2002      	movs	r0, #2
 8002b22:	f7ff fae1 	bl	80020e8 <LCD_Menu_2_3>
											Push_Slect();
 8002b26:	f7ff f93f 	bl	8001da8 <Push_Slect>
											HAL_Delay(500);
 8002b2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b2e:	f002 fad1 	bl	80050d4 <HAL_Delay>
											lcd_clear();
 8002b32:	f7ff f885 	bl	8001c40 <lcd_clear>
											HAL_IWDG_Refresh(&hiwdg);
 8002b36:	4839      	ldr	r0, [pc, #228]	; (8002c1c <LCD_Display+0x754>)
 8002b38:	f004 fdd5 	bl	80076e6 <HAL_IWDG_Refresh>
						while(Rpush_number == 3)
 8002b3c:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <LCD_Display+0x744>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d0eb      	beq.n	8002b1c <LCD_Display+0x654>
			break;
 8002b44:	e059      	b.n	8002bfa <LCD_Display+0x732>
					else if(option_page_2 == Page2_Back)
 8002b46:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <LCD_Display+0x73c>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b0c      	cmp	r3, #12
 8002b4c:	d155      	bne.n	8002bfa <LCD_Display+0x732>
					  Page = 1;
 8002b4e:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <LCD_Display+0x740>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
					  Rpush_number = 1;
 8002b54:	4b2d      	ldr	r3, [pc, #180]	; (8002c0c <LCD_Display+0x744>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
					  button_flag = 0;
 8002b5a:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <LCD_Display+0x748>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
					  option_page_2 = Page2_Nothing;
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <LCD_Display+0x73c>)
 8002b62:	220d      	movs	r2, #13
 8002b64:	701a      	strb	r2, [r3, #0]
					  lcd_clear();
 8002b66:	f7ff f86b 	bl	8001c40 <lcd_clear>
			break;
 8002b6a:	e046      	b.n	8002bfa <LCD_Display+0x732>
			else if(option_page_1 == Page1_WifiConfig)
 8002b6c:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <LCD_Display+0x74c>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d142      	bne.n	8002bfa <LCD_Display+0x732>
				LCD_Menu_2_4_(0);
 8002b74:	2000      	movs	r0, #0
 8002b76:	f7ff fbb5 	bl	80022e4 <LCD_Menu_2_4_>
				if(option_page_2 == Page2_start)
 8002b7a:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <LCD_Display+0x73c>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b0a      	cmp	r3, #10
 8002b80:	d122      	bne.n	8002bc8 <LCD_Display+0x700>
					HAL_TIM_Base_Stop_IT(&htim4);
 8002b82:	4825      	ldr	r0, [pc, #148]	; (8002c18 <LCD_Display+0x750>)
 8002b84:	f006 f8f6 	bl	8008d74 <HAL_TIM_Base_Stop_IT>
					while(Rpush_number == 3 && config_wifi_flag == 0)
 8002b88:	e00f      	b.n	8002baa <LCD_Display+0x6e2>
											Push_Slect();
 8002b8a:	f7ff f90d 	bl	8001da8 <Push_Slect>
											lcd_clear();
 8002b8e:	f7ff f857 	bl	8001c40 <lcd_clear>
											HAL_IWDG_Refresh(&hiwdg);
 8002b92:	4822      	ldr	r0, [pc, #136]	; (8002c1c <LCD_Display+0x754>)
 8002b94:	f004 fda7 	bl	80076e6 <HAL_IWDG_Refresh>
											LCD_Menu_2_4_(1);
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f7ff fba3 	bl	80022e4 <LCD_Menu_2_4_>
											Wifi_Config();
 8002b9e:	f000 fcab 	bl	80034f8 <Wifi_Config>
											HAL_Delay(1000);
 8002ba2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ba6:	f002 fa95 	bl	80050d4 <HAL_Delay>
					while(Rpush_number == 3 && config_wifi_flag == 0)
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <LCD_Display+0x744>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d103      	bne.n	8002bba <LCD_Display+0x6f2>
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <LCD_Display+0x758>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0e7      	beq.n	8002b8a <LCD_Display+0x6c2>
					config_wifi_flag = 0;
 8002bba:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <LCD_Display+0x758>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
					Rpush_number = 4;
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <LCD_Display+0x744>)
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	601a      	str	r2, [r3, #0]
			break;
 8002bc6:	e018      	b.n	8002bfa <LCD_Display+0x732>
				else if(option_page_2 == Page2_end)
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <LCD_Display+0x73c>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b0b      	cmp	r3, #11
 8002bce:	d014      	beq.n	8002bfa <LCD_Display+0x732>
				else if(option_page_2 == Page2_Back)
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <LCD_Display+0x73c>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b0c      	cmp	r3, #12
 8002bd6:	d110      	bne.n	8002bfa <LCD_Display+0x732>
				  Page = 1;
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <LCD_Display+0x740>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
				  Rpush_number = 1;
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <LCD_Display+0x744>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
				  button_flag = 0;
 8002be4:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <LCD_Display+0x748>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
				  option_page_2 = Page2_Nothing;
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <LCD_Display+0x73c>)
 8002bec:	220d      	movs	r2, #13
 8002bee:	701a      	strb	r2, [r3, #0]
				  lcd_clear();
 8002bf0:	f7ff f826 	bl	8001c40 <lcd_clear>
			break;
 8002bf4:	e001      	b.n	8002bfa <LCD_Display+0x732>
			break;
 8002bf6:	bf00      	nop
 8002bf8:	e000      	b.n	8002bfc <LCD_Display+0x734>
			break;
 8002bfa:	bf00      	nop
	}
 }
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000002 	.word	0x20000002
 8002c08:	20000230 	.word	0x20000230
 8002c0c:	20000228 	.word	0x20000228
 8002c10:	2000022c 	.word	0x2000022c
 8002c14:	20000001 	.word	0x20000001
 8002c18:	20000450 	.word	0x20000450
 8002c1c:	20000394 	.word	0x20000394
 8002c20:	200005a4 	.word	0x200005a4

08002c24 <delay_us>:
uint8_t FileName[20];							//Name of File namme
uint8_t UART1_TEMPBUFFER[SIZEOF_COMMAND];		//Temp buffer when receive data UART1
uint8_t UART1_MAINBUFFER[UART1_BUFFER_SIZE];	//MAIN buffer store data UART1

void delay_us(uint16_t time)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim6,0);
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <delay_us+0x30>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2200      	movs	r2, #0
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24
    while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8002c36:	bf00      	nop
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <delay_us+0x30>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d3f9      	bcc.n	8002c38 <delay_us+0x14>
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000498 	.word	0x20000498

08002c58 <HAL_UARTEx_RxEventCallback>:
	WifiConfig,
}Message_type;
char buffer_send[100];

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	807b      	strh	r3, [r7, #2]
	memset(UART1_MAINBUFFER,0,strlen((char*)UART1_MAINBUFFER));
 8002c64:	481c      	ldr	r0, [pc, #112]	; (8002cd8 <HAL_UARTEx_RxEventCallback+0x80>)
 8002c66:	f7fd fabd 	bl	80001e4 <strlen>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4819      	ldr	r0, [pc, #100]	; (8002cd8 <HAL_UARTEx_RxEventCallback+0x80>)
 8002c72:	f00b f909 	bl	800de88 <memset>
	if(huart->Instance == USART1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a18      	ldr	r2, [pc, #96]	; (8002cdc <HAL_UARTEx_RxEventCallback+0x84>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d112      	bne.n	8002ca6 <HAL_UARTEx_RxEventCallback+0x4e>
	{
		memcpy(UART1_MAINBUFFER,UART1_TEMPBUFFER, Size);
 8002c80:	887b      	ldrh	r3, [r7, #2]
 8002c82:	461a      	mov	r2, r3
 8002c84:	4916      	ldr	r1, [pc, #88]	; (8002ce0 <HAL_UARTEx_RxEventCallback+0x88>)
 8002c86:	4814      	ldr	r0, [pc, #80]	; (8002cd8 <HAL_UARTEx_RxEventCallback+0x80>)
 8002c88:	f00b f8f0 	bl	800de6c <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,UART1_TEMPBUFFER,SIZEOF_COMMAND);
 8002c8c:	223c      	movs	r2, #60	; 0x3c
 8002c8e:	4914      	ldr	r1, [pc, #80]	; (8002ce0 <HAL_UARTEx_RxEventCallback+0x88>)
 8002c90:	4814      	ldr	r0, [pc, #80]	; (8002ce4 <HAL_UARTEx_RxEventCallback+0x8c>)
 8002c92:	f006 fd3e 	bl	8009712 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <HAL_UARTEx_RxEventCallback+0x90>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_UARTEx_RxEventCallback+0x90>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0208 	bic.w	r2, r2, #8
 8002ca4:	601a      	str	r2, [r3, #0]
	}

	if(!strcmp(UART1_MAINBUFFER,"Config_Wifi_done"))
 8002ca6:	4911      	ldr	r1, [pc, #68]	; (8002cec <HAL_UARTEx_RxEventCallback+0x94>)
 8002ca8:	480b      	ldr	r0, [pc, #44]	; (8002cd8 <HAL_UARTEx_RxEventCallback+0x80>)
 8002caa:	f7fd fa91 	bl	80001d0 <strcmp>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_UARTEx_RxEventCallback+0x78>
	{
		HAL_UART_Transmit(&huart1, UART1_MAINBUFFER,strlen((char*)UART1_MAINBUFFER), 1000);
 8002cb4:	4808      	ldr	r0, [pc, #32]	; (8002cd8 <HAL_UARTEx_RxEventCallback+0x80>)
 8002cb6:	f7fd fa95 	bl	80001e4 <strlen>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cc2:	4905      	ldr	r1, [pc, #20]	; (8002cd8 <HAL_UARTEx_RxEventCallback+0x80>)
 8002cc4:	4807      	ldr	r0, [pc, #28]	; (8002ce4 <HAL_UARTEx_RxEventCallback+0x8c>)
 8002cc6:	f006 fc92 	bl	80095ee <HAL_UART_Transmit>
		config_wifi_flag = 1;
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_UARTEx_RxEventCallback+0x98>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
	}
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	200009e4 	.word	0x200009e4
 8002cdc:	40011000 	.word	0x40011000
 8002ce0:	200009a8 	.word	0x200009a8
 8002ce4:	200004e0 	.word	0x200004e0
 8002ce8:	20000524 	.word	0x20000524
 8002cec:	0801292c 	.word	0x0801292c
 8002cf0:	200005a4 	.word	0x200005a4

08002cf4 <SEND_UART1>:

void SEND_UART1(char *String)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)String,strlen(String), 1000);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7fd fa71 	bl	80001e4 <strlen>
 8002d02:	4603      	mov	r3, r0
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	4803      	ldr	r0, [pc, #12]	; (8002d1c <SEND_UART1+0x28>)
 8002d0e:	f006 fc6e 	bl	80095ee <HAL_UART_Transmit>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	200004e0 	.word	0x200004e0

08002d20 <Handle_value_send>:
void Handle_value_send(Message_type tp)
{
 8002d20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d24:	b0a0      	sub	sp, #128	; 0x80
 8002d26:	af04      	add	r7, sp, #16
 8002d28:	4603      	mov	r3, r0
 8002d2a:	71fb      	strb	r3, [r7, #7]
	char msg_send[100];

	if(tp == Value)
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d136      	bne.n	8002da0 <Handle_value_send+0x80>
	{
		memset(msg_send,0,strlen(msg_send));
 8002d32:	f107 030c 	add.w	r3, r7, #12
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd fa54 	bl	80001e4 <strlen>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	f107 030c 	add.w	r3, r7, #12
 8002d42:	2100      	movs	r1, #0
 8002d44:	4618      	mov	r0, r3
 8002d46:	f00b f89f 	bl	800de88 <memset>
		sprintf(msg_send,"{\"ID\":\"123456789\",\"PH\":\"%.2f\",\"TDS\":\"%.0f\",\"Temp\":\"%.2f\"}",PH,TDS,Temperature);
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <Handle_value_send+0x98>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fc0a 	bl	8000568 <__aeabi_f2d>
 8002d54:	4680      	mov	r8, r0
 8002d56:	4689      	mov	r9, r1
 8002d58:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <Handle_value_send+0x9c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fc03 	bl	8000568 <__aeabi_f2d>
 8002d62:	4604      	mov	r4, r0
 8002d64:	460d      	mov	r5, r1
 8002d66:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <Handle_value_send+0xa0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd fbfc 	bl	8000568 <__aeabi_f2d>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	f107 000c 	add.w	r0, r7, #12
 8002d78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d7c:	e9cd 4500 	strd	r4, r5, [sp]
 8002d80:	4642      	mov	r2, r8
 8002d82:	464b      	mov	r3, r9
 8002d84:	490f      	ldr	r1, [pc, #60]	; (8002dc4 <Handle_value_send+0xa4>)
 8002d86:	f00b ff07 	bl	800eb98 <siprintf>
		SD_save(msg_send);
 8002d8a:	f107 030c 	add.w	r3, r7, #12
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f001 f892 	bl	8003eb8 <SD_save>
		SEND_UART1(msg_send);
 8002d94:	f107 030c 	add.w	r3, r7, #12
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ffab 	bl	8002cf4 <SEND_UART1>
	}
	else if(tp == WifiConfig)
	{
		SEND_UART1("wificonfigmode");
	}
}
 8002d9e:	e005      	b.n	8002dac <Handle_value_send+0x8c>
	else if(tp == WifiConfig)
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d102      	bne.n	8002dac <Handle_value_send+0x8c>
		SEND_UART1("wificonfigmode");
 8002da6:	4808      	ldr	r0, [pc, #32]	; (8002dc8 <Handle_value_send+0xa8>)
 8002da8:	f7ff ffa4 	bl	8002cf4 <SEND_UART1>
}
 8002dac:	bf00      	nop
 8002dae:	3770      	adds	r7, #112	; 0x70
 8002db0:	46bd      	mov	sp, r7
 8002db2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002db6:	bf00      	nop
 8002db8:	2000058c 	.word	0x2000058c
 8002dbc:	20000588 	.word	0x20000588
 8002dc0:	20000590 	.word	0x20000590
 8002dc4:	08012940 	.word	0x08012940
 8002dc8:	0801297c 	.word	0x0801297c

08002dcc <PH_Calibration>:
uint16_t ADC_Value[2] = {0};
int ADC_PH_4 = 0, ADC_PH_7 = 0;
float 	ph_a_value = 0,ph_b_value = 0,tds_k_value = 0;

void PH_Calibration()
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
		//Ax+B = y => ADC_PH_4 - ADC_PH_7 = 640
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Value, 2);
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	492b      	ldr	r1, [pc, #172]	; (8002e80 <PH_Calibration+0xb4>)
 8002dd4:	482b      	ldr	r0, [pc, #172]	; (8002e84 <PH_Calibration+0xb8>)
 8002dd6:	f002 f9e5 	bl	80051a4 <HAL_ADC_Start_DMA>

	  if(ADC_Value[0] > 1540 && ADC_Value[0] < 2180)
 8002dda:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <PH_Calibration+0xb4>)
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	f240 6204 	movw	r2, #1540	; 0x604
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d911      	bls.n	8002e0a <PH_Calibration+0x3e>
 8002de6:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <PH_Calibration+0xb4>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	f640 0283 	movw	r2, #2179	; 0x883
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d80b      	bhi.n	8002e0a <PH_Calibration+0x3e>
	  {
		  ADC_PH_7 = ADC_Value[0];
 8002df2:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <PH_Calibration+0xb4>)
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <PH_Calibration+0xbc>)
 8002dfa:	601a      	str	r2, [r3, #0]
		  ADC_PH_4 = ADC_PH_7 + 640;
 8002dfc:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <PH_Calibration+0xbc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e04:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <PH_Calibration+0xc0>)
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	e016      	b.n	8002e38 <PH_Calibration+0x6c>
	    }
	    else if(ADC_Value[0] < 2820 && ADC_Value[0] > 2180)
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <PH_Calibration+0xb4>)
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	f640 3203 	movw	r2, #2819	; 0xb03
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d810      	bhi.n	8002e38 <PH_Calibration+0x6c>
 8002e16:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <PH_Calibration+0xb4>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	f640 0284 	movw	r2, #2180	; 0x884
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d90a      	bls.n	8002e38 <PH_Calibration+0x6c>
	    {
	    	ADC_PH_4 = ADC_Value[0];
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <PH_Calibration+0xb4>)
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <PH_Calibration+0xc0>)
 8002e2a:	601a      	str	r2, [r3, #0]
	    	ADC_PH_7 = ADC_PH_4 - 640;
 8002e2c:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <PH_Calibration+0xc0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8002e34:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <PH_Calibration+0xbc>)
 8002e36:	6013      	str	r3, [r2, #0]
	      }

	  ph_a_value = (float)(3/(float)(ADC_PH_7 - ADC_PH_4));
 8002e38:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <PH_Calibration+0xbc>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <PH_Calibration+0xc0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	ee07 3a90 	vmov	s15, r3
 8002e46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e4a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e52:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <PH_Calibration+0xc4>)
 8002e54:	edc3 7a00 	vstr	s15, [r3]
	  ph_b_value = (float)((4 - (ph_a_value*(float)ADC_PH_4)));
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <PH_Calibration+0xc0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	ee07 3a90 	vmov	s15, r3
 8002e60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e64:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <PH_Calibration+0xc4>)
 8002e66:	edd3 7a00 	vldr	s15, [r3]
 8002e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <PH_Calibration+0xc8>)
 8002e78:	edc3 7a00 	vstr	s15, [r3]

}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000de4 	.word	0x20000de4
 8002e84:	20000244 	.word	0x20000244
 8002e88:	20000dec 	.word	0x20000dec
 8002e8c:	20000de8 	.word	0x20000de8
 8002e90:	20000df0 	.word	0x20000df0
 8002e94:	20000df4 	.word	0x20000df4

08002e98 <PH_Calculator>:
float PH_Calculator(float A, float B, uint16_t adc)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002ea2:	edc7 0a02 	vstr	s1, [r7, #8]
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	80fb      	strh	r3, [r7, #6]
	return (float)(adc*A + B);
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ebc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <TDS_Calibration>:

void TDS_Calibration()
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Value, 2);
 8002ed8:	2202      	movs	r2, #2
 8002eda:	4909      	ldr	r1, [pc, #36]	; (8002f00 <TDS_Calibration+0x2c>)
 8002edc:	4809      	ldr	r0, [pc, #36]	; (8002f04 <TDS_Calibration+0x30>)
 8002ede:	f002 f961 	bl	80051a4 <HAL_ADC_Start_DMA>

	tds_k_value = (1000/(float)ADC_Value[1]);
 8002ee2:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <TDS_Calibration+0x2c>)
 8002ee4:	885b      	ldrh	r3, [r3, #2]
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002eee:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002f08 <TDS_Calibration+0x34>
 8002ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <TDS_Calibration+0x38>)
 8002ef8:	edc3 7a00 	vstr	s15, [r3]
}
 8002efc:	bf00      	nop
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000de4 	.word	0x20000de4
 8002f04:	20000244 	.word	0x20000244
 8002f08:	447a0000 	.word	0x447a0000
 8002f0c:	20000df8 	.word	0x20000df8

08002f10 <TDS_Calculator>:

float TDS_Calculator(float k, uint16_t adc)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	807b      	strh	r3, [r7, #2]
	return (float)(k*adc);
 8002f1e:	887b      	ldrh	r3, [r7, #2]
 8002f20:	ee07 3a90 	vmov	s15, r3
 8002f24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f28:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002f30:	eeb0 0a67 	vmov.f32	s0, s15
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <Save_SetPoint>:


/*=====================================Flash_Start=================================*/

void Save_SetPoint(Save_Flash_Type tp)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
	if(tp == flash_setpoint)
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d124      	bne.n	8002f9a <Save_SetPoint+0x5a>
	{
		W25qxx_EraseSector(1);
 8002f50:	2001      	movs	r0, #1
 8002f52:	f001 fdef 	bl	8004b34 <W25qxx_EraseSector>
		W25qxx_EraseSector(2);
 8002f56:	2002      	movs	r0, #2
 8002f58:	f001 fdec 	bl	8004b34 <W25qxx_EraseSector>
		W25qxx_EraseSector(3);
 8002f5c:	2003      	movs	r0, #3
 8002f5e:	f001 fde9 	bl	8004b34 <W25qxx_EraseSector>
		W25qxx_EraseSector(4);
 8002f62:	2004      	movs	r0, #4
 8002f64:	f001 fde6 	bl	8004b34 <W25qxx_EraseSector>
		W25qxx_WriteSector(&PH_SetPoint, 1, 0, 4);
 8002f68:	2304      	movs	r3, #4
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	481e      	ldr	r0, [pc, #120]	; (8002fe8 <Save_SetPoint+0xa8>)
 8002f70:	f001 fed2 	bl	8004d18 <W25qxx_WriteSector>
		W25qxx_WriteSector(&PH_THR_SetPoint, 2, 0, 4);
 8002f74:	2304      	movs	r3, #4
 8002f76:	2200      	movs	r2, #0
 8002f78:	2102      	movs	r1, #2
 8002f7a:	481c      	ldr	r0, [pc, #112]	; (8002fec <Save_SetPoint+0xac>)
 8002f7c:	f001 fecc 	bl	8004d18 <W25qxx_WriteSector>
		W25qxx_WriteSector(&TDS_SetPoint, 3, 0, 4);
 8002f80:	2304      	movs	r3, #4
 8002f82:	2200      	movs	r2, #0
 8002f84:	2103      	movs	r1, #3
 8002f86:	481a      	ldr	r0, [pc, #104]	; (8002ff0 <Save_SetPoint+0xb0>)
 8002f88:	f001 fec6 	bl	8004d18 <W25qxx_WriteSector>
		W25qxx_WriteSector(&TDS_THR_SetPoint, 4, 0, 4);
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2104      	movs	r1, #4
 8002f92:	4818      	ldr	r0, [pc, #96]	; (8002ff4 <Save_SetPoint+0xb4>)
 8002f94:	f001 fec0 	bl	8004d18 <W25qxx_WriteSector>
		W25qxx_EraseSector(7);
		W25qxx_WriteSector(&tds_k_value, 7, 0, 4);

	}

}
 8002f98:	e021      	b.n	8002fde <Save_SetPoint+0x9e>
	else if(tp ==flash_calibration_ph)
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d112      	bne.n	8002fc6 <Save_SetPoint+0x86>
		W25qxx_EraseSector(5);
 8002fa0:	2005      	movs	r0, #5
 8002fa2:	f001 fdc7 	bl	8004b34 <W25qxx_EraseSector>
		W25qxx_EraseSector(6);
 8002fa6:	2006      	movs	r0, #6
 8002fa8:	f001 fdc4 	bl	8004b34 <W25qxx_EraseSector>
		W25qxx_WriteSector(&ph_a_value, 5, 0, 4);
 8002fac:	2304      	movs	r3, #4
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2105      	movs	r1, #5
 8002fb2:	4811      	ldr	r0, [pc, #68]	; (8002ff8 <Save_SetPoint+0xb8>)
 8002fb4:	f001 feb0 	bl	8004d18 <W25qxx_WriteSector>
		W25qxx_WriteSector(&ph_b_value, 6, 0, 4);
 8002fb8:	2304      	movs	r3, #4
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2106      	movs	r1, #6
 8002fbe:	480f      	ldr	r0, [pc, #60]	; (8002ffc <Save_SetPoint+0xbc>)
 8002fc0:	f001 feaa 	bl	8004d18 <W25qxx_WriteSector>
}
 8002fc4:	e00b      	b.n	8002fde <Save_SetPoint+0x9e>
	else if (tp == flash_calibration_tds)
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d108      	bne.n	8002fde <Save_SetPoint+0x9e>
		W25qxx_EraseSector(7);
 8002fcc:	2007      	movs	r0, #7
 8002fce:	f001 fdb1 	bl	8004b34 <W25qxx_EraseSector>
		W25qxx_WriteSector(&tds_k_value, 7, 0, 4);
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2107      	movs	r1, #7
 8002fd8:	4809      	ldr	r0, [pc, #36]	; (8003000 <Save_SetPoint+0xc0>)
 8002fda:	f001 fe9d 	bl	8004d18 <W25qxx_WriteSector>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200005a0 	.word	0x200005a0
 8002fec:	2000059c 	.word	0x2000059c
 8002ff0:	20000594 	.word	0x20000594
 8002ff4:	20000598 	.word	0x20000598
 8002ff8:	20000df0 	.word	0x20000df0
 8002ffc:	20000df4 	.word	0x20000df4
 8003000:	20000df8 	.word	0x20000df8

08003004 <Read_SetPoint>:
void Read_SetPoint(Save_Flash_Type tp)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
	if(tp == flash_setpoint)
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d118      	bne.n	8003046 <Read_SetPoint+0x42>
	{
		W25qxx_ReadSector(&PH_SetPoint, 1, 0, 4);
 8003014:	2304      	movs	r3, #4
 8003016:	2200      	movs	r2, #0
 8003018:	2101      	movs	r1, #1
 800301a:	4819      	ldr	r0, [pc, #100]	; (8003080 <Read_SetPoint+0x7c>)
 800301c:	f001 ff5c 	bl	8004ed8 <W25qxx_ReadSector>
		W25qxx_ReadSector(&PH_THR_SetPoint, 2, 0, 4);
 8003020:	2304      	movs	r3, #4
 8003022:	2200      	movs	r2, #0
 8003024:	2102      	movs	r1, #2
 8003026:	4817      	ldr	r0, [pc, #92]	; (8003084 <Read_SetPoint+0x80>)
 8003028:	f001 ff56 	bl	8004ed8 <W25qxx_ReadSector>
		W25qxx_ReadSector(&TDS_SetPoint, 3, 0, 4);
 800302c:	2304      	movs	r3, #4
 800302e:	2200      	movs	r2, #0
 8003030:	2103      	movs	r1, #3
 8003032:	4815      	ldr	r0, [pc, #84]	; (8003088 <Read_SetPoint+0x84>)
 8003034:	f001 ff50 	bl	8004ed8 <W25qxx_ReadSector>
		W25qxx_ReadSector(&TDS_THR_SetPoint, 4, 0, 4);
 8003038:	2304      	movs	r3, #4
 800303a:	2200      	movs	r2, #0
 800303c:	2104      	movs	r1, #4
 800303e:	4813      	ldr	r0, [pc, #76]	; (800308c <Read_SetPoint+0x88>)
 8003040:	f001 ff4a 	bl	8004ed8 <W25qxx_ReadSector>
	}
	else if (tp == flash_calibration_tds)
	{
		W25qxx_ReadSector(&tds_k_value, 7, 0, 4);
	}
}
 8003044:	e018      	b.n	8003078 <Read_SetPoint+0x74>
	else if(tp == flash_calibration_ph)
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d10c      	bne.n	8003066 <Read_SetPoint+0x62>
		W25qxx_ReadSector(&ph_a_value, 5, 0, 4);
 800304c:	2304      	movs	r3, #4
 800304e:	2200      	movs	r2, #0
 8003050:	2105      	movs	r1, #5
 8003052:	480f      	ldr	r0, [pc, #60]	; (8003090 <Read_SetPoint+0x8c>)
 8003054:	f001 ff40 	bl	8004ed8 <W25qxx_ReadSector>
		W25qxx_ReadSector(&ph_b_value, 6, 0, 4);
 8003058:	2304      	movs	r3, #4
 800305a:	2200      	movs	r2, #0
 800305c:	2106      	movs	r1, #6
 800305e:	480d      	ldr	r0, [pc, #52]	; (8003094 <Read_SetPoint+0x90>)
 8003060:	f001 ff3a 	bl	8004ed8 <W25qxx_ReadSector>
}
 8003064:	e008      	b.n	8003078 <Read_SetPoint+0x74>
	else if (tp == flash_calibration_tds)
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d105      	bne.n	8003078 <Read_SetPoint+0x74>
		W25qxx_ReadSector(&tds_k_value, 7, 0, 4);
 800306c:	2304      	movs	r3, #4
 800306e:	2200      	movs	r2, #0
 8003070:	2107      	movs	r1, #7
 8003072:	4809      	ldr	r0, [pc, #36]	; (8003098 <Read_SetPoint+0x94>)
 8003074:	f001 ff30 	bl	8004ed8 <W25qxx_ReadSector>
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	200005a0 	.word	0x200005a0
 8003084:	2000059c 	.word	0x2000059c
 8003088:	20000594 	.word	0x20000594
 800308c:	20000598 	.word	0x20000598
 8003090:	20000df0 	.word	0x20000df0
 8003094:	20000df4 	.word	0x20000df4
 8003098:	20000df8 	.word	0x20000df8

0800309c <Set_Pin_Output>:
uint16_t TEMP;
#define DS18B20_PORT Temperature_Pin_GPIO_Port
#define DS18B20_PIN Temperature_Pin_Pin

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 030c 	add.w	r3, r7, #12
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80030b8:	887b      	ldrh	r3, [r7, #2]
 80030ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030bc:	2301      	movs	r3, #1
 80030be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80030c4:	f107 030c 	add.w	r3, r7, #12
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f003 f94c 	bl	8006368 <HAL_GPIO_Init>
}
 80030d0:	bf00      	nop
 80030d2:	3720      	adds	r7, #32
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <Set_Pin_Input>:
void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	f107 030c 	add.w	r3, r7, #12
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80030f4:	887b      	ldrh	r3, [r7, #2]
 80030f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030fc:	2301      	movs	r3, #1
 80030fe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003100:	f107 030c 	add.w	r3, r7, #12
 8003104:	4619      	mov	r1, r3
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f003 f92e 	bl	8006368 <HAL_GPIO_Init>
}
 800310c:	bf00      	nop
 800310e:	3720      	adds	r7, #32
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 800311e:	2104      	movs	r1, #4
 8003120:	4813      	ldr	r0, [pc, #76]	; (8003170 <DS18B20_Start+0x5c>)
 8003122:	f7ff ffbb 	bl	800309c <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 8003126:	2200      	movs	r2, #0
 8003128:	2104      	movs	r1, #4
 800312a:	4811      	ldr	r0, [pc, #68]	; (8003170 <DS18B20_Start+0x5c>)
 800312c:	f003 fad0 	bl	80066d0 <HAL_GPIO_WritePin>
	delay_us(480);   // delay according to datasheet
 8003130:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003134:	f7ff fd76 	bl	8002c24 <delay_us>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8003138:	2104      	movs	r1, #4
 800313a:	480d      	ldr	r0, [pc, #52]	; (8003170 <DS18B20_Start+0x5c>)
 800313c:	f7ff ffcc 	bl	80030d8 <Set_Pin_Input>
	delay_us(80);    // delay according to datasheet
 8003140:	2050      	movs	r0, #80	; 0x50
 8003142:	f7ff fd6f 	bl	8002c24 <delay_us>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8003146:	2104      	movs	r1, #4
 8003148:	4809      	ldr	r0, [pc, #36]	; (8003170 <DS18B20_Start+0x5c>)
 800314a:	f003 faa9 	bl	80066a0 <HAL_GPIO_ReadPin>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d102      	bne.n	800315a <DS18B20_Start+0x46>
 8003154:	2301      	movs	r3, #1
 8003156:	71fb      	strb	r3, [r7, #7]
 8003158:	e001      	b.n	800315e <DS18B20_Start+0x4a>
	else Response = -1;
 800315a:	23ff      	movs	r3, #255	; 0xff
 800315c:	71fb      	strb	r3, [r7, #7]

	delay_us(400); // 480 us delay totally.
 800315e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003162:	f7ff fd5f 	bl	8002c24 <delay_us>

	return Response;
 8003166:	79fb      	ldrb	r3, [r7, #7]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40020000 	.word	0x40020000

08003174 <DS18B20_Write>:


void DS18B20_Write (uint8_t data)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800317e:	2104      	movs	r1, #4
 8003180:	481e      	ldr	r0, [pc, #120]	; (80031fc <DS18B20_Write+0x88>)
 8003182:	f7ff ff8b 	bl	800309c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e02e      	b.n	80031ea <DS18B20_Write+0x76>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 800318c:	79fa      	ldrb	r2, [r7, #7]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	fa42 f303 	asr.w	r3, r2, r3
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d013      	beq.n	80031c4 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800319c:	2104      	movs	r1, #4
 800319e:	4817      	ldr	r0, [pc, #92]	; (80031fc <DS18B20_Write+0x88>)
 80031a0:	f7ff ff7c 	bl	800309c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80031a4:	2200      	movs	r2, #0
 80031a6:	2104      	movs	r1, #4
 80031a8:	4814      	ldr	r0, [pc, #80]	; (80031fc <DS18B20_Write+0x88>)
 80031aa:	f003 fa91 	bl	80066d0 <HAL_GPIO_WritePin>
			delay_us(1);  // wait for 1 us
 80031ae:	2001      	movs	r0, #1
 80031b0:	f7ff fd38 	bl	8002c24 <delay_us>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80031b4:	2104      	movs	r1, #4
 80031b6:	4811      	ldr	r0, [pc, #68]	; (80031fc <DS18B20_Write+0x88>)
 80031b8:	f7ff ff8e 	bl	80030d8 <Set_Pin_Input>
			delay_us(50);  // wait for 60 us
 80031bc:	2032      	movs	r0, #50	; 0x32
 80031be:	f7ff fd31 	bl	8002c24 <delay_us>
 80031c2:	e00f      	b.n	80031e4 <DS18B20_Write+0x70>
		}

		else  // if the bit is low
		{
			// write 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 80031c4:	2104      	movs	r1, #4
 80031c6:	480d      	ldr	r0, [pc, #52]	; (80031fc <DS18B20_Write+0x88>)
 80031c8:	f7ff ff68 	bl	800309c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80031cc:	2200      	movs	r2, #0
 80031ce:	2104      	movs	r1, #4
 80031d0:	480a      	ldr	r0, [pc, #40]	; (80031fc <DS18B20_Write+0x88>)
 80031d2:	f003 fa7d 	bl	80066d0 <HAL_GPIO_WritePin>
			delay_us(50);  // wait for 60 us
 80031d6:	2032      	movs	r0, #50	; 0x32
 80031d8:	f7ff fd24 	bl	8002c24 <delay_us>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80031dc:	2104      	movs	r1, #4
 80031de:	4807      	ldr	r0, [pc, #28]	; (80031fc <DS18B20_Write+0x88>)
 80031e0:	f7ff ff7a 	bl	80030d8 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3301      	adds	r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b07      	cmp	r3, #7
 80031ee:	ddcd      	ble.n	800318c <DS18B20_Write+0x18>
		}
	}
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40020000 	.word	0x40020000

08003200 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8003206:	2300      	movs	r3, #0
 8003208:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 800320a:	2104      	movs	r1, #4
 800320c:	481a      	ldr	r0, [pc, #104]	; (8003278 <DS18B20_Read+0x78>)
 800320e:	f7ff ff63 	bl	80030d8 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8003212:	2300      	movs	r3, #0
 8003214:	603b      	str	r3, [r7, #0]
 8003216:	e026      	b.n	8003266 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8003218:	2104      	movs	r1, #4
 800321a:	4817      	ldr	r0, [pc, #92]	; (8003278 <DS18B20_Read+0x78>)
 800321c:	f7ff ff3e 	bl	800309c <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 8003220:	2200      	movs	r2, #0
 8003222:	2104      	movs	r1, #4
 8003224:	4814      	ldr	r0, [pc, #80]	; (8003278 <DS18B20_Read+0x78>)
 8003226:	f003 fa53 	bl	80066d0 <HAL_GPIO_WritePin>
		delay_us(1);  // wait for > 1us
 800322a:	2001      	movs	r0, #1
 800322c:	f7ff fcfa 	bl	8002c24 <delay_us>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8003230:	2104      	movs	r1, #4
 8003232:	4811      	ldr	r0, [pc, #68]	; (8003278 <DS18B20_Read+0x78>)
 8003234:	f7ff ff50 	bl	80030d8 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8003238:	2104      	movs	r1, #4
 800323a:	480f      	ldr	r0, [pc, #60]	; (8003278 <DS18B20_Read+0x78>)
 800323c:	f003 fa30 	bl	80066a0 <HAL_GPIO_ReadPin>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 8003246:	2201      	movs	r2, #1
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	b25a      	sxtb	r2, r3
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	4313      	orrs	r3, r2
 8003256:	b25b      	sxtb	r3, r3
 8003258:	71fb      	strb	r3, [r7, #7]
		}
		delay_us(50);  // wait for 60 us
 800325a:	2032      	movs	r0, #50	; 0x32
 800325c:	f7ff fce2 	bl	8002c24 <delay_us>
	for (int i=0;i<8;i++)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	3301      	adds	r3, #1
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b07      	cmp	r3, #7
 800326a:	ddd5      	ble.n	8003218 <DS18B20_Read+0x18>
	}
	return value;
 800326c:	79fb      	ldrb	r3, [r7, #7]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40020000 	.word	0x40020000

0800327c <Get_Temperature_DS18B20>:

float Get_Temperature_DS18B20()
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
		  DS18B20_Start ();
 8003280:	f7ff ff48 	bl	8003114 <DS18B20_Start>
		  HAL_Delay(1);
 8003284:	2001      	movs	r0, #1
 8003286:	f001 ff25 	bl	80050d4 <HAL_Delay>
		  DS18B20_Write (0xCC);  // skip ROM
 800328a:	20cc      	movs	r0, #204	; 0xcc
 800328c:	f7ff ff72 	bl	8003174 <DS18B20_Write>
		  DS18B20_Write (0x44);  // convert t
 8003290:	2044      	movs	r0, #68	; 0x44
 8003292:	f7ff ff6f 	bl	8003174 <DS18B20_Write>
		  HAL_Delay (800);
 8003296:	f44f 7048 	mov.w	r0, #800	; 0x320
 800329a:	f001 ff1b 	bl	80050d4 <HAL_Delay>

		  DS18B20_Start ();
 800329e:	f7ff ff39 	bl	8003114 <DS18B20_Start>
	      HAL_Delay(1);
 80032a2:	2001      	movs	r0, #1
 80032a4:	f001 ff16 	bl	80050d4 <HAL_Delay>
	      DS18B20_Write (0xCC);  // skip ROM
 80032a8:	20cc      	movs	r0, #204	; 0xcc
 80032aa:	f7ff ff63 	bl	8003174 <DS18B20_Write>
	      DS18B20_Write (0xBE);  // Read Scratch-pad
 80032ae:	20be      	movs	r0, #190	; 0xbe
 80032b0:	f7ff ff60 	bl	8003174 <DS18B20_Write>
	      Temp_byte1 = DS18B20_Read();
 80032b4:	f7ff ffa4 	bl	8003200 <DS18B20_Read>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <Get_Temperature_DS18B20+0x88>)
 80032be:	701a      	strb	r2, [r3, #0]
		  Temp_byte2 = DS18B20_Read();
 80032c0:	f7ff ff9e 	bl	8003200 <DS18B20_Read>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <Get_Temperature_DS18B20+0x8c>)
 80032ca:	701a      	strb	r2, [r3, #0]
		  TEMP = (Temp_byte2<<8)|Temp_byte1;
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <Get_Temperature_DS18B20+0x8c>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	b21a      	sxth	r2, r3
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <Get_Temperature_DS18B20+0x88>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	b21b      	sxth	r3, r3
 80032da:	4313      	orrs	r3, r2
 80032dc:	b21b      	sxth	r3, r3
 80032de:	b29a      	uxth	r2, r3
 80032e0:	4b0a      	ldr	r3, [pc, #40]	; (800330c <Get_Temperature_DS18B20+0x90>)
 80032e2:	801a      	strh	r2, [r3, #0]
		  return (float)TEMP/16;
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <Get_Temperature_DS18B20+0x90>)
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	ee07 3a90 	vmov	s15, r3
 80032ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80032f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80032f8:	eef0 7a66 	vmov.f32	s15, s13
}
 80032fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000dfc 	.word	0x20000dfc
 8003308:	20000dfd 	.word	0x20000dfd
 800330c:	20000dfe 	.word	0x20000dfe

08003310 <TDS_Control>:
/*=====================================DS18B20_End=================================*/

/*=====================================Interrupt_Start=========================*/

void TDS_Control()
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
	   uint32_t i = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	607b      	str	r3, [r7, #4]
	   if((time_tds%6) == 0)
 800331a:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <TDS_Control+0xa0>)
 800331c:	881a      	ldrh	r2, [r3, #0]
 800331e:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <TDS_Control+0xa4>)
 8003320:	fba3 1302 	umull	r1, r3, r3, r2
 8003324:	0899      	lsrs	r1, r3, #2
 8003326:	460b      	mov	r3, r1
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	440b      	add	r3, r1
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d132      	bne.n	800339c <TDS_Control+0x8c>
	   {
		   if(TDS < (TDS_SetPoint-TDS_THR_SetPoint))
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <TDS_Control+0xa8>)
 8003338:	ed93 7a00 	vldr	s14, [r3]
 800333c:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <TDS_Control+0xac>)
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003346:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <TDS_Control+0xb0>)
 8003348:	edd3 7a00 	vldr	s15, [r3]
 800334c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003354:	dd1f      	ble.n	8003396 <TDS_Control+0x86>
		   {
			   HAL_GPIO_WritePin(NutriA_GPIO_Port,NutriA_Pin, GPIO_PIN_RESET);
 8003356:	2200      	movs	r2, #0
 8003358:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800335c:	4819      	ldr	r0, [pc, #100]	; (80033c4 <TDS_Control+0xb4>)
 800335e:	f003 f9b7 	bl	80066d0 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(NutriB_GPIO_Port,NutriB_Pin, GPIO_PIN_RESET);
 8003362:	2200      	movs	r2, #0
 8003364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003368:	4816      	ldr	r0, [pc, #88]	; (80033c4 <TDS_Control+0xb4>)
 800336a:	f003 f9b1 	bl	80066d0 <HAL_GPIO_WritePin>
			   while(i<14000000)
 800336e:	e002      	b.n	8003376 <TDS_Control+0x66>
			   {
				   i++;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3301      	adds	r3, #1
 8003374:	607b      	str	r3, [r7, #4]
			   while(i<14000000)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a13      	ldr	r2, [pc, #76]	; (80033c8 <TDS_Control+0xb8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d3f8      	bcc.n	8003370 <TDS_Control+0x60>
			   }

			   HAL_GPIO_WritePin(NutriA_GPIO_Port,NutriA_Pin, GPIO_PIN_SET);
 800337e:	2201      	movs	r2, #1
 8003380:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003384:	480f      	ldr	r0, [pc, #60]	; (80033c4 <TDS_Control+0xb4>)
 8003386:	f003 f9a3 	bl	80066d0 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(NutriB_GPIO_Port,NutriB_Pin, GPIO_PIN_SET);
 800338a:	2201      	movs	r2, #1
 800338c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003390:	480c      	ldr	r0, [pc, #48]	; (80033c4 <TDS_Control+0xb4>)
 8003392:	f003 f99d 	bl	80066d0 <HAL_GPIO_WritePin>
		   }

		   time_tds = 1;
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <TDS_Control+0xa0>)
 8003398:	2201      	movs	r2, #1
 800339a:	801a      	strh	r2, [r3, #0]
	   }
	   time_tds++;
 800339c:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <TDS_Control+0xa0>)
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	3301      	adds	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	4b02      	ldr	r3, [pc, #8]	; (80033b0 <TDS_Control+0xa0>)
 80033a6:	801a      	strh	r2, [r3, #0]
}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000584 	.word	0x20000584
 80033b4:	aaaaaaab 	.word	0xaaaaaaab
 80033b8:	20000594 	.word	0x20000594
 80033bc:	20000598 	.word	0x20000598
 80033c0:	20000588 	.word	0x20000588
 80033c4:	40020c00 	.word	0x40020c00
 80033c8:	00d59f80 	.word	0x00d59f80

080033cc <PH_Control>:

void PH_Control()
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
	   uint32_t i = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]
	   if((time_ph%6) == 0)
 80033d6:	4b32      	ldr	r3, [pc, #200]	; (80034a0 <PH_Control+0xd4>)
 80033d8:	881a      	ldrh	r2, [r3, #0]
 80033da:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <PH_Control+0xd8>)
 80033dc:	fba3 1302 	umull	r1, r3, r3, r2
 80033e0:	0899      	lsrs	r1, r3, #2
 80033e2:	460b      	mov	r3, r1
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	440b      	add	r3, r1
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d14b      	bne.n	800348a <PH_Control+0xbe>
	   {
		   if(PH < (PH_SetPoint-PH_THR_SetPoint))
 80033f2:	4b2d      	ldr	r3, [pc, #180]	; (80034a8 <PH_Control+0xdc>)
 80033f4:	ed93 7a00 	vldr	s14, [r3]
 80033f8:	4b2c      	ldr	r3, [pc, #176]	; (80034ac <PH_Control+0xe0>)
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003402:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <PH_Control+0xe4>)
 8003404:	edd3 7a00 	vldr	s15, [r3]
 8003408:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800340c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003410:	dd14      	ble.n	800343c <PH_Control+0x70>
		   {
			   HAL_GPIO_WritePin(BASE_GPIO_Port,BASE_Pin, GPIO_PIN_RESET);
 8003412:	2200      	movs	r2, #0
 8003414:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003418:	4826      	ldr	r0, [pc, #152]	; (80034b4 <PH_Control+0xe8>)
 800341a:	f003 f959 	bl	80066d0 <HAL_GPIO_WritePin>
			   while(i<14000000)
 800341e:	e002      	b.n	8003426 <PH_Control+0x5a>
			   {
				   i++;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3301      	adds	r3, #1
 8003424:	607b      	str	r3, [r7, #4]
			   while(i<14000000)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a23      	ldr	r2, [pc, #140]	; (80034b8 <PH_Control+0xec>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d3f8      	bcc.n	8003420 <PH_Control+0x54>
			   }
			   HAL_GPIO_WritePin(BASE_GPIO_Port,BASE_Pin, GPIO_PIN_SET);
 800342e:	2201      	movs	r2, #1
 8003430:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003434:	481f      	ldr	r0, [pc, #124]	; (80034b4 <PH_Control+0xe8>)
 8003436:	f003 f94b 	bl	80066d0 <HAL_GPIO_WritePin>
 800343a:	e023      	b.n	8003484 <PH_Control+0xb8>
		   }
		   else if(PH > (PH_SetPoint + PH_THR_SetPoint))
 800343c:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <PH_Control+0xdc>)
 800343e:	ed93 7a00 	vldr	s14, [r3]
 8003442:	4b1a      	ldr	r3, [pc, #104]	; (80034ac <PH_Control+0xe0>)
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800344c:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <PH_Control+0xe4>)
 800344e:	edd3 7a00 	vldr	s15, [r3]
 8003452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345a:	d513      	bpl.n	8003484 <PH_Control+0xb8>
		   {
			   HAL_GPIO_WritePin(ACID_GPIO_Port,ACID_Pin, GPIO_PIN_RESET);
 800345c:	2200      	movs	r2, #0
 800345e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003462:	4814      	ldr	r0, [pc, #80]	; (80034b4 <PH_Control+0xe8>)
 8003464:	f003 f934 	bl	80066d0 <HAL_GPIO_WritePin>
			   while(i<14000000)
 8003468:	e002      	b.n	8003470 <PH_Control+0xa4>
			   {
				   i++;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3301      	adds	r3, #1
 800346e:	607b      	str	r3, [r7, #4]
			   while(i<14000000)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a11      	ldr	r2, [pc, #68]	; (80034b8 <PH_Control+0xec>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d3f8      	bcc.n	800346a <PH_Control+0x9e>
			   }
			   HAL_GPIO_WritePin(ACID_GPIO_Port,ACID_Pin, GPIO_PIN_SET);
 8003478:	2201      	movs	r2, #1
 800347a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800347e:	480d      	ldr	r0, [pc, #52]	; (80034b4 <PH_Control+0xe8>)
 8003480:	f003 f926 	bl	80066d0 <HAL_GPIO_WritePin>
		   }
		   time_ph = 1;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <PH_Control+0xd4>)
 8003486:	2201      	movs	r2, #1
 8003488:	801a      	strh	r2, [r3, #0]
	   }
	   time_ph++;
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <PH_Control+0xd4>)
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	3301      	adds	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <PH_Control+0xd4>)
 8003494:	801a      	strh	r2, [r3, #0]
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000586 	.word	0x20000586
 80034a4:	aaaaaaab 	.word	0xaaaaaaab
 80034a8:	200005a0 	.word	0x200005a0
 80034ac:	2000059c 	.word	0x2000059c
 80034b0:	2000058c 	.word	0x2000058c
 80034b4:	40020c00 	.word	0x40020c00
 80034b8:	00d59f80 	.word	0x00d59f80

080034bc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

	 if(htim->Instance == htim4.Instance)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d10a      	bne.n	80034e6 <HAL_TIM_PeriodElapsedCallback+0x2a>
	 {
	   HAL_GPIO_TogglePin(test_pin_GPIO_Port,test_pin_Pin);
 80034d0:	2140      	movs	r1, #64	; 0x40
 80034d2:	4808      	ldr	r0, [pc, #32]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80034d4:	f003 f915 	bl	8006702 <HAL_GPIO_TogglePin>
	   Handle_value_send(Value);
 80034d8:	2000      	movs	r0, #0
 80034da:	f7ff fc21 	bl	8002d20 <Handle_value_send>
	   TDS_Control();
 80034de:	f7ff ff17 	bl	8003310 <TDS_Control>
	   PH_Control();
 80034e2:	f7ff ff73 	bl	80033cc <PH_Control>

	 }
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000450 	.word	0x20000450
 80034f4:	40020000 	.word	0x40020000

080034f8 <Wifi_Config>:
/*=====================================Interrupt_End=========================*/

/*=====================================WIFI_CONFIG_Start=========================*/
void Wifi_Config()
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
	Handle_value_send(WifiConfig);
 80034fc:	2002      	movs	r0, #2
 80034fe:	f7ff fc0f 	bl	8002d20 <Handle_value_send>
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800350e:	f001 fd6f 	bl	8004ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003512:	f000 f8b5 	bl	8003680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003516:	f000 fb37 	bl	8003b88 <MX_GPIO_Init>
  MX_DMA_Init();
 800351a:	f000 fb0d 	bl	8003b38 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800351e:	f000 fae1 	bl	8003ae4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8003522:	f007 fa4b 	bl	800a9bc <MX_FATFS_Init>
  MX_ADC1_Init();
 8003526:	f000 f915 	bl	8003754 <MX_ADC1_Init>
  MX_I2C1_Init();
 800352a:	f000 f975 	bl	8003818 <MX_I2C1_Init>
  MX_TIM4_Init();
 800352e:	f000 fa55 	bl	80039dc <MX_TIM4_Init>
  MX_IWDG_Init();
 8003532:	f000 f9cd 	bl	80038d0 <MX_IWDG_Init>
  MX_TIM6_Init();
 8003536:	f000 fa9f 	bl	8003a78 <MX_TIM6_Init>
  MX_SPI2_Init();
 800353a:	f000 fa19 	bl	8003970 <MX_SPI2_Init>
  MX_SPI1_Init();
 800353e:	f000 f9e1 	bl	8003904 <MX_SPI1_Init>
  MX_I2C3_Init();
 8003542:	f000 f997 	bl	8003874 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
 //=========================================================================  TESTING


 //=========================================================================  CONFIG_MAIN
  HAL_TIM_Base_Start_IT(&htim4);
 8003546:	483e      	ldr	r0, [pc, #248]	; (8003640 <main+0x138>)
 8003548:	f005 fba4 	bl	8008c94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 800354c:	483d      	ldr	r0, [pc, #244]	; (8003644 <main+0x13c>)
 800354e:	f005 fb39 	bl	8008bc4 <HAL_TIM_Base_Start>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1,UART1_TEMPBUFFER,SIZEOF_COMMAND);
 8003552:	223c      	movs	r2, #60	; 0x3c
 8003554:	493c      	ldr	r1, [pc, #240]	; (8003648 <main+0x140>)
 8003556:	483d      	ldr	r0, [pc, #244]	; (800364c <main+0x144>)
 8003558:	f006 f8db 	bl	8009712 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 800355c:	4b3c      	ldr	r3, [pc, #240]	; (8003650 <main+0x148>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <main+0x148>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0208 	bic.w	r2, r2, #8
 800356a:	601a      	str	r2, [r3, #0]

  for(int i =0;i<5;i++)
 800356c:	2300      	movs	r3, #0
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	e009      	b.n	8003586 <main+0x7e>
  {
	  HAL_GPIO_TogglePin(test_pin_GPIO_Port,test_pin_Pin);
 8003572:	2140      	movs	r1, #64	; 0x40
 8003574:	4837      	ldr	r0, [pc, #220]	; (8003654 <main+0x14c>)
 8003576:	f003 f8c4 	bl	8006702 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 800357a:	20c8      	movs	r0, #200	; 0xc8
 800357c:	f001 fdaa 	bl	80050d4 <HAL_Delay>
  for(int i =0;i<5;i++)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3301      	adds	r3, #1
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b04      	cmp	r3, #4
 800358a:	ddf2      	ble.n	8003572 <main+0x6a>
  }
  //HAL_Delay(50);
  lcd_init();
 800358c:	f7fe fb6f 	bl	8001c6e <lcd_init>
  Rotary_init();
 8003590:	f7fe fbc0 	bl	8001d14 <Rotary_init>
  lcd_clear();
 8003594:	f7fe fb54 	bl	8001c40 <lcd_clear>
  W25qxx_Init();
 8003598:	f001 f9fa 	bl	8004990 <W25qxx_Init>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_Value, 2);
 800359c:	2202      	movs	r2, #2
 800359e:	492e      	ldr	r1, [pc, #184]	; (8003658 <main+0x150>)
 80035a0:	482e      	ldr	r0, [pc, #184]	; (800365c <main+0x154>)
 80035a2:	f001 fdff 	bl	80051a4 <HAL_ADC_Start_DMA>
  Read_SetPoint(flash_setpoint);
 80035a6:	2000      	movs	r0, #0
 80035a8:	f7ff fd2c 	bl	8003004 <Read_SetPoint>
  Read_SetPoint(flash_calibration_tds);
 80035ac:	2002      	movs	r0, #2
 80035ae:	f7ff fd29 	bl	8003004 <Read_SetPoint>
  Read_SetPoint(flash_calibration_ph);
 80035b2:	2001      	movs	r0, #1
 80035b4:	f7ff fd26 	bl	8003004 <Read_SetPoint>
  SD_Handling(SD_Read);
 80035b8:	4829      	ldr	r0, [pc, #164]	; (8003660 <main+0x158>)
 80035ba:	f000 fbb5 	bl	8003d28 <SD_Handling>
//  DS1307_config();
//  DS1307_settime(0, 18, 12, 7, 18, 3, 2023);

  uint32_t time_read = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	603b      	str	r3, [r7, #0]
  while (1)
  {
	  //=========================================================================  TESTING

	  //=========================================================================  CONFIG_MAIN
	  LCD_Display();
 80035c2:	f7fe ff81 	bl	80024c8 <LCD_Display>
	  if(time_read == 100)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b64      	cmp	r3, #100	; 0x64
 80035ca:	d130      	bne.n	800362e <main+0x126>
	  {
		  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_Value, 2);
 80035cc:	2202      	movs	r2, #2
 80035ce:	4922      	ldr	r1, [pc, #136]	; (8003658 <main+0x150>)
 80035d0:	4822      	ldr	r0, [pc, #136]	; (800365c <main+0x154>)
 80035d2:	f001 fde7 	bl	80051a4 <HAL_ADC_Start_DMA>
		  PH = PH_Calculator(ph_a_value, ph_b_value, ADC_Value[0]);
 80035d6:	4b23      	ldr	r3, [pc, #140]	; (8003664 <main+0x15c>)
 80035d8:	edd3 7a00 	vldr	s15, [r3]
 80035dc:	4b22      	ldr	r3, [pc, #136]	; (8003668 <main+0x160>)
 80035de:	ed93 7a00 	vldr	s14, [r3]
 80035e2:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <main+0x150>)
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	eef0 0a47 	vmov.f32	s1, s14
 80035ec:	eeb0 0a67 	vmov.f32	s0, s15
 80035f0:	f7ff fc52 	bl	8002e98 <PH_Calculator>
 80035f4:	eef0 7a40 	vmov.f32	s15, s0
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <main+0x164>)
 80035fa:	edc3 7a00 	vstr	s15, [r3]
		  TDS = TDS_Calculator(tds_k_value, ADC_Value[1]);
 80035fe:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <main+0x168>)
 8003600:	edd3 7a00 	vldr	s15, [r3]
 8003604:	4b14      	ldr	r3, [pc, #80]	; (8003658 <main+0x150>)
 8003606:	885b      	ldrh	r3, [r3, #2]
 8003608:	4618      	mov	r0, r3
 800360a:	eeb0 0a67 	vmov.f32	s0, s15
 800360e:	f7ff fc7f 	bl	8002f10 <TDS_Calculator>
 8003612:	eef0 7a40 	vmov.f32	s15, s0
 8003616:	4b17      	ldr	r3, [pc, #92]	; (8003674 <main+0x16c>)
 8003618:	edc3 7a00 	vstr	s15, [r3]
		  Temperature = Get_Temperature_DS18B20();
 800361c:	f7ff fe2e 	bl	800327c <Get_Temperature_DS18B20>
 8003620:	eef0 7a40 	vmov.f32	s15, s0
 8003624:	4b14      	ldr	r3, [pc, #80]	; (8003678 <main+0x170>)
 8003626:	edc3 7a00 	vstr	s15, [r3]
		  time_read = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	603b      	str	r3, [r7, #0]
	  }
	  DS1307_gettime();
 800362e:	f7fd fd5f 	bl	80010f0 <DS1307_gettime>
	  time_read++;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	3301      	adds	r3, #1
 8003636:	603b      	str	r3, [r7, #0]
	  HAL_IWDG_Refresh(&hiwdg);
 8003638:	4810      	ldr	r0, [pc, #64]	; (800367c <main+0x174>)
 800363a:	f004 f854 	bl	80076e6 <HAL_IWDG_Refresh>
	  LCD_Display();
 800363e:	e7c0      	b.n	80035c2 <main+0xba>
 8003640:	20000450 	.word	0x20000450
 8003644:	20000498 	.word	0x20000498
 8003648:	200009a8 	.word	0x200009a8
 800364c:	200004e0 	.word	0x200004e0
 8003650:	20000524 	.word	0x20000524
 8003654:	40020000 	.word	0x40020000
 8003658:	20000de4 	.word	0x20000de4
 800365c:	20000244 	.word	0x20000244
 8003660:	200005a8 	.word	0x200005a8
 8003664:	20000df0 	.word	0x20000df0
 8003668:	20000df4 	.word	0x20000df4
 800366c:	2000058c 	.word	0x2000058c
 8003670:	20000df8 	.word	0x20000df8
 8003674:	20000588 	.word	0x20000588
 8003678:	20000590 	.word	0x20000590
 800367c:	20000394 	.word	0x20000394

08003680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b094      	sub	sp, #80	; 0x50
 8003684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003686:	f107 0320 	add.w	r3, r7, #32
 800368a:	2230      	movs	r2, #48	; 0x30
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f00a fbfa 	bl	800de88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003694:	f107 030c 	add.w	r3, r7, #12
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]
 80036a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036a4:	2300      	movs	r3, #0
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	4b28      	ldr	r3, [pc, #160]	; (800374c <SystemClock_Config+0xcc>)
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	4a27      	ldr	r2, [pc, #156]	; (800374c <SystemClock_Config+0xcc>)
 80036ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b2:	6413      	str	r3, [r2, #64]	; 0x40
 80036b4:	4b25      	ldr	r3, [pc, #148]	; (800374c <SystemClock_Config+0xcc>)
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036c0:	2300      	movs	r3, #0
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	4b22      	ldr	r3, [pc, #136]	; (8003750 <SystemClock_Config+0xd0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a21      	ldr	r2, [pc, #132]	; (8003750 <SystemClock_Config+0xd0>)
 80036ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <SystemClock_Config+0xd0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d8:	607b      	str	r3, [r7, #4]
 80036da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80036dc:	230a      	movs	r3, #10
 80036de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036e0:	2301      	movs	r3, #1
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036e4:	2310      	movs	r3, #16
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80036e8:	2301      	movs	r3, #1
 80036ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036ec:	2302      	movs	r3, #2
 80036ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036f0:	2300      	movs	r3, #0
 80036f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80036f4:	2308      	movs	r3, #8
 80036f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80036f8:	2348      	movs	r3, #72	; 0x48
 80036fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036fc:	2302      	movs	r3, #2
 80036fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003700:	2304      	movs	r3, #4
 8003702:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003704:	f107 0320 	add.w	r3, r7, #32
 8003708:	4618      	mov	r0, r3
 800370a:	f003 fffd 	bl	8007708 <HAL_RCC_OscConfig>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003714:	f000 fb02 	bl	8003d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003718:	230f      	movs	r3, #15
 800371a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800371c:	2302      	movs	r3, #2
 800371e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800372e:	f107 030c 	add.w	r3, r7, #12
 8003732:	2102      	movs	r1, #2
 8003734:	4618      	mov	r0, r3
 8003736:	f004 fa5f 	bl	8007bf8 <HAL_RCC_ClockConfig>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003740:	f000 faec 	bl	8003d1c <Error_Handler>
  }
}
 8003744:	bf00      	nop
 8003746:	3750      	adds	r7, #80	; 0x50
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40023800 	.word	0x40023800
 8003750:	40007000 	.word	0x40007000

08003754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800375a:	463b      	mov	r3, r7
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003766:	4b29      	ldr	r3, [pc, #164]	; (800380c <MX_ADC1_Init+0xb8>)
 8003768:	4a29      	ldr	r2, [pc, #164]	; (8003810 <MX_ADC1_Init+0xbc>)
 800376a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800376c:	4b27      	ldr	r3, [pc, #156]	; (800380c <MX_ADC1_Init+0xb8>)
 800376e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003772:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003774:	4b25      	ldr	r3, [pc, #148]	; (800380c <MX_ADC1_Init+0xb8>)
 8003776:	2200      	movs	r2, #0
 8003778:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800377a:	4b24      	ldr	r3, [pc, #144]	; (800380c <MX_ADC1_Init+0xb8>)
 800377c:	2201      	movs	r2, #1
 800377e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003780:	4b22      	ldr	r3, [pc, #136]	; (800380c <MX_ADC1_Init+0xb8>)
 8003782:	2201      	movs	r2, #1
 8003784:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <MX_ADC1_Init+0xb8>)
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800378e:	4b1f      	ldr	r3, [pc, #124]	; (800380c <MX_ADC1_Init+0xb8>)
 8003790:	2200      	movs	r2, #0
 8003792:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003794:	4b1d      	ldr	r3, [pc, #116]	; (800380c <MX_ADC1_Init+0xb8>)
 8003796:	4a1f      	ldr	r2, [pc, #124]	; (8003814 <MX_ADC1_Init+0xc0>)
 8003798:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800379a:	4b1c      	ldr	r3, [pc, #112]	; (800380c <MX_ADC1_Init+0xb8>)
 800379c:	2200      	movs	r2, #0
 800379e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80037a0:	4b1a      	ldr	r3, [pc, #104]	; (800380c <MX_ADC1_Init+0xb8>)
 80037a2:	2202      	movs	r2, #2
 80037a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <MX_ADC1_Init+0xb8>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037ae:	4b17      	ldr	r3, [pc, #92]	; (800380c <MX_ADC1_Init+0xb8>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80037b4:	4815      	ldr	r0, [pc, #84]	; (800380c <MX_ADC1_Init+0xb8>)
 80037b6:	f001 fcb1 	bl	800511c <HAL_ADC_Init>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80037c0:	f000 faac 	bl	8003d1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80037c8:	2301      	movs	r3, #1
 80037ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80037cc:	2306      	movs	r3, #6
 80037ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037d0:	463b      	mov	r3, r7
 80037d2:	4619      	mov	r1, r3
 80037d4:	480d      	ldr	r0, [pc, #52]	; (800380c <MX_ADC1_Init+0xb8>)
 80037d6:	f001 fe13 	bl	8005400 <HAL_ADC_ConfigChannel>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80037e0:	f000 fa9c 	bl	8003d1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80037e4:	2301      	movs	r3, #1
 80037e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80037e8:	2302      	movs	r3, #2
 80037ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80037ec:	2302      	movs	r3, #2
 80037ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037f0:	463b      	mov	r3, r7
 80037f2:	4619      	mov	r1, r3
 80037f4:	4805      	ldr	r0, [pc, #20]	; (800380c <MX_ADC1_Init+0xb8>)
 80037f6:	f001 fe03 	bl	8005400 <HAL_ADC_ConfigChannel>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003800:	f000 fa8c 	bl	8003d1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000244 	.word	0x20000244
 8003810:	40012000 	.word	0x40012000
 8003814:	0f000001 	.word	0x0f000001

08003818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <MX_I2C1_Init+0x50>)
 800381e:	4a13      	ldr	r2, [pc, #76]	; (800386c <MX_I2C1_Init+0x54>)
 8003820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003822:	4b11      	ldr	r3, [pc, #68]	; (8003868 <MX_I2C1_Init+0x50>)
 8003824:	4a12      	ldr	r2, [pc, #72]	; (8003870 <MX_I2C1_Init+0x58>)
 8003826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <MX_I2C1_Init+0x50>)
 800382a:	2200      	movs	r2, #0
 800382c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800382e:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <MX_I2C1_Init+0x50>)
 8003830:	2200      	movs	r2, #0
 8003832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <MX_I2C1_Init+0x50>)
 8003836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800383a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <MX_I2C1_Init+0x50>)
 800383e:	2200      	movs	r2, #0
 8003840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <MX_I2C1_Init+0x50>)
 8003844:	2200      	movs	r2, #0
 8003846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003848:	4b07      	ldr	r3, [pc, #28]	; (8003868 <MX_I2C1_Init+0x50>)
 800384a:	2200      	movs	r2, #0
 800384c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <MX_I2C1_Init+0x50>)
 8003850:	2200      	movs	r2, #0
 8003852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003854:	4804      	ldr	r0, [pc, #16]	; (8003868 <MX_I2C1_Init+0x50>)
 8003856:	f002 ff6f 	bl	8006738 <HAL_I2C_Init>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003860:	f000 fa5c 	bl	8003d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003864:	bf00      	nop
 8003866:	bd80      	pop	{r7, pc}
 8003868:	200002ec 	.word	0x200002ec
 800386c:	40005400 	.word	0x40005400
 8003870:	000186a0 	.word	0x000186a0

08003874 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003878:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <MX_I2C3_Init+0x50>)
 800387a:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <MX_I2C3_Init+0x54>)
 800387c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800387e:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <MX_I2C3_Init+0x50>)
 8003880:	4a12      	ldr	r2, [pc, #72]	; (80038cc <MX_I2C3_Init+0x58>)
 8003882:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003884:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <MX_I2C3_Init+0x50>)
 8003886:	2200      	movs	r2, #0
 8003888:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800388a:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <MX_I2C3_Init+0x50>)
 800388c:	2200      	movs	r2, #0
 800388e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <MX_I2C3_Init+0x50>)
 8003892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003896:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <MX_I2C3_Init+0x50>)
 800389a:	2200      	movs	r2, #0
 800389c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800389e:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <MX_I2C3_Init+0x50>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038a4:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <MX_I2C3_Init+0x50>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <MX_I2C3_Init+0x50>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80038b0:	4804      	ldr	r0, [pc, #16]	; (80038c4 <MX_I2C3_Init+0x50>)
 80038b2:	f002 ff41 	bl	8006738 <HAL_I2C_Init>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80038bc:	f000 fa2e 	bl	8003d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80038c0:	bf00      	nop
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20000340 	.word	0x20000340
 80038c8:	40005c00 	.word	0x40005c00
 80038cc:	000186a0 	.word	0x000186a0

080038d0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80038d4:	4b09      	ldr	r3, [pc, #36]	; (80038fc <MX_IWDG_Init+0x2c>)
 80038d6:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <MX_IWDG_Init+0x30>)
 80038d8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <MX_IWDG_Init+0x2c>)
 80038dc:	2206      	movs	r2, #6
 80038de:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <MX_IWDG_Init+0x2c>)
 80038e2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80038e6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80038e8:	4804      	ldr	r0, [pc, #16]	; (80038fc <MX_IWDG_Init+0x2c>)
 80038ea:	f003 feba 	bl	8007662 <HAL_IWDG_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80038f4:	f000 fa12 	bl	8003d1c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000394 	.word	0x20000394
 8003900:	40003000 	.word	0x40003000

08003904 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003908:	4b17      	ldr	r3, [pc, #92]	; (8003968 <MX_SPI1_Init+0x64>)
 800390a:	4a18      	ldr	r2, [pc, #96]	; (800396c <MX_SPI1_Init+0x68>)
 800390c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800390e:	4b16      	ldr	r3, [pc, #88]	; (8003968 <MX_SPI1_Init+0x64>)
 8003910:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003914:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003916:	4b14      	ldr	r3, [pc, #80]	; (8003968 <MX_SPI1_Init+0x64>)
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800391c:	4b12      	ldr	r3, [pc, #72]	; (8003968 <MX_SPI1_Init+0x64>)
 800391e:	2200      	movs	r2, #0
 8003920:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003922:	4b11      	ldr	r3, [pc, #68]	; (8003968 <MX_SPI1_Init+0x64>)
 8003924:	2200      	movs	r2, #0
 8003926:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003928:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <MX_SPI1_Init+0x64>)
 800392a:	2200      	movs	r2, #0
 800392c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800392e:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <MX_SPI1_Init+0x64>)
 8003930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003934:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003936:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <MX_SPI1_Init+0x64>)
 8003938:	2218      	movs	r2, #24
 800393a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <MX_SPI1_Init+0x64>)
 800393e:	2200      	movs	r2, #0
 8003940:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003942:	4b09      	ldr	r3, [pc, #36]	; (8003968 <MX_SPI1_Init+0x64>)
 8003944:	2200      	movs	r2, #0
 8003946:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003948:	4b07      	ldr	r3, [pc, #28]	; (8003968 <MX_SPI1_Init+0x64>)
 800394a:	2200      	movs	r2, #0
 800394c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <MX_SPI1_Init+0x64>)
 8003950:	220a      	movs	r2, #10
 8003952:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003954:	4804      	ldr	r0, [pc, #16]	; (8003968 <MX_SPI1_Init+0x64>)
 8003956:	f004 fb2f 	bl	8007fb8 <HAL_SPI_Init>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003960:	f000 f9dc 	bl	8003d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003964:	bf00      	nop
 8003966:	bd80      	pop	{r7, pc}
 8003968:	200003a0 	.word	0x200003a0
 800396c:	40013000 	.word	0x40013000

08003970 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003974:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <MX_SPI2_Init+0x64>)
 8003976:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <MX_SPI2_Init+0x68>)
 8003978:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800397a:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <MX_SPI2_Init+0x64>)
 800397c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003980:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003982:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <MX_SPI2_Init+0x64>)
 8003984:	2200      	movs	r2, #0
 8003986:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003988:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <MX_SPI2_Init+0x64>)
 800398a:	2200      	movs	r2, #0
 800398c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <MX_SPI2_Init+0x64>)
 8003990:	2200      	movs	r2, #0
 8003992:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003994:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <MX_SPI2_Init+0x64>)
 8003996:	2200      	movs	r2, #0
 8003998:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <MX_SPI2_Init+0x64>)
 800399c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <MX_SPI2_Init+0x64>)
 80039a4:	2218      	movs	r2, #24
 80039a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039a8:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <MX_SPI2_Init+0x64>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <MX_SPI2_Init+0x64>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039b4:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <MX_SPI2_Init+0x64>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80039ba:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <MX_SPI2_Init+0x64>)
 80039bc:	220a      	movs	r2, #10
 80039be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80039c0:	4804      	ldr	r0, [pc, #16]	; (80039d4 <MX_SPI2_Init+0x64>)
 80039c2:	f004 faf9 	bl	8007fb8 <HAL_SPI_Init>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80039cc:	f000 f9a6 	bl	8003d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80039d0:	bf00      	nop
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	200003f8 	.word	0x200003f8
 80039d8:	40003800 	.word	0x40003800

080039dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039e2:	f107 0308 	add.w	r3, r7, #8
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	609a      	str	r2, [r3, #8]
 80039ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f0:	463b      	mov	r3, r7
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <MX_TIM4_Init+0x94>)
 80039fa:	4a1e      	ldr	r2, [pc, #120]	; (8003a74 <MX_TIM4_Init+0x98>)
 80039fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50000-1;
 80039fe:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <MX_TIM4_Init+0x94>)
 8003a00:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003a04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a06:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <MX_TIM4_Init+0x94>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 14400-1;
 8003a0c:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <MX_TIM4_Init+0x94>)
 8003a0e:	f643 023f 	movw	r2, #14399	; 0x383f
 8003a12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a14:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <MX_TIM4_Init+0x94>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <MX_TIM4_Init+0x94>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a20:	4813      	ldr	r0, [pc, #76]	; (8003a70 <MX_TIM4_Init+0x94>)
 8003a22:	f005 f87f 	bl	8008b24 <HAL_TIM_Base_Init>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003a2c:	f000 f976 	bl	8003d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a36:	f107 0308 	add.w	r3, r7, #8
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	480c      	ldr	r0, [pc, #48]	; (8003a70 <MX_TIM4_Init+0x94>)
 8003a3e:	f005 fad0 	bl	8008fe2 <HAL_TIM_ConfigClockSource>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003a48:	f000 f968 	bl	8003d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a50:	2300      	movs	r3, #0
 8003a52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a54:	463b      	mov	r3, r7
 8003a56:	4619      	mov	r1, r3
 8003a58:	4805      	ldr	r0, [pc, #20]	; (8003a70 <MX_TIM4_Init+0x94>)
 8003a5a:	f005 fceb 	bl	8009434 <HAL_TIMEx_MasterConfigSynchronization>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003a64:	f000 f95a 	bl	8003d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003a68:	bf00      	nop
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000450 	.word	0x20000450
 8003a74:	40000800 	.word	0x40000800

08003a78 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a7e:	463b      	mov	r3, r7
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <MX_TIM6_Init+0x64>)
 8003a88:	4a15      	ldr	r2, [pc, #84]	; (8003ae0 <MX_TIM6_Init+0x68>)
 8003a8a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <MX_TIM6_Init+0x64>)
 8003a8e:	2247      	movs	r2, #71	; 0x47
 8003a90:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <MX_TIM6_Init+0x64>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8003a98:	4b10      	ldr	r3, [pc, #64]	; (8003adc <MX_TIM6_Init+0x64>)
 8003a9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003a9e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aa0:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <MX_TIM6_Init+0x64>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003aa6:	480d      	ldr	r0, [pc, #52]	; (8003adc <MX_TIM6_Init+0x64>)
 8003aa8:	f005 f83c 	bl	8008b24 <HAL_TIM_Base_Init>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003ab2:	f000 f933 	bl	8003d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003abe:	463b      	mov	r3, r7
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4806      	ldr	r0, [pc, #24]	; (8003adc <MX_TIM6_Init+0x64>)
 8003ac4:	f005 fcb6 	bl	8009434 <HAL_TIMEx_MasterConfigSynchronization>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003ace:	f000 f925 	bl	8003d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000498 	.word	0x20000498
 8003ae0:	40001000 	.word	0x40001000

08003ae4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003aea:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <MX_USART1_UART_Init+0x50>)
 8003aec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003af4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003af6:	4b0e      	ldr	r3, [pc, #56]	; (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b08:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003b0a:	220c      	movs	r2, #12
 8003b0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b0e:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b1a:	4805      	ldr	r0, [pc, #20]	; (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003b1c:	f005 fd1a 	bl	8009554 <HAL_UART_Init>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b26:	f000 f8f9 	bl	8003d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	200004e0 	.word	0x200004e0
 8003b34:	40011000 	.word	0x40011000

08003b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <MX_DMA_Init+0x4c>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	4a0f      	ldr	r2, [pc, #60]	; (8003b84 <MX_DMA_Init+0x4c>)
 8003b48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <MX_DMA_Init+0x4c>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	2038      	movs	r0, #56	; 0x38
 8003b60:	f001 ffc9 	bl	8005af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003b64:	2038      	movs	r0, #56	; 0x38
 8003b66:	f001 ffe2 	bl	8005b2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	203a      	movs	r0, #58	; 0x3a
 8003b70:	f001 ffc1 	bl	8005af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003b74:	203a      	movs	r0, #58	; 0x3a
 8003b76:	f001 ffda 	bl	8005b2e <HAL_NVIC_EnableIRQ>

}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023800 	.word	0x40023800

08003b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08c      	sub	sp, #48	; 0x30
 8003b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b8e:	f107 031c 	add.w	r3, r7, #28
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	609a      	str	r2, [r3, #8]
 8003b9a:	60da      	str	r2, [r3, #12]
 8003b9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	4b58      	ldr	r3, [pc, #352]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	4a57      	ldr	r2, [pc, #348]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bac:	6313      	str	r3, [r2, #48]	; 0x30
 8003bae:	4b55      	ldr	r3, [pc, #340]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	4b51      	ldr	r3, [pc, #324]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4a50      	ldr	r2, [pc, #320]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003bc4:	f043 0304 	orr.w	r3, r3, #4
 8003bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bca:	4b4e      	ldr	r3, [pc, #312]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	4b4a      	ldr	r3, [pc, #296]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	4a49      	ldr	r2, [pc, #292]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	6313      	str	r3, [r2, #48]	; 0x30
 8003be6:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	4b43      	ldr	r3, [pc, #268]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	4a42      	ldr	r2, [pc, #264]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	6313      	str	r3, [r2, #48]	; 0x30
 8003c02:	4b40      	ldr	r3, [pc, #256]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	4b3c      	ldr	r3, [pc, #240]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	4a3b      	ldr	r2, [pc, #236]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003c18:	f043 0310 	orr.w	r3, r3, #16
 8003c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1e:	4b39      	ldr	r3, [pc, #228]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	4b35      	ldr	r3, [pc, #212]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	4a34      	ldr	r2, [pc, #208]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003c34:	f043 0308 	orr.w	r3, r3, #8
 8003c38:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3a:	4b32      	ldr	r3, [pc, #200]	; (8003d04 <MX_GPIO_Init+0x17c>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	607b      	str	r3, [r7, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_SPI2_GPIO_Port, SD_CS_SPI2_Pin, GPIO_PIN_RESET);
 8003c46:	2200      	movs	r2, #0
 8003c48:	2102      	movs	r1, #2
 8003c4a:	482f      	ldr	r0, [pc, #188]	; (8003d08 <MX_GPIO_Init+0x180>)
 8003c4c:	f002 fd40 	bl	80066d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Temperature_Pin_Pin|test_pin_Pin, GPIO_PIN_RESET);
 8003c50:	2200      	movs	r2, #0
 8003c52:	2144      	movs	r1, #68	; 0x44
 8003c54:	482d      	ldr	r0, [pc, #180]	; (8003d0c <MX_GPIO_Init+0x184>)
 8003c56:	f002 fd3b 	bl	80066d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	482c      	ldr	r0, [pc, #176]	; (8003d10 <MX_GPIO_Init+0x188>)
 8003c60:	f002 fd36 	bl	80066d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ACID_Pin|BASE_Pin|NutriA_Pin|NutriB_Pin, GPIO_PIN_SET);
 8003c64:	2201      	movs	r2, #1
 8003c66:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003c6a:	482a      	ldr	r0, [pc, #168]	; (8003d14 <MX_GPIO_Init+0x18c>)
 8003c6c:	f002 fd30 	bl	80066d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_SPI2_Pin */
  GPIO_InitStruct.Pin = SD_CS_SPI2_Pin;
 8003c70:	2302      	movs	r3, #2
 8003c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c74:	2301      	movs	r3, #1
 8003c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_SPI2_GPIO_Port, &GPIO_InitStruct);
 8003c80:	f107 031c 	add.w	r3, r7, #28
 8003c84:	4619      	mov	r1, r3
 8003c86:	4820      	ldr	r0, [pc, #128]	; (8003d08 <MX_GPIO_Init+0x180>)
 8003c88:	f002 fb6e 	bl	8006368 <HAL_GPIO_Init>

  /*Configure GPIO pins : Temperature_Pin_Pin test_pin_Pin */
  GPIO_InitStruct.Pin = Temperature_Pin_Pin|test_pin_Pin;
 8003c8c:	2344      	movs	r3, #68	; 0x44
 8003c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c90:	2301      	movs	r3, #1
 8003c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9c:	f107 031c 	add.w	r3, r7, #28
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	481a      	ldr	r0, [pc, #104]	; (8003d0c <MX_GPIO_Init+0x184>)
 8003ca4:	f002 fb60 	bl	8006368 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cac:	2301      	movs	r3, #1
 8003cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8003cb8:	f107 031c 	add.w	r3, r7, #28
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4814      	ldr	r0, [pc, #80]	; (8003d10 <MX_GPIO_Init+0x188>)
 8003cc0:	f002 fb52 	bl	8006368 <HAL_GPIO_Init>

  /*Configure GPIO pins : Rotary_CLK_Pin Rotary_DT_Pin Rotary_SW_Pin */
  GPIO_InitStruct.Pin = Rotary_CLK_Pin|Rotary_DT_Pin|Rotary_SW_Pin;
 8003cc4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cd2:	f107 031c 	add.w	r3, r7, #28
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	480f      	ldr	r0, [pc, #60]	; (8003d18 <MX_GPIO_Init+0x190>)
 8003cda:	f002 fb45 	bl	8006368 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACID_Pin BASE_Pin NutriA_Pin NutriB_Pin */
  GPIO_InitStruct.Pin = ACID_Pin|BASE_Pin|NutriA_Pin|NutriB_Pin;
 8003cde:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cec:	2300      	movs	r3, #0
 8003cee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cf0:	f107 031c 	add.w	r3, r7, #28
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4807      	ldr	r0, [pc, #28]	; (8003d14 <MX_GPIO_Init+0x18c>)
 8003cf8:	f002 fb36 	bl	8006368 <HAL_GPIO_Init>

}
 8003cfc:	bf00      	nop
 8003cfe:	3730      	adds	r7, #48	; 0x30
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40020800 	.word	0x40020800
 8003d0c:	40020000 	.word	0x40020000
 8003d10:	40020400 	.word	0x40020400
 8003d14:	40020c00 	.word	0x40020c00
 8003d18:	40021000 	.word	0x40021000

08003d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d20:	b672      	cpsid	i
}
 8003d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d24:	e7fe      	b.n	8003d24 <Error_Handler+0x8>
	...

08003d28 <SD_Handling>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void SD_Handling(uint8_t *SD_ReadBufferData)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, "/", 1);
 8003d30:	2201      	movs	r2, #1
 8003d32:	4939      	ldr	r1, [pc, #228]	; (8003e18 <SD_Handling+0xf0>)
 8003d34:	4839      	ldr	r0, [pc, #228]	; (8003e1c <SD_Handling+0xf4>)
 8003d36:	f008 ffd3 	bl	800cce0 <f_mount>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4b38      	ldr	r3, [pc, #224]	; (8003e20 <SD_Handling+0xf8>)
 8003d40:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {SEND_UART1("ERROR!!! in mounting SD CARD...\n\n");}
 8003d42:	4b37      	ldr	r3, [pc, #220]	; (8003e20 <SD_Handling+0xf8>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <SD_Handling+0x2a>
 8003d4a:	4836      	ldr	r0, [pc, #216]	; (8003e24 <SD_Handling+0xfc>)
 8003d4c:	f7fe ffd2 	bl	8002cf4 <SEND_UART1>
	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
	  	sprintf (SD_ReadBufferData, "SD CARD Free Space: \t%lu\n\n",free_space);
	  	SEND_UART1(SD_ReadBufferData);
	  	BUFFER_CLEAR(SD_ReadBufferData,BUFF_SIZE(SD_ReadBufferData));
	}
}
 8003d50:	e05e      	b.n	8003e10 <SD_Handling+0xe8>
		f_getfree("", &fre_clust, &pfs);
 8003d52:	4a35      	ldr	r2, [pc, #212]	; (8003e28 <SD_Handling+0x100>)
 8003d54:	4935      	ldr	r1, [pc, #212]	; (8003e2c <SD_Handling+0x104>)
 8003d56:	4836      	ldr	r0, [pc, #216]	; (8003e30 <SD_Handling+0x108>)
 8003d58:	f009 fdec 	bl	800d934 <f_getfree>
		SEND_UART1("SD CARD mounted successfully...\n\n");
 8003d5c:	4835      	ldr	r0, [pc, #212]	; (8003e34 <SD_Handling+0x10c>)
 8003d5e:	f7fe ffc9 	bl	8002cf4 <SEND_UART1>
	  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8003d62:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <SD_Handling+0x100>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	3b02      	subs	r3, #2
 8003d6a:	4a2f      	ldr	r2, [pc, #188]	; (8003e28 <SD_Handling+0x100>)
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	8952      	ldrh	r2, [r2, #10]
 8003d70:	fb02 f303 	mul.w	r3, r2, r3
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fc fbd5 	bl	8000524 <__aeabi_ui2d>
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	4b2e      	ldr	r3, [pc, #184]	; (8003e38 <SD_Handling+0x110>)
 8003d80:	f7fc fc4a 	bl	8000618 <__aeabi_dmul>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f7fc ff1c 	bl	8000bc8 <__aeabi_d2uiz>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4a2a      	ldr	r2, [pc, #168]	; (8003e3c <SD_Handling+0x114>)
 8003d94:	6013      	str	r3, [r2, #0]
	  	sprintf (SD_ReadBufferData, "SD CARD Total Size: \t%lu\n",total);
 8003d96:	4b29      	ldr	r3, [pc, #164]	; (8003e3c <SD_Handling+0x114>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4928      	ldr	r1, [pc, #160]	; (8003e40 <SD_Handling+0x118>)
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f00a fefa 	bl	800eb98 <siprintf>
	  	SEND_UART1(SD_ReadBufferData);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7fe ffa5 	bl	8002cf4 <SEND_UART1>
	  	BUFFER_CLEAR(SD_ReadBufferData,BUFF_SIZE(SD_ReadBufferData));
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd f94f 	bl	800104e <BUFF_SIZE>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7fd f92f 	bl	8001018 <BUFFER_CLEAR>
	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8003dba:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <SD_Handling+0x100>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	895b      	ldrh	r3, [r3, #10]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <SD_Handling+0x104>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fc fbaa 	bl	8000524 <__aeabi_ui2d>
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	4b18      	ldr	r3, [pc, #96]	; (8003e38 <SD_Handling+0x110>)
 8003dd6:	f7fc fc1f 	bl	8000618 <__aeabi_dmul>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4610      	mov	r0, r2
 8003de0:	4619      	mov	r1, r3
 8003de2:	f7fc fef1 	bl	8000bc8 <__aeabi_d2uiz>
 8003de6:	4603      	mov	r3, r0
 8003de8:	4a16      	ldr	r2, [pc, #88]	; (8003e44 <SD_Handling+0x11c>)
 8003dea:	6013      	str	r3, [r2, #0]
	  	sprintf (SD_ReadBufferData, "SD CARD Free Space: \t%lu\n\n",free_space);
 8003dec:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <SD_Handling+0x11c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	4915      	ldr	r1, [pc, #84]	; (8003e48 <SD_Handling+0x120>)
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f00a fecf 	bl	800eb98 <siprintf>
	  	SEND_UART1(SD_ReadBufferData);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fe ff7a 	bl	8002cf4 <SEND_UART1>
	  	BUFFER_CLEAR(SD_ReadBufferData,BUFF_SIZE(SD_ReadBufferData));
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7fd f924 	bl	800104e <BUFF_SIZE>
 8003e06:	4603      	mov	r3, r0
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fd f904 	bl	8001018 <BUFFER_CLEAR>
}
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	0801298c 	.word	0x0801298c
 8003e1c:	20000e00 	.word	0x20000e00
 8003e20:	20001264 	.word	0x20001264
 8003e24:	08012990 	.word	0x08012990
 8003e28:	20001268 	.word	0x20001268
 8003e2c:	2000126c 	.word	0x2000126c
 8003e30:	080129b4 	.word	0x080129b4
 8003e34:	080129b8 	.word	0x080129b8
 8003e38:	3fe00000 	.word	0x3fe00000
 8003e3c:	20001270 	.word	0x20001270
 8003e40:	080129dc 	.word	0x080129dc
 8003e44:	20001274 	.word	0x20001274
 8003e48:	080129f8 	.word	0x080129f8

08003e4c <SD_Card_Write>:

void SD_Card_Write(char *NameOfFile,  char *Data)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
		fresult = f_open(&file, NameOfFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8003e56:	2213      	movs	r2, #19
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	4813      	ldr	r0, [pc, #76]	; (8003ea8 <SD_Card_Write+0x5c>)
 8003e5c:	f008 ff86 	bl	800cd6c <f_open>
 8003e60:	4603      	mov	r3, r0
 8003e62:	461a      	mov	r2, r3
 8003e64:	4b11      	ldr	r3, [pc, #68]	; (8003eac <SD_Card_Write+0x60>)
 8003e66:	701a      	strb	r2, [r3, #0]
		f_lseek(&file, f_size(&file));
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <SD_Card_Write+0x5c>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	480e      	ldr	r0, [pc, #56]	; (8003ea8 <SD_Card_Write+0x5c>)
 8003e70:	f009 fb57 	bl	800d522 <f_lseek>
		  if (fresult == FR_OK)
 8003e74:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <SD_Card_Write+0x60>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10e      	bne.n	8003e9a <SD_Card_Write+0x4e>
			  {
			  	  SEND_UART1 ("file is created\n");
 8003e7c:	480c      	ldr	r0, [pc, #48]	; (8003eb0 <SD_Card_Write+0x64>)
 8003e7e:	f7fe ff39 	bl	8002cf4 <SEND_UART1>
			  	  f_puts(Data, &file);
 8003e82:	4909      	ldr	r1, [pc, #36]	; (8003ea8 <SD_Card_Write+0x5c>)
 8003e84:	6838      	ldr	r0, [r7, #0]
 8003e86:	f009 fe81 	bl	800db8c <f_puts>
			  	  fresult = f_close(&file);
 8003e8a:	4807      	ldr	r0, [pc, #28]	; (8003ea8 <SD_Card_Write+0x5c>)
 8003e8c:	f009 fb1f 	bl	800d4ce <f_close>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <SD_Card_Write+0x60>)
 8003e96:	701a      	strb	r2, [r3, #0]
		  else
		  {
			  SEND_UART1 ("Create file is fail\n");
		  }

}
 8003e98:	e002      	b.n	8003ea0 <SD_Card_Write+0x54>
			  SEND_UART1 ("Create file is fail\n");
 8003e9a:	4806      	ldr	r0, [pc, #24]	; (8003eb4 <SD_Card_Write+0x68>)
 8003e9c:	f7fe ff2a 	bl	8002cf4 <SEND_UART1>
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20001034 	.word	0x20001034
 8003eac:	20001264 	.word	0x20001264
 8003eb0:	08012a14 	.word	0x08012a14
 8003eb4:	08012a28 	.word	0x08012a28

08003eb8 <SD_save>:
	fresult = f_close(&file);

}

void SD_save(char *my_data)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b0b6      	sub	sp, #216	; 0xd8
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	6078      	str	r0, [r7, #4]

	if(((ds1307.min)%15) == 0)
 8003ec0:	4b2a      	ldr	r3, [pc, #168]	; (8003f6c <SD_save+0xb4>)
 8003ec2:	785a      	ldrb	r2, [r3, #1]
 8003ec4:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <SD_save+0xb8>)
 8003ec6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eca:	08d9      	lsrs	r1, r3, #3
 8003ecc:	460b      	mov	r3, r1
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	1a5b      	subs	r3, r3, r1
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d140      	bne.n	8003f5c <SD_save+0xa4>
	{
		if(save_sd_flag == 0)
 8003eda:	4b26      	ldr	r3, [pc, #152]	; (8003f74 <SD_save+0xbc>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d13f      	bne.n	8003f62 <SD_save+0xaa>
		{
			char name[100];
			char data[100];
			sprintf(name,"%d_%d_%d.txt",ds1307.date,ds1307.month,ds1307.year);
 8003ee2:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <SD_save+0xb4>)
 8003ee4:	791b      	ldrb	r3, [r3, #4]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <SD_save+0xb4>)
 8003eea:	795b      	ldrb	r3, [r3, #5]
 8003eec:	4619      	mov	r1, r3
 8003eee:	4b1f      	ldr	r3, [pc, #124]	; (8003f6c <SD_save+0xb4>)
 8003ef0:	88db      	ldrh	r3, [r3, #6]
 8003ef2:	f107 0008 	add.w	r0, r7, #8
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	491f      	ldr	r1, [pc, #124]	; (8003f78 <SD_save+0xc0>)
 8003efc:	f00a fe4c 	bl	800eb98 <siprintf>
			sprintf(data,"%d:%d ==>>",ds1307.hour,ds1307.min);
 8003f00:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <SD_save+0xb4>)
 8003f02:	789b      	ldrb	r3, [r3, #2]
 8003f04:	461a      	mov	r2, r3
 8003f06:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <SD_save+0xb4>)
 8003f08:	785b      	ldrb	r3, [r3, #1]
 8003f0a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003f0e:	491b      	ldr	r1, [pc, #108]	; (8003f7c <SD_save+0xc4>)
 8003f10:	f00a fe42 	bl	800eb98 <siprintf>
			strcat(data,my_data);
 8003f14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f00a fe5c 	bl	800ebd8 <strcat>
			strcat(data,"\n");
 8003f20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fc f95d 	bl	80001e4 <strlen>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f32:	4413      	add	r3, r2
 8003f34:	4912      	ldr	r1, [pc, #72]	; (8003f80 <SD_save+0xc8>)
 8003f36:	461a      	mov	r2, r3
 8003f38:	460b      	mov	r3, r1
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	8013      	strh	r3, [r2, #0]
			SD_Card_Write(name,data);
 8003f3e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003f42:	f107 0308 	add.w	r3, r7, #8
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ff7f 	bl	8003e4c <SD_Card_Write>
			save_sd_flag++;
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <SD_save+0xbc>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	3301      	adds	r3, #1
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <SD_save+0xbc>)
 8003f58:	701a      	strb	r2, [r3, #0]
	else
	{
		save_sd_flag = 0;
	}

}
 8003f5a:	e002      	b.n	8003f62 <SD_save+0xaa>
		save_sd_flag = 0;
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <SD_save+0xbc>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	701a      	strb	r2, [r3, #0]
}
 8003f62:	bf00      	nop
 8003f64:	37d0      	adds	r7, #208	; 0xd0
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000214 	.word	0x20000214
 8003f70:	88888889 	.word	0x88888889
 8003f74:	200005a5 	.word	0x200005a5
 8003f78:	08012a40 	.word	0x08012a40
 8003f7c:	08012a50 	.word	0x08012a50
 8003f80:	08012a5c 	.word	0x08012a5c

08003f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	607b      	str	r3, [r7, #4]
 8003f8e:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <HAL_MspInit+0x4c>)
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	4a0f      	ldr	r2, [pc, #60]	; (8003fd0 <HAL_MspInit+0x4c>)
 8003f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f98:	6453      	str	r3, [r2, #68]	; 0x44
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <HAL_MspInit+0x4c>)
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa2:	607b      	str	r3, [r7, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	603b      	str	r3, [r7, #0]
 8003faa:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <HAL_MspInit+0x4c>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	4a08      	ldr	r2, [pc, #32]	; (8003fd0 <HAL_MspInit+0x4c>)
 8003fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <HAL_MspInit+0x4c>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800

08003fd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08a      	sub	sp, #40	; 0x28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fdc:	f107 0314 	add.w	r3, r7, #20
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a2f      	ldr	r2, [pc, #188]	; (80040b0 <HAL_ADC_MspInit+0xdc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d157      	bne.n	80040a6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	4b2e      	ldr	r3, [pc, #184]	; (80040b4 <HAL_ADC_MspInit+0xe0>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	4a2d      	ldr	r2, [pc, #180]	; (80040b4 <HAL_ADC_MspInit+0xe0>)
 8004000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004004:	6453      	str	r3, [r2, #68]	; 0x44
 8004006:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <HAL_ADC_MspInit+0xe0>)
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <HAL_ADC_MspInit+0xe0>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	4a26      	ldr	r2, [pc, #152]	; (80040b4 <HAL_ADC_MspInit+0xe0>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6313      	str	r3, [r2, #48]	; 0x30
 8004022:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <HAL_ADC_MspInit+0xe0>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_PH_Sensor_Pin|ADC1_TDS_Sensor_Pin;
 800402e:	2303      	movs	r3, #3
 8004030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004032:	2303      	movs	r3, #3
 8004034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800403a:	f107 0314 	add.w	r3, r7, #20
 800403e:	4619      	mov	r1, r3
 8004040:	481d      	ldr	r0, [pc, #116]	; (80040b8 <HAL_ADC_MspInit+0xe4>)
 8004042:	f002 f991 	bl	8006368 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004046:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <HAL_ADC_MspInit+0xe8>)
 8004048:	4a1d      	ldr	r2, [pc, #116]	; (80040c0 <HAL_ADC_MspInit+0xec>)
 800404a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_ADC_MspInit+0xe8>)
 800404e:	2200      	movs	r2, #0
 8004050:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004052:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <HAL_ADC_MspInit+0xe8>)
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004058:	4b18      	ldr	r3, [pc, #96]	; (80040bc <HAL_ADC_MspInit+0xe8>)
 800405a:	2200      	movs	r2, #0
 800405c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800405e:	4b17      	ldr	r3, [pc, #92]	; (80040bc <HAL_ADC_MspInit+0xe8>)
 8004060:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004064:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004066:	4b15      	ldr	r3, [pc, #84]	; (80040bc <HAL_ADC_MspInit+0xe8>)
 8004068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800406c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800406e:	4b13      	ldr	r3, [pc, #76]	; (80040bc <HAL_ADC_MspInit+0xe8>)
 8004070:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004074:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004076:	4b11      	ldr	r3, [pc, #68]	; (80040bc <HAL_ADC_MspInit+0xe8>)
 8004078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800407c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800407e:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <HAL_ADC_MspInit+0xe8>)
 8004080:	2200      	movs	r2, #0
 8004082:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <HAL_ADC_MspInit+0xe8>)
 8004086:	2200      	movs	r2, #0
 8004088:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800408a:	480c      	ldr	r0, [pc, #48]	; (80040bc <HAL_ADC_MspInit+0xe8>)
 800408c:	f001 fd6a 	bl	8005b64 <HAL_DMA_Init>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004096:	f7ff fe41 	bl	8003d1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a07      	ldr	r2, [pc, #28]	; (80040bc <HAL_ADC_MspInit+0xe8>)
 800409e:	639a      	str	r2, [r3, #56]	; 0x38
 80040a0:	4a06      	ldr	r2, [pc, #24]	; (80040bc <HAL_ADC_MspInit+0xe8>)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80040a6:	bf00      	nop
 80040a8:	3728      	adds	r7, #40	; 0x28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40012000 	.word	0x40012000
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40020000 	.word	0x40020000
 80040bc:	2000028c 	.word	0x2000028c
 80040c0:	40026410 	.word	0x40026410

080040c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08c      	sub	sp, #48	; 0x30
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040cc:	f107 031c 	add.w	r3, r7, #28
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a42      	ldr	r2, [pc, #264]	; (80041ec <HAL_I2C_MspInit+0x128>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d12c      	bne.n	8004140 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	4b41      	ldr	r3, [pc, #260]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	4a40      	ldr	r2, [pc, #256]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 80040f0:	f043 0302 	orr.w	r3, r3, #2
 80040f4:	6313      	str	r3, [r2, #48]	; 0x30
 80040f6:	4b3e      	ldr	r3, [pc, #248]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C1_SCL_Pin|LCD_I2C1_SDA_Pin;
 8004102:	23c0      	movs	r3, #192	; 0xc0
 8004104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004106:	2312      	movs	r3, #18
 8004108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410a:	2300      	movs	r3, #0
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800410e:	2303      	movs	r3, #3
 8004110:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004112:	2304      	movs	r3, #4
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004116:	f107 031c 	add.w	r3, r7, #28
 800411a:	4619      	mov	r1, r3
 800411c:	4835      	ldr	r0, [pc, #212]	; (80041f4 <HAL_I2C_MspInit+0x130>)
 800411e:	f002 f923 	bl	8006368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	4b32      	ldr	r3, [pc, #200]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	4a31      	ldr	r2, [pc, #196]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 800412c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004130:	6413      	str	r3, [r2, #64]	; 0x40
 8004132:	4b2f      	ldr	r3, [pc, #188]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800413e:	e050      	b.n	80041e2 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a2c      	ldr	r2, [pc, #176]	; (80041f8 <HAL_I2C_MspInit+0x134>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d14b      	bne.n	80041e2 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	4b28      	ldr	r3, [pc, #160]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	4a27      	ldr	r2, [pc, #156]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	6313      	str	r3, [r2, #48]	; 0x30
 800415a:	4b25      	ldr	r3, [pc, #148]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	4a20      	ldr	r2, [pc, #128]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	6313      	str	r3, [r2, #48]	; 0x30
 8004176:	4b1e      	ldr	r3, [pc, #120]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004188:	2312      	movs	r3, #18
 800418a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004190:	2303      	movs	r3, #3
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004194:	2304      	movs	r3, #4
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004198:	f107 031c 	add.w	r3, r7, #28
 800419c:	4619      	mov	r1, r3
 800419e:	4817      	ldr	r0, [pc, #92]	; (80041fc <HAL_I2C_MspInit+0x138>)
 80041a0:	f002 f8e2 	bl	8006368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041aa:	2312      	movs	r3, #18
 80041ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b2:	2303      	movs	r3, #3
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80041b6:	2304      	movs	r3, #4
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ba:	f107 031c 	add.w	r3, r7, #28
 80041be:	4619      	mov	r1, r3
 80041c0:	480f      	ldr	r0, [pc, #60]	; (8004200 <HAL_I2C_MspInit+0x13c>)
 80041c2:	f002 f8d1 	bl	8006368 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	4a08      	ldr	r2, [pc, #32]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 80041d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041d4:	6413      	str	r3, [r2, #64]	; 0x40
 80041d6:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_I2C_MspInit+0x12c>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
}
 80041e2:	bf00      	nop
 80041e4:	3730      	adds	r7, #48	; 0x30
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40005400 	.word	0x40005400
 80041f0:	40023800 	.word	0x40023800
 80041f4:	40020400 	.word	0x40020400
 80041f8:	40005c00 	.word	0x40005c00
 80041fc:	40020800 	.word	0x40020800
 8004200:	40020000 	.word	0x40020000

08004204 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08c      	sub	sp, #48	; 0x30
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420c:	f107 031c 	add.w	r3, r7, #28
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	60da      	str	r2, [r3, #12]
 800421a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a41      	ldr	r2, [pc, #260]	; (8004328 <HAL_SPI_MspInit+0x124>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d12c      	bne.n	8004280 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	4b40      	ldr	r3, [pc, #256]	; (800432c <HAL_SPI_MspInit+0x128>)
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	4a3f      	ldr	r2, [pc, #252]	; (800432c <HAL_SPI_MspInit+0x128>)
 8004230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004234:	6453      	str	r3, [r2, #68]	; 0x44
 8004236:	4b3d      	ldr	r3, [pc, #244]	; (800432c <HAL_SPI_MspInit+0x128>)
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	4b39      	ldr	r3, [pc, #228]	; (800432c <HAL_SPI_MspInit+0x128>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	4a38      	ldr	r2, [pc, #224]	; (800432c <HAL_SPI_MspInit+0x128>)
 800424c:	f043 0302 	orr.w	r3, r3, #2
 8004250:	6313      	str	r3, [r2, #48]	; 0x30
 8004252:	4b36      	ldr	r3, [pc, #216]	; (800432c <HAL_SPI_MspInit+0x128>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800425e:	2338      	movs	r3, #56	; 0x38
 8004260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004262:	2302      	movs	r3, #2
 8004264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004266:	2300      	movs	r3, #0
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800426a:	2303      	movs	r3, #3
 800426c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800426e:	2305      	movs	r3, #5
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004272:	f107 031c 	add.w	r3, r7, #28
 8004276:	4619      	mov	r1, r3
 8004278:	482d      	ldr	r0, [pc, #180]	; (8004330 <HAL_SPI_MspInit+0x12c>)
 800427a:	f002 f875 	bl	8006368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800427e:	e04f      	b.n	8004320 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a2b      	ldr	r2, [pc, #172]	; (8004334 <HAL_SPI_MspInit+0x130>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d14a      	bne.n	8004320 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	4b27      	ldr	r3, [pc, #156]	; (800432c <HAL_SPI_MspInit+0x128>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	4a26      	ldr	r2, [pc, #152]	; (800432c <HAL_SPI_MspInit+0x128>)
 8004294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004298:	6413      	str	r3, [r2, #64]	; 0x40
 800429a:	4b24      	ldr	r3, [pc, #144]	; (800432c <HAL_SPI_MspInit+0x128>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_SPI_MspInit+0x128>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	4a1f      	ldr	r2, [pc, #124]	; (800432c <HAL_SPI_MspInit+0x128>)
 80042b0:	f043 0304 	orr.w	r3, r3, #4
 80042b4:	6313      	str	r3, [r2, #48]	; 0x30
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_SPI_MspInit+0x128>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042c2:	2300      	movs	r3, #0
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	4b19      	ldr	r3, [pc, #100]	; (800432c <HAL_SPI_MspInit+0x128>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	4a18      	ldr	r2, [pc, #96]	; (800432c <HAL_SPI_MspInit+0x128>)
 80042cc:	f043 0302 	orr.w	r3, r3, #2
 80042d0:	6313      	str	r3, [r2, #48]	; 0x30
 80042d2:	4b16      	ldr	r3, [pc, #88]	; (800432c <HAL_SPI_MspInit+0x128>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SD_MISO_SPI2_Pin|SD_MOSI_SPI2_Pin;
 80042de:	230c      	movs	r3, #12
 80042e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e2:	2302      	movs	r3, #2
 80042e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ea:	2303      	movs	r3, #3
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042ee:	2305      	movs	r3, #5
 80042f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042f2:	f107 031c 	add.w	r3, r7, #28
 80042f6:	4619      	mov	r1, r3
 80042f8:	480f      	ldr	r0, [pc, #60]	; (8004338 <HAL_SPI_MspInit+0x134>)
 80042fa:	f002 f835 	bl	8006368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SCK_SPI2_Pin;
 80042fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004304:	2302      	movs	r3, #2
 8004306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004308:	2300      	movs	r3, #0
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800430c:	2303      	movs	r3, #3
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004310:	2305      	movs	r3, #5
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SD_SCK_SPI2_GPIO_Port, &GPIO_InitStruct);
 8004314:	f107 031c 	add.w	r3, r7, #28
 8004318:	4619      	mov	r1, r3
 800431a:	4805      	ldr	r0, [pc, #20]	; (8004330 <HAL_SPI_MspInit+0x12c>)
 800431c:	f002 f824 	bl	8006368 <HAL_GPIO_Init>
}
 8004320:	bf00      	nop
 8004322:	3730      	adds	r7, #48	; 0x30
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40013000 	.word	0x40013000
 800432c:	40023800 	.word	0x40023800
 8004330:	40020400 	.word	0x40020400
 8004334:	40003800 	.word	0x40003800
 8004338:	40020800 	.word	0x40020800

0800433c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a18      	ldr	r2, [pc, #96]	; (80043ac <HAL_TIM_Base_MspInit+0x70>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d116      	bne.n	800437c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	4b17      	ldr	r3, [pc, #92]	; (80043b0 <HAL_TIM_Base_MspInit+0x74>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	4a16      	ldr	r2, [pc, #88]	; (80043b0 <HAL_TIM_Base_MspInit+0x74>)
 8004358:	f043 0304 	orr.w	r3, r3, #4
 800435c:	6413      	str	r3, [r2, #64]	; 0x40
 800435e:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <HAL_TIM_Base_MspInit+0x74>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	201e      	movs	r0, #30
 8004370:	f001 fbc1 	bl	8005af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004374:	201e      	movs	r0, #30
 8004376:	f001 fbda 	bl	8005b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800437a:	e012      	b.n	80043a2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a0c      	ldr	r2, [pc, #48]	; (80043b4 <HAL_TIM_Base_MspInit+0x78>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10d      	bne.n	80043a2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <HAL_TIM_Base_MspInit+0x74>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	4a08      	ldr	r2, [pc, #32]	; (80043b0 <HAL_TIM_Base_MspInit+0x74>)
 8004390:	f043 0310 	orr.w	r3, r3, #16
 8004394:	6413      	str	r3, [r2, #64]	; 0x40
 8004396:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <HAL_TIM_Base_MspInit+0x74>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	60bb      	str	r3, [r7, #8]
 80043a0:	68bb      	ldr	r3, [r7, #8]
}
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40000800 	.word	0x40000800
 80043b0:	40023800 	.word	0x40023800
 80043b4:	40001000 	.word	0x40001000

080043b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	; 0x28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c0:	f107 0314 	add.w	r3, r7, #20
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	605a      	str	r2, [r3, #4]
 80043ca:	609a      	str	r2, [r3, #8]
 80043cc:	60da      	str	r2, [r3, #12]
 80043ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a34      	ldr	r2, [pc, #208]	; (80044a8 <HAL_UART_MspInit+0xf0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d162      	bne.n	80044a0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	4b33      	ldr	r3, [pc, #204]	; (80044ac <HAL_UART_MspInit+0xf4>)
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	4a32      	ldr	r2, [pc, #200]	; (80044ac <HAL_UART_MspInit+0xf4>)
 80043e4:	f043 0310 	orr.w	r3, r3, #16
 80043e8:	6453      	str	r3, [r2, #68]	; 0x44
 80043ea:	4b30      	ldr	r3, [pc, #192]	; (80044ac <HAL_UART_MspInit+0xf4>)
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	4b2c      	ldr	r3, [pc, #176]	; (80044ac <HAL_UART_MspInit+0xf4>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	4a2b      	ldr	r2, [pc, #172]	; (80044ac <HAL_UART_MspInit+0xf4>)
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	6313      	str	r3, [r2, #48]	; 0x30
 8004406:	4b29      	ldr	r3, [pc, #164]	; (80044ac <HAL_UART_MspInit+0xf4>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004412:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004418:	2302      	movs	r3, #2
 800441a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004420:	2303      	movs	r3, #3
 8004422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004424:	2307      	movs	r3, #7
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004428:	f107 0314 	add.w	r3, r7, #20
 800442c:	4619      	mov	r1, r3
 800442e:	4820      	ldr	r0, [pc, #128]	; (80044b0 <HAL_UART_MspInit+0xf8>)
 8004430:	f001 ff9a 	bl	8006368 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004434:	4b1f      	ldr	r3, [pc, #124]	; (80044b4 <HAL_UART_MspInit+0xfc>)
 8004436:	4a20      	ldr	r2, [pc, #128]	; (80044b8 <HAL_UART_MspInit+0x100>)
 8004438:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800443a:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <HAL_UART_MspInit+0xfc>)
 800443c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004440:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004442:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <HAL_UART_MspInit+0xfc>)
 8004444:	2200      	movs	r2, #0
 8004446:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004448:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <HAL_UART_MspInit+0xfc>)
 800444a:	2200      	movs	r2, #0
 800444c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800444e:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <HAL_UART_MspInit+0xfc>)
 8004450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004454:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004456:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <HAL_UART_MspInit+0xfc>)
 8004458:	2200      	movs	r2, #0
 800445a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800445c:	4b15      	ldr	r3, [pc, #84]	; (80044b4 <HAL_UART_MspInit+0xfc>)
 800445e:	2200      	movs	r2, #0
 8004460:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004462:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <HAL_UART_MspInit+0xfc>)
 8004464:	2200      	movs	r2, #0
 8004466:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004468:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <HAL_UART_MspInit+0xfc>)
 800446a:	2200      	movs	r2, #0
 800446c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800446e:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <HAL_UART_MspInit+0xfc>)
 8004470:	2200      	movs	r2, #0
 8004472:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004474:	480f      	ldr	r0, [pc, #60]	; (80044b4 <HAL_UART_MspInit+0xfc>)
 8004476:	f001 fb75 	bl	8005b64 <HAL_DMA_Init>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004480:	f7ff fc4c 	bl	8003d1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a0b      	ldr	r2, [pc, #44]	; (80044b4 <HAL_UART_MspInit+0xfc>)
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
 800448a:	4a0a      	ldr	r2, [pc, #40]	; (80044b4 <HAL_UART_MspInit+0xfc>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004490:	2200      	movs	r2, #0
 8004492:	2100      	movs	r1, #0
 8004494:	2025      	movs	r0, #37	; 0x25
 8004496:	f001 fb2e 	bl	8005af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800449a:	2025      	movs	r0, #37	; 0x25
 800449c:	f001 fb47 	bl	8005b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80044a0:	bf00      	nop
 80044a2:	3728      	adds	r7, #40	; 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40011000 	.word	0x40011000
 80044ac:	40023800 	.word	0x40023800
 80044b0:	40020000 	.word	0x40020000
 80044b4:	20000524 	.word	0x20000524
 80044b8:	40026440 	.word	0x40026440

080044bc <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1,Timer2 = 0;
void SDTimer_Handler(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
	if(Timer1>0)
 80044c0:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <SDTimer_Handler+0x40>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d006      	beq.n	80044d8 <SDTimer_Handler+0x1c>
	{
		Timer1--;
 80044ca:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <SDTimer_Handler+0x40>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	4b09      	ldr	r3, [pc, #36]	; (80044fc <SDTimer_Handler+0x40>)
 80044d6:	701a      	strb	r2, [r3, #0]
	}

	if(Timer2>0)
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <SDTimer_Handler+0x44>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d006      	beq.n	80044f0 <SDTimer_Handler+0x34>
	{
		Timer2--;
 80044e2:	4b07      	ldr	r3, [pc, #28]	; (8004500 <SDTimer_Handler+0x44>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	4b04      	ldr	r3, [pc, #16]	; (8004500 <SDTimer_Handler+0x44>)
 80044ee:	701a      	strb	r2, [r3, #0]
	}
}
 80044f0:	bf00      	nop
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	20001279 	.word	0x20001279
 8004500:	2000127a 	.word	0x2000127a

08004504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004508:	e7fe      	b.n	8004508 <NMI_Handler+0x4>

0800450a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800450a:	b480      	push	{r7}
 800450c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800450e:	e7fe      	b.n	800450e <HardFault_Handler+0x4>

08004510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004514:	e7fe      	b.n	8004514 <MemManage_Handler+0x4>

08004516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004516:	b480      	push	{r7}
 8004518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800451a:	e7fe      	b.n	800451a <BusFault_Handler+0x4>

0800451c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004520:	e7fe      	b.n	8004520 <UsageFault_Handler+0x4>

08004522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004522:	b480      	push	{r7}
 8004524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004542:	bf00      	nop
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8004550:	4b0a      	ldr	r3, [pc, #40]	; (800457c <SysTick_Handler+0x30>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	3301      	adds	r3, #1
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4b08      	ldr	r3, [pc, #32]	; (800457c <SysTick_Handler+0x30>)
 800455c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 800455e:	4b07      	ldr	r3, [pc, #28]	; (800457c <SysTick_Handler+0x30>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b09      	cmp	r3, #9
 8004566:	d904      	bls.n	8004572 <SysTick_Handler+0x26>
	{
		FatFsCnt=0;
 8004568:	4b04      	ldr	r3, [pc, #16]	; (800457c <SysTick_Handler+0x30>)
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800456e:	f7ff ffa5 	bl	80044bc <SDTimer_Handler>

	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004572:	f000 fd8f 	bl	8005094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20001278 	.word	0x20001278

08004580 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004584:	4802      	ldr	r0, [pc, #8]	; (8004590 <TIM4_IRQHandler+0x10>)
 8004586:	f004 fc24 	bl	8008dd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000450 	.word	0x20000450

08004594 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004598:	4802      	ldr	r0, [pc, #8]	; (80045a4 <USART1_IRQHandler+0x10>)
 800459a:	f005 f91f 	bl	80097dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	200004e0 	.word	0x200004e0

080045a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80045ac:	4802      	ldr	r0, [pc, #8]	; (80045b8 <DMA2_Stream0_IRQHandler+0x10>)
 80045ae:	f001 fc71 	bl	8005e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80045b2:	bf00      	nop
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	2000028c 	.word	0x2000028c

080045bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80045c0:	4802      	ldr	r0, [pc, #8]	; (80045cc <DMA2_Stream2_IRQHandler+0x10>)
 80045c2:	f001 fc67 	bl	8005e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80045c6:	bf00      	nop
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000524 	.word	0x20000524

080045d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return 1;
 80045d4:	2301      	movs	r3, #1
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <_kill>:

int _kill(int pid, int sig)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80045ea:	f009 fc15 	bl	800de18 <__errno>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2216      	movs	r2, #22
 80045f2:	601a      	str	r2, [r3, #0]
  return -1;
 80045f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <_exit>:

void _exit (int status)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004608:	f04f 31ff 	mov.w	r1, #4294967295
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff ffe7 	bl	80045e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004612:	e7fe      	b.n	8004612 <_exit+0x12>

08004614 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e00a      	b.n	800463c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004626:	f3af 8000 	nop.w
 800462a:	4601      	mov	r1, r0
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	60ba      	str	r2, [r7, #8]
 8004632:	b2ca      	uxtb	r2, r1
 8004634:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	3301      	adds	r3, #1
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	dbf0      	blt.n	8004626 <_read+0x12>
  }

  return len;
 8004644:	687b      	ldr	r3, [r7, #4]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b086      	sub	sp, #24
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	e009      	b.n	8004674 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	60ba      	str	r2, [r7, #8]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	3301      	adds	r3, #1
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	429a      	cmp	r2, r3
 800467a:	dbf1      	blt.n	8004660 <_write+0x12>
  }
  return len;
 800467c:	687b      	ldr	r3, [r7, #4]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <_close>:

int _close(int file)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800468e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004692:	4618      	mov	r0, r3
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046ae:	605a      	str	r2, [r3, #4]
  return 0;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <_isatty>:

int _isatty(int file)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046c6:	2301      	movs	r3, #1
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
	...

080046f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046f8:	4a14      	ldr	r2, [pc, #80]	; (800474c <_sbrk+0x5c>)
 80046fa:	4b15      	ldr	r3, [pc, #84]	; (8004750 <_sbrk+0x60>)
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004704:	4b13      	ldr	r3, [pc, #76]	; (8004754 <_sbrk+0x64>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d102      	bne.n	8004712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800470c:	4b11      	ldr	r3, [pc, #68]	; (8004754 <_sbrk+0x64>)
 800470e:	4a12      	ldr	r2, [pc, #72]	; (8004758 <_sbrk+0x68>)
 8004710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004712:	4b10      	ldr	r3, [pc, #64]	; (8004754 <_sbrk+0x64>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4413      	add	r3, r2
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	429a      	cmp	r2, r3
 800471e:	d207      	bcs.n	8004730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004720:	f009 fb7a 	bl	800de18 <__errno>
 8004724:	4603      	mov	r3, r0
 8004726:	220c      	movs	r2, #12
 8004728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295
 800472e:	e009      	b.n	8004744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004730:	4b08      	ldr	r3, [pc, #32]	; (8004754 <_sbrk+0x64>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004736:	4b07      	ldr	r3, [pc, #28]	; (8004754 <_sbrk+0x64>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4413      	add	r3, r2
 800473e:	4a05      	ldr	r2, [pc, #20]	; (8004754 <_sbrk+0x64>)
 8004740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004742:	68fb      	ldr	r3, [r7, #12]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20020000 	.word	0x20020000
 8004750:	00000400 	.word	0x00000400
 8004754:	2000127c 	.word	0x2000127c
 8004758:	200014f8 	.word	0x200014f8

0800475c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <SystemInit+0x20>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	4a05      	ldr	r2, [pc, #20]	; (800477c <SystemInit+0x20>)
 8004768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800476c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004770:	bf00      	nop
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	e000ed00 	.word	0xe000ed00

08004780 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af02      	add	r7, sp, #8
 8004786:	4603      	mov	r3, r0
 8004788:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800478a:	f107 020f 	add.w	r2, r7, #15
 800478e:	1df9      	adds	r1, r7, #7
 8004790:	2364      	movs	r3, #100	; 0x64
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	2301      	movs	r3, #1
 8004796:	4804      	ldr	r0, [pc, #16]	; (80047a8 <W25qxx_Spi+0x28>)
 8004798:	f003 fee4 	bl	8008564 <HAL_SPI_TransmitReceive>
	return ret;
 800479c:	7bfb      	ldrb	r3, [r7, #15]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	200003a0 	.word	0x200003a0

080047ac <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	2300      	movs	r3, #0
 80047bc:	607b      	str	r3, [r7, #4]
 80047be:	2300      	movs	r3, #0
 80047c0:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80047c2:	2200      	movs	r2, #0
 80047c4:	2101      	movs	r1, #1
 80047c6:	4813      	ldr	r0, [pc, #76]	; (8004814 <W25qxx_ReadID+0x68>)
 80047c8:	f001 ff82 	bl	80066d0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80047cc:	209f      	movs	r0, #159	; 0x9f
 80047ce:	f7ff ffd7 	bl	8004780 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80047d2:	20a5      	movs	r0, #165	; 0xa5
 80047d4:	f7ff ffd4 	bl	8004780 <W25qxx_Spi>
 80047d8:	4603      	mov	r3, r0
 80047da:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80047dc:	20a5      	movs	r0, #165	; 0xa5
 80047de:	f7ff ffcf 	bl	8004780 <W25qxx_Spi>
 80047e2:	4603      	mov	r3, r0
 80047e4:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80047e6:	20a5      	movs	r0, #165	; 0xa5
 80047e8:	f7ff ffca 	bl	8004780 <W25qxx_Spi>
 80047ec:	4603      	mov	r3, r0
 80047ee:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80047f0:	2201      	movs	r2, #1
 80047f2:	2101      	movs	r1, #1
 80047f4:	4807      	ldr	r0, [pc, #28]	; (8004814 <W25qxx_ReadID+0x68>)
 80047f6:	f001 ff6b 	bl	80066d0 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	041a      	lsls	r2, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	4313      	orrs	r3, r2
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]
	return Temp;
 800480a:	68fb      	ldr	r3, [r7, #12]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40020400 	.word	0x40020400

08004818 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800481e:	2200      	movs	r2, #0
 8004820:	2101      	movs	r1, #1
 8004822:	4816      	ldr	r0, [pc, #88]	; (800487c <W25qxx_ReadUniqID+0x64>)
 8004824:	f001 ff54 	bl	80066d0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004828:	204b      	movs	r0, #75	; 0x4b
 800482a:	f7ff ffa9 	bl	8004780 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800482e:	2300      	movs	r3, #0
 8004830:	71fb      	strb	r3, [r7, #7]
 8004832:	e005      	b.n	8004840 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004834:	20a5      	movs	r0, #165	; 0xa5
 8004836:	f7ff ffa3 	bl	8004780 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	3301      	adds	r3, #1
 800483e:	71fb      	strb	r3, [r7, #7]
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	2b03      	cmp	r3, #3
 8004844:	d9f6      	bls.n	8004834 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8004846:	2300      	movs	r3, #0
 8004848:	71bb      	strb	r3, [r7, #6]
 800484a:	e00b      	b.n	8004864 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800484c:	79bc      	ldrb	r4, [r7, #6]
 800484e:	20a5      	movs	r0, #165	; 0xa5
 8004850:	f7ff ff96 	bl	8004780 <W25qxx_Spi>
 8004854:	4603      	mov	r3, r0
 8004856:	461a      	mov	r2, r3
 8004858:	4b09      	ldr	r3, [pc, #36]	; (8004880 <W25qxx_ReadUniqID+0x68>)
 800485a:	4423      	add	r3, r4
 800485c:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800485e:	79bb      	ldrb	r3, [r7, #6]
 8004860:	3301      	adds	r3, #1
 8004862:	71bb      	strb	r3, [r7, #6]
 8004864:	79bb      	ldrb	r3, [r7, #6]
 8004866:	2b07      	cmp	r3, #7
 8004868:	d9f0      	bls.n	800484c <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800486a:	2201      	movs	r2, #1
 800486c:	2101      	movs	r1, #1
 800486e:	4803      	ldr	r0, [pc, #12]	; (800487c <W25qxx_ReadUniqID+0x64>)
 8004870:	f001 ff2e 	bl	80066d0 <HAL_GPIO_WritePin>
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	40020400 	.word	0x40020400
 8004880:	20001280 	.word	0x20001280

08004884 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004888:	2200      	movs	r2, #0
 800488a:	2101      	movs	r1, #1
 800488c:	4807      	ldr	r0, [pc, #28]	; (80048ac <W25qxx_WriteEnable+0x28>)
 800488e:	f001 ff1f 	bl	80066d0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8004892:	2006      	movs	r0, #6
 8004894:	f7ff ff74 	bl	8004780 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004898:	2201      	movs	r2, #1
 800489a:	2101      	movs	r1, #1
 800489c:	4803      	ldr	r0, [pc, #12]	; (80048ac <W25qxx_WriteEnable+0x28>)
 800489e:	f001 ff17 	bl	80066d0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80048a2:	2001      	movs	r0, #1
 80048a4:	f000 fc16 	bl	80050d4 <HAL_Delay>
}
 80048a8:	bf00      	nop
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40020400 	.word	0x40020400

080048b0 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80048be:	2200      	movs	r2, #0
 80048c0:	2101      	movs	r1, #1
 80048c2:	481c      	ldr	r0, [pc, #112]	; (8004934 <W25qxx_ReadStatusRegister+0x84>)
 80048c4:	f001 ff04 	bl	80066d0 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d10c      	bne.n	80048e8 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80048ce:	2005      	movs	r0, #5
 80048d0:	f7ff ff56 	bl	8004780 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80048d4:	20a5      	movs	r0, #165	; 0xa5
 80048d6:	f7ff ff53 	bl	8004780 <W25qxx_Spi>
 80048da:	4603      	mov	r3, r0
 80048dc:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80048de:	4a16      	ldr	r2, [pc, #88]	; (8004938 <W25qxx_ReadStatusRegister+0x88>)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80048e6:	e01b      	b.n	8004920 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d10c      	bne.n	8004908 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80048ee:	2035      	movs	r0, #53	; 0x35
 80048f0:	f7ff ff46 	bl	8004780 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80048f4:	20a5      	movs	r0, #165	; 0xa5
 80048f6:	f7ff ff43 	bl	8004780 <W25qxx_Spi>
 80048fa:	4603      	mov	r3, r0
 80048fc:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80048fe:	4a0e      	ldr	r2, [pc, #56]	; (8004938 <W25qxx_ReadStatusRegister+0x88>)
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004906:	e00b      	b.n	8004920 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004908:	2015      	movs	r0, #21
 800490a:	f7ff ff39 	bl	8004780 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800490e:	20a5      	movs	r0, #165	; 0xa5
 8004910:	f7ff ff36 	bl	8004780 <W25qxx_Spi>
 8004914:	4603      	mov	r3, r0
 8004916:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004918:	4a07      	ldr	r2, [pc, #28]	; (8004938 <W25qxx_ReadStatusRegister+0x88>)
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004920:	2201      	movs	r2, #1
 8004922:	2101      	movs	r1, #1
 8004924:	4803      	ldr	r0, [pc, #12]	; (8004934 <W25qxx_ReadStatusRegister+0x84>)
 8004926:	f001 fed3 	bl	80066d0 <HAL_GPIO_WritePin>
	return status;
 800492a:	7bfb      	ldrb	r3, [r7, #15]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40020400 	.word	0x40020400
 8004938:	20001280 	.word	0x20001280

0800493c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8004940:	2001      	movs	r0, #1
 8004942:	f000 fbc7 	bl	80050d4 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004946:	2200      	movs	r2, #0
 8004948:	2101      	movs	r1, #1
 800494a:	480f      	ldr	r0, [pc, #60]	; (8004988 <W25qxx_WaitForWriteEnd+0x4c>)
 800494c:	f001 fec0 	bl	80066d0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8004950:	2005      	movs	r0, #5
 8004952:	f7ff ff15 	bl	8004780 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004956:	20a5      	movs	r0, #165	; 0xa5
 8004958:	f7ff ff12 	bl	8004780 <W25qxx_Spi>
 800495c:	4603      	mov	r3, r0
 800495e:	461a      	mov	r2, r3
 8004960:	4b0a      	ldr	r3, [pc, #40]	; (800498c <W25qxx_WaitForWriteEnd+0x50>)
 8004962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8004966:	2001      	movs	r0, #1
 8004968:	f000 fbb4 	bl	80050d4 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800496c:	4b07      	ldr	r3, [pc, #28]	; (800498c <W25qxx_WaitForWriteEnd+0x50>)
 800496e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1ed      	bne.n	8004956 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800497a:	2201      	movs	r2, #1
 800497c:	2101      	movs	r1, #1
 800497e:	4802      	ldr	r0, [pc, #8]	; (8004988 <W25qxx_WaitForWriteEnd+0x4c>)
 8004980:	f001 fea6 	bl	80066d0 <HAL_GPIO_WritePin>
}
 8004984:	bf00      	nop
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40020400 	.word	0x40020400
 800498c:	20001280 	.word	0x20001280

08004990 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8004996:	4b65      	ldr	r3, [pc, #404]	; (8004b2c <W25qxx_Init+0x19c>)
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800499e:	e002      	b.n	80049a6 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80049a0:	2001      	movs	r0, #1
 80049a2:	f000 fb97 	bl	80050d4 <HAL_Delay>
	while (HAL_GetTick() < 100)
 80049a6:	f000 fb89 	bl	80050bc <HAL_GetTick>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b63      	cmp	r3, #99	; 0x63
 80049ae:	d9f7      	bls.n	80049a0 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80049b0:	2201      	movs	r2, #1
 80049b2:	2101      	movs	r1, #1
 80049b4:	485e      	ldr	r0, [pc, #376]	; (8004b30 <W25qxx_Init+0x1a0>)
 80049b6:	f001 fe8b 	bl	80066d0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80049ba:	2064      	movs	r0, #100	; 0x64
 80049bc:	f000 fb8a 	bl	80050d4 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80049c0:	f7ff fef4 	bl	80047ac <W25qxx_ReadID>
 80049c4:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	3b11      	subs	r3, #17
 80049cc:	2b0f      	cmp	r3, #15
 80049ce:	d86c      	bhi.n	8004aaa <W25qxx_Init+0x11a>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <W25qxx_Init+0x48>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	08004a9d 	.word	0x08004a9d
 80049dc:	08004a8f 	.word	0x08004a8f
 80049e0:	08004a81 	.word	0x08004a81
 80049e4:	08004a73 	.word	0x08004a73
 80049e8:	08004a65 	.word	0x08004a65
 80049ec:	08004a57 	.word	0x08004a57
 80049f0:	08004a49 	.word	0x08004a49
 80049f4:	08004a39 	.word	0x08004a39
 80049f8:	08004a29 	.word	0x08004a29
 80049fc:	08004aab 	.word	0x08004aab
 8004a00:	08004aab 	.word	0x08004aab
 8004a04:	08004aab 	.word	0x08004aab
 8004a08:	08004aab 	.word	0x08004aab
 8004a0c:	08004aab 	.word	0x08004aab
 8004a10:	08004aab 	.word	0x08004aab
 8004a14:	08004a19 	.word	0x08004a19
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004a18:	4b44      	ldr	r3, [pc, #272]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a1a:	220a      	movs	r2, #10
 8004a1c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004a1e:	4b43      	ldr	r3, [pc, #268]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a24:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8004a26:	e046      	b.n	8004ab6 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004a28:	4b40      	ldr	r3, [pc, #256]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a2a:	2209      	movs	r2, #9
 8004a2c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004a2e:	4b3f      	ldr	r3, [pc, #252]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a34:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8004a36:	e03e      	b.n	8004ab6 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004a38:	4b3c      	ldr	r3, [pc, #240]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a3a:	2208      	movs	r2, #8
 8004a3c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004a3e:	4b3b      	ldr	r3, [pc, #236]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a44:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8004a46:	e036      	b.n	8004ab6 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8004a48:	4b38      	ldr	r3, [pc, #224]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a4a:	2207      	movs	r2, #7
 8004a4c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004a4e:	4b37      	ldr	r3, [pc, #220]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a50:	2280      	movs	r2, #128	; 0x80
 8004a52:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8004a54:	e02f      	b.n	8004ab6 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004a56:	4b35      	ldr	r3, [pc, #212]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a58:	2206      	movs	r2, #6
 8004a5a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004a5c:	4b33      	ldr	r3, [pc, #204]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a5e:	2240      	movs	r2, #64	; 0x40
 8004a60:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8004a62:	e028      	b.n	8004ab6 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004a64:	4b31      	ldr	r3, [pc, #196]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a66:	2205      	movs	r2, #5
 8004a68:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004a6a:	4b30      	ldr	r3, [pc, #192]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8004a70:	e021      	b.n	8004ab6 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8004a72:	4b2e      	ldr	r3, [pc, #184]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a74:	2204      	movs	r2, #4
 8004a76:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004a78:	4b2c      	ldr	r3, [pc, #176]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a7a:	2210      	movs	r2, #16
 8004a7c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8004a7e:	e01a      	b.n	8004ab6 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8004a80:	4b2a      	ldr	r3, [pc, #168]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a82:	2203      	movs	r2, #3
 8004a84:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004a86:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a88:	2208      	movs	r2, #8
 8004a8a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8004a8c:	e013      	b.n	8004ab6 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004a8e:	4b27      	ldr	r3, [pc, #156]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a90:	2202      	movs	r2, #2
 8004a92:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004a94:	4b25      	ldr	r3, [pc, #148]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a96:	2204      	movs	r2, #4
 8004a98:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8004a9a:	e00c      	b.n	8004ab6 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004a9c:	4b23      	ldr	r3, [pc, #140]	; (8004b2c <W25qxx_Init+0x19c>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004aa2:	4b22      	ldr	r3, [pc, #136]	; (8004b2c <W25qxx_Init+0x19c>)
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8004aa8:	e005      	b.n	8004ab6 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8004aaa:	4b20      	ldr	r3, [pc, #128]	; (8004b2c <W25qxx_Init+0x19c>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e036      	b.n	8004b24 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8004ab6:	4b1d      	ldr	r3, [pc, #116]	; (8004b2c <W25qxx_Init+0x19c>)
 8004ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004abc:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004abe:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <W25qxx_Init+0x19c>)
 8004ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ac4:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004ac6:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <W25qxx_Init+0x19c>)
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	4a17      	ldr	r2, [pc, #92]	; (8004b2c <W25qxx_Init+0x19c>)
 8004ace:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004ad0:	4b16      	ldr	r3, [pc, #88]	; (8004b2c <W25qxx_Init+0x19c>)
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	4a15      	ldr	r2, [pc, #84]	; (8004b2c <W25qxx_Init+0x19c>)
 8004ad6:	6912      	ldr	r2, [r2, #16]
 8004ad8:	fb02 f303 	mul.w	r3, r2, r3
 8004adc:	4a13      	ldr	r2, [pc, #76]	; (8004b2c <W25qxx_Init+0x19c>)
 8004ade:	8952      	ldrh	r2, [r2, #10]
 8004ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ae4:	4a11      	ldr	r2, [pc, #68]	; (8004b2c <W25qxx_Init+0x19c>)
 8004ae6:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004ae8:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <W25qxx_Init+0x19c>)
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	4a0f      	ldr	r2, [pc, #60]	; (8004b2c <W25qxx_Init+0x19c>)
 8004af0:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004af2:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <W25qxx_Init+0x19c>)
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	4a0d      	ldr	r2, [pc, #52]	; (8004b2c <W25qxx_Init+0x19c>)
 8004af8:	6912      	ldr	r2, [r2, #16]
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	0a9b      	lsrs	r3, r3, #10
 8004b00:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <W25qxx_Init+0x19c>)
 8004b02:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004b04:	f7ff fe88 	bl	8004818 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004b08:	2001      	movs	r0, #1
 8004b0a:	f7ff fed1 	bl	80048b0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004b0e:	2002      	movs	r0, #2
 8004b10:	f7ff fece 	bl	80048b0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8004b14:	2003      	movs	r0, #3
 8004b16:	f7ff fecb 	bl	80048b0 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8004b1a:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <W25qxx_Init+0x19c>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004b22:	2301      	movs	r3, #1
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20001280 	.word	0x20001280
 8004b30:	40020400 	.word	0x40020400

08004b34 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004b3c:	e002      	b.n	8004b44 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004b3e:	2001      	movs	r0, #1
 8004b40:	f000 fac8 	bl	80050d4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004b44:	4b25      	ldr	r3, [pc, #148]	; (8004bdc <W25qxx_EraseSector+0xa8>)
 8004b46:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d0f7      	beq.n	8004b3e <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004b4e:	4b23      	ldr	r3, [pc, #140]	; (8004bdc <W25qxx_EraseSector+0xa8>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8004b56:	f7ff fef1 	bl	800493c <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8004b5a:	4b20      	ldr	r3, [pc, #128]	; (8004bdc <W25qxx_EraseSector+0xa8>)
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	fb02 f303 	mul.w	r3, r2, r3
 8004b64:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004b66:	f7ff fe8d 	bl	8004884 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	481c      	ldr	r0, [pc, #112]	; (8004be0 <W25qxx_EraseSector+0xac>)
 8004b70:	f001 fdae 	bl	80066d0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004b74:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <W25qxx_EraseSector+0xa8>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d909      	bls.n	8004b90 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8004b7c:	2021      	movs	r0, #33	; 0x21
 8004b7e:	f7ff fdff 	bl	8004780 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	0e1b      	lsrs	r3, r3, #24
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fdf9 	bl	8004780 <W25qxx_Spi>
 8004b8e:	e002      	b.n	8004b96 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8004b90:	2020      	movs	r0, #32
 8004b92:	f7ff fdf5 	bl	8004780 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fdef 	bl	8004780 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0a1b      	lsrs	r3, r3, #8
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fde9 	bl	8004780 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff fde4 	bl	8004780 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004bb8:	2201      	movs	r2, #1
 8004bba:	2101      	movs	r1, #1
 8004bbc:	4808      	ldr	r0, [pc, #32]	; (8004be0 <W25qxx_EraseSector+0xac>)
 8004bbe:	f001 fd87 	bl	80066d0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004bc2:	f7ff febb 	bl	800493c <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8004bc6:	2001      	movs	r0, #1
 8004bc8:	f000 fa84 	bl	80050d4 <HAL_Delay>
	w25qxx.Lock = 0;
 8004bcc:	4b03      	ldr	r3, [pc, #12]	; (8004bdc <W25qxx_EraseSector+0xa8>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004bd4:	bf00      	nop
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20001280 	.word	0x20001280
 8004be0:	40020400 	.word	0x40020400

08004be4 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004bec:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <W25qxx_SectorToPage+0x28>)
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	4a05      	ldr	r2, [pc, #20]	; (8004c0c <W25qxx_SectorToPage+0x28>)
 8004bf8:	8952      	ldrh	r2, [r2, #10]
 8004bfa:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	20001280 	.word	0x20001280

08004c10 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004c1e:	e002      	b.n	8004c26 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004c20:	2001      	movs	r0, #1
 8004c22:	f000 fa57 	bl	80050d4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004c26:	4b39      	ldr	r3, [pc, #228]	; (8004d0c <W25qxx_WritePage+0xfc>)
 8004c28:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d0f7      	beq.n	8004c20 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004c30:	4b36      	ldr	r3, [pc, #216]	; (8004d0c <W25qxx_WritePage+0xfc>)
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	4a33      	ldr	r2, [pc, #204]	; (8004d0c <W25qxx_WritePage+0xfc>)
 8004c40:	8952      	ldrh	r2, [r2, #10]
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d802      	bhi.n	8004c4c <W25qxx_WritePage+0x3c>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d105      	bne.n	8004c58 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004c4c:	4b2f      	ldr	r3, [pc, #188]	; (8004d0c <W25qxx_WritePage+0xfc>)
 8004c4e:	895b      	ldrh	r3, [r3, #10]
 8004c50:	461a      	mov	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	4a2b      	ldr	r2, [pc, #172]	; (8004d0c <W25qxx_WritePage+0xfc>)
 8004c60:	8952      	ldrh	r2, [r2, #10]
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d905      	bls.n	8004c72 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004c66:	4b29      	ldr	r3, [pc, #164]	; (8004d0c <W25qxx_WritePage+0xfc>)
 8004c68:	895b      	ldrh	r3, [r3, #10]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8004c72:	f7ff fe63 	bl	800493c <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8004c76:	f7ff fe05 	bl	8004884 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	4824      	ldr	r0, [pc, #144]	; (8004d10 <W25qxx_WritePage+0x100>)
 8004c80:	f001 fd26 	bl	80066d0 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004c84:	4b21      	ldr	r3, [pc, #132]	; (8004d0c <W25qxx_WritePage+0xfc>)
 8004c86:	895b      	ldrh	r3, [r3, #10]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	4413      	add	r3, r2
 8004c94:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8004c96:	4b1d      	ldr	r3, [pc, #116]	; (8004d0c <W25qxx_WritePage+0xfc>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d909      	bls.n	8004cb2 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8004c9e:	2012      	movs	r0, #18
 8004ca0:	f7ff fd6e 	bl	8004780 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	0e1b      	lsrs	r3, r3, #24
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fd68 	bl	8004780 <W25qxx_Spi>
 8004cb0:	e002      	b.n	8004cb8 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8004cb2:	2002      	movs	r0, #2
 8004cb4:	f7ff fd64 	bl	8004780 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	0c1b      	lsrs	r3, r3, #16
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fd5e 	bl	8004780 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff fd58 	bl	8004780 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff fd53 	bl	8004780 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	2364      	movs	r3, #100	; 0x64
 8004ce0:	68f9      	ldr	r1, [r7, #12]
 8004ce2:	480c      	ldr	r0, [pc, #48]	; (8004d14 <W25qxx_WritePage+0x104>)
 8004ce4:	f003 f9f1 	bl	80080ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004ce8:	2201      	movs	r2, #1
 8004cea:	2101      	movs	r1, #1
 8004cec:	4808      	ldr	r0, [pc, #32]	; (8004d10 <W25qxx_WritePage+0x100>)
 8004cee:	f001 fcef 	bl	80066d0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004cf2:	f7ff fe23 	bl	800493c <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	f000 f9ec 	bl	80050d4 <HAL_Delay>
	w25qxx.Lock = 0;
 8004cfc:	4b03      	ldr	r3, [pc, #12]	; (8004d0c <W25qxx_WritePage+0xfc>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004d04:	bf00      	nop
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20001280 	.word	0x20001280
 8004d10:	40020400 	.word	0x40020400
 8004d14:	200003a0 	.word	0x200003a0

08004d18 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004d26:	4b2c      	ldr	r3, [pc, #176]	; (8004dd8 <W25qxx_WriteSector+0xc0>)
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d802      	bhi.n	8004d36 <W25qxx_WriteSector+0x1e>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004d36:	4b28      	ldr	r3, [pc, #160]	; (8004dd8 <W25qxx_WriteSector+0xc0>)
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004d3c:	4b26      	ldr	r3, [pc, #152]	; (8004dd8 <W25qxx_WriteSector+0xc0>)
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d243      	bcs.n	8004dce <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	441a      	add	r2, r3
 8004d4c:	4b22      	ldr	r3, [pc, #136]	; (8004dd8 <W25qxx_WriteSector+0xc0>)
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d905      	bls.n	8004d60 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004d54:	4b20      	ldr	r3, [pc, #128]	; (8004dd8 <W25qxx_WriteSector+0xc0>)
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	e001      	b.n	8004d64 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004d64:	68b8      	ldr	r0, [r7, #8]
 8004d66:	f7ff ff3d 	bl	8004be4 <W25qxx_SectorToPage>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	; (8004dd8 <W25qxx_WriteSector+0xc0>)
 8004d6e:	895b      	ldrh	r3, [r3, #10]
 8004d70:	4619      	mov	r1, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d78:	4413      	add	r3, r2
 8004d7a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004d7c:	4b16      	ldr	r3, [pc, #88]	; (8004dd8 <W25qxx_WriteSector+0xc0>)
 8004d7e:	895b      	ldrh	r3, [r3, #10]
 8004d80:	461a      	mov	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d88:	fb01 f202 	mul.w	r2, r1, r2
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	69f9      	ldr	r1, [r7, #28]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7ff ff3a 	bl	8004c10 <W25qxx_WritePage>
		StartPage++;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8004da2:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <W25qxx_WriteSector+0xc0>)
 8004da4:	895b      	ldrh	r3, [r3, #10]
 8004da6:	461a      	mov	r2, r3
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	1a9a      	subs	r2, r3, r2
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	4413      	add	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004db2:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <W25qxx_WriteSector+0xc0>)
 8004db4:	895b      	ldrh	r3, [r3, #10]
 8004db6:	461a      	mov	r2, r3
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	dce1      	bgt.n	8004d90 <W25qxx_WriteSector+0x78>
 8004dcc:	e000      	b.n	8004dd0 <W25qxx_WriteSector+0xb8>
		return;
 8004dce:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004dd0:	3720      	adds	r7, #32
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20001280 	.word	0x20001280

08004ddc <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004dea:	e002      	b.n	8004df2 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004dec:	2001      	movs	r0, #1
 8004dee:	f000 f971 	bl	80050d4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004df2:	4b36      	ldr	r3, [pc, #216]	; (8004ecc <W25qxx_ReadPage+0xf0>)
 8004df4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d0f7      	beq.n	8004dec <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004dfc:	4b33      	ldr	r3, [pc, #204]	; (8004ecc <W25qxx_ReadPage+0xf0>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004e04:	4b31      	ldr	r3, [pc, #196]	; (8004ecc <W25qxx_ReadPage+0xf0>)
 8004e06:	895b      	ldrh	r3, [r3, #10]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d802      	bhi.n	8004e16 <W25qxx_ReadPage+0x3a>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d102      	bne.n	8004e1c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004e16:	4b2d      	ldr	r3, [pc, #180]	; (8004ecc <W25qxx_ReadPage+0xf0>)
 8004e18:	895b      	ldrh	r3, [r3, #10]
 8004e1a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	4413      	add	r3, r2
 8004e22:	4a2a      	ldr	r2, [pc, #168]	; (8004ecc <W25qxx_ReadPage+0xf0>)
 8004e24:	8952      	ldrh	r2, [r2, #10]
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d905      	bls.n	8004e36 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004e2a:	4b28      	ldr	r3, [pc, #160]	; (8004ecc <W25qxx_ReadPage+0xf0>)
 8004e2c:	895b      	ldrh	r3, [r3, #10]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004e36:	4b25      	ldr	r3, [pc, #148]	; (8004ecc <W25qxx_ReadPage+0xf0>)
 8004e38:	895b      	ldrh	r3, [r3, #10]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	fb02 f303 	mul.w	r3, r2, r3
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	4413      	add	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	4820      	ldr	r0, [pc, #128]	; (8004ed0 <W25qxx_ReadPage+0xf4>)
 8004e4e:	f001 fc3f 	bl	80066d0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004e52:	4b1e      	ldr	r3, [pc, #120]	; (8004ecc <W25qxx_ReadPage+0xf0>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d909      	bls.n	8004e6e <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8004e5a:	200c      	movs	r0, #12
 8004e5c:	f7ff fc90 	bl	8004780 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	0e1b      	lsrs	r3, r3, #24
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff fc8a 	bl	8004780 <W25qxx_Spi>
 8004e6c:	e002      	b.n	8004e74 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8004e6e:	200b      	movs	r0, #11
 8004e70:	f7ff fc86 	bl	8004780 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	0c1b      	lsrs	r3, r3, #16
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff fc80 	bl	8004780 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff fc7a 	bl	8004780 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff fc75 	bl	8004780 <W25qxx_Spi>
	W25qxx_Spi(0);
 8004e96:	2000      	movs	r0, #0
 8004e98:	f7ff fc72 	bl	8004780 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	2364      	movs	r3, #100	; 0x64
 8004ea2:	68f9      	ldr	r1, [r7, #12]
 8004ea4:	480b      	ldr	r0, [pc, #44]	; (8004ed4 <W25qxx_ReadPage+0xf8>)
 8004ea6:	f003 fa4c 	bl	8008342 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004eaa:	2201      	movs	r2, #1
 8004eac:	2101      	movs	r1, #1
 8004eae:	4808      	ldr	r0, [pc, #32]	; (8004ed0 <W25qxx_ReadPage+0xf4>)
 8004eb0:	f001 fc0e 	bl	80066d0 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	f000 f90d 	bl	80050d4 <HAL_Delay>
	w25qxx.Lock = 0;
 8004eba:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <W25qxx_ReadPage+0xf0>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20001280 	.word	0x20001280
 8004ed0:	40020400 	.word	0x40020400
 8004ed4:	200003a0 	.word	0x200003a0

08004ed8 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004ee6:	4b2c      	ldr	r3, [pc, #176]	; (8004f98 <W25qxx_ReadSector+0xc0>)
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d802      	bhi.n	8004ef6 <W25qxx_ReadSector+0x1e>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d102      	bne.n	8004efc <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004ef6:	4b28      	ldr	r3, [pc, #160]	; (8004f98 <W25qxx_ReadSector+0xc0>)
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004efc:	4b26      	ldr	r3, [pc, #152]	; (8004f98 <W25qxx_ReadSector+0xc0>)
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d243      	bcs.n	8004f8e <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	441a      	add	r2, r3
 8004f0c:	4b22      	ldr	r3, [pc, #136]	; (8004f98 <W25qxx_ReadSector+0xc0>)
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d905      	bls.n	8004f20 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004f14:	4b20      	ldr	r3, [pc, #128]	; (8004f98 <W25qxx_ReadSector+0xc0>)
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	e001      	b.n	8004f24 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004f24:	68b8      	ldr	r0, [r7, #8]
 8004f26:	f7ff fe5d 	bl	8004be4 <W25qxx_SectorToPage>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	; (8004f98 <W25qxx_ReadSector+0xc0>)
 8004f2e:	895b      	ldrh	r3, [r3, #10]
 8004f30:	4619      	mov	r1, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f38:	4413      	add	r3, r2
 8004f3a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004f3c:	4b16      	ldr	r3, [pc, #88]	; (8004f98 <W25qxx_ReadSector+0xc0>)
 8004f3e:	895b      	ldrh	r3, [r3, #10]
 8004f40:	461a      	mov	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f48:	fb01 f202 	mul.w	r2, r1, r2
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	69f9      	ldr	r1, [r7, #28]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7ff ff40 	bl	8004ddc <W25qxx_ReadPage>
		StartPage++;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004f62:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <W25qxx_ReadSector+0xc0>)
 8004f64:	895b      	ldrh	r3, [r3, #10]
 8004f66:	461a      	mov	r2, r3
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	1a9a      	subs	r2, r3, r2
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	4413      	add	r3, r2
 8004f70:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004f72:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <W25qxx_ReadSector+0xc0>)
 8004f74:	895b      	ldrh	r3, [r3, #10]
 8004f76:	461a      	mov	r2, r3
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	dce1      	bgt.n	8004f50 <W25qxx_ReadSector+0x78>
 8004f8c:	e000      	b.n	8004f90 <W25qxx_ReadSector+0xb8>
		return;
 8004f8e:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004f90:	3720      	adds	r7, #32
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20001280 	.word	0x20001280

08004f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004fa0:	480d      	ldr	r0, [pc, #52]	; (8004fd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004fa2:	490e      	ldr	r1, [pc, #56]	; (8004fdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004fa4:	4a0e      	ldr	r2, [pc, #56]	; (8004fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fa8:	e002      	b.n	8004fb0 <LoopCopyDataInit>

08004faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fae:	3304      	adds	r3, #4

08004fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fb4:	d3f9      	bcc.n	8004faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fb6:	4a0b      	ldr	r2, [pc, #44]	; (8004fe4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004fb8:	4c0b      	ldr	r4, [pc, #44]	; (8004fe8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fbc:	e001      	b.n	8004fc2 <LoopFillZerobss>

08004fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fc0:	3204      	adds	r2, #4

08004fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fc4:	d3fb      	bcc.n	8004fbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004fc6:	f7ff fbc9 	bl	800475c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fca:	f008 ff2b 	bl	800de24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fce:	f7fe fa9b 	bl	8003508 <main>
  bx  lr    
 8004fd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fdc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8004fe0:	080133c0 	.word	0x080133c0
  ldr r2, =_sbss
 8004fe4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004fe8:	200014f8 	.word	0x200014f8

08004fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fec:	e7fe      	b.n	8004fec <ADC_IRQHandler>
	...

08004ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <HAL_Init+0x40>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a0d      	ldr	r2, [pc, #52]	; (8005030 <HAL_Init+0x40>)
 8004ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005000:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <HAL_Init+0x40>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a0a      	ldr	r2, [pc, #40]	; (8005030 <HAL_Init+0x40>)
 8005006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800500a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800500c:	4b08      	ldr	r3, [pc, #32]	; (8005030 <HAL_Init+0x40>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a07      	ldr	r2, [pc, #28]	; (8005030 <HAL_Init+0x40>)
 8005012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005018:	2003      	movs	r0, #3
 800501a:	f000 fd61 	bl	8005ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800501e:	200f      	movs	r0, #15
 8005020:	f000 f808 	bl	8005034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005024:	f7fe ffae 	bl	8003f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40023c00 	.word	0x40023c00

08005034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800503c:	4b12      	ldr	r3, [pc, #72]	; (8005088 <HAL_InitTick+0x54>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4b12      	ldr	r3, [pc, #72]	; (800508c <HAL_InitTick+0x58>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	4619      	mov	r1, r3
 8005046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800504a:	fbb3 f3f1 	udiv	r3, r3, r1
 800504e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fd79 	bl	8005b4a <HAL_SYSTICK_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e00e      	b.n	8005080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b0f      	cmp	r3, #15
 8005066:	d80a      	bhi.n	800507e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005068:	2200      	movs	r2, #0
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	f04f 30ff 	mov.w	r0, #4294967295
 8005070:	f000 fd41 	bl	8005af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005074:	4a06      	ldr	r2, [pc, #24]	; (8005090 <HAL_InitTick+0x5c>)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	e000      	b.n	8005080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
}
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20000004 	.word	0x20000004
 800508c:	2000000c 	.word	0x2000000c
 8005090:	20000008 	.word	0x20000008

08005094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005098:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <HAL_IncTick+0x20>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <HAL_IncTick+0x24>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4413      	add	r3, r2
 80050a4:	4a04      	ldr	r2, [pc, #16]	; (80050b8 <HAL_IncTick+0x24>)
 80050a6:	6013      	str	r3, [r2, #0]
}
 80050a8:	bf00      	nop
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	2000000c 	.word	0x2000000c
 80050b8:	200012a8 	.word	0x200012a8

080050bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return uwTick;
 80050c0:	4b03      	ldr	r3, [pc, #12]	; (80050d0 <HAL_GetTick+0x14>)
 80050c2:	681b      	ldr	r3, [r3, #0]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	200012a8 	.word	0x200012a8

080050d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050dc:	f7ff ffee 	bl	80050bc <HAL_GetTick>
 80050e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ec:	d005      	beq.n	80050fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050ee:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <HAL_Delay+0x44>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050fa:	bf00      	nop
 80050fc:	f7ff ffde 	bl	80050bc <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	429a      	cmp	r2, r3
 800510a:	d8f7      	bhi.n	80050fc <HAL_Delay+0x28>
  {
  }
}
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	2000000c 	.word	0x2000000c

0800511c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e033      	b.n	800519a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d109      	bne.n	800514e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fe ff4a 	bl	8003fd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	f003 0310 	and.w	r3, r3, #16
 8005156:	2b00      	cmp	r3, #0
 8005158:	d118      	bne.n	800518c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005162:	f023 0302 	bic.w	r3, r3, #2
 8005166:	f043 0202 	orr.w	r2, r3, #2
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fa68 	bl	8005644 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f023 0303 	bic.w	r3, r3, #3
 8005182:	f043 0201 	orr.w	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	641a      	str	r2, [r3, #64]	; 0x40
 800518a:	e001      	b.n	8005190 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005198:	7bfb      	ldrb	r3, [r7, #15]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_ADC_Start_DMA+0x1e>
 80051be:	2302      	movs	r3, #2
 80051c0:	e0e9      	b.n	8005396 <HAL_ADC_Start_DMA+0x1f2>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d018      	beq.n	800520a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80051e8:	4b6d      	ldr	r3, [pc, #436]	; (80053a0 <HAL_ADC_Start_DMA+0x1fc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a6d      	ldr	r2, [pc, #436]	; (80053a4 <HAL_ADC_Start_DMA+0x200>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	0c9a      	lsrs	r2, r3, #18
 80051f4:	4613      	mov	r3, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	4413      	add	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80051fc:	e002      	b.n	8005204 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	3b01      	subs	r3, #1
 8005202:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f9      	bne.n	80051fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005218:	d107      	bne.n	800522a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005228:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b01      	cmp	r3, #1
 8005236:	f040 80a1 	bne.w	800537c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005242:	f023 0301 	bic.w	r3, r3, #1
 8005246:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005264:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005278:	d106      	bne.n	8005288 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527e:	f023 0206 	bic.w	r2, r3, #6
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	645a      	str	r2, [r3, #68]	; 0x44
 8005286:	e002      	b.n	800528e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005296:	4b44      	ldr	r3, [pc, #272]	; (80053a8 <HAL_ADC_Start_DMA+0x204>)
 8005298:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	4a43      	ldr	r2, [pc, #268]	; (80053ac <HAL_ADC_Start_DMA+0x208>)
 80052a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	4a42      	ldr	r2, [pc, #264]	; (80053b0 <HAL_ADC_Start_DMA+0x20c>)
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	4a41      	ldr	r2, [pc, #260]	; (80053b4 <HAL_ADC_Start_DMA+0x210>)
 80052b0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80052ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80052ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	334c      	adds	r3, #76	; 0x4c
 80052e6:	4619      	mov	r1, r3
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f000 fce8 	bl	8005cc0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 031f 	and.w	r3, r3, #31
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d12a      	bne.n	8005352 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a2d      	ldr	r2, [pc, #180]	; (80053b8 <HAL_ADC_Start_DMA+0x214>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d015      	beq.n	8005332 <HAL_ADC_Start_DMA+0x18e>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a2c      	ldr	r2, [pc, #176]	; (80053bc <HAL_ADC_Start_DMA+0x218>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d105      	bne.n	800531c <HAL_ADC_Start_DMA+0x178>
 8005310:	4b25      	ldr	r3, [pc, #148]	; (80053a8 <HAL_ADC_Start_DMA+0x204>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f003 031f 	and.w	r3, r3, #31
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a27      	ldr	r2, [pc, #156]	; (80053c0 <HAL_ADC_Start_DMA+0x21c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d136      	bne.n	8005394 <HAL_ADC_Start_DMA+0x1f0>
 8005326:	4b20      	ldr	r3, [pc, #128]	; (80053a8 <HAL_ADC_Start_DMA+0x204>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	2b00      	cmp	r3, #0
 8005330:	d130      	bne.n	8005394 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d129      	bne.n	8005394 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800534e:	609a      	str	r2, [r3, #8]
 8005350:	e020      	b.n	8005394 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <HAL_ADC_Start_DMA+0x214>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d11b      	bne.n	8005394 <HAL_ADC_Start_DMA+0x1f0>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d114      	bne.n	8005394 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005378:	609a      	str	r2, [r3, #8]
 800537a:	e00b      	b.n	8005394 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	f043 0210 	orr.w	r2, r3, #16
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538c:	f043 0201 	orr.w	r2, r3, #1
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000004 	.word	0x20000004
 80053a4:	431bde83 	.word	0x431bde83
 80053a8:	40012300 	.word	0x40012300
 80053ac:	0800583d 	.word	0x0800583d
 80053b0:	080058f7 	.word	0x080058f7
 80053b4:	08005913 	.word	0x08005913
 80053b8:	40012000 	.word	0x40012000
 80053bc:	40012100 	.word	0x40012100
 80053c0:	40012200 	.word	0x40012200

080053c4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_ADC_ConfigChannel+0x1c>
 8005418:	2302      	movs	r3, #2
 800541a:	e105      	b.n	8005628 <HAL_ADC_ConfigChannel+0x228>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b09      	cmp	r3, #9
 800542a:	d925      	bls.n	8005478 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68d9      	ldr	r1, [r3, #12]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	b29b      	uxth	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	4613      	mov	r3, r2
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	4413      	add	r3, r2
 8005440:	3b1e      	subs	r3, #30
 8005442:	2207      	movs	r2, #7
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	43da      	mvns	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	400a      	ands	r2, r1
 8005450:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68d9      	ldr	r1, [r3, #12]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	b29b      	uxth	r3, r3
 8005462:	4618      	mov	r0, r3
 8005464:	4603      	mov	r3, r0
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	4403      	add	r3, r0
 800546a:	3b1e      	subs	r3, #30
 800546c:	409a      	lsls	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	60da      	str	r2, [r3, #12]
 8005476:	e022      	b.n	80054be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6919      	ldr	r1, [r3, #16]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	4613      	mov	r3, r2
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	4413      	add	r3, r2
 800548c:	2207      	movs	r2, #7
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43da      	mvns	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	400a      	ands	r2, r1
 800549a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6919      	ldr	r1, [r3, #16]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	4618      	mov	r0, r3
 80054ae:	4603      	mov	r3, r0
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	4403      	add	r3, r0
 80054b4:	409a      	lsls	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b06      	cmp	r3, #6
 80054c4:	d824      	bhi.n	8005510 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	3b05      	subs	r3, #5
 80054d8:	221f      	movs	r2, #31
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43da      	mvns	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	400a      	ands	r2, r1
 80054e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	4618      	mov	r0, r3
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	3b05      	subs	r3, #5
 8005502:	fa00 f203 	lsl.w	r2, r0, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	635a      	str	r2, [r3, #52]	; 0x34
 800550e:	e04c      	b.n	80055aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b0c      	cmp	r3, #12
 8005516:	d824      	bhi.n	8005562 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	3b23      	subs	r3, #35	; 0x23
 800552a:	221f      	movs	r2, #31
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	43da      	mvns	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	400a      	ands	r2, r1
 8005538:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	4618      	mov	r0, r3
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	3b23      	subs	r3, #35	; 0x23
 8005554:	fa00 f203 	lsl.w	r2, r0, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	631a      	str	r2, [r3, #48]	; 0x30
 8005560:	e023      	b.n	80055aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	3b41      	subs	r3, #65	; 0x41
 8005574:	221f      	movs	r2, #31
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	43da      	mvns	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	400a      	ands	r2, r1
 8005582:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	b29b      	uxth	r3, r3
 8005590:	4618      	mov	r0, r3
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	3b41      	subs	r3, #65	; 0x41
 800559e:	fa00 f203 	lsl.w	r2, r0, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055aa:	4b22      	ldr	r3, [pc, #136]	; (8005634 <HAL_ADC_ConfigChannel+0x234>)
 80055ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a21      	ldr	r2, [pc, #132]	; (8005638 <HAL_ADC_ConfigChannel+0x238>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d109      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x1cc>
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b12      	cmp	r3, #18
 80055be:	d105      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a19      	ldr	r2, [pc, #100]	; (8005638 <HAL_ADC_ConfigChannel+0x238>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d123      	bne.n	800561e <HAL_ADC_ConfigChannel+0x21e>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b10      	cmp	r3, #16
 80055dc:	d003      	beq.n	80055e6 <HAL_ADC_ConfigChannel+0x1e6>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b11      	cmp	r3, #17
 80055e4:	d11b      	bne.n	800561e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b10      	cmp	r3, #16
 80055f8:	d111      	bne.n	800561e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80055fa:	4b10      	ldr	r3, [pc, #64]	; (800563c <HAL_ADC_ConfigChannel+0x23c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a10      	ldr	r2, [pc, #64]	; (8005640 <HAL_ADC_ConfigChannel+0x240>)
 8005600:	fba2 2303 	umull	r2, r3, r2, r3
 8005604:	0c9a      	lsrs	r2, r3, #18
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005610:	e002      	b.n	8005618 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	3b01      	subs	r3, #1
 8005616:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1f9      	bne.n	8005612 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	40012300 	.word	0x40012300
 8005638:	40012000 	.word	0x40012000
 800563c:	20000004 	.word	0x20000004
 8005640:	431bde83 	.word	0x431bde83

08005644 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800564c:	4b79      	ldr	r3, [pc, #484]	; (8005834 <ADC_Init+0x1f0>)
 800564e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	431a      	orrs	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005678:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6859      	ldr	r1, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	021a      	lsls	r2, r3, #8
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800569c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6859      	ldr	r1, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6899      	ldr	r1, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d6:	4a58      	ldr	r2, [pc, #352]	; (8005838 <ADC_Init+0x1f4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d022      	beq.n	8005722 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6899      	ldr	r1, [r3, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800570c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6899      	ldr	r1, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	609a      	str	r2, [r3, #8]
 8005720:	e00f      	b.n	8005742 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005730:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005740:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0202 	bic.w	r2, r2, #2
 8005750:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6899      	ldr	r1, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	7e1b      	ldrb	r3, [r3, #24]
 800575c:	005a      	lsls	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01b      	beq.n	80057a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800577e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800578e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6859      	ldr	r1, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	3b01      	subs	r3, #1
 800579c:	035a      	lsls	r2, r3, #13
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	605a      	str	r2, [r3, #4]
 80057a6:	e007      	b.n	80057b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80057c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	051a      	lsls	r2, r3, #20
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6899      	ldr	r1, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057fa:	025a      	lsls	r2, r3, #9
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005812:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6899      	ldr	r1, [r3, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	029a      	lsls	r2, r3, #10
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	609a      	str	r2, [r3, #8]
}
 8005828:	bf00      	nop
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	40012300 	.word	0x40012300
 8005838:	0f000001 	.word	0x0f000001

0800583c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005852:	2b00      	cmp	r3, #0
 8005854:	d13c      	bne.n	80058d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d12b      	bne.n	80058c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005874:	2b00      	cmp	r3, #0
 8005876:	d127      	bne.n	80058c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005882:	2b00      	cmp	r3, #0
 8005884:	d006      	beq.n	8005894 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005890:	2b00      	cmp	r3, #0
 8005892:	d119      	bne.n	80058c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0220 	bic.w	r2, r2, #32
 80058a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d105      	bne.n	80058c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	f043 0201 	orr.w	r2, r3, #1
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f7ff fd7b 	bl	80053c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80058ce:	e00e      	b.n	80058ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff fd85 	bl	80053ec <HAL_ADC_ErrorCallback>
}
 80058e2:	e004      	b.n	80058ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	4798      	blx	r3
}
 80058ee:	bf00      	nop
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7ff fd67 	bl	80053d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2240      	movs	r2, #64	; 0x40
 8005924:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592a:	f043 0204 	orr.w	r2, r3, #4
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7ff fd5a 	bl	80053ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005938:	bf00      	nop
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005950:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <__NVIC_SetPriorityGrouping+0x44>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800595c:	4013      	ands	r3, r2
 800595e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800596c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005972:	4a04      	ldr	r2, [pc, #16]	; (8005984 <__NVIC_SetPriorityGrouping+0x44>)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	60d3      	str	r3, [r2, #12]
}
 8005978:	bf00      	nop
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	e000ed00 	.word	0xe000ed00

08005988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800598c:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <__NVIC_GetPriorityGrouping+0x18>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	0a1b      	lsrs	r3, r3, #8
 8005992:	f003 0307 	and.w	r3, r3, #7
}
 8005996:	4618      	mov	r0, r3
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	e000ed00 	.word	0xe000ed00

080059a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	db0b      	blt.n	80059ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	f003 021f 	and.w	r2, r3, #31
 80059bc:	4907      	ldr	r1, [pc, #28]	; (80059dc <__NVIC_EnableIRQ+0x38>)
 80059be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	2001      	movs	r0, #1
 80059c6:	fa00 f202 	lsl.w	r2, r0, r2
 80059ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	e000e100 	.word	0xe000e100

080059e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	6039      	str	r1, [r7, #0]
 80059ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	db0a      	blt.n	8005a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	490c      	ldr	r1, [pc, #48]	; (8005a2c <__NVIC_SetPriority+0x4c>)
 80059fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059fe:	0112      	lsls	r2, r2, #4
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	440b      	add	r3, r1
 8005a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a08:	e00a      	b.n	8005a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	4908      	ldr	r1, [pc, #32]	; (8005a30 <__NVIC_SetPriority+0x50>)
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	3b04      	subs	r3, #4
 8005a18:	0112      	lsls	r2, r2, #4
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	761a      	strb	r2, [r3, #24]
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	e000e100 	.word	0xe000e100
 8005a30:	e000ed00 	.word	0xe000ed00

08005a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b089      	sub	sp, #36	; 0x24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	f1c3 0307 	rsb	r3, r3, #7
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	bf28      	it	cs
 8005a52:	2304      	movcs	r3, #4
 8005a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	2b06      	cmp	r3, #6
 8005a5c:	d902      	bls.n	8005a64 <NVIC_EncodePriority+0x30>
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	3b03      	subs	r3, #3
 8005a62:	e000      	b.n	8005a66 <NVIC_EncodePriority+0x32>
 8005a64:	2300      	movs	r3, #0
 8005a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a68:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	43da      	mvns	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	401a      	ands	r2, r3
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	fa01 f303 	lsl.w	r3, r1, r3
 8005a86:	43d9      	mvns	r1, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a8c:	4313      	orrs	r3, r2
         );
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3724      	adds	r7, #36	; 0x24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005aac:	d301      	bcc.n	8005ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e00f      	b.n	8005ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ab2:	4a0a      	ldr	r2, [pc, #40]	; (8005adc <SysTick_Config+0x40>)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005aba:	210f      	movs	r1, #15
 8005abc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac0:	f7ff ff8e 	bl	80059e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <SysTick_Config+0x40>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005aca:	4b04      	ldr	r3, [pc, #16]	; (8005adc <SysTick_Config+0x40>)
 8005acc:	2207      	movs	r2, #7
 8005ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	e000e010 	.word	0xe000e010

08005ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff ff29 	bl	8005940 <__NVIC_SetPriorityGrouping>
}
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b086      	sub	sp, #24
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	4603      	mov	r3, r0
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
 8005b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b08:	f7ff ff3e 	bl	8005988 <__NVIC_GetPriorityGrouping>
 8005b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	68b9      	ldr	r1, [r7, #8]
 8005b12:	6978      	ldr	r0, [r7, #20]
 8005b14:	f7ff ff8e 	bl	8005a34 <NVIC_EncodePriority>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff ff5d 	bl	80059e0 <__NVIC_SetPriority>
}
 8005b26:	bf00      	nop
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b082      	sub	sp, #8
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	4603      	mov	r3, r0
 8005b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff ff31 	bl	80059a4 <__NVIC_EnableIRQ>
}
 8005b42:	bf00      	nop
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff ffa2 	bl	8005a9c <SysTick_Config>
 8005b58:	4603      	mov	r3, r0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b70:	f7ff faa4 	bl	80050bc <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e099      	b.n	8005cb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0201 	bic.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ba0:	e00f      	b.n	8005bc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ba2:	f7ff fa8b 	bl	80050bc <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b05      	cmp	r3, #5
 8005bae:	d908      	bls.n	8005bc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2203      	movs	r2, #3
 8005bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e078      	b.n	8005cb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e8      	bne.n	8005ba2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	4b38      	ldr	r3, [pc, #224]	; (8005cbc <HAL_DMA_Init+0x158>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d107      	bne.n	8005c2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c24:	4313      	orrs	r3, r2
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f023 0307 	bic.w	r3, r3, #7
 8005c42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d117      	bne.n	8005c86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00e      	beq.n	8005c86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fb01 	bl	8006270 <DMA_CheckFifoParam>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2240      	movs	r2, #64	; 0x40
 8005c78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005c82:	2301      	movs	r3, #1
 8005c84:	e016      	b.n	8005cb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fab8 	bl	8006204 <DMA_CalcBaseAndBitshift>
 8005c94:	4603      	mov	r3, r0
 8005c96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9c:	223f      	movs	r2, #63	; 0x3f
 8005c9e:	409a      	lsls	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	f010803f 	.word	0xf010803f

08005cc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d101      	bne.n	8005ce6 <HAL_DMA_Start_IT+0x26>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	e040      	b.n	8005d68 <HAL_DMA_Start_IT+0xa8>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d12f      	bne.n	8005d5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 fa4a 	bl	80061a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d18:	223f      	movs	r2, #63	; 0x3f
 8005d1a:	409a      	lsls	r2, r3
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0216 	orr.w	r2, r2, #22
 8005d2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d007      	beq.n	8005d48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0208 	orr.w	r2, r2, #8
 8005d46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0201 	orr.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	e005      	b.n	8005d66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d62:	2302      	movs	r3, #2
 8005d64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d7e:	f7ff f99d 	bl	80050bc <HAL_GetTick>
 8005d82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d008      	beq.n	8005da2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2280      	movs	r2, #128	; 0x80
 8005d94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e052      	b.n	8005e48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0216 	bic.w	r2, r2, #22
 8005db0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695a      	ldr	r2, [r3, #20]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d103      	bne.n	8005dd2 <HAL_DMA_Abort+0x62>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d007      	beq.n	8005de2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0208 	bic.w	r2, r2, #8
 8005de0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0201 	bic.w	r2, r2, #1
 8005df0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005df2:	e013      	b.n	8005e1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005df4:	f7ff f962 	bl	80050bc <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b05      	cmp	r3, #5
 8005e00:	d90c      	bls.n	8005e1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e015      	b.n	8005e48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e4      	bne.n	8005df4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2e:	223f      	movs	r2, #63	; 0x3f
 8005e30:	409a      	lsls	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d004      	beq.n	8005e6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2280      	movs	r2, #128	; 0x80
 8005e68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e00c      	b.n	8005e88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2205      	movs	r2, #5
 8005e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0201 	bic.w	r2, r2, #1
 8005e84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ea0:	4b8e      	ldr	r3, [pc, #568]	; (80060dc <HAL_DMA_IRQHandler+0x248>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a8e      	ldr	r2, [pc, #568]	; (80060e0 <HAL_DMA_IRQHandler+0x24c>)
 8005ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eaa:	0a9b      	lsrs	r3, r3, #10
 8005eac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ebe:	2208      	movs	r2, #8
 8005ec0:	409a      	lsls	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01a      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d013      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0204 	bic.w	r2, r2, #4
 8005ee6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eec:	2208      	movs	r2, #8
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef8:	f043 0201 	orr.w	r2, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f04:	2201      	movs	r2, #1
 8005f06:	409a      	lsls	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d012      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00b      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f22:	2201      	movs	r2, #1
 8005f24:	409a      	lsls	r2, r3
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2e:	f043 0202 	orr.w	r2, r3, #2
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f3a:	2204      	movs	r2, #4
 8005f3c:	409a      	lsls	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4013      	ands	r3, r2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d012      	beq.n	8005f6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f58:	2204      	movs	r2, #4
 8005f5a:	409a      	lsls	r2, r3
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f64:	f043 0204 	orr.w	r2, r3, #4
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f70:	2210      	movs	r2, #16
 8005f72:	409a      	lsls	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d043      	beq.n	8006004 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d03c      	beq.n	8006004 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f8e:	2210      	movs	r2, #16
 8005f90:	409a      	lsls	r2, r3
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d018      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d108      	bne.n	8005fc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d024      	beq.n	8006004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
 8005fc2:	e01f      	b.n	8006004 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01b      	beq.n	8006004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	4798      	blx	r3
 8005fd4:	e016      	b.n	8006004 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d107      	bne.n	8005ff4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0208 	bic.w	r2, r2, #8
 8005ff2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006008:	2220      	movs	r2, #32
 800600a:	409a      	lsls	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4013      	ands	r3, r2
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 808f 	beq.w	8006134 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 8087 	beq.w	8006134 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602a:	2220      	movs	r2, #32
 800602c:	409a      	lsls	r2, r3
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b05      	cmp	r3, #5
 800603c:	d136      	bne.n	80060ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0216 	bic.w	r2, r2, #22
 800604c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	695a      	ldr	r2, [r3, #20]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800605c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d103      	bne.n	800606e <HAL_DMA_IRQHandler+0x1da>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800606a:	2b00      	cmp	r3, #0
 800606c:	d007      	beq.n	800607e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0208 	bic.w	r2, r2, #8
 800607c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006082:	223f      	movs	r2, #63	; 0x3f
 8006084:	409a      	lsls	r2, r3
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d07e      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
        }
        return;
 80060aa:	e079      	b.n	80061a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d01d      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10d      	bne.n	80060e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d031      	beq.n	8006134 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	4798      	blx	r3
 80060d8:	e02c      	b.n	8006134 <HAL_DMA_IRQHandler+0x2a0>
 80060da:	bf00      	nop
 80060dc:	20000004 	.word	0x20000004
 80060e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d023      	beq.n	8006134 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	4798      	blx	r3
 80060f4:	e01e      	b.n	8006134 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10f      	bne.n	8006124 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0210 	bic.w	r2, r2, #16
 8006112:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006138:	2b00      	cmp	r3, #0
 800613a:	d032      	beq.n	80061a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d022      	beq.n	800618e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2205      	movs	r2, #5
 800614c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	3301      	adds	r3, #1
 8006164:	60bb      	str	r3, [r7, #8]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	429a      	cmp	r2, r3
 800616a:	d307      	bcc.n	800617c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f2      	bne.n	8006160 <HAL_DMA_IRQHandler+0x2cc>
 800617a:	e000      	b.n	800617e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800617c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	4798      	blx	r3
 800619e:	e000      	b.n	80061a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80061a0:	bf00      	nop
    }
  }
}
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2b40      	cmp	r3, #64	; 0x40
 80061d4:	d108      	bne.n	80061e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80061e6:	e007      	b.n	80061f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	60da      	str	r2, [r3, #12]
}
 80061f8:	bf00      	nop
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	3b10      	subs	r3, #16
 8006214:	4a14      	ldr	r2, [pc, #80]	; (8006268 <DMA_CalcBaseAndBitshift+0x64>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	091b      	lsrs	r3, r3, #4
 800621c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800621e:	4a13      	ldr	r2, [pc, #76]	; (800626c <DMA_CalcBaseAndBitshift+0x68>)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b03      	cmp	r3, #3
 8006230:	d909      	bls.n	8006246 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800623a:	f023 0303 	bic.w	r3, r3, #3
 800623e:	1d1a      	adds	r2, r3, #4
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	659a      	str	r2, [r3, #88]	; 0x58
 8006244:	e007      	b.n	8006256 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800624e:	f023 0303 	bic.w	r3, r3, #3
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	aaaaaaab 	.word	0xaaaaaaab
 800626c:	08012ac0 	.word	0x08012ac0

08006270 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006280:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d11f      	bne.n	80062ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2b03      	cmp	r3, #3
 800628e:	d856      	bhi.n	800633e <DMA_CheckFifoParam+0xce>
 8006290:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <DMA_CheckFifoParam+0x28>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	080062a9 	.word	0x080062a9
 800629c:	080062bb 	.word	0x080062bb
 80062a0:	080062a9 	.word	0x080062a9
 80062a4:	0800633f 	.word	0x0800633f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d046      	beq.n	8006342 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062b8:	e043      	b.n	8006342 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062c2:	d140      	bne.n	8006346 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062c8:	e03d      	b.n	8006346 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d2:	d121      	bne.n	8006318 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d837      	bhi.n	800634a <DMA_CheckFifoParam+0xda>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <DMA_CheckFifoParam+0x70>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	080062f1 	.word	0x080062f1
 80062e4:	080062f7 	.word	0x080062f7
 80062e8:	080062f1 	.word	0x080062f1
 80062ec:	08006309 	.word	0x08006309
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	73fb      	strb	r3, [r7, #15]
      break;
 80062f4:	e030      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d025      	beq.n	800634e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006306:	e022      	b.n	800634e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006310:	d11f      	bne.n	8006352 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006316:	e01c      	b.n	8006352 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d903      	bls.n	8006326 <DMA_CheckFifoParam+0xb6>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b03      	cmp	r3, #3
 8006322:	d003      	beq.n	800632c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006324:	e018      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	73fb      	strb	r3, [r7, #15]
      break;
 800632a:	e015      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00e      	beq.n	8006356 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	73fb      	strb	r3, [r7, #15]
      break;
 800633c:	e00b      	b.n	8006356 <DMA_CheckFifoParam+0xe6>
      break;
 800633e:	bf00      	nop
 8006340:	e00a      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      break;
 8006342:	bf00      	nop
 8006344:	e008      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      break;
 8006346:	bf00      	nop
 8006348:	e006      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      break;
 800634a:	bf00      	nop
 800634c:	e004      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      break;
 800634e:	bf00      	nop
 8006350:	e002      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      break;   
 8006352:	bf00      	nop
 8006354:	e000      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      break;
 8006356:	bf00      	nop
    }
  } 
  
  return status; 
 8006358:	7bfb      	ldrb	r3, [r7, #15]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop

08006368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006368:	b480      	push	{r7}
 800636a:	b089      	sub	sp, #36	; 0x24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006372:	2300      	movs	r3, #0
 8006374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006376:	2300      	movs	r3, #0
 8006378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800637a:	2300      	movs	r3, #0
 800637c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800637e:	2300      	movs	r3, #0
 8006380:	61fb      	str	r3, [r7, #28]
 8006382:	e16b      	b.n	800665c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006384:	2201      	movs	r2, #1
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	fa02 f303 	lsl.w	r3, r2, r3
 800638c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4013      	ands	r3, r2
 8006396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	429a      	cmp	r2, r3
 800639e:	f040 815a 	bne.w	8006656 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d005      	beq.n	80063ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d130      	bne.n	800641c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	2203      	movs	r2, #3
 80063c6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ca:	43db      	mvns	r3, r3
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	4013      	ands	r3, r2
 80063d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	fa02 f303 	lsl.w	r3, r2, r3
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063f0:	2201      	movs	r2, #1
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	fa02 f303 	lsl.w	r3, r2, r3
 80063f8:	43db      	mvns	r3, r3
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	4013      	ands	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	091b      	lsrs	r3, r3, #4
 8006406:	f003 0201 	and.w	r2, r3, #1
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	fa02 f303 	lsl.w	r3, r2, r3
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	4313      	orrs	r3, r2
 8006414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f003 0303 	and.w	r3, r3, #3
 8006424:	2b03      	cmp	r3, #3
 8006426:	d017      	beq.n	8006458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	2203      	movs	r2, #3
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	43db      	mvns	r3, r3
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	4013      	ands	r3, r2
 800643e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	4313      	orrs	r3, r2
 8006450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f003 0303 	and.w	r3, r3, #3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d123      	bne.n	80064ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	08da      	lsrs	r2, r3, #3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3208      	adds	r2, #8
 800646c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	220f      	movs	r2, #15
 800647c:	fa02 f303 	lsl.w	r3, r2, r3
 8006480:	43db      	mvns	r3, r3
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	4013      	ands	r3, r2
 8006486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	fa02 f303 	lsl.w	r3, r2, r3
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	4313      	orrs	r3, r2
 800649c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	08da      	lsrs	r2, r3, #3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	3208      	adds	r2, #8
 80064a6:	69b9      	ldr	r1, [r7, #24]
 80064a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	2203      	movs	r2, #3
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	43db      	mvns	r3, r3
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	4013      	ands	r3, r2
 80064c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f003 0203 	and.w	r2, r3, #3
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 80b4 	beq.w	8006656 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	4b60      	ldr	r3, [pc, #384]	; (8006674 <HAL_GPIO_Init+0x30c>)
 80064f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f6:	4a5f      	ldr	r2, [pc, #380]	; (8006674 <HAL_GPIO_Init+0x30c>)
 80064f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064fc:	6453      	str	r3, [r2, #68]	; 0x44
 80064fe:	4b5d      	ldr	r3, [pc, #372]	; (8006674 <HAL_GPIO_Init+0x30c>)
 8006500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800650a:	4a5b      	ldr	r2, [pc, #364]	; (8006678 <HAL_GPIO_Init+0x310>)
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	089b      	lsrs	r3, r3, #2
 8006510:	3302      	adds	r3, #2
 8006512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	220f      	movs	r2, #15
 8006522:	fa02 f303 	lsl.w	r3, r2, r3
 8006526:	43db      	mvns	r3, r3
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	4013      	ands	r3, r2
 800652c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a52      	ldr	r2, [pc, #328]	; (800667c <HAL_GPIO_Init+0x314>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d02b      	beq.n	800658e <HAL_GPIO_Init+0x226>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a51      	ldr	r2, [pc, #324]	; (8006680 <HAL_GPIO_Init+0x318>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d025      	beq.n	800658a <HAL_GPIO_Init+0x222>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a50      	ldr	r2, [pc, #320]	; (8006684 <HAL_GPIO_Init+0x31c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01f      	beq.n	8006586 <HAL_GPIO_Init+0x21e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a4f      	ldr	r2, [pc, #316]	; (8006688 <HAL_GPIO_Init+0x320>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d019      	beq.n	8006582 <HAL_GPIO_Init+0x21a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a4e      	ldr	r2, [pc, #312]	; (800668c <HAL_GPIO_Init+0x324>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d013      	beq.n	800657e <HAL_GPIO_Init+0x216>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a4d      	ldr	r2, [pc, #308]	; (8006690 <HAL_GPIO_Init+0x328>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00d      	beq.n	800657a <HAL_GPIO_Init+0x212>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a4c      	ldr	r2, [pc, #304]	; (8006694 <HAL_GPIO_Init+0x32c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d007      	beq.n	8006576 <HAL_GPIO_Init+0x20e>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a4b      	ldr	r2, [pc, #300]	; (8006698 <HAL_GPIO_Init+0x330>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d101      	bne.n	8006572 <HAL_GPIO_Init+0x20a>
 800656e:	2307      	movs	r3, #7
 8006570:	e00e      	b.n	8006590 <HAL_GPIO_Init+0x228>
 8006572:	2308      	movs	r3, #8
 8006574:	e00c      	b.n	8006590 <HAL_GPIO_Init+0x228>
 8006576:	2306      	movs	r3, #6
 8006578:	e00a      	b.n	8006590 <HAL_GPIO_Init+0x228>
 800657a:	2305      	movs	r3, #5
 800657c:	e008      	b.n	8006590 <HAL_GPIO_Init+0x228>
 800657e:	2304      	movs	r3, #4
 8006580:	e006      	b.n	8006590 <HAL_GPIO_Init+0x228>
 8006582:	2303      	movs	r3, #3
 8006584:	e004      	b.n	8006590 <HAL_GPIO_Init+0x228>
 8006586:	2302      	movs	r3, #2
 8006588:	e002      	b.n	8006590 <HAL_GPIO_Init+0x228>
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <HAL_GPIO_Init+0x228>
 800658e:	2300      	movs	r3, #0
 8006590:	69fa      	ldr	r2, [r7, #28]
 8006592:	f002 0203 	and.w	r2, r2, #3
 8006596:	0092      	lsls	r2, r2, #2
 8006598:	4093      	lsls	r3, r2
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	4313      	orrs	r3, r2
 800659e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065a0:	4935      	ldr	r1, [pc, #212]	; (8006678 <HAL_GPIO_Init+0x310>)
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	089b      	lsrs	r3, r3, #2
 80065a6:	3302      	adds	r3, #2
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80065ae:	4b3b      	ldr	r3, [pc, #236]	; (800669c <HAL_GPIO_Init+0x334>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	43db      	mvns	r3, r3
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	4013      	ands	r3, r2
 80065bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065d2:	4a32      	ldr	r2, [pc, #200]	; (800669c <HAL_GPIO_Init+0x334>)
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065d8:	4b30      	ldr	r3, [pc, #192]	; (800669c <HAL_GPIO_Init+0x334>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	43db      	mvns	r3, r3
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	4013      	ands	r3, r2
 80065e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065fc:	4a27      	ldr	r2, [pc, #156]	; (800669c <HAL_GPIO_Init+0x334>)
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006602:	4b26      	ldr	r3, [pc, #152]	; (800669c <HAL_GPIO_Init+0x334>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	43db      	mvns	r3, r3
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	4013      	ands	r3, r2
 8006610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006626:	4a1d      	ldr	r2, [pc, #116]	; (800669c <HAL_GPIO_Init+0x334>)
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800662c:	4b1b      	ldr	r3, [pc, #108]	; (800669c <HAL_GPIO_Init+0x334>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	43db      	mvns	r3, r3
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	4013      	ands	r3, r2
 800663a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	4313      	orrs	r3, r2
 800664e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006650:	4a12      	ldr	r2, [pc, #72]	; (800669c <HAL_GPIO_Init+0x334>)
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	3301      	adds	r3, #1
 800665a:	61fb      	str	r3, [r7, #28]
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	2b0f      	cmp	r3, #15
 8006660:	f67f ae90 	bls.w	8006384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop
 8006668:	3724      	adds	r7, #36	; 0x24
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	40023800 	.word	0x40023800
 8006678:	40013800 	.word	0x40013800
 800667c:	40020000 	.word	0x40020000
 8006680:	40020400 	.word	0x40020400
 8006684:	40020800 	.word	0x40020800
 8006688:	40020c00 	.word	0x40020c00
 800668c:	40021000 	.word	0x40021000
 8006690:	40021400 	.word	0x40021400
 8006694:	40021800 	.word	0x40021800
 8006698:	40021c00 	.word	0x40021c00
 800669c:	40013c00 	.word	0x40013c00

080066a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	887b      	ldrh	r3, [r7, #2]
 80066b2:	4013      	ands	r3, r2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80066b8:	2301      	movs	r3, #1
 80066ba:	73fb      	strb	r3, [r7, #15]
 80066bc:	e001      	b.n	80066c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	807b      	strh	r3, [r7, #2]
 80066dc:	4613      	mov	r3, r2
 80066de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066e0:	787b      	ldrb	r3, [r7, #1]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066e6:	887a      	ldrh	r2, [r7, #2]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80066ec:	e003      	b.n	80066f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80066ee:	887b      	ldrh	r3, [r7, #2]
 80066f0:	041a      	lsls	r2, r3, #16
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	619a      	str	r2, [r3, #24]
}
 80066f6:	bf00      	nop
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	460b      	mov	r3, r1
 800670c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006714:	887a      	ldrh	r2, [r7, #2]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4013      	ands	r3, r2
 800671a:	041a      	lsls	r2, r3, #16
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	43d9      	mvns	r1, r3
 8006720:	887b      	ldrh	r3, [r7, #2]
 8006722:	400b      	ands	r3, r1
 8006724:	431a      	orrs	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	619a      	str	r2, [r3, #24]
}
 800672a:	bf00      	nop
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e12b      	b.n	80069a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fd fcb0 	bl	80040c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2224      	movs	r2, #36	; 0x24
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0201 	bic.w	r2, r2, #1
 800677a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800678a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800679a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800679c:	f001 fbe4 	bl	8007f68 <HAL_RCC_GetPCLK1Freq>
 80067a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	4a81      	ldr	r2, [pc, #516]	; (80069ac <HAL_I2C_Init+0x274>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d807      	bhi.n	80067bc <HAL_I2C_Init+0x84>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4a80      	ldr	r2, [pc, #512]	; (80069b0 <HAL_I2C_Init+0x278>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	bf94      	ite	ls
 80067b4:	2301      	movls	r3, #1
 80067b6:	2300      	movhi	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	e006      	b.n	80067ca <HAL_I2C_Init+0x92>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4a7d      	ldr	r2, [pc, #500]	; (80069b4 <HAL_I2C_Init+0x27c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	bf94      	ite	ls
 80067c4:	2301      	movls	r3, #1
 80067c6:	2300      	movhi	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e0e7      	b.n	80069a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4a78      	ldr	r2, [pc, #480]	; (80069b8 <HAL_I2C_Init+0x280>)
 80067d6:	fba2 2303 	umull	r2, r3, r2, r3
 80067da:	0c9b      	lsrs	r3, r3, #18
 80067dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	4a6a      	ldr	r2, [pc, #424]	; (80069ac <HAL_I2C_Init+0x274>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d802      	bhi.n	800680c <HAL_I2C_Init+0xd4>
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	3301      	adds	r3, #1
 800680a:	e009      	b.n	8006820 <HAL_I2C_Init+0xe8>
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006812:	fb02 f303 	mul.w	r3, r2, r3
 8006816:	4a69      	ldr	r2, [pc, #420]	; (80069bc <HAL_I2C_Init+0x284>)
 8006818:	fba2 2303 	umull	r2, r3, r2, r3
 800681c:	099b      	lsrs	r3, r3, #6
 800681e:	3301      	adds	r3, #1
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6812      	ldr	r2, [r2, #0]
 8006824:	430b      	orrs	r3, r1
 8006826:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006832:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	495c      	ldr	r1, [pc, #368]	; (80069ac <HAL_I2C_Init+0x274>)
 800683c:	428b      	cmp	r3, r1
 800683e:	d819      	bhi.n	8006874 <HAL_I2C_Init+0x13c>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	1e59      	subs	r1, r3, #1
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	fbb1 f3f3 	udiv	r3, r1, r3
 800684e:	1c59      	adds	r1, r3, #1
 8006850:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006854:	400b      	ands	r3, r1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <HAL_I2C_Init+0x138>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	1e59      	subs	r1, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	fbb1 f3f3 	udiv	r3, r1, r3
 8006868:	3301      	adds	r3, #1
 800686a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800686e:	e051      	b.n	8006914 <HAL_I2C_Init+0x1dc>
 8006870:	2304      	movs	r3, #4
 8006872:	e04f      	b.n	8006914 <HAL_I2C_Init+0x1dc>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d111      	bne.n	80068a0 <HAL_I2C_Init+0x168>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	1e58      	subs	r0, r3, #1
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6859      	ldr	r1, [r3, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	440b      	add	r3, r1
 800688a:	fbb0 f3f3 	udiv	r3, r0, r3
 800688e:	3301      	adds	r3, #1
 8006890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006894:	2b00      	cmp	r3, #0
 8006896:	bf0c      	ite	eq
 8006898:	2301      	moveq	r3, #1
 800689a:	2300      	movne	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	e012      	b.n	80068c6 <HAL_I2C_Init+0x18e>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	1e58      	subs	r0, r3, #1
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6859      	ldr	r1, [r3, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	0099      	lsls	r1, r3, #2
 80068b0:	440b      	add	r3, r1
 80068b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80068b6:	3301      	adds	r3, #1
 80068b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068bc:	2b00      	cmp	r3, #0
 80068be:	bf0c      	ite	eq
 80068c0:	2301      	moveq	r3, #1
 80068c2:	2300      	movne	r3, #0
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <HAL_I2C_Init+0x196>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e022      	b.n	8006914 <HAL_I2C_Init+0x1dc>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10e      	bne.n	80068f4 <HAL_I2C_Init+0x1bc>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	1e58      	subs	r0, r3, #1
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6859      	ldr	r1, [r3, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	440b      	add	r3, r1
 80068e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80068e8:	3301      	adds	r3, #1
 80068ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f2:	e00f      	b.n	8006914 <HAL_I2C_Init+0x1dc>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	1e58      	subs	r0, r3, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6859      	ldr	r1, [r3, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	440b      	add	r3, r1
 8006902:	0099      	lsls	r1, r3, #2
 8006904:	440b      	add	r3, r1
 8006906:	fbb0 f3f3 	udiv	r3, r0, r3
 800690a:	3301      	adds	r3, #1
 800690c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	6809      	ldr	r1, [r1, #0]
 8006918:	4313      	orrs	r3, r2
 800691a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69da      	ldr	r2, [r3, #28]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006942:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6911      	ldr	r1, [r2, #16]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	68d2      	ldr	r2, [r2, #12]
 800694e:	4311      	orrs	r1, r2
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	430b      	orrs	r3, r1
 8006956:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	695a      	ldr	r2, [r3, #20]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0201 	orr.w	r2, r2, #1
 8006982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	000186a0 	.word	0x000186a0
 80069b0:	001e847f 	.word	0x001e847f
 80069b4:	003d08ff 	.word	0x003d08ff
 80069b8:	431bde83 	.word	0x431bde83
 80069bc:	10624dd3 	.word	0x10624dd3

080069c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b088      	sub	sp, #32
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	607a      	str	r2, [r7, #4]
 80069ca:	461a      	mov	r2, r3
 80069cc:	460b      	mov	r3, r1
 80069ce:	817b      	strh	r3, [r7, #10]
 80069d0:	4613      	mov	r3, r2
 80069d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069d4:	f7fe fb72 	bl	80050bc <HAL_GetTick>
 80069d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	f040 80e0 	bne.w	8006ba8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	2319      	movs	r3, #25
 80069ee:	2201      	movs	r2, #1
 80069f0:	4970      	ldr	r1, [pc, #448]	; (8006bb4 <HAL_I2C_Master_Transmit+0x1f4>)
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 fc58 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80069fe:	2302      	movs	r3, #2
 8006a00:	e0d3      	b.n	8006baa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_I2C_Master_Transmit+0x50>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e0cc      	b.n	8006baa <HAL_I2C_Master_Transmit+0x1ea>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d007      	beq.n	8006a36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0201 	orr.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2221      	movs	r2, #33	; 0x21
 8006a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2210      	movs	r2, #16
 8006a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	893a      	ldrh	r2, [r7, #8]
 8006a66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4a50      	ldr	r2, [pc, #320]	; (8006bb8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006a76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006a78:	8979      	ldrh	r1, [r7, #10]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	6a3a      	ldr	r2, [r7, #32]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fac2 	bl	8007008 <I2C_MasterRequestWrite>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e08d      	b.n	8006baa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a8e:	2300      	movs	r3, #0
 8006a90:	613b      	str	r3, [r7, #16]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	613b      	str	r3, [r7, #16]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006aa4:	e066      	b.n	8006b74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	6a39      	ldr	r1, [r7, #32]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 fcd2 	bl	8007454 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00d      	beq.n	8006ad2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d107      	bne.n	8006ace <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006acc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e06b      	b.n	8006baa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	781a      	ldrb	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d11b      	bne.n	8006b48 <HAL_I2C_Master_Transmit+0x188>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d017      	beq.n	8006b48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	781a      	ldrb	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	6a39      	ldr	r1, [r7, #32]
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 fcc2 	bl	80074d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00d      	beq.n	8006b74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d107      	bne.n	8006b70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e01a      	b.n	8006baa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d194      	bne.n	8006aa6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e000      	b.n	8006baa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006ba8:	2302      	movs	r3, #2
  }
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	00100002 	.word	0x00100002
 8006bb8:	ffff0000 	.word	0xffff0000

08006bbc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08c      	sub	sp, #48	; 0x30
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	607a      	str	r2, [r7, #4]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	460b      	mov	r3, r1
 8006bca:	817b      	strh	r3, [r7, #10]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bd0:	f7fe fa74 	bl	80050bc <HAL_GetTick>
 8006bd4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	f040 820b 	bne.w	8006ffa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	2319      	movs	r3, #25
 8006bea:	2201      	movs	r2, #1
 8006bec:	497c      	ldr	r1, [pc, #496]	; (8006de0 <HAL_I2C_Master_Receive+0x224>)
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 fb5a 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e1fe      	b.n	8006ffc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_I2C_Master_Receive+0x50>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e1f7      	b.n	8006ffc <HAL_I2C_Master_Receive+0x440>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d007      	beq.n	8006c32 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0201 	orr.w	r2, r2, #1
 8006c30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2222      	movs	r2, #34	; 0x22
 8006c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2210      	movs	r2, #16
 8006c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	893a      	ldrh	r2, [r7, #8]
 8006c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4a5c      	ldr	r2, [pc, #368]	; (8006de4 <HAL_I2C_Master_Receive+0x228>)
 8006c72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006c74:	8979      	ldrh	r1, [r7, #10]
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 fa46 	bl	800710c <I2C_MasterRequestRead>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e1b8      	b.n	8006ffc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d113      	bne.n	8006cba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c92:	2300      	movs	r3, #0
 8006c94:	623b      	str	r3, [r7, #32]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	623b      	str	r3, [r7, #32]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	623b      	str	r3, [r7, #32]
 8006ca6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	e18c      	b.n	8006fd4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d11b      	bne.n	8006cfa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	61fb      	str	r3, [r7, #28]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	61fb      	str	r3, [r7, #28]
 8006ce6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	e16c      	b.n	8006fd4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d11b      	bne.n	8006d3a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d22:	2300      	movs	r3, #0
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	61bb      	str	r3, [r7, #24]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	61bb      	str	r3, [r7, #24]
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	e14c      	b.n	8006fd4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	617b      	str	r3, [r7, #20]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	617b      	str	r3, [r7, #20]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	617b      	str	r3, [r7, #20]
 8006d5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d60:	e138      	b.n	8006fd4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	f200 80f1 	bhi.w	8006f4e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d123      	bne.n	8006dbc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 fbed 	bl	8007558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e139      	b.n	8006ffc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	691a      	ldr	r2, [r3, #16]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da4:	3b01      	subs	r3, #1
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dba:	e10b      	b.n	8006fd4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d14e      	bne.n	8006e62 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	2200      	movs	r2, #0
 8006dcc:	4906      	ldr	r1, [pc, #24]	; (8006de8 <HAL_I2C_Master_Receive+0x22c>)
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fa6a 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d008      	beq.n	8006dec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e10e      	b.n	8006ffc <HAL_I2C_Master_Receive+0x440>
 8006dde:	bf00      	nop
 8006de0:	00100002 	.word	0x00100002
 8006de4:	ffff0000 	.word	0xffff0000
 8006de8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691a      	ldr	r2, [r3, #16]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	691a      	ldr	r2, [r3, #16]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	b2d2      	uxtb	r2, r2
 8006e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e60:	e0b8      	b.n	8006fd4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	2200      	movs	r2, #0
 8006e6a:	4966      	ldr	r1, [pc, #408]	; (8007004 <HAL_I2C_Master_Receive+0x448>)
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 fa1b 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e0bf      	b.n	8006ffc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	691a      	ldr	r2, [r3, #16]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	494f      	ldr	r1, [pc, #316]	; (8007004 <HAL_I2C_Master_Receive+0x448>)
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 f9ed 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e091      	b.n	8006ffc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f4c:	e042      	b.n	8006fd4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 fb00 	bl	8007558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e04c      	b.n	8006ffc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	691a      	ldr	r2, [r3, #16]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	b2d2      	uxtb	r2, r2
 8006f6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	f003 0304 	and.w	r3, r3, #4
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d118      	bne.n	8006fd4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	691a      	ldr	r2, [r3, #16]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f47f aec2 	bne.w	8006d62 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e000      	b.n	8006ffc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006ffa:	2302      	movs	r3, #2
  }
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3728      	adds	r7, #40	; 0x28
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	00010004 	.word	0x00010004

08007008 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af02      	add	r7, sp, #8
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	607a      	str	r2, [r7, #4]
 8007012:	603b      	str	r3, [r7, #0]
 8007014:	460b      	mov	r3, r1
 8007016:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b08      	cmp	r3, #8
 8007022:	d006      	beq.n	8007032 <I2C_MasterRequestWrite+0x2a>
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d003      	beq.n	8007032 <I2C_MasterRequestWrite+0x2a>
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007030:	d108      	bne.n	8007044 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	e00b      	b.n	800705c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007048:	2b12      	cmp	r3, #18
 800704a:	d107      	bne.n	800705c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800705a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f91d 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00d      	beq.n	8007090 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800707e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007082:	d103      	bne.n	800708c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800708a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e035      	b.n	80070fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007098:	d108      	bne.n	80070ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800709a:	897b      	ldrh	r3, [r7, #10]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	461a      	mov	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070a8:	611a      	str	r2, [r3, #16]
 80070aa:	e01b      	b.n	80070e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80070ac:	897b      	ldrh	r3, [r7, #10]
 80070ae:	11db      	asrs	r3, r3, #7
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	f003 0306 	and.w	r3, r3, #6
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	f063 030f 	orn	r3, r3, #15
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	490e      	ldr	r1, [pc, #56]	; (8007104 <I2C_MasterRequestWrite+0xfc>)
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 f943 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e010      	b.n	80070fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80070da:	897b      	ldrh	r3, [r7, #10]
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	4907      	ldr	r1, [pc, #28]	; (8007108 <I2C_MasterRequestWrite+0x100>)
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f000 f933 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e000      	b.n	80070fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	00010008 	.word	0x00010008
 8007108:	00010002 	.word	0x00010002

0800710c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b088      	sub	sp, #32
 8007110:	af02      	add	r7, sp, #8
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	607a      	str	r2, [r7, #4]
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	460b      	mov	r3, r1
 800711a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007130:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2b08      	cmp	r3, #8
 8007136:	d006      	beq.n	8007146 <I2C_MasterRequestRead+0x3a>
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d003      	beq.n	8007146 <I2C_MasterRequestRead+0x3a>
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007144:	d108      	bne.n	8007158 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	e00b      	b.n	8007170 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715c:	2b11      	cmp	r3, #17
 800715e:	d107      	bne.n	8007170 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800716e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 f893 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00d      	beq.n	80071a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007196:	d103      	bne.n	80071a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800719e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e079      	b.n	8007298 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071ac:	d108      	bne.n	80071c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80071ae:	897b      	ldrh	r3, [r7, #10]
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	f043 0301 	orr.w	r3, r3, #1
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	611a      	str	r2, [r3, #16]
 80071be:	e05f      	b.n	8007280 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80071c0:	897b      	ldrh	r3, [r7, #10]
 80071c2:	11db      	asrs	r3, r3, #7
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	f003 0306 	and.w	r3, r3, #6
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	f063 030f 	orn	r3, r3, #15
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	4930      	ldr	r1, [pc, #192]	; (80072a0 <I2C_MasterRequestRead+0x194>)
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 f8b9 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e054      	b.n	8007298 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80071ee:	897b      	ldrh	r3, [r7, #10]
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	4929      	ldr	r1, [pc, #164]	; (80072a4 <I2C_MasterRequestRead+0x198>)
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 f8a9 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e044      	b.n	8007298 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800720e:	2300      	movs	r3, #0
 8007210:	613b      	str	r3, [r7, #16]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	613b      	str	r3, [r7, #16]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	613b      	str	r3, [r7, #16]
 8007222:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007232:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 f831 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00d      	beq.n	8007268 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725a:	d103      	bne.n	8007264 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007262:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e017      	b.n	8007298 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007268:	897b      	ldrh	r3, [r7, #10]
 800726a:	11db      	asrs	r3, r3, #7
 800726c:	b2db      	uxtb	r3, r3
 800726e:	f003 0306 	and.w	r3, r3, #6
 8007272:	b2db      	uxtb	r3, r3
 8007274:	f063 030e 	orn	r3, r3, #14
 8007278:	b2da      	uxtb	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	4907      	ldr	r1, [pc, #28]	; (80072a4 <I2C_MasterRequestRead+0x198>)
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 f865 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e000      	b.n	8007298 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	00010008 	.word	0x00010008
 80072a4:	00010002 	.word	0x00010002

080072a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	4613      	mov	r3, r2
 80072b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072b8:	e025      	b.n	8007306 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c0:	d021      	beq.n	8007306 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c2:	f7fd fefb 	bl	80050bc <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d302      	bcc.n	80072d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d116      	bne.n	8007306 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	f043 0220 	orr.w	r2, r3, #32
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e023      	b.n	800734e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	0c1b      	lsrs	r3, r3, #16
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b01      	cmp	r3, #1
 800730e:	d10d      	bne.n	800732c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	43da      	mvns	r2, r3
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4013      	ands	r3, r2
 800731c:	b29b      	uxth	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	bf0c      	ite	eq
 8007322:	2301      	moveq	r3, #1
 8007324:	2300      	movne	r3, #0
 8007326:	b2db      	uxtb	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	e00c      	b.n	8007346 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	43da      	mvns	r2, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	4013      	ands	r3, r2
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	bf0c      	ite	eq
 800733e:	2301      	moveq	r3, #1
 8007340:	2300      	movne	r3, #0
 8007342:	b2db      	uxtb	r3, r3
 8007344:	461a      	mov	r2, r3
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	429a      	cmp	r2, r3
 800734a:	d0b6      	beq.n	80072ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	607a      	str	r2, [r7, #4]
 8007362:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007364:	e051      	b.n	800740a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007374:	d123      	bne.n	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007384:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800738e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	f043 0204 	orr.w	r2, r3, #4
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e046      	b.n	800744c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c4:	d021      	beq.n	800740a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c6:	f7fd fe79 	bl	80050bc <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d302      	bcc.n	80073dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d116      	bne.n	800740a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	f043 0220 	orr.w	r2, r3, #32
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e020      	b.n	800744c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	0c1b      	lsrs	r3, r3, #16
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b01      	cmp	r3, #1
 8007412:	d10c      	bne.n	800742e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	43da      	mvns	r2, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4013      	ands	r3, r2
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	bf14      	ite	ne
 8007426:	2301      	movne	r3, #1
 8007428:	2300      	moveq	r3, #0
 800742a:	b2db      	uxtb	r3, r3
 800742c:	e00b      	b.n	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	43da      	mvns	r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	4013      	ands	r3, r2
 800743a:	b29b      	uxth	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	bf14      	ite	ne
 8007440:	2301      	movne	r3, #1
 8007442:	2300      	moveq	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d18d      	bne.n	8007366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007460:	e02d      	b.n	80074be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 f8ce 	bl	8007604 <I2C_IsAcknowledgeFailed>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e02d      	b.n	80074ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007478:	d021      	beq.n	80074be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800747a:	f7fd fe1f 	bl	80050bc <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	429a      	cmp	r2, r3
 8007488:	d302      	bcc.n	8007490 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d116      	bne.n	80074be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2220      	movs	r2, #32
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	f043 0220 	orr.w	r2, r3, #32
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e007      	b.n	80074ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c8:	2b80      	cmp	r3, #128	; 0x80
 80074ca:	d1ca      	bne.n	8007462 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074e2:	e02d      	b.n	8007540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 f88d 	bl	8007604 <I2C_IsAcknowledgeFailed>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e02d      	b.n	8007550 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fa:	d021      	beq.n	8007540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074fc:	f7fd fdde 	bl	80050bc <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	429a      	cmp	r2, r3
 800750a:	d302      	bcc.n	8007512 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d116      	bne.n	8007540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2220      	movs	r2, #32
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752c:	f043 0220 	orr.w	r2, r3, #32
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e007      	b.n	8007550 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	f003 0304 	and.w	r3, r3, #4
 800754a:	2b04      	cmp	r3, #4
 800754c:	d1ca      	bne.n	80074e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007564:	e042      	b.n	80075ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	f003 0310 	and.w	r3, r3, #16
 8007570:	2b10      	cmp	r3, #16
 8007572:	d119      	bne.n	80075a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f06f 0210 	mvn.w	r2, #16
 800757c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e029      	b.n	80075fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075a8:	f7fd fd88 	bl	80050bc <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d302      	bcc.n	80075be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d116      	bne.n	80075ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2220      	movs	r2, #32
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d8:	f043 0220 	orr.w	r2, r3, #32
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e007      	b.n	80075fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d1b5      	bne.n	8007566 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800761a:	d11b      	bne.n	8007654 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007624:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2220      	movs	r2, #32
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	f043 0204 	orr.w	r2, r3, #4
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e000      	b.n	8007656 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e034      	b.n	80076de <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800767c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f245 5255 	movw	r2, #21845	; 0x5555
 8007686:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6852      	ldr	r2, [r2, #4]
 8007690:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	6892      	ldr	r2, [r2, #8]
 800769a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800769c:	f7fd fd0e 	bl	80050bc <HAL_GetTick>
 80076a0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80076a2:	e00f      	b.n	80076c4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80076a4:	f7fd fd0a 	bl	80050bc <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b31      	cmp	r3, #49	; 0x31
 80076b0:	d908      	bls.n	80076c4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f003 0303 	and.w	r3, r3, #3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e00c      	b.n	80076de <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e8      	bne.n	80076a4 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80076da:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80076f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
	...

08007708 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e267      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d075      	beq.n	8007812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007726:	4b88      	ldr	r3, [pc, #544]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f003 030c 	and.w	r3, r3, #12
 800772e:	2b04      	cmp	r3, #4
 8007730:	d00c      	beq.n	800774c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007732:	4b85      	ldr	r3, [pc, #532]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800773a:	2b08      	cmp	r3, #8
 800773c:	d112      	bne.n	8007764 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800773e:	4b82      	ldr	r3, [pc, #520]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800774a:	d10b      	bne.n	8007764 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800774c:	4b7e      	ldr	r3, [pc, #504]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d05b      	beq.n	8007810 <HAL_RCC_OscConfig+0x108>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d157      	bne.n	8007810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e242      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800776c:	d106      	bne.n	800777c <HAL_RCC_OscConfig+0x74>
 800776e:	4b76      	ldr	r3, [pc, #472]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a75      	ldr	r2, [pc, #468]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 8007774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	e01d      	b.n	80077b8 <HAL_RCC_OscConfig+0xb0>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007784:	d10c      	bne.n	80077a0 <HAL_RCC_OscConfig+0x98>
 8007786:	4b70      	ldr	r3, [pc, #448]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a6f      	ldr	r2, [pc, #444]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 800778c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	4b6d      	ldr	r3, [pc, #436]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a6c      	ldr	r2, [pc, #432]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 8007798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800779c:	6013      	str	r3, [r2, #0]
 800779e:	e00b      	b.n	80077b8 <HAL_RCC_OscConfig+0xb0>
 80077a0:	4b69      	ldr	r3, [pc, #420]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a68      	ldr	r2, [pc, #416]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 80077a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	4b66      	ldr	r3, [pc, #408]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a65      	ldr	r2, [pc, #404]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 80077b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d013      	beq.n	80077e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077c0:	f7fd fc7c 	bl	80050bc <HAL_GetTick>
 80077c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077c6:	e008      	b.n	80077da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077c8:	f7fd fc78 	bl	80050bc <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b64      	cmp	r3, #100	; 0x64
 80077d4:	d901      	bls.n	80077da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e207      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077da:	4b5b      	ldr	r3, [pc, #364]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d0f0      	beq.n	80077c8 <HAL_RCC_OscConfig+0xc0>
 80077e6:	e014      	b.n	8007812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e8:	f7fd fc68 	bl	80050bc <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077f0:	f7fd fc64 	bl	80050bc <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b64      	cmp	r3, #100	; 0x64
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e1f3      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007802:	4b51      	ldr	r3, [pc, #324]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1f0      	bne.n	80077f0 <HAL_RCC_OscConfig+0xe8>
 800780e:	e000      	b.n	8007812 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d063      	beq.n	80078e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800781e:	4b4a      	ldr	r3, [pc, #296]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 030c 	and.w	r3, r3, #12
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00b      	beq.n	8007842 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800782a:	4b47      	ldr	r3, [pc, #284]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007832:	2b08      	cmp	r3, #8
 8007834:	d11c      	bne.n	8007870 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007836:	4b44      	ldr	r3, [pc, #272]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d116      	bne.n	8007870 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007842:	4b41      	ldr	r3, [pc, #260]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <HAL_RCC_OscConfig+0x152>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d001      	beq.n	800785a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e1c7      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800785a:	4b3b      	ldr	r3, [pc, #236]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	00db      	lsls	r3, r3, #3
 8007868:	4937      	ldr	r1, [pc, #220]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 800786a:	4313      	orrs	r3, r2
 800786c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800786e:	e03a      	b.n	80078e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d020      	beq.n	80078ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007878:	4b34      	ldr	r3, [pc, #208]	; (800794c <HAL_RCC_OscConfig+0x244>)
 800787a:	2201      	movs	r2, #1
 800787c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800787e:	f7fd fc1d 	bl	80050bc <HAL_GetTick>
 8007882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007884:	e008      	b.n	8007898 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007886:	f7fd fc19 	bl	80050bc <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	2b02      	cmp	r3, #2
 8007892:	d901      	bls.n	8007898 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e1a8      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007898:	4b2b      	ldr	r3, [pc, #172]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0f0      	beq.n	8007886 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078a4:	4b28      	ldr	r3, [pc, #160]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	4925      	ldr	r1, [pc, #148]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	600b      	str	r3, [r1, #0]
 80078b8:	e015      	b.n	80078e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078ba:	4b24      	ldr	r3, [pc, #144]	; (800794c <HAL_RCC_OscConfig+0x244>)
 80078bc:	2200      	movs	r2, #0
 80078be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c0:	f7fd fbfc 	bl	80050bc <HAL_GetTick>
 80078c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078c6:	e008      	b.n	80078da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078c8:	f7fd fbf8 	bl	80050bc <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e187      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078da:	4b1b      	ldr	r3, [pc, #108]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1f0      	bne.n	80078c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0308 	and.w	r3, r3, #8
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d036      	beq.n	8007960 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d016      	beq.n	8007928 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078fa:	4b15      	ldr	r3, [pc, #84]	; (8007950 <HAL_RCC_OscConfig+0x248>)
 80078fc:	2201      	movs	r2, #1
 80078fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007900:	f7fd fbdc 	bl	80050bc <HAL_GetTick>
 8007904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007906:	e008      	b.n	800791a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007908:	f7fd fbd8 	bl	80050bc <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b02      	cmp	r3, #2
 8007914:	d901      	bls.n	800791a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e167      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800791a:	4b0b      	ldr	r3, [pc, #44]	; (8007948 <HAL_RCC_OscConfig+0x240>)
 800791c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0f0      	beq.n	8007908 <HAL_RCC_OscConfig+0x200>
 8007926:	e01b      	b.n	8007960 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007928:	4b09      	ldr	r3, [pc, #36]	; (8007950 <HAL_RCC_OscConfig+0x248>)
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800792e:	f7fd fbc5 	bl	80050bc <HAL_GetTick>
 8007932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007934:	e00e      	b.n	8007954 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007936:	f7fd fbc1 	bl	80050bc <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d907      	bls.n	8007954 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e150      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
 8007948:	40023800 	.word	0x40023800
 800794c:	42470000 	.word	0x42470000
 8007950:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007954:	4b88      	ldr	r3, [pc, #544]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1ea      	bne.n	8007936 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0304 	and.w	r3, r3, #4
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 8097 	beq.w	8007a9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800796e:	2300      	movs	r3, #0
 8007970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007972:	4b81      	ldr	r3, [pc, #516]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10f      	bne.n	800799e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800797e:	2300      	movs	r3, #0
 8007980:	60bb      	str	r3, [r7, #8]
 8007982:	4b7d      	ldr	r3, [pc, #500]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007986:	4a7c      	ldr	r2, [pc, #496]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800798c:	6413      	str	r3, [r2, #64]	; 0x40
 800798e:	4b7a      	ldr	r3, [pc, #488]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007996:	60bb      	str	r3, [r7, #8]
 8007998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800799a:	2301      	movs	r3, #1
 800799c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800799e:	4b77      	ldr	r3, [pc, #476]	; (8007b7c <HAL_RCC_OscConfig+0x474>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d118      	bne.n	80079dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079aa:	4b74      	ldr	r3, [pc, #464]	; (8007b7c <HAL_RCC_OscConfig+0x474>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a73      	ldr	r2, [pc, #460]	; (8007b7c <HAL_RCC_OscConfig+0x474>)
 80079b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079b6:	f7fd fb81 	bl	80050bc <HAL_GetTick>
 80079ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079bc:	e008      	b.n	80079d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079be:	f7fd fb7d 	bl	80050bc <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d901      	bls.n	80079d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e10c      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079d0:	4b6a      	ldr	r3, [pc, #424]	; (8007b7c <HAL_RCC_OscConfig+0x474>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d0f0      	beq.n	80079be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d106      	bne.n	80079f2 <HAL_RCC_OscConfig+0x2ea>
 80079e4:	4b64      	ldr	r3, [pc, #400]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 80079e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e8:	4a63      	ldr	r2, [pc, #396]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 80079ea:	f043 0301 	orr.w	r3, r3, #1
 80079ee:	6713      	str	r3, [r2, #112]	; 0x70
 80079f0:	e01c      	b.n	8007a2c <HAL_RCC_OscConfig+0x324>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	2b05      	cmp	r3, #5
 80079f8:	d10c      	bne.n	8007a14 <HAL_RCC_OscConfig+0x30c>
 80079fa:	4b5f      	ldr	r3, [pc, #380]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 80079fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fe:	4a5e      	ldr	r2, [pc, #376]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007a00:	f043 0304 	orr.w	r3, r3, #4
 8007a04:	6713      	str	r3, [r2, #112]	; 0x70
 8007a06:	4b5c      	ldr	r3, [pc, #368]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0a:	4a5b      	ldr	r2, [pc, #364]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007a0c:	f043 0301 	orr.w	r3, r3, #1
 8007a10:	6713      	str	r3, [r2, #112]	; 0x70
 8007a12:	e00b      	b.n	8007a2c <HAL_RCC_OscConfig+0x324>
 8007a14:	4b58      	ldr	r3, [pc, #352]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a18:	4a57      	ldr	r2, [pc, #348]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007a1a:	f023 0301 	bic.w	r3, r3, #1
 8007a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a20:	4b55      	ldr	r3, [pc, #340]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a24:	4a54      	ldr	r2, [pc, #336]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007a26:	f023 0304 	bic.w	r3, r3, #4
 8007a2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d015      	beq.n	8007a60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a34:	f7fd fb42 	bl	80050bc <HAL_GetTick>
 8007a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a3a:	e00a      	b.n	8007a52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a3c:	f7fd fb3e 	bl	80050bc <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d901      	bls.n	8007a52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e0cb      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a52:	4b49      	ldr	r3, [pc, #292]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0ee      	beq.n	8007a3c <HAL_RCC_OscConfig+0x334>
 8007a5e:	e014      	b.n	8007a8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a60:	f7fd fb2c 	bl	80050bc <HAL_GetTick>
 8007a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a66:	e00a      	b.n	8007a7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a68:	f7fd fb28 	bl	80050bc <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e0b5      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a7e:	4b3e      	ldr	r3, [pc, #248]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1ee      	bne.n	8007a68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d105      	bne.n	8007a9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a90:	4b39      	ldr	r3, [pc, #228]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a94:	4a38      	ldr	r2, [pc, #224]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80a1 	beq.w	8007be8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007aa6:	4b34      	ldr	r3, [pc, #208]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f003 030c 	and.w	r3, r3, #12
 8007aae:	2b08      	cmp	r3, #8
 8007ab0:	d05c      	beq.n	8007b6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d141      	bne.n	8007b3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aba:	4b31      	ldr	r3, [pc, #196]	; (8007b80 <HAL_RCC_OscConfig+0x478>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ac0:	f7fd fafc 	bl	80050bc <HAL_GetTick>
 8007ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ac6:	e008      	b.n	8007ada <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ac8:	f7fd faf8 	bl	80050bc <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d901      	bls.n	8007ada <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e087      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ada:	4b27      	ldr	r3, [pc, #156]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1f0      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	69da      	ldr	r2, [r3, #28]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	431a      	orrs	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	019b      	lsls	r3, r3, #6
 8007af6:	431a      	orrs	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afc:	085b      	lsrs	r3, r3, #1
 8007afe:	3b01      	subs	r3, #1
 8007b00:	041b      	lsls	r3, r3, #16
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	061b      	lsls	r3, r3, #24
 8007b0a:	491b      	ldr	r1, [pc, #108]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b10:	4b1b      	ldr	r3, [pc, #108]	; (8007b80 <HAL_RCC_OscConfig+0x478>)
 8007b12:	2201      	movs	r2, #1
 8007b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b16:	f7fd fad1 	bl	80050bc <HAL_GetTick>
 8007b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b1c:	e008      	b.n	8007b30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b1e:	f7fd facd 	bl	80050bc <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d901      	bls.n	8007b30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e05c      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b30:	4b11      	ldr	r3, [pc, #68]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d0f0      	beq.n	8007b1e <HAL_RCC_OscConfig+0x416>
 8007b3c:	e054      	b.n	8007be8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b3e:	4b10      	ldr	r3, [pc, #64]	; (8007b80 <HAL_RCC_OscConfig+0x478>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b44:	f7fd faba 	bl	80050bc <HAL_GetTick>
 8007b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b4a:	e008      	b.n	8007b5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b4c:	f7fd fab6 	bl	80050bc <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d901      	bls.n	8007b5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e045      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b5e:	4b06      	ldr	r3, [pc, #24]	; (8007b78 <HAL_RCC_OscConfig+0x470>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1f0      	bne.n	8007b4c <HAL_RCC_OscConfig+0x444>
 8007b6a:	e03d      	b.n	8007be8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d107      	bne.n	8007b84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e038      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
 8007b78:	40023800 	.word	0x40023800
 8007b7c:	40007000 	.word	0x40007000
 8007b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b84:	4b1b      	ldr	r3, [pc, #108]	; (8007bf4 <HAL_RCC_OscConfig+0x4ec>)
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d028      	beq.n	8007be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d121      	bne.n	8007be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d11a      	bne.n	8007be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d111      	bne.n	8007be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bca:	085b      	lsrs	r3, r3, #1
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d107      	bne.n	8007be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d001      	beq.n	8007be8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e000      	b.n	8007bea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	40023800 	.word	0x40023800

08007bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e0cc      	b.n	8007da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c0c:	4b68      	ldr	r3, [pc, #416]	; (8007db0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0307 	and.w	r3, r3, #7
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d90c      	bls.n	8007c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c1a:	4b65      	ldr	r3, [pc, #404]	; (8007db0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c22:	4b63      	ldr	r3, [pc, #396]	; (8007db0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d001      	beq.n	8007c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e0b8      	b.n	8007da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d020      	beq.n	8007c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0304 	and.w	r3, r3, #4
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d005      	beq.n	8007c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c4c:	4b59      	ldr	r3, [pc, #356]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	4a58      	ldr	r2, [pc, #352]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d005      	beq.n	8007c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c64:	4b53      	ldr	r3, [pc, #332]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	4a52      	ldr	r2, [pc, #328]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c70:	4b50      	ldr	r3, [pc, #320]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	494d      	ldr	r1, [pc, #308]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d044      	beq.n	8007d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d107      	bne.n	8007ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c96:	4b47      	ldr	r3, [pc, #284]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d119      	bne.n	8007cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e07f      	b.n	8007da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d003      	beq.n	8007cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d107      	bne.n	8007cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cb6:	4b3f      	ldr	r3, [pc, #252]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d109      	bne.n	8007cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e06f      	b.n	8007da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cc6:	4b3b      	ldr	r3, [pc, #236]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e067      	b.n	8007da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cd6:	4b37      	ldr	r3, [pc, #220]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f023 0203 	bic.w	r2, r3, #3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	4934      	ldr	r1, [pc, #208]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ce8:	f7fd f9e8 	bl	80050bc <HAL_GetTick>
 8007cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cee:	e00a      	b.n	8007d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cf0:	f7fd f9e4 	bl	80050bc <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d901      	bls.n	8007d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e04f      	b.n	8007da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d06:	4b2b      	ldr	r3, [pc, #172]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	f003 020c 	and.w	r2, r3, #12
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d1eb      	bne.n	8007cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d18:	4b25      	ldr	r3, [pc, #148]	; (8007db0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0307 	and.w	r3, r3, #7
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d20c      	bcs.n	8007d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d26:	4b22      	ldr	r3, [pc, #136]	; (8007db0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	b2d2      	uxtb	r2, r2
 8007d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d2e:	4b20      	ldr	r3, [pc, #128]	; (8007db0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0307 	and.w	r3, r3, #7
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d001      	beq.n	8007d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e032      	b.n	8007da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d008      	beq.n	8007d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d4c:	4b19      	ldr	r3, [pc, #100]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	4916      	ldr	r1, [pc, #88]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0308 	and.w	r3, r3, #8
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d009      	beq.n	8007d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d6a:	4b12      	ldr	r3, [pc, #72]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	00db      	lsls	r3, r3, #3
 8007d78:	490e      	ldr	r1, [pc, #56]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d7e:	f000 f821 	bl	8007dc4 <HAL_RCC_GetSysClockFreq>
 8007d82:	4602      	mov	r2, r0
 8007d84:	4b0b      	ldr	r3, [pc, #44]	; (8007db4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	091b      	lsrs	r3, r3, #4
 8007d8a:	f003 030f 	and.w	r3, r3, #15
 8007d8e:	490a      	ldr	r1, [pc, #40]	; (8007db8 <HAL_RCC_ClockConfig+0x1c0>)
 8007d90:	5ccb      	ldrb	r3, [r1, r3]
 8007d92:	fa22 f303 	lsr.w	r3, r2, r3
 8007d96:	4a09      	ldr	r2, [pc, #36]	; (8007dbc <HAL_RCC_ClockConfig+0x1c4>)
 8007d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d9a:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fd f948 	bl	8005034 <HAL_InitTick>

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	40023c00 	.word	0x40023c00
 8007db4:	40023800 	.word	0x40023800
 8007db8:	08012aa8 	.word	0x08012aa8
 8007dbc:	20000004 	.word	0x20000004
 8007dc0:	20000008 	.word	0x20000008

08007dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dc8:	b090      	sub	sp, #64	; 0x40
 8007dca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ddc:	4b59      	ldr	r3, [pc, #356]	; (8007f44 <HAL_RCC_GetSysClockFreq+0x180>)
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f003 030c 	and.w	r3, r3, #12
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	d00d      	beq.n	8007e04 <HAL_RCC_GetSysClockFreq+0x40>
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	f200 80a1 	bhi.w	8007f30 <HAL_RCC_GetSysClockFreq+0x16c>
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <HAL_RCC_GetSysClockFreq+0x34>
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d003      	beq.n	8007dfe <HAL_RCC_GetSysClockFreq+0x3a>
 8007df6:	e09b      	b.n	8007f30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007df8:	4b53      	ldr	r3, [pc, #332]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x184>)
 8007dfa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007dfc:	e09b      	b.n	8007f36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007dfe:	4b53      	ldr	r3, [pc, #332]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007e02:	e098      	b.n	8007f36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e04:	4b4f      	ldr	r3, [pc, #316]	; (8007f44 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e0e:	4b4d      	ldr	r3, [pc, #308]	; (8007f44 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d028      	beq.n	8007e6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e1a:	4b4a      	ldr	r3, [pc, #296]	; (8007f44 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	099b      	lsrs	r3, r3, #6
 8007e20:	2200      	movs	r2, #0
 8007e22:	623b      	str	r3, [r7, #32]
 8007e24:	627a      	str	r2, [r7, #36]	; 0x24
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4b47      	ldr	r3, [pc, #284]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e30:	fb03 f201 	mul.w	r2, r3, r1
 8007e34:	2300      	movs	r3, #0
 8007e36:	fb00 f303 	mul.w	r3, r0, r3
 8007e3a:	4413      	add	r3, r2
 8007e3c:	4a43      	ldr	r2, [pc, #268]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e3e:	fba0 1202 	umull	r1, r2, r0, r2
 8007e42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e44:	460a      	mov	r2, r1
 8007e46:	62ba      	str	r2, [r7, #40]	; 0x28
 8007e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e4a:	4413      	add	r3, r2
 8007e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e50:	2200      	movs	r2, #0
 8007e52:	61bb      	str	r3, [r7, #24]
 8007e54:	61fa      	str	r2, [r7, #28]
 8007e56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e5e:	f7f8 ff23 	bl	8000ca8 <__aeabi_uldivmod>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4613      	mov	r3, r2
 8007e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e6a:	e053      	b.n	8007f14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e6c:	4b35      	ldr	r3, [pc, #212]	; (8007f44 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	099b      	lsrs	r3, r3, #6
 8007e72:	2200      	movs	r2, #0
 8007e74:	613b      	str	r3, [r7, #16]
 8007e76:	617a      	str	r2, [r7, #20]
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007e7e:	f04f 0b00 	mov.w	fp, #0
 8007e82:	4652      	mov	r2, sl
 8007e84:	465b      	mov	r3, fp
 8007e86:	f04f 0000 	mov.w	r0, #0
 8007e8a:	f04f 0100 	mov.w	r1, #0
 8007e8e:	0159      	lsls	r1, r3, #5
 8007e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e94:	0150      	lsls	r0, r2, #5
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	ebb2 080a 	subs.w	r8, r2, sl
 8007e9e:	eb63 090b 	sbc.w	r9, r3, fp
 8007ea2:	f04f 0200 	mov.w	r2, #0
 8007ea6:	f04f 0300 	mov.w	r3, #0
 8007eaa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007eae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007eb2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007eb6:	ebb2 0408 	subs.w	r4, r2, r8
 8007eba:	eb63 0509 	sbc.w	r5, r3, r9
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	f04f 0300 	mov.w	r3, #0
 8007ec6:	00eb      	lsls	r3, r5, #3
 8007ec8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ecc:	00e2      	lsls	r2, r4, #3
 8007ece:	4614      	mov	r4, r2
 8007ed0:	461d      	mov	r5, r3
 8007ed2:	eb14 030a 	adds.w	r3, r4, sl
 8007ed6:	603b      	str	r3, [r7, #0]
 8007ed8:	eb45 030b 	adc.w	r3, r5, fp
 8007edc:	607b      	str	r3, [r7, #4]
 8007ede:	f04f 0200 	mov.w	r2, #0
 8007ee2:	f04f 0300 	mov.w	r3, #0
 8007ee6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007eea:	4629      	mov	r1, r5
 8007eec:	028b      	lsls	r3, r1, #10
 8007eee:	4621      	mov	r1, r4
 8007ef0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	028a      	lsls	r2, r1, #10
 8007ef8:	4610      	mov	r0, r2
 8007efa:	4619      	mov	r1, r3
 8007efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efe:	2200      	movs	r2, #0
 8007f00:	60bb      	str	r3, [r7, #8]
 8007f02:	60fa      	str	r2, [r7, #12]
 8007f04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f08:	f7f8 fece 	bl	8000ca8 <__aeabi_uldivmod>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4613      	mov	r3, r2
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f14:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	0c1b      	lsrs	r3, r3, #16
 8007f1a:	f003 0303 	and.w	r3, r3, #3
 8007f1e:	3301      	adds	r3, #1
 8007f20:	005b      	lsls	r3, r3, #1
 8007f22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007f24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f2e:	e002      	b.n	8007f36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f30:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x184>)
 8007f32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3740      	adds	r7, #64	; 0x40
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f42:	bf00      	nop
 8007f44:	40023800 	.word	0x40023800
 8007f48:	00f42400 	.word	0x00f42400
 8007f4c:	017d7840 	.word	0x017d7840

08007f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f50:	b480      	push	{r7}
 8007f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f54:	4b03      	ldr	r3, [pc, #12]	; (8007f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f56:	681b      	ldr	r3, [r3, #0]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20000004 	.word	0x20000004

08007f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f6c:	f7ff fff0 	bl	8007f50 <HAL_RCC_GetHCLKFreq>
 8007f70:	4602      	mov	r2, r0
 8007f72:	4b05      	ldr	r3, [pc, #20]	; (8007f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	0a9b      	lsrs	r3, r3, #10
 8007f78:	f003 0307 	and.w	r3, r3, #7
 8007f7c:	4903      	ldr	r1, [pc, #12]	; (8007f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f7e:	5ccb      	ldrb	r3, [r1, r3]
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	40023800 	.word	0x40023800
 8007f8c:	08012ab8 	.word	0x08012ab8

08007f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f94:	f7ff ffdc 	bl	8007f50 <HAL_RCC_GetHCLKFreq>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	0b5b      	lsrs	r3, r3, #13
 8007fa0:	f003 0307 	and.w	r3, r3, #7
 8007fa4:	4903      	ldr	r1, [pc, #12]	; (8007fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fa6:	5ccb      	ldrb	r3, [r1, r3]
 8007fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	40023800 	.word	0x40023800
 8007fb4:	08012ab8 	.word	0x08012ab8

08007fb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e07b      	b.n	80080c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d108      	bne.n	8007fe4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fda:	d009      	beq.n	8007ff0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	61da      	str	r2, [r3, #28]
 8007fe2:	e005      	b.n	8007ff0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d106      	bne.n	8008010 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7fc f8fa 	bl	8004204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008026:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008038:	431a      	orrs	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008042:	431a      	orrs	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	431a      	orrs	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	431a      	orrs	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008060:	431a      	orrs	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008074:	ea42 0103 	orr.w	r1, r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	0c1b      	lsrs	r3, r3, #16
 800808e:	f003 0104 	and.w	r1, r3, #4
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	f003 0210 	and.w	r2, r3, #16
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69da      	ldr	r2, [r3, #28]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b088      	sub	sp, #32
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	603b      	str	r3, [r7, #0]
 80080d6:	4613      	mov	r3, r2
 80080d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d101      	bne.n	80080ec <HAL_SPI_Transmit+0x22>
 80080e8:	2302      	movs	r3, #2
 80080ea:	e126      	b.n	800833a <HAL_SPI_Transmit+0x270>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080f4:	f7fc ffe2 	bl	80050bc <HAL_GetTick>
 80080f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80080fa:	88fb      	ldrh	r3, [r7, #6]
 80080fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b01      	cmp	r3, #1
 8008108:	d002      	beq.n	8008110 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800810a:	2302      	movs	r3, #2
 800810c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800810e:	e10b      	b.n	8008328 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <HAL_SPI_Transmit+0x52>
 8008116:	88fb      	ldrh	r3, [r7, #6]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d102      	bne.n	8008122 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008120:	e102      	b.n	8008328 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2203      	movs	r2, #3
 8008126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	88fa      	ldrh	r2, [r7, #6]
 800813a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	88fa      	ldrh	r2, [r7, #6]
 8008140:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008168:	d10f      	bne.n	800818a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008178:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008188:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008194:	2b40      	cmp	r3, #64	; 0x40
 8008196:	d007      	beq.n	80081a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081b0:	d14b      	bne.n	800824a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <HAL_SPI_Transmit+0xf6>
 80081ba:	8afb      	ldrh	r3, [r7, #22]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d13e      	bne.n	800823e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c4:	881a      	ldrh	r2, [r3, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d0:	1c9a      	adds	r2, r3, #2
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081da:	b29b      	uxth	r3, r3
 80081dc:	3b01      	subs	r3, #1
 80081de:	b29a      	uxth	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80081e4:	e02b      	b.n	800823e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f003 0302 	and.w	r3, r3, #2
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d112      	bne.n	800821a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f8:	881a      	ldrh	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008204:	1c9a      	adds	r2, r3, #2
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800820e:	b29b      	uxth	r3, r3
 8008210:	3b01      	subs	r3, #1
 8008212:	b29a      	uxth	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	86da      	strh	r2, [r3, #54]	; 0x36
 8008218:	e011      	b.n	800823e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800821a:	f7fc ff4f 	bl	80050bc <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d803      	bhi.n	8008232 <HAL_SPI_Transmit+0x168>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008230:	d102      	bne.n	8008238 <HAL_SPI_Transmit+0x16e>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d102      	bne.n	800823e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800823c:	e074      	b.n	8008328 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008242:	b29b      	uxth	r3, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1ce      	bne.n	80081e6 <HAL_SPI_Transmit+0x11c>
 8008248:	e04c      	b.n	80082e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <HAL_SPI_Transmit+0x18e>
 8008252:	8afb      	ldrh	r3, [r7, #22]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d140      	bne.n	80082da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	330c      	adds	r3, #12
 8008262:	7812      	ldrb	r2, [r2, #0]
 8008264:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008274:	b29b      	uxth	r3, r3
 8008276:	3b01      	subs	r3, #1
 8008278:	b29a      	uxth	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800827e:	e02c      	b.n	80082da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b02      	cmp	r3, #2
 800828c:	d113      	bne.n	80082b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	330c      	adds	r3, #12
 8008298:	7812      	ldrb	r2, [r2, #0]
 800829a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	3b01      	subs	r3, #1
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80082b4:	e011      	b.n	80082da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082b6:	f7fc ff01 	bl	80050bc <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d803      	bhi.n	80082ce <HAL_SPI_Transmit+0x204>
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082cc:	d102      	bne.n	80082d4 <HAL_SPI_Transmit+0x20a>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d102      	bne.n	80082da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80082d8:	e026      	b.n	8008328 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082de:	b29b      	uxth	r3, r3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1cd      	bne.n	8008280 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 fbd9 	bl	8008aa0 <SPI_EndRxTxTransaction>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2220      	movs	r2, #32
 80082f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10a      	bne.n	8008318 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008302:	2300      	movs	r3, #0
 8008304:	613b      	str	r3, [r7, #16]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	613b      	str	r3, [r7, #16]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	613b      	str	r3, [r7, #16]
 8008316:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	77fb      	strb	r3, [r7, #31]
 8008324:	e000      	b.n	8008328 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008326:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008338:	7ffb      	ldrb	r3, [r7, #31]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3720      	adds	r7, #32
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b088      	sub	sp, #32
 8008346:	af02      	add	r7, sp, #8
 8008348:	60f8      	str	r0, [r7, #12]
 800834a:	60b9      	str	r1, [r7, #8]
 800834c:	603b      	str	r3, [r7, #0]
 800834e:	4613      	mov	r3, r2
 8008350:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800835e:	d112      	bne.n	8008386 <HAL_SPI_Receive+0x44>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10e      	bne.n	8008386 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2204      	movs	r2, #4
 800836c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008370:	88fa      	ldrh	r2, [r7, #6]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	4613      	mov	r3, r2
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	68b9      	ldr	r1, [r7, #8]
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 f8f1 	bl	8008564 <HAL_SPI_TransmitReceive>
 8008382:	4603      	mov	r3, r0
 8008384:	e0ea      	b.n	800855c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800838c:	2b01      	cmp	r3, #1
 800838e:	d101      	bne.n	8008394 <HAL_SPI_Receive+0x52>
 8008390:	2302      	movs	r3, #2
 8008392:	e0e3      	b.n	800855c <HAL_SPI_Receive+0x21a>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800839c:	f7fc fe8e 	bl	80050bc <HAL_GetTick>
 80083a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d002      	beq.n	80083b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80083ae:	2302      	movs	r3, #2
 80083b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80083b2:	e0ca      	b.n	800854a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <HAL_SPI_Receive+0x7e>
 80083ba:	88fb      	ldrh	r3, [r7, #6]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d102      	bne.n	80083c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80083c4:	e0c1      	b.n	800854a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2204      	movs	r2, #4
 80083ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	88fa      	ldrh	r2, [r7, #6]
 80083de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	88fa      	ldrh	r2, [r7, #6]
 80083e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800840c:	d10f      	bne.n	800842e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800841c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800842c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008438:	2b40      	cmp	r3, #64	; 0x40
 800843a:	d007      	beq.n	800844c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800844a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d162      	bne.n	800851a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008454:	e02e      	b.n	80084b4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f003 0301 	and.w	r3, r3, #1
 8008460:	2b01      	cmp	r3, #1
 8008462:	d115      	bne.n	8008490 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f103 020c 	add.w	r2, r3, #12
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008470:	7812      	ldrb	r2, [r2, #0]
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008484:	b29b      	uxth	r3, r3
 8008486:	3b01      	subs	r3, #1
 8008488:	b29a      	uxth	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800848e:	e011      	b.n	80084b4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008490:	f7fc fe14 	bl	80050bc <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	429a      	cmp	r2, r3
 800849e:	d803      	bhi.n	80084a8 <HAL_SPI_Receive+0x166>
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a6:	d102      	bne.n	80084ae <HAL_SPI_Receive+0x16c>
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d102      	bne.n	80084b4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80084b2:	e04a      	b.n	800854a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1cb      	bne.n	8008456 <HAL_SPI_Receive+0x114>
 80084be:	e031      	b.n	8008524 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d113      	bne.n	80084f6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68da      	ldr	r2, [r3, #12]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d8:	b292      	uxth	r2, r2
 80084da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	1c9a      	adds	r2, r3, #2
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	3b01      	subs	r3, #1
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084f4:	e011      	b.n	800851a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084f6:	f7fc fde1 	bl	80050bc <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	429a      	cmp	r2, r3
 8008504:	d803      	bhi.n	800850e <HAL_SPI_Receive+0x1cc>
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850c:	d102      	bne.n	8008514 <HAL_SPI_Receive+0x1d2>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008518:	e017      	b.n	800854a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800851e:	b29b      	uxth	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1cd      	bne.n	80084c0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 fa53 	bl	80089d4 <SPI_EndRxTransaction>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2220      	movs	r2, #32
 8008538:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	75fb      	strb	r3, [r7, #23]
 8008546:	e000      	b.n	800854a <HAL_SPI_Receive+0x208>
  }

error :
 8008548:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800855a:	7dfb      	ldrb	r3, [r7, #23]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b08c      	sub	sp, #48	; 0x30
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
 8008570:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008572:	2301      	movs	r3, #1
 8008574:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008582:	2b01      	cmp	r3, #1
 8008584:	d101      	bne.n	800858a <HAL_SPI_TransmitReceive+0x26>
 8008586:	2302      	movs	r3, #2
 8008588:	e18a      	b.n	80088a0 <HAL_SPI_TransmitReceive+0x33c>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008592:	f7fc fd93 	bl	80050bc <HAL_GetTick>
 8008596:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800859e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80085a8:	887b      	ldrh	r3, [r7, #2]
 80085aa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80085ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d00f      	beq.n	80085d4 <HAL_SPI_TransmitReceive+0x70>
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085ba:	d107      	bne.n	80085cc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d103      	bne.n	80085cc <HAL_SPI_TransmitReceive+0x68>
 80085c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	d003      	beq.n	80085d4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80085cc:	2302      	movs	r3, #2
 80085ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80085d2:	e15b      	b.n	800888c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <HAL_SPI_TransmitReceive+0x82>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <HAL_SPI_TransmitReceive+0x82>
 80085e0:	887b      	ldrh	r3, [r7, #2]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d103      	bne.n	80085ee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80085ec:	e14e      	b.n	800888c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	d003      	beq.n	8008602 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2205      	movs	r2, #5
 80085fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	887a      	ldrh	r2, [r7, #2]
 8008612:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	887a      	ldrh	r2, [r7, #2]
 8008618:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	887a      	ldrh	r2, [r7, #2]
 8008624:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	887a      	ldrh	r2, [r7, #2]
 800862a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008642:	2b40      	cmp	r3, #64	; 0x40
 8008644:	d007      	beq.n	8008656 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008654:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800865e:	d178      	bne.n	8008752 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <HAL_SPI_TransmitReceive+0x10a>
 8008668:	8b7b      	ldrh	r3, [r7, #26]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d166      	bne.n	800873c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008672:	881a      	ldrh	r2, [r3, #0]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867e:	1c9a      	adds	r2, r3, #2
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008688:	b29b      	uxth	r3, r3
 800868a:	3b01      	subs	r3, #1
 800868c:	b29a      	uxth	r2, r3
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008692:	e053      	b.n	800873c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d11b      	bne.n	80086da <HAL_SPI_TransmitReceive+0x176>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d016      	beq.n	80086da <HAL_SPI_TransmitReceive+0x176>
 80086ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d113      	bne.n	80086da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b6:	881a      	ldrh	r2, [r3, #0]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c2:	1c9a      	adds	r2, r3, #2
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	3b01      	subs	r3, #1
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d119      	bne.n	800871c <HAL_SPI_TransmitReceive+0x1b8>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d014      	beq.n	800871c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68da      	ldr	r2, [r3, #12]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fc:	b292      	uxth	r2, r2
 80086fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008704:	1c9a      	adds	r2, r3, #2
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800870e:	b29b      	uxth	r3, r3
 8008710:	3b01      	subs	r3, #1
 8008712:	b29a      	uxth	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008718:	2301      	movs	r3, #1
 800871a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800871c:	f7fc fcce 	bl	80050bc <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008728:	429a      	cmp	r2, r3
 800872a:	d807      	bhi.n	800873c <HAL_SPI_TransmitReceive+0x1d8>
 800872c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008732:	d003      	beq.n	800873c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800873a:	e0a7      	b.n	800888c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008740:	b29b      	uxth	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1a6      	bne.n	8008694 <HAL_SPI_TransmitReceive+0x130>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1a1      	bne.n	8008694 <HAL_SPI_TransmitReceive+0x130>
 8008750:	e07c      	b.n	800884c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d002      	beq.n	8008760 <HAL_SPI_TransmitReceive+0x1fc>
 800875a:	8b7b      	ldrh	r3, [r7, #26]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d16b      	bne.n	8008838 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	330c      	adds	r3, #12
 800876a:	7812      	ldrb	r2, [r2, #0]
 800876c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800877c:	b29b      	uxth	r3, r3
 800877e:	3b01      	subs	r3, #1
 8008780:	b29a      	uxth	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008786:	e057      	b.n	8008838 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f003 0302 	and.w	r3, r3, #2
 8008792:	2b02      	cmp	r3, #2
 8008794:	d11c      	bne.n	80087d0 <HAL_SPI_TransmitReceive+0x26c>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800879a:	b29b      	uxth	r3, r3
 800879c:	2b00      	cmp	r3, #0
 800879e:	d017      	beq.n	80087d0 <HAL_SPI_TransmitReceive+0x26c>
 80087a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d114      	bne.n	80087d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	330c      	adds	r3, #12
 80087b0:	7812      	ldrb	r2, [r2, #0]
 80087b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	3b01      	subs	r3, #1
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d119      	bne.n	8008812 <HAL_SPI_TransmitReceive+0x2ae>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d014      	beq.n	8008812 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68da      	ldr	r2, [r3, #12]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f2:	b2d2      	uxtb	r2, r2
 80087f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008804:	b29b      	uxth	r3, r3
 8008806:	3b01      	subs	r3, #1
 8008808:	b29a      	uxth	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800880e:	2301      	movs	r3, #1
 8008810:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008812:	f7fc fc53 	bl	80050bc <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800881e:	429a      	cmp	r2, r3
 8008820:	d803      	bhi.n	800882a <HAL_SPI_TransmitReceive+0x2c6>
 8008822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008828:	d102      	bne.n	8008830 <HAL_SPI_TransmitReceive+0x2cc>
 800882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882c:	2b00      	cmp	r3, #0
 800882e:	d103      	bne.n	8008838 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008836:	e029      	b.n	800888c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800883c:	b29b      	uxth	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1a2      	bne.n	8008788 <HAL_SPI_TransmitReceive+0x224>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008846:	b29b      	uxth	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	d19d      	bne.n	8008788 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800884c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800884e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 f925 	bl	8008aa0 <SPI_EndRxTxTransaction>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d006      	beq.n	800886a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2220      	movs	r2, #32
 8008866:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008868:	e010      	b.n	800888c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10b      	bne.n	800888a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008872:	2300      	movs	r3, #0
 8008874:	617b      	str	r3, [r7, #20]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	617b      	str	r3, [r7, #20]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	617b      	str	r3, [r7, #20]
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	e000      	b.n	800888c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800888a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800889c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3730      	adds	r7, #48	; 0x30
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088b6:	b2db      	uxtb	r3, r3
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	4613      	mov	r3, r2
 80088d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80088d4:	f7fc fbf2 	bl	80050bc <HAL_GetTick>
 80088d8:	4602      	mov	r2, r0
 80088da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088dc:	1a9b      	subs	r3, r3, r2
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	4413      	add	r3, r2
 80088e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80088e4:	f7fc fbea 	bl	80050bc <HAL_GetTick>
 80088e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80088ea:	4b39      	ldr	r3, [pc, #228]	; (80089d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	015b      	lsls	r3, r3, #5
 80088f0:	0d1b      	lsrs	r3, r3, #20
 80088f2:	69fa      	ldr	r2, [r7, #28]
 80088f4:	fb02 f303 	mul.w	r3, r2, r3
 80088f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088fa:	e054      	b.n	80089a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008902:	d050      	beq.n	80089a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008904:	f7fc fbda 	bl	80050bc <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	69fa      	ldr	r2, [r7, #28]
 8008910:	429a      	cmp	r2, r3
 8008912:	d902      	bls.n	800891a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d13d      	bne.n	8008996 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008928:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008932:	d111      	bne.n	8008958 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800893c:	d004      	beq.n	8008948 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008946:	d107      	bne.n	8008958 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008956:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008960:	d10f      	bne.n	8008982 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008980:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e017      	b.n	80089c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800899c:	2300      	movs	r3, #0
 800899e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	4013      	ands	r3, r2
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	bf0c      	ite	eq
 80089b6:	2301      	moveq	r3, #1
 80089b8:	2300      	movne	r3, #0
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	461a      	mov	r2, r3
 80089be:	79fb      	ldrb	r3, [r7, #7]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d19b      	bne.n	80088fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3720      	adds	r7, #32
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20000004 	.word	0x20000004

080089d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af02      	add	r7, sp, #8
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089e8:	d111      	bne.n	8008a0e <SPI_EndRxTransaction+0x3a>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089f2:	d004      	beq.n	80089fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089fc:	d107      	bne.n	8008a0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a0c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a16:	d12a      	bne.n	8008a6e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a20:	d012      	beq.n	8008a48 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2180      	movs	r1, #128	; 0x80
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f7ff ff49 	bl	80088c4 <SPI_WaitFlagStateUntilTimeout>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d02d      	beq.n	8008a94 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3c:	f043 0220 	orr.w	r2, r3, #32
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e026      	b.n	8008a96 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	2101      	movs	r1, #1
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f7ff ff36 	bl	80088c4 <SPI_WaitFlagStateUntilTimeout>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d01a      	beq.n	8008a94 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a62:	f043 0220 	orr.w	r2, r3, #32
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e013      	b.n	8008a96 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	2200      	movs	r2, #0
 8008a76:	2101      	movs	r1, #1
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f7ff ff23 	bl	80088c4 <SPI_WaitFlagStateUntilTimeout>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d007      	beq.n	8008a94 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a88:	f043 0220 	orr.w	r2, r3, #32
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e000      	b.n	8008a96 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008aac:	4b1b      	ldr	r3, [pc, #108]	; (8008b1c <SPI_EndRxTxTransaction+0x7c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a1b      	ldr	r2, [pc, #108]	; (8008b20 <SPI_EndRxTxTransaction+0x80>)
 8008ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab6:	0d5b      	lsrs	r3, r3, #21
 8008ab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008abc:	fb02 f303 	mul.w	r3, r2, r3
 8008ac0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aca:	d112      	bne.n	8008af2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	2180      	movs	r1, #128	; 0x80
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f7ff fef4 	bl	80088c4 <SPI_WaitFlagStateUntilTimeout>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d016      	beq.n	8008b10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae6:	f043 0220 	orr.w	r2, r3, #32
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e00f      	b.n	8008b12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00a      	beq.n	8008b0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b08:	2b80      	cmp	r3, #128	; 0x80
 8008b0a:	d0f2      	beq.n	8008af2 <SPI_EndRxTxTransaction+0x52>
 8008b0c:	e000      	b.n	8008b10 <SPI_EndRxTxTransaction+0x70>
        break;
 8008b0e:	bf00      	nop
  }

  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000004 	.word	0x20000004
 8008b20:	165e9f81 	.word	0x165e9f81

08008b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d101      	bne.n	8008b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e041      	b.n	8008bba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d106      	bne.n	8008b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7fb fbf6 	bl	800433c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2202      	movs	r2, #2
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	3304      	adds	r3, #4
 8008b60:	4619      	mov	r1, r3
 8008b62:	4610      	mov	r0, r2
 8008b64:	f000 fb2c 	bl	80091c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
	...

08008bc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d001      	beq.n	8008bdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e046      	b.n	8008c6a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2202      	movs	r2, #2
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a23      	ldr	r2, [pc, #140]	; (8008c78 <HAL_TIM_Base_Start+0xb4>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d022      	beq.n	8008c34 <HAL_TIM_Base_Start+0x70>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bf6:	d01d      	beq.n	8008c34 <HAL_TIM_Base_Start+0x70>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a1f      	ldr	r2, [pc, #124]	; (8008c7c <HAL_TIM_Base_Start+0xb8>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d018      	beq.n	8008c34 <HAL_TIM_Base_Start+0x70>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a1e      	ldr	r2, [pc, #120]	; (8008c80 <HAL_TIM_Base_Start+0xbc>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d013      	beq.n	8008c34 <HAL_TIM_Base_Start+0x70>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a1c      	ldr	r2, [pc, #112]	; (8008c84 <HAL_TIM_Base_Start+0xc0>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d00e      	beq.n	8008c34 <HAL_TIM_Base_Start+0x70>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a1b      	ldr	r2, [pc, #108]	; (8008c88 <HAL_TIM_Base_Start+0xc4>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d009      	beq.n	8008c34 <HAL_TIM_Base_Start+0x70>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a19      	ldr	r2, [pc, #100]	; (8008c8c <HAL_TIM_Base_Start+0xc8>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d004      	beq.n	8008c34 <HAL_TIM_Base_Start+0x70>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a18      	ldr	r2, [pc, #96]	; (8008c90 <HAL_TIM_Base_Start+0xcc>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d111      	bne.n	8008c58 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b06      	cmp	r3, #6
 8008c44:	d010      	beq.n	8008c68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f042 0201 	orr.w	r2, r2, #1
 8008c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c56:	e007      	b.n	8008c68 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f042 0201 	orr.w	r2, r2, #1
 8008c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	40010000 	.word	0x40010000
 8008c7c:	40000400 	.word	0x40000400
 8008c80:	40000800 	.word	0x40000800
 8008c84:	40000c00 	.word	0x40000c00
 8008c88:	40010400 	.word	0x40010400
 8008c8c:	40014000 	.word	0x40014000
 8008c90:	40001800 	.word	0x40001800

08008c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d001      	beq.n	8008cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e04e      	b.n	8008d4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2202      	movs	r2, #2
 8008cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68da      	ldr	r2, [r3, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0201 	orr.w	r2, r2, #1
 8008cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a23      	ldr	r2, [pc, #140]	; (8008d58 <HAL_TIM_Base_Start_IT+0xc4>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d022      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd6:	d01d      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a1f      	ldr	r2, [pc, #124]	; (8008d5c <HAL_TIM_Base_Start_IT+0xc8>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d018      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a1e      	ldr	r2, [pc, #120]	; (8008d60 <HAL_TIM_Base_Start_IT+0xcc>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d013      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a1c      	ldr	r2, [pc, #112]	; (8008d64 <HAL_TIM_Base_Start_IT+0xd0>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00e      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a1b      	ldr	r2, [pc, #108]	; (8008d68 <HAL_TIM_Base_Start_IT+0xd4>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d009      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a19      	ldr	r2, [pc, #100]	; (8008d6c <HAL_TIM_Base_Start_IT+0xd8>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d004      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a18      	ldr	r2, [pc, #96]	; (8008d70 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d111      	bne.n	8008d38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f003 0307 	and.w	r3, r3, #7
 8008d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b06      	cmp	r3, #6
 8008d24:	d010      	beq.n	8008d48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f042 0201 	orr.w	r2, r2, #1
 8008d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d36:	e007      	b.n	8008d48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f042 0201 	orr.w	r2, r2, #1
 8008d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	40010000 	.word	0x40010000
 8008d5c:	40000400 	.word	0x40000400
 8008d60:	40000800 	.word	0x40000800
 8008d64:	40000c00 	.word	0x40000c00
 8008d68:	40010400 	.word	0x40010400
 8008d6c:	40014000 	.word	0x40014000
 8008d70:	40001800 	.word	0x40001800

08008d74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68da      	ldr	r2, [r3, #12]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f022 0201 	bic.w	r2, r2, #1
 8008d8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6a1a      	ldr	r2, [r3, #32]
 8008d92:	f241 1311 	movw	r3, #4369	; 0x1111
 8008d96:	4013      	ands	r3, r2
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10f      	bne.n	8008dbc <HAL_TIM_Base_Stop_IT+0x48>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6a1a      	ldr	r2, [r3, #32]
 8008da2:	f240 4344 	movw	r3, #1092	; 0x444
 8008da6:	4013      	ands	r3, r2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d107      	bne.n	8008dbc <HAL_TIM_Base_Stop_IT+0x48>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0201 	bic.w	r2, r2, #1
 8008dba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	f003 0302 	and.w	r3, r3, #2
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d122      	bne.n	8008e2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	f003 0302 	and.w	r3, r3, #2
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d11b      	bne.n	8008e2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f06f 0202 	mvn.w	r2, #2
 8008dfe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	f003 0303 	and.w	r3, r3, #3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d003      	beq.n	8008e1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f9b5 	bl	8009184 <HAL_TIM_IC_CaptureCallback>
 8008e1a:	e005      	b.n	8008e28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f9a7 	bl	8009170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f9b8 	bl	8009198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	d122      	bne.n	8008e82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f003 0304 	and.w	r3, r3, #4
 8008e46:	2b04      	cmp	r3, #4
 8008e48:	d11b      	bne.n	8008e82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f06f 0204 	mvn.w	r2, #4
 8008e52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2202      	movs	r2, #2
 8008e58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d003      	beq.n	8008e70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f98b 	bl	8009184 <HAL_TIM_IC_CaptureCallback>
 8008e6e:	e005      	b.n	8008e7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f97d 	bl	8009170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f98e 	bl	8009198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	f003 0308 	and.w	r3, r3, #8
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	d122      	bne.n	8008ed6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	f003 0308 	and.w	r3, r3, #8
 8008e9a:	2b08      	cmp	r3, #8
 8008e9c:	d11b      	bne.n	8008ed6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f06f 0208 	mvn.w	r2, #8
 8008ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2204      	movs	r2, #4
 8008eac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	f003 0303 	and.w	r3, r3, #3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d003      	beq.n	8008ec4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f961 	bl	8009184 <HAL_TIM_IC_CaptureCallback>
 8008ec2:	e005      	b.n	8008ed0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f953 	bl	8009170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f964 	bl	8009198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	f003 0310 	and.w	r3, r3, #16
 8008ee0:	2b10      	cmp	r3, #16
 8008ee2:	d122      	bne.n	8008f2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	f003 0310 	and.w	r3, r3, #16
 8008eee:	2b10      	cmp	r3, #16
 8008ef0:	d11b      	bne.n	8008f2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f06f 0210 	mvn.w	r2, #16
 8008efa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2208      	movs	r2, #8
 8008f00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d003      	beq.n	8008f18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f937 	bl	8009184 <HAL_TIM_IC_CaptureCallback>
 8008f16:	e005      	b.n	8008f24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f929 	bl	8009170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f93a 	bl	8009198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d10e      	bne.n	8008f56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d107      	bne.n	8008f56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f06f 0201 	mvn.w	r2, #1
 8008f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7fa fab3 	bl	80034bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f60:	2b80      	cmp	r3, #128	; 0x80
 8008f62:	d10e      	bne.n	8008f82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f6e:	2b80      	cmp	r3, #128	; 0x80
 8008f70:	d107      	bne.n	8008f82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fadf 	bl	8009540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8c:	2b40      	cmp	r3, #64	; 0x40
 8008f8e:	d10e      	bne.n	8008fae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9a:	2b40      	cmp	r3, #64	; 0x40
 8008f9c:	d107      	bne.n	8008fae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f8ff 	bl	80091ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	f003 0320 	and.w	r3, r3, #32
 8008fb8:	2b20      	cmp	r3, #32
 8008fba:	d10e      	bne.n	8008fda <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	d107      	bne.n	8008fda <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f06f 0220 	mvn.w	r2, #32
 8008fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 faa9 	bl	800952c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b084      	sub	sp, #16
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d101      	bne.n	8008ffe <HAL_TIM_ConfigClockSource+0x1c>
 8008ffa:	2302      	movs	r3, #2
 8008ffc:	e0b4      	b.n	8009168 <HAL_TIM_ConfigClockSource+0x186>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2202      	movs	r2, #2
 800900a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800901c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009024:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009036:	d03e      	beq.n	80090b6 <HAL_TIM_ConfigClockSource+0xd4>
 8009038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800903c:	f200 8087 	bhi.w	800914e <HAL_TIM_ConfigClockSource+0x16c>
 8009040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009044:	f000 8086 	beq.w	8009154 <HAL_TIM_ConfigClockSource+0x172>
 8009048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800904c:	d87f      	bhi.n	800914e <HAL_TIM_ConfigClockSource+0x16c>
 800904e:	2b70      	cmp	r3, #112	; 0x70
 8009050:	d01a      	beq.n	8009088 <HAL_TIM_ConfigClockSource+0xa6>
 8009052:	2b70      	cmp	r3, #112	; 0x70
 8009054:	d87b      	bhi.n	800914e <HAL_TIM_ConfigClockSource+0x16c>
 8009056:	2b60      	cmp	r3, #96	; 0x60
 8009058:	d050      	beq.n	80090fc <HAL_TIM_ConfigClockSource+0x11a>
 800905a:	2b60      	cmp	r3, #96	; 0x60
 800905c:	d877      	bhi.n	800914e <HAL_TIM_ConfigClockSource+0x16c>
 800905e:	2b50      	cmp	r3, #80	; 0x50
 8009060:	d03c      	beq.n	80090dc <HAL_TIM_ConfigClockSource+0xfa>
 8009062:	2b50      	cmp	r3, #80	; 0x50
 8009064:	d873      	bhi.n	800914e <HAL_TIM_ConfigClockSource+0x16c>
 8009066:	2b40      	cmp	r3, #64	; 0x40
 8009068:	d058      	beq.n	800911c <HAL_TIM_ConfigClockSource+0x13a>
 800906a:	2b40      	cmp	r3, #64	; 0x40
 800906c:	d86f      	bhi.n	800914e <HAL_TIM_ConfigClockSource+0x16c>
 800906e:	2b30      	cmp	r3, #48	; 0x30
 8009070:	d064      	beq.n	800913c <HAL_TIM_ConfigClockSource+0x15a>
 8009072:	2b30      	cmp	r3, #48	; 0x30
 8009074:	d86b      	bhi.n	800914e <HAL_TIM_ConfigClockSource+0x16c>
 8009076:	2b20      	cmp	r3, #32
 8009078:	d060      	beq.n	800913c <HAL_TIM_ConfigClockSource+0x15a>
 800907a:	2b20      	cmp	r3, #32
 800907c:	d867      	bhi.n	800914e <HAL_TIM_ConfigClockSource+0x16c>
 800907e:	2b00      	cmp	r3, #0
 8009080:	d05c      	beq.n	800913c <HAL_TIM_ConfigClockSource+0x15a>
 8009082:	2b10      	cmp	r3, #16
 8009084:	d05a      	beq.n	800913c <HAL_TIM_ConfigClockSource+0x15a>
 8009086:	e062      	b.n	800914e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6818      	ldr	r0, [r3, #0]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	6899      	ldr	r1, [r3, #8]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	685a      	ldr	r2, [r3, #4]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f000 f9ac 	bl	80093f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	609a      	str	r2, [r3, #8]
      break;
 80090b4:	e04f      	b.n	8009156 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6818      	ldr	r0, [r3, #0]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	6899      	ldr	r1, [r3, #8]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	f000 f995 	bl	80093f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689a      	ldr	r2, [r3, #8]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090d8:	609a      	str	r2, [r3, #8]
      break;
 80090da:	e03c      	b.n	8009156 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6818      	ldr	r0, [r3, #0]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	6859      	ldr	r1, [r3, #4]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	461a      	mov	r2, r3
 80090ea:	f000 f909 	bl	8009300 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2150      	movs	r1, #80	; 0x50
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 f962 	bl	80093be <TIM_ITRx_SetConfig>
      break;
 80090fa:	e02c      	b.n	8009156 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6818      	ldr	r0, [r3, #0]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	6859      	ldr	r1, [r3, #4]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	461a      	mov	r2, r3
 800910a:	f000 f928 	bl	800935e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2160      	movs	r1, #96	; 0x60
 8009114:	4618      	mov	r0, r3
 8009116:	f000 f952 	bl	80093be <TIM_ITRx_SetConfig>
      break;
 800911a:	e01c      	b.n	8009156 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6818      	ldr	r0, [r3, #0]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	6859      	ldr	r1, [r3, #4]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	461a      	mov	r2, r3
 800912a:	f000 f8e9 	bl	8009300 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2140      	movs	r1, #64	; 0x40
 8009134:	4618      	mov	r0, r3
 8009136:	f000 f942 	bl	80093be <TIM_ITRx_SetConfig>
      break;
 800913a:	e00c      	b.n	8009156 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4619      	mov	r1, r3
 8009146:	4610      	mov	r0, r2
 8009148:	f000 f939 	bl	80093be <TIM_ITRx_SetConfig>
      break;
 800914c:	e003      	b.n	8009156 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	73fb      	strb	r3, [r7, #15]
      break;
 8009152:	e000      	b.n	8009156 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009154:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009166:	7bfb      	ldrb	r3, [r7, #15]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a40      	ldr	r2, [pc, #256]	; (80092d4 <TIM_Base_SetConfig+0x114>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d013      	beq.n	8009200 <TIM_Base_SetConfig+0x40>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091de:	d00f      	beq.n	8009200 <TIM_Base_SetConfig+0x40>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a3d      	ldr	r2, [pc, #244]	; (80092d8 <TIM_Base_SetConfig+0x118>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d00b      	beq.n	8009200 <TIM_Base_SetConfig+0x40>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a3c      	ldr	r2, [pc, #240]	; (80092dc <TIM_Base_SetConfig+0x11c>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d007      	beq.n	8009200 <TIM_Base_SetConfig+0x40>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a3b      	ldr	r2, [pc, #236]	; (80092e0 <TIM_Base_SetConfig+0x120>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d003      	beq.n	8009200 <TIM_Base_SetConfig+0x40>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a3a      	ldr	r2, [pc, #232]	; (80092e4 <TIM_Base_SetConfig+0x124>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d108      	bne.n	8009212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a2f      	ldr	r2, [pc, #188]	; (80092d4 <TIM_Base_SetConfig+0x114>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d02b      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009220:	d027      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a2c      	ldr	r2, [pc, #176]	; (80092d8 <TIM_Base_SetConfig+0x118>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d023      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a2b      	ldr	r2, [pc, #172]	; (80092dc <TIM_Base_SetConfig+0x11c>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d01f      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a2a      	ldr	r2, [pc, #168]	; (80092e0 <TIM_Base_SetConfig+0x120>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d01b      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a29      	ldr	r2, [pc, #164]	; (80092e4 <TIM_Base_SetConfig+0x124>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d017      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a28      	ldr	r2, [pc, #160]	; (80092e8 <TIM_Base_SetConfig+0x128>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d013      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a27      	ldr	r2, [pc, #156]	; (80092ec <TIM_Base_SetConfig+0x12c>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d00f      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a26      	ldr	r2, [pc, #152]	; (80092f0 <TIM_Base_SetConfig+0x130>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d00b      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a25      	ldr	r2, [pc, #148]	; (80092f4 <TIM_Base_SetConfig+0x134>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d007      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a24      	ldr	r2, [pc, #144]	; (80092f8 <TIM_Base_SetConfig+0x138>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d003      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a23      	ldr	r2, [pc, #140]	; (80092fc <TIM_Base_SetConfig+0x13c>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d108      	bne.n	8009284 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	4313      	orrs	r3, r2
 8009282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	4313      	orrs	r3, r2
 8009290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	689a      	ldr	r2, [r3, #8]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a0a      	ldr	r2, [pc, #40]	; (80092d4 <TIM_Base_SetConfig+0x114>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d003      	beq.n	80092b8 <TIM_Base_SetConfig+0xf8>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a0c      	ldr	r2, [pc, #48]	; (80092e4 <TIM_Base_SetConfig+0x124>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d103      	bne.n	80092c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	691a      	ldr	r2, [r3, #16]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	615a      	str	r2, [r3, #20]
}
 80092c6:	bf00      	nop
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	40010000 	.word	0x40010000
 80092d8:	40000400 	.word	0x40000400
 80092dc:	40000800 	.word	0x40000800
 80092e0:	40000c00 	.word	0x40000c00
 80092e4:	40010400 	.word	0x40010400
 80092e8:	40014000 	.word	0x40014000
 80092ec:	40014400 	.word	0x40014400
 80092f0:	40014800 	.word	0x40014800
 80092f4:	40001800 	.word	0x40001800
 80092f8:	40001c00 	.word	0x40001c00
 80092fc:	40002000 	.word	0x40002000

08009300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	f023 0201 	bic.w	r2, r3, #1
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800932a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	011b      	lsls	r3, r3, #4
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	4313      	orrs	r3, r2
 8009334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f023 030a 	bic.w	r3, r3, #10
 800933c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	4313      	orrs	r3, r2
 8009344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	621a      	str	r2, [r3, #32]
}
 8009352:	bf00      	nop
 8009354:	371c      	adds	r7, #28
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800935e:	b480      	push	{r7}
 8009360:	b087      	sub	sp, #28
 8009362:	af00      	add	r7, sp, #0
 8009364:	60f8      	str	r0, [r7, #12]
 8009366:	60b9      	str	r1, [r7, #8]
 8009368:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	f023 0210 	bic.w	r2, r3, #16
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6a1b      	ldr	r3, [r3, #32]
 8009380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009388:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	031b      	lsls	r3, r3, #12
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	4313      	orrs	r3, r2
 8009392:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800939a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	011b      	lsls	r3, r3, #4
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	621a      	str	r2, [r3, #32]
}
 80093b2:	bf00      	nop
 80093b4:	371c      	adds	r7, #28
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093be:	b480      	push	{r7}
 80093c0:	b085      	sub	sp, #20
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4313      	orrs	r3, r2
 80093dc:	f043 0307 	orr.w	r3, r3, #7
 80093e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	609a      	str	r2, [r3, #8]
}
 80093e8:	bf00      	nop
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b087      	sub	sp, #28
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
 8009400:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800940e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	021a      	lsls	r2, r3, #8
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	431a      	orrs	r2, r3
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	4313      	orrs	r3, r2
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	4313      	orrs	r3, r2
 8009420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	609a      	str	r2, [r3, #8]
}
 8009428:	bf00      	nop
 800942a:	371c      	adds	r7, #28
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009444:	2b01      	cmp	r3, #1
 8009446:	d101      	bne.n	800944c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009448:	2302      	movs	r3, #2
 800944a:	e05a      	b.n	8009502 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2202      	movs	r2, #2
 8009458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4313      	orrs	r3, r2
 800947c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a21      	ldr	r2, [pc, #132]	; (8009510 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d022      	beq.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009498:	d01d      	beq.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a1d      	ldr	r2, [pc, #116]	; (8009514 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d018      	beq.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a1b      	ldr	r2, [pc, #108]	; (8009518 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d013      	beq.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a1a      	ldr	r2, [pc, #104]	; (800951c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d00e      	beq.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a18      	ldr	r2, [pc, #96]	; (8009520 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d009      	beq.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a17      	ldr	r2, [pc, #92]	; (8009524 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d004      	beq.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a15      	ldr	r2, [pc, #84]	; (8009528 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d10c      	bne.n	80094f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	40010000 	.word	0x40010000
 8009514:	40000400 	.word	0x40000400
 8009518:	40000800 	.word	0x40000800
 800951c:	40000c00 	.word	0x40000c00
 8009520:	40010400 	.word	0x40010400
 8009524:	40014000 	.word	0x40014000
 8009528:	40001800 	.word	0x40001800

0800952c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d101      	bne.n	8009566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e03f      	b.n	80095e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	d106      	bne.n	8009580 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7fa ff1c 	bl	80043b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2224      	movs	r2, #36	; 0x24
 8009584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009596:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 ff9b 	bl	800a4d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	691a      	ldr	r2, [r3, #16]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	695a      	ldr	r2, [r3, #20]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	68da      	ldr	r2, [r3, #12]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2220      	movs	r2, #32
 80095d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2220      	movs	r2, #32
 80095e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b08a      	sub	sp, #40	; 0x28
 80095f2:	af02      	add	r7, sp, #8
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	60b9      	str	r1, [r7, #8]
 80095f8:	603b      	str	r3, [r7, #0]
 80095fa:	4613      	mov	r3, r2
 80095fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80095fe:	2300      	movs	r3, #0
 8009600:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b20      	cmp	r3, #32
 800960c:	d17c      	bne.n	8009708 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d002      	beq.n	800961a <HAL_UART_Transmit+0x2c>
 8009614:	88fb      	ldrh	r3, [r7, #6]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e075      	b.n	800970a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009624:	2b01      	cmp	r3, #1
 8009626:	d101      	bne.n	800962c <HAL_UART_Transmit+0x3e>
 8009628:	2302      	movs	r3, #2
 800962a:	e06e      	b.n	800970a <HAL_UART_Transmit+0x11c>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2221      	movs	r2, #33	; 0x21
 800963e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009642:	f7fb fd3b 	bl	80050bc <HAL_GetTick>
 8009646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	88fa      	ldrh	r2, [r7, #6]
 800964c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	88fa      	ldrh	r2, [r7, #6]
 8009652:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800965c:	d108      	bne.n	8009670 <HAL_UART_Transmit+0x82>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d104      	bne.n	8009670 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009666:	2300      	movs	r3, #0
 8009668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	61bb      	str	r3, [r7, #24]
 800966e:	e003      	b.n	8009678 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009674:	2300      	movs	r3, #0
 8009676:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009680:	e02a      	b.n	80096d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2200      	movs	r2, #0
 800968a:	2180      	movs	r1, #128	; 0x80
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 fc53 	bl	8009f38 <UART_WaitOnFlagUntilTimeout>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e036      	b.n	800970a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10b      	bne.n	80096ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	3302      	adds	r3, #2
 80096b6:	61bb      	str	r3, [r7, #24]
 80096b8:	e007      	b.n	80096ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	781a      	ldrb	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	3301      	adds	r3, #1
 80096c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	3b01      	subs	r3, #1
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096dc:	b29b      	uxth	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1cf      	bne.n	8009682 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	2200      	movs	r2, #0
 80096ea:	2140      	movs	r1, #64	; 0x40
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 fc23 	bl	8009f38 <UART_WaitOnFlagUntilTimeout>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e006      	b.n	800970a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2220      	movs	r2, #32
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	e000      	b.n	800970a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009708:	2302      	movs	r3, #2
  }
}
 800970a:	4618      	mov	r0, r3
 800970c:	3720      	adds	r7, #32
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b08c      	sub	sp, #48	; 0x30
 8009716:	af00      	add	r7, sp, #0
 8009718:	60f8      	str	r0, [r7, #12]
 800971a:	60b9      	str	r1, [r7, #8]
 800971c:	4613      	mov	r3, r2
 800971e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b20      	cmp	r3, #32
 800972a:	d152      	bne.n	80097d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d002      	beq.n	8009738 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009732:	88fb      	ldrh	r3, [r7, #6]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e04b      	b.n	80097d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009746:	2302      	movs	r3, #2
 8009748:	e044      	b.n	80097d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2201      	movs	r2, #1
 8009756:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009758:	88fb      	ldrh	r3, [r7, #6]
 800975a:	461a      	mov	r2, r3
 800975c:	68b9      	ldr	r1, [r7, #8]
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 fc58 	bl	800a014 <UART_Start_Receive_DMA>
 8009764:	4603      	mov	r3, r0
 8009766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800976a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800976e:	2b00      	cmp	r3, #0
 8009770:	d12c      	bne.n	80097cc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009776:	2b01      	cmp	r3, #1
 8009778:	d125      	bne.n	80097c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800977a:	2300      	movs	r3, #0
 800977c:	613b      	str	r3, [r7, #16]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	613b      	str	r3, [r7, #16]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	613b      	str	r3, [r7, #16]
 800978e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	330c      	adds	r3, #12
 8009796:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	e853 3f00 	ldrex	r3, [r3]
 800979e:	617b      	str	r3, [r7, #20]
   return(result);
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f043 0310 	orr.w	r3, r3, #16
 80097a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	330c      	adds	r3, #12
 80097ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097b0:	627a      	str	r2, [r7, #36]	; 0x24
 80097b2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b4:	6a39      	ldr	r1, [r7, #32]
 80097b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b8:	e841 2300 	strex	r3, r2, [r1]
 80097bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1e5      	bne.n	8009790 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80097c4:	e002      	b.n	80097cc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80097cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097d0:	e000      	b.n	80097d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80097d2:	2302      	movs	r3, #2
  }
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3730      	adds	r7, #48	; 0x30
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b0ba      	sub	sp, #232	; 0xe8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009802:	2300      	movs	r3, #0
 8009804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009808:	2300      	movs	r3, #0
 800980a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800980e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009812:	f003 030f 	and.w	r3, r3, #15
 8009816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800981a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10f      	bne.n	8009842 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009826:	f003 0320 	and.w	r3, r3, #32
 800982a:	2b00      	cmp	r3, #0
 800982c:	d009      	beq.n	8009842 <HAL_UART_IRQHandler+0x66>
 800982e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009832:	f003 0320 	and.w	r3, r3, #32
 8009836:	2b00      	cmp	r3, #0
 8009838:	d003      	beq.n	8009842 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fd8f 	bl	800a35e <UART_Receive_IT>
      return;
 8009840:	e256      	b.n	8009cf0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009846:	2b00      	cmp	r3, #0
 8009848:	f000 80de 	beq.w	8009a08 <HAL_UART_IRQHandler+0x22c>
 800984c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009850:	f003 0301 	and.w	r3, r3, #1
 8009854:	2b00      	cmp	r3, #0
 8009856:	d106      	bne.n	8009866 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800985c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 80d1 	beq.w	8009a08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00b      	beq.n	800988a <HAL_UART_IRQHandler+0xae>
 8009872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987a:	2b00      	cmp	r3, #0
 800987c:	d005      	beq.n	800988a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009882:	f043 0201 	orr.w	r2, r3, #1
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800988a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800988e:	f003 0304 	and.w	r3, r3, #4
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00b      	beq.n	80098ae <HAL_UART_IRQHandler+0xd2>
 8009896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d005      	beq.n	80098ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a6:	f043 0202 	orr.w	r2, r3, #2
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098b2:	f003 0302 	and.w	r3, r3, #2
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00b      	beq.n	80098d2 <HAL_UART_IRQHandler+0xf6>
 80098ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d005      	beq.n	80098d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ca:	f043 0204 	orr.w	r2, r3, #4
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80098d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098d6:	f003 0308 	and.w	r3, r3, #8
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d011      	beq.n	8009902 <HAL_UART_IRQHandler+0x126>
 80098de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098e2:	f003 0320 	and.w	r3, r3, #32
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d105      	bne.n	80098f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80098ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d005      	beq.n	8009902 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fa:	f043 0208 	orr.w	r2, r3, #8
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009906:	2b00      	cmp	r3, #0
 8009908:	f000 81ed 	beq.w	8009ce6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800990c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009910:	f003 0320 	and.w	r3, r3, #32
 8009914:	2b00      	cmp	r3, #0
 8009916:	d008      	beq.n	800992a <HAL_UART_IRQHandler+0x14e>
 8009918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800991c:	f003 0320 	and.w	r3, r3, #32
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fd1a 	bl	800a35e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009934:	2b40      	cmp	r3, #64	; 0x40
 8009936:	bf0c      	ite	eq
 8009938:	2301      	moveq	r3, #1
 800993a:	2300      	movne	r3, #0
 800993c:	b2db      	uxtb	r3, r3
 800993e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009946:	f003 0308 	and.w	r3, r3, #8
 800994a:	2b00      	cmp	r3, #0
 800994c:	d103      	bne.n	8009956 <HAL_UART_IRQHandler+0x17a>
 800994e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009952:	2b00      	cmp	r3, #0
 8009954:	d04f      	beq.n	80099f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fc22 	bl	800a1a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009966:	2b40      	cmp	r3, #64	; 0x40
 8009968:	d141      	bne.n	80099ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3314      	adds	r3, #20
 8009970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009978:	e853 3f00 	ldrex	r3, [r3]
 800997c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3314      	adds	r3, #20
 8009992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009996:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800999a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80099a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80099a6:	e841 2300 	strex	r3, r2, [r1]
 80099aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80099ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1d9      	bne.n	800996a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d013      	beq.n	80099e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c2:	4a7d      	ldr	r2, [pc, #500]	; (8009bb8 <HAL_UART_IRQHandler+0x3dc>)
 80099c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fc fa40 	bl	8005e50 <HAL_DMA_Abort_IT>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d016      	beq.n	8009a04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80099e0:	4610      	mov	r0, r2
 80099e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099e4:	e00e      	b.n	8009a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f9a4 	bl	8009d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ec:	e00a      	b.n	8009a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f9a0 	bl	8009d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099f4:	e006      	b.n	8009a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f99c 	bl	8009d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009a02:	e170      	b.n	8009ce6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a04:	bf00      	nop
    return;
 8009a06:	e16e      	b.n	8009ce6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	f040 814a 	bne.w	8009ca6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a16:	f003 0310 	and.w	r3, r3, #16
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 8143 	beq.w	8009ca6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a24:	f003 0310 	and.w	r3, r3, #16
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 813c 	beq.w	8009ca6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60bb      	str	r3, [r7, #8]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	60bb      	str	r3, [r7, #8]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	60bb      	str	r3, [r7, #8]
 8009a42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4e:	2b40      	cmp	r3, #64	; 0x40
 8009a50:	f040 80b4 	bne.w	8009bbc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 8140 	beq.w	8009cea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a72:	429a      	cmp	r2, r3
 8009a74:	f080 8139 	bcs.w	8009cea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a84:	69db      	ldr	r3, [r3, #28]
 8009a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a8a:	f000 8088 	beq.w	8009b9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	330c      	adds	r3, #12
 8009a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009aac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	330c      	adds	r3, #12
 8009ab6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009aba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009abe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009ac6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009aca:	e841 2300 	strex	r3, r2, [r1]
 8009ace:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1d9      	bne.n	8009a8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3314      	adds	r3, #20
 8009ae0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ae4:	e853 3f00 	ldrex	r3, [r3]
 8009ae8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009aec:	f023 0301 	bic.w	r3, r3, #1
 8009af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3314      	adds	r3, #20
 8009afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009afe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b0a:	e841 2300 	strex	r3, r2, [r1]
 8009b0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1e1      	bne.n	8009ada <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3314      	adds	r3, #20
 8009b1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b20:	e853 3f00 	ldrex	r3, [r3]
 8009b24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3314      	adds	r3, #20
 8009b36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009b3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b42:	e841 2300 	strex	r3, r2, [r1]
 8009b46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1e3      	bne.n	8009b16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2220      	movs	r2, #32
 8009b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	330c      	adds	r3, #12
 8009b62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b66:	e853 3f00 	ldrex	r3, [r3]
 8009b6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b6e:	f023 0310 	bic.w	r3, r3, #16
 8009b72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	330c      	adds	r3, #12
 8009b7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009b80:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b88:	e841 2300 	strex	r3, r2, [r1]
 8009b8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1e3      	bne.n	8009b5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fc f8e9 	bl	8005d70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7f9 f852 	bl	8002c58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009bb4:	e099      	b.n	8009cea <HAL_UART_IRQHandler+0x50e>
 8009bb6:	bf00      	nop
 8009bb8:	0800a267 	.word	0x0800a267
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 808b 	beq.w	8009cee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009bd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 8086 	beq.w	8009cee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	330c      	adds	r3, #12
 8009be8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bec:	e853 3f00 	ldrex	r3, [r3]
 8009bf0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	330c      	adds	r3, #12
 8009c02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009c06:	647a      	str	r2, [r7, #68]	; 0x44
 8009c08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c0e:	e841 2300 	strex	r3, r2, [r1]
 8009c12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1e3      	bne.n	8009be2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3314      	adds	r3, #20
 8009c20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c24:	e853 3f00 	ldrex	r3, [r3]
 8009c28:	623b      	str	r3, [r7, #32]
   return(result);
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	f023 0301 	bic.w	r3, r3, #1
 8009c30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	3314      	adds	r3, #20
 8009c3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009c3e:	633a      	str	r2, [r7, #48]	; 0x30
 8009c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c46:	e841 2300 	strex	r3, r2, [r1]
 8009c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1e3      	bne.n	8009c1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2220      	movs	r2, #32
 8009c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	330c      	adds	r3, #12
 8009c66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	e853 3f00 	ldrex	r3, [r3]
 8009c6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f023 0310 	bic.w	r3, r3, #16
 8009c76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	330c      	adds	r3, #12
 8009c80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009c84:	61fa      	str	r2, [r7, #28]
 8009c86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c88:	69b9      	ldr	r1, [r7, #24]
 8009c8a:	69fa      	ldr	r2, [r7, #28]
 8009c8c:	e841 2300 	strex	r3, r2, [r1]
 8009c90:	617b      	str	r3, [r7, #20]
   return(result);
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1e3      	bne.n	8009c60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7f8 ffda 	bl	8002c58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ca4:	e023      	b.n	8009cee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d009      	beq.n	8009cc6 <HAL_UART_IRQHandler+0x4ea>
 8009cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fae5 	bl	800a28e <UART_Transmit_IT>
    return;
 8009cc4:	e014      	b.n	8009cf0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00e      	beq.n	8009cf0 <HAL_UART_IRQHandler+0x514>
 8009cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d008      	beq.n	8009cf0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fb25 	bl	800a32e <UART_EndTransmit_IT>
    return;
 8009ce4:	e004      	b.n	8009cf0 <HAL_UART_IRQHandler+0x514>
    return;
 8009ce6:	bf00      	nop
 8009ce8:	e002      	b.n	8009cf0 <HAL_UART_IRQHandler+0x514>
      return;
 8009cea:	bf00      	nop
 8009cec:	e000      	b.n	8009cf0 <HAL_UART_IRQHandler+0x514>
      return;
 8009cee:	bf00      	nop
  }
}
 8009cf0:	37e8      	adds	r7, #232	; 0xe8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop

08009cf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009d00:	bf00      	nop
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b09c      	sub	sp, #112	; 0x70
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d54:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d172      	bne.n	8009e4a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d66:	2200      	movs	r2, #0
 8009d68:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	330c      	adds	r3, #12
 8009d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d74:	e853 3f00 	ldrex	r3, [r3]
 8009d78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d80:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	330c      	adds	r3, #12
 8009d88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8009d8c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d92:	e841 2300 	strex	r3, r2, [r1]
 8009d96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1e5      	bne.n	8009d6a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3314      	adds	r3, #20
 8009da4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da8:	e853 3f00 	ldrex	r3, [r3]
 8009dac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db0:	f023 0301 	bic.w	r3, r3, #1
 8009db4:	667b      	str	r3, [r7, #100]	; 0x64
 8009db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3314      	adds	r3, #20
 8009dbc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009dbe:	647a      	str	r2, [r7, #68]	; 0x44
 8009dc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009dc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dc6:	e841 2300 	strex	r3, r2, [r1]
 8009dca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1e5      	bne.n	8009d9e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	3314      	adds	r3, #20
 8009dd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	e853 3f00 	ldrex	r3, [r3]
 8009de0:	623b      	str	r3, [r7, #32]
   return(result);
 8009de2:	6a3b      	ldr	r3, [r7, #32]
 8009de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009de8:	663b      	str	r3, [r7, #96]	; 0x60
 8009dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	3314      	adds	r3, #20
 8009df0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009df2:	633a      	str	r2, [r7, #48]	; 0x30
 8009df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dfa:	e841 2300 	strex	r3, r2, [r1]
 8009dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1e5      	bne.n	8009dd2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d119      	bne.n	8009e4a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	330c      	adds	r3, #12
 8009e1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	e853 3f00 	ldrex	r3, [r3]
 8009e24:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f023 0310 	bic.w	r3, r3, #16
 8009e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	330c      	adds	r3, #12
 8009e34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e36:	61fa      	str	r2, [r7, #28]
 8009e38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	69b9      	ldr	r1, [r7, #24]
 8009e3c:	69fa      	ldr	r2, [r7, #28]
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	617b      	str	r3, [r7, #20]
   return(result);
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e5      	bne.n	8009e16 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d106      	bne.n	8009e60 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e56:	4619      	mov	r1, r3
 8009e58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e5a:	f7f8 fefd 	bl	8002c58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e5e:	e002      	b.n	8009e66 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009e60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e62:	f7ff ff53 	bl	8009d0c <HAL_UART_RxCpltCallback>
}
 8009e66:	bf00      	nop
 8009e68:	3770      	adds	r7, #112	; 0x70
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d108      	bne.n	8009e96 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e88:	085b      	lsrs	r3, r3, #1
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f7f8 fee2 	bl	8002c58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e94:	e002      	b.n	8009e9c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f7ff ff42 	bl	8009d20 <HAL_UART_RxHalfCpltCallback>
}
 8009e9c:	bf00      	nop
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009eac:	2300      	movs	r3, #0
 8009eae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	695b      	ldr	r3, [r3, #20]
 8009ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ec0:	2b80      	cmp	r3, #128	; 0x80
 8009ec2:	bf0c      	ite	eq
 8009ec4:	2301      	moveq	r3, #1
 8009ec6:	2300      	movne	r3, #0
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	2b21      	cmp	r3, #33	; 0x21
 8009ed6:	d108      	bne.n	8009eea <UART_DMAError+0x46>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d005      	beq.n	8009eea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009ee4:	68b8      	ldr	r0, [r7, #8]
 8009ee6:	f000 f933 	bl	800a150 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef4:	2b40      	cmp	r3, #64	; 0x40
 8009ef6:	bf0c      	ite	eq
 8009ef8:	2301      	moveq	r3, #1
 8009efa:	2300      	movne	r3, #0
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	2b22      	cmp	r3, #34	; 0x22
 8009f0a:	d108      	bne.n	8009f1e <UART_DMAError+0x7a>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d005      	beq.n	8009f1e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	2200      	movs	r2, #0
 8009f16:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009f18:	68b8      	ldr	r0, [r7, #8]
 8009f1a:	f000 f941 	bl	800a1a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f22:	f043 0210 	orr.w	r2, r3, #16
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f2a:	68b8      	ldr	r0, [r7, #8]
 8009f2c:	f7ff ff02 	bl	8009d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f30:	bf00      	nop
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b090      	sub	sp, #64	; 0x40
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	603b      	str	r3, [r7, #0]
 8009f44:	4613      	mov	r3, r2
 8009f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f48:	e050      	b.n	8009fec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f50:	d04c      	beq.n	8009fec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d007      	beq.n	8009f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f58:	f7fb f8b0 	bl	80050bc <HAL_GetTick>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d241      	bcs.n	8009fec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	330c      	adds	r3, #12
 8009f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	330c      	adds	r3, #12
 8009f86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f88:	637a      	str	r2, [r7, #52]	; 0x34
 8009f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e5      	bne.n	8009f68 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3314      	adds	r3, #20
 8009fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	e853 3f00 	ldrex	r3, [r3]
 8009faa:	613b      	str	r3, [r7, #16]
   return(result);
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	f023 0301 	bic.w	r3, r3, #1
 8009fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	3314      	adds	r3, #20
 8009fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fbc:	623a      	str	r2, [r7, #32]
 8009fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc0:	69f9      	ldr	r1, [r7, #28]
 8009fc2:	6a3a      	ldr	r2, [r7, #32]
 8009fc4:	e841 2300 	strex	r3, r2, [r1]
 8009fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1e5      	bne.n	8009f9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2220      	movs	r2, #32
 8009fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2220      	movs	r2, #32
 8009fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	e00f      	b.n	800a00c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	bf0c      	ite	eq
 8009ffc:	2301      	moveq	r3, #1
 8009ffe:	2300      	movne	r3, #0
 800a000:	b2db      	uxtb	r3, r3
 800a002:	461a      	mov	r2, r3
 800a004:	79fb      	ldrb	r3, [r7, #7]
 800a006:	429a      	cmp	r2, r3
 800a008:	d09f      	beq.n	8009f4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3740      	adds	r7, #64	; 0x40
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b098      	sub	sp, #96	; 0x60
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	4613      	mov	r3, r2
 800a020:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	88fa      	ldrh	r2, [r7, #6]
 800a02c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2222      	movs	r2, #34	; 0x22
 800a038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a040:	4a40      	ldr	r2, [pc, #256]	; (800a144 <UART_Start_Receive_DMA+0x130>)
 800a042:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a048:	4a3f      	ldr	r2, [pc, #252]	; (800a148 <UART_Start_Receive_DMA+0x134>)
 800a04a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a050:	4a3e      	ldr	r2, [pc, #248]	; (800a14c <UART_Start_Receive_DMA+0x138>)
 800a052:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a058:	2200      	movs	r2, #0
 800a05a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a05c:	f107 0308 	add.w	r3, r7, #8
 800a060:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3304      	adds	r3, #4
 800a06c:	4619      	mov	r1, r3
 800a06e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	88fb      	ldrh	r3, [r7, #6]
 800a074:	f7fb fe24 	bl	8005cc0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a078:	2300      	movs	r3, #0
 800a07a:	613b      	str	r3, [r7, #16]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	613b      	str	r3, [r7, #16]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	613b      	str	r3, [r7, #16]
 800a08c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d019      	beq.n	800a0d2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	330c      	adds	r3, #12
 800a0a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0a8:	e853 3f00 	ldrex	r3, [r3]
 800a0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	330c      	adds	r3, #12
 800a0bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0be:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a0c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a0c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0c6:	e841 2300 	strex	r3, r2, [r1]
 800a0ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1e5      	bne.n	800a09e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	3314      	adds	r3, #20
 800a0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0dc:	e853 3f00 	ldrex	r3, [r3]
 800a0e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e4:	f043 0301 	orr.w	r3, r3, #1
 800a0e8:	657b      	str	r3, [r7, #84]	; 0x54
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3314      	adds	r3, #20
 800a0f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0f2:	63ba      	str	r2, [r7, #56]	; 0x38
 800a0f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0fa:	e841 2300 	strex	r3, r2, [r1]
 800a0fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1e5      	bne.n	800a0d2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3314      	adds	r3, #20
 800a10c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	e853 3f00 	ldrex	r3, [r3]
 800a114:	617b      	str	r3, [r7, #20]
   return(result);
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a11c:	653b      	str	r3, [r7, #80]	; 0x50
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3314      	adds	r3, #20
 800a124:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a126:	627a      	str	r2, [r7, #36]	; 0x24
 800a128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12a:	6a39      	ldr	r1, [r7, #32]
 800a12c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a12e:	e841 2300 	strex	r3, r2, [r1]
 800a132:	61fb      	str	r3, [r7, #28]
   return(result);
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1e5      	bne.n	800a106 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3760      	adds	r7, #96	; 0x60
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	08009d49 	.word	0x08009d49
 800a148:	08009e6f 	.word	0x08009e6f
 800a14c:	08009ea5 	.word	0x08009ea5

0800a150 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a150:	b480      	push	{r7}
 800a152:	b089      	sub	sp, #36	; 0x24
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	330c      	adds	r3, #12
 800a15e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	e853 3f00 	ldrex	r3, [r3]
 800a166:	60bb      	str	r3, [r7, #8]
   return(result);
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a16e:	61fb      	str	r3, [r7, #28]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	330c      	adds	r3, #12
 800a176:	69fa      	ldr	r2, [r7, #28]
 800a178:	61ba      	str	r2, [r7, #24]
 800a17a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	6979      	ldr	r1, [r7, #20]
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	613b      	str	r3, [r7, #16]
   return(result);
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e5      	bne.n	800a158 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2220      	movs	r2, #32
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a194:	bf00      	nop
 800a196:	3724      	adds	r7, #36	; 0x24
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b095      	sub	sp, #84	; 0x54
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	330c      	adds	r3, #12
 800a1ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b2:	e853 3f00 	ldrex	r3, [r3]
 800a1b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	330c      	adds	r3, #12
 800a1c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1c8:	643a      	str	r2, [r7, #64]	; 0x40
 800a1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1d0:	e841 2300 	strex	r3, r2, [r1]
 800a1d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e5      	bne.n	800a1a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3314      	adds	r3, #20
 800a1e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
 800a1e6:	e853 3f00 	ldrex	r3, [r3]
 800a1ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	f023 0301 	bic.w	r3, r3, #1
 800a1f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	3314      	adds	r3, #20
 800a1fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a204:	e841 2300 	strex	r3, r2, [r1]
 800a208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1e5      	bne.n	800a1dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a214:	2b01      	cmp	r3, #1
 800a216:	d119      	bne.n	800a24c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	330c      	adds	r3, #12
 800a21e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	e853 3f00 	ldrex	r3, [r3]
 800a226:	60bb      	str	r3, [r7, #8]
   return(result);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	f023 0310 	bic.w	r3, r3, #16
 800a22e:	647b      	str	r3, [r7, #68]	; 0x44
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	330c      	adds	r3, #12
 800a236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a238:	61ba      	str	r2, [r7, #24]
 800a23a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23c:	6979      	ldr	r1, [r7, #20]
 800a23e:	69ba      	ldr	r2, [r7, #24]
 800a240:	e841 2300 	strex	r3, r2, [r1]
 800a244:	613b      	str	r3, [r7, #16]
   return(result);
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1e5      	bne.n	800a218 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2220      	movs	r2, #32
 800a250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a25a:	bf00      	nop
 800a25c:	3754      	adds	r7, #84	; 0x54
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a272:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f7ff fd57 	bl	8009d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a286:	bf00      	nop
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a28e:	b480      	push	{r7}
 800a290:	b085      	sub	sp, #20
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b21      	cmp	r3, #33	; 0x21
 800a2a0:	d13e      	bne.n	800a320 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2aa:	d114      	bne.n	800a2d6 <UART_Transmit_IT+0x48>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d110      	bne.n	800a2d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	1c9a      	adds	r2, r3, #2
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	621a      	str	r2, [r3, #32]
 800a2d4:	e008      	b.n	800a2e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	1c59      	adds	r1, r3, #1
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	6211      	str	r1, [r2, #32]
 800a2e0:	781a      	ldrb	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10f      	bne.n	800a31c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68da      	ldr	r2, [r3, #12]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a30a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68da      	ldr	r2, [r3, #12]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a31a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	e000      	b.n	800a322 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a320:	2302      	movs	r3, #2
  }
}
 800a322:	4618      	mov	r0, r3
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68da      	ldr	r2, [r3, #12]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a344:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2220      	movs	r2, #32
 800a34a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7ff fcd2 	bl	8009cf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b08c      	sub	sp, #48	; 0x30
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b22      	cmp	r3, #34	; 0x22
 800a370:	f040 80ab 	bne.w	800a4ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a37c:	d117      	bne.n	800a3ae <UART_Receive_IT+0x50>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d113      	bne.n	800a3ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a386:	2300      	movs	r3, #0
 800a388:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a38e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	b29b      	uxth	r3, r3
 800a398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a6:	1c9a      	adds	r2, r3, #2
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	629a      	str	r2, [r3, #40]	; 0x28
 800a3ac:	e026      	b.n	800a3fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3c0:	d007      	beq.n	800a3d2 <UART_Receive_IT+0x74>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10a      	bne.n	800a3e0 <UART_Receive_IT+0x82>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d106      	bne.n	800a3e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	701a      	strb	r2, [r3, #0]
 800a3de:	e008      	b.n	800a3f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a400:	b29b      	uxth	r3, r3
 800a402:	3b01      	subs	r3, #1
 800a404:	b29b      	uxth	r3, r3
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	4619      	mov	r1, r3
 800a40a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d15a      	bne.n	800a4c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68da      	ldr	r2, [r3, #12]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f022 0220 	bic.w	r2, r2, #32
 800a41e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68da      	ldr	r2, [r3, #12]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a42e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	695a      	ldr	r2, [r3, #20]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f022 0201 	bic.w	r2, r2, #1
 800a43e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2220      	movs	r2, #32
 800a444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d135      	bne.n	800a4bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	330c      	adds	r3, #12
 800a45c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	e853 3f00 	ldrex	r3, [r3]
 800a464:	613b      	str	r3, [r7, #16]
   return(result);
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	f023 0310 	bic.w	r3, r3, #16
 800a46c:	627b      	str	r3, [r7, #36]	; 0x24
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	330c      	adds	r3, #12
 800a474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a476:	623a      	str	r2, [r7, #32]
 800a478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47a:	69f9      	ldr	r1, [r7, #28]
 800a47c:	6a3a      	ldr	r2, [r7, #32]
 800a47e:	e841 2300 	strex	r3, r2, [r1]
 800a482:	61bb      	str	r3, [r7, #24]
   return(result);
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1e5      	bne.n	800a456 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0310 	and.w	r3, r3, #16
 800a494:	2b10      	cmp	r3, #16
 800a496:	d10a      	bne.n	800a4ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a498:	2300      	movs	r3, #0
 800a49a:	60fb      	str	r3, [r7, #12]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7f8 fbcf 	bl	8002c58 <HAL_UARTEx_RxEventCallback>
 800a4ba:	e002      	b.n	800a4c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff fc25 	bl	8009d0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	e002      	b.n	800a4cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	e000      	b.n	800a4cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a4ca:	2302      	movs	r3, #2
  }
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3730      	adds	r7, #48	; 0x30
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4d8:	b0c0      	sub	sp, #256	; 0x100
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a4ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4f0:	68d9      	ldr	r1, [r3, #12]
 800a4f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	ea40 0301 	orr.w	r3, r0, r1
 800a4fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a4fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a502:	689a      	ldr	r2, [r3, #8]
 800a504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	431a      	orrs	r2, r3
 800a50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a510:	695b      	ldr	r3, [r3, #20]
 800a512:	431a      	orrs	r2, r3
 800a514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a52c:	f021 010c 	bic.w	r1, r1, #12
 800a530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a53a:	430b      	orrs	r3, r1
 800a53c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a53e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a54a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a54e:	6999      	ldr	r1, [r3, #24]
 800a550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	ea40 0301 	orr.w	r3, r0, r1
 800a55a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a55c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	4b8f      	ldr	r3, [pc, #572]	; (800a7a0 <UART_SetConfig+0x2cc>)
 800a564:	429a      	cmp	r2, r3
 800a566:	d005      	beq.n	800a574 <UART_SetConfig+0xa0>
 800a568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	4b8d      	ldr	r3, [pc, #564]	; (800a7a4 <UART_SetConfig+0x2d0>)
 800a570:	429a      	cmp	r2, r3
 800a572:	d104      	bne.n	800a57e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a574:	f7fd fd0c 	bl	8007f90 <HAL_RCC_GetPCLK2Freq>
 800a578:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a57c:	e003      	b.n	800a586 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a57e:	f7fd fcf3 	bl	8007f68 <HAL_RCC_GetPCLK1Freq>
 800a582:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a58a:	69db      	ldr	r3, [r3, #28]
 800a58c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a590:	f040 810c 	bne.w	800a7ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a598:	2200      	movs	r2, #0
 800a59a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a59e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a5a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a5a6:	4622      	mov	r2, r4
 800a5a8:	462b      	mov	r3, r5
 800a5aa:	1891      	adds	r1, r2, r2
 800a5ac:	65b9      	str	r1, [r7, #88]	; 0x58
 800a5ae:	415b      	adcs	r3, r3
 800a5b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	eb12 0801 	adds.w	r8, r2, r1
 800a5bc:	4629      	mov	r1, r5
 800a5be:	eb43 0901 	adc.w	r9, r3, r1
 800a5c2:	f04f 0200 	mov.w	r2, #0
 800a5c6:	f04f 0300 	mov.w	r3, #0
 800a5ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a5ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a5d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a5d6:	4690      	mov	r8, r2
 800a5d8:	4699      	mov	r9, r3
 800a5da:	4623      	mov	r3, r4
 800a5dc:	eb18 0303 	adds.w	r3, r8, r3
 800a5e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a5e4:	462b      	mov	r3, r5
 800a5e6:	eb49 0303 	adc.w	r3, r9, r3
 800a5ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a5ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a5fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a5fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a602:	460b      	mov	r3, r1
 800a604:	18db      	adds	r3, r3, r3
 800a606:	653b      	str	r3, [r7, #80]	; 0x50
 800a608:	4613      	mov	r3, r2
 800a60a:	eb42 0303 	adc.w	r3, r2, r3
 800a60e:	657b      	str	r3, [r7, #84]	; 0x54
 800a610:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a614:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a618:	f7f6 fb46 	bl	8000ca8 <__aeabi_uldivmod>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	4b61      	ldr	r3, [pc, #388]	; (800a7a8 <UART_SetConfig+0x2d4>)
 800a622:	fba3 2302 	umull	r2, r3, r3, r2
 800a626:	095b      	lsrs	r3, r3, #5
 800a628:	011c      	lsls	r4, r3, #4
 800a62a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a62e:	2200      	movs	r2, #0
 800a630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a634:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a638:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a63c:	4642      	mov	r2, r8
 800a63e:	464b      	mov	r3, r9
 800a640:	1891      	adds	r1, r2, r2
 800a642:	64b9      	str	r1, [r7, #72]	; 0x48
 800a644:	415b      	adcs	r3, r3
 800a646:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a648:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a64c:	4641      	mov	r1, r8
 800a64e:	eb12 0a01 	adds.w	sl, r2, r1
 800a652:	4649      	mov	r1, r9
 800a654:	eb43 0b01 	adc.w	fp, r3, r1
 800a658:	f04f 0200 	mov.w	r2, #0
 800a65c:	f04f 0300 	mov.w	r3, #0
 800a660:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a664:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a66c:	4692      	mov	sl, r2
 800a66e:	469b      	mov	fp, r3
 800a670:	4643      	mov	r3, r8
 800a672:	eb1a 0303 	adds.w	r3, sl, r3
 800a676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a67a:	464b      	mov	r3, r9
 800a67c:	eb4b 0303 	adc.w	r3, fp, r3
 800a680:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a690:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a694:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a698:	460b      	mov	r3, r1
 800a69a:	18db      	adds	r3, r3, r3
 800a69c:	643b      	str	r3, [r7, #64]	; 0x40
 800a69e:	4613      	mov	r3, r2
 800a6a0:	eb42 0303 	adc.w	r3, r2, r3
 800a6a4:	647b      	str	r3, [r7, #68]	; 0x44
 800a6a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a6aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a6ae:	f7f6 fafb 	bl	8000ca8 <__aeabi_uldivmod>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	4b3b      	ldr	r3, [pc, #236]	; (800a7a8 <UART_SetConfig+0x2d4>)
 800a6ba:	fba3 2301 	umull	r2, r3, r3, r1
 800a6be:	095b      	lsrs	r3, r3, #5
 800a6c0:	2264      	movs	r2, #100	; 0x64
 800a6c2:	fb02 f303 	mul.w	r3, r2, r3
 800a6c6:	1acb      	subs	r3, r1, r3
 800a6c8:	00db      	lsls	r3, r3, #3
 800a6ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a6ce:	4b36      	ldr	r3, [pc, #216]	; (800a7a8 <UART_SetConfig+0x2d4>)
 800a6d0:	fba3 2302 	umull	r2, r3, r3, r2
 800a6d4:	095b      	lsrs	r3, r3, #5
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a6dc:	441c      	add	r4, r3
 800a6de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a6e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a6ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a6f0:	4642      	mov	r2, r8
 800a6f2:	464b      	mov	r3, r9
 800a6f4:	1891      	adds	r1, r2, r2
 800a6f6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a6f8:	415b      	adcs	r3, r3
 800a6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a700:	4641      	mov	r1, r8
 800a702:	1851      	adds	r1, r2, r1
 800a704:	6339      	str	r1, [r7, #48]	; 0x30
 800a706:	4649      	mov	r1, r9
 800a708:	414b      	adcs	r3, r1
 800a70a:	637b      	str	r3, [r7, #52]	; 0x34
 800a70c:	f04f 0200 	mov.w	r2, #0
 800a710:	f04f 0300 	mov.w	r3, #0
 800a714:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a718:	4659      	mov	r1, fp
 800a71a:	00cb      	lsls	r3, r1, #3
 800a71c:	4651      	mov	r1, sl
 800a71e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a722:	4651      	mov	r1, sl
 800a724:	00ca      	lsls	r2, r1, #3
 800a726:	4610      	mov	r0, r2
 800a728:	4619      	mov	r1, r3
 800a72a:	4603      	mov	r3, r0
 800a72c:	4642      	mov	r2, r8
 800a72e:	189b      	adds	r3, r3, r2
 800a730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a734:	464b      	mov	r3, r9
 800a736:	460a      	mov	r2, r1
 800a738:	eb42 0303 	adc.w	r3, r2, r3
 800a73c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a74c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a754:	460b      	mov	r3, r1
 800a756:	18db      	adds	r3, r3, r3
 800a758:	62bb      	str	r3, [r7, #40]	; 0x28
 800a75a:	4613      	mov	r3, r2
 800a75c:	eb42 0303 	adc.w	r3, r2, r3
 800a760:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a766:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a76a:	f7f6 fa9d 	bl	8000ca8 <__aeabi_uldivmod>
 800a76e:	4602      	mov	r2, r0
 800a770:	460b      	mov	r3, r1
 800a772:	4b0d      	ldr	r3, [pc, #52]	; (800a7a8 <UART_SetConfig+0x2d4>)
 800a774:	fba3 1302 	umull	r1, r3, r3, r2
 800a778:	095b      	lsrs	r3, r3, #5
 800a77a:	2164      	movs	r1, #100	; 0x64
 800a77c:	fb01 f303 	mul.w	r3, r1, r3
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	3332      	adds	r3, #50	; 0x32
 800a786:	4a08      	ldr	r2, [pc, #32]	; (800a7a8 <UART_SetConfig+0x2d4>)
 800a788:	fba2 2303 	umull	r2, r3, r2, r3
 800a78c:	095b      	lsrs	r3, r3, #5
 800a78e:	f003 0207 	and.w	r2, r3, #7
 800a792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4422      	add	r2, r4
 800a79a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a79c:	e105      	b.n	800a9aa <UART_SetConfig+0x4d6>
 800a79e:	bf00      	nop
 800a7a0:	40011000 	.word	0x40011000
 800a7a4:	40011400 	.word	0x40011400
 800a7a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a7b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a7ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a7be:	4642      	mov	r2, r8
 800a7c0:	464b      	mov	r3, r9
 800a7c2:	1891      	adds	r1, r2, r2
 800a7c4:	6239      	str	r1, [r7, #32]
 800a7c6:	415b      	adcs	r3, r3
 800a7c8:	627b      	str	r3, [r7, #36]	; 0x24
 800a7ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a7ce:	4641      	mov	r1, r8
 800a7d0:	1854      	adds	r4, r2, r1
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	eb43 0501 	adc.w	r5, r3, r1
 800a7d8:	f04f 0200 	mov.w	r2, #0
 800a7dc:	f04f 0300 	mov.w	r3, #0
 800a7e0:	00eb      	lsls	r3, r5, #3
 800a7e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a7e6:	00e2      	lsls	r2, r4, #3
 800a7e8:	4614      	mov	r4, r2
 800a7ea:	461d      	mov	r5, r3
 800a7ec:	4643      	mov	r3, r8
 800a7ee:	18e3      	adds	r3, r4, r3
 800a7f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a7f4:	464b      	mov	r3, r9
 800a7f6:	eb45 0303 	adc.w	r3, r5, r3
 800a7fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a7fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a80a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a80e:	f04f 0200 	mov.w	r2, #0
 800a812:	f04f 0300 	mov.w	r3, #0
 800a816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a81a:	4629      	mov	r1, r5
 800a81c:	008b      	lsls	r3, r1, #2
 800a81e:	4621      	mov	r1, r4
 800a820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a824:	4621      	mov	r1, r4
 800a826:	008a      	lsls	r2, r1, #2
 800a828:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a82c:	f7f6 fa3c 	bl	8000ca8 <__aeabi_uldivmod>
 800a830:	4602      	mov	r2, r0
 800a832:	460b      	mov	r3, r1
 800a834:	4b60      	ldr	r3, [pc, #384]	; (800a9b8 <UART_SetConfig+0x4e4>)
 800a836:	fba3 2302 	umull	r2, r3, r3, r2
 800a83a:	095b      	lsrs	r3, r3, #5
 800a83c:	011c      	lsls	r4, r3, #4
 800a83e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a842:	2200      	movs	r2, #0
 800a844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a848:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a84c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a850:	4642      	mov	r2, r8
 800a852:	464b      	mov	r3, r9
 800a854:	1891      	adds	r1, r2, r2
 800a856:	61b9      	str	r1, [r7, #24]
 800a858:	415b      	adcs	r3, r3
 800a85a:	61fb      	str	r3, [r7, #28]
 800a85c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a860:	4641      	mov	r1, r8
 800a862:	1851      	adds	r1, r2, r1
 800a864:	6139      	str	r1, [r7, #16]
 800a866:	4649      	mov	r1, r9
 800a868:	414b      	adcs	r3, r1
 800a86a:	617b      	str	r3, [r7, #20]
 800a86c:	f04f 0200 	mov.w	r2, #0
 800a870:	f04f 0300 	mov.w	r3, #0
 800a874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a878:	4659      	mov	r1, fp
 800a87a:	00cb      	lsls	r3, r1, #3
 800a87c:	4651      	mov	r1, sl
 800a87e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a882:	4651      	mov	r1, sl
 800a884:	00ca      	lsls	r2, r1, #3
 800a886:	4610      	mov	r0, r2
 800a888:	4619      	mov	r1, r3
 800a88a:	4603      	mov	r3, r0
 800a88c:	4642      	mov	r2, r8
 800a88e:	189b      	adds	r3, r3, r2
 800a890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a894:	464b      	mov	r3, r9
 800a896:	460a      	mov	r2, r1
 800a898:	eb42 0303 	adc.w	r3, r2, r3
 800a89c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a8a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a8aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a8ac:	f04f 0200 	mov.w	r2, #0
 800a8b0:	f04f 0300 	mov.w	r3, #0
 800a8b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a8b8:	4649      	mov	r1, r9
 800a8ba:	008b      	lsls	r3, r1, #2
 800a8bc:	4641      	mov	r1, r8
 800a8be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8c2:	4641      	mov	r1, r8
 800a8c4:	008a      	lsls	r2, r1, #2
 800a8c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a8ca:	f7f6 f9ed 	bl	8000ca8 <__aeabi_uldivmod>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4b39      	ldr	r3, [pc, #228]	; (800a9b8 <UART_SetConfig+0x4e4>)
 800a8d4:	fba3 1302 	umull	r1, r3, r3, r2
 800a8d8:	095b      	lsrs	r3, r3, #5
 800a8da:	2164      	movs	r1, #100	; 0x64
 800a8dc:	fb01 f303 	mul.w	r3, r1, r3
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	011b      	lsls	r3, r3, #4
 800a8e4:	3332      	adds	r3, #50	; 0x32
 800a8e6:	4a34      	ldr	r2, [pc, #208]	; (800a9b8 <UART_SetConfig+0x4e4>)
 800a8e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ec:	095b      	lsrs	r3, r3, #5
 800a8ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8f2:	441c      	add	r4, r3
 800a8f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	673b      	str	r3, [r7, #112]	; 0x70
 800a8fc:	677a      	str	r2, [r7, #116]	; 0x74
 800a8fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a902:	4642      	mov	r2, r8
 800a904:	464b      	mov	r3, r9
 800a906:	1891      	adds	r1, r2, r2
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	415b      	adcs	r3, r3
 800a90c:	60fb      	str	r3, [r7, #12]
 800a90e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a912:	4641      	mov	r1, r8
 800a914:	1851      	adds	r1, r2, r1
 800a916:	6039      	str	r1, [r7, #0]
 800a918:	4649      	mov	r1, r9
 800a91a:	414b      	adcs	r3, r1
 800a91c:	607b      	str	r3, [r7, #4]
 800a91e:	f04f 0200 	mov.w	r2, #0
 800a922:	f04f 0300 	mov.w	r3, #0
 800a926:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a92a:	4659      	mov	r1, fp
 800a92c:	00cb      	lsls	r3, r1, #3
 800a92e:	4651      	mov	r1, sl
 800a930:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a934:	4651      	mov	r1, sl
 800a936:	00ca      	lsls	r2, r1, #3
 800a938:	4610      	mov	r0, r2
 800a93a:	4619      	mov	r1, r3
 800a93c:	4603      	mov	r3, r0
 800a93e:	4642      	mov	r2, r8
 800a940:	189b      	adds	r3, r3, r2
 800a942:	66bb      	str	r3, [r7, #104]	; 0x68
 800a944:	464b      	mov	r3, r9
 800a946:	460a      	mov	r2, r1
 800a948:	eb42 0303 	adc.w	r3, r2, r3
 800a94c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a94e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	663b      	str	r3, [r7, #96]	; 0x60
 800a958:	667a      	str	r2, [r7, #100]	; 0x64
 800a95a:	f04f 0200 	mov.w	r2, #0
 800a95e:	f04f 0300 	mov.w	r3, #0
 800a962:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a966:	4649      	mov	r1, r9
 800a968:	008b      	lsls	r3, r1, #2
 800a96a:	4641      	mov	r1, r8
 800a96c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a970:	4641      	mov	r1, r8
 800a972:	008a      	lsls	r2, r1, #2
 800a974:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a978:	f7f6 f996 	bl	8000ca8 <__aeabi_uldivmod>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	4b0d      	ldr	r3, [pc, #52]	; (800a9b8 <UART_SetConfig+0x4e4>)
 800a982:	fba3 1302 	umull	r1, r3, r3, r2
 800a986:	095b      	lsrs	r3, r3, #5
 800a988:	2164      	movs	r1, #100	; 0x64
 800a98a:	fb01 f303 	mul.w	r3, r1, r3
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	011b      	lsls	r3, r3, #4
 800a992:	3332      	adds	r3, #50	; 0x32
 800a994:	4a08      	ldr	r2, [pc, #32]	; (800a9b8 <UART_SetConfig+0x4e4>)
 800a996:	fba2 2303 	umull	r2, r3, r2, r3
 800a99a:	095b      	lsrs	r3, r3, #5
 800a99c:	f003 020f 	and.w	r2, r3, #15
 800a9a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4422      	add	r2, r4
 800a9a8:	609a      	str	r2, [r3, #8]
}
 800a9aa:	bf00      	nop
 800a9ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9b6:	bf00      	nop
 800a9b8:	51eb851f 	.word	0x51eb851f

0800a9bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a9c0:	4904      	ldr	r1, [pc, #16]	; (800a9d4 <MX_FATFS_Init+0x18>)
 800a9c2:	4805      	ldr	r0, [pc, #20]	; (800a9d8 <MX_FATFS_Init+0x1c>)
 800a9c4:	f003 f952 	bl	800dc6c <FATFS_LinkDriver>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	4b03      	ldr	r3, [pc, #12]	; (800a9dc <MX_FATFS_Init+0x20>)
 800a9ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a9d0:	bf00      	nop
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	200012b0 	.word	0x200012b0
 800a9d8:	20000010 	.word	0x20000010
 800a9dc:	200012ac 	.word	0x200012ac

0800a9e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a9e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800a9fa:	79fb      	ldrb	r3, [r7, #7]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7f6 fd9f 	bl	8001540 <SD_disk_initialize>
 800aa02:	4603      	mov	r3, r0
 800aa04:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b082      	sub	sp, #8
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	4603      	mov	r3, r0
 800aa16:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	 return SD_disk_status(pdrv);
 800aa18:	79fb      	ldrb	r3, [r7, #7]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7f6 fe7a 	bl	8001714 <SD_disk_status>
 800aa20:	4603      	mov	r3, r0
 800aa22:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60b9      	str	r1, [r7, #8]
 800aa34:	607a      	str	r2, [r7, #4]
 800aa36:	603b      	str	r3, [r7, #0]
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800aa3c:	7bf8      	ldrb	r0, [r7, #15]
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	68b9      	ldr	r1, [r7, #8]
 800aa44:	f7f6 fe7c 	bl	8001740 <SD_disk_read>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60b9      	str	r1, [r7, #8]
 800aa5c:	607a      	str	r2, [r7, #4]
 800aa5e:	603b      	str	r3, [r7, #0]
 800aa60:	4603      	mov	r3, r0
 800aa62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800aa64:	7bf8      	ldrb	r0, [r7, #15]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	68b9      	ldr	r1, [r7, #8]
 800aa6c:	f7f6 fed2 	bl	8001814 <SD_disk_write>
 800aa70:	4603      	mov	r3, r0
 800aa72:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	4603      	mov	r3, r0
 800aa84:	603a      	str	r2, [r7, #0]
 800aa86:	71fb      	strb	r3, [r7, #7]
 800aa88:	460b      	mov	r3, r1
 800aa8a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800aa8c:	79fb      	ldrb	r3, [r7, #7]
 800aa8e:	79b9      	ldrb	r1, [r7, #6]
 800aa90:	683a      	ldr	r2, [r7, #0]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7f6 ff42 	bl	800191c <SD_disk_ioctl>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800aaae:	79fb      	ldrb	r3, [r7, #7]
 800aab0:	4a08      	ldr	r2, [pc, #32]	; (800aad4 <disk_status+0x30>)
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	79fa      	ldrb	r2, [r7, #7]
 800aabc:	4905      	ldr	r1, [pc, #20]	; (800aad4 <disk_status+0x30>)
 800aabe:	440a      	add	r2, r1
 800aac0:	7a12      	ldrb	r2, [r2, #8]
 800aac2:	4610      	mov	r0, r2
 800aac4:	4798      	blx	r3
 800aac6:	4603      	mov	r3, r0
 800aac8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800aaca:	7bfb      	ldrb	r3, [r7, #15]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	200014dc 	.word	0x200014dc

0800aad8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	4603      	mov	r3, r0
 800aae0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800aae6:	79fb      	ldrb	r3, [r7, #7]
 800aae8:	4a0d      	ldr	r2, [pc, #52]	; (800ab20 <disk_initialize+0x48>)
 800aaea:	5cd3      	ldrb	r3, [r2, r3]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d111      	bne.n	800ab14 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800aaf0:	79fb      	ldrb	r3, [r7, #7]
 800aaf2:	4a0b      	ldr	r2, [pc, #44]	; (800ab20 <disk_initialize+0x48>)
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800aaf8:	79fb      	ldrb	r3, [r7, #7]
 800aafa:	4a09      	ldr	r2, [pc, #36]	; (800ab20 <disk_initialize+0x48>)
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	79fa      	ldrb	r2, [r7, #7]
 800ab06:	4906      	ldr	r1, [pc, #24]	; (800ab20 <disk_initialize+0x48>)
 800ab08:	440a      	add	r2, r1
 800ab0a:	7a12      	ldrb	r2, [r2, #8]
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	4798      	blx	r3
 800ab10:	4603      	mov	r3, r0
 800ab12:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ab14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	200014dc 	.word	0x200014dc

0800ab24 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ab24:	b590      	push	{r4, r7, lr}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60b9      	str	r1, [r7, #8]
 800ab2c:	607a      	str	r2, [r7, #4]
 800ab2e:	603b      	str	r3, [r7, #0]
 800ab30:	4603      	mov	r3, r0
 800ab32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
 800ab36:	4a0a      	ldr	r2, [pc, #40]	; (800ab60 <disk_read+0x3c>)
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	689c      	ldr	r4, [r3, #8]
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	4a07      	ldr	r2, [pc, #28]	; (800ab60 <disk_read+0x3c>)
 800ab44:	4413      	add	r3, r2
 800ab46:	7a18      	ldrb	r0, [r3, #8]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	68b9      	ldr	r1, [r7, #8]
 800ab4e:	47a0      	blx	r4
 800ab50:	4603      	mov	r3, r0
 800ab52:	75fb      	strb	r3, [r7, #23]
  return res;
 800ab54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	371c      	adds	r7, #28
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd90      	pop	{r4, r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	200014dc 	.word	0x200014dc

0800ab64 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ab64:	b590      	push	{r4, r7, lr}
 800ab66:	b087      	sub	sp, #28
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60b9      	str	r1, [r7, #8]
 800ab6c:	607a      	str	r2, [r7, #4]
 800ab6e:	603b      	str	r3, [r7, #0]
 800ab70:	4603      	mov	r3, r0
 800ab72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
 800ab76:	4a0a      	ldr	r2, [pc, #40]	; (800aba0 <disk_write+0x3c>)
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	68dc      	ldr	r4, [r3, #12]
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
 800ab82:	4a07      	ldr	r2, [pc, #28]	; (800aba0 <disk_write+0x3c>)
 800ab84:	4413      	add	r3, r2
 800ab86:	7a18      	ldrb	r0, [r3, #8]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	68b9      	ldr	r1, [r7, #8]
 800ab8e:	47a0      	blx	r4
 800ab90:	4603      	mov	r3, r0
 800ab92:	75fb      	strb	r3, [r7, #23]
  return res;
 800ab94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	371c      	adds	r7, #28
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd90      	pop	{r4, r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	200014dc 	.word	0x200014dc

0800aba4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	4603      	mov	r3, r0
 800abac:	603a      	str	r2, [r7, #0]
 800abae:	71fb      	strb	r3, [r7, #7]
 800abb0:	460b      	mov	r3, r1
 800abb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800abb4:	79fb      	ldrb	r3, [r7, #7]
 800abb6:	4a09      	ldr	r2, [pc, #36]	; (800abdc <disk_ioctl+0x38>)
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	79fa      	ldrb	r2, [r7, #7]
 800abc2:	4906      	ldr	r1, [pc, #24]	; (800abdc <disk_ioctl+0x38>)
 800abc4:	440a      	add	r2, r1
 800abc6:	7a10      	ldrb	r0, [r2, #8]
 800abc8:	79b9      	ldrb	r1, [r7, #6]
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	4798      	blx	r3
 800abce:	4603      	mov	r3, r0
 800abd0:	73fb      	strb	r3, [r7, #15]
  return res;
 800abd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	200014dc 	.word	0x200014dc

0800abe0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	3301      	adds	r3, #1
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800abf0:	89fb      	ldrh	r3, [r7, #14]
 800abf2:	021b      	lsls	r3, r3, #8
 800abf4:	b21a      	sxth	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	b21b      	sxth	r3, r3
 800abfc:	4313      	orrs	r3, r2
 800abfe:	b21b      	sxth	r3, r3
 800ac00:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ac02:	89fb      	ldrh	r3, [r7, #14]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	3303      	adds	r3, #3
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	021b      	lsls	r3, r3, #8
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	3202      	adds	r2, #2
 800ac28:	7812      	ldrb	r2, [r2, #0]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	021b      	lsls	r3, r3, #8
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	3201      	adds	r2, #1
 800ac36:	7812      	ldrb	r2, [r2, #0]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	021b      	lsls	r3, r3, #8
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	7812      	ldrb	r2, [r2, #0]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	60fb      	str	r3, [r7, #12]
	return rv;
 800ac48:	68fb      	ldr	r3, [r7, #12]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ac56:	b480      	push	{r7}
 800ac58:	b083      	sub	sp, #12
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	460b      	mov	r3, r1
 800ac60:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	1c5a      	adds	r2, r3, #1
 800ac66:	607a      	str	r2, [r7, #4]
 800ac68:	887a      	ldrh	r2, [r7, #2]
 800ac6a:	b2d2      	uxtb	r2, r2
 800ac6c:	701a      	strb	r2, [r3, #0]
 800ac6e:	887b      	ldrh	r3, [r7, #2]
 800ac70:	0a1b      	lsrs	r3, r3, #8
 800ac72:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	1c5a      	adds	r2, r3, #1
 800ac78:	607a      	str	r2, [r7, #4]
 800ac7a:	887a      	ldrh	r2, [r7, #2]
 800ac7c:	b2d2      	uxtb	r2, r2
 800ac7e:	701a      	strb	r2, [r3, #0]
}
 800ac80:	bf00      	nop
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	1c5a      	adds	r2, r3, #1
 800ac9a:	607a      	str	r2, [r7, #4]
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	b2d2      	uxtb	r2, r2
 800aca0:	701a      	strb	r2, [r3, #0]
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	0a1b      	lsrs	r3, r3, #8
 800aca6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	1c5a      	adds	r2, r3, #1
 800acac:	607a      	str	r2, [r7, #4]
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	b2d2      	uxtb	r2, r2
 800acb2:	701a      	strb	r2, [r3, #0]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	0a1b      	lsrs	r3, r3, #8
 800acb8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	1c5a      	adds	r2, r3, #1
 800acbe:	607a      	str	r2, [r7, #4]
 800acc0:	683a      	ldr	r2, [r7, #0]
 800acc2:	b2d2      	uxtb	r2, r2
 800acc4:	701a      	strb	r2, [r3, #0]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	0a1b      	lsrs	r3, r3, #8
 800acca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	1c5a      	adds	r2, r3, #1
 800acd0:	607a      	str	r2, [r7, #4]
 800acd2:	683a      	ldr	r2, [r7, #0]
 800acd4:	b2d2      	uxtb	r2, r2
 800acd6:	701a      	strb	r2, [r3, #0]
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00d      	beq.n	800ad1a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	1c53      	adds	r3, r2, #1
 800ad02:	613b      	str	r3, [r7, #16]
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	1c59      	adds	r1, r3, #1
 800ad08:	6179      	str	r1, [r7, #20]
 800ad0a:	7812      	ldrb	r2, [r2, #0]
 800ad0c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3b01      	subs	r3, #1
 800ad12:	607b      	str	r3, [r7, #4]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1f1      	bne.n	800acfe <mem_cpy+0x1a>
	}
}
 800ad1a:	bf00      	nop
 800ad1c:	371c      	adds	r7, #28
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ad26:	b480      	push	{r7}
 800ad28:	b087      	sub	sp, #28
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	60f8      	str	r0, [r7, #12]
 800ad2e:	60b9      	str	r1, [r7, #8]
 800ad30:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	1c5a      	adds	r2, r3, #1
 800ad3a:	617a      	str	r2, [r7, #20]
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	b2d2      	uxtb	r2, r2
 800ad40:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	3b01      	subs	r3, #1
 800ad46:	607b      	str	r3, [r7, #4]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1f3      	bne.n	800ad36 <mem_set+0x10>
}
 800ad4e:	bf00      	nop
 800ad50:	bf00      	nop
 800ad52:	371c      	adds	r7, #28
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ad5c:	b480      	push	{r7}
 800ad5e:	b089      	sub	sp, #36	; 0x24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	61fb      	str	r3, [r7, #28]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ad70:	2300      	movs	r3, #0
 800ad72:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	1c5a      	adds	r2, r3, #1
 800ad78:	61fa      	str	r2, [r7, #28]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	1c5a      	adds	r2, r3, #1
 800ad82:	61ba      	str	r2, [r7, #24]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	1acb      	subs	r3, r1, r3
 800ad88:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	607b      	str	r3, [r7, #4]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d002      	beq.n	800ad9c <mem_cmp+0x40>
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d0eb      	beq.n	800ad74 <mem_cmp+0x18>

	return r;
 800ad9c:	697b      	ldr	r3, [r7, #20]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3724      	adds	r7, #36	; 0x24
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800adaa:	b480      	push	{r7}
 800adac:	b083      	sub	sp, #12
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800adb4:	e002      	b.n	800adbc <chk_chr+0x12>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	3301      	adds	r3, #1
 800adba:	607b      	str	r3, [r7, #4]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d005      	beq.n	800add0 <chk_chr+0x26>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	461a      	mov	r2, r3
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	4293      	cmp	r3, r2
 800adce:	d1f2      	bne.n	800adb6 <chk_chr+0xc>
	return *str;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	781b      	ldrb	r3, [r3, #0]
}
 800add4:	4618      	mov	r0, r3
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800adea:	2300      	movs	r3, #0
 800adec:	60bb      	str	r3, [r7, #8]
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	60fb      	str	r3, [r7, #12]
 800adf2:	e029      	b.n	800ae48 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800adf4:	4a27      	ldr	r2, [pc, #156]	; (800ae94 <chk_lock+0xb4>)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	011b      	lsls	r3, r3, #4
 800adfa:	4413      	add	r3, r2
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d01d      	beq.n	800ae3e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ae02:	4a24      	ldr	r2, [pc, #144]	; (800ae94 <chk_lock+0xb4>)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	011b      	lsls	r3, r3, #4
 800ae08:	4413      	add	r3, r2
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d116      	bne.n	800ae42 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ae14:	4a1f      	ldr	r2, [pc, #124]	; (800ae94 <chk_lock+0xb4>)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	011b      	lsls	r3, r3, #4
 800ae1a:	4413      	add	r3, r2
 800ae1c:	3304      	adds	r3, #4
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d10c      	bne.n	800ae42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ae28:	4a1a      	ldr	r2, [pc, #104]	; (800ae94 <chk_lock+0xb4>)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	011b      	lsls	r3, r3, #4
 800ae2e:	4413      	add	r3, r2
 800ae30:	3308      	adds	r3, #8
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d102      	bne.n	800ae42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ae3c:	e007      	b.n	800ae4e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3301      	adds	r3, #1
 800ae46:	60fb      	str	r3, [r7, #12]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d9d2      	bls.n	800adf4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d109      	bne.n	800ae68 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d102      	bne.n	800ae60 <chk_lock+0x80>
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	d101      	bne.n	800ae64 <chk_lock+0x84>
 800ae60:	2300      	movs	r3, #0
 800ae62:	e010      	b.n	800ae86 <chk_lock+0xa6>
 800ae64:	2312      	movs	r3, #18
 800ae66:	e00e      	b.n	800ae86 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d108      	bne.n	800ae80 <chk_lock+0xa0>
 800ae6e:	4a09      	ldr	r2, [pc, #36]	; (800ae94 <chk_lock+0xb4>)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	011b      	lsls	r3, r3, #4
 800ae74:	4413      	add	r3, r2
 800ae76:	330c      	adds	r3, #12
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae7e:	d101      	bne.n	800ae84 <chk_lock+0xa4>
 800ae80:	2310      	movs	r3, #16
 800ae82:	e000      	b.n	800ae86 <chk_lock+0xa6>
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	200012bc 	.word	0x200012bc

0800ae98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	607b      	str	r3, [r7, #4]
 800aea2:	e002      	b.n	800aeaa <enq_lock+0x12>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	3301      	adds	r3, #1
 800aea8:	607b      	str	r3, [r7, #4]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d806      	bhi.n	800aebe <enq_lock+0x26>
 800aeb0:	4a09      	ldr	r2, [pc, #36]	; (800aed8 <enq_lock+0x40>)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	011b      	lsls	r3, r3, #4
 800aeb6:	4413      	add	r3, r2
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1f2      	bne.n	800aea4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	bf14      	ite	ne
 800aec4:	2301      	movne	r3, #1
 800aec6:	2300      	moveq	r3, #0
 800aec8:	b2db      	uxtb	r3, r3
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	370c      	adds	r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	200012bc 	.word	0x200012bc

0800aedc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aee6:	2300      	movs	r3, #0
 800aee8:	60fb      	str	r3, [r7, #12]
 800aeea:	e01f      	b.n	800af2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800aeec:	4a41      	ldr	r2, [pc, #260]	; (800aff4 <inc_lock+0x118>)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	011b      	lsls	r3, r3, #4
 800aef2:	4413      	add	r3, r2
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d113      	bne.n	800af26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800aefe:	4a3d      	ldr	r2, [pc, #244]	; (800aff4 <inc_lock+0x118>)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	011b      	lsls	r3, r3, #4
 800af04:	4413      	add	r3, r2
 800af06:	3304      	adds	r3, #4
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800af0e:	429a      	cmp	r2, r3
 800af10:	d109      	bne.n	800af26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800af12:	4a38      	ldr	r2, [pc, #224]	; (800aff4 <inc_lock+0x118>)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	011b      	lsls	r3, r3, #4
 800af18:	4413      	add	r3, r2
 800af1a:	3308      	adds	r3, #8
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800af22:	429a      	cmp	r2, r3
 800af24:	d006      	beq.n	800af34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	3301      	adds	r3, #1
 800af2a:	60fb      	str	r3, [r7, #12]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d9dc      	bls.n	800aeec <inc_lock+0x10>
 800af32:	e000      	b.n	800af36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800af34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2b02      	cmp	r3, #2
 800af3a:	d132      	bne.n	800afa2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af3c:	2300      	movs	r3, #0
 800af3e:	60fb      	str	r3, [r7, #12]
 800af40:	e002      	b.n	800af48 <inc_lock+0x6c>
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	3301      	adds	r3, #1
 800af46:	60fb      	str	r3, [r7, #12]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d806      	bhi.n	800af5c <inc_lock+0x80>
 800af4e:	4a29      	ldr	r2, [pc, #164]	; (800aff4 <inc_lock+0x118>)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	011b      	lsls	r3, r3, #4
 800af54:	4413      	add	r3, r2
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1f2      	bne.n	800af42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d101      	bne.n	800af66 <inc_lock+0x8a>
 800af62:	2300      	movs	r3, #0
 800af64:	e040      	b.n	800afe8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	4922      	ldr	r1, [pc, #136]	; (800aff4 <inc_lock+0x118>)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	011b      	lsls	r3, r3, #4
 800af70:	440b      	add	r3, r1
 800af72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689a      	ldr	r2, [r3, #8]
 800af78:	491e      	ldr	r1, [pc, #120]	; (800aff4 <inc_lock+0x118>)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	011b      	lsls	r3, r3, #4
 800af7e:	440b      	add	r3, r1
 800af80:	3304      	adds	r3, #4
 800af82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	695a      	ldr	r2, [r3, #20]
 800af88:	491a      	ldr	r1, [pc, #104]	; (800aff4 <inc_lock+0x118>)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	011b      	lsls	r3, r3, #4
 800af8e:	440b      	add	r3, r1
 800af90:	3308      	adds	r3, #8
 800af92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800af94:	4a17      	ldr	r2, [pc, #92]	; (800aff4 <inc_lock+0x118>)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	011b      	lsls	r3, r3, #4
 800af9a:	4413      	add	r3, r2
 800af9c:	330c      	adds	r3, #12
 800af9e:	2200      	movs	r2, #0
 800afa0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d009      	beq.n	800afbc <inc_lock+0xe0>
 800afa8:	4a12      	ldr	r2, [pc, #72]	; (800aff4 <inc_lock+0x118>)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	011b      	lsls	r3, r3, #4
 800afae:	4413      	add	r3, r2
 800afb0:	330c      	adds	r3, #12
 800afb2:	881b      	ldrh	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d001      	beq.n	800afbc <inc_lock+0xe0>
 800afb8:	2300      	movs	r3, #0
 800afba:	e015      	b.n	800afe8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d108      	bne.n	800afd4 <inc_lock+0xf8>
 800afc2:	4a0c      	ldr	r2, [pc, #48]	; (800aff4 <inc_lock+0x118>)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	011b      	lsls	r3, r3, #4
 800afc8:	4413      	add	r3, r2
 800afca:	330c      	adds	r3, #12
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	3301      	adds	r3, #1
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	e001      	b.n	800afd8 <inc_lock+0xfc>
 800afd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afd8:	4906      	ldr	r1, [pc, #24]	; (800aff4 <inc_lock+0x118>)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	011b      	lsls	r3, r3, #4
 800afde:	440b      	add	r3, r1
 800afe0:	330c      	adds	r3, #12
 800afe2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	3301      	adds	r3, #1
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3714      	adds	r7, #20
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr
 800aff4:	200012bc 	.word	0x200012bc

0800aff8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	3b01      	subs	r3, #1
 800b004:	607b      	str	r3, [r7, #4]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d825      	bhi.n	800b058 <dec_lock+0x60>
		n = Files[i].ctr;
 800b00c:	4a17      	ldr	r2, [pc, #92]	; (800b06c <dec_lock+0x74>)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	011b      	lsls	r3, r3, #4
 800b012:	4413      	add	r3, r2
 800b014:	330c      	adds	r3, #12
 800b016:	881b      	ldrh	r3, [r3, #0]
 800b018:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b01a:	89fb      	ldrh	r3, [r7, #14]
 800b01c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b020:	d101      	bne.n	800b026 <dec_lock+0x2e>
 800b022:	2300      	movs	r3, #0
 800b024:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b026:	89fb      	ldrh	r3, [r7, #14]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d002      	beq.n	800b032 <dec_lock+0x3a>
 800b02c:	89fb      	ldrh	r3, [r7, #14]
 800b02e:	3b01      	subs	r3, #1
 800b030:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b032:	4a0e      	ldr	r2, [pc, #56]	; (800b06c <dec_lock+0x74>)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	011b      	lsls	r3, r3, #4
 800b038:	4413      	add	r3, r2
 800b03a:	330c      	adds	r3, #12
 800b03c:	89fa      	ldrh	r2, [r7, #14]
 800b03e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b040:	89fb      	ldrh	r3, [r7, #14]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d105      	bne.n	800b052 <dec_lock+0x5a>
 800b046:	4a09      	ldr	r2, [pc, #36]	; (800b06c <dec_lock+0x74>)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	011b      	lsls	r3, r3, #4
 800b04c:	4413      	add	r3, r2
 800b04e:	2200      	movs	r2, #0
 800b050:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b052:	2300      	movs	r3, #0
 800b054:	737b      	strb	r3, [r7, #13]
 800b056:	e001      	b.n	800b05c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b058:	2302      	movs	r3, #2
 800b05a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b05c:	7b7b      	ldrb	r3, [r7, #13]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	200012bc 	.word	0x200012bc

0800b070 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b078:	2300      	movs	r3, #0
 800b07a:	60fb      	str	r3, [r7, #12]
 800b07c:	e010      	b.n	800b0a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b07e:	4a0d      	ldr	r2, [pc, #52]	; (800b0b4 <clear_lock+0x44>)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	011b      	lsls	r3, r3, #4
 800b084:	4413      	add	r3, r2
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d105      	bne.n	800b09a <clear_lock+0x2a>
 800b08e:	4a09      	ldr	r2, [pc, #36]	; (800b0b4 <clear_lock+0x44>)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	011b      	lsls	r3, r3, #4
 800b094:	4413      	add	r3, r2
 800b096:	2200      	movs	r2, #0
 800b098:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	3301      	adds	r3, #1
 800b09e:	60fb      	str	r3, [r7, #12]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d9eb      	bls.n	800b07e <clear_lock+0xe>
	}
}
 800b0a6:	bf00      	nop
 800b0a8:	bf00      	nop
 800b0aa:	3714      	adds	r7, #20
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr
 800b0b4:	200012bc 	.word	0x200012bc

0800b0b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	78db      	ldrb	r3, [r3, #3]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d034      	beq.n	800b136 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	7858      	ldrb	r0, [r3, #1]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b0dc:	2301      	movs	r3, #1
 800b0de:	697a      	ldr	r2, [r7, #20]
 800b0e0:	f7ff fd40 	bl	800ab64 <disk_write>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d002      	beq.n	800b0f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	73fb      	strb	r3, [r7, #15]
 800b0ee:	e022      	b.n	800b136 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	1ad2      	subs	r2, r2, r3
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	429a      	cmp	r2, r3
 800b104:	d217      	bcs.n	800b136 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	789b      	ldrb	r3, [r3, #2]
 800b10a:	613b      	str	r3, [r7, #16]
 800b10c:	e010      	b.n	800b130 <sync_window+0x78>
					wsect += fs->fsize;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	69db      	ldr	r3, [r3, #28]
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	4413      	add	r3, r2
 800b116:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	7858      	ldrb	r0, [r3, #1]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b122:	2301      	movs	r3, #1
 800b124:	697a      	ldr	r2, [r7, #20]
 800b126:	f7ff fd1d 	bl	800ab64 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	613b      	str	r3, [r7, #16]
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	2b01      	cmp	r3, #1
 800b134:	d8eb      	bhi.n	800b10e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b136:	7bfb      	ldrb	r3, [r7, #15]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	429a      	cmp	r2, r3
 800b156:	d01b      	beq.n	800b190 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7ff ffad 	bl	800b0b8 <sync_window>
 800b15e:	4603      	mov	r3, r0
 800b160:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d113      	bne.n	800b190 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	7858      	ldrb	r0, [r3, #1]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b172:	2301      	movs	r3, #1
 800b174:	683a      	ldr	r2, [r7, #0]
 800b176:	f7ff fcd5 	bl	800ab24 <disk_read>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d004      	beq.n	800b18a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b180:	f04f 33ff 	mov.w	r3, #4294967295
 800b184:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b186:	2301      	movs	r3, #1
 800b188:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	683a      	ldr	r2, [r7, #0]
 800b18e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800b190:	7bfb      	ldrb	r3, [r7, #15]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
	...

0800b19c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f7ff ff87 	bl	800b0b8 <sync_window>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d158      	bne.n	800b266 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b03      	cmp	r3, #3
 800b1ba:	d148      	bne.n	800b24e <sync_fs+0xb2>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	791b      	ldrb	r3, [r3, #4]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d144      	bne.n	800b24e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	3334      	adds	r3, #52	; 0x34
 800b1c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7ff fda9 	bl	800ad26 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3334      	adds	r3, #52	; 0x34
 800b1d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b1dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7ff fd38 	bl	800ac56 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	3334      	adds	r3, #52	; 0x34
 800b1ea:	4921      	ldr	r1, [pc, #132]	; (800b270 <sync_fs+0xd4>)
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7ff fd4d 	bl	800ac8c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	3334      	adds	r3, #52	; 0x34
 800b1f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b1fa:	491e      	ldr	r1, [pc, #120]	; (800b274 <sync_fs+0xd8>)
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7ff fd45 	bl	800ac8c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3334      	adds	r3, #52	; 0x34
 800b206:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	695b      	ldr	r3, [r3, #20]
 800b20e:	4619      	mov	r1, r3
 800b210:	4610      	mov	r0, r2
 800b212:	f7ff fd3b 	bl	800ac8c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	3334      	adds	r3, #52	; 0x34
 800b21a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	4619      	mov	r1, r3
 800b224:	4610      	mov	r0, r2
 800b226:	f7ff fd31 	bl	800ac8c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a1b      	ldr	r3, [r3, #32]
 800b22e:	1c5a      	adds	r2, r3, #1
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	7858      	ldrb	r0, [r3, #1]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b242:	2301      	movs	r3, #1
 800b244:	f7ff fc8e 	bl	800ab64 <disk_write>
			fs->fsi_flag = 0;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	785b      	ldrb	r3, [r3, #1]
 800b252:	2200      	movs	r2, #0
 800b254:	2100      	movs	r1, #0
 800b256:	4618      	mov	r0, r3
 800b258:	f7ff fca4 	bl	800aba4 <disk_ioctl>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <sync_fs+0xca>
 800b262:	2301      	movs	r3, #1
 800b264:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b266:	7bfb      	ldrb	r3, [r7, #15]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	41615252 	.word	0x41615252
 800b274:	61417272 	.word	0x61417272

0800b278 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	3b02      	subs	r3, #2
 800b286:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	3b02      	subs	r3, #2
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	429a      	cmp	r2, r3
 800b292:	d301      	bcc.n	800b298 <clust2sect+0x20>
 800b294:	2300      	movs	r3, #0
 800b296:	e008      	b.n	800b2aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	895b      	ldrh	r3, [r3, #10]
 800b29c:	461a      	mov	r2, r3
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	fb03 f202 	mul.w	r2, r3, r2
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a8:	4413      	add	r3, r2
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	370c      	adds	r7, #12
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr

0800b2b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b086      	sub	sp, #24
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d904      	bls.n	800b2d6 <get_fat+0x20>
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	699b      	ldr	r3, [r3, #24]
 800b2d0:	683a      	ldr	r2, [r7, #0]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d302      	bcc.n	800b2dc <get_fat+0x26>
		val = 1;	/* Internal error */
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	617b      	str	r3, [r7, #20]
 800b2da:	e08f      	b.n	800b3fc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b2dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d062      	beq.n	800b3b0 <get_fat+0xfa>
 800b2ea:	2b03      	cmp	r3, #3
 800b2ec:	dc7c      	bgt.n	800b3e8 <get_fat+0x132>
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d002      	beq.n	800b2f8 <get_fat+0x42>
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d042      	beq.n	800b37c <get_fat+0xc6>
 800b2f6:	e077      	b.n	800b3e8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	60fb      	str	r3, [r7, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	085b      	lsrs	r3, r3, #1
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	4413      	add	r3, r2
 800b304:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	0a5b      	lsrs	r3, r3, #9
 800b30e:	4413      	add	r3, r2
 800b310:	4619      	mov	r1, r3
 800b312:	6938      	ldr	r0, [r7, #16]
 800b314:	f7ff ff14 	bl	800b140 <move_window>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d167      	bne.n	800b3ee <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	1c5a      	adds	r2, r3, #1
 800b322:	60fa      	str	r2, [r7, #12]
 800b324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b328:	693a      	ldr	r2, [r7, #16]
 800b32a:	4413      	add	r3, r2
 800b32c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b330:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	0a5b      	lsrs	r3, r3, #9
 800b33a:	4413      	add	r3, r2
 800b33c:	4619      	mov	r1, r3
 800b33e:	6938      	ldr	r0, [r7, #16]
 800b340:	f7ff fefe 	bl	800b140 <move_window>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d153      	bne.n	800b3f2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	4413      	add	r3, r2
 800b354:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b358:	021b      	lsls	r3, r3, #8
 800b35a:	461a      	mov	r2, r3
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	4313      	orrs	r3, r2
 800b360:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	f003 0301 	and.w	r3, r3, #1
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d002      	beq.n	800b372 <get_fat+0xbc>
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	091b      	lsrs	r3, r3, #4
 800b370:	e002      	b.n	800b378 <get_fat+0xc2>
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b378:	617b      	str	r3, [r7, #20]
			break;
 800b37a:	e03f      	b.n	800b3fc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	0a1b      	lsrs	r3, r3, #8
 800b384:	4413      	add	r3, r2
 800b386:	4619      	mov	r1, r3
 800b388:	6938      	ldr	r0, [r7, #16]
 800b38a:	f7ff fed9 	bl	800b140 <move_window>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d130      	bne.n	800b3f6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	005b      	lsls	r3, r3, #1
 800b39e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b3a2:	4413      	add	r3, r2
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7ff fc1b 	bl	800abe0 <ld_word>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	617b      	str	r3, [r7, #20]
			break;
 800b3ae:	e025      	b.n	800b3fc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	09db      	lsrs	r3, r3, #7
 800b3b8:	4413      	add	r3, r2
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	6938      	ldr	r0, [r7, #16]
 800b3be:	f7ff febf 	bl	800b140 <move_window>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d118      	bne.n	800b3fa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b3d6:	4413      	add	r3, r2
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7ff fc19 	bl	800ac10 <ld_dword>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b3e4:	617b      	str	r3, [r7, #20]
			break;
 800b3e6:	e009      	b.n	800b3fc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	617b      	str	r3, [r7, #20]
 800b3ec:	e006      	b.n	800b3fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3ee:	bf00      	nop
 800b3f0:	e004      	b.n	800b3fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3f2:	bf00      	nop
 800b3f4:	e002      	b.n	800b3fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b3f6:	bf00      	nop
 800b3f8:	e000      	b.n	800b3fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b3fa:	bf00      	nop
		}
	}

	return val;
 800b3fc:	697b      	ldr	r3, [r7, #20]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3718      	adds	r7, #24
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b406:	b590      	push	{r4, r7, lr}
 800b408:	b089      	sub	sp, #36	; 0x24
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	60f8      	str	r0, [r7, #12]
 800b40e:	60b9      	str	r1, [r7, #8]
 800b410:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b412:	2302      	movs	r3, #2
 800b414:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	f240 80d2 	bls.w	800b5c2 <put_fat+0x1bc>
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	699b      	ldr	r3, [r3, #24]
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	429a      	cmp	r2, r3
 800b426:	f080 80cc 	bcs.w	800b5c2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	2b03      	cmp	r3, #3
 800b430:	f000 8096 	beq.w	800b560 <put_fat+0x15a>
 800b434:	2b03      	cmp	r3, #3
 800b436:	f300 80cd 	bgt.w	800b5d4 <put_fat+0x1ce>
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d002      	beq.n	800b444 <put_fat+0x3e>
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d06e      	beq.n	800b520 <put_fat+0x11a>
 800b442:	e0c7      	b.n	800b5d4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	61bb      	str	r3, [r7, #24]
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	085b      	lsrs	r3, r3, #1
 800b44c:	69ba      	ldr	r2, [r7, #24]
 800b44e:	4413      	add	r3, r2
 800b450:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	0a5b      	lsrs	r3, r3, #9
 800b45a:	4413      	add	r3, r2
 800b45c:	4619      	mov	r1, r3
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	f7ff fe6e 	bl	800b140 <move_window>
 800b464:	4603      	mov	r3, r0
 800b466:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b468:	7ffb      	ldrb	r3, [r7, #31]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f040 80ab 	bne.w	800b5c6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	1c59      	adds	r1, r3, #1
 800b47a:	61b9      	str	r1, [r7, #24]
 800b47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b480:	4413      	add	r3, r2
 800b482:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	f003 0301 	and.w	r3, r3, #1
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00d      	beq.n	800b4aa <put_fat+0xa4>
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	b25b      	sxtb	r3, r3
 800b494:	f003 030f 	and.w	r3, r3, #15
 800b498:	b25a      	sxtb	r2, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	011b      	lsls	r3, r3, #4
 800b4a0:	b25b      	sxtb	r3, r3
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	b25b      	sxtb	r3, r3
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	e001      	b.n	800b4ae <put_fat+0xa8>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	0a5b      	lsrs	r3, r3, #9
 800b4c0:	4413      	add	r3, r2
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f7ff fe3b 	bl	800b140 <move_window>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4ce:	7ffb      	ldrb	r3, [r7, #31]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d17a      	bne.n	800b5ca <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e0:	4413      	add	r3, r2
 800b4e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	f003 0301 	and.w	r3, r3, #1
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d003      	beq.n	800b4f6 <put_fat+0xf0>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	091b      	lsrs	r3, r3, #4
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	e00e      	b.n	800b514 <put_fat+0x10e>
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	b25b      	sxtb	r3, r3
 800b4fc:	f023 030f 	bic.w	r3, r3, #15
 800b500:	b25a      	sxtb	r2, r3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	0a1b      	lsrs	r3, r3, #8
 800b506:	b25b      	sxtb	r3, r3
 800b508:	f003 030f 	and.w	r3, r3, #15
 800b50c:	b25b      	sxtb	r3, r3
 800b50e:	4313      	orrs	r3, r2
 800b510:	b25b      	sxtb	r3, r3
 800b512:	b2db      	uxtb	r3, r3
 800b514:	697a      	ldr	r2, [r7, #20]
 800b516:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2201      	movs	r2, #1
 800b51c:	70da      	strb	r2, [r3, #3]
			break;
 800b51e:	e059      	b.n	800b5d4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	0a1b      	lsrs	r3, r3, #8
 800b528:	4413      	add	r3, r2
 800b52a:	4619      	mov	r1, r3
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f7ff fe07 	bl	800b140 <move_window>
 800b532:	4603      	mov	r3, r0
 800b534:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b536:	7ffb      	ldrb	r3, [r7, #31]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d148      	bne.n	800b5ce <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	005b      	lsls	r3, r3, #1
 800b546:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b54a:	4413      	add	r3, r2
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	b292      	uxth	r2, r2
 800b550:	4611      	mov	r1, r2
 800b552:	4618      	mov	r0, r3
 800b554:	f7ff fb7f 	bl	800ac56 <st_word>
			fs->wflag = 1;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2201      	movs	r2, #1
 800b55c:	70da      	strb	r2, [r3, #3]
			break;
 800b55e:	e039      	b.n	800b5d4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	09db      	lsrs	r3, r3, #7
 800b568:	4413      	add	r3, r2
 800b56a:	4619      	mov	r1, r3
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f7ff fde7 	bl	800b140 <move_window>
 800b572:	4603      	mov	r3, r0
 800b574:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b576:	7ffb      	ldrb	r3, [r7, #31]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d12a      	bne.n	800b5d2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b590:	4413      	add	r3, r2
 800b592:	4618      	mov	r0, r3
 800b594:	f7ff fb3c 	bl	800ac10 <ld_dword>
 800b598:	4603      	mov	r3, r0
 800b59a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b59e:	4323      	orrs	r3, r4
 800b5a0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b5b0:	4413      	add	r3, r2
 800b5b2:	6879      	ldr	r1, [r7, #4]
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7ff fb69 	bl	800ac8c <st_dword>
			fs->wflag = 1;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	70da      	strb	r2, [r3, #3]
			break;
 800b5c0:	e008      	b.n	800b5d4 <put_fat+0x1ce>
		}
	}
 800b5c2:	bf00      	nop
 800b5c4:	e006      	b.n	800b5d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b5c6:	bf00      	nop
 800b5c8:	e004      	b.n	800b5d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b5ca:	bf00      	nop
 800b5cc:	e002      	b.n	800b5d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b5ce:	bf00      	nop
 800b5d0:	e000      	b.n	800b5d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b5d2:	bf00      	nop
	return res;
 800b5d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3724      	adds	r7, #36	; 0x24
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd90      	pop	{r4, r7, pc}

0800b5de <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b088      	sub	sp, #32
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	60f8      	str	r0, [r7, #12]
 800b5e6:	60b9      	str	r1, [r7, #8]
 800b5e8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d904      	bls.n	800b604 <remove_chain+0x26>
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	699b      	ldr	r3, [r3, #24]
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	429a      	cmp	r2, r3
 800b602:	d301      	bcc.n	800b608 <remove_chain+0x2a>
 800b604:	2302      	movs	r3, #2
 800b606:	e04b      	b.n	800b6a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00c      	beq.n	800b628 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b60e:	f04f 32ff 	mov.w	r2, #4294967295
 800b612:	6879      	ldr	r1, [r7, #4]
 800b614:	69b8      	ldr	r0, [r7, #24]
 800b616:	f7ff fef6 	bl	800b406 <put_fat>
 800b61a:	4603      	mov	r3, r0
 800b61c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b61e:	7ffb      	ldrb	r3, [r7, #31]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d001      	beq.n	800b628 <remove_chain+0x4a>
 800b624:	7ffb      	ldrb	r3, [r7, #31]
 800b626:	e03b      	b.n	800b6a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b628:	68b9      	ldr	r1, [r7, #8]
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f7ff fe43 	bl	800b2b6 <get_fat>
 800b630:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d031      	beq.n	800b69c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d101      	bne.n	800b642 <remove_chain+0x64>
 800b63e:	2302      	movs	r3, #2
 800b640:	e02e      	b.n	800b6a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b648:	d101      	bne.n	800b64e <remove_chain+0x70>
 800b64a:	2301      	movs	r3, #1
 800b64c:	e028      	b.n	800b6a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b64e:	2200      	movs	r2, #0
 800b650:	68b9      	ldr	r1, [r7, #8]
 800b652:	69b8      	ldr	r0, [r7, #24]
 800b654:	f7ff fed7 	bl	800b406 <put_fat>
 800b658:	4603      	mov	r3, r0
 800b65a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b65c:	7ffb      	ldrb	r3, [r7, #31]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d001      	beq.n	800b666 <remove_chain+0x88>
 800b662:	7ffb      	ldrb	r3, [r7, #31]
 800b664:	e01c      	b.n	800b6a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	695a      	ldr	r2, [r3, #20]
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	699b      	ldr	r3, [r3, #24]
 800b66e:	3b02      	subs	r3, #2
 800b670:	429a      	cmp	r2, r3
 800b672:	d20b      	bcs.n	800b68c <remove_chain+0xae>
			fs->free_clst++;
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	695b      	ldr	r3, [r3, #20]
 800b678:	1c5a      	adds	r2, r3, #1
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	791b      	ldrb	r3, [r3, #4]
 800b682:	f043 0301 	orr.w	r3, r3, #1
 800b686:	b2da      	uxtb	r2, r3
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	699b      	ldr	r3, [r3, #24]
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	429a      	cmp	r2, r3
 800b698:	d3c6      	bcc.n	800b628 <remove_chain+0x4a>
 800b69a:	e000      	b.n	800b69e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b69c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3720      	adds	r7, #32
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d10d      	bne.n	800b6da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d004      	beq.n	800b6d4 <create_chain+0x2c>
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	69ba      	ldr	r2, [r7, #24]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d31b      	bcc.n	800b70c <create_chain+0x64>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	61bb      	str	r3, [r7, #24]
 800b6d8:	e018      	b.n	800b70c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f7ff fdea 	bl	800b2b6 <get_fat>
 800b6e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d801      	bhi.n	800b6ee <create_chain+0x46>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e070      	b.n	800b7d0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f4:	d101      	bne.n	800b6fa <create_chain+0x52>
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	e06a      	b.n	800b7d0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	699b      	ldr	r3, [r3, #24]
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	429a      	cmp	r2, r3
 800b702:	d201      	bcs.n	800b708 <create_chain+0x60>
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	e063      	b.n	800b7d0 <create_chain+0x128>
		scl = clst;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	3301      	adds	r3, #1
 800b714:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	699b      	ldr	r3, [r3, #24]
 800b71a:	69fa      	ldr	r2, [r7, #28]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d307      	bcc.n	800b730 <create_chain+0x88>
				ncl = 2;
 800b720:	2302      	movs	r3, #2
 800b722:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b724:	69fa      	ldr	r2, [r7, #28]
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d901      	bls.n	800b730 <create_chain+0x88>
 800b72c:	2300      	movs	r3, #0
 800b72e:	e04f      	b.n	800b7d0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b730:	69f9      	ldr	r1, [r7, #28]
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f7ff fdbf 	bl	800b2b6 <get_fat>
 800b738:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d00e      	beq.n	800b75e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2b01      	cmp	r3, #1
 800b744:	d003      	beq.n	800b74e <create_chain+0xa6>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b74c:	d101      	bne.n	800b752 <create_chain+0xaa>
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	e03e      	b.n	800b7d0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b752:	69fa      	ldr	r2, [r7, #28]
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	429a      	cmp	r2, r3
 800b758:	d1da      	bne.n	800b710 <create_chain+0x68>
 800b75a:	2300      	movs	r3, #0
 800b75c:	e038      	b.n	800b7d0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b75e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b760:	f04f 32ff 	mov.w	r2, #4294967295
 800b764:	69f9      	ldr	r1, [r7, #28]
 800b766:	6938      	ldr	r0, [r7, #16]
 800b768:	f7ff fe4d 	bl	800b406 <put_fat>
 800b76c:	4603      	mov	r3, r0
 800b76e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b770:	7dfb      	ldrb	r3, [r7, #23]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d109      	bne.n	800b78a <create_chain+0xe2>
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d006      	beq.n	800b78a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b77c:	69fa      	ldr	r2, [r7, #28]
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6938      	ldr	r0, [r7, #16]
 800b782:	f7ff fe40 	bl	800b406 <put_fat>
 800b786:	4603      	mov	r3, r0
 800b788:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d116      	bne.n	800b7be <create_chain+0x116>
		fs->last_clst = ncl;
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	69fa      	ldr	r2, [r7, #28]
 800b794:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	695a      	ldr	r2, [r3, #20]
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	3b02      	subs	r3, #2
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d804      	bhi.n	800b7ae <create_chain+0x106>
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	695b      	ldr	r3, [r3, #20]
 800b7a8:	1e5a      	subs	r2, r3, #1
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	791b      	ldrb	r3, [r3, #4]
 800b7b2:	f043 0301 	orr.w	r3, r3, #1
 800b7b6:	b2da      	uxtb	r2, r3
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	711a      	strb	r2, [r3, #4]
 800b7bc:	e007      	b.n	800b7ce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b7be:	7dfb      	ldrb	r3, [r7, #23]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d102      	bne.n	800b7ca <create_chain+0x122>
 800b7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c8:	e000      	b.n	800b7cc <create_chain+0x124>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b7ce:	69fb      	ldr	r3, [r7, #28]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3720      	adds	r7, #32
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b087      	sub	sp, #28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ec:	3304      	adds	r3, #4
 800b7ee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	0a5b      	lsrs	r3, r3, #9
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	8952      	ldrh	r2, [r2, #10]
 800b7f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	1d1a      	adds	r2, r3, #4
 800b802:	613a      	str	r2, [r7, #16]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d101      	bne.n	800b812 <clmt_clust+0x3a>
 800b80e:	2300      	movs	r3, #0
 800b810:	e010      	b.n	800b834 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b812:	697a      	ldr	r2, [r7, #20]
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	429a      	cmp	r2, r3
 800b818:	d307      	bcc.n	800b82a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	617b      	str	r3, [r7, #20]
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	3304      	adds	r3, #4
 800b826:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b828:	e7e9      	b.n	800b7fe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b82a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	4413      	add	r3, r2
}
 800b834:	4618      	mov	r0, r3
 800b836:	371c      	adds	r7, #28
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b856:	d204      	bcs.n	800b862 <dir_sdi+0x22>
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	f003 031f 	and.w	r3, r3, #31
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b862:	2302      	movs	r3, #2
 800b864:	e063      	b.n	800b92e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	683a      	ldr	r2, [r7, #0]
 800b86a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d106      	bne.n	800b886 <dir_sdi+0x46>
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	d902      	bls.n	800b886 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b884:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d10c      	bne.n	800b8a6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	095b      	lsrs	r3, r3, #5
 800b890:	693a      	ldr	r2, [r7, #16]
 800b892:	8912      	ldrh	r2, [r2, #8]
 800b894:	4293      	cmp	r3, r2
 800b896:	d301      	bcc.n	800b89c <dir_sdi+0x5c>
 800b898:	2302      	movs	r3, #2
 800b89a:	e048      	b.n	800b92e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	61da      	str	r2, [r3, #28]
 800b8a4:	e029      	b.n	800b8fa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	895b      	ldrh	r3, [r3, #10]
 800b8aa:	025b      	lsls	r3, r3, #9
 800b8ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b8ae:	e019      	b.n	800b8e4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6979      	ldr	r1, [r7, #20]
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7ff fcfe 	bl	800b2b6 <get_fat>
 800b8ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c2:	d101      	bne.n	800b8c8 <dir_sdi+0x88>
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e032      	b.n	800b92e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d904      	bls.n	800b8d8 <dir_sdi+0x98>
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	699b      	ldr	r3, [r3, #24]
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d301      	bcc.n	800b8dc <dir_sdi+0x9c>
 800b8d8:	2302      	movs	r3, #2
 800b8da:	e028      	b.n	800b92e <dir_sdi+0xee>
			ofs -= csz;
 800b8dc:	683a      	ldr	r2, [r7, #0]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b8e4:	683a      	ldr	r2, [r7, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d2e1      	bcs.n	800b8b0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b8ec:	6979      	ldr	r1, [r7, #20]
 800b8ee:	6938      	ldr	r0, [r7, #16]
 800b8f0:	f7ff fcc2 	bl	800b278 <clust2sect>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	69db      	ldr	r3, [r3, #28]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d101      	bne.n	800b90c <dir_sdi+0xcc>
 800b908:	2302      	movs	r3, #2
 800b90a:	e010      	b.n	800b92e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	69da      	ldr	r2, [r3, #28]
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	0a5b      	lsrs	r3, r3, #9
 800b914:	441a      	add	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b926:	441a      	add	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b92c:	2300      	movs	r3, #0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3718      	adds	r7, #24
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b086      	sub	sp, #24
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
 800b93e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	3320      	adds	r3, #32
 800b94c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	69db      	ldr	r3, [r3, #28]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d003      	beq.n	800b95e <dir_next+0x28>
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b95c:	d301      	bcc.n	800b962 <dir_next+0x2c>
 800b95e:	2304      	movs	r3, #4
 800b960:	e0aa      	b.n	800bab8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f040 8098 	bne.w	800ba9e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	69db      	ldr	r3, [r3, #28]
 800b972:	1c5a      	adds	r2, r3, #1
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	699b      	ldr	r3, [r3, #24]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d10b      	bne.n	800b998 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	095b      	lsrs	r3, r3, #5
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	8912      	ldrh	r2, [r2, #8]
 800b988:	4293      	cmp	r3, r2
 800b98a:	f0c0 8088 	bcc.w	800ba9e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2200      	movs	r2, #0
 800b992:	61da      	str	r2, [r3, #28]
 800b994:	2304      	movs	r3, #4
 800b996:	e08f      	b.n	800bab8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	0a5b      	lsrs	r3, r3, #9
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	8952      	ldrh	r2, [r2, #10]
 800b9a0:	3a01      	subs	r2, #1
 800b9a2:	4013      	ands	r3, r2
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d17a      	bne.n	800ba9e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	699b      	ldr	r3, [r3, #24]
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	f7ff fc80 	bl	800b2b6 <get_fat>
 800b9b6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d801      	bhi.n	800b9c2 <dir_next+0x8c>
 800b9be:	2302      	movs	r3, #2
 800b9c0:	e07a      	b.n	800bab8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c8:	d101      	bne.n	800b9ce <dir_next+0x98>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e074      	b.n	800bab8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	697a      	ldr	r2, [r7, #20]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d358      	bcc.n	800ba8a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d104      	bne.n	800b9e8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	61da      	str	r2, [r3, #28]
 800b9e4:	2304      	movs	r3, #4
 800b9e6:	e067      	b.n	800bab8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	699b      	ldr	r3, [r3, #24]
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	4610      	mov	r0, r2
 800b9f2:	f7ff fe59 	bl	800b6a8 <create_chain>
 800b9f6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d101      	bne.n	800ba02 <dir_next+0xcc>
 800b9fe:	2307      	movs	r3, #7
 800ba00:	e05a      	b.n	800bab8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d101      	bne.n	800ba0c <dir_next+0xd6>
 800ba08:	2302      	movs	r3, #2
 800ba0a:	e055      	b.n	800bab8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba12:	d101      	bne.n	800ba18 <dir_next+0xe2>
 800ba14:	2301      	movs	r3, #1
 800ba16:	e04f      	b.n	800bab8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f7ff fb4d 	bl	800b0b8 <sync_window>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d001      	beq.n	800ba28 <dir_next+0xf2>
 800ba24:	2301      	movs	r3, #1
 800ba26:	e047      	b.n	800bab8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	3334      	adds	r3, #52	; 0x34
 800ba2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba30:	2100      	movs	r1, #0
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7ff f977 	bl	800ad26 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ba38:	2300      	movs	r3, #0
 800ba3a:	613b      	str	r3, [r7, #16]
 800ba3c:	6979      	ldr	r1, [r7, #20]
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f7ff fc1a 	bl	800b278 <clust2sect>
 800ba44:	4602      	mov	r2, r0
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	631a      	str	r2, [r3, #48]	; 0x30
 800ba4a:	e012      	b.n	800ba72 <dir_next+0x13c>
						fs->wflag = 1;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f7ff fb30 	bl	800b0b8 <sync_window>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d001      	beq.n	800ba62 <dir_next+0x12c>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e02a      	b.n	800bab8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	3301      	adds	r3, #1
 800ba66:	613b      	str	r3, [r7, #16]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6c:	1c5a      	adds	r2, r3, #1
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	631a      	str	r2, [r3, #48]	; 0x30
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	895b      	ldrh	r3, [r3, #10]
 800ba76:	461a      	mov	r2, r3
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d3e6      	bcc.n	800ba4c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	1ad2      	subs	r2, r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	697a      	ldr	r2, [r7, #20]
 800ba8e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ba90:	6979      	ldr	r1, [r7, #20]
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	f7ff fbf0 	bl	800b278 <clust2sect>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	68ba      	ldr	r2, [r7, #8]
 800baa2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bab0:	441a      	add	r2, r3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bab6:	2300      	movs	r3, #0
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3718      	adds	r7, #24
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bad0:	2100      	movs	r1, #0
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7ff feb4 	bl	800b840 <dir_sdi>
 800bad8:	4603      	mov	r3, r0
 800bada:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800badc:	7dfb      	ldrb	r3, [r7, #23]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d12b      	bne.n	800bb3a <dir_alloc+0x7a>
		n = 0;
 800bae2:	2300      	movs	r3, #0
 800bae4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	69db      	ldr	r3, [r3, #28]
 800baea:	4619      	mov	r1, r3
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	f7ff fb27 	bl	800b140 <move_window>
 800baf2:	4603      	mov	r3, r0
 800baf4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800baf6:	7dfb      	ldrb	r3, [r7, #23]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d11d      	bne.n	800bb38 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a1b      	ldr	r3, [r3, #32]
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	2be5      	cmp	r3, #229	; 0xe5
 800bb04:	d004      	beq.n	800bb10 <dir_alloc+0x50>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a1b      	ldr	r3, [r3, #32]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d107      	bne.n	800bb20 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	3301      	adds	r3, #1
 800bb14:	613b      	str	r3, [r7, #16]
 800bb16:	693a      	ldr	r2, [r7, #16]
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d102      	bne.n	800bb24 <dir_alloc+0x64>
 800bb1e:	e00c      	b.n	800bb3a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bb20:	2300      	movs	r3, #0
 800bb22:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bb24:	2101      	movs	r1, #1
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7ff ff05 	bl	800b936 <dir_next>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bb30:	7dfb      	ldrb	r3, [r7, #23]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d0d7      	beq.n	800bae6 <dir_alloc+0x26>
 800bb36:	e000      	b.n	800bb3a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bb38:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bb3a:	7dfb      	ldrb	r3, [r7, #23]
 800bb3c:	2b04      	cmp	r3, #4
 800bb3e:	d101      	bne.n	800bb44 <dir_alloc+0x84>
 800bb40:	2307      	movs	r3, #7
 800bb42:	75fb      	strb	r3, [r7, #23]
	return res;
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b084      	sub	sp, #16
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
 800bb56:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	331a      	adds	r3, #26
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7ff f83f 	bl	800abe0 <ld_word>
 800bb62:	4603      	mov	r3, r0
 800bb64:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	2b03      	cmp	r3, #3
 800bb6c:	d109      	bne.n	800bb82 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	3314      	adds	r3, #20
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7ff f834 	bl	800abe0 <ld_word>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	041b      	lsls	r3, r3, #16
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bb82:	68fb      	ldr	r3, [r7, #12]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	331a      	adds	r3, #26
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	b292      	uxth	r2, r2
 800bba0:	4611      	mov	r1, r2
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7ff f857 	bl	800ac56 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	2b03      	cmp	r3, #3
 800bbae:	d109      	bne.n	800bbc4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	f103 0214 	add.w	r2, r3, #20
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	0c1b      	lsrs	r3, r3, #16
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	4610      	mov	r0, r2
 800bbc0:	f7ff f849 	bl	800ac56 <st_word>
	}
}
 800bbc4:	bf00      	nop
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bbcc:	b590      	push	{r4, r7, lr}
 800bbce:	b087      	sub	sp, #28
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	331a      	adds	r3, #26
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7ff f800 	bl	800abe0 <ld_word>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d001      	beq.n	800bbea <cmp_lfn+0x1e>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	e059      	b.n	800bc9e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbf2:	1e5a      	subs	r2, r3, #1
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	005b      	lsls	r3, r3, #1
 800bbf8:	4413      	add	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	4413      	add	r3, r2
 800bbfe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bc00:	2301      	movs	r3, #1
 800bc02:	81fb      	strh	r3, [r7, #14]
 800bc04:	2300      	movs	r3, #0
 800bc06:	613b      	str	r3, [r7, #16]
 800bc08:	e033      	b.n	800bc72 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bc0a:	4a27      	ldr	r2, [pc, #156]	; (800bca8 <cmp_lfn+0xdc>)
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	4413      	add	r3, r2
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	461a      	mov	r2, r3
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	4413      	add	r3, r2
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7fe ffe1 	bl	800abe0 <ld_word>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bc22:	89fb      	ldrh	r3, [r7, #14]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d01a      	beq.n	800bc5e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	2bfe      	cmp	r3, #254	; 0xfe
 800bc2c:	d812      	bhi.n	800bc54 <cmp_lfn+0x88>
 800bc2e:	89bb      	ldrh	r3, [r7, #12]
 800bc30:	4618      	mov	r0, r3
 800bc32:	f002 f867 	bl	800dd04 <ff_wtoupper>
 800bc36:	4603      	mov	r3, r0
 800bc38:	461c      	mov	r4, r3
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	1c5a      	adds	r2, r3, #1
 800bc3e:	617a      	str	r2, [r7, #20]
 800bc40:	005b      	lsls	r3, r3, #1
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	4413      	add	r3, r2
 800bc46:	881b      	ldrh	r3, [r3, #0]
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f002 f85b 	bl	800dd04 <ff_wtoupper>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	429c      	cmp	r4, r3
 800bc52:	d001      	beq.n	800bc58 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bc54:	2300      	movs	r3, #0
 800bc56:	e022      	b.n	800bc9e <cmp_lfn+0xd2>
			}
			wc = uc;
 800bc58:	89bb      	ldrh	r3, [r7, #12]
 800bc5a:	81fb      	strh	r3, [r7, #14]
 800bc5c:	e006      	b.n	800bc6c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bc5e:	89bb      	ldrh	r3, [r7, #12]
 800bc60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d001      	beq.n	800bc6c <cmp_lfn+0xa0>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	e018      	b.n	800bc9e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	613b      	str	r3, [r7, #16]
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	2b0c      	cmp	r3, #12
 800bc76:	d9c8      	bls.n	800bc0a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00b      	beq.n	800bc9c <cmp_lfn+0xd0>
 800bc84:	89fb      	ldrh	r3, [r7, #14]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d008      	beq.n	800bc9c <cmp_lfn+0xd0>
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	005b      	lsls	r3, r3, #1
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	4413      	add	r3, r2
 800bc92:	881b      	ldrh	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d001      	beq.n	800bc9c <cmp_lfn+0xd0>
 800bc98:	2300      	movs	r3, #0
 800bc9a:	e000      	b.n	800bc9e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bc9c:	2301      	movs	r3, #1
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	371c      	adds	r7, #28
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd90      	pop	{r4, r7, pc}
 800bca6:	bf00      	nop
 800bca8:	08012b48 	.word	0x08012b48

0800bcac <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b088      	sub	sp, #32
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	461a      	mov	r2, r3
 800bcba:	460b      	mov	r3, r1
 800bcbc:	71fb      	strb	r3, [r7, #7]
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	330d      	adds	r3, #13
 800bcc6:	79ba      	ldrb	r2, [r7, #6]
 800bcc8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	330b      	adds	r3, #11
 800bcce:	220f      	movs	r2, #15
 800bcd0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	330c      	adds	r3, #12
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	331a      	adds	r3, #26
 800bcde:	2100      	movs	r1, #0
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7fe ffb8 	bl	800ac56 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bce6:	79fb      	ldrb	r3, [r7, #7]
 800bce8:	1e5a      	subs	r2, r3, #1
 800bcea:	4613      	mov	r3, r2
 800bcec:	005b      	lsls	r3, r3, #1
 800bcee:	4413      	add	r3, r2
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	4413      	add	r3, r2
 800bcf4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	82fb      	strh	r3, [r7, #22]
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bcfe:	8afb      	ldrh	r3, [r7, #22]
 800bd00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d007      	beq.n	800bd18 <put_lfn+0x6c>
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	1c5a      	adds	r2, r3, #1
 800bd0c:	61fa      	str	r2, [r7, #28]
 800bd0e:	005b      	lsls	r3, r3, #1
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	4413      	add	r3, r2
 800bd14:	881b      	ldrh	r3, [r3, #0]
 800bd16:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bd18:	4a17      	ldr	r2, [pc, #92]	; (800bd78 <put_lfn+0xcc>)
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	461a      	mov	r2, r3
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	4413      	add	r3, r2
 800bd26:	8afa      	ldrh	r2, [r7, #22]
 800bd28:	4611      	mov	r1, r2
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fe ff93 	bl	800ac56 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bd30:	8afb      	ldrh	r3, [r7, #22]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d102      	bne.n	800bd3c <put_lfn+0x90>
 800bd36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd3a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	61bb      	str	r3, [r7, #24]
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	2b0c      	cmp	r3, #12
 800bd46:	d9da      	bls.n	800bcfe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bd48:	8afb      	ldrh	r3, [r7, #22]
 800bd4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d006      	beq.n	800bd60 <put_lfn+0xb4>
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	005b      	lsls	r3, r3, #1
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	4413      	add	r3, r2
 800bd5a:	881b      	ldrh	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d103      	bne.n	800bd68 <put_lfn+0xbc>
 800bd60:	79fb      	ldrb	r3, [r7, #7]
 800bd62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd66:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	79fa      	ldrb	r2, [r7, #7]
 800bd6c:	701a      	strb	r2, [r3, #0]
}
 800bd6e:	bf00      	nop
 800bd70:	3720      	adds	r7, #32
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	08012b48 	.word	0x08012b48

0800bd7c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b08c      	sub	sp, #48	; 0x30
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
 800bd88:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bd8a:	220b      	movs	r2, #11
 800bd8c:	68b9      	ldr	r1, [r7, #8]
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	f7fe ffa8 	bl	800ace4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	2b05      	cmp	r3, #5
 800bd98:	d92b      	bls.n	800bdf2 <gen_numname+0x76>
		sr = seq;
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bd9e:	e022      	b.n	800bde6 <gen_numname+0x6a>
			wc = *lfn++;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	1c9a      	adds	r2, r3, #2
 800bda4:	607a      	str	r2, [r7, #4]
 800bda6:	881b      	ldrh	r3, [r3, #0]
 800bda8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bdaa:	2300      	movs	r3, #0
 800bdac:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdae:	e017      	b.n	800bde0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	005a      	lsls	r2, r3, #1
 800bdb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdb6:	f003 0301 	and.w	r3, r3, #1
 800bdba:	4413      	add	r3, r2
 800bdbc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bdbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdc0:	085b      	lsrs	r3, r3, #1
 800bdc2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d005      	beq.n	800bdda <gen_numname+0x5e>
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bdd4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bdd8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bddc:	3301      	adds	r3, #1
 800bdde:	62bb      	str	r3, [r7, #40]	; 0x28
 800bde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde2:	2b0f      	cmp	r3, #15
 800bde4:	d9e4      	bls.n	800bdb0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	881b      	ldrh	r3, [r3, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d1d8      	bne.n	800bda0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bdf2:	2307      	movs	r3, #7
 800bdf4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	f003 030f 	and.w	r3, r3, #15
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	3330      	adds	r3, #48	; 0x30
 800be02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800be06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be0a:	2b39      	cmp	r3, #57	; 0x39
 800be0c:	d904      	bls.n	800be18 <gen_numname+0x9c>
 800be0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be12:	3307      	adds	r3, #7
 800be14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1a:	1e5a      	subs	r2, r3, #1
 800be1c:	62ba      	str	r2, [r7, #40]	; 0x28
 800be1e:	3330      	adds	r3, #48	; 0x30
 800be20:	443b      	add	r3, r7
 800be22:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800be26:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	091b      	lsrs	r3, r3, #4
 800be2e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d1df      	bne.n	800bdf6 <gen_numname+0x7a>
	ns[i] = '~';
 800be36:	f107 0214 	add.w	r2, r7, #20
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	4413      	add	r3, r2
 800be3e:	227e      	movs	r2, #126	; 0x7e
 800be40:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800be42:	2300      	movs	r3, #0
 800be44:	627b      	str	r3, [r7, #36]	; 0x24
 800be46:	e002      	b.n	800be4e <gen_numname+0xd2>
 800be48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4a:	3301      	adds	r3, #1
 800be4c:	627b      	str	r3, [r7, #36]	; 0x24
 800be4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be52:	429a      	cmp	r2, r3
 800be54:	d205      	bcs.n	800be62 <gen_numname+0xe6>
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5a:	4413      	add	r3, r2
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	2b20      	cmp	r3, #32
 800be60:	d1f2      	bne.n	800be48 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800be62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be64:	2b07      	cmp	r3, #7
 800be66:	d807      	bhi.n	800be78 <gen_numname+0xfc>
 800be68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6a:	1c5a      	adds	r2, r3, #1
 800be6c:	62ba      	str	r2, [r7, #40]	; 0x28
 800be6e:	3330      	adds	r3, #48	; 0x30
 800be70:	443b      	add	r3, r7
 800be72:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800be76:	e000      	b.n	800be7a <gen_numname+0xfe>
 800be78:	2120      	movs	r1, #32
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	1c5a      	adds	r2, r3, #1
 800be7e:	627a      	str	r2, [r7, #36]	; 0x24
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	4413      	add	r3, r2
 800be84:	460a      	mov	r2, r1
 800be86:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800be88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8a:	2b07      	cmp	r3, #7
 800be8c:	d9e9      	bls.n	800be62 <gen_numname+0xe6>
}
 800be8e:	bf00      	nop
 800be90:	bf00      	nop
 800be92:	3730      	adds	r7, #48	; 0x30
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bea4:	230b      	movs	r3, #11
 800bea6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bea8:	7bfb      	ldrb	r3, [r7, #15]
 800beaa:	b2da      	uxtb	r2, r3
 800beac:	0852      	lsrs	r2, r2, #1
 800beae:	01db      	lsls	r3, r3, #7
 800beb0:	4313      	orrs	r3, r2
 800beb2:	b2da      	uxtb	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	1c59      	adds	r1, r3, #1
 800beb8:	6079      	str	r1, [r7, #4]
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	4413      	add	r3, r2
 800bebe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	3b01      	subs	r3, #1
 800bec4:	60bb      	str	r3, [r7, #8]
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1ed      	bne.n	800bea8 <sum_sfn+0x10>
	return sum;
 800becc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3714      	adds	r7, #20
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr

0800beda <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b086      	sub	sp, #24
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bee8:	2100      	movs	r1, #0
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7ff fca8 	bl	800b840 <dir_sdi>
 800bef0:	4603      	mov	r3, r0
 800bef2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bef4:	7dfb      	ldrb	r3, [r7, #23]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d001      	beq.n	800befe <dir_find+0x24>
 800befa:	7dfb      	ldrb	r3, [r7, #23]
 800befc:	e0a9      	b.n	800c052 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800befe:	23ff      	movs	r3, #255	; 0xff
 800bf00:	753b      	strb	r3, [r7, #20]
 800bf02:	7d3b      	ldrb	r3, [r7, #20]
 800bf04:	757b      	strb	r3, [r7, #21]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f04f 32ff 	mov.w	r2, #4294967295
 800bf0c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	69db      	ldr	r3, [r3, #28]
 800bf12:	4619      	mov	r1, r3
 800bf14:	6938      	ldr	r0, [r7, #16]
 800bf16:	f7ff f913 	bl	800b140 <move_window>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bf1e:	7dfb      	ldrb	r3, [r7, #23]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f040 8090 	bne.w	800c046 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a1b      	ldr	r3, [r3, #32]
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bf2e:	7dbb      	ldrb	r3, [r7, #22]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d102      	bne.n	800bf3a <dir_find+0x60>
 800bf34:	2304      	movs	r3, #4
 800bf36:	75fb      	strb	r3, [r7, #23]
 800bf38:	e08a      	b.n	800c050 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a1b      	ldr	r3, [r3, #32]
 800bf3e:	330b      	adds	r3, #11
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf46:	73fb      	strb	r3, [r7, #15]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	7bfa      	ldrb	r2, [r7, #15]
 800bf4c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bf4e:	7dbb      	ldrb	r3, [r7, #22]
 800bf50:	2be5      	cmp	r3, #229	; 0xe5
 800bf52:	d007      	beq.n	800bf64 <dir_find+0x8a>
 800bf54:	7bfb      	ldrb	r3, [r7, #15]
 800bf56:	f003 0308 	and.w	r3, r3, #8
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d009      	beq.n	800bf72 <dir_find+0x98>
 800bf5e:	7bfb      	ldrb	r3, [r7, #15]
 800bf60:	2b0f      	cmp	r3, #15
 800bf62:	d006      	beq.n	800bf72 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bf64:	23ff      	movs	r3, #255	; 0xff
 800bf66:	757b      	strb	r3, [r7, #21]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf6e:	631a      	str	r2, [r3, #48]	; 0x30
 800bf70:	e05e      	b.n	800c030 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bf72:	7bfb      	ldrb	r3, [r7, #15]
 800bf74:	2b0f      	cmp	r3, #15
 800bf76:	d136      	bne.n	800bfe6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bf7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d154      	bne.n	800c030 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bf86:	7dbb      	ldrb	r3, [r7, #22]
 800bf88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00d      	beq.n	800bfac <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a1b      	ldr	r3, [r3, #32]
 800bf94:	7b5b      	ldrb	r3, [r3, #13]
 800bf96:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bf98:	7dbb      	ldrb	r3, [r7, #22]
 800bf9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf9e:	75bb      	strb	r3, [r7, #22]
 800bfa0:	7dbb      	ldrb	r3, [r7, #22]
 800bfa2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	695a      	ldr	r2, [r3, #20]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bfac:	7dba      	ldrb	r2, [r7, #22]
 800bfae:	7d7b      	ldrb	r3, [r7, #21]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d115      	bne.n	800bfe0 <dir_find+0x106>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6a1b      	ldr	r3, [r3, #32]
 800bfb8:	330d      	adds	r3, #13
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	7d3a      	ldrb	r2, [r7, #20]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d10e      	bne.n	800bfe0 <dir_find+0x106>
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	68da      	ldr	r2, [r3, #12]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6a1b      	ldr	r3, [r3, #32]
 800bfca:	4619      	mov	r1, r3
 800bfcc:	4610      	mov	r0, r2
 800bfce:	f7ff fdfd 	bl	800bbcc <cmp_lfn>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d003      	beq.n	800bfe0 <dir_find+0x106>
 800bfd8:	7d7b      	ldrb	r3, [r7, #21]
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	e000      	b.n	800bfe2 <dir_find+0x108>
 800bfe0:	23ff      	movs	r3, #255	; 0xff
 800bfe2:	757b      	strb	r3, [r7, #21]
 800bfe4:	e024      	b.n	800c030 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bfe6:	7d7b      	ldrb	r3, [r7, #21]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d109      	bne.n	800c000 <dir_find+0x126>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6a1b      	ldr	r3, [r3, #32]
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7ff ff51 	bl	800be98 <sum_sfn>
 800bff6:	4603      	mov	r3, r0
 800bff8:	461a      	mov	r2, r3
 800bffa:	7d3b      	ldrb	r3, [r7, #20]
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d024      	beq.n	800c04a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c006:	f003 0301 	and.w	r3, r3, #1
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10a      	bne.n	800c024 <dir_find+0x14a>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a18      	ldr	r0, [r3, #32]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	3324      	adds	r3, #36	; 0x24
 800c016:	220b      	movs	r2, #11
 800c018:	4619      	mov	r1, r3
 800c01a:	f7fe fe9f 	bl	800ad5c <mem_cmp>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d014      	beq.n	800c04e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c024:	23ff      	movs	r3, #255	; 0xff
 800c026:	757b      	strb	r3, [r7, #21]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f04f 32ff 	mov.w	r2, #4294967295
 800c02e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c030:	2100      	movs	r1, #0
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f7ff fc7f 	bl	800b936 <dir_next>
 800c038:	4603      	mov	r3, r0
 800c03a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c03c:	7dfb      	ldrb	r3, [r7, #23]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f43f af65 	beq.w	800bf0e <dir_find+0x34>
 800c044:	e004      	b.n	800c050 <dir_find+0x176>
		if (res != FR_OK) break;
 800c046:	bf00      	nop
 800c048:	e002      	b.n	800c050 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c04a:	bf00      	nop
 800c04c:	e000      	b.n	800c050 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c04e:	bf00      	nop

	return res;
 800c050:	7dfb      	ldrb	r3, [r7, #23]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3718      	adds	r7, #24
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
	...

0800c05c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b08c      	sub	sp, #48	; 0x30
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c070:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d001      	beq.n	800c07c <dir_register+0x20>
 800c078:	2306      	movs	r3, #6
 800c07a:	e0e0      	b.n	800c23e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c07c:	2300      	movs	r3, #0
 800c07e:	627b      	str	r3, [r7, #36]	; 0x24
 800c080:	e002      	b.n	800c088 <dir_register+0x2c>
 800c082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c084:	3301      	adds	r3, #1
 800c086:	627b      	str	r3, [r7, #36]	; 0x24
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	68da      	ldr	r2, [r3, #12]
 800c08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08e:	005b      	lsls	r3, r3, #1
 800c090:	4413      	add	r3, r2
 800c092:	881b      	ldrh	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1f4      	bne.n	800c082 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c09e:	f107 030c 	add.w	r3, r7, #12
 800c0a2:	220c      	movs	r2, #12
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fe fe1d 	bl	800ace4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c0aa:	7dfb      	ldrb	r3, [r7, #23]
 800c0ac:	f003 0301 	and.w	r3, r3, #1
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d032      	beq.n	800c11a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2240      	movs	r2, #64	; 0x40
 800c0b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c0bc:	2301      	movs	r3, #1
 800c0be:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0c0:	e016      	b.n	800c0f0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	68da      	ldr	r2, [r3, #12]
 800c0cc:	f107 010c 	add.w	r1, r7, #12
 800c0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d2:	f7ff fe53 	bl	800bd7c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7ff feff 	bl	800beda <dir_find>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c0e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d106      	bne.n	800c0f8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f2:	2b63      	cmp	r3, #99	; 0x63
 800c0f4:	d9e5      	bls.n	800c0c2 <dir_register+0x66>
 800c0f6:	e000      	b.n	800c0fa <dir_register+0x9e>
			if (res != FR_OK) break;
 800c0f8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fc:	2b64      	cmp	r3, #100	; 0x64
 800c0fe:	d101      	bne.n	800c104 <dir_register+0xa8>
 800c100:	2307      	movs	r3, #7
 800c102:	e09c      	b.n	800c23e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c104:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c108:	2b04      	cmp	r3, #4
 800c10a:	d002      	beq.n	800c112 <dir_register+0xb6>
 800c10c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c110:	e095      	b.n	800c23e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c112:	7dfa      	ldrb	r2, [r7, #23]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c11a:	7dfb      	ldrb	r3, [r7, #23]
 800c11c:	f003 0302 	and.w	r3, r3, #2
 800c120:	2b00      	cmp	r3, #0
 800c122:	d007      	beq.n	800c134 <dir_register+0xd8>
 800c124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c126:	330c      	adds	r3, #12
 800c128:	4a47      	ldr	r2, [pc, #284]	; (800c248 <dir_register+0x1ec>)
 800c12a:	fba2 2303 	umull	r2, r3, r2, r3
 800c12e:	089b      	lsrs	r3, r3, #2
 800c130:	3301      	adds	r3, #1
 800c132:	e000      	b.n	800c136 <dir_register+0xda>
 800c134:	2301      	movs	r3, #1
 800c136:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c138:	6a39      	ldr	r1, [r7, #32]
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f7ff fcc0 	bl	800bac0 <dir_alloc>
 800c140:	4603      	mov	r3, r0
 800c142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d148      	bne.n	800c1e0 <dir_register+0x184>
 800c14e:	6a3b      	ldr	r3, [r7, #32]
 800c150:	3b01      	subs	r3, #1
 800c152:	623b      	str	r3, [r7, #32]
 800c154:	6a3b      	ldr	r3, [r7, #32]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d042      	beq.n	800c1e0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	695a      	ldr	r2, [r3, #20]
 800c15e:	6a3b      	ldr	r3, [r7, #32]
 800c160:	015b      	lsls	r3, r3, #5
 800c162:	1ad3      	subs	r3, r2, r3
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f7ff fb6a 	bl	800b840 <dir_sdi>
 800c16c:	4603      	mov	r3, r0
 800c16e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c172:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c176:	2b00      	cmp	r3, #0
 800c178:	d132      	bne.n	800c1e0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	3324      	adds	r3, #36	; 0x24
 800c17e:	4618      	mov	r0, r3
 800c180:	f7ff fe8a 	bl	800be98 <sum_sfn>
 800c184:	4603      	mov	r3, r0
 800c186:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	69db      	ldr	r3, [r3, #28]
 800c18c:	4619      	mov	r1, r3
 800c18e:	69f8      	ldr	r0, [r7, #28]
 800c190:	f7fe ffd6 	bl	800b140 <move_window>
 800c194:	4603      	mov	r3, r0
 800c196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c19a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d11d      	bne.n	800c1de <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	68d8      	ldr	r0, [r3, #12]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6a19      	ldr	r1, [r3, #32]
 800c1aa:	6a3b      	ldr	r3, [r7, #32]
 800c1ac:	b2da      	uxtb	r2, r3
 800c1ae:	7efb      	ldrb	r3, [r7, #27]
 800c1b0:	f7ff fd7c 	bl	800bcac <put_lfn>
				fs->wflag = 1;
 800c1b4:	69fb      	ldr	r3, [r7, #28]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f7ff fbba 	bl	800b936 <dir_next>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c1c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d107      	bne.n	800c1e0 <dir_register+0x184>
 800c1d0:	6a3b      	ldr	r3, [r7, #32]
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	623b      	str	r3, [r7, #32]
 800c1d6:	6a3b      	ldr	r3, [r7, #32]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d1d5      	bne.n	800c188 <dir_register+0x12c>
 800c1dc:	e000      	b.n	800c1e0 <dir_register+0x184>
				if (res != FR_OK) break;
 800c1de:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c1e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d128      	bne.n	800c23a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	69db      	ldr	r3, [r3, #28]
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	69f8      	ldr	r0, [r7, #28]
 800c1f0:	f7fe ffa6 	bl	800b140 <move_window>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c1fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d11b      	bne.n	800c23a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	2220      	movs	r2, #32
 800c208:	2100      	movs	r1, #0
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fe fd8b 	bl	800ad26 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6a18      	ldr	r0, [r3, #32]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	3324      	adds	r3, #36	; 0x24
 800c218:	220b      	movs	r2, #11
 800c21a:	4619      	mov	r1, r3
 800c21c:	f7fe fd62 	bl	800ace4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6a1b      	ldr	r3, [r3, #32]
 800c22a:	330c      	adds	r3, #12
 800c22c:	f002 0218 	and.w	r2, r2, #24
 800c230:	b2d2      	uxtb	r2, r2
 800c232:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	2201      	movs	r2, #1
 800c238:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c23a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3730      	adds	r7, #48	; 0x30
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	4ec4ec4f 	.word	0x4ec4ec4f

0800c24c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b08a      	sub	sp, #40	; 0x28
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	613b      	str	r3, [r7, #16]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	60fb      	str	r3, [r7, #12]
 800c264:	2300      	movs	r3, #0
 800c266:	617b      	str	r3, [r7, #20]
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	1c5a      	adds	r2, r3, #1
 800c270:	61ba      	str	r2, [r7, #24]
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	4413      	add	r3, r2
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c27a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c27c:	2b1f      	cmp	r3, #31
 800c27e:	d940      	bls.n	800c302 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c280:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c282:	2b2f      	cmp	r3, #47	; 0x2f
 800c284:	d006      	beq.n	800c294 <create_name+0x48>
 800c286:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c288:	2b5c      	cmp	r3, #92	; 0x5c
 800c28a:	d110      	bne.n	800c2ae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c28c:	e002      	b.n	800c294 <create_name+0x48>
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	3301      	adds	r3, #1
 800c292:	61bb      	str	r3, [r7, #24]
 800c294:	693a      	ldr	r2, [r7, #16]
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	4413      	add	r3, r2
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	2b2f      	cmp	r3, #47	; 0x2f
 800c29e:	d0f6      	beq.n	800c28e <create_name+0x42>
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	2b5c      	cmp	r3, #92	; 0x5c
 800c2aa:	d0f0      	beq.n	800c28e <create_name+0x42>
			break;
 800c2ac:	e02a      	b.n	800c304 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	2bfe      	cmp	r3, #254	; 0xfe
 800c2b2:	d901      	bls.n	800c2b8 <create_name+0x6c>
 800c2b4:	2306      	movs	r3, #6
 800c2b6:	e17d      	b.n	800c5b4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c2b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c2be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2c0:	2101      	movs	r1, #1
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f001 fce2 	bl	800dc8c <ff_convert>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c2cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d101      	bne.n	800c2d6 <create_name+0x8a>
 800c2d2:	2306      	movs	r3, #6
 800c2d4:	e16e      	b.n	800c5b4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c2d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2d8:	2b7f      	cmp	r3, #127	; 0x7f
 800c2da:	d809      	bhi.n	800c2f0 <create_name+0xa4>
 800c2dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2de:	4619      	mov	r1, r3
 800c2e0:	488d      	ldr	r0, [pc, #564]	; (800c518 <create_name+0x2cc>)
 800c2e2:	f7fe fd62 	bl	800adaa <chk_chr>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d001      	beq.n	800c2f0 <create_name+0xa4>
 800c2ec:	2306      	movs	r3, #6
 800c2ee:	e161      	b.n	800c5b4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	1c5a      	adds	r2, r3, #1
 800c2f4:	617a      	str	r2, [r7, #20]
 800c2f6:	005b      	lsls	r3, r3, #1
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c2fe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c300:	e7b4      	b.n	800c26c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c302:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c304:	693a      	ldr	r2, [r7, #16]
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	441a      	add	r2, r3
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c30e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c310:	2b1f      	cmp	r3, #31
 800c312:	d801      	bhi.n	800c318 <create_name+0xcc>
 800c314:	2304      	movs	r3, #4
 800c316:	e000      	b.n	800c31a <create_name+0xce>
 800c318:	2300      	movs	r3, #0
 800c31a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c31e:	e011      	b.n	800c344 <create_name+0xf8>
		w = lfn[di - 1];
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c326:	3b01      	subs	r3, #1
 800c328:	005b      	lsls	r3, r3, #1
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	4413      	add	r3, r2
 800c32e:	881b      	ldrh	r3, [r3, #0]
 800c330:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c334:	2b20      	cmp	r3, #32
 800c336:	d002      	beq.n	800c33e <create_name+0xf2>
 800c338:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c33a:	2b2e      	cmp	r3, #46	; 0x2e
 800c33c:	d106      	bne.n	800c34c <create_name+0x100>
		di--;
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	3b01      	subs	r3, #1
 800c342:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1ea      	bne.n	800c320 <create_name+0xd4>
 800c34a:	e000      	b.n	800c34e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c34c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	005b      	lsls	r3, r3, #1
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	4413      	add	r3, r2
 800c356:	2200      	movs	r2, #0
 800c358:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d101      	bne.n	800c364 <create_name+0x118>
 800c360:	2306      	movs	r3, #6
 800c362:	e127      	b.n	800c5b4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	3324      	adds	r3, #36	; 0x24
 800c368:	220b      	movs	r2, #11
 800c36a:	2120      	movs	r1, #32
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7fe fcda 	bl	800ad26 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c372:	2300      	movs	r3, #0
 800c374:	61bb      	str	r3, [r7, #24]
 800c376:	e002      	b.n	800c37e <create_name+0x132>
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	3301      	adds	r3, #1
 800c37c:	61bb      	str	r3, [r7, #24]
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	005b      	lsls	r3, r3, #1
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	4413      	add	r3, r2
 800c386:	881b      	ldrh	r3, [r3, #0]
 800c388:	2b20      	cmp	r3, #32
 800c38a:	d0f5      	beq.n	800c378 <create_name+0x12c>
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	005b      	lsls	r3, r3, #1
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	4413      	add	r3, r2
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	2b2e      	cmp	r3, #46	; 0x2e
 800c398:	d0ee      	beq.n	800c378 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d009      	beq.n	800c3b4 <create_name+0x168>
 800c3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3a4:	f043 0303 	orr.w	r3, r3, #3
 800c3a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c3ac:	e002      	b.n	800c3b4 <create_name+0x168>
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	617b      	str	r3, [r7, #20]
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d009      	beq.n	800c3ce <create_name+0x182>
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	2b2e      	cmp	r3, #46	; 0x2e
 800c3cc:	d1ef      	bne.n	800c3ae <create_name+0x162>

	i = b = 0; ni = 8;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	623b      	str	r3, [r7, #32]
 800c3d8:	2308      	movs	r3, #8
 800c3da:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	1c5a      	adds	r2, r3, #1
 800c3e0:	61ba      	str	r2, [r7, #24]
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c3ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f000 8090 	beq.w	800c514 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c3f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3f6:	2b20      	cmp	r3, #32
 800c3f8:	d006      	beq.n	800c408 <create_name+0x1bc>
 800c3fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3fc:	2b2e      	cmp	r3, #46	; 0x2e
 800c3fe:	d10a      	bne.n	800c416 <create_name+0x1ca>
 800c400:	69ba      	ldr	r2, [r7, #24]
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	429a      	cmp	r2, r3
 800c406:	d006      	beq.n	800c416 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c40c:	f043 0303 	orr.w	r3, r3, #3
 800c410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c414:	e07d      	b.n	800c512 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c416:	6a3a      	ldr	r2, [r7, #32]
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d203      	bcs.n	800c426 <create_name+0x1da>
 800c41e:	69ba      	ldr	r2, [r7, #24]
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	429a      	cmp	r2, r3
 800c424:	d123      	bne.n	800c46e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	2b0b      	cmp	r3, #11
 800c42a:	d106      	bne.n	800c43a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c42c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c430:	f043 0303 	orr.w	r3, r3, #3
 800c434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c438:	e075      	b.n	800c526 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c43a:	69ba      	ldr	r2, [r7, #24]
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d005      	beq.n	800c44e <create_name+0x202>
 800c442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c446:	f043 0303 	orr.w	r3, r3, #3
 800c44a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c44e:	69ba      	ldr	r2, [r7, #24]
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	429a      	cmp	r2, r3
 800c454:	d866      	bhi.n	800c524 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	61bb      	str	r3, [r7, #24]
 800c45a:	2308      	movs	r3, #8
 800c45c:	623b      	str	r3, [r7, #32]
 800c45e:	230b      	movs	r3, #11
 800c460:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c462:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c46c:	e051      	b.n	800c512 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c46e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c470:	2b7f      	cmp	r3, #127	; 0x7f
 800c472:	d914      	bls.n	800c49e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c476:	2100      	movs	r1, #0
 800c478:	4618      	mov	r0, r3
 800c47a:	f001 fc07 	bl	800dc8c <ff_convert>
 800c47e:	4603      	mov	r3, r0
 800c480:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c482:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c484:	2b00      	cmp	r3, #0
 800c486:	d004      	beq.n	800c492 <create_name+0x246>
 800c488:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c48a:	3b80      	subs	r3, #128	; 0x80
 800c48c:	4a23      	ldr	r2, [pc, #140]	; (800c51c <create_name+0x2d0>)
 800c48e:	5cd3      	ldrb	r3, [r2, r3]
 800c490:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c496:	f043 0302 	orr.w	r3, r3, #2
 800c49a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c49e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d007      	beq.n	800c4b4 <create_name+0x268>
 800c4a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	481d      	ldr	r0, [pc, #116]	; (800c520 <create_name+0x2d4>)
 800c4aa:	f7fe fc7e 	bl	800adaa <chk_chr>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d008      	beq.n	800c4c6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c4b4:	235f      	movs	r3, #95	; 0x5f
 800c4b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c4b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4bc:	f043 0303 	orr.w	r3, r3, #3
 800c4c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4c4:	e01b      	b.n	800c4fe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c4c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4c8:	2b40      	cmp	r3, #64	; 0x40
 800c4ca:	d909      	bls.n	800c4e0 <create_name+0x294>
 800c4cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4ce:	2b5a      	cmp	r3, #90	; 0x5a
 800c4d0:	d806      	bhi.n	800c4e0 <create_name+0x294>
					b |= 2;
 800c4d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4d6:	f043 0302 	orr.w	r3, r3, #2
 800c4da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c4de:	e00e      	b.n	800c4fe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c4e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4e2:	2b60      	cmp	r3, #96	; 0x60
 800c4e4:	d90b      	bls.n	800c4fe <create_name+0x2b2>
 800c4e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4e8:	2b7a      	cmp	r3, #122	; 0x7a
 800c4ea:	d808      	bhi.n	800c4fe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c4ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4f0:	f043 0301 	orr.w	r3, r3, #1
 800c4f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c4f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4fa:	3b20      	subs	r3, #32
 800c4fc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c4fe:	6a3b      	ldr	r3, [r7, #32]
 800c500:	1c5a      	adds	r2, r3, #1
 800c502:	623a      	str	r2, [r7, #32]
 800c504:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c506:	b2d1      	uxtb	r1, r2
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	4413      	add	r3, r2
 800c50c:	460a      	mov	r2, r1
 800c50e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c512:	e763      	b.n	800c3dc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c514:	bf00      	nop
 800c516:	e006      	b.n	800c526 <create_name+0x2da>
 800c518:	08012a60 	.word	0x08012a60
 800c51c:	08012ac8 	.word	0x08012ac8
 800c520:	08012a6c 	.word	0x08012a6c
			if (si > di) break;			/* No extension */
 800c524:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c52c:	2be5      	cmp	r3, #229	; 0xe5
 800c52e:	d103      	bne.n	800c538 <create_name+0x2ec>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2205      	movs	r2, #5
 800c534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	2b08      	cmp	r3, #8
 800c53c:	d104      	bne.n	800c548 <create_name+0x2fc>
 800c53e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c548:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c54c:	f003 030c 	and.w	r3, r3, #12
 800c550:	2b0c      	cmp	r3, #12
 800c552:	d005      	beq.n	800c560 <create_name+0x314>
 800c554:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c558:	f003 0303 	and.w	r3, r3, #3
 800c55c:	2b03      	cmp	r3, #3
 800c55e:	d105      	bne.n	800c56c <create_name+0x320>
 800c560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c564:	f043 0302 	orr.w	r3, r3, #2
 800c568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c56c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c570:	f003 0302 	and.w	r3, r3, #2
 800c574:	2b00      	cmp	r3, #0
 800c576:	d117      	bne.n	800c5a8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c578:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c57c:	f003 0303 	and.w	r3, r3, #3
 800c580:	2b01      	cmp	r3, #1
 800c582:	d105      	bne.n	800c590 <create_name+0x344>
 800c584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c588:	f043 0310 	orr.w	r3, r3, #16
 800c58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c590:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c594:	f003 030c 	and.w	r3, r3, #12
 800c598:	2b04      	cmp	r3, #4
 800c59a:	d105      	bne.n	800c5a8 <create_name+0x35c>
 800c59c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5a0:	f043 0308 	orr.w	r3, r3, #8
 800c5a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c5ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c5b2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3728      	adds	r7, #40	; 0x28
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b086      	sub	sp, #24
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c5d0:	e002      	b.n	800c5d8 <follow_path+0x1c>
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	603b      	str	r3, [r7, #0]
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	2b2f      	cmp	r3, #47	; 0x2f
 800c5de:	d0f8      	beq.n	800c5d2 <follow_path+0x16>
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	2b5c      	cmp	r3, #92	; 0x5c
 800c5e6:	d0f4      	beq.n	800c5d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	2b1f      	cmp	r3, #31
 800c5f4:	d80a      	bhi.n	800c60c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2280      	movs	r2, #128	; 0x80
 800c5fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c5fe:	2100      	movs	r1, #0
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f7ff f91d 	bl	800b840 <dir_sdi>
 800c606:	4603      	mov	r3, r0
 800c608:	75fb      	strb	r3, [r7, #23]
 800c60a:	e043      	b.n	800c694 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c60c:	463b      	mov	r3, r7
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7ff fe1b 	bl	800c24c <create_name>
 800c616:	4603      	mov	r3, r0
 800c618:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c61a:	7dfb      	ldrb	r3, [r7, #23]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d134      	bne.n	800c68a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7ff fc5a 	bl	800beda <dir_find>
 800c626:	4603      	mov	r3, r0
 800c628:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c630:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c632:	7dfb      	ldrb	r3, [r7, #23]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d00a      	beq.n	800c64e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c638:	7dfb      	ldrb	r3, [r7, #23]
 800c63a:	2b04      	cmp	r3, #4
 800c63c:	d127      	bne.n	800c68e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c63e:	7afb      	ldrb	r3, [r7, #11]
 800c640:	f003 0304 	and.w	r3, r3, #4
 800c644:	2b00      	cmp	r3, #0
 800c646:	d122      	bne.n	800c68e <follow_path+0xd2>
 800c648:	2305      	movs	r3, #5
 800c64a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c64c:	e01f      	b.n	800c68e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c64e:	7afb      	ldrb	r3, [r7, #11]
 800c650:	f003 0304 	and.w	r3, r3, #4
 800c654:	2b00      	cmp	r3, #0
 800c656:	d11c      	bne.n	800c692 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	799b      	ldrb	r3, [r3, #6]
 800c65c:	f003 0310 	and.w	r3, r3, #16
 800c660:	2b00      	cmp	r3, #0
 800c662:	d102      	bne.n	800c66a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c664:	2305      	movs	r3, #5
 800c666:	75fb      	strb	r3, [r7, #23]
 800c668:	e014      	b.n	800c694 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	695b      	ldr	r3, [r3, #20]
 800c674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c678:	4413      	add	r3, r2
 800c67a:	4619      	mov	r1, r3
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f7ff fa66 	bl	800bb4e <ld_clust>
 800c682:	4602      	mov	r2, r0
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c688:	e7c0      	b.n	800c60c <follow_path+0x50>
			if (res != FR_OK) break;
 800c68a:	bf00      	nop
 800c68c:	e002      	b.n	800c694 <follow_path+0xd8>
				break;
 800c68e:	bf00      	nop
 800c690:	e000      	b.n	800c694 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c692:	bf00      	nop
			}
		}
	}

	return res;
 800c694:	7dfb      	ldrb	r3, [r7, #23]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3718      	adds	r7, #24
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c69e:	b480      	push	{r7}
 800c6a0:	b087      	sub	sp, #28
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6aa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d031      	beq.n	800c718 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	617b      	str	r3, [r7, #20]
 800c6ba:	e002      	b.n	800c6c2 <get_ldnumber+0x24>
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	3301      	adds	r3, #1
 800c6c0:	617b      	str	r3, [r7, #20]
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	2b1f      	cmp	r3, #31
 800c6c8:	d903      	bls.n	800c6d2 <get_ldnumber+0x34>
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	2b3a      	cmp	r3, #58	; 0x3a
 800c6d0:	d1f4      	bne.n	800c6bc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	2b3a      	cmp	r3, #58	; 0x3a
 800c6d8:	d11c      	bne.n	800c714 <get_ldnumber+0x76>
			tp = *path;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	1c5a      	adds	r2, r3, #1
 800c6e4:	60fa      	str	r2, [r7, #12]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	3b30      	subs	r3, #48	; 0x30
 800c6ea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	2b09      	cmp	r3, #9
 800c6f0:	d80e      	bhi.n	800c710 <get_ldnumber+0x72>
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d10a      	bne.n	800c710 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d107      	bne.n	800c710 <get_ldnumber+0x72>
					vol = (int)i;
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	3301      	adds	r3, #1
 800c708:	617b      	str	r3, [r7, #20]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	697a      	ldr	r2, [r7, #20]
 800c70e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	e002      	b.n	800c71a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c714:	2300      	movs	r3, #0
 800c716:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c718:	693b      	ldr	r3, [r7, #16]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	371c      	adds	r7, #28
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr
	...

0800c728 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	70da      	strb	r2, [r3, #3]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f04f 32ff 	mov.w	r2, #4294967295
 800c73e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c740:	6839      	ldr	r1, [r7, #0]
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7fe fcfc 	bl	800b140 <move_window>
 800c748:	4603      	mov	r3, r0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d001      	beq.n	800c752 <check_fs+0x2a>
 800c74e:	2304      	movs	r3, #4
 800c750:	e038      	b.n	800c7c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	3334      	adds	r3, #52	; 0x34
 800c756:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fe fa40 	bl	800abe0 <ld_word>
 800c760:	4603      	mov	r3, r0
 800c762:	461a      	mov	r2, r3
 800c764:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c768:	429a      	cmp	r2, r3
 800c76a:	d001      	beq.n	800c770 <check_fs+0x48>
 800c76c:	2303      	movs	r3, #3
 800c76e:	e029      	b.n	800c7c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c776:	2be9      	cmp	r3, #233	; 0xe9
 800c778:	d009      	beq.n	800c78e <check_fs+0x66>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c780:	2beb      	cmp	r3, #235	; 0xeb
 800c782:	d11e      	bne.n	800c7c2 <check_fs+0x9a>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c78a:	2b90      	cmp	r3, #144	; 0x90
 800c78c:	d119      	bne.n	800c7c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	3334      	adds	r3, #52	; 0x34
 800c792:	3336      	adds	r3, #54	; 0x36
 800c794:	4618      	mov	r0, r3
 800c796:	f7fe fa3b 	bl	800ac10 <ld_dword>
 800c79a:	4603      	mov	r3, r0
 800c79c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c7a0:	4a0a      	ldr	r2, [pc, #40]	; (800c7cc <check_fs+0xa4>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d101      	bne.n	800c7aa <check_fs+0x82>
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	e00c      	b.n	800c7c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	3334      	adds	r3, #52	; 0x34
 800c7ae:	3352      	adds	r3, #82	; 0x52
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7fe fa2d 	bl	800ac10 <ld_dword>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	4a05      	ldr	r2, [pc, #20]	; (800c7d0 <check_fs+0xa8>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d101      	bne.n	800c7c2 <check_fs+0x9a>
 800c7be:	2300      	movs	r3, #0
 800c7c0:	e000      	b.n	800c7c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c7c2:	2302      	movs	r3, #2
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3708      	adds	r7, #8
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	00544146 	.word	0x00544146
 800c7d0:	33544146 	.word	0x33544146

0800c7d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b096      	sub	sp, #88	; 0x58
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	4613      	mov	r3, r2
 800c7e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c7e8:	68f8      	ldr	r0, [r7, #12]
 800c7ea:	f7ff ff58 	bl	800c69e <get_ldnumber>
 800c7ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	da01      	bge.n	800c7fa <find_volume+0x26>
 800c7f6:	230b      	movs	r3, #11
 800c7f8:	e230      	b.n	800cc5c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c7fa:	4aa1      	ldr	r2, [pc, #644]	; (800ca80 <find_volume+0x2ac>)
 800c7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c802:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c806:	2b00      	cmp	r3, #0
 800c808:	d101      	bne.n	800c80e <find_volume+0x3a>
 800c80a:	230c      	movs	r3, #12
 800c80c:	e226      	b.n	800cc5c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c812:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c814:	79fb      	ldrb	r3, [r7, #7]
 800c816:	f023 0301 	bic.w	r3, r3, #1
 800c81a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d01a      	beq.n	800c85a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c826:	785b      	ldrb	r3, [r3, #1]
 800c828:	4618      	mov	r0, r3
 800c82a:	f7fe f93b 	bl	800aaa4 <disk_status>
 800c82e:	4603      	mov	r3, r0
 800c830:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c834:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c838:	f003 0301 	and.w	r3, r3, #1
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d10c      	bne.n	800c85a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c840:	79fb      	ldrb	r3, [r7, #7]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d007      	beq.n	800c856 <find_volume+0x82>
 800c846:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c84a:	f003 0304 	and.w	r3, r3, #4
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d001      	beq.n	800c856 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c852:	230a      	movs	r3, #10
 800c854:	e202      	b.n	800cc5c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800c856:	2300      	movs	r3, #0
 800c858:	e200      	b.n	800cc5c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85c:	2200      	movs	r2, #0
 800c85e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c862:	b2da      	uxtb	r2, r3
 800c864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c866:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86a:	785b      	ldrb	r3, [r3, #1]
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7fe f933 	bl	800aad8 <disk_initialize>
 800c872:	4603      	mov	r3, r0
 800c874:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c878:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c87c:	f003 0301 	and.w	r3, r3, #1
 800c880:	2b00      	cmp	r3, #0
 800c882:	d001      	beq.n	800c888 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c884:	2303      	movs	r3, #3
 800c886:	e1e9      	b.n	800cc5c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c888:	79fb      	ldrb	r3, [r7, #7]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d007      	beq.n	800c89e <find_volume+0xca>
 800c88e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c892:	f003 0304 	and.w	r3, r3, #4
 800c896:	2b00      	cmp	r3, #0
 800c898:	d001      	beq.n	800c89e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c89a:	230a      	movs	r3, #10
 800c89c:	e1de      	b.n	800cc5c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c8a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c8a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8a6:	f7ff ff3f 	bl	800c728 <check_fs>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c8b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c8b4:	2b02      	cmp	r3, #2
 800c8b6:	d149      	bne.n	800c94c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	643b      	str	r3, [r7, #64]	; 0x40
 800c8bc:	e01e      	b.n	800c8fc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c8c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8c6:	011b      	lsls	r3, r3, #4
 800c8c8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c8cc:	4413      	add	r3, r2
 800c8ce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d2:	3304      	adds	r3, #4
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d006      	beq.n	800c8e8 <find_volume+0x114>
 800c8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8dc:	3308      	adds	r3, #8
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fe f996 	bl	800ac10 <ld_dword>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	e000      	b.n	800c8ea <find_volume+0x116>
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	3358      	adds	r3, #88	; 0x58
 800c8f0:	443b      	add	r3, r7
 800c8f2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c8f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	643b      	str	r3, [r7, #64]	; 0x40
 800c8fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8fe:	2b03      	cmp	r3, #3
 800c900:	d9dd      	bls.n	800c8be <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c902:	2300      	movs	r3, #0
 800c904:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d002      	beq.n	800c912 <find_volume+0x13e>
 800c90c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c90e:	3b01      	subs	r3, #1
 800c910:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	3358      	adds	r3, #88	; 0x58
 800c918:	443b      	add	r3, r7
 800c91a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c91e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c922:	2b00      	cmp	r3, #0
 800c924:	d005      	beq.n	800c932 <find_volume+0x15e>
 800c926:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c928:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c92a:	f7ff fefd 	bl	800c728 <check_fs>
 800c92e:	4603      	mov	r3, r0
 800c930:	e000      	b.n	800c934 <find_volume+0x160>
 800c932:	2303      	movs	r3, #3
 800c934:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c938:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d905      	bls.n	800c94c <find_volume+0x178>
 800c940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c942:	3301      	adds	r3, #1
 800c944:	643b      	str	r3, [r7, #64]	; 0x40
 800c946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c948:	2b03      	cmp	r3, #3
 800c94a:	d9e2      	bls.n	800c912 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c94c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c950:	2b04      	cmp	r3, #4
 800c952:	d101      	bne.n	800c958 <find_volume+0x184>
 800c954:	2301      	movs	r3, #1
 800c956:	e181      	b.n	800cc5c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c958:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d901      	bls.n	800c964 <find_volume+0x190>
 800c960:	230d      	movs	r3, #13
 800c962:	e17b      	b.n	800cc5c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c966:	3334      	adds	r3, #52	; 0x34
 800c968:	330b      	adds	r3, #11
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fe f938 	bl	800abe0 <ld_word>
 800c970:	4603      	mov	r3, r0
 800c972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c976:	d001      	beq.n	800c97c <find_volume+0x1a8>
 800c978:	230d      	movs	r3, #13
 800c97a:	e16f      	b.n	800cc5c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97e:	3334      	adds	r3, #52	; 0x34
 800c980:	3316      	adds	r3, #22
 800c982:	4618      	mov	r0, r3
 800c984:	f7fe f92c 	bl	800abe0 <ld_word>
 800c988:	4603      	mov	r3, r0
 800c98a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c98c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d106      	bne.n	800c9a0 <find_volume+0x1cc>
 800c992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c994:	3334      	adds	r3, #52	; 0x34
 800c996:	3324      	adds	r3, #36	; 0x24
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fe f939 	bl	800ac10 <ld_dword>
 800c99e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9a4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b2:	789b      	ldrb	r3, [r3, #2]
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d005      	beq.n	800c9c4 <find_volume+0x1f0>
 800c9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ba:	789b      	ldrb	r3, [r3, #2]
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d001      	beq.n	800c9c4 <find_volume+0x1f0>
 800c9c0:	230d      	movs	r3, #13
 800c9c2:	e14b      	b.n	800cc5c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c6:	789b      	ldrb	r3, [r3, #2]
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9cc:	fb02 f303 	mul.w	r3, r2, r3
 800c9d0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9d8:	b29a      	uxth	r2, r3
 800c9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e0:	895b      	ldrh	r3, [r3, #10]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d008      	beq.n	800c9f8 <find_volume+0x224>
 800c9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e8:	895b      	ldrh	r3, [r3, #10]
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ee:	895b      	ldrh	r3, [r3, #10]
 800c9f0:	3b01      	subs	r3, #1
 800c9f2:	4013      	ands	r3, r2
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <find_volume+0x228>
 800c9f8:	230d      	movs	r3, #13
 800c9fa:	e12f      	b.n	800cc5c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	3334      	adds	r3, #52	; 0x34
 800ca00:	3311      	adds	r3, #17
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fe f8ec 	bl	800abe0 <ld_word>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ca10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca12:	891b      	ldrh	r3, [r3, #8]
 800ca14:	f003 030f 	and.w	r3, r3, #15
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d001      	beq.n	800ca22 <find_volume+0x24e>
 800ca1e:	230d      	movs	r3, #13
 800ca20:	e11c      	b.n	800cc5c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ca22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca24:	3334      	adds	r3, #52	; 0x34
 800ca26:	3313      	adds	r3, #19
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fe f8d9 	bl	800abe0 <ld_word>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ca32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d106      	bne.n	800ca46 <find_volume+0x272>
 800ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3a:	3334      	adds	r3, #52	; 0x34
 800ca3c:	3320      	adds	r3, #32
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fe f8e6 	bl	800ac10 <ld_dword>
 800ca44:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ca46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca48:	3334      	adds	r3, #52	; 0x34
 800ca4a:	330e      	adds	r3, #14
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7fe f8c7 	bl	800abe0 <ld_word>
 800ca52:	4603      	mov	r3, r0
 800ca54:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ca56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d101      	bne.n	800ca60 <find_volume+0x28c>
 800ca5c:	230d      	movs	r3, #13
 800ca5e:	e0fd      	b.n	800cc5c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ca60:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ca62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca64:	4413      	add	r3, r2
 800ca66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca68:	8912      	ldrh	r2, [r2, #8]
 800ca6a:	0912      	lsrs	r2, r2, #4
 800ca6c:	b292      	uxth	r2, r2
 800ca6e:	4413      	add	r3, r2
 800ca70:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ca72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d204      	bcs.n	800ca84 <find_volume+0x2b0>
 800ca7a:	230d      	movs	r3, #13
 800ca7c:	e0ee      	b.n	800cc5c <find_volume+0x488>
 800ca7e:	bf00      	nop
 800ca80:	200012b4 	.word	0x200012b4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ca84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca8c:	8952      	ldrh	r2, [r2, #10]
 800ca8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca92:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ca94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d101      	bne.n	800ca9e <find_volume+0x2ca>
 800ca9a:	230d      	movs	r3, #13
 800ca9c:	e0de      	b.n	800cc5c <find_volume+0x488>
		fmt = FS_FAT32;
 800ca9e:	2303      	movs	r3, #3
 800caa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800caa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800caaa:	4293      	cmp	r3, r2
 800caac:	d802      	bhi.n	800cab4 <find_volume+0x2e0>
 800caae:	2302      	movs	r3, #2
 800cab0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800caba:	4293      	cmp	r3, r2
 800cabc:	d802      	bhi.n	800cac4 <find_volume+0x2f0>
 800cabe:	2301      	movs	r3, #1
 800cac0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac6:	1c9a      	adds	r2, r3, #2
 800cac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caca:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800cacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cace:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cad0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cad2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cad6:	441a      	add	r2, r3
 800cad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cada:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cadc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae0:	441a      	add	r2, r3
 800cae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800cae6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800caea:	2b03      	cmp	r3, #3
 800caec:	d11e      	bne.n	800cb2c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800caee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf0:	3334      	adds	r3, #52	; 0x34
 800caf2:	332a      	adds	r3, #42	; 0x2a
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7fe f873 	bl	800abe0 <ld_word>
 800cafa:	4603      	mov	r3, r0
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d001      	beq.n	800cb04 <find_volume+0x330>
 800cb00:	230d      	movs	r3, #13
 800cb02:	e0ab      	b.n	800cc5c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb06:	891b      	ldrh	r3, [r3, #8]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d001      	beq.n	800cb10 <find_volume+0x33c>
 800cb0c:	230d      	movs	r3, #13
 800cb0e:	e0a5      	b.n	800cc5c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb12:	3334      	adds	r3, #52	; 0x34
 800cb14:	332c      	adds	r3, #44	; 0x2c
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fe f87a 	bl	800ac10 <ld_dword>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb20:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb24:	699b      	ldr	r3, [r3, #24]
 800cb26:	009b      	lsls	r3, r3, #2
 800cb28:	647b      	str	r3, [r7, #68]	; 0x44
 800cb2a:	e01f      	b.n	800cb6c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2e:	891b      	ldrh	r3, [r3, #8]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d101      	bne.n	800cb38 <find_volume+0x364>
 800cb34:	230d      	movs	r3, #13
 800cb36:	e091      	b.n	800cc5c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb3e:	441a      	add	r2, r3
 800cb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb42:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cb44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	d103      	bne.n	800cb54 <find_volume+0x380>
 800cb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4e:	699b      	ldr	r3, [r3, #24]
 800cb50:	005b      	lsls	r3, r3, #1
 800cb52:	e00a      	b.n	800cb6a <find_volume+0x396>
 800cb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb56:	699a      	ldr	r2, [r3, #24]
 800cb58:	4613      	mov	r3, r2
 800cb5a:	005b      	lsls	r3, r3, #1
 800cb5c:	4413      	add	r3, r2
 800cb5e:	085a      	lsrs	r2, r3, #1
 800cb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb62:	699b      	ldr	r3, [r3, #24]
 800cb64:	f003 0301 	and.w	r3, r3, #1
 800cb68:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cb6a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6e:	69da      	ldr	r2, [r3, #28]
 800cb70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb72:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cb76:	0a5b      	lsrs	r3, r3, #9
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d201      	bcs.n	800cb80 <find_volume+0x3ac>
 800cb7c:	230d      	movs	r3, #13
 800cb7e:	e06d      	b.n	800cc5c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	f04f 32ff 	mov.w	r2, #4294967295
 800cb86:	615a      	str	r2, [r3, #20]
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	695a      	ldr	r2, [r3, #20]
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	2280      	movs	r2, #128	; 0x80
 800cb94:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cb96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb9a:	2b03      	cmp	r3, #3
 800cb9c:	d149      	bne.n	800cc32 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba0:	3334      	adds	r3, #52	; 0x34
 800cba2:	3330      	adds	r3, #48	; 0x30
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7fe f81b 	bl	800abe0 <ld_word>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d140      	bne.n	800cc32 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cbb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cbb8:	f7fe fac2 	bl	800b140 <move_window>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d137      	bne.n	800cc32 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbca:	3334      	adds	r3, #52	; 0x34
 800cbcc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fe f805 	bl	800abe0 <ld_word>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	461a      	mov	r2, r3
 800cbda:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d127      	bne.n	800cc32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe4:	3334      	adds	r3, #52	; 0x34
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fe f812 	bl	800ac10 <ld_dword>
 800cbec:	4603      	mov	r3, r0
 800cbee:	4a1d      	ldr	r2, [pc, #116]	; (800cc64 <find_volume+0x490>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d11e      	bne.n	800cc32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf6:	3334      	adds	r3, #52	; 0x34
 800cbf8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7fe f807 	bl	800ac10 <ld_dword>
 800cc02:	4603      	mov	r3, r0
 800cc04:	4a18      	ldr	r2, [pc, #96]	; (800cc68 <find_volume+0x494>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d113      	bne.n	800cc32 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0c:	3334      	adds	r3, #52	; 0x34
 800cc0e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fd fffc 	bl	800ac10 <ld_dword>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc20:	3334      	adds	r3, #52	; 0x34
 800cc22:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7fd fff2 	bl	800ac10 <ld_dword>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc30:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc34:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cc38:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cc3a:	4b0c      	ldr	r3, [pc, #48]	; (800cc6c <find_volume+0x498>)
 800cc3c:	881b      	ldrh	r3, [r3, #0]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	4b0a      	ldr	r3, [pc, #40]	; (800cc6c <find_volume+0x498>)
 800cc44:	801a      	strh	r2, [r3, #0]
 800cc46:	4b09      	ldr	r3, [pc, #36]	; (800cc6c <find_volume+0x498>)
 800cc48:	881a      	ldrh	r2, [r3, #0]
 800cc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc50:	4a07      	ldr	r2, [pc, #28]	; (800cc70 <find_volume+0x49c>)
 800cc52:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cc54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc56:	f7fe fa0b 	bl	800b070 <clear_lock>
#endif
	return FR_OK;
 800cc5a:	2300      	movs	r3, #0
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3758      	adds	r7, #88	; 0x58
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	41615252 	.word	0x41615252
 800cc68:	61417272 	.word	0x61417272
 800cc6c:	200012b8 	.word	0x200012b8
 800cc70:	200012dc 	.word	0x200012dc

0800cc74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cc7e:	2309      	movs	r3, #9
 800cc80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d01c      	beq.n	800ccc2 <validate+0x4e>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d018      	beq.n	800ccc2 <validate+0x4e>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d013      	beq.n	800ccc2 <validate+0x4e>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	889a      	ldrh	r2, [r3, #4]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	88db      	ldrh	r3, [r3, #6]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d10c      	bne.n	800ccc2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	785b      	ldrb	r3, [r3, #1]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7fd fef8 	bl	800aaa4 <disk_status>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d101      	bne.n	800ccc2 <validate+0x4e>
			res = FR_OK;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d102      	bne.n	800ccce <validate+0x5a>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	e000      	b.n	800ccd0 <validate+0x5c>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	683a      	ldr	r2, [r7, #0]
 800ccd2:	6013      	str	r3, [r2, #0]
	return res;
 800ccd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
	...

0800cce0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b088      	sub	sp, #32
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	4613      	mov	r3, r2
 800ccec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ccf2:	f107 0310 	add.w	r3, r7, #16
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7ff fcd1 	bl	800c69e <get_ldnumber>
 800ccfc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	da01      	bge.n	800cd08 <f_mount+0x28>
 800cd04:	230b      	movs	r3, #11
 800cd06:	e02b      	b.n	800cd60 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cd08:	4a17      	ldr	r2, [pc, #92]	; (800cd68 <f_mount+0x88>)
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d005      	beq.n	800cd24 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cd18:	69b8      	ldr	r0, [r7, #24]
 800cd1a:	f7fe f9a9 	bl	800b070 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	2200      	movs	r2, #0
 800cd22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d002      	beq.n	800cd30 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	490d      	ldr	r1, [pc, #52]	; (800cd68 <f_mount+0x88>)
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d002      	beq.n	800cd46 <f_mount+0x66>
 800cd40:	79fb      	ldrb	r3, [r7, #7]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d001      	beq.n	800cd4a <f_mount+0x6a>
 800cd46:	2300      	movs	r3, #0
 800cd48:	e00a      	b.n	800cd60 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cd4a:	f107 010c 	add.w	r1, r7, #12
 800cd4e:	f107 0308 	add.w	r3, r7, #8
 800cd52:	2200      	movs	r2, #0
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7ff fd3d 	bl	800c7d4 <find_volume>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cd5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3720      	adds	r7, #32
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	200012b4 	.word	0x200012b4

0800cd6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b09a      	sub	sp, #104	; 0x68
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	4613      	mov	r3, r2
 800cd78:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d101      	bne.n	800cd84 <f_open+0x18>
 800cd80:	2309      	movs	r3, #9
 800cd82:	e1ad      	b.n	800d0e0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cd84:	79fb      	ldrb	r3, [r7, #7]
 800cd86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd8a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cd8c:	79fa      	ldrb	r2, [r7, #7]
 800cd8e:	f107 0114 	add.w	r1, r7, #20
 800cd92:	f107 0308 	add.w	r3, r7, #8
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7ff fd1c 	bl	800c7d4 <find_volume>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800cda2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f040 8191 	bne.w	800d0ce <f_open+0x362>
		dj.obj.fs = fs;
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	f107 0318 	add.w	r3, r7, #24
 800cdb6:	4611      	mov	r1, r2
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7ff fbff 	bl	800c5bc <follow_path>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cdc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d11a      	bne.n	800ce02 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cdcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cdd0:	b25b      	sxtb	r3, r3
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	da03      	bge.n	800cdde <f_open+0x72>
				res = FR_INVALID_NAME;
 800cdd6:	2306      	movs	r3, #6
 800cdd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cddc:	e011      	b.n	800ce02 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cdde:	79fb      	ldrb	r3, [r7, #7]
 800cde0:	f023 0301 	bic.w	r3, r3, #1
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	bf14      	ite	ne
 800cde8:	2301      	movne	r3, #1
 800cdea:	2300      	moveq	r3, #0
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	461a      	mov	r2, r3
 800cdf0:	f107 0318 	add.w	r3, r7, #24
 800cdf4:	4611      	mov	r1, r2
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fd fff2 	bl	800ade0 <chk_lock>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ce02:	79fb      	ldrb	r3, [r7, #7]
 800ce04:	f003 031c 	and.w	r3, r3, #28
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d07f      	beq.n	800cf0c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ce0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d017      	beq.n	800ce44 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ce14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce18:	2b04      	cmp	r3, #4
 800ce1a:	d10e      	bne.n	800ce3a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ce1c:	f7fe f83c 	bl	800ae98 <enq_lock>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d006      	beq.n	800ce34 <f_open+0xc8>
 800ce26:	f107 0318 	add.w	r3, r7, #24
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7ff f916 	bl	800c05c <dir_register>
 800ce30:	4603      	mov	r3, r0
 800ce32:	e000      	b.n	800ce36 <f_open+0xca>
 800ce34:	2312      	movs	r3, #18
 800ce36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ce3a:	79fb      	ldrb	r3, [r7, #7]
 800ce3c:	f043 0308 	orr.w	r3, r3, #8
 800ce40:	71fb      	strb	r3, [r7, #7]
 800ce42:	e010      	b.n	800ce66 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ce44:	7fbb      	ldrb	r3, [r7, #30]
 800ce46:	f003 0311 	and.w	r3, r3, #17
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d003      	beq.n	800ce56 <f_open+0xea>
					res = FR_DENIED;
 800ce4e:	2307      	movs	r3, #7
 800ce50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ce54:	e007      	b.n	800ce66 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ce56:	79fb      	ldrb	r3, [r7, #7]
 800ce58:	f003 0304 	and.w	r3, r3, #4
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d002      	beq.n	800ce66 <f_open+0xfa>
 800ce60:	2308      	movs	r3, #8
 800ce62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ce66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d168      	bne.n	800cf40 <f_open+0x1d4>
 800ce6e:	79fb      	ldrb	r3, [r7, #7]
 800ce70:	f003 0308 	and.w	r3, r3, #8
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d063      	beq.n	800cf40 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ce78:	f7fd fdb2 	bl	800a9e0 <get_fattime>
 800ce7c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ce7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce80:	330e      	adds	r3, #14
 800ce82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fd ff01 	bl	800ac8c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ce8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8c:	3316      	adds	r3, #22
 800ce8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7fd fefb 	bl	800ac8c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ce96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce98:	330b      	adds	r3, #11
 800ce9a:	2220      	movs	r2, #32
 800ce9c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cea2:	4611      	mov	r1, r2
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7fe fe52 	bl	800bb4e <ld_clust>
 800ceaa:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fe fe6a 	bl	800bb8c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ceb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceba:	331c      	adds	r3, #28
 800cebc:	2100      	movs	r1, #0
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fd fee4 	bl	800ac8c <st_dword>
					fs->wflag = 1;
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	2201      	movs	r2, #1
 800cec8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ceca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d037      	beq.n	800cf40 <f_open+0x1d4>
						dw = fs->winsect;
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ced4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ced6:	f107 0318 	add.w	r3, r7, #24
 800ceda:	2200      	movs	r2, #0
 800cedc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fe fb7d 	bl	800b5de <remove_chain>
 800cee4:	4603      	mov	r3, r0
 800cee6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ceea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d126      	bne.n	800cf40 <f_open+0x1d4>
							res = move_window(fs, dw);
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fe f922 	bl	800b140 <move_window>
 800cefc:	4603      	mov	r3, r0
 800cefe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf06:	3a01      	subs	r2, #1
 800cf08:	611a      	str	r2, [r3, #16]
 800cf0a:	e019      	b.n	800cf40 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cf0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d115      	bne.n	800cf40 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cf14:	7fbb      	ldrb	r3, [r7, #30]
 800cf16:	f003 0310 	and.w	r3, r3, #16
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d003      	beq.n	800cf26 <f_open+0x1ba>
					res = FR_NO_FILE;
 800cf1e:	2304      	movs	r3, #4
 800cf20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cf24:	e00c      	b.n	800cf40 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cf26:	79fb      	ldrb	r3, [r7, #7]
 800cf28:	f003 0302 	and.w	r3, r3, #2
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d007      	beq.n	800cf40 <f_open+0x1d4>
 800cf30:	7fbb      	ldrb	r3, [r7, #30]
 800cf32:	f003 0301 	and.w	r3, r3, #1
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d002      	beq.n	800cf40 <f_open+0x1d4>
						res = FR_DENIED;
 800cf3a:	2307      	movs	r3, #7
 800cf3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800cf40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d128      	bne.n	800cf9a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cf48:	79fb      	ldrb	r3, [r7, #7]
 800cf4a:	f003 0308 	and.w	r3, r3, #8
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d003      	beq.n	800cf5a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cf52:	79fb      	ldrb	r3, [r7, #7]
 800cf54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf58:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cf62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf68:	79fb      	ldrb	r3, [r7, #7]
 800cf6a:	f023 0301 	bic.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	bf14      	ite	ne
 800cf72:	2301      	movne	r3, #1
 800cf74:	2300      	moveq	r3, #0
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	461a      	mov	r2, r3
 800cf7a:	f107 0318 	add.w	r3, r7, #24
 800cf7e:	4611      	mov	r1, r2
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7fd ffab 	bl	800aedc <inc_lock>
 800cf86:	4602      	mov	r2, r0
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d102      	bne.n	800cf9a <f_open+0x22e>
 800cf94:	2302      	movs	r3, #2
 800cf96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cf9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f040 8095 	bne.w	800d0ce <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfa8:	4611      	mov	r1, r2
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7fe fdcf 	bl	800bb4e <ld_clust>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb8:	331c      	adds	r3, #28
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7fd fe28 	bl	800ac10 <ld_dword>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cfcc:	697a      	ldr	r2, [r7, #20]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	88da      	ldrh	r2, [r3, #6]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	79fa      	ldrb	r2, [r7, #7]
 800cfde:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2200      	movs	r2, #0
 800cff0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	3330      	adds	r3, #48	; 0x30
 800cff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cffa:	2100      	movs	r1, #0
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fd fe92 	bl	800ad26 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d002:	79fb      	ldrb	r3, [r7, #7]
 800d004:	f003 0320 	and.w	r3, r3, #32
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d060      	beq.n	800d0ce <f_open+0x362>
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d05c      	beq.n	800d0ce <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	68da      	ldr	r2, [r3, #12]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	895b      	ldrh	r3, [r3, #10]
 800d020:	025b      	lsls	r3, r3, #9
 800d022:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d030:	e016      	b.n	800d060 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d036:	4618      	mov	r0, r3
 800d038:	f7fe f93d 	bl	800b2b6 <get_fat>
 800d03c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d03e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d040:	2b01      	cmp	r3, #1
 800d042:	d802      	bhi.n	800d04a <f_open+0x2de>
 800d044:	2302      	movs	r3, #2
 800d046:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d04a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d050:	d102      	bne.n	800d058 <f_open+0x2ec>
 800d052:	2301      	movs	r3, #1
 800d054:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d058:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d05a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d060:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d064:	2b00      	cmp	r3, #0
 800d066:	d103      	bne.n	800d070 <f_open+0x304>
 800d068:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d06a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d8e0      	bhi.n	800d032 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d074:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d076:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d127      	bne.n	800d0ce <f_open+0x362>
 800d07e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d084:	2b00      	cmp	r3, #0
 800d086:	d022      	beq.n	800d0ce <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7fe f8f3 	bl	800b278 <clust2sect>
 800d092:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d096:	2b00      	cmp	r3, #0
 800d098:	d103      	bne.n	800d0a2 <f_open+0x336>
						res = FR_INT_ERR;
 800d09a:	2302      	movs	r3, #2
 800d09c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d0a0:	e015      	b.n	800d0ce <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d0a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0a4:	0a5a      	lsrs	r2, r3, #9
 800d0a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0a8:	441a      	add	r2, r3
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	7858      	ldrb	r0, [r3, #1]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	6a1a      	ldr	r2, [r3, #32]
 800d0bc:	2301      	movs	r3, #1
 800d0be:	f7fd fd31 	bl	800ab24 <disk_read>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d002      	beq.n	800d0ce <f_open+0x362>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d0ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d002      	beq.n	800d0dc <f_open+0x370>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d0dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3768      	adds	r7, #104	; 0x68
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b08c      	sub	sp, #48	; 0x30
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
 800d0f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f107 0210 	add.w	r2, r7, #16
 800d106:	4611      	mov	r1, r2
 800d108:	4618      	mov	r0, r3
 800d10a:	f7ff fdb3 	bl	800cc74 <validate>
 800d10e:	4603      	mov	r3, r0
 800d110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d107      	bne.n	800d12c <f_write+0x44>
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	7d5b      	ldrb	r3, [r3, #21]
 800d120:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d124:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <f_write+0x4a>
 800d12c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d130:	e14b      	b.n	800d3ca <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	7d1b      	ldrb	r3, [r3, #20]
 800d136:	f003 0302 	and.w	r3, r3, #2
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d101      	bne.n	800d142 <f_write+0x5a>
 800d13e:	2307      	movs	r3, #7
 800d140:	e143      	b.n	800d3ca <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	699a      	ldr	r2, [r3, #24]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	441a      	add	r2, r3
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	699b      	ldr	r3, [r3, #24]
 800d14e:	429a      	cmp	r2, r3
 800d150:	f080 812d 	bcs.w	800d3ae <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	699b      	ldr	r3, [r3, #24]
 800d158:	43db      	mvns	r3, r3
 800d15a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d15c:	e127      	b.n	800d3ae <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	699b      	ldr	r3, [r3, #24]
 800d162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d166:	2b00      	cmp	r3, #0
 800d168:	f040 80e3 	bne.w	800d332 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	699b      	ldr	r3, [r3, #24]
 800d170:	0a5b      	lsrs	r3, r3, #9
 800d172:	693a      	ldr	r2, [r7, #16]
 800d174:	8952      	ldrh	r2, [r2, #10]
 800d176:	3a01      	subs	r2, #1
 800d178:	4013      	ands	r3, r2
 800d17a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d143      	bne.n	800d20a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	699b      	ldr	r3, [r3, #24]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10c      	bne.n	800d1a4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d192:	2b00      	cmp	r3, #0
 800d194:	d11a      	bne.n	800d1cc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2100      	movs	r1, #0
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7fe fa84 	bl	800b6a8 <create_chain>
 800d1a0:	62b8      	str	r0, [r7, #40]	; 0x28
 800d1a2:	e013      	b.n	800d1cc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d007      	beq.n	800d1bc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	699b      	ldr	r3, [r3, #24]
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f7fe fb10 	bl	800b7d8 <clmt_clust>
 800d1b8:	62b8      	str	r0, [r7, #40]	; 0x28
 800d1ba:	e007      	b.n	800d1cc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d1bc:	68fa      	ldr	r2, [r7, #12]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	69db      	ldr	r3, [r3, #28]
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	4610      	mov	r0, r2
 800d1c6:	f7fe fa6f 	bl	800b6a8 <create_chain>
 800d1ca:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	f000 80f2 	beq.w	800d3b8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d104      	bne.n	800d1e4 <f_write+0xfc>
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2202      	movs	r2, #2
 800d1de:	755a      	strb	r2, [r3, #21]
 800d1e0:	2302      	movs	r3, #2
 800d1e2:	e0f2      	b.n	800d3ca <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ea:	d104      	bne.n	800d1f6 <f_write+0x10e>
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	755a      	strb	r2, [r3, #21]
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e0e9      	b.n	800d3ca <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1fa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d102      	bne.n	800d20a <f_write+0x122>
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d208:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	7d1b      	ldrb	r3, [r3, #20]
 800d20e:	b25b      	sxtb	r3, r3
 800d210:	2b00      	cmp	r3, #0
 800d212:	da18      	bge.n	800d246 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	7858      	ldrb	r0, [r3, #1]
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6a1a      	ldr	r2, [r3, #32]
 800d222:	2301      	movs	r3, #1
 800d224:	f7fd fc9e 	bl	800ab64 <disk_write>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d004      	beq.n	800d238 <f_write+0x150>
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2201      	movs	r2, #1
 800d232:	755a      	strb	r2, [r3, #21]
 800d234:	2301      	movs	r3, #1
 800d236:	e0c8      	b.n	800d3ca <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	7d1b      	ldrb	r3, [r3, #20]
 800d23c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d240:	b2da      	uxtb	r2, r3
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d246:	693a      	ldr	r2, [r7, #16]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	69db      	ldr	r3, [r3, #28]
 800d24c:	4619      	mov	r1, r3
 800d24e:	4610      	mov	r0, r2
 800d250:	f7fe f812 	bl	800b278 <clust2sect>
 800d254:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d104      	bne.n	800d266 <f_write+0x17e>
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2202      	movs	r2, #2
 800d260:	755a      	strb	r2, [r3, #21]
 800d262:	2302      	movs	r3, #2
 800d264:	e0b1      	b.n	800d3ca <f_write+0x2e2>
			sect += csect;
 800d266:	697a      	ldr	r2, [r7, #20]
 800d268:	69bb      	ldr	r3, [r7, #24]
 800d26a:	4413      	add	r3, r2
 800d26c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	0a5b      	lsrs	r3, r3, #9
 800d272:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d274:	6a3b      	ldr	r3, [r7, #32]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d03c      	beq.n	800d2f4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d27a:	69ba      	ldr	r2, [r7, #24]
 800d27c:	6a3b      	ldr	r3, [r7, #32]
 800d27e:	4413      	add	r3, r2
 800d280:	693a      	ldr	r2, [r7, #16]
 800d282:	8952      	ldrh	r2, [r2, #10]
 800d284:	4293      	cmp	r3, r2
 800d286:	d905      	bls.n	800d294 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	895b      	ldrh	r3, [r3, #10]
 800d28c:	461a      	mov	r2, r3
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	1ad3      	subs	r3, r2, r3
 800d292:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	7858      	ldrb	r0, [r3, #1]
 800d298:	6a3b      	ldr	r3, [r7, #32]
 800d29a:	697a      	ldr	r2, [r7, #20]
 800d29c:	69f9      	ldr	r1, [r7, #28]
 800d29e:	f7fd fc61 	bl	800ab64 <disk_write>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d004      	beq.n	800d2b2 <f_write+0x1ca>
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	755a      	strb	r2, [r3, #21]
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e08b      	b.n	800d3ca <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	6a1a      	ldr	r2, [r3, #32]
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	1ad3      	subs	r3, r2, r3
 800d2ba:	6a3a      	ldr	r2, [r7, #32]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d915      	bls.n	800d2ec <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6a1a      	ldr	r2, [r3, #32]
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	1ad3      	subs	r3, r2, r3
 800d2ce:	025b      	lsls	r3, r3, #9
 800d2d0:	69fa      	ldr	r2, [r7, #28]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2d8:	4619      	mov	r1, r3
 800d2da:	f7fd fd03 	bl	800ace4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	7d1b      	ldrb	r3, [r3, #20]
 800d2e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2e6:	b2da      	uxtb	r2, r3
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d2ec:	6a3b      	ldr	r3, [r7, #32]
 800d2ee:	025b      	lsls	r3, r3, #9
 800d2f0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d2f2:	e03f      	b.n	800d374 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	6a1b      	ldr	r3, [r3, #32]
 800d2f8:	697a      	ldr	r2, [r7, #20]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d016      	beq.n	800d32c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	699a      	ldr	r2, [r3, #24]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d306:	429a      	cmp	r2, r3
 800d308:	d210      	bcs.n	800d32c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	7858      	ldrb	r0, [r3, #1]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d314:	2301      	movs	r3, #1
 800d316:	697a      	ldr	r2, [r7, #20]
 800d318:	f7fd fc04 	bl	800ab24 <disk_read>
 800d31c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d004      	beq.n	800d32c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2201      	movs	r2, #1
 800d326:	755a      	strb	r2, [r3, #21]
 800d328:	2301      	movs	r3, #1
 800d32a:	e04e      	b.n	800d3ca <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	697a      	ldr	r2, [r7, #20]
 800d330:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	699b      	ldr	r3, [r3, #24]
 800d336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d33a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d33e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	429a      	cmp	r2, r3
 800d346:	d901      	bls.n	800d34c <f_write+0x264>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	699b      	ldr	r3, [r3, #24]
 800d356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d35a:	4413      	add	r3, r2
 800d35c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d35e:	69f9      	ldr	r1, [r7, #28]
 800d360:	4618      	mov	r0, r3
 800d362:	f7fd fcbf 	bl	800ace4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	7d1b      	ldrb	r3, [r3, #20]
 800d36a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d374:	69fa      	ldr	r2, [r7, #28]
 800d376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d378:	4413      	add	r3, r2
 800d37a:	61fb      	str	r3, [r7, #28]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	699a      	ldr	r2, [r3, #24]
 800d380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d382:	441a      	add	r2, r3
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	619a      	str	r2, [r3, #24]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	68da      	ldr	r2, [r3, #12]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	699b      	ldr	r3, [r3, #24]
 800d390:	429a      	cmp	r2, r3
 800d392:	bf38      	it	cc
 800d394:	461a      	movcc	r2, r3
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	60da      	str	r2, [r3, #12]
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a0:	441a      	add	r2, r3
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	601a      	str	r2, [r3, #0]
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	1ad3      	subs	r3, r2, r3
 800d3ac:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f47f aed4 	bne.w	800d15e <f_write+0x76>
 800d3b6:	e000      	b.n	800d3ba <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d3b8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	7d1b      	ldrb	r3, [r3, #20]
 800d3be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3c2:	b2da      	uxtb	r2, r3
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d3c8:	2300      	movs	r3, #0
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3730      	adds	r7, #48	; 0x30
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b086      	sub	sp, #24
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f107 0208 	add.w	r2, r7, #8
 800d3e0:	4611      	mov	r1, r2
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7ff fc46 	bl	800cc74 <validate>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d3ec:	7dfb      	ldrb	r3, [r7, #23]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d168      	bne.n	800d4c4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	7d1b      	ldrb	r3, [r3, #20]
 800d3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d062      	beq.n	800d4c4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	7d1b      	ldrb	r3, [r3, #20]
 800d402:	b25b      	sxtb	r3, r3
 800d404:	2b00      	cmp	r3, #0
 800d406:	da15      	bge.n	800d434 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	7858      	ldrb	r0, [r3, #1]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6a1a      	ldr	r2, [r3, #32]
 800d416:	2301      	movs	r3, #1
 800d418:	f7fd fba4 	bl	800ab64 <disk_write>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d001      	beq.n	800d426 <f_sync+0x54>
 800d422:	2301      	movs	r3, #1
 800d424:	e04f      	b.n	800d4c6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	7d1b      	ldrb	r3, [r3, #20]
 800d42a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d42e:	b2da      	uxtb	r2, r3
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d434:	f7fd fad4 	bl	800a9e0 <get_fattime>
 800d438:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d43a:	68ba      	ldr	r2, [r7, #8]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d440:	4619      	mov	r1, r3
 800d442:	4610      	mov	r0, r2
 800d444:	f7fd fe7c 	bl	800b140 <move_window>
 800d448:	4603      	mov	r3, r0
 800d44a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d44c:	7dfb      	ldrb	r3, [r7, #23]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d138      	bne.n	800d4c4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d456:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	330b      	adds	r3, #11
 800d45c:	781a      	ldrb	r2, [r3, #0]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	330b      	adds	r3, #11
 800d462:	f042 0220 	orr.w	r2, r2, #32
 800d466:	b2d2      	uxtb	r2, r2
 800d468:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6818      	ldr	r0, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	461a      	mov	r2, r3
 800d474:	68f9      	ldr	r1, [r7, #12]
 800d476:	f7fe fb89 	bl	800bb8c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	f103 021c 	add.w	r2, r3, #28
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	4619      	mov	r1, r3
 800d486:	4610      	mov	r0, r2
 800d488:	f7fd fc00 	bl	800ac8c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	3316      	adds	r3, #22
 800d490:	6939      	ldr	r1, [r7, #16]
 800d492:	4618      	mov	r0, r3
 800d494:	f7fd fbfa 	bl	800ac8c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	3312      	adds	r3, #18
 800d49c:	2100      	movs	r1, #0
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7fd fbd9 	bl	800ac56 <st_word>
					fs->wflag = 1;
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7fd fe75 	bl	800b19c <sync_fs>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	7d1b      	ldrb	r3, [r3, #20]
 800d4ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4be:	b2da      	uxtb	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3718      	adds	r7, #24
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b084      	sub	sp, #16
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f7ff ff7b 	bl	800d3d2 <f_sync>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d4e0:	7bfb      	ldrb	r3, [r7, #15]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d118      	bne.n	800d518 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f107 0208 	add.w	r2, r7, #8
 800d4ec:	4611      	mov	r1, r2
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff fbc0 	bl	800cc74 <validate>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d4f8:	7bfb      	ldrb	r3, [r7, #15]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d10c      	bne.n	800d518 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	4618      	mov	r0, r3
 800d504:	f7fd fd78 	bl	800aff8 <dec_lock>
 800d508:	4603      	mov	r3, r0
 800d50a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d50c:	7bfb      	ldrb	r3, [r7, #15]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d102      	bne.n	800d518 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2200      	movs	r2, #0
 800d516:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d518:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b090      	sub	sp, #64	; 0x40
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
 800d52a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f107 0208 	add.w	r2, r7, #8
 800d532:	4611      	mov	r1, r2
 800d534:	4618      	mov	r0, r3
 800d536:	f7ff fb9d 	bl	800cc74 <validate>
 800d53a:	4603      	mov	r3, r0
 800d53c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d540:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d544:	2b00      	cmp	r3, #0
 800d546:	d103      	bne.n	800d550 <f_lseek+0x2e>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	7d5b      	ldrb	r3, [r3, #21]
 800d54c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d550:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d554:	2b00      	cmp	r3, #0
 800d556:	d002      	beq.n	800d55e <f_lseek+0x3c>
 800d558:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d55c:	e1e6      	b.n	800d92c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d562:	2b00      	cmp	r3, #0
 800d564:	f000 80d1 	beq.w	800d70a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d56e:	d15a      	bne.n	800d626 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d574:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d578:	1d1a      	adds	r2, r3, #4
 800d57a:	627a      	str	r2, [r7, #36]	; 0x24
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	617b      	str	r3, [r7, #20]
 800d580:	2302      	movs	r3, #2
 800d582:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	689b      	ldr	r3, [r3, #8]
 800d588:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d03a      	beq.n	800d606 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d592:	613b      	str	r3, [r7, #16]
 800d594:	2300      	movs	r3, #0
 800d596:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59a:	3302      	adds	r3, #2
 800d59c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a0:	60fb      	str	r3, [r7, #12]
 800d5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7fd fe82 	bl	800b2b6 <get_fat>
 800d5b2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d804      	bhi.n	800d5c4 <f_lseek+0xa2>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2202      	movs	r2, #2
 800d5be:	755a      	strb	r2, [r3, #21]
 800d5c0:	2302      	movs	r3, #2
 800d5c2:	e1b3      	b.n	800d92c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ca:	d104      	bne.n	800d5d6 <f_lseek+0xb4>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	755a      	strb	r2, [r3, #21]
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	e1aa      	b.n	800d92c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	3301      	adds	r3, #1
 800d5da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d0de      	beq.n	800d59e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d5e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d809      	bhi.n	800d5fc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ea:	1d1a      	adds	r2, r3, #4
 800d5ec:	627a      	str	r2, [r7, #36]	; 0x24
 800d5ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5f0:	601a      	str	r2, [r3, #0]
 800d5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f4:	1d1a      	adds	r2, r3, #4
 800d5f6:	627a      	str	r2, [r7, #36]	; 0x24
 800d5f8:	693a      	ldr	r2, [r7, #16]
 800d5fa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	699b      	ldr	r3, [r3, #24]
 800d600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d602:	429a      	cmp	r2, r3
 800d604:	d3c4      	bcc.n	800d590 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d60c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d60e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	429a      	cmp	r2, r3
 800d614:	d803      	bhi.n	800d61e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d618:	2200      	movs	r2, #0
 800d61a:	601a      	str	r2, [r3, #0]
 800d61c:	e184      	b.n	800d928 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d61e:	2311      	movs	r3, #17
 800d620:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d624:	e180      	b.n	800d928 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	683a      	ldr	r2, [r7, #0]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d902      	bls.n	800d636 <f_lseek+0x114>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	683a      	ldr	r2, [r7, #0]
 800d63a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f000 8172 	beq.w	800d928 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	3b01      	subs	r3, #1
 800d648:	4619      	mov	r1, r3
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f7fe f8c4 	bl	800b7d8 <clmt_clust>
 800d650:	4602      	mov	r2, r0
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d656:	68ba      	ldr	r2, [r7, #8]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	69db      	ldr	r3, [r3, #28]
 800d65c:	4619      	mov	r1, r3
 800d65e:	4610      	mov	r0, r2
 800d660:	f7fd fe0a 	bl	800b278 <clust2sect>
 800d664:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d666:	69bb      	ldr	r3, [r7, #24]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d104      	bne.n	800d676 <f_lseek+0x154>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2202      	movs	r2, #2
 800d670:	755a      	strb	r2, [r3, #21]
 800d672:	2302      	movs	r3, #2
 800d674:	e15a      	b.n	800d92c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	3b01      	subs	r3, #1
 800d67a:	0a5b      	lsrs	r3, r3, #9
 800d67c:	68ba      	ldr	r2, [r7, #8]
 800d67e:	8952      	ldrh	r2, [r2, #10]
 800d680:	3a01      	subs	r2, #1
 800d682:	4013      	ands	r3, r2
 800d684:	69ba      	ldr	r2, [r7, #24]
 800d686:	4413      	add	r3, r2
 800d688:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	699b      	ldr	r3, [r3, #24]
 800d68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d692:	2b00      	cmp	r3, #0
 800d694:	f000 8148 	beq.w	800d928 <f_lseek+0x406>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6a1b      	ldr	r3, [r3, #32]
 800d69c:	69ba      	ldr	r2, [r7, #24]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	f000 8142 	beq.w	800d928 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	7d1b      	ldrb	r3, [r3, #20]
 800d6a8:	b25b      	sxtb	r3, r3
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	da18      	bge.n	800d6e0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	7858      	ldrb	r0, [r3, #1]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6a1a      	ldr	r2, [r3, #32]
 800d6bc:	2301      	movs	r3, #1
 800d6be:	f7fd fa51 	bl	800ab64 <disk_write>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d004      	beq.n	800d6d2 <f_lseek+0x1b0>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	755a      	strb	r2, [r3, #21]
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	e12c      	b.n	800d92c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	7d1b      	ldrb	r3, [r3, #20]
 800d6d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6da:	b2da      	uxtb	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	7858      	ldrb	r0, [r3, #1]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	69ba      	ldr	r2, [r7, #24]
 800d6ee:	f7fd fa19 	bl	800ab24 <disk_read>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d004      	beq.n	800d702 <f_lseek+0x1e0>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	755a      	strb	r2, [r3, #21]
 800d6fe:	2301      	movs	r3, #1
 800d700:	e114      	b.n	800d92c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	69ba      	ldr	r2, [r7, #24]
 800d706:	621a      	str	r2, [r3, #32]
 800d708:	e10e      	b.n	800d928 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	683a      	ldr	r2, [r7, #0]
 800d710:	429a      	cmp	r2, r3
 800d712:	d908      	bls.n	800d726 <f_lseek+0x204>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	7d1b      	ldrb	r3, [r3, #20]
 800d718:	f003 0302 	and.w	r3, r3, #2
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d102      	bne.n	800d726 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	699b      	ldr	r3, [r3, #24]
 800d72a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d72c:	2300      	movs	r3, #0
 800d72e:	637b      	str	r3, [r7, #52]	; 0x34
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d734:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	f000 80a7 	beq.w	800d88c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	895b      	ldrh	r3, [r3, #10]
 800d742:	025b      	lsls	r3, r3, #9
 800d744:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d746:	6a3b      	ldr	r3, [r7, #32]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d01b      	beq.n	800d784 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	1e5a      	subs	r2, r3, #1
 800d750:	69fb      	ldr	r3, [r7, #28]
 800d752:	fbb2 f2f3 	udiv	r2, r2, r3
 800d756:	6a3b      	ldr	r3, [r7, #32]
 800d758:	1e59      	subs	r1, r3, #1
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d760:	429a      	cmp	r2, r3
 800d762:	d30f      	bcc.n	800d784 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	1e5a      	subs	r2, r3, #1
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	425b      	negs	r3, r3
 800d76c:	401a      	ands	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	699b      	ldr	r3, [r3, #24]
 800d776:	683a      	ldr	r2, [r7, #0]
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	69db      	ldr	r3, [r3, #28]
 800d780:	63bb      	str	r3, [r7, #56]	; 0x38
 800d782:	e022      	b.n	800d7ca <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d119      	bne.n	800d7c4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2100      	movs	r1, #0
 800d794:	4618      	mov	r0, r3
 800d796:	f7fd ff87 	bl	800b6a8 <create_chain>
 800d79a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	d104      	bne.n	800d7ac <f_lseek+0x28a>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2202      	movs	r2, #2
 800d7a6:	755a      	strb	r2, [r3, #21]
 800d7a8:	2302      	movs	r3, #2
 800d7aa:	e0bf      	b.n	800d92c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b2:	d104      	bne.n	800d7be <f_lseek+0x29c>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	755a      	strb	r2, [r3, #21]
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	e0b6      	b.n	800d92c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7c2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7c8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d05d      	beq.n	800d88c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d7d0:	e03a      	b.n	800d848 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d7d2:	683a      	ldr	r2, [r7, #0]
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	1ad3      	subs	r3, r2, r3
 800d7d8:	603b      	str	r3, [r7, #0]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	699a      	ldr	r2, [r3, #24]
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	441a      	add	r2, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	7d1b      	ldrb	r3, [r3, #20]
 800d7ea:	f003 0302 	and.w	r3, r3, #2
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00b      	beq.n	800d80a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7fd ff56 	bl	800b6a8 <create_chain>
 800d7fc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d800:	2b00      	cmp	r3, #0
 800d802:	d108      	bne.n	800d816 <f_lseek+0x2f4>
							ofs = 0; break;
 800d804:	2300      	movs	r3, #0
 800d806:	603b      	str	r3, [r7, #0]
 800d808:	e022      	b.n	800d850 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fd fd51 	bl	800b2b6 <get_fat>
 800d814:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81c:	d104      	bne.n	800d828 <f_lseek+0x306>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2201      	movs	r2, #1
 800d822:	755a      	strb	r2, [r3, #21]
 800d824:	2301      	movs	r3, #1
 800d826:	e081      	b.n	800d92c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d904      	bls.n	800d838 <f_lseek+0x316>
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	699b      	ldr	r3, [r3, #24]
 800d832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d834:	429a      	cmp	r2, r3
 800d836:	d304      	bcc.n	800d842 <f_lseek+0x320>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2202      	movs	r2, #2
 800d83c:	755a      	strb	r2, [r3, #21]
 800d83e:	2302      	movs	r3, #2
 800d840:	e074      	b.n	800d92c <f_lseek+0x40a>
					fp->clust = clst;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d846:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d848:	683a      	ldr	r2, [r7, #0]
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d8c0      	bhi.n	800d7d2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	699a      	ldr	r2, [r3, #24]
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	441a      	add	r2, r3
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d862:	2b00      	cmp	r3, #0
 800d864:	d012      	beq.n	800d88c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fd fd04 	bl	800b278 <clust2sect>
 800d870:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d874:	2b00      	cmp	r3, #0
 800d876:	d104      	bne.n	800d882 <f_lseek+0x360>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2202      	movs	r2, #2
 800d87c:	755a      	strb	r2, [r3, #21]
 800d87e:	2302      	movs	r3, #2
 800d880:	e054      	b.n	800d92c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	0a5b      	lsrs	r3, r3, #9
 800d886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d888:	4413      	add	r3, r2
 800d88a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	699a      	ldr	r2, [r3, #24]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	429a      	cmp	r2, r3
 800d896:	d90a      	bls.n	800d8ae <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	699a      	ldr	r2, [r3, #24]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	7d1b      	ldrb	r3, [r3, #20]
 800d8a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	699b      	ldr	r3, [r3, #24]
 800d8b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d036      	beq.n	800d928 <f_lseek+0x406>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6a1b      	ldr	r3, [r3, #32]
 800d8be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d031      	beq.n	800d928 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	7d1b      	ldrb	r3, [r3, #20]
 800d8c8:	b25b      	sxtb	r3, r3
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	da18      	bge.n	800d900 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	7858      	ldrb	r0, [r3, #1]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6a1a      	ldr	r2, [r3, #32]
 800d8dc:	2301      	movs	r3, #1
 800d8de:	f7fd f941 	bl	800ab64 <disk_write>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d004      	beq.n	800d8f2 <f_lseek+0x3d0>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	755a      	strb	r2, [r3, #21]
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e01c      	b.n	800d92c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	7d1b      	ldrb	r3, [r3, #20]
 800d8f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8fa:	b2da      	uxtb	r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	7858      	ldrb	r0, [r3, #1]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d90a:	2301      	movs	r3, #1
 800d90c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d90e:	f7fd f909 	bl	800ab24 <disk_read>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d004      	beq.n	800d922 <f_lseek+0x400>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2201      	movs	r2, #1
 800d91c:	755a      	strb	r2, [r3, #21]
 800d91e:	2301      	movs	r3, #1
 800d920:	e004      	b.n	800d92c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d926:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d928:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3740      	adds	r7, #64	; 0x40
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b092      	sub	sp, #72	; 0x48
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d940:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d944:	f107 030c 	add.w	r3, r7, #12
 800d948:	2200      	movs	r2, #0
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7fe ff42 	bl	800c7d4 <find_volume>
 800d950:	4603      	mov	r3, r0
 800d952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d956:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	f040 8099 	bne.w	800da92 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d968:	695a      	ldr	r2, [r3, #20]
 800d96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96c:	699b      	ldr	r3, [r3, #24]
 800d96e:	3b02      	subs	r3, #2
 800d970:	429a      	cmp	r2, r3
 800d972:	d804      	bhi.n	800d97e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d976:	695a      	ldr	r2, [r3, #20]
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	601a      	str	r2, [r3, #0]
 800d97c:	e089      	b.n	800da92 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d97e:	2300      	movs	r3, #0
 800d980:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	2b01      	cmp	r3, #1
 800d988:	d128      	bne.n	800d9dc <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d98a:	2302      	movs	r3, #2
 800d98c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d990:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d992:	f107 0314 	add.w	r3, r7, #20
 800d996:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d998:	4618      	mov	r0, r3
 800d99a:	f7fd fc8c 	bl	800b2b6 <get_fat>
 800d99e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9a6:	d103      	bne.n	800d9b0 <f_getfree+0x7c>
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d9ae:	e063      	b.n	800da78 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d103      	bne.n	800d9be <f_getfree+0x8a>
 800d9b6:	2302      	movs	r3, #2
 800d9b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d9bc:	e05c      	b.n	800da78 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d102      	bne.n	800d9ca <f_getfree+0x96>
 800d9c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800d9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d2:	699b      	ldr	r3, [r3, #24]
 800d9d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d3db      	bcc.n	800d992 <f_getfree+0x5e>
 800d9da:	e04d      	b.n	800da78 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9de:	699b      	ldr	r3, [r3, #24]
 800d9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e6:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	637b      	str	r3, [r7, #52]	; 0x34
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800d9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d113      	bne.n	800da1e <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d9f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fa:	1c5a      	adds	r2, r3, #1
 800d9fc:	63ba      	str	r2, [r7, #56]	; 0x38
 800d9fe:	4619      	mov	r1, r3
 800da00:	f7fd fb9e 	bl	800b140 <move_window>
 800da04:	4603      	mov	r3, r0
 800da06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800da0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d131      	bne.n	800da76 <f_getfree+0x142>
							p = fs->win;
 800da12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da14:	3334      	adds	r3, #52	; 0x34
 800da16:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800da18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da1c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800da1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	2b02      	cmp	r3, #2
 800da24:	d10f      	bne.n	800da46 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800da26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da28:	f7fd f8da 	bl	800abe0 <ld_word>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d102      	bne.n	800da38 <f_getfree+0x104>
 800da32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da34:	3301      	adds	r3, #1
 800da36:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800da38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3a:	3302      	adds	r3, #2
 800da3c:	633b      	str	r3, [r7, #48]	; 0x30
 800da3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da40:	3b02      	subs	r3, #2
 800da42:	637b      	str	r3, [r7, #52]	; 0x34
 800da44:	e010      	b.n	800da68 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800da46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da48:	f7fd f8e2 	bl	800ac10 <ld_dword>
 800da4c:	4603      	mov	r3, r0
 800da4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800da52:	2b00      	cmp	r3, #0
 800da54:	d102      	bne.n	800da5c <f_getfree+0x128>
 800da56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da58:	3301      	adds	r3, #1
 800da5a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800da5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5e:	3304      	adds	r3, #4
 800da60:	633b      	str	r3, [r7, #48]	; 0x30
 800da62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da64:	3b04      	subs	r3, #4
 800da66:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800da68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da6a:	3b01      	subs	r3, #1
 800da6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da70:	2b00      	cmp	r3, #0
 800da72:	d1bd      	bne.n	800d9f0 <f_getfree+0xbc>
 800da74:	e000      	b.n	800da78 <f_getfree+0x144>
							if (res != FR_OK) break;
 800da76:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da7c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800da7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da82:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800da84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da86:	791a      	ldrb	r2, [r3, #4]
 800da88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8a:	f042 0201 	orr.w	r2, r2, #1
 800da8e:	b2d2      	uxtb	r2, r2
 800da90:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800da92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800da96:	4618      	mov	r0, r3
 800da98:	3748      	adds	r7, #72	; 0x48
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}

0800da9e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800da9e:	b580      	push	{r7, lr}
 800daa0:	b084      	sub	sp, #16
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
 800daa6:	460b      	mov	r3, r1
 800daa8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800daaa:	78fb      	ldrb	r3, [r7, #3]
 800daac:	2b0a      	cmp	r3, #10
 800daae:	d103      	bne.n	800dab8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800dab0:	210d      	movs	r1, #13
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7ff fff3 	bl	800da9e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	db25      	blt.n	800db10 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	1c5a      	adds	r2, r3, #1
 800dac8:	60fa      	str	r2, [r7, #12]
 800daca:	687a      	ldr	r2, [r7, #4]
 800dacc:	4413      	add	r3, r2
 800dace:	78fa      	ldrb	r2, [r7, #3]
 800dad0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2b3c      	cmp	r3, #60	; 0x3c
 800dad6:	dd12      	ble.n	800dafe <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6818      	ldr	r0, [r3, #0]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f103 010c 	add.w	r1, r3, #12
 800dae2:	68fa      	ldr	r2, [r7, #12]
 800dae4:	f107 0308 	add.w	r3, r7, #8
 800dae8:	f7ff fafe 	bl	800d0e8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800daec:	68ba      	ldr	r2, [r7, #8]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d101      	bne.n	800daf8 <putc_bfd+0x5a>
 800daf4:	2300      	movs	r3, #0
 800daf6:	e001      	b.n	800dafc <putc_bfd+0x5e>
 800daf8:	f04f 33ff 	mov.w	r3, #4294967295
 800dafc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	1c5a      	adds	r2, r3, #1
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	609a      	str	r2, [r3, #8]
 800db0e:	e000      	b.n	800db12 <putc_bfd+0x74>
	if (i < 0) return;
 800db10:	bf00      	nop
}
 800db12:	3710      	adds	r7, #16
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	2b00      	cmp	r3, #0
 800db26:	db16      	blt.n	800db56 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6818      	ldr	r0, [r3, #0]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f103 010c 	add.w	r1, r3, #12
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	461a      	mov	r2, r3
 800db38:	f107 030c 	add.w	r3, r7, #12
 800db3c:	f7ff fad4 	bl	800d0e8 <f_write>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d107      	bne.n	800db56 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d102      	bne.n	800db56 <putc_flush+0x3e>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	e001      	b.n	800db5a <putc_flush+0x42>
	return EOF;
 800db56:	f04f 33ff 	mov.w	r3, #4294967295
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3710      	adds	r7, #16
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}

0800db62 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800db62:	b480      	push	{r7}
 800db64:	b083      	sub	sp, #12
 800db66:	af00      	add	r7, sp, #0
 800db68:	6078      	str	r0, [r7, #4]
 800db6a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2200      	movs	r2, #0
 800db76:	605a      	str	r2, [r3, #4]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	685a      	ldr	r2, [r3, #4]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	609a      	str	r2, [r3, #8]
}
 800db80:	bf00      	nop
 800db82:	370c      	adds	r7, #12
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr

0800db8c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b096      	sub	sp, #88	; 0x58
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800db96:	f107 030c 	add.w	r3, r7, #12
 800db9a:	6839      	ldr	r1, [r7, #0]
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7ff ffe0 	bl	800db62 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800dba2:	e009      	b.n	800dbb8 <f_puts+0x2c>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	1c5a      	adds	r2, r3, #1
 800dba8:	607a      	str	r2, [r7, #4]
 800dbaa:	781a      	ldrb	r2, [r3, #0]
 800dbac:	f107 030c 	add.w	r3, r7, #12
 800dbb0:	4611      	mov	r1, r2
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7ff ff73 	bl	800da9e <putc_bfd>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d1f1      	bne.n	800dba4 <f_puts+0x18>
	return putc_flush(&pb);
 800dbc0:	f107 030c 	add.w	r3, r7, #12
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff ffa7 	bl	800db18 <putc_flush>
 800dbca:	4603      	mov	r3, r0
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3758      	adds	r7, #88	; 0x58
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b087      	sub	sp, #28
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	4613      	mov	r3, r2
 800dbe0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dbea:	4b1f      	ldr	r3, [pc, #124]	; (800dc68 <FATFS_LinkDriverEx+0x94>)
 800dbec:	7a5b      	ldrb	r3, [r3, #9]
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d131      	bne.n	800dc58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dbf4:	4b1c      	ldr	r3, [pc, #112]	; (800dc68 <FATFS_LinkDriverEx+0x94>)
 800dbf6:	7a5b      	ldrb	r3, [r3, #9]
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	4b1a      	ldr	r3, [pc, #104]	; (800dc68 <FATFS_LinkDriverEx+0x94>)
 800dbfe:	2100      	movs	r1, #0
 800dc00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dc02:	4b19      	ldr	r3, [pc, #100]	; (800dc68 <FATFS_LinkDriverEx+0x94>)
 800dc04:	7a5b      	ldrb	r3, [r3, #9]
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	4a17      	ldr	r2, [pc, #92]	; (800dc68 <FATFS_LinkDriverEx+0x94>)
 800dc0a:	009b      	lsls	r3, r3, #2
 800dc0c:	4413      	add	r3, r2
 800dc0e:	68fa      	ldr	r2, [r7, #12]
 800dc10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dc12:	4b15      	ldr	r3, [pc, #84]	; (800dc68 <FATFS_LinkDriverEx+0x94>)
 800dc14:	7a5b      	ldrb	r3, [r3, #9]
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	461a      	mov	r2, r3
 800dc1a:	4b13      	ldr	r3, [pc, #76]	; (800dc68 <FATFS_LinkDriverEx+0x94>)
 800dc1c:	4413      	add	r3, r2
 800dc1e:	79fa      	ldrb	r2, [r7, #7]
 800dc20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dc22:	4b11      	ldr	r3, [pc, #68]	; (800dc68 <FATFS_LinkDriverEx+0x94>)
 800dc24:	7a5b      	ldrb	r3, [r3, #9]
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	1c5a      	adds	r2, r3, #1
 800dc2a:	b2d1      	uxtb	r1, r2
 800dc2c:	4a0e      	ldr	r2, [pc, #56]	; (800dc68 <FATFS_LinkDriverEx+0x94>)
 800dc2e:	7251      	strb	r1, [r2, #9]
 800dc30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dc32:	7dbb      	ldrb	r3, [r7, #22]
 800dc34:	3330      	adds	r3, #48	; 0x30
 800dc36:	b2da      	uxtb	r2, r3
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	223a      	movs	r2, #58	; 0x3a
 800dc42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	3302      	adds	r3, #2
 800dc48:	222f      	movs	r2, #47	; 0x2f
 800dc4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	3303      	adds	r3, #3
 800dc50:	2200      	movs	r2, #0
 800dc52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dc54:	2300      	movs	r3, #0
 800dc56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dc58:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	371c      	adds	r7, #28
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr
 800dc66:	bf00      	nop
 800dc68:	200014dc 	.word	0x200014dc

0800dc6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dc76:	2200      	movs	r2, #0
 800dc78:	6839      	ldr	r1, [r7, #0]
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f7ff ffaa 	bl	800dbd4 <FATFS_LinkDriverEx>
 800dc80:	4603      	mov	r3, r0
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3708      	adds	r7, #8
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
	...

0800dc8c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b085      	sub	sp, #20
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	4603      	mov	r3, r0
 800dc94:	6039      	str	r1, [r7, #0]
 800dc96:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dc98:	88fb      	ldrh	r3, [r7, #6]
 800dc9a:	2b7f      	cmp	r3, #127	; 0x7f
 800dc9c:	d802      	bhi.n	800dca4 <ff_convert+0x18>
		c = chr;
 800dc9e:	88fb      	ldrh	r3, [r7, #6]
 800dca0:	81fb      	strh	r3, [r7, #14]
 800dca2:	e025      	b.n	800dcf0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00b      	beq.n	800dcc2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dcaa:	88fb      	ldrh	r3, [r7, #6]
 800dcac:	2bff      	cmp	r3, #255	; 0xff
 800dcae:	d805      	bhi.n	800dcbc <ff_convert+0x30>
 800dcb0:	88fb      	ldrh	r3, [r7, #6]
 800dcb2:	3b80      	subs	r3, #128	; 0x80
 800dcb4:	4a12      	ldr	r2, [pc, #72]	; (800dd00 <ff_convert+0x74>)
 800dcb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcba:	e000      	b.n	800dcbe <ff_convert+0x32>
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	81fb      	strh	r3, [r7, #14]
 800dcc0:	e016      	b.n	800dcf0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	81fb      	strh	r3, [r7, #14]
 800dcc6:	e009      	b.n	800dcdc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800dcc8:	89fb      	ldrh	r3, [r7, #14]
 800dcca:	4a0d      	ldr	r2, [pc, #52]	; (800dd00 <ff_convert+0x74>)
 800dccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcd0:	88fa      	ldrh	r2, [r7, #6]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d006      	beq.n	800dce4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800dcd6:	89fb      	ldrh	r3, [r7, #14]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	81fb      	strh	r3, [r7, #14]
 800dcdc:	89fb      	ldrh	r3, [r7, #14]
 800dcde:	2b7f      	cmp	r3, #127	; 0x7f
 800dce0:	d9f2      	bls.n	800dcc8 <ff_convert+0x3c>
 800dce2:	e000      	b.n	800dce6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800dce4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800dce6:	89fb      	ldrh	r3, [r7, #14]
 800dce8:	3380      	adds	r3, #128	; 0x80
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800dcf0:	89fb      	ldrh	r3, [r7, #14]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3714      	adds	r7, #20
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfc:	4770      	bx	lr
 800dcfe:	bf00      	nop
 800dd00:	08012b58 	.word	0x08012b58

0800dd04 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b087      	sub	sp, #28
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800dd0e:	88fb      	ldrh	r3, [r7, #6]
 800dd10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd14:	d201      	bcs.n	800dd1a <ff_wtoupper+0x16>
 800dd16:	4b3e      	ldr	r3, [pc, #248]	; (800de10 <ff_wtoupper+0x10c>)
 800dd18:	e000      	b.n	800dd1c <ff_wtoupper+0x18>
 800dd1a:	4b3e      	ldr	r3, [pc, #248]	; (800de14 <ff_wtoupper+0x110>)
 800dd1c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	1c9a      	adds	r2, r3, #2
 800dd22:	617a      	str	r2, [r7, #20]
 800dd24:	881b      	ldrh	r3, [r3, #0]
 800dd26:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800dd28:	8a7b      	ldrh	r3, [r7, #18]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d068      	beq.n	800de00 <ff_wtoupper+0xfc>
 800dd2e:	88fa      	ldrh	r2, [r7, #6]
 800dd30:	8a7b      	ldrh	r3, [r7, #18]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d364      	bcc.n	800de00 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	1c9a      	adds	r2, r3, #2
 800dd3a:	617a      	str	r2, [r7, #20]
 800dd3c:	881b      	ldrh	r3, [r3, #0]
 800dd3e:	823b      	strh	r3, [r7, #16]
 800dd40:	8a3b      	ldrh	r3, [r7, #16]
 800dd42:	0a1b      	lsrs	r3, r3, #8
 800dd44:	81fb      	strh	r3, [r7, #14]
 800dd46:	8a3b      	ldrh	r3, [r7, #16]
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800dd4c:	88fa      	ldrh	r2, [r7, #6]
 800dd4e:	8a79      	ldrh	r1, [r7, #18]
 800dd50:	8a3b      	ldrh	r3, [r7, #16]
 800dd52:	440b      	add	r3, r1
 800dd54:	429a      	cmp	r2, r3
 800dd56:	da49      	bge.n	800ddec <ff_wtoupper+0xe8>
			switch (cmd) {
 800dd58:	89fb      	ldrh	r3, [r7, #14]
 800dd5a:	2b08      	cmp	r3, #8
 800dd5c:	d84f      	bhi.n	800ddfe <ff_wtoupper+0xfa>
 800dd5e:	a201      	add	r2, pc, #4	; (adr r2, 800dd64 <ff_wtoupper+0x60>)
 800dd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd64:	0800dd89 	.word	0x0800dd89
 800dd68:	0800dd9b 	.word	0x0800dd9b
 800dd6c:	0800ddb1 	.word	0x0800ddb1
 800dd70:	0800ddb9 	.word	0x0800ddb9
 800dd74:	0800ddc1 	.word	0x0800ddc1
 800dd78:	0800ddc9 	.word	0x0800ddc9
 800dd7c:	0800ddd1 	.word	0x0800ddd1
 800dd80:	0800ddd9 	.word	0x0800ddd9
 800dd84:	0800dde1 	.word	0x0800dde1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800dd88:	88fa      	ldrh	r2, [r7, #6]
 800dd8a:	8a7b      	ldrh	r3, [r7, #18]
 800dd8c:	1ad3      	subs	r3, r2, r3
 800dd8e:	005b      	lsls	r3, r3, #1
 800dd90:	697a      	ldr	r2, [r7, #20]
 800dd92:	4413      	add	r3, r2
 800dd94:	881b      	ldrh	r3, [r3, #0]
 800dd96:	80fb      	strh	r3, [r7, #6]
 800dd98:	e027      	b.n	800ddea <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800dd9a:	88fa      	ldrh	r2, [r7, #6]
 800dd9c:	8a7b      	ldrh	r3, [r7, #18]
 800dd9e:	1ad3      	subs	r3, r2, r3
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	f003 0301 	and.w	r3, r3, #1
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	88fa      	ldrh	r2, [r7, #6]
 800ddaa:	1ad3      	subs	r3, r2, r3
 800ddac:	80fb      	strh	r3, [r7, #6]
 800ddae:	e01c      	b.n	800ddea <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ddb0:	88fb      	ldrh	r3, [r7, #6]
 800ddb2:	3b10      	subs	r3, #16
 800ddb4:	80fb      	strh	r3, [r7, #6]
 800ddb6:	e018      	b.n	800ddea <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ddb8:	88fb      	ldrh	r3, [r7, #6]
 800ddba:	3b20      	subs	r3, #32
 800ddbc:	80fb      	strh	r3, [r7, #6]
 800ddbe:	e014      	b.n	800ddea <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ddc0:	88fb      	ldrh	r3, [r7, #6]
 800ddc2:	3b30      	subs	r3, #48	; 0x30
 800ddc4:	80fb      	strh	r3, [r7, #6]
 800ddc6:	e010      	b.n	800ddea <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ddc8:	88fb      	ldrh	r3, [r7, #6]
 800ddca:	3b1a      	subs	r3, #26
 800ddcc:	80fb      	strh	r3, [r7, #6]
 800ddce:	e00c      	b.n	800ddea <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ddd0:	88fb      	ldrh	r3, [r7, #6]
 800ddd2:	3308      	adds	r3, #8
 800ddd4:	80fb      	strh	r3, [r7, #6]
 800ddd6:	e008      	b.n	800ddea <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ddd8:	88fb      	ldrh	r3, [r7, #6]
 800ddda:	3b50      	subs	r3, #80	; 0x50
 800dddc:	80fb      	strh	r3, [r7, #6]
 800ddde:	e004      	b.n	800ddea <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800dde0:	88fb      	ldrh	r3, [r7, #6]
 800dde2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800dde6:	80fb      	strh	r3, [r7, #6]
 800dde8:	bf00      	nop
			}
			break;
 800ddea:	e008      	b.n	800ddfe <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ddec:	89fb      	ldrh	r3, [r7, #14]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d195      	bne.n	800dd1e <ff_wtoupper+0x1a>
 800ddf2:	8a3b      	ldrh	r3, [r7, #16]
 800ddf4:	005b      	lsls	r3, r3, #1
 800ddf6:	697a      	ldr	r2, [r7, #20]
 800ddf8:	4413      	add	r3, r2
 800ddfa:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ddfc:	e78f      	b.n	800dd1e <ff_wtoupper+0x1a>
			break;
 800ddfe:	bf00      	nop
	}

	return chr;
 800de00:	88fb      	ldrh	r3, [r7, #6]
}
 800de02:	4618      	mov	r0, r3
 800de04:	371c      	adds	r7, #28
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	08012c58 	.word	0x08012c58
 800de14:	08012e4c 	.word	0x08012e4c

0800de18 <__errno>:
 800de18:	4b01      	ldr	r3, [pc, #4]	; (800de20 <__errno+0x8>)
 800de1a:	6818      	ldr	r0, [r3, #0]
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop
 800de20:	20000024 	.word	0x20000024

0800de24 <__libc_init_array>:
 800de24:	b570      	push	{r4, r5, r6, lr}
 800de26:	4d0d      	ldr	r5, [pc, #52]	; (800de5c <__libc_init_array+0x38>)
 800de28:	4c0d      	ldr	r4, [pc, #52]	; (800de60 <__libc_init_array+0x3c>)
 800de2a:	1b64      	subs	r4, r4, r5
 800de2c:	10a4      	asrs	r4, r4, #2
 800de2e:	2600      	movs	r6, #0
 800de30:	42a6      	cmp	r6, r4
 800de32:	d109      	bne.n	800de48 <__libc_init_array+0x24>
 800de34:	4d0b      	ldr	r5, [pc, #44]	; (800de64 <__libc_init_array+0x40>)
 800de36:	4c0c      	ldr	r4, [pc, #48]	; (800de68 <__libc_init_array+0x44>)
 800de38:	f004 fca0 	bl	801277c <_init>
 800de3c:	1b64      	subs	r4, r4, r5
 800de3e:	10a4      	asrs	r4, r4, #2
 800de40:	2600      	movs	r6, #0
 800de42:	42a6      	cmp	r6, r4
 800de44:	d105      	bne.n	800de52 <__libc_init_array+0x2e>
 800de46:	bd70      	pop	{r4, r5, r6, pc}
 800de48:	f855 3b04 	ldr.w	r3, [r5], #4
 800de4c:	4798      	blx	r3
 800de4e:	3601      	adds	r6, #1
 800de50:	e7ee      	b.n	800de30 <__libc_init_array+0xc>
 800de52:	f855 3b04 	ldr.w	r3, [r5], #4
 800de56:	4798      	blx	r3
 800de58:	3601      	adds	r6, #1
 800de5a:	e7f2      	b.n	800de42 <__libc_init_array+0x1e>
 800de5c:	080133b8 	.word	0x080133b8
 800de60:	080133b8 	.word	0x080133b8
 800de64:	080133b8 	.word	0x080133b8
 800de68:	080133bc 	.word	0x080133bc

0800de6c <memcpy>:
 800de6c:	440a      	add	r2, r1
 800de6e:	4291      	cmp	r1, r2
 800de70:	f100 33ff 	add.w	r3, r0, #4294967295
 800de74:	d100      	bne.n	800de78 <memcpy+0xc>
 800de76:	4770      	bx	lr
 800de78:	b510      	push	{r4, lr}
 800de7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de82:	4291      	cmp	r1, r2
 800de84:	d1f9      	bne.n	800de7a <memcpy+0xe>
 800de86:	bd10      	pop	{r4, pc}

0800de88 <memset>:
 800de88:	4402      	add	r2, r0
 800de8a:	4603      	mov	r3, r0
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d100      	bne.n	800de92 <memset+0xa>
 800de90:	4770      	bx	lr
 800de92:	f803 1b01 	strb.w	r1, [r3], #1
 800de96:	e7f9      	b.n	800de8c <memset+0x4>

0800de98 <__cvt>:
 800de98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de9c:	ec55 4b10 	vmov	r4, r5, d0
 800dea0:	2d00      	cmp	r5, #0
 800dea2:	460e      	mov	r6, r1
 800dea4:	4619      	mov	r1, r3
 800dea6:	462b      	mov	r3, r5
 800dea8:	bfbb      	ittet	lt
 800deaa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800deae:	461d      	movlt	r5, r3
 800deb0:	2300      	movge	r3, #0
 800deb2:	232d      	movlt	r3, #45	; 0x2d
 800deb4:	700b      	strb	r3, [r1, #0]
 800deb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800deb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800debc:	4691      	mov	r9, r2
 800debe:	f023 0820 	bic.w	r8, r3, #32
 800dec2:	bfbc      	itt	lt
 800dec4:	4622      	movlt	r2, r4
 800dec6:	4614      	movlt	r4, r2
 800dec8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800decc:	d005      	beq.n	800deda <__cvt+0x42>
 800dece:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ded2:	d100      	bne.n	800ded6 <__cvt+0x3e>
 800ded4:	3601      	adds	r6, #1
 800ded6:	2102      	movs	r1, #2
 800ded8:	e000      	b.n	800dedc <__cvt+0x44>
 800deda:	2103      	movs	r1, #3
 800dedc:	ab03      	add	r3, sp, #12
 800dede:	9301      	str	r3, [sp, #4]
 800dee0:	ab02      	add	r3, sp, #8
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	ec45 4b10 	vmov	d0, r4, r5
 800dee8:	4653      	mov	r3, sl
 800deea:	4632      	mov	r2, r6
 800deec:	f001 fe9c 	bl	800fc28 <_dtoa_r>
 800def0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800def4:	4607      	mov	r7, r0
 800def6:	d102      	bne.n	800defe <__cvt+0x66>
 800def8:	f019 0f01 	tst.w	r9, #1
 800defc:	d022      	beq.n	800df44 <__cvt+0xac>
 800defe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df02:	eb07 0906 	add.w	r9, r7, r6
 800df06:	d110      	bne.n	800df2a <__cvt+0x92>
 800df08:	783b      	ldrb	r3, [r7, #0]
 800df0a:	2b30      	cmp	r3, #48	; 0x30
 800df0c:	d10a      	bne.n	800df24 <__cvt+0x8c>
 800df0e:	2200      	movs	r2, #0
 800df10:	2300      	movs	r3, #0
 800df12:	4620      	mov	r0, r4
 800df14:	4629      	mov	r1, r5
 800df16:	f7f2 fde7 	bl	8000ae8 <__aeabi_dcmpeq>
 800df1a:	b918      	cbnz	r0, 800df24 <__cvt+0x8c>
 800df1c:	f1c6 0601 	rsb	r6, r6, #1
 800df20:	f8ca 6000 	str.w	r6, [sl]
 800df24:	f8da 3000 	ldr.w	r3, [sl]
 800df28:	4499      	add	r9, r3
 800df2a:	2200      	movs	r2, #0
 800df2c:	2300      	movs	r3, #0
 800df2e:	4620      	mov	r0, r4
 800df30:	4629      	mov	r1, r5
 800df32:	f7f2 fdd9 	bl	8000ae8 <__aeabi_dcmpeq>
 800df36:	b108      	cbz	r0, 800df3c <__cvt+0xa4>
 800df38:	f8cd 900c 	str.w	r9, [sp, #12]
 800df3c:	2230      	movs	r2, #48	; 0x30
 800df3e:	9b03      	ldr	r3, [sp, #12]
 800df40:	454b      	cmp	r3, r9
 800df42:	d307      	bcc.n	800df54 <__cvt+0xbc>
 800df44:	9b03      	ldr	r3, [sp, #12]
 800df46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df48:	1bdb      	subs	r3, r3, r7
 800df4a:	4638      	mov	r0, r7
 800df4c:	6013      	str	r3, [r2, #0]
 800df4e:	b004      	add	sp, #16
 800df50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df54:	1c59      	adds	r1, r3, #1
 800df56:	9103      	str	r1, [sp, #12]
 800df58:	701a      	strb	r2, [r3, #0]
 800df5a:	e7f0      	b.n	800df3e <__cvt+0xa6>

0800df5c <__exponent>:
 800df5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df5e:	4603      	mov	r3, r0
 800df60:	2900      	cmp	r1, #0
 800df62:	bfb8      	it	lt
 800df64:	4249      	neglt	r1, r1
 800df66:	f803 2b02 	strb.w	r2, [r3], #2
 800df6a:	bfb4      	ite	lt
 800df6c:	222d      	movlt	r2, #45	; 0x2d
 800df6e:	222b      	movge	r2, #43	; 0x2b
 800df70:	2909      	cmp	r1, #9
 800df72:	7042      	strb	r2, [r0, #1]
 800df74:	dd2a      	ble.n	800dfcc <__exponent+0x70>
 800df76:	f10d 0407 	add.w	r4, sp, #7
 800df7a:	46a4      	mov	ip, r4
 800df7c:	270a      	movs	r7, #10
 800df7e:	46a6      	mov	lr, r4
 800df80:	460a      	mov	r2, r1
 800df82:	fb91 f6f7 	sdiv	r6, r1, r7
 800df86:	fb07 1516 	mls	r5, r7, r6, r1
 800df8a:	3530      	adds	r5, #48	; 0x30
 800df8c:	2a63      	cmp	r2, #99	; 0x63
 800df8e:	f104 34ff 	add.w	r4, r4, #4294967295
 800df92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800df96:	4631      	mov	r1, r6
 800df98:	dcf1      	bgt.n	800df7e <__exponent+0x22>
 800df9a:	3130      	adds	r1, #48	; 0x30
 800df9c:	f1ae 0502 	sub.w	r5, lr, #2
 800dfa0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dfa4:	1c44      	adds	r4, r0, #1
 800dfa6:	4629      	mov	r1, r5
 800dfa8:	4561      	cmp	r1, ip
 800dfaa:	d30a      	bcc.n	800dfc2 <__exponent+0x66>
 800dfac:	f10d 0209 	add.w	r2, sp, #9
 800dfb0:	eba2 020e 	sub.w	r2, r2, lr
 800dfb4:	4565      	cmp	r5, ip
 800dfb6:	bf88      	it	hi
 800dfb8:	2200      	movhi	r2, #0
 800dfba:	4413      	add	r3, r2
 800dfbc:	1a18      	subs	r0, r3, r0
 800dfbe:	b003      	add	sp, #12
 800dfc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfc6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dfca:	e7ed      	b.n	800dfa8 <__exponent+0x4c>
 800dfcc:	2330      	movs	r3, #48	; 0x30
 800dfce:	3130      	adds	r1, #48	; 0x30
 800dfd0:	7083      	strb	r3, [r0, #2]
 800dfd2:	70c1      	strb	r1, [r0, #3]
 800dfd4:	1d03      	adds	r3, r0, #4
 800dfd6:	e7f1      	b.n	800dfbc <__exponent+0x60>

0800dfd8 <_printf_float>:
 800dfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfdc:	ed2d 8b02 	vpush	{d8}
 800dfe0:	b08d      	sub	sp, #52	; 0x34
 800dfe2:	460c      	mov	r4, r1
 800dfe4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dfe8:	4616      	mov	r6, r2
 800dfea:	461f      	mov	r7, r3
 800dfec:	4605      	mov	r5, r0
 800dfee:	f003 f941 	bl	8011274 <_localeconv_r>
 800dff2:	f8d0 a000 	ldr.w	sl, [r0]
 800dff6:	4650      	mov	r0, sl
 800dff8:	f7f2 f8f4 	bl	80001e4 <strlen>
 800dffc:	2300      	movs	r3, #0
 800dffe:	930a      	str	r3, [sp, #40]	; 0x28
 800e000:	6823      	ldr	r3, [r4, #0]
 800e002:	9305      	str	r3, [sp, #20]
 800e004:	f8d8 3000 	ldr.w	r3, [r8]
 800e008:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e00c:	3307      	adds	r3, #7
 800e00e:	f023 0307 	bic.w	r3, r3, #7
 800e012:	f103 0208 	add.w	r2, r3, #8
 800e016:	f8c8 2000 	str.w	r2, [r8]
 800e01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e022:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e026:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e02a:	9307      	str	r3, [sp, #28]
 800e02c:	f8cd 8018 	str.w	r8, [sp, #24]
 800e030:	ee08 0a10 	vmov	s16, r0
 800e034:	4b9f      	ldr	r3, [pc, #636]	; (800e2b4 <_printf_float+0x2dc>)
 800e036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e03a:	f04f 32ff 	mov.w	r2, #4294967295
 800e03e:	f7f2 fd85 	bl	8000b4c <__aeabi_dcmpun>
 800e042:	bb88      	cbnz	r0, 800e0a8 <_printf_float+0xd0>
 800e044:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e048:	4b9a      	ldr	r3, [pc, #616]	; (800e2b4 <_printf_float+0x2dc>)
 800e04a:	f04f 32ff 	mov.w	r2, #4294967295
 800e04e:	f7f2 fd5f 	bl	8000b10 <__aeabi_dcmple>
 800e052:	bb48      	cbnz	r0, 800e0a8 <_printf_float+0xd0>
 800e054:	2200      	movs	r2, #0
 800e056:	2300      	movs	r3, #0
 800e058:	4640      	mov	r0, r8
 800e05a:	4649      	mov	r1, r9
 800e05c:	f7f2 fd4e 	bl	8000afc <__aeabi_dcmplt>
 800e060:	b110      	cbz	r0, 800e068 <_printf_float+0x90>
 800e062:	232d      	movs	r3, #45	; 0x2d
 800e064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e068:	4b93      	ldr	r3, [pc, #588]	; (800e2b8 <_printf_float+0x2e0>)
 800e06a:	4894      	ldr	r0, [pc, #592]	; (800e2bc <_printf_float+0x2e4>)
 800e06c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e070:	bf94      	ite	ls
 800e072:	4698      	movls	r8, r3
 800e074:	4680      	movhi	r8, r0
 800e076:	2303      	movs	r3, #3
 800e078:	6123      	str	r3, [r4, #16]
 800e07a:	9b05      	ldr	r3, [sp, #20]
 800e07c:	f023 0204 	bic.w	r2, r3, #4
 800e080:	6022      	str	r2, [r4, #0]
 800e082:	f04f 0900 	mov.w	r9, #0
 800e086:	9700      	str	r7, [sp, #0]
 800e088:	4633      	mov	r3, r6
 800e08a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e08c:	4621      	mov	r1, r4
 800e08e:	4628      	mov	r0, r5
 800e090:	f000 f9d8 	bl	800e444 <_printf_common>
 800e094:	3001      	adds	r0, #1
 800e096:	f040 8090 	bne.w	800e1ba <_printf_float+0x1e2>
 800e09a:	f04f 30ff 	mov.w	r0, #4294967295
 800e09e:	b00d      	add	sp, #52	; 0x34
 800e0a0:	ecbd 8b02 	vpop	{d8}
 800e0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a8:	4642      	mov	r2, r8
 800e0aa:	464b      	mov	r3, r9
 800e0ac:	4640      	mov	r0, r8
 800e0ae:	4649      	mov	r1, r9
 800e0b0:	f7f2 fd4c 	bl	8000b4c <__aeabi_dcmpun>
 800e0b4:	b140      	cbz	r0, 800e0c8 <_printf_float+0xf0>
 800e0b6:	464b      	mov	r3, r9
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	bfbc      	itt	lt
 800e0bc:	232d      	movlt	r3, #45	; 0x2d
 800e0be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e0c2:	487f      	ldr	r0, [pc, #508]	; (800e2c0 <_printf_float+0x2e8>)
 800e0c4:	4b7f      	ldr	r3, [pc, #508]	; (800e2c4 <_printf_float+0x2ec>)
 800e0c6:	e7d1      	b.n	800e06c <_printf_float+0x94>
 800e0c8:	6863      	ldr	r3, [r4, #4]
 800e0ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e0ce:	9206      	str	r2, [sp, #24]
 800e0d0:	1c5a      	adds	r2, r3, #1
 800e0d2:	d13f      	bne.n	800e154 <_printf_float+0x17c>
 800e0d4:	2306      	movs	r3, #6
 800e0d6:	6063      	str	r3, [r4, #4]
 800e0d8:	9b05      	ldr	r3, [sp, #20]
 800e0da:	6861      	ldr	r1, [r4, #4]
 800e0dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	9303      	str	r3, [sp, #12]
 800e0e4:	ab0a      	add	r3, sp, #40	; 0x28
 800e0e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e0ea:	ab09      	add	r3, sp, #36	; 0x24
 800e0ec:	ec49 8b10 	vmov	d0, r8, r9
 800e0f0:	9300      	str	r3, [sp, #0]
 800e0f2:	6022      	str	r2, [r4, #0]
 800e0f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e0f8:	4628      	mov	r0, r5
 800e0fa:	f7ff fecd 	bl	800de98 <__cvt>
 800e0fe:	9b06      	ldr	r3, [sp, #24]
 800e100:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e102:	2b47      	cmp	r3, #71	; 0x47
 800e104:	4680      	mov	r8, r0
 800e106:	d108      	bne.n	800e11a <_printf_float+0x142>
 800e108:	1cc8      	adds	r0, r1, #3
 800e10a:	db02      	blt.n	800e112 <_printf_float+0x13a>
 800e10c:	6863      	ldr	r3, [r4, #4]
 800e10e:	4299      	cmp	r1, r3
 800e110:	dd41      	ble.n	800e196 <_printf_float+0x1be>
 800e112:	f1ab 0b02 	sub.w	fp, fp, #2
 800e116:	fa5f fb8b 	uxtb.w	fp, fp
 800e11a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e11e:	d820      	bhi.n	800e162 <_printf_float+0x18a>
 800e120:	3901      	subs	r1, #1
 800e122:	465a      	mov	r2, fp
 800e124:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e128:	9109      	str	r1, [sp, #36]	; 0x24
 800e12a:	f7ff ff17 	bl	800df5c <__exponent>
 800e12e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e130:	1813      	adds	r3, r2, r0
 800e132:	2a01      	cmp	r2, #1
 800e134:	4681      	mov	r9, r0
 800e136:	6123      	str	r3, [r4, #16]
 800e138:	dc02      	bgt.n	800e140 <_printf_float+0x168>
 800e13a:	6822      	ldr	r2, [r4, #0]
 800e13c:	07d2      	lsls	r2, r2, #31
 800e13e:	d501      	bpl.n	800e144 <_printf_float+0x16c>
 800e140:	3301      	adds	r3, #1
 800e142:	6123      	str	r3, [r4, #16]
 800e144:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d09c      	beq.n	800e086 <_printf_float+0xae>
 800e14c:	232d      	movs	r3, #45	; 0x2d
 800e14e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e152:	e798      	b.n	800e086 <_printf_float+0xae>
 800e154:	9a06      	ldr	r2, [sp, #24]
 800e156:	2a47      	cmp	r2, #71	; 0x47
 800e158:	d1be      	bne.n	800e0d8 <_printf_float+0x100>
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d1bc      	bne.n	800e0d8 <_printf_float+0x100>
 800e15e:	2301      	movs	r3, #1
 800e160:	e7b9      	b.n	800e0d6 <_printf_float+0xfe>
 800e162:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e166:	d118      	bne.n	800e19a <_printf_float+0x1c2>
 800e168:	2900      	cmp	r1, #0
 800e16a:	6863      	ldr	r3, [r4, #4]
 800e16c:	dd0b      	ble.n	800e186 <_printf_float+0x1ae>
 800e16e:	6121      	str	r1, [r4, #16]
 800e170:	b913      	cbnz	r3, 800e178 <_printf_float+0x1a0>
 800e172:	6822      	ldr	r2, [r4, #0]
 800e174:	07d0      	lsls	r0, r2, #31
 800e176:	d502      	bpl.n	800e17e <_printf_float+0x1a6>
 800e178:	3301      	adds	r3, #1
 800e17a:	440b      	add	r3, r1
 800e17c:	6123      	str	r3, [r4, #16]
 800e17e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e180:	f04f 0900 	mov.w	r9, #0
 800e184:	e7de      	b.n	800e144 <_printf_float+0x16c>
 800e186:	b913      	cbnz	r3, 800e18e <_printf_float+0x1b6>
 800e188:	6822      	ldr	r2, [r4, #0]
 800e18a:	07d2      	lsls	r2, r2, #31
 800e18c:	d501      	bpl.n	800e192 <_printf_float+0x1ba>
 800e18e:	3302      	adds	r3, #2
 800e190:	e7f4      	b.n	800e17c <_printf_float+0x1a4>
 800e192:	2301      	movs	r3, #1
 800e194:	e7f2      	b.n	800e17c <_printf_float+0x1a4>
 800e196:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e19a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e19c:	4299      	cmp	r1, r3
 800e19e:	db05      	blt.n	800e1ac <_printf_float+0x1d4>
 800e1a0:	6823      	ldr	r3, [r4, #0]
 800e1a2:	6121      	str	r1, [r4, #16]
 800e1a4:	07d8      	lsls	r0, r3, #31
 800e1a6:	d5ea      	bpl.n	800e17e <_printf_float+0x1a6>
 800e1a8:	1c4b      	adds	r3, r1, #1
 800e1aa:	e7e7      	b.n	800e17c <_printf_float+0x1a4>
 800e1ac:	2900      	cmp	r1, #0
 800e1ae:	bfd4      	ite	le
 800e1b0:	f1c1 0202 	rsble	r2, r1, #2
 800e1b4:	2201      	movgt	r2, #1
 800e1b6:	4413      	add	r3, r2
 800e1b8:	e7e0      	b.n	800e17c <_printf_float+0x1a4>
 800e1ba:	6823      	ldr	r3, [r4, #0]
 800e1bc:	055a      	lsls	r2, r3, #21
 800e1be:	d407      	bmi.n	800e1d0 <_printf_float+0x1f8>
 800e1c0:	6923      	ldr	r3, [r4, #16]
 800e1c2:	4642      	mov	r2, r8
 800e1c4:	4631      	mov	r1, r6
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	47b8      	blx	r7
 800e1ca:	3001      	adds	r0, #1
 800e1cc:	d12c      	bne.n	800e228 <_printf_float+0x250>
 800e1ce:	e764      	b.n	800e09a <_printf_float+0xc2>
 800e1d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e1d4:	f240 80e0 	bls.w	800e398 <_printf_float+0x3c0>
 800e1d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e1dc:	2200      	movs	r2, #0
 800e1de:	2300      	movs	r3, #0
 800e1e0:	f7f2 fc82 	bl	8000ae8 <__aeabi_dcmpeq>
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	d034      	beq.n	800e252 <_printf_float+0x27a>
 800e1e8:	4a37      	ldr	r2, [pc, #220]	; (800e2c8 <_printf_float+0x2f0>)
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	4631      	mov	r1, r6
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	47b8      	blx	r7
 800e1f2:	3001      	adds	r0, #1
 800e1f4:	f43f af51 	beq.w	800e09a <_printf_float+0xc2>
 800e1f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	db02      	blt.n	800e206 <_printf_float+0x22e>
 800e200:	6823      	ldr	r3, [r4, #0]
 800e202:	07d8      	lsls	r0, r3, #31
 800e204:	d510      	bpl.n	800e228 <_printf_float+0x250>
 800e206:	ee18 3a10 	vmov	r3, s16
 800e20a:	4652      	mov	r2, sl
 800e20c:	4631      	mov	r1, r6
 800e20e:	4628      	mov	r0, r5
 800e210:	47b8      	blx	r7
 800e212:	3001      	adds	r0, #1
 800e214:	f43f af41 	beq.w	800e09a <_printf_float+0xc2>
 800e218:	f04f 0800 	mov.w	r8, #0
 800e21c:	f104 091a 	add.w	r9, r4, #26
 800e220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e222:	3b01      	subs	r3, #1
 800e224:	4543      	cmp	r3, r8
 800e226:	dc09      	bgt.n	800e23c <_printf_float+0x264>
 800e228:	6823      	ldr	r3, [r4, #0]
 800e22a:	079b      	lsls	r3, r3, #30
 800e22c:	f100 8105 	bmi.w	800e43a <_printf_float+0x462>
 800e230:	68e0      	ldr	r0, [r4, #12]
 800e232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e234:	4298      	cmp	r0, r3
 800e236:	bfb8      	it	lt
 800e238:	4618      	movlt	r0, r3
 800e23a:	e730      	b.n	800e09e <_printf_float+0xc6>
 800e23c:	2301      	movs	r3, #1
 800e23e:	464a      	mov	r2, r9
 800e240:	4631      	mov	r1, r6
 800e242:	4628      	mov	r0, r5
 800e244:	47b8      	blx	r7
 800e246:	3001      	adds	r0, #1
 800e248:	f43f af27 	beq.w	800e09a <_printf_float+0xc2>
 800e24c:	f108 0801 	add.w	r8, r8, #1
 800e250:	e7e6      	b.n	800e220 <_printf_float+0x248>
 800e252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e254:	2b00      	cmp	r3, #0
 800e256:	dc39      	bgt.n	800e2cc <_printf_float+0x2f4>
 800e258:	4a1b      	ldr	r2, [pc, #108]	; (800e2c8 <_printf_float+0x2f0>)
 800e25a:	2301      	movs	r3, #1
 800e25c:	4631      	mov	r1, r6
 800e25e:	4628      	mov	r0, r5
 800e260:	47b8      	blx	r7
 800e262:	3001      	adds	r0, #1
 800e264:	f43f af19 	beq.w	800e09a <_printf_float+0xc2>
 800e268:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e26c:	4313      	orrs	r3, r2
 800e26e:	d102      	bne.n	800e276 <_printf_float+0x29e>
 800e270:	6823      	ldr	r3, [r4, #0]
 800e272:	07d9      	lsls	r1, r3, #31
 800e274:	d5d8      	bpl.n	800e228 <_printf_float+0x250>
 800e276:	ee18 3a10 	vmov	r3, s16
 800e27a:	4652      	mov	r2, sl
 800e27c:	4631      	mov	r1, r6
 800e27e:	4628      	mov	r0, r5
 800e280:	47b8      	blx	r7
 800e282:	3001      	adds	r0, #1
 800e284:	f43f af09 	beq.w	800e09a <_printf_float+0xc2>
 800e288:	f04f 0900 	mov.w	r9, #0
 800e28c:	f104 0a1a 	add.w	sl, r4, #26
 800e290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e292:	425b      	negs	r3, r3
 800e294:	454b      	cmp	r3, r9
 800e296:	dc01      	bgt.n	800e29c <_printf_float+0x2c4>
 800e298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e29a:	e792      	b.n	800e1c2 <_printf_float+0x1ea>
 800e29c:	2301      	movs	r3, #1
 800e29e:	4652      	mov	r2, sl
 800e2a0:	4631      	mov	r1, r6
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	47b8      	blx	r7
 800e2a6:	3001      	adds	r0, #1
 800e2a8:	f43f aef7 	beq.w	800e09a <_printf_float+0xc2>
 800e2ac:	f109 0901 	add.w	r9, r9, #1
 800e2b0:	e7ee      	b.n	800e290 <_printf_float+0x2b8>
 800e2b2:	bf00      	nop
 800e2b4:	7fefffff 	.word	0x7fefffff
 800e2b8:	08012f0c 	.word	0x08012f0c
 800e2bc:	08012f10 	.word	0x08012f10
 800e2c0:	08012f18 	.word	0x08012f18
 800e2c4:	08012f14 	.word	0x08012f14
 800e2c8:	08012f1c 	.word	0x08012f1c
 800e2cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	bfa8      	it	ge
 800e2d4:	461a      	movge	r2, r3
 800e2d6:	2a00      	cmp	r2, #0
 800e2d8:	4691      	mov	r9, r2
 800e2da:	dc37      	bgt.n	800e34c <_printf_float+0x374>
 800e2dc:	f04f 0b00 	mov.w	fp, #0
 800e2e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2e4:	f104 021a 	add.w	r2, r4, #26
 800e2e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2ea:	9305      	str	r3, [sp, #20]
 800e2ec:	eba3 0309 	sub.w	r3, r3, r9
 800e2f0:	455b      	cmp	r3, fp
 800e2f2:	dc33      	bgt.n	800e35c <_printf_float+0x384>
 800e2f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	db3b      	blt.n	800e374 <_printf_float+0x39c>
 800e2fc:	6823      	ldr	r3, [r4, #0]
 800e2fe:	07da      	lsls	r2, r3, #31
 800e300:	d438      	bmi.n	800e374 <_printf_float+0x39c>
 800e302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e304:	9a05      	ldr	r2, [sp, #20]
 800e306:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e308:	1a9a      	subs	r2, r3, r2
 800e30a:	eba3 0901 	sub.w	r9, r3, r1
 800e30e:	4591      	cmp	r9, r2
 800e310:	bfa8      	it	ge
 800e312:	4691      	movge	r9, r2
 800e314:	f1b9 0f00 	cmp.w	r9, #0
 800e318:	dc35      	bgt.n	800e386 <_printf_float+0x3ae>
 800e31a:	f04f 0800 	mov.w	r8, #0
 800e31e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e322:	f104 0a1a 	add.w	sl, r4, #26
 800e326:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e32a:	1a9b      	subs	r3, r3, r2
 800e32c:	eba3 0309 	sub.w	r3, r3, r9
 800e330:	4543      	cmp	r3, r8
 800e332:	f77f af79 	ble.w	800e228 <_printf_float+0x250>
 800e336:	2301      	movs	r3, #1
 800e338:	4652      	mov	r2, sl
 800e33a:	4631      	mov	r1, r6
 800e33c:	4628      	mov	r0, r5
 800e33e:	47b8      	blx	r7
 800e340:	3001      	adds	r0, #1
 800e342:	f43f aeaa 	beq.w	800e09a <_printf_float+0xc2>
 800e346:	f108 0801 	add.w	r8, r8, #1
 800e34a:	e7ec      	b.n	800e326 <_printf_float+0x34e>
 800e34c:	4613      	mov	r3, r2
 800e34e:	4631      	mov	r1, r6
 800e350:	4642      	mov	r2, r8
 800e352:	4628      	mov	r0, r5
 800e354:	47b8      	blx	r7
 800e356:	3001      	adds	r0, #1
 800e358:	d1c0      	bne.n	800e2dc <_printf_float+0x304>
 800e35a:	e69e      	b.n	800e09a <_printf_float+0xc2>
 800e35c:	2301      	movs	r3, #1
 800e35e:	4631      	mov	r1, r6
 800e360:	4628      	mov	r0, r5
 800e362:	9205      	str	r2, [sp, #20]
 800e364:	47b8      	blx	r7
 800e366:	3001      	adds	r0, #1
 800e368:	f43f ae97 	beq.w	800e09a <_printf_float+0xc2>
 800e36c:	9a05      	ldr	r2, [sp, #20]
 800e36e:	f10b 0b01 	add.w	fp, fp, #1
 800e372:	e7b9      	b.n	800e2e8 <_printf_float+0x310>
 800e374:	ee18 3a10 	vmov	r3, s16
 800e378:	4652      	mov	r2, sl
 800e37a:	4631      	mov	r1, r6
 800e37c:	4628      	mov	r0, r5
 800e37e:	47b8      	blx	r7
 800e380:	3001      	adds	r0, #1
 800e382:	d1be      	bne.n	800e302 <_printf_float+0x32a>
 800e384:	e689      	b.n	800e09a <_printf_float+0xc2>
 800e386:	9a05      	ldr	r2, [sp, #20]
 800e388:	464b      	mov	r3, r9
 800e38a:	4442      	add	r2, r8
 800e38c:	4631      	mov	r1, r6
 800e38e:	4628      	mov	r0, r5
 800e390:	47b8      	blx	r7
 800e392:	3001      	adds	r0, #1
 800e394:	d1c1      	bne.n	800e31a <_printf_float+0x342>
 800e396:	e680      	b.n	800e09a <_printf_float+0xc2>
 800e398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e39a:	2a01      	cmp	r2, #1
 800e39c:	dc01      	bgt.n	800e3a2 <_printf_float+0x3ca>
 800e39e:	07db      	lsls	r3, r3, #31
 800e3a0:	d538      	bpl.n	800e414 <_printf_float+0x43c>
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	4642      	mov	r2, r8
 800e3a6:	4631      	mov	r1, r6
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	47b8      	blx	r7
 800e3ac:	3001      	adds	r0, #1
 800e3ae:	f43f ae74 	beq.w	800e09a <_printf_float+0xc2>
 800e3b2:	ee18 3a10 	vmov	r3, s16
 800e3b6:	4652      	mov	r2, sl
 800e3b8:	4631      	mov	r1, r6
 800e3ba:	4628      	mov	r0, r5
 800e3bc:	47b8      	blx	r7
 800e3be:	3001      	adds	r0, #1
 800e3c0:	f43f ae6b 	beq.w	800e09a <_printf_float+0xc2>
 800e3c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	f7f2 fb8c 	bl	8000ae8 <__aeabi_dcmpeq>
 800e3d0:	b9d8      	cbnz	r0, 800e40a <_printf_float+0x432>
 800e3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3d4:	f108 0201 	add.w	r2, r8, #1
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	4631      	mov	r1, r6
 800e3dc:	4628      	mov	r0, r5
 800e3de:	47b8      	blx	r7
 800e3e0:	3001      	adds	r0, #1
 800e3e2:	d10e      	bne.n	800e402 <_printf_float+0x42a>
 800e3e4:	e659      	b.n	800e09a <_printf_float+0xc2>
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	4652      	mov	r2, sl
 800e3ea:	4631      	mov	r1, r6
 800e3ec:	4628      	mov	r0, r5
 800e3ee:	47b8      	blx	r7
 800e3f0:	3001      	adds	r0, #1
 800e3f2:	f43f ae52 	beq.w	800e09a <_printf_float+0xc2>
 800e3f6:	f108 0801 	add.w	r8, r8, #1
 800e3fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3fc:	3b01      	subs	r3, #1
 800e3fe:	4543      	cmp	r3, r8
 800e400:	dcf1      	bgt.n	800e3e6 <_printf_float+0x40e>
 800e402:	464b      	mov	r3, r9
 800e404:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e408:	e6dc      	b.n	800e1c4 <_printf_float+0x1ec>
 800e40a:	f04f 0800 	mov.w	r8, #0
 800e40e:	f104 0a1a 	add.w	sl, r4, #26
 800e412:	e7f2      	b.n	800e3fa <_printf_float+0x422>
 800e414:	2301      	movs	r3, #1
 800e416:	4642      	mov	r2, r8
 800e418:	e7df      	b.n	800e3da <_printf_float+0x402>
 800e41a:	2301      	movs	r3, #1
 800e41c:	464a      	mov	r2, r9
 800e41e:	4631      	mov	r1, r6
 800e420:	4628      	mov	r0, r5
 800e422:	47b8      	blx	r7
 800e424:	3001      	adds	r0, #1
 800e426:	f43f ae38 	beq.w	800e09a <_printf_float+0xc2>
 800e42a:	f108 0801 	add.w	r8, r8, #1
 800e42e:	68e3      	ldr	r3, [r4, #12]
 800e430:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e432:	1a5b      	subs	r3, r3, r1
 800e434:	4543      	cmp	r3, r8
 800e436:	dcf0      	bgt.n	800e41a <_printf_float+0x442>
 800e438:	e6fa      	b.n	800e230 <_printf_float+0x258>
 800e43a:	f04f 0800 	mov.w	r8, #0
 800e43e:	f104 0919 	add.w	r9, r4, #25
 800e442:	e7f4      	b.n	800e42e <_printf_float+0x456>

0800e444 <_printf_common>:
 800e444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e448:	4616      	mov	r6, r2
 800e44a:	4699      	mov	r9, r3
 800e44c:	688a      	ldr	r2, [r1, #8]
 800e44e:	690b      	ldr	r3, [r1, #16]
 800e450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e454:	4293      	cmp	r3, r2
 800e456:	bfb8      	it	lt
 800e458:	4613      	movlt	r3, r2
 800e45a:	6033      	str	r3, [r6, #0]
 800e45c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e460:	4607      	mov	r7, r0
 800e462:	460c      	mov	r4, r1
 800e464:	b10a      	cbz	r2, 800e46a <_printf_common+0x26>
 800e466:	3301      	adds	r3, #1
 800e468:	6033      	str	r3, [r6, #0]
 800e46a:	6823      	ldr	r3, [r4, #0]
 800e46c:	0699      	lsls	r1, r3, #26
 800e46e:	bf42      	ittt	mi
 800e470:	6833      	ldrmi	r3, [r6, #0]
 800e472:	3302      	addmi	r3, #2
 800e474:	6033      	strmi	r3, [r6, #0]
 800e476:	6825      	ldr	r5, [r4, #0]
 800e478:	f015 0506 	ands.w	r5, r5, #6
 800e47c:	d106      	bne.n	800e48c <_printf_common+0x48>
 800e47e:	f104 0a19 	add.w	sl, r4, #25
 800e482:	68e3      	ldr	r3, [r4, #12]
 800e484:	6832      	ldr	r2, [r6, #0]
 800e486:	1a9b      	subs	r3, r3, r2
 800e488:	42ab      	cmp	r3, r5
 800e48a:	dc26      	bgt.n	800e4da <_printf_common+0x96>
 800e48c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e490:	1e13      	subs	r3, r2, #0
 800e492:	6822      	ldr	r2, [r4, #0]
 800e494:	bf18      	it	ne
 800e496:	2301      	movne	r3, #1
 800e498:	0692      	lsls	r2, r2, #26
 800e49a:	d42b      	bmi.n	800e4f4 <_printf_common+0xb0>
 800e49c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4a0:	4649      	mov	r1, r9
 800e4a2:	4638      	mov	r0, r7
 800e4a4:	47c0      	blx	r8
 800e4a6:	3001      	adds	r0, #1
 800e4a8:	d01e      	beq.n	800e4e8 <_printf_common+0xa4>
 800e4aa:	6823      	ldr	r3, [r4, #0]
 800e4ac:	68e5      	ldr	r5, [r4, #12]
 800e4ae:	6832      	ldr	r2, [r6, #0]
 800e4b0:	f003 0306 	and.w	r3, r3, #6
 800e4b4:	2b04      	cmp	r3, #4
 800e4b6:	bf08      	it	eq
 800e4b8:	1aad      	subeq	r5, r5, r2
 800e4ba:	68a3      	ldr	r3, [r4, #8]
 800e4bc:	6922      	ldr	r2, [r4, #16]
 800e4be:	bf0c      	ite	eq
 800e4c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4c4:	2500      	movne	r5, #0
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	bfc4      	itt	gt
 800e4ca:	1a9b      	subgt	r3, r3, r2
 800e4cc:	18ed      	addgt	r5, r5, r3
 800e4ce:	2600      	movs	r6, #0
 800e4d0:	341a      	adds	r4, #26
 800e4d2:	42b5      	cmp	r5, r6
 800e4d4:	d11a      	bne.n	800e50c <_printf_common+0xc8>
 800e4d6:	2000      	movs	r0, #0
 800e4d8:	e008      	b.n	800e4ec <_printf_common+0xa8>
 800e4da:	2301      	movs	r3, #1
 800e4dc:	4652      	mov	r2, sl
 800e4de:	4649      	mov	r1, r9
 800e4e0:	4638      	mov	r0, r7
 800e4e2:	47c0      	blx	r8
 800e4e4:	3001      	adds	r0, #1
 800e4e6:	d103      	bne.n	800e4f0 <_printf_common+0xac>
 800e4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f0:	3501      	adds	r5, #1
 800e4f2:	e7c6      	b.n	800e482 <_printf_common+0x3e>
 800e4f4:	18e1      	adds	r1, r4, r3
 800e4f6:	1c5a      	adds	r2, r3, #1
 800e4f8:	2030      	movs	r0, #48	; 0x30
 800e4fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e4fe:	4422      	add	r2, r4
 800e500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e508:	3302      	adds	r3, #2
 800e50a:	e7c7      	b.n	800e49c <_printf_common+0x58>
 800e50c:	2301      	movs	r3, #1
 800e50e:	4622      	mov	r2, r4
 800e510:	4649      	mov	r1, r9
 800e512:	4638      	mov	r0, r7
 800e514:	47c0      	blx	r8
 800e516:	3001      	adds	r0, #1
 800e518:	d0e6      	beq.n	800e4e8 <_printf_common+0xa4>
 800e51a:	3601      	adds	r6, #1
 800e51c:	e7d9      	b.n	800e4d2 <_printf_common+0x8e>
	...

0800e520 <_printf_i>:
 800e520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e524:	7e0f      	ldrb	r7, [r1, #24]
 800e526:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e528:	2f78      	cmp	r7, #120	; 0x78
 800e52a:	4691      	mov	r9, r2
 800e52c:	4680      	mov	r8, r0
 800e52e:	460c      	mov	r4, r1
 800e530:	469a      	mov	sl, r3
 800e532:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e536:	d807      	bhi.n	800e548 <_printf_i+0x28>
 800e538:	2f62      	cmp	r7, #98	; 0x62
 800e53a:	d80a      	bhi.n	800e552 <_printf_i+0x32>
 800e53c:	2f00      	cmp	r7, #0
 800e53e:	f000 80d8 	beq.w	800e6f2 <_printf_i+0x1d2>
 800e542:	2f58      	cmp	r7, #88	; 0x58
 800e544:	f000 80a3 	beq.w	800e68e <_printf_i+0x16e>
 800e548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e54c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e550:	e03a      	b.n	800e5c8 <_printf_i+0xa8>
 800e552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e556:	2b15      	cmp	r3, #21
 800e558:	d8f6      	bhi.n	800e548 <_printf_i+0x28>
 800e55a:	a101      	add	r1, pc, #4	; (adr r1, 800e560 <_printf_i+0x40>)
 800e55c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e560:	0800e5b9 	.word	0x0800e5b9
 800e564:	0800e5cd 	.word	0x0800e5cd
 800e568:	0800e549 	.word	0x0800e549
 800e56c:	0800e549 	.word	0x0800e549
 800e570:	0800e549 	.word	0x0800e549
 800e574:	0800e549 	.word	0x0800e549
 800e578:	0800e5cd 	.word	0x0800e5cd
 800e57c:	0800e549 	.word	0x0800e549
 800e580:	0800e549 	.word	0x0800e549
 800e584:	0800e549 	.word	0x0800e549
 800e588:	0800e549 	.word	0x0800e549
 800e58c:	0800e6d9 	.word	0x0800e6d9
 800e590:	0800e5fd 	.word	0x0800e5fd
 800e594:	0800e6bb 	.word	0x0800e6bb
 800e598:	0800e549 	.word	0x0800e549
 800e59c:	0800e549 	.word	0x0800e549
 800e5a0:	0800e6fb 	.word	0x0800e6fb
 800e5a4:	0800e549 	.word	0x0800e549
 800e5a8:	0800e5fd 	.word	0x0800e5fd
 800e5ac:	0800e549 	.word	0x0800e549
 800e5b0:	0800e549 	.word	0x0800e549
 800e5b4:	0800e6c3 	.word	0x0800e6c3
 800e5b8:	682b      	ldr	r3, [r5, #0]
 800e5ba:	1d1a      	adds	r2, r3, #4
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	602a      	str	r2, [r5, #0]
 800e5c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	e0a3      	b.n	800e714 <_printf_i+0x1f4>
 800e5cc:	6820      	ldr	r0, [r4, #0]
 800e5ce:	6829      	ldr	r1, [r5, #0]
 800e5d0:	0606      	lsls	r6, r0, #24
 800e5d2:	f101 0304 	add.w	r3, r1, #4
 800e5d6:	d50a      	bpl.n	800e5ee <_printf_i+0xce>
 800e5d8:	680e      	ldr	r6, [r1, #0]
 800e5da:	602b      	str	r3, [r5, #0]
 800e5dc:	2e00      	cmp	r6, #0
 800e5de:	da03      	bge.n	800e5e8 <_printf_i+0xc8>
 800e5e0:	232d      	movs	r3, #45	; 0x2d
 800e5e2:	4276      	negs	r6, r6
 800e5e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5e8:	485e      	ldr	r0, [pc, #376]	; (800e764 <_printf_i+0x244>)
 800e5ea:	230a      	movs	r3, #10
 800e5ec:	e019      	b.n	800e622 <_printf_i+0x102>
 800e5ee:	680e      	ldr	r6, [r1, #0]
 800e5f0:	602b      	str	r3, [r5, #0]
 800e5f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e5f6:	bf18      	it	ne
 800e5f8:	b236      	sxthne	r6, r6
 800e5fa:	e7ef      	b.n	800e5dc <_printf_i+0xbc>
 800e5fc:	682b      	ldr	r3, [r5, #0]
 800e5fe:	6820      	ldr	r0, [r4, #0]
 800e600:	1d19      	adds	r1, r3, #4
 800e602:	6029      	str	r1, [r5, #0]
 800e604:	0601      	lsls	r1, r0, #24
 800e606:	d501      	bpl.n	800e60c <_printf_i+0xec>
 800e608:	681e      	ldr	r6, [r3, #0]
 800e60a:	e002      	b.n	800e612 <_printf_i+0xf2>
 800e60c:	0646      	lsls	r6, r0, #25
 800e60e:	d5fb      	bpl.n	800e608 <_printf_i+0xe8>
 800e610:	881e      	ldrh	r6, [r3, #0]
 800e612:	4854      	ldr	r0, [pc, #336]	; (800e764 <_printf_i+0x244>)
 800e614:	2f6f      	cmp	r7, #111	; 0x6f
 800e616:	bf0c      	ite	eq
 800e618:	2308      	moveq	r3, #8
 800e61a:	230a      	movne	r3, #10
 800e61c:	2100      	movs	r1, #0
 800e61e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e622:	6865      	ldr	r5, [r4, #4]
 800e624:	60a5      	str	r5, [r4, #8]
 800e626:	2d00      	cmp	r5, #0
 800e628:	bfa2      	ittt	ge
 800e62a:	6821      	ldrge	r1, [r4, #0]
 800e62c:	f021 0104 	bicge.w	r1, r1, #4
 800e630:	6021      	strge	r1, [r4, #0]
 800e632:	b90e      	cbnz	r6, 800e638 <_printf_i+0x118>
 800e634:	2d00      	cmp	r5, #0
 800e636:	d04d      	beq.n	800e6d4 <_printf_i+0x1b4>
 800e638:	4615      	mov	r5, r2
 800e63a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e63e:	fb03 6711 	mls	r7, r3, r1, r6
 800e642:	5dc7      	ldrb	r7, [r0, r7]
 800e644:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e648:	4637      	mov	r7, r6
 800e64a:	42bb      	cmp	r3, r7
 800e64c:	460e      	mov	r6, r1
 800e64e:	d9f4      	bls.n	800e63a <_printf_i+0x11a>
 800e650:	2b08      	cmp	r3, #8
 800e652:	d10b      	bne.n	800e66c <_printf_i+0x14c>
 800e654:	6823      	ldr	r3, [r4, #0]
 800e656:	07de      	lsls	r6, r3, #31
 800e658:	d508      	bpl.n	800e66c <_printf_i+0x14c>
 800e65a:	6923      	ldr	r3, [r4, #16]
 800e65c:	6861      	ldr	r1, [r4, #4]
 800e65e:	4299      	cmp	r1, r3
 800e660:	bfde      	ittt	le
 800e662:	2330      	movle	r3, #48	; 0x30
 800e664:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e668:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e66c:	1b52      	subs	r2, r2, r5
 800e66e:	6122      	str	r2, [r4, #16]
 800e670:	f8cd a000 	str.w	sl, [sp]
 800e674:	464b      	mov	r3, r9
 800e676:	aa03      	add	r2, sp, #12
 800e678:	4621      	mov	r1, r4
 800e67a:	4640      	mov	r0, r8
 800e67c:	f7ff fee2 	bl	800e444 <_printf_common>
 800e680:	3001      	adds	r0, #1
 800e682:	d14c      	bne.n	800e71e <_printf_i+0x1fe>
 800e684:	f04f 30ff 	mov.w	r0, #4294967295
 800e688:	b004      	add	sp, #16
 800e68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e68e:	4835      	ldr	r0, [pc, #212]	; (800e764 <_printf_i+0x244>)
 800e690:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e694:	6829      	ldr	r1, [r5, #0]
 800e696:	6823      	ldr	r3, [r4, #0]
 800e698:	f851 6b04 	ldr.w	r6, [r1], #4
 800e69c:	6029      	str	r1, [r5, #0]
 800e69e:	061d      	lsls	r5, r3, #24
 800e6a0:	d514      	bpl.n	800e6cc <_printf_i+0x1ac>
 800e6a2:	07df      	lsls	r7, r3, #31
 800e6a4:	bf44      	itt	mi
 800e6a6:	f043 0320 	orrmi.w	r3, r3, #32
 800e6aa:	6023      	strmi	r3, [r4, #0]
 800e6ac:	b91e      	cbnz	r6, 800e6b6 <_printf_i+0x196>
 800e6ae:	6823      	ldr	r3, [r4, #0]
 800e6b0:	f023 0320 	bic.w	r3, r3, #32
 800e6b4:	6023      	str	r3, [r4, #0]
 800e6b6:	2310      	movs	r3, #16
 800e6b8:	e7b0      	b.n	800e61c <_printf_i+0xfc>
 800e6ba:	6823      	ldr	r3, [r4, #0]
 800e6bc:	f043 0320 	orr.w	r3, r3, #32
 800e6c0:	6023      	str	r3, [r4, #0]
 800e6c2:	2378      	movs	r3, #120	; 0x78
 800e6c4:	4828      	ldr	r0, [pc, #160]	; (800e768 <_printf_i+0x248>)
 800e6c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e6ca:	e7e3      	b.n	800e694 <_printf_i+0x174>
 800e6cc:	0659      	lsls	r1, r3, #25
 800e6ce:	bf48      	it	mi
 800e6d0:	b2b6      	uxthmi	r6, r6
 800e6d2:	e7e6      	b.n	800e6a2 <_printf_i+0x182>
 800e6d4:	4615      	mov	r5, r2
 800e6d6:	e7bb      	b.n	800e650 <_printf_i+0x130>
 800e6d8:	682b      	ldr	r3, [r5, #0]
 800e6da:	6826      	ldr	r6, [r4, #0]
 800e6dc:	6961      	ldr	r1, [r4, #20]
 800e6de:	1d18      	adds	r0, r3, #4
 800e6e0:	6028      	str	r0, [r5, #0]
 800e6e2:	0635      	lsls	r5, r6, #24
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	d501      	bpl.n	800e6ec <_printf_i+0x1cc>
 800e6e8:	6019      	str	r1, [r3, #0]
 800e6ea:	e002      	b.n	800e6f2 <_printf_i+0x1d2>
 800e6ec:	0670      	lsls	r0, r6, #25
 800e6ee:	d5fb      	bpl.n	800e6e8 <_printf_i+0x1c8>
 800e6f0:	8019      	strh	r1, [r3, #0]
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	6123      	str	r3, [r4, #16]
 800e6f6:	4615      	mov	r5, r2
 800e6f8:	e7ba      	b.n	800e670 <_printf_i+0x150>
 800e6fa:	682b      	ldr	r3, [r5, #0]
 800e6fc:	1d1a      	adds	r2, r3, #4
 800e6fe:	602a      	str	r2, [r5, #0]
 800e700:	681d      	ldr	r5, [r3, #0]
 800e702:	6862      	ldr	r2, [r4, #4]
 800e704:	2100      	movs	r1, #0
 800e706:	4628      	mov	r0, r5
 800e708:	f7f1 fd7a 	bl	8000200 <memchr>
 800e70c:	b108      	cbz	r0, 800e712 <_printf_i+0x1f2>
 800e70e:	1b40      	subs	r0, r0, r5
 800e710:	6060      	str	r0, [r4, #4]
 800e712:	6863      	ldr	r3, [r4, #4]
 800e714:	6123      	str	r3, [r4, #16]
 800e716:	2300      	movs	r3, #0
 800e718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e71c:	e7a8      	b.n	800e670 <_printf_i+0x150>
 800e71e:	6923      	ldr	r3, [r4, #16]
 800e720:	462a      	mov	r2, r5
 800e722:	4649      	mov	r1, r9
 800e724:	4640      	mov	r0, r8
 800e726:	47d0      	blx	sl
 800e728:	3001      	adds	r0, #1
 800e72a:	d0ab      	beq.n	800e684 <_printf_i+0x164>
 800e72c:	6823      	ldr	r3, [r4, #0]
 800e72e:	079b      	lsls	r3, r3, #30
 800e730:	d413      	bmi.n	800e75a <_printf_i+0x23a>
 800e732:	68e0      	ldr	r0, [r4, #12]
 800e734:	9b03      	ldr	r3, [sp, #12]
 800e736:	4298      	cmp	r0, r3
 800e738:	bfb8      	it	lt
 800e73a:	4618      	movlt	r0, r3
 800e73c:	e7a4      	b.n	800e688 <_printf_i+0x168>
 800e73e:	2301      	movs	r3, #1
 800e740:	4632      	mov	r2, r6
 800e742:	4649      	mov	r1, r9
 800e744:	4640      	mov	r0, r8
 800e746:	47d0      	blx	sl
 800e748:	3001      	adds	r0, #1
 800e74a:	d09b      	beq.n	800e684 <_printf_i+0x164>
 800e74c:	3501      	adds	r5, #1
 800e74e:	68e3      	ldr	r3, [r4, #12]
 800e750:	9903      	ldr	r1, [sp, #12]
 800e752:	1a5b      	subs	r3, r3, r1
 800e754:	42ab      	cmp	r3, r5
 800e756:	dcf2      	bgt.n	800e73e <_printf_i+0x21e>
 800e758:	e7eb      	b.n	800e732 <_printf_i+0x212>
 800e75a:	2500      	movs	r5, #0
 800e75c:	f104 0619 	add.w	r6, r4, #25
 800e760:	e7f5      	b.n	800e74e <_printf_i+0x22e>
 800e762:	bf00      	nop
 800e764:	08012f1e 	.word	0x08012f1e
 800e768:	08012f2f 	.word	0x08012f2f

0800e76c <_scanf_float>:
 800e76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e770:	b087      	sub	sp, #28
 800e772:	4617      	mov	r7, r2
 800e774:	9303      	str	r3, [sp, #12]
 800e776:	688b      	ldr	r3, [r1, #8]
 800e778:	1e5a      	subs	r2, r3, #1
 800e77a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e77e:	bf83      	ittte	hi
 800e780:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e784:	195b      	addhi	r3, r3, r5
 800e786:	9302      	strhi	r3, [sp, #8]
 800e788:	2300      	movls	r3, #0
 800e78a:	bf86      	itte	hi
 800e78c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e790:	608b      	strhi	r3, [r1, #8]
 800e792:	9302      	strls	r3, [sp, #8]
 800e794:	680b      	ldr	r3, [r1, #0]
 800e796:	468b      	mov	fp, r1
 800e798:	2500      	movs	r5, #0
 800e79a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e79e:	f84b 3b1c 	str.w	r3, [fp], #28
 800e7a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e7a6:	4680      	mov	r8, r0
 800e7a8:	460c      	mov	r4, r1
 800e7aa:	465e      	mov	r6, fp
 800e7ac:	46aa      	mov	sl, r5
 800e7ae:	46a9      	mov	r9, r5
 800e7b0:	9501      	str	r5, [sp, #4]
 800e7b2:	68a2      	ldr	r2, [r4, #8]
 800e7b4:	b152      	cbz	r2, 800e7cc <_scanf_float+0x60>
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	2b4e      	cmp	r3, #78	; 0x4e
 800e7bc:	d864      	bhi.n	800e888 <_scanf_float+0x11c>
 800e7be:	2b40      	cmp	r3, #64	; 0x40
 800e7c0:	d83c      	bhi.n	800e83c <_scanf_float+0xd0>
 800e7c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e7c6:	b2c8      	uxtb	r0, r1
 800e7c8:	280e      	cmp	r0, #14
 800e7ca:	d93a      	bls.n	800e842 <_scanf_float+0xd6>
 800e7cc:	f1b9 0f00 	cmp.w	r9, #0
 800e7d0:	d003      	beq.n	800e7da <_scanf_float+0x6e>
 800e7d2:	6823      	ldr	r3, [r4, #0]
 800e7d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e7d8:	6023      	str	r3, [r4, #0]
 800e7da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7de:	f1ba 0f01 	cmp.w	sl, #1
 800e7e2:	f200 8113 	bhi.w	800ea0c <_scanf_float+0x2a0>
 800e7e6:	455e      	cmp	r6, fp
 800e7e8:	f200 8105 	bhi.w	800e9f6 <_scanf_float+0x28a>
 800e7ec:	2501      	movs	r5, #1
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	b007      	add	sp, #28
 800e7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e7fa:	2a0d      	cmp	r2, #13
 800e7fc:	d8e6      	bhi.n	800e7cc <_scanf_float+0x60>
 800e7fe:	a101      	add	r1, pc, #4	; (adr r1, 800e804 <_scanf_float+0x98>)
 800e800:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e804:	0800e943 	.word	0x0800e943
 800e808:	0800e7cd 	.word	0x0800e7cd
 800e80c:	0800e7cd 	.word	0x0800e7cd
 800e810:	0800e7cd 	.word	0x0800e7cd
 800e814:	0800e9a3 	.word	0x0800e9a3
 800e818:	0800e97b 	.word	0x0800e97b
 800e81c:	0800e7cd 	.word	0x0800e7cd
 800e820:	0800e7cd 	.word	0x0800e7cd
 800e824:	0800e951 	.word	0x0800e951
 800e828:	0800e7cd 	.word	0x0800e7cd
 800e82c:	0800e7cd 	.word	0x0800e7cd
 800e830:	0800e7cd 	.word	0x0800e7cd
 800e834:	0800e7cd 	.word	0x0800e7cd
 800e838:	0800e909 	.word	0x0800e909
 800e83c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e840:	e7db      	b.n	800e7fa <_scanf_float+0x8e>
 800e842:	290e      	cmp	r1, #14
 800e844:	d8c2      	bhi.n	800e7cc <_scanf_float+0x60>
 800e846:	a001      	add	r0, pc, #4	; (adr r0, 800e84c <_scanf_float+0xe0>)
 800e848:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e84c:	0800e8fb 	.word	0x0800e8fb
 800e850:	0800e7cd 	.word	0x0800e7cd
 800e854:	0800e8fb 	.word	0x0800e8fb
 800e858:	0800e98f 	.word	0x0800e98f
 800e85c:	0800e7cd 	.word	0x0800e7cd
 800e860:	0800e8a9 	.word	0x0800e8a9
 800e864:	0800e8e5 	.word	0x0800e8e5
 800e868:	0800e8e5 	.word	0x0800e8e5
 800e86c:	0800e8e5 	.word	0x0800e8e5
 800e870:	0800e8e5 	.word	0x0800e8e5
 800e874:	0800e8e5 	.word	0x0800e8e5
 800e878:	0800e8e5 	.word	0x0800e8e5
 800e87c:	0800e8e5 	.word	0x0800e8e5
 800e880:	0800e8e5 	.word	0x0800e8e5
 800e884:	0800e8e5 	.word	0x0800e8e5
 800e888:	2b6e      	cmp	r3, #110	; 0x6e
 800e88a:	d809      	bhi.n	800e8a0 <_scanf_float+0x134>
 800e88c:	2b60      	cmp	r3, #96	; 0x60
 800e88e:	d8b2      	bhi.n	800e7f6 <_scanf_float+0x8a>
 800e890:	2b54      	cmp	r3, #84	; 0x54
 800e892:	d077      	beq.n	800e984 <_scanf_float+0x218>
 800e894:	2b59      	cmp	r3, #89	; 0x59
 800e896:	d199      	bne.n	800e7cc <_scanf_float+0x60>
 800e898:	2d07      	cmp	r5, #7
 800e89a:	d197      	bne.n	800e7cc <_scanf_float+0x60>
 800e89c:	2508      	movs	r5, #8
 800e89e:	e029      	b.n	800e8f4 <_scanf_float+0x188>
 800e8a0:	2b74      	cmp	r3, #116	; 0x74
 800e8a2:	d06f      	beq.n	800e984 <_scanf_float+0x218>
 800e8a4:	2b79      	cmp	r3, #121	; 0x79
 800e8a6:	e7f6      	b.n	800e896 <_scanf_float+0x12a>
 800e8a8:	6821      	ldr	r1, [r4, #0]
 800e8aa:	05c8      	lsls	r0, r1, #23
 800e8ac:	d51a      	bpl.n	800e8e4 <_scanf_float+0x178>
 800e8ae:	9b02      	ldr	r3, [sp, #8]
 800e8b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e8b4:	6021      	str	r1, [r4, #0]
 800e8b6:	f109 0901 	add.w	r9, r9, #1
 800e8ba:	b11b      	cbz	r3, 800e8c4 <_scanf_float+0x158>
 800e8bc:	3b01      	subs	r3, #1
 800e8be:	3201      	adds	r2, #1
 800e8c0:	9302      	str	r3, [sp, #8]
 800e8c2:	60a2      	str	r2, [r4, #8]
 800e8c4:	68a3      	ldr	r3, [r4, #8]
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	60a3      	str	r3, [r4, #8]
 800e8ca:	6923      	ldr	r3, [r4, #16]
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	6123      	str	r3, [r4, #16]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	607b      	str	r3, [r7, #4]
 800e8d8:	f340 8084 	ble.w	800e9e4 <_scanf_float+0x278>
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	603b      	str	r3, [r7, #0]
 800e8e2:	e766      	b.n	800e7b2 <_scanf_float+0x46>
 800e8e4:	eb1a 0f05 	cmn.w	sl, r5
 800e8e8:	f47f af70 	bne.w	800e7cc <_scanf_float+0x60>
 800e8ec:	6822      	ldr	r2, [r4, #0]
 800e8ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e8f2:	6022      	str	r2, [r4, #0]
 800e8f4:	f806 3b01 	strb.w	r3, [r6], #1
 800e8f8:	e7e4      	b.n	800e8c4 <_scanf_float+0x158>
 800e8fa:	6822      	ldr	r2, [r4, #0]
 800e8fc:	0610      	lsls	r0, r2, #24
 800e8fe:	f57f af65 	bpl.w	800e7cc <_scanf_float+0x60>
 800e902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e906:	e7f4      	b.n	800e8f2 <_scanf_float+0x186>
 800e908:	f1ba 0f00 	cmp.w	sl, #0
 800e90c:	d10e      	bne.n	800e92c <_scanf_float+0x1c0>
 800e90e:	f1b9 0f00 	cmp.w	r9, #0
 800e912:	d10e      	bne.n	800e932 <_scanf_float+0x1c6>
 800e914:	6822      	ldr	r2, [r4, #0]
 800e916:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e91a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e91e:	d108      	bne.n	800e932 <_scanf_float+0x1c6>
 800e920:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e924:	6022      	str	r2, [r4, #0]
 800e926:	f04f 0a01 	mov.w	sl, #1
 800e92a:	e7e3      	b.n	800e8f4 <_scanf_float+0x188>
 800e92c:	f1ba 0f02 	cmp.w	sl, #2
 800e930:	d055      	beq.n	800e9de <_scanf_float+0x272>
 800e932:	2d01      	cmp	r5, #1
 800e934:	d002      	beq.n	800e93c <_scanf_float+0x1d0>
 800e936:	2d04      	cmp	r5, #4
 800e938:	f47f af48 	bne.w	800e7cc <_scanf_float+0x60>
 800e93c:	3501      	adds	r5, #1
 800e93e:	b2ed      	uxtb	r5, r5
 800e940:	e7d8      	b.n	800e8f4 <_scanf_float+0x188>
 800e942:	f1ba 0f01 	cmp.w	sl, #1
 800e946:	f47f af41 	bne.w	800e7cc <_scanf_float+0x60>
 800e94a:	f04f 0a02 	mov.w	sl, #2
 800e94e:	e7d1      	b.n	800e8f4 <_scanf_float+0x188>
 800e950:	b97d      	cbnz	r5, 800e972 <_scanf_float+0x206>
 800e952:	f1b9 0f00 	cmp.w	r9, #0
 800e956:	f47f af3c 	bne.w	800e7d2 <_scanf_float+0x66>
 800e95a:	6822      	ldr	r2, [r4, #0]
 800e95c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e960:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e964:	f47f af39 	bne.w	800e7da <_scanf_float+0x6e>
 800e968:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e96c:	6022      	str	r2, [r4, #0]
 800e96e:	2501      	movs	r5, #1
 800e970:	e7c0      	b.n	800e8f4 <_scanf_float+0x188>
 800e972:	2d03      	cmp	r5, #3
 800e974:	d0e2      	beq.n	800e93c <_scanf_float+0x1d0>
 800e976:	2d05      	cmp	r5, #5
 800e978:	e7de      	b.n	800e938 <_scanf_float+0x1cc>
 800e97a:	2d02      	cmp	r5, #2
 800e97c:	f47f af26 	bne.w	800e7cc <_scanf_float+0x60>
 800e980:	2503      	movs	r5, #3
 800e982:	e7b7      	b.n	800e8f4 <_scanf_float+0x188>
 800e984:	2d06      	cmp	r5, #6
 800e986:	f47f af21 	bne.w	800e7cc <_scanf_float+0x60>
 800e98a:	2507      	movs	r5, #7
 800e98c:	e7b2      	b.n	800e8f4 <_scanf_float+0x188>
 800e98e:	6822      	ldr	r2, [r4, #0]
 800e990:	0591      	lsls	r1, r2, #22
 800e992:	f57f af1b 	bpl.w	800e7cc <_scanf_float+0x60>
 800e996:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e99a:	6022      	str	r2, [r4, #0]
 800e99c:	f8cd 9004 	str.w	r9, [sp, #4]
 800e9a0:	e7a8      	b.n	800e8f4 <_scanf_float+0x188>
 800e9a2:	6822      	ldr	r2, [r4, #0]
 800e9a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e9a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e9ac:	d006      	beq.n	800e9bc <_scanf_float+0x250>
 800e9ae:	0550      	lsls	r0, r2, #21
 800e9b0:	f57f af0c 	bpl.w	800e7cc <_scanf_float+0x60>
 800e9b4:	f1b9 0f00 	cmp.w	r9, #0
 800e9b8:	f43f af0f 	beq.w	800e7da <_scanf_float+0x6e>
 800e9bc:	0591      	lsls	r1, r2, #22
 800e9be:	bf58      	it	pl
 800e9c0:	9901      	ldrpl	r1, [sp, #4]
 800e9c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e9c6:	bf58      	it	pl
 800e9c8:	eba9 0101 	subpl.w	r1, r9, r1
 800e9cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e9d0:	bf58      	it	pl
 800e9d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e9d6:	6022      	str	r2, [r4, #0]
 800e9d8:	f04f 0900 	mov.w	r9, #0
 800e9dc:	e78a      	b.n	800e8f4 <_scanf_float+0x188>
 800e9de:	f04f 0a03 	mov.w	sl, #3
 800e9e2:	e787      	b.n	800e8f4 <_scanf_float+0x188>
 800e9e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e9e8:	4639      	mov	r1, r7
 800e9ea:	4640      	mov	r0, r8
 800e9ec:	4798      	blx	r3
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	f43f aedf 	beq.w	800e7b2 <_scanf_float+0x46>
 800e9f4:	e6ea      	b.n	800e7cc <_scanf_float+0x60>
 800e9f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e9fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e9fe:	463a      	mov	r2, r7
 800ea00:	4640      	mov	r0, r8
 800ea02:	4798      	blx	r3
 800ea04:	6923      	ldr	r3, [r4, #16]
 800ea06:	3b01      	subs	r3, #1
 800ea08:	6123      	str	r3, [r4, #16]
 800ea0a:	e6ec      	b.n	800e7e6 <_scanf_float+0x7a>
 800ea0c:	1e6b      	subs	r3, r5, #1
 800ea0e:	2b06      	cmp	r3, #6
 800ea10:	d825      	bhi.n	800ea5e <_scanf_float+0x2f2>
 800ea12:	2d02      	cmp	r5, #2
 800ea14:	d836      	bhi.n	800ea84 <_scanf_float+0x318>
 800ea16:	455e      	cmp	r6, fp
 800ea18:	f67f aee8 	bls.w	800e7ec <_scanf_float+0x80>
 800ea1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ea24:	463a      	mov	r2, r7
 800ea26:	4640      	mov	r0, r8
 800ea28:	4798      	blx	r3
 800ea2a:	6923      	ldr	r3, [r4, #16]
 800ea2c:	3b01      	subs	r3, #1
 800ea2e:	6123      	str	r3, [r4, #16]
 800ea30:	e7f1      	b.n	800ea16 <_scanf_float+0x2aa>
 800ea32:	9802      	ldr	r0, [sp, #8]
 800ea34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ea3c:	9002      	str	r0, [sp, #8]
 800ea3e:	463a      	mov	r2, r7
 800ea40:	4640      	mov	r0, r8
 800ea42:	4798      	blx	r3
 800ea44:	6923      	ldr	r3, [r4, #16]
 800ea46:	3b01      	subs	r3, #1
 800ea48:	6123      	str	r3, [r4, #16]
 800ea4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea4e:	fa5f fa8a 	uxtb.w	sl, sl
 800ea52:	f1ba 0f02 	cmp.w	sl, #2
 800ea56:	d1ec      	bne.n	800ea32 <_scanf_float+0x2c6>
 800ea58:	3d03      	subs	r5, #3
 800ea5a:	b2ed      	uxtb	r5, r5
 800ea5c:	1b76      	subs	r6, r6, r5
 800ea5e:	6823      	ldr	r3, [r4, #0]
 800ea60:	05da      	lsls	r2, r3, #23
 800ea62:	d52f      	bpl.n	800eac4 <_scanf_float+0x358>
 800ea64:	055b      	lsls	r3, r3, #21
 800ea66:	d510      	bpl.n	800ea8a <_scanf_float+0x31e>
 800ea68:	455e      	cmp	r6, fp
 800ea6a:	f67f aebf 	bls.w	800e7ec <_scanf_float+0x80>
 800ea6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ea76:	463a      	mov	r2, r7
 800ea78:	4640      	mov	r0, r8
 800ea7a:	4798      	blx	r3
 800ea7c:	6923      	ldr	r3, [r4, #16]
 800ea7e:	3b01      	subs	r3, #1
 800ea80:	6123      	str	r3, [r4, #16]
 800ea82:	e7f1      	b.n	800ea68 <_scanf_float+0x2fc>
 800ea84:	46aa      	mov	sl, r5
 800ea86:	9602      	str	r6, [sp, #8]
 800ea88:	e7df      	b.n	800ea4a <_scanf_float+0x2de>
 800ea8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ea8e:	6923      	ldr	r3, [r4, #16]
 800ea90:	2965      	cmp	r1, #101	; 0x65
 800ea92:	f103 33ff 	add.w	r3, r3, #4294967295
 800ea96:	f106 35ff 	add.w	r5, r6, #4294967295
 800ea9a:	6123      	str	r3, [r4, #16]
 800ea9c:	d00c      	beq.n	800eab8 <_scanf_float+0x34c>
 800ea9e:	2945      	cmp	r1, #69	; 0x45
 800eaa0:	d00a      	beq.n	800eab8 <_scanf_float+0x34c>
 800eaa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eaa6:	463a      	mov	r2, r7
 800eaa8:	4640      	mov	r0, r8
 800eaaa:	4798      	blx	r3
 800eaac:	6923      	ldr	r3, [r4, #16]
 800eaae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800eab2:	3b01      	subs	r3, #1
 800eab4:	1eb5      	subs	r5, r6, #2
 800eab6:	6123      	str	r3, [r4, #16]
 800eab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eabc:	463a      	mov	r2, r7
 800eabe:	4640      	mov	r0, r8
 800eac0:	4798      	blx	r3
 800eac2:	462e      	mov	r6, r5
 800eac4:	6825      	ldr	r5, [r4, #0]
 800eac6:	f015 0510 	ands.w	r5, r5, #16
 800eaca:	d159      	bne.n	800eb80 <_scanf_float+0x414>
 800eacc:	7035      	strb	r5, [r6, #0]
 800eace:	6823      	ldr	r3, [r4, #0]
 800ead0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ead4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ead8:	d11b      	bne.n	800eb12 <_scanf_float+0x3a6>
 800eada:	9b01      	ldr	r3, [sp, #4]
 800eadc:	454b      	cmp	r3, r9
 800eade:	eba3 0209 	sub.w	r2, r3, r9
 800eae2:	d123      	bne.n	800eb2c <_scanf_float+0x3c0>
 800eae4:	2200      	movs	r2, #0
 800eae6:	4659      	mov	r1, fp
 800eae8:	4640      	mov	r0, r8
 800eaea:	f000 fea7 	bl	800f83c <_strtod_r>
 800eaee:	6822      	ldr	r2, [r4, #0]
 800eaf0:	9b03      	ldr	r3, [sp, #12]
 800eaf2:	f012 0f02 	tst.w	r2, #2
 800eaf6:	ec57 6b10 	vmov	r6, r7, d0
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	d021      	beq.n	800eb42 <_scanf_float+0x3d6>
 800eafe:	9903      	ldr	r1, [sp, #12]
 800eb00:	1d1a      	adds	r2, r3, #4
 800eb02:	600a      	str	r2, [r1, #0]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	e9c3 6700 	strd	r6, r7, [r3]
 800eb0a:	68e3      	ldr	r3, [r4, #12]
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	60e3      	str	r3, [r4, #12]
 800eb10:	e66d      	b.n	800e7ee <_scanf_float+0x82>
 800eb12:	9b04      	ldr	r3, [sp, #16]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d0e5      	beq.n	800eae4 <_scanf_float+0x378>
 800eb18:	9905      	ldr	r1, [sp, #20]
 800eb1a:	230a      	movs	r3, #10
 800eb1c:	462a      	mov	r2, r5
 800eb1e:	3101      	adds	r1, #1
 800eb20:	4640      	mov	r0, r8
 800eb22:	f000 ff13 	bl	800f94c <_strtol_r>
 800eb26:	9b04      	ldr	r3, [sp, #16]
 800eb28:	9e05      	ldr	r6, [sp, #20]
 800eb2a:	1ac2      	subs	r2, r0, r3
 800eb2c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800eb30:	429e      	cmp	r6, r3
 800eb32:	bf28      	it	cs
 800eb34:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800eb38:	4912      	ldr	r1, [pc, #72]	; (800eb84 <_scanf_float+0x418>)
 800eb3a:	4630      	mov	r0, r6
 800eb3c:	f000 f82c 	bl	800eb98 <siprintf>
 800eb40:	e7d0      	b.n	800eae4 <_scanf_float+0x378>
 800eb42:	9903      	ldr	r1, [sp, #12]
 800eb44:	f012 0f04 	tst.w	r2, #4
 800eb48:	f103 0204 	add.w	r2, r3, #4
 800eb4c:	600a      	str	r2, [r1, #0]
 800eb4e:	d1d9      	bne.n	800eb04 <_scanf_float+0x398>
 800eb50:	f8d3 8000 	ldr.w	r8, [r3]
 800eb54:	ee10 2a10 	vmov	r2, s0
 800eb58:	ee10 0a10 	vmov	r0, s0
 800eb5c:	463b      	mov	r3, r7
 800eb5e:	4639      	mov	r1, r7
 800eb60:	f7f1 fff4 	bl	8000b4c <__aeabi_dcmpun>
 800eb64:	b128      	cbz	r0, 800eb72 <_scanf_float+0x406>
 800eb66:	4808      	ldr	r0, [pc, #32]	; (800eb88 <_scanf_float+0x41c>)
 800eb68:	f000 f810 	bl	800eb8c <nanf>
 800eb6c:	ed88 0a00 	vstr	s0, [r8]
 800eb70:	e7cb      	b.n	800eb0a <_scanf_float+0x39e>
 800eb72:	4630      	mov	r0, r6
 800eb74:	4639      	mov	r1, r7
 800eb76:	f7f2 f847 	bl	8000c08 <__aeabi_d2f>
 800eb7a:	f8c8 0000 	str.w	r0, [r8]
 800eb7e:	e7c4      	b.n	800eb0a <_scanf_float+0x39e>
 800eb80:	2500      	movs	r5, #0
 800eb82:	e634      	b.n	800e7ee <_scanf_float+0x82>
 800eb84:	08012f40 	.word	0x08012f40
 800eb88:	08012fd3 	.word	0x08012fd3

0800eb8c <nanf>:
 800eb8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eb94 <nanf+0x8>
 800eb90:	4770      	bx	lr
 800eb92:	bf00      	nop
 800eb94:	7fc00000 	.word	0x7fc00000

0800eb98 <siprintf>:
 800eb98:	b40e      	push	{r1, r2, r3}
 800eb9a:	b500      	push	{lr}
 800eb9c:	b09c      	sub	sp, #112	; 0x70
 800eb9e:	ab1d      	add	r3, sp, #116	; 0x74
 800eba0:	9002      	str	r0, [sp, #8]
 800eba2:	9006      	str	r0, [sp, #24]
 800eba4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eba8:	4809      	ldr	r0, [pc, #36]	; (800ebd0 <siprintf+0x38>)
 800ebaa:	9107      	str	r1, [sp, #28]
 800ebac:	9104      	str	r1, [sp, #16]
 800ebae:	4909      	ldr	r1, [pc, #36]	; (800ebd4 <siprintf+0x3c>)
 800ebb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebb4:	9105      	str	r1, [sp, #20]
 800ebb6:	6800      	ldr	r0, [r0, #0]
 800ebb8:	9301      	str	r3, [sp, #4]
 800ebba:	a902      	add	r1, sp, #8
 800ebbc:	f003 f9f4 	bl	8011fa8 <_svfiprintf_r>
 800ebc0:	9b02      	ldr	r3, [sp, #8]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	701a      	strb	r2, [r3, #0]
 800ebc6:	b01c      	add	sp, #112	; 0x70
 800ebc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebcc:	b003      	add	sp, #12
 800ebce:	4770      	bx	lr
 800ebd0:	20000024 	.word	0x20000024
 800ebd4:	ffff0208 	.word	0xffff0208

0800ebd8 <strcat>:
 800ebd8:	b510      	push	{r4, lr}
 800ebda:	4602      	mov	r2, r0
 800ebdc:	7814      	ldrb	r4, [r2, #0]
 800ebde:	4613      	mov	r3, r2
 800ebe0:	3201      	adds	r2, #1
 800ebe2:	2c00      	cmp	r4, #0
 800ebe4:	d1fa      	bne.n	800ebdc <strcat+0x4>
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebf0:	2a00      	cmp	r2, #0
 800ebf2:	d1f9      	bne.n	800ebe8 <strcat+0x10>
 800ebf4:	bd10      	pop	{r4, pc}

0800ebf6 <sulp>:
 800ebf6:	b570      	push	{r4, r5, r6, lr}
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	460d      	mov	r5, r1
 800ebfc:	ec45 4b10 	vmov	d0, r4, r5
 800ec00:	4616      	mov	r6, r2
 800ec02:	f002 ff2f 	bl	8011a64 <__ulp>
 800ec06:	ec51 0b10 	vmov	r0, r1, d0
 800ec0a:	b17e      	cbz	r6, 800ec2c <sulp+0x36>
 800ec0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ec10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	dd09      	ble.n	800ec2c <sulp+0x36>
 800ec18:	051b      	lsls	r3, r3, #20
 800ec1a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ec1e:	2400      	movs	r4, #0
 800ec20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ec24:	4622      	mov	r2, r4
 800ec26:	462b      	mov	r3, r5
 800ec28:	f7f1 fcf6 	bl	8000618 <__aeabi_dmul>
 800ec2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ec30 <_strtod_l>:
 800ec30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec34:	ed2d 8b02 	vpush	{d8}
 800ec38:	b09d      	sub	sp, #116	; 0x74
 800ec3a:	461f      	mov	r7, r3
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	9318      	str	r3, [sp, #96]	; 0x60
 800ec40:	4ba2      	ldr	r3, [pc, #648]	; (800eecc <_strtod_l+0x29c>)
 800ec42:	9213      	str	r2, [sp, #76]	; 0x4c
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	9305      	str	r3, [sp, #20]
 800ec48:	4604      	mov	r4, r0
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	4688      	mov	r8, r1
 800ec4e:	f7f1 fac9 	bl	80001e4 <strlen>
 800ec52:	f04f 0a00 	mov.w	sl, #0
 800ec56:	4605      	mov	r5, r0
 800ec58:	f04f 0b00 	mov.w	fp, #0
 800ec5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ec60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec62:	781a      	ldrb	r2, [r3, #0]
 800ec64:	2a2b      	cmp	r2, #43	; 0x2b
 800ec66:	d04e      	beq.n	800ed06 <_strtod_l+0xd6>
 800ec68:	d83b      	bhi.n	800ece2 <_strtod_l+0xb2>
 800ec6a:	2a0d      	cmp	r2, #13
 800ec6c:	d834      	bhi.n	800ecd8 <_strtod_l+0xa8>
 800ec6e:	2a08      	cmp	r2, #8
 800ec70:	d834      	bhi.n	800ecdc <_strtod_l+0xac>
 800ec72:	2a00      	cmp	r2, #0
 800ec74:	d03e      	beq.n	800ecf4 <_strtod_l+0xc4>
 800ec76:	2300      	movs	r3, #0
 800ec78:	930a      	str	r3, [sp, #40]	; 0x28
 800ec7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ec7c:	7833      	ldrb	r3, [r6, #0]
 800ec7e:	2b30      	cmp	r3, #48	; 0x30
 800ec80:	f040 80b0 	bne.w	800ede4 <_strtod_l+0x1b4>
 800ec84:	7873      	ldrb	r3, [r6, #1]
 800ec86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ec8a:	2b58      	cmp	r3, #88	; 0x58
 800ec8c:	d168      	bne.n	800ed60 <_strtod_l+0x130>
 800ec8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec90:	9301      	str	r3, [sp, #4]
 800ec92:	ab18      	add	r3, sp, #96	; 0x60
 800ec94:	9702      	str	r7, [sp, #8]
 800ec96:	9300      	str	r3, [sp, #0]
 800ec98:	4a8d      	ldr	r2, [pc, #564]	; (800eed0 <_strtod_l+0x2a0>)
 800ec9a:	ab19      	add	r3, sp, #100	; 0x64
 800ec9c:	a917      	add	r1, sp, #92	; 0x5c
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f001 ffe0 	bl	8010c64 <__gethex>
 800eca4:	f010 0707 	ands.w	r7, r0, #7
 800eca8:	4605      	mov	r5, r0
 800ecaa:	d005      	beq.n	800ecb8 <_strtod_l+0x88>
 800ecac:	2f06      	cmp	r7, #6
 800ecae:	d12c      	bne.n	800ed0a <_strtod_l+0xda>
 800ecb0:	3601      	adds	r6, #1
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	9617      	str	r6, [sp, #92]	; 0x5c
 800ecb6:	930a      	str	r3, [sp, #40]	; 0x28
 800ecb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	f040 8590 	bne.w	800f7e0 <_strtod_l+0xbb0>
 800ecc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecc2:	b1eb      	cbz	r3, 800ed00 <_strtod_l+0xd0>
 800ecc4:	4652      	mov	r2, sl
 800ecc6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ecca:	ec43 2b10 	vmov	d0, r2, r3
 800ecce:	b01d      	add	sp, #116	; 0x74
 800ecd0:	ecbd 8b02 	vpop	{d8}
 800ecd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecd8:	2a20      	cmp	r2, #32
 800ecda:	d1cc      	bne.n	800ec76 <_strtod_l+0x46>
 800ecdc:	3301      	adds	r3, #1
 800ecde:	9317      	str	r3, [sp, #92]	; 0x5c
 800ece0:	e7be      	b.n	800ec60 <_strtod_l+0x30>
 800ece2:	2a2d      	cmp	r2, #45	; 0x2d
 800ece4:	d1c7      	bne.n	800ec76 <_strtod_l+0x46>
 800ece6:	2201      	movs	r2, #1
 800ece8:	920a      	str	r2, [sp, #40]	; 0x28
 800ecea:	1c5a      	adds	r2, r3, #1
 800ecec:	9217      	str	r2, [sp, #92]	; 0x5c
 800ecee:	785b      	ldrb	r3, [r3, #1]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d1c2      	bne.n	800ec7a <_strtod_l+0x4a>
 800ecf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecf6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	f040 856e 	bne.w	800f7dc <_strtod_l+0xbac>
 800ed00:	4652      	mov	r2, sl
 800ed02:	465b      	mov	r3, fp
 800ed04:	e7e1      	b.n	800ecca <_strtod_l+0x9a>
 800ed06:	2200      	movs	r2, #0
 800ed08:	e7ee      	b.n	800ece8 <_strtod_l+0xb8>
 800ed0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ed0c:	b13a      	cbz	r2, 800ed1e <_strtod_l+0xee>
 800ed0e:	2135      	movs	r1, #53	; 0x35
 800ed10:	a81a      	add	r0, sp, #104	; 0x68
 800ed12:	f002 ffb2 	bl	8011c7a <__copybits>
 800ed16:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ed18:	4620      	mov	r0, r4
 800ed1a:	f002 fb71 	bl	8011400 <_Bfree>
 800ed1e:	3f01      	subs	r7, #1
 800ed20:	2f04      	cmp	r7, #4
 800ed22:	d806      	bhi.n	800ed32 <_strtod_l+0x102>
 800ed24:	e8df f007 	tbb	[pc, r7]
 800ed28:	1714030a 	.word	0x1714030a
 800ed2c:	0a          	.byte	0x0a
 800ed2d:	00          	.byte	0x00
 800ed2e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ed32:	0728      	lsls	r0, r5, #28
 800ed34:	d5c0      	bpl.n	800ecb8 <_strtod_l+0x88>
 800ed36:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ed3a:	e7bd      	b.n	800ecb8 <_strtod_l+0x88>
 800ed3c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ed40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ed42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ed46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ed4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ed4e:	e7f0      	b.n	800ed32 <_strtod_l+0x102>
 800ed50:	f8df b180 	ldr.w	fp, [pc, #384]	; 800eed4 <_strtod_l+0x2a4>
 800ed54:	e7ed      	b.n	800ed32 <_strtod_l+0x102>
 800ed56:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ed5a:	f04f 3aff 	mov.w	sl, #4294967295
 800ed5e:	e7e8      	b.n	800ed32 <_strtod_l+0x102>
 800ed60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed62:	1c5a      	adds	r2, r3, #1
 800ed64:	9217      	str	r2, [sp, #92]	; 0x5c
 800ed66:	785b      	ldrb	r3, [r3, #1]
 800ed68:	2b30      	cmp	r3, #48	; 0x30
 800ed6a:	d0f9      	beq.n	800ed60 <_strtod_l+0x130>
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d0a3      	beq.n	800ecb8 <_strtod_l+0x88>
 800ed70:	2301      	movs	r3, #1
 800ed72:	f04f 0900 	mov.w	r9, #0
 800ed76:	9304      	str	r3, [sp, #16]
 800ed78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed7a:	9308      	str	r3, [sp, #32]
 800ed7c:	f8cd 901c 	str.w	r9, [sp, #28]
 800ed80:	464f      	mov	r7, r9
 800ed82:	220a      	movs	r2, #10
 800ed84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ed86:	7806      	ldrb	r6, [r0, #0]
 800ed88:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ed8c:	b2d9      	uxtb	r1, r3
 800ed8e:	2909      	cmp	r1, #9
 800ed90:	d92a      	bls.n	800ede8 <_strtod_l+0x1b8>
 800ed92:	9905      	ldr	r1, [sp, #20]
 800ed94:	462a      	mov	r2, r5
 800ed96:	f003 fbbe 	bl	8012516 <strncmp>
 800ed9a:	b398      	cbz	r0, 800ee04 <_strtod_l+0x1d4>
 800ed9c:	2000      	movs	r0, #0
 800ed9e:	4632      	mov	r2, r6
 800eda0:	463d      	mov	r5, r7
 800eda2:	9005      	str	r0, [sp, #20]
 800eda4:	4603      	mov	r3, r0
 800eda6:	2a65      	cmp	r2, #101	; 0x65
 800eda8:	d001      	beq.n	800edae <_strtod_l+0x17e>
 800edaa:	2a45      	cmp	r2, #69	; 0x45
 800edac:	d118      	bne.n	800ede0 <_strtod_l+0x1b0>
 800edae:	b91d      	cbnz	r5, 800edb8 <_strtod_l+0x188>
 800edb0:	9a04      	ldr	r2, [sp, #16]
 800edb2:	4302      	orrs	r2, r0
 800edb4:	d09e      	beq.n	800ecf4 <_strtod_l+0xc4>
 800edb6:	2500      	movs	r5, #0
 800edb8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800edbc:	f108 0201 	add.w	r2, r8, #1
 800edc0:	9217      	str	r2, [sp, #92]	; 0x5c
 800edc2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800edc6:	2a2b      	cmp	r2, #43	; 0x2b
 800edc8:	d075      	beq.n	800eeb6 <_strtod_l+0x286>
 800edca:	2a2d      	cmp	r2, #45	; 0x2d
 800edcc:	d07b      	beq.n	800eec6 <_strtod_l+0x296>
 800edce:	f04f 0c00 	mov.w	ip, #0
 800edd2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800edd6:	2909      	cmp	r1, #9
 800edd8:	f240 8082 	bls.w	800eee0 <_strtod_l+0x2b0>
 800eddc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ede0:	2600      	movs	r6, #0
 800ede2:	e09d      	b.n	800ef20 <_strtod_l+0x2f0>
 800ede4:	2300      	movs	r3, #0
 800ede6:	e7c4      	b.n	800ed72 <_strtod_l+0x142>
 800ede8:	2f08      	cmp	r7, #8
 800edea:	bfd8      	it	le
 800edec:	9907      	ldrle	r1, [sp, #28]
 800edee:	f100 0001 	add.w	r0, r0, #1
 800edf2:	bfda      	itte	le
 800edf4:	fb02 3301 	mlale	r3, r2, r1, r3
 800edf8:	9307      	strle	r3, [sp, #28]
 800edfa:	fb02 3909 	mlagt	r9, r2, r9, r3
 800edfe:	3701      	adds	r7, #1
 800ee00:	9017      	str	r0, [sp, #92]	; 0x5c
 800ee02:	e7bf      	b.n	800ed84 <_strtod_l+0x154>
 800ee04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee06:	195a      	adds	r2, r3, r5
 800ee08:	9217      	str	r2, [sp, #92]	; 0x5c
 800ee0a:	5d5a      	ldrb	r2, [r3, r5]
 800ee0c:	2f00      	cmp	r7, #0
 800ee0e:	d037      	beq.n	800ee80 <_strtod_l+0x250>
 800ee10:	9005      	str	r0, [sp, #20]
 800ee12:	463d      	mov	r5, r7
 800ee14:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ee18:	2b09      	cmp	r3, #9
 800ee1a:	d912      	bls.n	800ee42 <_strtod_l+0x212>
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	e7c2      	b.n	800eda6 <_strtod_l+0x176>
 800ee20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee22:	1c5a      	adds	r2, r3, #1
 800ee24:	9217      	str	r2, [sp, #92]	; 0x5c
 800ee26:	785a      	ldrb	r2, [r3, #1]
 800ee28:	3001      	adds	r0, #1
 800ee2a:	2a30      	cmp	r2, #48	; 0x30
 800ee2c:	d0f8      	beq.n	800ee20 <_strtod_l+0x1f0>
 800ee2e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ee32:	2b08      	cmp	r3, #8
 800ee34:	f200 84d9 	bhi.w	800f7ea <_strtod_l+0xbba>
 800ee38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee3a:	9005      	str	r0, [sp, #20]
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	9308      	str	r3, [sp, #32]
 800ee40:	4605      	mov	r5, r0
 800ee42:	3a30      	subs	r2, #48	; 0x30
 800ee44:	f100 0301 	add.w	r3, r0, #1
 800ee48:	d014      	beq.n	800ee74 <_strtod_l+0x244>
 800ee4a:	9905      	ldr	r1, [sp, #20]
 800ee4c:	4419      	add	r1, r3
 800ee4e:	9105      	str	r1, [sp, #20]
 800ee50:	462b      	mov	r3, r5
 800ee52:	eb00 0e05 	add.w	lr, r0, r5
 800ee56:	210a      	movs	r1, #10
 800ee58:	4573      	cmp	r3, lr
 800ee5a:	d113      	bne.n	800ee84 <_strtod_l+0x254>
 800ee5c:	182b      	adds	r3, r5, r0
 800ee5e:	2b08      	cmp	r3, #8
 800ee60:	f105 0501 	add.w	r5, r5, #1
 800ee64:	4405      	add	r5, r0
 800ee66:	dc1c      	bgt.n	800eea2 <_strtod_l+0x272>
 800ee68:	9907      	ldr	r1, [sp, #28]
 800ee6a:	230a      	movs	r3, #10
 800ee6c:	fb03 2301 	mla	r3, r3, r1, r2
 800ee70:	9307      	str	r3, [sp, #28]
 800ee72:	2300      	movs	r3, #0
 800ee74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ee76:	1c51      	adds	r1, r2, #1
 800ee78:	9117      	str	r1, [sp, #92]	; 0x5c
 800ee7a:	7852      	ldrb	r2, [r2, #1]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	e7c9      	b.n	800ee14 <_strtod_l+0x1e4>
 800ee80:	4638      	mov	r0, r7
 800ee82:	e7d2      	b.n	800ee2a <_strtod_l+0x1fa>
 800ee84:	2b08      	cmp	r3, #8
 800ee86:	dc04      	bgt.n	800ee92 <_strtod_l+0x262>
 800ee88:	9e07      	ldr	r6, [sp, #28]
 800ee8a:	434e      	muls	r6, r1
 800ee8c:	9607      	str	r6, [sp, #28]
 800ee8e:	3301      	adds	r3, #1
 800ee90:	e7e2      	b.n	800ee58 <_strtod_l+0x228>
 800ee92:	f103 0c01 	add.w	ip, r3, #1
 800ee96:	f1bc 0f10 	cmp.w	ip, #16
 800ee9a:	bfd8      	it	le
 800ee9c:	fb01 f909 	mulle.w	r9, r1, r9
 800eea0:	e7f5      	b.n	800ee8e <_strtod_l+0x25e>
 800eea2:	2d10      	cmp	r5, #16
 800eea4:	bfdc      	itt	le
 800eea6:	230a      	movle	r3, #10
 800eea8:	fb03 2909 	mlale	r9, r3, r9, r2
 800eeac:	e7e1      	b.n	800ee72 <_strtod_l+0x242>
 800eeae:	2300      	movs	r3, #0
 800eeb0:	9305      	str	r3, [sp, #20]
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	e77c      	b.n	800edb0 <_strtod_l+0x180>
 800eeb6:	f04f 0c00 	mov.w	ip, #0
 800eeba:	f108 0202 	add.w	r2, r8, #2
 800eebe:	9217      	str	r2, [sp, #92]	; 0x5c
 800eec0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800eec4:	e785      	b.n	800edd2 <_strtod_l+0x1a2>
 800eec6:	f04f 0c01 	mov.w	ip, #1
 800eeca:	e7f6      	b.n	800eeba <_strtod_l+0x28a>
 800eecc:	08013230 	.word	0x08013230
 800eed0:	08012f48 	.word	0x08012f48
 800eed4:	7ff00000 	.word	0x7ff00000
 800eed8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eeda:	1c51      	adds	r1, r2, #1
 800eedc:	9117      	str	r1, [sp, #92]	; 0x5c
 800eede:	7852      	ldrb	r2, [r2, #1]
 800eee0:	2a30      	cmp	r2, #48	; 0x30
 800eee2:	d0f9      	beq.n	800eed8 <_strtod_l+0x2a8>
 800eee4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800eee8:	2908      	cmp	r1, #8
 800eeea:	f63f af79 	bhi.w	800ede0 <_strtod_l+0x1b0>
 800eeee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800eef2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eef4:	9206      	str	r2, [sp, #24]
 800eef6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eef8:	1c51      	adds	r1, r2, #1
 800eefa:	9117      	str	r1, [sp, #92]	; 0x5c
 800eefc:	7852      	ldrb	r2, [r2, #1]
 800eefe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ef02:	2e09      	cmp	r6, #9
 800ef04:	d937      	bls.n	800ef76 <_strtod_l+0x346>
 800ef06:	9e06      	ldr	r6, [sp, #24]
 800ef08:	1b89      	subs	r1, r1, r6
 800ef0a:	2908      	cmp	r1, #8
 800ef0c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ef10:	dc02      	bgt.n	800ef18 <_strtod_l+0x2e8>
 800ef12:	4576      	cmp	r6, lr
 800ef14:	bfa8      	it	ge
 800ef16:	4676      	movge	r6, lr
 800ef18:	f1bc 0f00 	cmp.w	ip, #0
 800ef1c:	d000      	beq.n	800ef20 <_strtod_l+0x2f0>
 800ef1e:	4276      	negs	r6, r6
 800ef20:	2d00      	cmp	r5, #0
 800ef22:	d14d      	bne.n	800efc0 <_strtod_l+0x390>
 800ef24:	9904      	ldr	r1, [sp, #16]
 800ef26:	4301      	orrs	r1, r0
 800ef28:	f47f aec6 	bne.w	800ecb8 <_strtod_l+0x88>
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	f47f aee1 	bne.w	800ecf4 <_strtod_l+0xc4>
 800ef32:	2a69      	cmp	r2, #105	; 0x69
 800ef34:	d027      	beq.n	800ef86 <_strtod_l+0x356>
 800ef36:	dc24      	bgt.n	800ef82 <_strtod_l+0x352>
 800ef38:	2a49      	cmp	r2, #73	; 0x49
 800ef3a:	d024      	beq.n	800ef86 <_strtod_l+0x356>
 800ef3c:	2a4e      	cmp	r2, #78	; 0x4e
 800ef3e:	f47f aed9 	bne.w	800ecf4 <_strtod_l+0xc4>
 800ef42:	499f      	ldr	r1, [pc, #636]	; (800f1c0 <_strtod_l+0x590>)
 800ef44:	a817      	add	r0, sp, #92	; 0x5c
 800ef46:	f002 f8e5 	bl	8011114 <__match>
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	f43f aed2 	beq.w	800ecf4 <_strtod_l+0xc4>
 800ef50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	2b28      	cmp	r3, #40	; 0x28
 800ef56:	d12d      	bne.n	800efb4 <_strtod_l+0x384>
 800ef58:	499a      	ldr	r1, [pc, #616]	; (800f1c4 <_strtod_l+0x594>)
 800ef5a:	aa1a      	add	r2, sp, #104	; 0x68
 800ef5c:	a817      	add	r0, sp, #92	; 0x5c
 800ef5e:	f002 f8ed 	bl	801113c <__hexnan>
 800ef62:	2805      	cmp	r0, #5
 800ef64:	d126      	bne.n	800efb4 <_strtod_l+0x384>
 800ef66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef68:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ef6c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ef70:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ef74:	e6a0      	b.n	800ecb8 <_strtod_l+0x88>
 800ef76:	210a      	movs	r1, #10
 800ef78:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ef7c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ef80:	e7b9      	b.n	800eef6 <_strtod_l+0x2c6>
 800ef82:	2a6e      	cmp	r2, #110	; 0x6e
 800ef84:	e7db      	b.n	800ef3e <_strtod_l+0x30e>
 800ef86:	4990      	ldr	r1, [pc, #576]	; (800f1c8 <_strtod_l+0x598>)
 800ef88:	a817      	add	r0, sp, #92	; 0x5c
 800ef8a:	f002 f8c3 	bl	8011114 <__match>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	f43f aeb0 	beq.w	800ecf4 <_strtod_l+0xc4>
 800ef94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef96:	498d      	ldr	r1, [pc, #564]	; (800f1cc <_strtod_l+0x59c>)
 800ef98:	3b01      	subs	r3, #1
 800ef9a:	a817      	add	r0, sp, #92	; 0x5c
 800ef9c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ef9e:	f002 f8b9 	bl	8011114 <__match>
 800efa2:	b910      	cbnz	r0, 800efaa <_strtod_l+0x37a>
 800efa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800efa6:	3301      	adds	r3, #1
 800efa8:	9317      	str	r3, [sp, #92]	; 0x5c
 800efaa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f1dc <_strtod_l+0x5ac>
 800efae:	f04f 0a00 	mov.w	sl, #0
 800efb2:	e681      	b.n	800ecb8 <_strtod_l+0x88>
 800efb4:	4886      	ldr	r0, [pc, #536]	; (800f1d0 <_strtod_l+0x5a0>)
 800efb6:	f003 fa53 	bl	8012460 <nan>
 800efba:	ec5b ab10 	vmov	sl, fp, d0
 800efbe:	e67b      	b.n	800ecb8 <_strtod_l+0x88>
 800efc0:	9b05      	ldr	r3, [sp, #20]
 800efc2:	9807      	ldr	r0, [sp, #28]
 800efc4:	1af3      	subs	r3, r6, r3
 800efc6:	2f00      	cmp	r7, #0
 800efc8:	bf08      	it	eq
 800efca:	462f      	moveq	r7, r5
 800efcc:	2d10      	cmp	r5, #16
 800efce:	9306      	str	r3, [sp, #24]
 800efd0:	46a8      	mov	r8, r5
 800efd2:	bfa8      	it	ge
 800efd4:	f04f 0810 	movge.w	r8, #16
 800efd8:	f7f1 faa4 	bl	8000524 <__aeabi_ui2d>
 800efdc:	2d09      	cmp	r5, #9
 800efde:	4682      	mov	sl, r0
 800efe0:	468b      	mov	fp, r1
 800efe2:	dd13      	ble.n	800f00c <_strtod_l+0x3dc>
 800efe4:	4b7b      	ldr	r3, [pc, #492]	; (800f1d4 <_strtod_l+0x5a4>)
 800efe6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800efea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800efee:	f7f1 fb13 	bl	8000618 <__aeabi_dmul>
 800eff2:	4682      	mov	sl, r0
 800eff4:	4648      	mov	r0, r9
 800eff6:	468b      	mov	fp, r1
 800eff8:	f7f1 fa94 	bl	8000524 <__aeabi_ui2d>
 800effc:	4602      	mov	r2, r0
 800effe:	460b      	mov	r3, r1
 800f000:	4650      	mov	r0, sl
 800f002:	4659      	mov	r1, fp
 800f004:	f7f1 f952 	bl	80002ac <__adddf3>
 800f008:	4682      	mov	sl, r0
 800f00a:	468b      	mov	fp, r1
 800f00c:	2d0f      	cmp	r5, #15
 800f00e:	dc38      	bgt.n	800f082 <_strtod_l+0x452>
 800f010:	9b06      	ldr	r3, [sp, #24]
 800f012:	2b00      	cmp	r3, #0
 800f014:	f43f ae50 	beq.w	800ecb8 <_strtod_l+0x88>
 800f018:	dd24      	ble.n	800f064 <_strtod_l+0x434>
 800f01a:	2b16      	cmp	r3, #22
 800f01c:	dc0b      	bgt.n	800f036 <_strtod_l+0x406>
 800f01e:	496d      	ldr	r1, [pc, #436]	; (800f1d4 <_strtod_l+0x5a4>)
 800f020:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f024:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f028:	4652      	mov	r2, sl
 800f02a:	465b      	mov	r3, fp
 800f02c:	f7f1 faf4 	bl	8000618 <__aeabi_dmul>
 800f030:	4682      	mov	sl, r0
 800f032:	468b      	mov	fp, r1
 800f034:	e640      	b.n	800ecb8 <_strtod_l+0x88>
 800f036:	9a06      	ldr	r2, [sp, #24]
 800f038:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f03c:	4293      	cmp	r3, r2
 800f03e:	db20      	blt.n	800f082 <_strtod_l+0x452>
 800f040:	4c64      	ldr	r4, [pc, #400]	; (800f1d4 <_strtod_l+0x5a4>)
 800f042:	f1c5 050f 	rsb	r5, r5, #15
 800f046:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f04a:	4652      	mov	r2, sl
 800f04c:	465b      	mov	r3, fp
 800f04e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f052:	f7f1 fae1 	bl	8000618 <__aeabi_dmul>
 800f056:	9b06      	ldr	r3, [sp, #24]
 800f058:	1b5d      	subs	r5, r3, r5
 800f05a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f05e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f062:	e7e3      	b.n	800f02c <_strtod_l+0x3fc>
 800f064:	9b06      	ldr	r3, [sp, #24]
 800f066:	3316      	adds	r3, #22
 800f068:	db0b      	blt.n	800f082 <_strtod_l+0x452>
 800f06a:	9b05      	ldr	r3, [sp, #20]
 800f06c:	1b9e      	subs	r6, r3, r6
 800f06e:	4b59      	ldr	r3, [pc, #356]	; (800f1d4 <_strtod_l+0x5a4>)
 800f070:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f074:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f078:	4650      	mov	r0, sl
 800f07a:	4659      	mov	r1, fp
 800f07c:	f7f1 fbf6 	bl	800086c <__aeabi_ddiv>
 800f080:	e7d6      	b.n	800f030 <_strtod_l+0x400>
 800f082:	9b06      	ldr	r3, [sp, #24]
 800f084:	eba5 0808 	sub.w	r8, r5, r8
 800f088:	4498      	add	r8, r3
 800f08a:	f1b8 0f00 	cmp.w	r8, #0
 800f08e:	dd74      	ble.n	800f17a <_strtod_l+0x54a>
 800f090:	f018 030f 	ands.w	r3, r8, #15
 800f094:	d00a      	beq.n	800f0ac <_strtod_l+0x47c>
 800f096:	494f      	ldr	r1, [pc, #316]	; (800f1d4 <_strtod_l+0x5a4>)
 800f098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f09c:	4652      	mov	r2, sl
 800f09e:	465b      	mov	r3, fp
 800f0a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0a4:	f7f1 fab8 	bl	8000618 <__aeabi_dmul>
 800f0a8:	4682      	mov	sl, r0
 800f0aa:	468b      	mov	fp, r1
 800f0ac:	f038 080f 	bics.w	r8, r8, #15
 800f0b0:	d04f      	beq.n	800f152 <_strtod_l+0x522>
 800f0b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f0b6:	dd22      	ble.n	800f0fe <_strtod_l+0x4ce>
 800f0b8:	2500      	movs	r5, #0
 800f0ba:	462e      	mov	r6, r5
 800f0bc:	9507      	str	r5, [sp, #28]
 800f0be:	9505      	str	r5, [sp, #20]
 800f0c0:	2322      	movs	r3, #34	; 0x22
 800f0c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f1dc <_strtod_l+0x5ac>
 800f0c6:	6023      	str	r3, [r4, #0]
 800f0c8:	f04f 0a00 	mov.w	sl, #0
 800f0cc:	9b07      	ldr	r3, [sp, #28]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	f43f adf2 	beq.w	800ecb8 <_strtod_l+0x88>
 800f0d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f002 f992 	bl	8011400 <_Bfree>
 800f0dc:	9905      	ldr	r1, [sp, #20]
 800f0de:	4620      	mov	r0, r4
 800f0e0:	f002 f98e 	bl	8011400 <_Bfree>
 800f0e4:	4631      	mov	r1, r6
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f002 f98a 	bl	8011400 <_Bfree>
 800f0ec:	9907      	ldr	r1, [sp, #28]
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	f002 f986 	bl	8011400 <_Bfree>
 800f0f4:	4629      	mov	r1, r5
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	f002 f982 	bl	8011400 <_Bfree>
 800f0fc:	e5dc      	b.n	800ecb8 <_strtod_l+0x88>
 800f0fe:	4b36      	ldr	r3, [pc, #216]	; (800f1d8 <_strtod_l+0x5a8>)
 800f100:	9304      	str	r3, [sp, #16]
 800f102:	2300      	movs	r3, #0
 800f104:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f108:	4650      	mov	r0, sl
 800f10a:	4659      	mov	r1, fp
 800f10c:	4699      	mov	r9, r3
 800f10e:	f1b8 0f01 	cmp.w	r8, #1
 800f112:	dc21      	bgt.n	800f158 <_strtod_l+0x528>
 800f114:	b10b      	cbz	r3, 800f11a <_strtod_l+0x4ea>
 800f116:	4682      	mov	sl, r0
 800f118:	468b      	mov	fp, r1
 800f11a:	4b2f      	ldr	r3, [pc, #188]	; (800f1d8 <_strtod_l+0x5a8>)
 800f11c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f120:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f124:	4652      	mov	r2, sl
 800f126:	465b      	mov	r3, fp
 800f128:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f12c:	f7f1 fa74 	bl	8000618 <__aeabi_dmul>
 800f130:	4b2a      	ldr	r3, [pc, #168]	; (800f1dc <_strtod_l+0x5ac>)
 800f132:	460a      	mov	r2, r1
 800f134:	400b      	ands	r3, r1
 800f136:	492a      	ldr	r1, [pc, #168]	; (800f1e0 <_strtod_l+0x5b0>)
 800f138:	428b      	cmp	r3, r1
 800f13a:	4682      	mov	sl, r0
 800f13c:	d8bc      	bhi.n	800f0b8 <_strtod_l+0x488>
 800f13e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f142:	428b      	cmp	r3, r1
 800f144:	bf86      	itte	hi
 800f146:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f1e4 <_strtod_l+0x5b4>
 800f14a:	f04f 3aff 	movhi.w	sl, #4294967295
 800f14e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f152:	2300      	movs	r3, #0
 800f154:	9304      	str	r3, [sp, #16]
 800f156:	e084      	b.n	800f262 <_strtod_l+0x632>
 800f158:	f018 0f01 	tst.w	r8, #1
 800f15c:	d005      	beq.n	800f16a <_strtod_l+0x53a>
 800f15e:	9b04      	ldr	r3, [sp, #16]
 800f160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f164:	f7f1 fa58 	bl	8000618 <__aeabi_dmul>
 800f168:	2301      	movs	r3, #1
 800f16a:	9a04      	ldr	r2, [sp, #16]
 800f16c:	3208      	adds	r2, #8
 800f16e:	f109 0901 	add.w	r9, r9, #1
 800f172:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f176:	9204      	str	r2, [sp, #16]
 800f178:	e7c9      	b.n	800f10e <_strtod_l+0x4de>
 800f17a:	d0ea      	beq.n	800f152 <_strtod_l+0x522>
 800f17c:	f1c8 0800 	rsb	r8, r8, #0
 800f180:	f018 020f 	ands.w	r2, r8, #15
 800f184:	d00a      	beq.n	800f19c <_strtod_l+0x56c>
 800f186:	4b13      	ldr	r3, [pc, #76]	; (800f1d4 <_strtod_l+0x5a4>)
 800f188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f18c:	4650      	mov	r0, sl
 800f18e:	4659      	mov	r1, fp
 800f190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f194:	f7f1 fb6a 	bl	800086c <__aeabi_ddiv>
 800f198:	4682      	mov	sl, r0
 800f19a:	468b      	mov	fp, r1
 800f19c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f1a0:	d0d7      	beq.n	800f152 <_strtod_l+0x522>
 800f1a2:	f1b8 0f1f 	cmp.w	r8, #31
 800f1a6:	dd1f      	ble.n	800f1e8 <_strtod_l+0x5b8>
 800f1a8:	2500      	movs	r5, #0
 800f1aa:	462e      	mov	r6, r5
 800f1ac:	9507      	str	r5, [sp, #28]
 800f1ae:	9505      	str	r5, [sp, #20]
 800f1b0:	2322      	movs	r3, #34	; 0x22
 800f1b2:	f04f 0a00 	mov.w	sl, #0
 800f1b6:	f04f 0b00 	mov.w	fp, #0
 800f1ba:	6023      	str	r3, [r4, #0]
 800f1bc:	e786      	b.n	800f0cc <_strtod_l+0x49c>
 800f1be:	bf00      	nop
 800f1c0:	08012f19 	.word	0x08012f19
 800f1c4:	08012f5c 	.word	0x08012f5c
 800f1c8:	08012f11 	.word	0x08012f11
 800f1cc:	080130d8 	.word	0x080130d8
 800f1d0:	08012fd3 	.word	0x08012fd3
 800f1d4:	080132c8 	.word	0x080132c8
 800f1d8:	080132a0 	.word	0x080132a0
 800f1dc:	7ff00000 	.word	0x7ff00000
 800f1e0:	7ca00000 	.word	0x7ca00000
 800f1e4:	7fefffff 	.word	0x7fefffff
 800f1e8:	f018 0310 	ands.w	r3, r8, #16
 800f1ec:	bf18      	it	ne
 800f1ee:	236a      	movne	r3, #106	; 0x6a
 800f1f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f5a0 <_strtod_l+0x970>
 800f1f4:	9304      	str	r3, [sp, #16]
 800f1f6:	4650      	mov	r0, sl
 800f1f8:	4659      	mov	r1, fp
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	f018 0f01 	tst.w	r8, #1
 800f200:	d004      	beq.n	800f20c <_strtod_l+0x5dc>
 800f202:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f206:	f7f1 fa07 	bl	8000618 <__aeabi_dmul>
 800f20a:	2301      	movs	r3, #1
 800f20c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f210:	f109 0908 	add.w	r9, r9, #8
 800f214:	d1f2      	bne.n	800f1fc <_strtod_l+0x5cc>
 800f216:	b10b      	cbz	r3, 800f21c <_strtod_l+0x5ec>
 800f218:	4682      	mov	sl, r0
 800f21a:	468b      	mov	fp, r1
 800f21c:	9b04      	ldr	r3, [sp, #16]
 800f21e:	b1c3      	cbz	r3, 800f252 <_strtod_l+0x622>
 800f220:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f224:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f228:	2b00      	cmp	r3, #0
 800f22a:	4659      	mov	r1, fp
 800f22c:	dd11      	ble.n	800f252 <_strtod_l+0x622>
 800f22e:	2b1f      	cmp	r3, #31
 800f230:	f340 8124 	ble.w	800f47c <_strtod_l+0x84c>
 800f234:	2b34      	cmp	r3, #52	; 0x34
 800f236:	bfde      	ittt	le
 800f238:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f23c:	f04f 33ff 	movle.w	r3, #4294967295
 800f240:	fa03 f202 	lslle.w	r2, r3, r2
 800f244:	f04f 0a00 	mov.w	sl, #0
 800f248:	bfcc      	ite	gt
 800f24a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f24e:	ea02 0b01 	andle.w	fp, r2, r1
 800f252:	2200      	movs	r2, #0
 800f254:	2300      	movs	r3, #0
 800f256:	4650      	mov	r0, sl
 800f258:	4659      	mov	r1, fp
 800f25a:	f7f1 fc45 	bl	8000ae8 <__aeabi_dcmpeq>
 800f25e:	2800      	cmp	r0, #0
 800f260:	d1a2      	bne.n	800f1a8 <_strtod_l+0x578>
 800f262:	9b07      	ldr	r3, [sp, #28]
 800f264:	9300      	str	r3, [sp, #0]
 800f266:	9908      	ldr	r1, [sp, #32]
 800f268:	462b      	mov	r3, r5
 800f26a:	463a      	mov	r2, r7
 800f26c:	4620      	mov	r0, r4
 800f26e:	f002 f92f 	bl	80114d0 <__s2b>
 800f272:	9007      	str	r0, [sp, #28]
 800f274:	2800      	cmp	r0, #0
 800f276:	f43f af1f 	beq.w	800f0b8 <_strtod_l+0x488>
 800f27a:	9b05      	ldr	r3, [sp, #20]
 800f27c:	1b9e      	subs	r6, r3, r6
 800f27e:	9b06      	ldr	r3, [sp, #24]
 800f280:	2b00      	cmp	r3, #0
 800f282:	bfb4      	ite	lt
 800f284:	4633      	movlt	r3, r6
 800f286:	2300      	movge	r3, #0
 800f288:	930c      	str	r3, [sp, #48]	; 0x30
 800f28a:	9b06      	ldr	r3, [sp, #24]
 800f28c:	2500      	movs	r5, #0
 800f28e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f292:	9312      	str	r3, [sp, #72]	; 0x48
 800f294:	462e      	mov	r6, r5
 800f296:	9b07      	ldr	r3, [sp, #28]
 800f298:	4620      	mov	r0, r4
 800f29a:	6859      	ldr	r1, [r3, #4]
 800f29c:	f002 f870 	bl	8011380 <_Balloc>
 800f2a0:	9005      	str	r0, [sp, #20]
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	f43f af0c 	beq.w	800f0c0 <_strtod_l+0x490>
 800f2a8:	9b07      	ldr	r3, [sp, #28]
 800f2aa:	691a      	ldr	r2, [r3, #16]
 800f2ac:	3202      	adds	r2, #2
 800f2ae:	f103 010c 	add.w	r1, r3, #12
 800f2b2:	0092      	lsls	r2, r2, #2
 800f2b4:	300c      	adds	r0, #12
 800f2b6:	f7fe fdd9 	bl	800de6c <memcpy>
 800f2ba:	ec4b ab10 	vmov	d0, sl, fp
 800f2be:	aa1a      	add	r2, sp, #104	; 0x68
 800f2c0:	a919      	add	r1, sp, #100	; 0x64
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f002 fc4a 	bl	8011b5c <__d2b>
 800f2c8:	ec4b ab18 	vmov	d8, sl, fp
 800f2cc:	9018      	str	r0, [sp, #96]	; 0x60
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	f43f aef6 	beq.w	800f0c0 <_strtod_l+0x490>
 800f2d4:	2101      	movs	r1, #1
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f002 f994 	bl	8011604 <__i2b>
 800f2dc:	4606      	mov	r6, r0
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	f43f aeee 	beq.w	800f0c0 <_strtod_l+0x490>
 800f2e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f2e6:	9904      	ldr	r1, [sp, #16]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	bfab      	itete	ge
 800f2ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f2ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f2f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f2f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f2f6:	bfac      	ite	ge
 800f2f8:	eb03 0902 	addge.w	r9, r3, r2
 800f2fc:	1ad7      	sublt	r7, r2, r3
 800f2fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f300:	eba3 0801 	sub.w	r8, r3, r1
 800f304:	4490      	add	r8, r2
 800f306:	4ba1      	ldr	r3, [pc, #644]	; (800f58c <_strtod_l+0x95c>)
 800f308:	f108 38ff 	add.w	r8, r8, #4294967295
 800f30c:	4598      	cmp	r8, r3
 800f30e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f312:	f280 80c7 	bge.w	800f4a4 <_strtod_l+0x874>
 800f316:	eba3 0308 	sub.w	r3, r3, r8
 800f31a:	2b1f      	cmp	r3, #31
 800f31c:	eba2 0203 	sub.w	r2, r2, r3
 800f320:	f04f 0101 	mov.w	r1, #1
 800f324:	f300 80b1 	bgt.w	800f48a <_strtod_l+0x85a>
 800f328:	fa01 f303 	lsl.w	r3, r1, r3
 800f32c:	930d      	str	r3, [sp, #52]	; 0x34
 800f32e:	2300      	movs	r3, #0
 800f330:	9308      	str	r3, [sp, #32]
 800f332:	eb09 0802 	add.w	r8, r9, r2
 800f336:	9b04      	ldr	r3, [sp, #16]
 800f338:	45c1      	cmp	r9, r8
 800f33a:	4417      	add	r7, r2
 800f33c:	441f      	add	r7, r3
 800f33e:	464b      	mov	r3, r9
 800f340:	bfa8      	it	ge
 800f342:	4643      	movge	r3, r8
 800f344:	42bb      	cmp	r3, r7
 800f346:	bfa8      	it	ge
 800f348:	463b      	movge	r3, r7
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	bfc2      	ittt	gt
 800f34e:	eba8 0803 	subgt.w	r8, r8, r3
 800f352:	1aff      	subgt	r7, r7, r3
 800f354:	eba9 0903 	subgt.w	r9, r9, r3
 800f358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	dd17      	ble.n	800f38e <_strtod_l+0x75e>
 800f35e:	4631      	mov	r1, r6
 800f360:	461a      	mov	r2, r3
 800f362:	4620      	mov	r0, r4
 800f364:	f002 fa0e 	bl	8011784 <__pow5mult>
 800f368:	4606      	mov	r6, r0
 800f36a:	2800      	cmp	r0, #0
 800f36c:	f43f aea8 	beq.w	800f0c0 <_strtod_l+0x490>
 800f370:	4601      	mov	r1, r0
 800f372:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f374:	4620      	mov	r0, r4
 800f376:	f002 f95b 	bl	8011630 <__multiply>
 800f37a:	900b      	str	r0, [sp, #44]	; 0x2c
 800f37c:	2800      	cmp	r0, #0
 800f37e:	f43f ae9f 	beq.w	800f0c0 <_strtod_l+0x490>
 800f382:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f384:	4620      	mov	r0, r4
 800f386:	f002 f83b 	bl	8011400 <_Bfree>
 800f38a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f38c:	9318      	str	r3, [sp, #96]	; 0x60
 800f38e:	f1b8 0f00 	cmp.w	r8, #0
 800f392:	f300 808c 	bgt.w	800f4ae <_strtod_l+0x87e>
 800f396:	9b06      	ldr	r3, [sp, #24]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	dd08      	ble.n	800f3ae <_strtod_l+0x77e>
 800f39c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f39e:	9905      	ldr	r1, [sp, #20]
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	f002 f9ef 	bl	8011784 <__pow5mult>
 800f3a6:	9005      	str	r0, [sp, #20]
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	f43f ae89 	beq.w	800f0c0 <_strtod_l+0x490>
 800f3ae:	2f00      	cmp	r7, #0
 800f3b0:	dd08      	ble.n	800f3c4 <_strtod_l+0x794>
 800f3b2:	9905      	ldr	r1, [sp, #20]
 800f3b4:	463a      	mov	r2, r7
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	f002 fa3e 	bl	8011838 <__lshift>
 800f3bc:	9005      	str	r0, [sp, #20]
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	f43f ae7e 	beq.w	800f0c0 <_strtod_l+0x490>
 800f3c4:	f1b9 0f00 	cmp.w	r9, #0
 800f3c8:	dd08      	ble.n	800f3dc <_strtod_l+0x7ac>
 800f3ca:	4631      	mov	r1, r6
 800f3cc:	464a      	mov	r2, r9
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	f002 fa32 	bl	8011838 <__lshift>
 800f3d4:	4606      	mov	r6, r0
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	f43f ae72 	beq.w	800f0c0 <_strtod_l+0x490>
 800f3dc:	9a05      	ldr	r2, [sp, #20]
 800f3de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f002 fab5 	bl	8011950 <__mdiff>
 800f3e6:	4605      	mov	r5, r0
 800f3e8:	2800      	cmp	r0, #0
 800f3ea:	f43f ae69 	beq.w	800f0c0 <_strtod_l+0x490>
 800f3ee:	68c3      	ldr	r3, [r0, #12]
 800f3f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	60c3      	str	r3, [r0, #12]
 800f3f6:	4631      	mov	r1, r6
 800f3f8:	f002 fa8e 	bl	8011918 <__mcmp>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	da60      	bge.n	800f4c2 <_strtod_l+0x892>
 800f400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f402:	ea53 030a 	orrs.w	r3, r3, sl
 800f406:	f040 8082 	bne.w	800f50e <_strtod_l+0x8de>
 800f40a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d17d      	bne.n	800f50e <_strtod_l+0x8de>
 800f412:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f416:	0d1b      	lsrs	r3, r3, #20
 800f418:	051b      	lsls	r3, r3, #20
 800f41a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f41e:	d976      	bls.n	800f50e <_strtod_l+0x8de>
 800f420:	696b      	ldr	r3, [r5, #20]
 800f422:	b913      	cbnz	r3, 800f42a <_strtod_l+0x7fa>
 800f424:	692b      	ldr	r3, [r5, #16]
 800f426:	2b01      	cmp	r3, #1
 800f428:	dd71      	ble.n	800f50e <_strtod_l+0x8de>
 800f42a:	4629      	mov	r1, r5
 800f42c:	2201      	movs	r2, #1
 800f42e:	4620      	mov	r0, r4
 800f430:	f002 fa02 	bl	8011838 <__lshift>
 800f434:	4631      	mov	r1, r6
 800f436:	4605      	mov	r5, r0
 800f438:	f002 fa6e 	bl	8011918 <__mcmp>
 800f43c:	2800      	cmp	r0, #0
 800f43e:	dd66      	ble.n	800f50e <_strtod_l+0x8de>
 800f440:	9904      	ldr	r1, [sp, #16]
 800f442:	4a53      	ldr	r2, [pc, #332]	; (800f590 <_strtod_l+0x960>)
 800f444:	465b      	mov	r3, fp
 800f446:	2900      	cmp	r1, #0
 800f448:	f000 8081 	beq.w	800f54e <_strtod_l+0x91e>
 800f44c:	ea02 010b 	and.w	r1, r2, fp
 800f450:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f454:	dc7b      	bgt.n	800f54e <_strtod_l+0x91e>
 800f456:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f45a:	f77f aea9 	ble.w	800f1b0 <_strtod_l+0x580>
 800f45e:	4b4d      	ldr	r3, [pc, #308]	; (800f594 <_strtod_l+0x964>)
 800f460:	4650      	mov	r0, sl
 800f462:	4659      	mov	r1, fp
 800f464:	2200      	movs	r2, #0
 800f466:	f7f1 f8d7 	bl	8000618 <__aeabi_dmul>
 800f46a:	460b      	mov	r3, r1
 800f46c:	4303      	orrs	r3, r0
 800f46e:	bf08      	it	eq
 800f470:	2322      	moveq	r3, #34	; 0x22
 800f472:	4682      	mov	sl, r0
 800f474:	468b      	mov	fp, r1
 800f476:	bf08      	it	eq
 800f478:	6023      	streq	r3, [r4, #0]
 800f47a:	e62b      	b.n	800f0d4 <_strtod_l+0x4a4>
 800f47c:	f04f 32ff 	mov.w	r2, #4294967295
 800f480:	fa02 f303 	lsl.w	r3, r2, r3
 800f484:	ea03 0a0a 	and.w	sl, r3, sl
 800f488:	e6e3      	b.n	800f252 <_strtod_l+0x622>
 800f48a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f48e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f492:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f496:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f49a:	fa01 f308 	lsl.w	r3, r1, r8
 800f49e:	9308      	str	r3, [sp, #32]
 800f4a0:	910d      	str	r1, [sp, #52]	; 0x34
 800f4a2:	e746      	b.n	800f332 <_strtod_l+0x702>
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	9308      	str	r3, [sp, #32]
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	930d      	str	r3, [sp, #52]	; 0x34
 800f4ac:	e741      	b.n	800f332 <_strtod_l+0x702>
 800f4ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f4b0:	4642      	mov	r2, r8
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	f002 f9c0 	bl	8011838 <__lshift>
 800f4b8:	9018      	str	r0, [sp, #96]	; 0x60
 800f4ba:	2800      	cmp	r0, #0
 800f4bc:	f47f af6b 	bne.w	800f396 <_strtod_l+0x766>
 800f4c0:	e5fe      	b.n	800f0c0 <_strtod_l+0x490>
 800f4c2:	465f      	mov	r7, fp
 800f4c4:	d16e      	bne.n	800f5a4 <_strtod_l+0x974>
 800f4c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f4c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f4cc:	b342      	cbz	r2, 800f520 <_strtod_l+0x8f0>
 800f4ce:	4a32      	ldr	r2, [pc, #200]	; (800f598 <_strtod_l+0x968>)
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	d128      	bne.n	800f526 <_strtod_l+0x8f6>
 800f4d4:	9b04      	ldr	r3, [sp, #16]
 800f4d6:	4651      	mov	r1, sl
 800f4d8:	b1eb      	cbz	r3, 800f516 <_strtod_l+0x8e6>
 800f4da:	4b2d      	ldr	r3, [pc, #180]	; (800f590 <_strtod_l+0x960>)
 800f4dc:	403b      	ands	r3, r7
 800f4de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f4e6:	d819      	bhi.n	800f51c <_strtod_l+0x8ec>
 800f4e8:	0d1b      	lsrs	r3, r3, #20
 800f4ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f4ee:	fa02 f303 	lsl.w	r3, r2, r3
 800f4f2:	4299      	cmp	r1, r3
 800f4f4:	d117      	bne.n	800f526 <_strtod_l+0x8f6>
 800f4f6:	4b29      	ldr	r3, [pc, #164]	; (800f59c <_strtod_l+0x96c>)
 800f4f8:	429f      	cmp	r7, r3
 800f4fa:	d102      	bne.n	800f502 <_strtod_l+0x8d2>
 800f4fc:	3101      	adds	r1, #1
 800f4fe:	f43f addf 	beq.w	800f0c0 <_strtod_l+0x490>
 800f502:	4b23      	ldr	r3, [pc, #140]	; (800f590 <_strtod_l+0x960>)
 800f504:	403b      	ands	r3, r7
 800f506:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f50a:	f04f 0a00 	mov.w	sl, #0
 800f50e:	9b04      	ldr	r3, [sp, #16]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d1a4      	bne.n	800f45e <_strtod_l+0x82e>
 800f514:	e5de      	b.n	800f0d4 <_strtod_l+0x4a4>
 800f516:	f04f 33ff 	mov.w	r3, #4294967295
 800f51a:	e7ea      	b.n	800f4f2 <_strtod_l+0x8c2>
 800f51c:	4613      	mov	r3, r2
 800f51e:	e7e8      	b.n	800f4f2 <_strtod_l+0x8c2>
 800f520:	ea53 030a 	orrs.w	r3, r3, sl
 800f524:	d08c      	beq.n	800f440 <_strtod_l+0x810>
 800f526:	9b08      	ldr	r3, [sp, #32]
 800f528:	b1db      	cbz	r3, 800f562 <_strtod_l+0x932>
 800f52a:	423b      	tst	r3, r7
 800f52c:	d0ef      	beq.n	800f50e <_strtod_l+0x8de>
 800f52e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f530:	9a04      	ldr	r2, [sp, #16]
 800f532:	4650      	mov	r0, sl
 800f534:	4659      	mov	r1, fp
 800f536:	b1c3      	cbz	r3, 800f56a <_strtod_l+0x93a>
 800f538:	f7ff fb5d 	bl	800ebf6 <sulp>
 800f53c:	4602      	mov	r2, r0
 800f53e:	460b      	mov	r3, r1
 800f540:	ec51 0b18 	vmov	r0, r1, d8
 800f544:	f7f0 feb2 	bl	80002ac <__adddf3>
 800f548:	4682      	mov	sl, r0
 800f54a:	468b      	mov	fp, r1
 800f54c:	e7df      	b.n	800f50e <_strtod_l+0x8de>
 800f54e:	4013      	ands	r3, r2
 800f550:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f554:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f558:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f55c:	f04f 3aff 	mov.w	sl, #4294967295
 800f560:	e7d5      	b.n	800f50e <_strtod_l+0x8de>
 800f562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f564:	ea13 0f0a 	tst.w	r3, sl
 800f568:	e7e0      	b.n	800f52c <_strtod_l+0x8fc>
 800f56a:	f7ff fb44 	bl	800ebf6 <sulp>
 800f56e:	4602      	mov	r2, r0
 800f570:	460b      	mov	r3, r1
 800f572:	ec51 0b18 	vmov	r0, r1, d8
 800f576:	f7f0 fe97 	bl	80002a8 <__aeabi_dsub>
 800f57a:	2200      	movs	r2, #0
 800f57c:	2300      	movs	r3, #0
 800f57e:	4682      	mov	sl, r0
 800f580:	468b      	mov	fp, r1
 800f582:	f7f1 fab1 	bl	8000ae8 <__aeabi_dcmpeq>
 800f586:	2800      	cmp	r0, #0
 800f588:	d0c1      	beq.n	800f50e <_strtod_l+0x8de>
 800f58a:	e611      	b.n	800f1b0 <_strtod_l+0x580>
 800f58c:	fffffc02 	.word	0xfffffc02
 800f590:	7ff00000 	.word	0x7ff00000
 800f594:	39500000 	.word	0x39500000
 800f598:	000fffff 	.word	0x000fffff
 800f59c:	7fefffff 	.word	0x7fefffff
 800f5a0:	08012f70 	.word	0x08012f70
 800f5a4:	4631      	mov	r1, r6
 800f5a6:	4628      	mov	r0, r5
 800f5a8:	f002 fb34 	bl	8011c14 <__ratio>
 800f5ac:	ec59 8b10 	vmov	r8, r9, d0
 800f5b0:	ee10 0a10 	vmov	r0, s0
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f5ba:	4649      	mov	r1, r9
 800f5bc:	f7f1 faa8 	bl	8000b10 <__aeabi_dcmple>
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	d07a      	beq.n	800f6ba <_strtod_l+0xa8a>
 800f5c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d04a      	beq.n	800f660 <_strtod_l+0xa30>
 800f5ca:	4b95      	ldr	r3, [pc, #596]	; (800f820 <_strtod_l+0xbf0>)
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f5d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f820 <_strtod_l+0xbf0>
 800f5d6:	f04f 0800 	mov.w	r8, #0
 800f5da:	4b92      	ldr	r3, [pc, #584]	; (800f824 <_strtod_l+0xbf4>)
 800f5dc:	403b      	ands	r3, r7
 800f5de:	930d      	str	r3, [sp, #52]	; 0x34
 800f5e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f5e2:	4b91      	ldr	r3, [pc, #580]	; (800f828 <_strtod_l+0xbf8>)
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	f040 80b0 	bne.w	800f74a <_strtod_l+0xb1a>
 800f5ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f5ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f5f2:	ec4b ab10 	vmov	d0, sl, fp
 800f5f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f5fa:	f002 fa33 	bl	8011a64 <__ulp>
 800f5fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f602:	ec53 2b10 	vmov	r2, r3, d0
 800f606:	f7f1 f807 	bl	8000618 <__aeabi_dmul>
 800f60a:	4652      	mov	r2, sl
 800f60c:	465b      	mov	r3, fp
 800f60e:	f7f0 fe4d 	bl	80002ac <__adddf3>
 800f612:	460b      	mov	r3, r1
 800f614:	4983      	ldr	r1, [pc, #524]	; (800f824 <_strtod_l+0xbf4>)
 800f616:	4a85      	ldr	r2, [pc, #532]	; (800f82c <_strtod_l+0xbfc>)
 800f618:	4019      	ands	r1, r3
 800f61a:	4291      	cmp	r1, r2
 800f61c:	4682      	mov	sl, r0
 800f61e:	d960      	bls.n	800f6e2 <_strtod_l+0xab2>
 800f620:	ee18 3a90 	vmov	r3, s17
 800f624:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f628:	4293      	cmp	r3, r2
 800f62a:	d104      	bne.n	800f636 <_strtod_l+0xa06>
 800f62c:	ee18 3a10 	vmov	r3, s16
 800f630:	3301      	adds	r3, #1
 800f632:	f43f ad45 	beq.w	800f0c0 <_strtod_l+0x490>
 800f636:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f838 <_strtod_l+0xc08>
 800f63a:	f04f 3aff 	mov.w	sl, #4294967295
 800f63e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f640:	4620      	mov	r0, r4
 800f642:	f001 fedd 	bl	8011400 <_Bfree>
 800f646:	9905      	ldr	r1, [sp, #20]
 800f648:	4620      	mov	r0, r4
 800f64a:	f001 fed9 	bl	8011400 <_Bfree>
 800f64e:	4631      	mov	r1, r6
 800f650:	4620      	mov	r0, r4
 800f652:	f001 fed5 	bl	8011400 <_Bfree>
 800f656:	4629      	mov	r1, r5
 800f658:	4620      	mov	r0, r4
 800f65a:	f001 fed1 	bl	8011400 <_Bfree>
 800f65e:	e61a      	b.n	800f296 <_strtod_l+0x666>
 800f660:	f1ba 0f00 	cmp.w	sl, #0
 800f664:	d11b      	bne.n	800f69e <_strtod_l+0xa6e>
 800f666:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f66a:	b9f3      	cbnz	r3, 800f6aa <_strtod_l+0xa7a>
 800f66c:	4b6c      	ldr	r3, [pc, #432]	; (800f820 <_strtod_l+0xbf0>)
 800f66e:	2200      	movs	r2, #0
 800f670:	4640      	mov	r0, r8
 800f672:	4649      	mov	r1, r9
 800f674:	f7f1 fa42 	bl	8000afc <__aeabi_dcmplt>
 800f678:	b9d0      	cbnz	r0, 800f6b0 <_strtod_l+0xa80>
 800f67a:	4640      	mov	r0, r8
 800f67c:	4649      	mov	r1, r9
 800f67e:	4b6c      	ldr	r3, [pc, #432]	; (800f830 <_strtod_l+0xc00>)
 800f680:	2200      	movs	r2, #0
 800f682:	f7f0 ffc9 	bl	8000618 <__aeabi_dmul>
 800f686:	4680      	mov	r8, r0
 800f688:	4689      	mov	r9, r1
 800f68a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f68e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f692:	9315      	str	r3, [sp, #84]	; 0x54
 800f694:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f698:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f69c:	e79d      	b.n	800f5da <_strtod_l+0x9aa>
 800f69e:	f1ba 0f01 	cmp.w	sl, #1
 800f6a2:	d102      	bne.n	800f6aa <_strtod_l+0xa7a>
 800f6a4:	2f00      	cmp	r7, #0
 800f6a6:	f43f ad83 	beq.w	800f1b0 <_strtod_l+0x580>
 800f6aa:	4b62      	ldr	r3, [pc, #392]	; (800f834 <_strtod_l+0xc04>)
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	e78e      	b.n	800f5ce <_strtod_l+0x99e>
 800f6b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f830 <_strtod_l+0xc00>
 800f6b4:	f04f 0800 	mov.w	r8, #0
 800f6b8:	e7e7      	b.n	800f68a <_strtod_l+0xa5a>
 800f6ba:	4b5d      	ldr	r3, [pc, #372]	; (800f830 <_strtod_l+0xc00>)
 800f6bc:	4640      	mov	r0, r8
 800f6be:	4649      	mov	r1, r9
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	f7f0 ffa9 	bl	8000618 <__aeabi_dmul>
 800f6c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6c8:	4680      	mov	r8, r0
 800f6ca:	4689      	mov	r9, r1
 800f6cc:	b933      	cbnz	r3, 800f6dc <_strtod_l+0xaac>
 800f6ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6d2:	900e      	str	r0, [sp, #56]	; 0x38
 800f6d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f6da:	e7dd      	b.n	800f698 <_strtod_l+0xa68>
 800f6dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f6e0:	e7f9      	b.n	800f6d6 <_strtod_l+0xaa6>
 800f6e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f6e6:	9b04      	ldr	r3, [sp, #16]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d1a8      	bne.n	800f63e <_strtod_l+0xa0e>
 800f6ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f6f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f6f2:	0d1b      	lsrs	r3, r3, #20
 800f6f4:	051b      	lsls	r3, r3, #20
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d1a1      	bne.n	800f63e <_strtod_l+0xa0e>
 800f6fa:	4640      	mov	r0, r8
 800f6fc:	4649      	mov	r1, r9
 800f6fe:	f7f1 faeb 	bl	8000cd8 <__aeabi_d2lz>
 800f702:	f7f0 ff5b 	bl	80005bc <__aeabi_l2d>
 800f706:	4602      	mov	r2, r0
 800f708:	460b      	mov	r3, r1
 800f70a:	4640      	mov	r0, r8
 800f70c:	4649      	mov	r1, r9
 800f70e:	f7f0 fdcb 	bl	80002a8 <__aeabi_dsub>
 800f712:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f714:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f718:	ea43 030a 	orr.w	r3, r3, sl
 800f71c:	4313      	orrs	r3, r2
 800f71e:	4680      	mov	r8, r0
 800f720:	4689      	mov	r9, r1
 800f722:	d055      	beq.n	800f7d0 <_strtod_l+0xba0>
 800f724:	a336      	add	r3, pc, #216	; (adr r3, 800f800 <_strtod_l+0xbd0>)
 800f726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72a:	f7f1 f9e7 	bl	8000afc <__aeabi_dcmplt>
 800f72e:	2800      	cmp	r0, #0
 800f730:	f47f acd0 	bne.w	800f0d4 <_strtod_l+0x4a4>
 800f734:	a334      	add	r3, pc, #208	; (adr r3, 800f808 <_strtod_l+0xbd8>)
 800f736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73a:	4640      	mov	r0, r8
 800f73c:	4649      	mov	r1, r9
 800f73e:	f7f1 f9fb 	bl	8000b38 <__aeabi_dcmpgt>
 800f742:	2800      	cmp	r0, #0
 800f744:	f43f af7b 	beq.w	800f63e <_strtod_l+0xa0e>
 800f748:	e4c4      	b.n	800f0d4 <_strtod_l+0x4a4>
 800f74a:	9b04      	ldr	r3, [sp, #16]
 800f74c:	b333      	cbz	r3, 800f79c <_strtod_l+0xb6c>
 800f74e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f750:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f754:	d822      	bhi.n	800f79c <_strtod_l+0xb6c>
 800f756:	a32e      	add	r3, pc, #184	; (adr r3, 800f810 <_strtod_l+0xbe0>)
 800f758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75c:	4640      	mov	r0, r8
 800f75e:	4649      	mov	r1, r9
 800f760:	f7f1 f9d6 	bl	8000b10 <__aeabi_dcmple>
 800f764:	b1a0      	cbz	r0, 800f790 <_strtod_l+0xb60>
 800f766:	4649      	mov	r1, r9
 800f768:	4640      	mov	r0, r8
 800f76a:	f7f1 fa2d 	bl	8000bc8 <__aeabi_d2uiz>
 800f76e:	2801      	cmp	r0, #1
 800f770:	bf38      	it	cc
 800f772:	2001      	movcc	r0, #1
 800f774:	f7f0 fed6 	bl	8000524 <__aeabi_ui2d>
 800f778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f77a:	4680      	mov	r8, r0
 800f77c:	4689      	mov	r9, r1
 800f77e:	bb23      	cbnz	r3, 800f7ca <_strtod_l+0xb9a>
 800f780:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f784:	9010      	str	r0, [sp, #64]	; 0x40
 800f786:	9311      	str	r3, [sp, #68]	; 0x44
 800f788:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f78c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f792:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f794:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f798:	1a9b      	subs	r3, r3, r2
 800f79a:	9309      	str	r3, [sp, #36]	; 0x24
 800f79c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f7a0:	eeb0 0a48 	vmov.f32	s0, s16
 800f7a4:	eef0 0a68 	vmov.f32	s1, s17
 800f7a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f7ac:	f002 f95a 	bl	8011a64 <__ulp>
 800f7b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f7b4:	ec53 2b10 	vmov	r2, r3, d0
 800f7b8:	f7f0 ff2e 	bl	8000618 <__aeabi_dmul>
 800f7bc:	ec53 2b18 	vmov	r2, r3, d8
 800f7c0:	f7f0 fd74 	bl	80002ac <__adddf3>
 800f7c4:	4682      	mov	sl, r0
 800f7c6:	468b      	mov	fp, r1
 800f7c8:	e78d      	b.n	800f6e6 <_strtod_l+0xab6>
 800f7ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f7ce:	e7db      	b.n	800f788 <_strtod_l+0xb58>
 800f7d0:	a311      	add	r3, pc, #68	; (adr r3, 800f818 <_strtod_l+0xbe8>)
 800f7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d6:	f7f1 f991 	bl	8000afc <__aeabi_dcmplt>
 800f7da:	e7b2      	b.n	800f742 <_strtod_l+0xb12>
 800f7dc:	2300      	movs	r3, #0
 800f7de:	930a      	str	r3, [sp, #40]	; 0x28
 800f7e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f7e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7e4:	6013      	str	r3, [r2, #0]
 800f7e6:	f7ff ba6b 	b.w	800ecc0 <_strtod_l+0x90>
 800f7ea:	2a65      	cmp	r2, #101	; 0x65
 800f7ec:	f43f ab5f 	beq.w	800eeae <_strtod_l+0x27e>
 800f7f0:	2a45      	cmp	r2, #69	; 0x45
 800f7f2:	f43f ab5c 	beq.w	800eeae <_strtod_l+0x27e>
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	f7ff bb94 	b.w	800ef24 <_strtod_l+0x2f4>
 800f7fc:	f3af 8000 	nop.w
 800f800:	94a03595 	.word	0x94a03595
 800f804:	3fdfffff 	.word	0x3fdfffff
 800f808:	35afe535 	.word	0x35afe535
 800f80c:	3fe00000 	.word	0x3fe00000
 800f810:	ffc00000 	.word	0xffc00000
 800f814:	41dfffff 	.word	0x41dfffff
 800f818:	94a03595 	.word	0x94a03595
 800f81c:	3fcfffff 	.word	0x3fcfffff
 800f820:	3ff00000 	.word	0x3ff00000
 800f824:	7ff00000 	.word	0x7ff00000
 800f828:	7fe00000 	.word	0x7fe00000
 800f82c:	7c9fffff 	.word	0x7c9fffff
 800f830:	3fe00000 	.word	0x3fe00000
 800f834:	bff00000 	.word	0xbff00000
 800f838:	7fefffff 	.word	0x7fefffff

0800f83c <_strtod_r>:
 800f83c:	4b01      	ldr	r3, [pc, #4]	; (800f844 <_strtod_r+0x8>)
 800f83e:	f7ff b9f7 	b.w	800ec30 <_strtod_l>
 800f842:	bf00      	nop
 800f844:	2000008c 	.word	0x2000008c

0800f848 <_strtol_l.constprop.0>:
 800f848:	2b01      	cmp	r3, #1
 800f84a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f84e:	d001      	beq.n	800f854 <_strtol_l.constprop.0+0xc>
 800f850:	2b24      	cmp	r3, #36	; 0x24
 800f852:	d906      	bls.n	800f862 <_strtol_l.constprop.0+0x1a>
 800f854:	f7fe fae0 	bl	800de18 <__errno>
 800f858:	2316      	movs	r3, #22
 800f85a:	6003      	str	r3, [r0, #0]
 800f85c:	2000      	movs	r0, #0
 800f85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f862:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f948 <_strtol_l.constprop.0+0x100>
 800f866:	460d      	mov	r5, r1
 800f868:	462e      	mov	r6, r5
 800f86a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f86e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f872:	f017 0708 	ands.w	r7, r7, #8
 800f876:	d1f7      	bne.n	800f868 <_strtol_l.constprop.0+0x20>
 800f878:	2c2d      	cmp	r4, #45	; 0x2d
 800f87a:	d132      	bne.n	800f8e2 <_strtol_l.constprop.0+0x9a>
 800f87c:	782c      	ldrb	r4, [r5, #0]
 800f87e:	2701      	movs	r7, #1
 800f880:	1cb5      	adds	r5, r6, #2
 800f882:	2b00      	cmp	r3, #0
 800f884:	d05b      	beq.n	800f93e <_strtol_l.constprop.0+0xf6>
 800f886:	2b10      	cmp	r3, #16
 800f888:	d109      	bne.n	800f89e <_strtol_l.constprop.0+0x56>
 800f88a:	2c30      	cmp	r4, #48	; 0x30
 800f88c:	d107      	bne.n	800f89e <_strtol_l.constprop.0+0x56>
 800f88e:	782c      	ldrb	r4, [r5, #0]
 800f890:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f894:	2c58      	cmp	r4, #88	; 0x58
 800f896:	d14d      	bne.n	800f934 <_strtol_l.constprop.0+0xec>
 800f898:	786c      	ldrb	r4, [r5, #1]
 800f89a:	2310      	movs	r3, #16
 800f89c:	3502      	adds	r5, #2
 800f89e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f8a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800f8a6:	f04f 0c00 	mov.w	ip, #0
 800f8aa:	fbb8 f9f3 	udiv	r9, r8, r3
 800f8ae:	4666      	mov	r6, ip
 800f8b0:	fb03 8a19 	mls	sl, r3, r9, r8
 800f8b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f8b8:	f1be 0f09 	cmp.w	lr, #9
 800f8bc:	d816      	bhi.n	800f8ec <_strtol_l.constprop.0+0xa4>
 800f8be:	4674      	mov	r4, lr
 800f8c0:	42a3      	cmp	r3, r4
 800f8c2:	dd24      	ble.n	800f90e <_strtol_l.constprop.0+0xc6>
 800f8c4:	f1bc 0f00 	cmp.w	ip, #0
 800f8c8:	db1e      	blt.n	800f908 <_strtol_l.constprop.0+0xc0>
 800f8ca:	45b1      	cmp	r9, r6
 800f8cc:	d31c      	bcc.n	800f908 <_strtol_l.constprop.0+0xc0>
 800f8ce:	d101      	bne.n	800f8d4 <_strtol_l.constprop.0+0x8c>
 800f8d0:	45a2      	cmp	sl, r4
 800f8d2:	db19      	blt.n	800f908 <_strtol_l.constprop.0+0xc0>
 800f8d4:	fb06 4603 	mla	r6, r6, r3, r4
 800f8d8:	f04f 0c01 	mov.w	ip, #1
 800f8dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8e0:	e7e8      	b.n	800f8b4 <_strtol_l.constprop.0+0x6c>
 800f8e2:	2c2b      	cmp	r4, #43	; 0x2b
 800f8e4:	bf04      	itt	eq
 800f8e6:	782c      	ldrbeq	r4, [r5, #0]
 800f8e8:	1cb5      	addeq	r5, r6, #2
 800f8ea:	e7ca      	b.n	800f882 <_strtol_l.constprop.0+0x3a>
 800f8ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f8f0:	f1be 0f19 	cmp.w	lr, #25
 800f8f4:	d801      	bhi.n	800f8fa <_strtol_l.constprop.0+0xb2>
 800f8f6:	3c37      	subs	r4, #55	; 0x37
 800f8f8:	e7e2      	b.n	800f8c0 <_strtol_l.constprop.0+0x78>
 800f8fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f8fe:	f1be 0f19 	cmp.w	lr, #25
 800f902:	d804      	bhi.n	800f90e <_strtol_l.constprop.0+0xc6>
 800f904:	3c57      	subs	r4, #87	; 0x57
 800f906:	e7db      	b.n	800f8c0 <_strtol_l.constprop.0+0x78>
 800f908:	f04f 3cff 	mov.w	ip, #4294967295
 800f90c:	e7e6      	b.n	800f8dc <_strtol_l.constprop.0+0x94>
 800f90e:	f1bc 0f00 	cmp.w	ip, #0
 800f912:	da05      	bge.n	800f920 <_strtol_l.constprop.0+0xd8>
 800f914:	2322      	movs	r3, #34	; 0x22
 800f916:	6003      	str	r3, [r0, #0]
 800f918:	4646      	mov	r6, r8
 800f91a:	b942      	cbnz	r2, 800f92e <_strtol_l.constprop.0+0xe6>
 800f91c:	4630      	mov	r0, r6
 800f91e:	e79e      	b.n	800f85e <_strtol_l.constprop.0+0x16>
 800f920:	b107      	cbz	r7, 800f924 <_strtol_l.constprop.0+0xdc>
 800f922:	4276      	negs	r6, r6
 800f924:	2a00      	cmp	r2, #0
 800f926:	d0f9      	beq.n	800f91c <_strtol_l.constprop.0+0xd4>
 800f928:	f1bc 0f00 	cmp.w	ip, #0
 800f92c:	d000      	beq.n	800f930 <_strtol_l.constprop.0+0xe8>
 800f92e:	1e69      	subs	r1, r5, #1
 800f930:	6011      	str	r1, [r2, #0]
 800f932:	e7f3      	b.n	800f91c <_strtol_l.constprop.0+0xd4>
 800f934:	2430      	movs	r4, #48	; 0x30
 800f936:	2b00      	cmp	r3, #0
 800f938:	d1b1      	bne.n	800f89e <_strtol_l.constprop.0+0x56>
 800f93a:	2308      	movs	r3, #8
 800f93c:	e7af      	b.n	800f89e <_strtol_l.constprop.0+0x56>
 800f93e:	2c30      	cmp	r4, #48	; 0x30
 800f940:	d0a5      	beq.n	800f88e <_strtol_l.constprop.0+0x46>
 800f942:	230a      	movs	r3, #10
 800f944:	e7ab      	b.n	800f89e <_strtol_l.constprop.0+0x56>
 800f946:	bf00      	nop
 800f948:	08012fd5 	.word	0x08012fd5

0800f94c <_strtol_r>:
 800f94c:	f7ff bf7c 	b.w	800f848 <_strtol_l.constprop.0>

0800f950 <__swbuf_r>:
 800f950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f952:	460e      	mov	r6, r1
 800f954:	4614      	mov	r4, r2
 800f956:	4605      	mov	r5, r0
 800f958:	b118      	cbz	r0, 800f962 <__swbuf_r+0x12>
 800f95a:	6983      	ldr	r3, [r0, #24]
 800f95c:	b90b      	cbnz	r3, 800f962 <__swbuf_r+0x12>
 800f95e:	f001 f86b 	bl	8010a38 <__sinit>
 800f962:	4b21      	ldr	r3, [pc, #132]	; (800f9e8 <__swbuf_r+0x98>)
 800f964:	429c      	cmp	r4, r3
 800f966:	d12b      	bne.n	800f9c0 <__swbuf_r+0x70>
 800f968:	686c      	ldr	r4, [r5, #4]
 800f96a:	69a3      	ldr	r3, [r4, #24]
 800f96c:	60a3      	str	r3, [r4, #8]
 800f96e:	89a3      	ldrh	r3, [r4, #12]
 800f970:	071a      	lsls	r2, r3, #28
 800f972:	d52f      	bpl.n	800f9d4 <__swbuf_r+0x84>
 800f974:	6923      	ldr	r3, [r4, #16]
 800f976:	b36b      	cbz	r3, 800f9d4 <__swbuf_r+0x84>
 800f978:	6923      	ldr	r3, [r4, #16]
 800f97a:	6820      	ldr	r0, [r4, #0]
 800f97c:	1ac0      	subs	r0, r0, r3
 800f97e:	6963      	ldr	r3, [r4, #20]
 800f980:	b2f6      	uxtb	r6, r6
 800f982:	4283      	cmp	r3, r0
 800f984:	4637      	mov	r7, r6
 800f986:	dc04      	bgt.n	800f992 <__swbuf_r+0x42>
 800f988:	4621      	mov	r1, r4
 800f98a:	4628      	mov	r0, r5
 800f98c:	f000 ffc0 	bl	8010910 <_fflush_r>
 800f990:	bb30      	cbnz	r0, 800f9e0 <__swbuf_r+0x90>
 800f992:	68a3      	ldr	r3, [r4, #8]
 800f994:	3b01      	subs	r3, #1
 800f996:	60a3      	str	r3, [r4, #8]
 800f998:	6823      	ldr	r3, [r4, #0]
 800f99a:	1c5a      	adds	r2, r3, #1
 800f99c:	6022      	str	r2, [r4, #0]
 800f99e:	701e      	strb	r6, [r3, #0]
 800f9a0:	6963      	ldr	r3, [r4, #20]
 800f9a2:	3001      	adds	r0, #1
 800f9a4:	4283      	cmp	r3, r0
 800f9a6:	d004      	beq.n	800f9b2 <__swbuf_r+0x62>
 800f9a8:	89a3      	ldrh	r3, [r4, #12]
 800f9aa:	07db      	lsls	r3, r3, #31
 800f9ac:	d506      	bpl.n	800f9bc <__swbuf_r+0x6c>
 800f9ae:	2e0a      	cmp	r6, #10
 800f9b0:	d104      	bne.n	800f9bc <__swbuf_r+0x6c>
 800f9b2:	4621      	mov	r1, r4
 800f9b4:	4628      	mov	r0, r5
 800f9b6:	f000 ffab 	bl	8010910 <_fflush_r>
 800f9ba:	b988      	cbnz	r0, 800f9e0 <__swbuf_r+0x90>
 800f9bc:	4638      	mov	r0, r7
 800f9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9c0:	4b0a      	ldr	r3, [pc, #40]	; (800f9ec <__swbuf_r+0x9c>)
 800f9c2:	429c      	cmp	r4, r3
 800f9c4:	d101      	bne.n	800f9ca <__swbuf_r+0x7a>
 800f9c6:	68ac      	ldr	r4, [r5, #8]
 800f9c8:	e7cf      	b.n	800f96a <__swbuf_r+0x1a>
 800f9ca:	4b09      	ldr	r3, [pc, #36]	; (800f9f0 <__swbuf_r+0xa0>)
 800f9cc:	429c      	cmp	r4, r3
 800f9ce:	bf08      	it	eq
 800f9d0:	68ec      	ldreq	r4, [r5, #12]
 800f9d2:	e7ca      	b.n	800f96a <__swbuf_r+0x1a>
 800f9d4:	4621      	mov	r1, r4
 800f9d6:	4628      	mov	r0, r5
 800f9d8:	f000 f80c 	bl	800f9f4 <__swsetup_r>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d0cb      	beq.n	800f978 <__swbuf_r+0x28>
 800f9e0:	f04f 37ff 	mov.w	r7, #4294967295
 800f9e4:	e7ea      	b.n	800f9bc <__swbuf_r+0x6c>
 800f9e6:	bf00      	nop
 800f9e8:	08013188 	.word	0x08013188
 800f9ec:	080131a8 	.word	0x080131a8
 800f9f0:	08013168 	.word	0x08013168

0800f9f4 <__swsetup_r>:
 800f9f4:	4b32      	ldr	r3, [pc, #200]	; (800fac0 <__swsetup_r+0xcc>)
 800f9f6:	b570      	push	{r4, r5, r6, lr}
 800f9f8:	681d      	ldr	r5, [r3, #0]
 800f9fa:	4606      	mov	r6, r0
 800f9fc:	460c      	mov	r4, r1
 800f9fe:	b125      	cbz	r5, 800fa0a <__swsetup_r+0x16>
 800fa00:	69ab      	ldr	r3, [r5, #24]
 800fa02:	b913      	cbnz	r3, 800fa0a <__swsetup_r+0x16>
 800fa04:	4628      	mov	r0, r5
 800fa06:	f001 f817 	bl	8010a38 <__sinit>
 800fa0a:	4b2e      	ldr	r3, [pc, #184]	; (800fac4 <__swsetup_r+0xd0>)
 800fa0c:	429c      	cmp	r4, r3
 800fa0e:	d10f      	bne.n	800fa30 <__swsetup_r+0x3c>
 800fa10:	686c      	ldr	r4, [r5, #4]
 800fa12:	89a3      	ldrh	r3, [r4, #12]
 800fa14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa18:	0719      	lsls	r1, r3, #28
 800fa1a:	d42c      	bmi.n	800fa76 <__swsetup_r+0x82>
 800fa1c:	06dd      	lsls	r5, r3, #27
 800fa1e:	d411      	bmi.n	800fa44 <__swsetup_r+0x50>
 800fa20:	2309      	movs	r3, #9
 800fa22:	6033      	str	r3, [r6, #0]
 800fa24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fa28:	81a3      	strh	r3, [r4, #12]
 800fa2a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa2e:	e03e      	b.n	800faae <__swsetup_r+0xba>
 800fa30:	4b25      	ldr	r3, [pc, #148]	; (800fac8 <__swsetup_r+0xd4>)
 800fa32:	429c      	cmp	r4, r3
 800fa34:	d101      	bne.n	800fa3a <__swsetup_r+0x46>
 800fa36:	68ac      	ldr	r4, [r5, #8]
 800fa38:	e7eb      	b.n	800fa12 <__swsetup_r+0x1e>
 800fa3a:	4b24      	ldr	r3, [pc, #144]	; (800facc <__swsetup_r+0xd8>)
 800fa3c:	429c      	cmp	r4, r3
 800fa3e:	bf08      	it	eq
 800fa40:	68ec      	ldreq	r4, [r5, #12]
 800fa42:	e7e6      	b.n	800fa12 <__swsetup_r+0x1e>
 800fa44:	0758      	lsls	r0, r3, #29
 800fa46:	d512      	bpl.n	800fa6e <__swsetup_r+0x7a>
 800fa48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa4a:	b141      	cbz	r1, 800fa5e <__swsetup_r+0x6a>
 800fa4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa50:	4299      	cmp	r1, r3
 800fa52:	d002      	beq.n	800fa5a <__swsetup_r+0x66>
 800fa54:	4630      	mov	r0, r6
 800fa56:	f002 f96b 	bl	8011d30 <_free_r>
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	6363      	str	r3, [r4, #52]	; 0x34
 800fa5e:	89a3      	ldrh	r3, [r4, #12]
 800fa60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa64:	81a3      	strh	r3, [r4, #12]
 800fa66:	2300      	movs	r3, #0
 800fa68:	6063      	str	r3, [r4, #4]
 800fa6a:	6923      	ldr	r3, [r4, #16]
 800fa6c:	6023      	str	r3, [r4, #0]
 800fa6e:	89a3      	ldrh	r3, [r4, #12]
 800fa70:	f043 0308 	orr.w	r3, r3, #8
 800fa74:	81a3      	strh	r3, [r4, #12]
 800fa76:	6923      	ldr	r3, [r4, #16]
 800fa78:	b94b      	cbnz	r3, 800fa8e <__swsetup_r+0x9a>
 800fa7a:	89a3      	ldrh	r3, [r4, #12]
 800fa7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa84:	d003      	beq.n	800fa8e <__swsetup_r+0x9a>
 800fa86:	4621      	mov	r1, r4
 800fa88:	4630      	mov	r0, r6
 800fa8a:	f001 fc1f 	bl	80112cc <__smakebuf_r>
 800fa8e:	89a0      	ldrh	r0, [r4, #12]
 800fa90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa94:	f010 0301 	ands.w	r3, r0, #1
 800fa98:	d00a      	beq.n	800fab0 <__swsetup_r+0xbc>
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	60a3      	str	r3, [r4, #8]
 800fa9e:	6963      	ldr	r3, [r4, #20]
 800faa0:	425b      	negs	r3, r3
 800faa2:	61a3      	str	r3, [r4, #24]
 800faa4:	6923      	ldr	r3, [r4, #16]
 800faa6:	b943      	cbnz	r3, 800faba <__swsetup_r+0xc6>
 800faa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800faac:	d1ba      	bne.n	800fa24 <__swsetup_r+0x30>
 800faae:	bd70      	pop	{r4, r5, r6, pc}
 800fab0:	0781      	lsls	r1, r0, #30
 800fab2:	bf58      	it	pl
 800fab4:	6963      	ldrpl	r3, [r4, #20]
 800fab6:	60a3      	str	r3, [r4, #8]
 800fab8:	e7f4      	b.n	800faa4 <__swsetup_r+0xb0>
 800faba:	2000      	movs	r0, #0
 800fabc:	e7f7      	b.n	800faae <__swsetup_r+0xba>
 800fabe:	bf00      	nop
 800fac0:	20000024 	.word	0x20000024
 800fac4:	08013188 	.word	0x08013188
 800fac8:	080131a8 	.word	0x080131a8
 800facc:	08013168 	.word	0x08013168

0800fad0 <__assert_func>:
 800fad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fad2:	4614      	mov	r4, r2
 800fad4:	461a      	mov	r2, r3
 800fad6:	4b09      	ldr	r3, [pc, #36]	; (800fafc <__assert_func+0x2c>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	4605      	mov	r5, r0
 800fadc:	68d8      	ldr	r0, [r3, #12]
 800fade:	b14c      	cbz	r4, 800faf4 <__assert_func+0x24>
 800fae0:	4b07      	ldr	r3, [pc, #28]	; (800fb00 <__assert_func+0x30>)
 800fae2:	9100      	str	r1, [sp, #0]
 800fae4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fae8:	4906      	ldr	r1, [pc, #24]	; (800fb04 <__assert_func+0x34>)
 800faea:	462b      	mov	r3, r5
 800faec:	f001 f822 	bl	8010b34 <fiprintf>
 800faf0:	f002 fd44 	bl	801257c <abort>
 800faf4:	4b04      	ldr	r3, [pc, #16]	; (800fb08 <__assert_func+0x38>)
 800faf6:	461c      	mov	r4, r3
 800faf8:	e7f3      	b.n	800fae2 <__assert_func+0x12>
 800fafa:	bf00      	nop
 800fafc:	20000024 	.word	0x20000024
 800fb00:	08012f98 	.word	0x08012f98
 800fb04:	08012fa5 	.word	0x08012fa5
 800fb08:	08012fd3 	.word	0x08012fd3

0800fb0c <quorem>:
 800fb0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb10:	6903      	ldr	r3, [r0, #16]
 800fb12:	690c      	ldr	r4, [r1, #16]
 800fb14:	42a3      	cmp	r3, r4
 800fb16:	4607      	mov	r7, r0
 800fb18:	f2c0 8081 	blt.w	800fc1e <quorem+0x112>
 800fb1c:	3c01      	subs	r4, #1
 800fb1e:	f101 0814 	add.w	r8, r1, #20
 800fb22:	f100 0514 	add.w	r5, r0, #20
 800fb26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb2a:	9301      	str	r3, [sp, #4]
 800fb2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb34:	3301      	adds	r3, #1
 800fb36:	429a      	cmp	r2, r3
 800fb38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fb3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb40:	fbb2 f6f3 	udiv	r6, r2, r3
 800fb44:	d331      	bcc.n	800fbaa <quorem+0x9e>
 800fb46:	f04f 0e00 	mov.w	lr, #0
 800fb4a:	4640      	mov	r0, r8
 800fb4c:	46ac      	mov	ip, r5
 800fb4e:	46f2      	mov	sl, lr
 800fb50:	f850 2b04 	ldr.w	r2, [r0], #4
 800fb54:	b293      	uxth	r3, r2
 800fb56:	fb06 e303 	mla	r3, r6, r3, lr
 800fb5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fb5e:	b29b      	uxth	r3, r3
 800fb60:	ebaa 0303 	sub.w	r3, sl, r3
 800fb64:	f8dc a000 	ldr.w	sl, [ip]
 800fb68:	0c12      	lsrs	r2, r2, #16
 800fb6a:	fa13 f38a 	uxtah	r3, r3, sl
 800fb6e:	fb06 e202 	mla	r2, r6, r2, lr
 800fb72:	9300      	str	r3, [sp, #0]
 800fb74:	9b00      	ldr	r3, [sp, #0]
 800fb76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fb7a:	b292      	uxth	r2, r2
 800fb7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fb80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb84:	f8bd 3000 	ldrh.w	r3, [sp]
 800fb88:	4581      	cmp	r9, r0
 800fb8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb8e:	f84c 3b04 	str.w	r3, [ip], #4
 800fb92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fb96:	d2db      	bcs.n	800fb50 <quorem+0x44>
 800fb98:	f855 300b 	ldr.w	r3, [r5, fp]
 800fb9c:	b92b      	cbnz	r3, 800fbaa <quorem+0x9e>
 800fb9e:	9b01      	ldr	r3, [sp, #4]
 800fba0:	3b04      	subs	r3, #4
 800fba2:	429d      	cmp	r5, r3
 800fba4:	461a      	mov	r2, r3
 800fba6:	d32e      	bcc.n	800fc06 <quorem+0xfa>
 800fba8:	613c      	str	r4, [r7, #16]
 800fbaa:	4638      	mov	r0, r7
 800fbac:	f001 feb4 	bl	8011918 <__mcmp>
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	db24      	blt.n	800fbfe <quorem+0xf2>
 800fbb4:	3601      	adds	r6, #1
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	f04f 0c00 	mov.w	ip, #0
 800fbbc:	f858 2b04 	ldr.w	r2, [r8], #4
 800fbc0:	f8d0 e000 	ldr.w	lr, [r0]
 800fbc4:	b293      	uxth	r3, r2
 800fbc6:	ebac 0303 	sub.w	r3, ip, r3
 800fbca:	0c12      	lsrs	r2, r2, #16
 800fbcc:	fa13 f38e 	uxtah	r3, r3, lr
 800fbd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fbd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fbd8:	b29b      	uxth	r3, r3
 800fbda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbde:	45c1      	cmp	r9, r8
 800fbe0:	f840 3b04 	str.w	r3, [r0], #4
 800fbe4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fbe8:	d2e8      	bcs.n	800fbbc <quorem+0xb0>
 800fbea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbf2:	b922      	cbnz	r2, 800fbfe <quorem+0xf2>
 800fbf4:	3b04      	subs	r3, #4
 800fbf6:	429d      	cmp	r5, r3
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	d30a      	bcc.n	800fc12 <quorem+0x106>
 800fbfc:	613c      	str	r4, [r7, #16]
 800fbfe:	4630      	mov	r0, r6
 800fc00:	b003      	add	sp, #12
 800fc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc06:	6812      	ldr	r2, [r2, #0]
 800fc08:	3b04      	subs	r3, #4
 800fc0a:	2a00      	cmp	r2, #0
 800fc0c:	d1cc      	bne.n	800fba8 <quorem+0x9c>
 800fc0e:	3c01      	subs	r4, #1
 800fc10:	e7c7      	b.n	800fba2 <quorem+0x96>
 800fc12:	6812      	ldr	r2, [r2, #0]
 800fc14:	3b04      	subs	r3, #4
 800fc16:	2a00      	cmp	r2, #0
 800fc18:	d1f0      	bne.n	800fbfc <quorem+0xf0>
 800fc1a:	3c01      	subs	r4, #1
 800fc1c:	e7eb      	b.n	800fbf6 <quorem+0xea>
 800fc1e:	2000      	movs	r0, #0
 800fc20:	e7ee      	b.n	800fc00 <quorem+0xf4>
 800fc22:	0000      	movs	r0, r0
 800fc24:	0000      	movs	r0, r0
	...

0800fc28 <_dtoa_r>:
 800fc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc2c:	ed2d 8b04 	vpush	{d8-d9}
 800fc30:	ec57 6b10 	vmov	r6, r7, d0
 800fc34:	b093      	sub	sp, #76	; 0x4c
 800fc36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fc38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fc3c:	9106      	str	r1, [sp, #24]
 800fc3e:	ee10 aa10 	vmov	sl, s0
 800fc42:	4604      	mov	r4, r0
 800fc44:	9209      	str	r2, [sp, #36]	; 0x24
 800fc46:	930c      	str	r3, [sp, #48]	; 0x30
 800fc48:	46bb      	mov	fp, r7
 800fc4a:	b975      	cbnz	r5, 800fc6a <_dtoa_r+0x42>
 800fc4c:	2010      	movs	r0, #16
 800fc4e:	f001 fb7d 	bl	801134c <malloc>
 800fc52:	4602      	mov	r2, r0
 800fc54:	6260      	str	r0, [r4, #36]	; 0x24
 800fc56:	b920      	cbnz	r0, 800fc62 <_dtoa_r+0x3a>
 800fc58:	4ba7      	ldr	r3, [pc, #668]	; (800fef8 <_dtoa_r+0x2d0>)
 800fc5a:	21ea      	movs	r1, #234	; 0xea
 800fc5c:	48a7      	ldr	r0, [pc, #668]	; (800fefc <_dtoa_r+0x2d4>)
 800fc5e:	f7ff ff37 	bl	800fad0 <__assert_func>
 800fc62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fc66:	6005      	str	r5, [r0, #0]
 800fc68:	60c5      	str	r5, [r0, #12]
 800fc6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc6c:	6819      	ldr	r1, [r3, #0]
 800fc6e:	b151      	cbz	r1, 800fc86 <_dtoa_r+0x5e>
 800fc70:	685a      	ldr	r2, [r3, #4]
 800fc72:	604a      	str	r2, [r1, #4]
 800fc74:	2301      	movs	r3, #1
 800fc76:	4093      	lsls	r3, r2
 800fc78:	608b      	str	r3, [r1, #8]
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	f001 fbc0 	bl	8011400 <_Bfree>
 800fc80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc82:	2200      	movs	r2, #0
 800fc84:	601a      	str	r2, [r3, #0]
 800fc86:	1e3b      	subs	r3, r7, #0
 800fc88:	bfaa      	itet	ge
 800fc8a:	2300      	movge	r3, #0
 800fc8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fc90:	f8c8 3000 	strge.w	r3, [r8]
 800fc94:	4b9a      	ldr	r3, [pc, #616]	; (800ff00 <_dtoa_r+0x2d8>)
 800fc96:	bfbc      	itt	lt
 800fc98:	2201      	movlt	r2, #1
 800fc9a:	f8c8 2000 	strlt.w	r2, [r8]
 800fc9e:	ea33 030b 	bics.w	r3, r3, fp
 800fca2:	d11b      	bne.n	800fcdc <_dtoa_r+0xb4>
 800fca4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fca6:	f242 730f 	movw	r3, #9999	; 0x270f
 800fcaa:	6013      	str	r3, [r2, #0]
 800fcac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fcb0:	4333      	orrs	r3, r6
 800fcb2:	f000 8592 	beq.w	80107da <_dtoa_r+0xbb2>
 800fcb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcb8:	b963      	cbnz	r3, 800fcd4 <_dtoa_r+0xac>
 800fcba:	4b92      	ldr	r3, [pc, #584]	; (800ff04 <_dtoa_r+0x2dc>)
 800fcbc:	e022      	b.n	800fd04 <_dtoa_r+0xdc>
 800fcbe:	4b92      	ldr	r3, [pc, #584]	; (800ff08 <_dtoa_r+0x2e0>)
 800fcc0:	9301      	str	r3, [sp, #4]
 800fcc2:	3308      	adds	r3, #8
 800fcc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fcc6:	6013      	str	r3, [r2, #0]
 800fcc8:	9801      	ldr	r0, [sp, #4]
 800fcca:	b013      	add	sp, #76	; 0x4c
 800fccc:	ecbd 8b04 	vpop	{d8-d9}
 800fcd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd4:	4b8b      	ldr	r3, [pc, #556]	; (800ff04 <_dtoa_r+0x2dc>)
 800fcd6:	9301      	str	r3, [sp, #4]
 800fcd8:	3303      	adds	r3, #3
 800fcda:	e7f3      	b.n	800fcc4 <_dtoa_r+0x9c>
 800fcdc:	2200      	movs	r2, #0
 800fcde:	2300      	movs	r3, #0
 800fce0:	4650      	mov	r0, sl
 800fce2:	4659      	mov	r1, fp
 800fce4:	f7f0 ff00 	bl	8000ae8 <__aeabi_dcmpeq>
 800fce8:	ec4b ab19 	vmov	d9, sl, fp
 800fcec:	4680      	mov	r8, r0
 800fcee:	b158      	cbz	r0, 800fd08 <_dtoa_r+0xe0>
 800fcf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	6013      	str	r3, [r2, #0]
 800fcf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	f000 856b 	beq.w	80107d4 <_dtoa_r+0xbac>
 800fcfe:	4883      	ldr	r0, [pc, #524]	; (800ff0c <_dtoa_r+0x2e4>)
 800fd00:	6018      	str	r0, [r3, #0]
 800fd02:	1e43      	subs	r3, r0, #1
 800fd04:	9301      	str	r3, [sp, #4]
 800fd06:	e7df      	b.n	800fcc8 <_dtoa_r+0xa0>
 800fd08:	ec4b ab10 	vmov	d0, sl, fp
 800fd0c:	aa10      	add	r2, sp, #64	; 0x40
 800fd0e:	a911      	add	r1, sp, #68	; 0x44
 800fd10:	4620      	mov	r0, r4
 800fd12:	f001 ff23 	bl	8011b5c <__d2b>
 800fd16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fd1a:	ee08 0a10 	vmov	s16, r0
 800fd1e:	2d00      	cmp	r5, #0
 800fd20:	f000 8084 	beq.w	800fe2c <_dtoa_r+0x204>
 800fd24:	ee19 3a90 	vmov	r3, s19
 800fd28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fd30:	4656      	mov	r6, sl
 800fd32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fd36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fd3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fd3e:	4b74      	ldr	r3, [pc, #464]	; (800ff10 <_dtoa_r+0x2e8>)
 800fd40:	2200      	movs	r2, #0
 800fd42:	4630      	mov	r0, r6
 800fd44:	4639      	mov	r1, r7
 800fd46:	f7f0 faaf 	bl	80002a8 <__aeabi_dsub>
 800fd4a:	a365      	add	r3, pc, #404	; (adr r3, 800fee0 <_dtoa_r+0x2b8>)
 800fd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd50:	f7f0 fc62 	bl	8000618 <__aeabi_dmul>
 800fd54:	a364      	add	r3, pc, #400	; (adr r3, 800fee8 <_dtoa_r+0x2c0>)
 800fd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5a:	f7f0 faa7 	bl	80002ac <__adddf3>
 800fd5e:	4606      	mov	r6, r0
 800fd60:	4628      	mov	r0, r5
 800fd62:	460f      	mov	r7, r1
 800fd64:	f7f0 fbee 	bl	8000544 <__aeabi_i2d>
 800fd68:	a361      	add	r3, pc, #388	; (adr r3, 800fef0 <_dtoa_r+0x2c8>)
 800fd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6e:	f7f0 fc53 	bl	8000618 <__aeabi_dmul>
 800fd72:	4602      	mov	r2, r0
 800fd74:	460b      	mov	r3, r1
 800fd76:	4630      	mov	r0, r6
 800fd78:	4639      	mov	r1, r7
 800fd7a:	f7f0 fa97 	bl	80002ac <__adddf3>
 800fd7e:	4606      	mov	r6, r0
 800fd80:	460f      	mov	r7, r1
 800fd82:	f7f0 fef9 	bl	8000b78 <__aeabi_d2iz>
 800fd86:	2200      	movs	r2, #0
 800fd88:	9000      	str	r0, [sp, #0]
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	4630      	mov	r0, r6
 800fd8e:	4639      	mov	r1, r7
 800fd90:	f7f0 feb4 	bl	8000afc <__aeabi_dcmplt>
 800fd94:	b150      	cbz	r0, 800fdac <_dtoa_r+0x184>
 800fd96:	9800      	ldr	r0, [sp, #0]
 800fd98:	f7f0 fbd4 	bl	8000544 <__aeabi_i2d>
 800fd9c:	4632      	mov	r2, r6
 800fd9e:	463b      	mov	r3, r7
 800fda0:	f7f0 fea2 	bl	8000ae8 <__aeabi_dcmpeq>
 800fda4:	b910      	cbnz	r0, 800fdac <_dtoa_r+0x184>
 800fda6:	9b00      	ldr	r3, [sp, #0]
 800fda8:	3b01      	subs	r3, #1
 800fdaa:	9300      	str	r3, [sp, #0]
 800fdac:	9b00      	ldr	r3, [sp, #0]
 800fdae:	2b16      	cmp	r3, #22
 800fdb0:	d85a      	bhi.n	800fe68 <_dtoa_r+0x240>
 800fdb2:	9a00      	ldr	r2, [sp, #0]
 800fdb4:	4b57      	ldr	r3, [pc, #348]	; (800ff14 <_dtoa_r+0x2ec>)
 800fdb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdbe:	ec51 0b19 	vmov	r0, r1, d9
 800fdc2:	f7f0 fe9b 	bl	8000afc <__aeabi_dcmplt>
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	d050      	beq.n	800fe6c <_dtoa_r+0x244>
 800fdca:	9b00      	ldr	r3, [sp, #0]
 800fdcc:	3b01      	subs	r3, #1
 800fdce:	9300      	str	r3, [sp, #0]
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fdd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fdd6:	1b5d      	subs	r5, r3, r5
 800fdd8:	1e6b      	subs	r3, r5, #1
 800fdda:	9305      	str	r3, [sp, #20]
 800fddc:	bf45      	ittet	mi
 800fdde:	f1c5 0301 	rsbmi	r3, r5, #1
 800fde2:	9304      	strmi	r3, [sp, #16]
 800fde4:	2300      	movpl	r3, #0
 800fde6:	2300      	movmi	r3, #0
 800fde8:	bf4c      	ite	mi
 800fdea:	9305      	strmi	r3, [sp, #20]
 800fdec:	9304      	strpl	r3, [sp, #16]
 800fdee:	9b00      	ldr	r3, [sp, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	db3d      	blt.n	800fe70 <_dtoa_r+0x248>
 800fdf4:	9b05      	ldr	r3, [sp, #20]
 800fdf6:	9a00      	ldr	r2, [sp, #0]
 800fdf8:	920a      	str	r2, [sp, #40]	; 0x28
 800fdfa:	4413      	add	r3, r2
 800fdfc:	9305      	str	r3, [sp, #20]
 800fdfe:	2300      	movs	r3, #0
 800fe00:	9307      	str	r3, [sp, #28]
 800fe02:	9b06      	ldr	r3, [sp, #24]
 800fe04:	2b09      	cmp	r3, #9
 800fe06:	f200 8089 	bhi.w	800ff1c <_dtoa_r+0x2f4>
 800fe0a:	2b05      	cmp	r3, #5
 800fe0c:	bfc4      	itt	gt
 800fe0e:	3b04      	subgt	r3, #4
 800fe10:	9306      	strgt	r3, [sp, #24]
 800fe12:	9b06      	ldr	r3, [sp, #24]
 800fe14:	f1a3 0302 	sub.w	r3, r3, #2
 800fe18:	bfcc      	ite	gt
 800fe1a:	2500      	movgt	r5, #0
 800fe1c:	2501      	movle	r5, #1
 800fe1e:	2b03      	cmp	r3, #3
 800fe20:	f200 8087 	bhi.w	800ff32 <_dtoa_r+0x30a>
 800fe24:	e8df f003 	tbb	[pc, r3]
 800fe28:	59383a2d 	.word	0x59383a2d
 800fe2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fe30:	441d      	add	r5, r3
 800fe32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fe36:	2b20      	cmp	r3, #32
 800fe38:	bfc1      	itttt	gt
 800fe3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fe3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fe42:	fa0b f303 	lslgt.w	r3, fp, r3
 800fe46:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fe4a:	bfda      	itte	le
 800fe4c:	f1c3 0320 	rsble	r3, r3, #32
 800fe50:	fa06 f003 	lslle.w	r0, r6, r3
 800fe54:	4318      	orrgt	r0, r3
 800fe56:	f7f0 fb65 	bl	8000524 <__aeabi_ui2d>
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	4606      	mov	r6, r0
 800fe5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fe62:	3d01      	subs	r5, #1
 800fe64:	930e      	str	r3, [sp, #56]	; 0x38
 800fe66:	e76a      	b.n	800fd3e <_dtoa_r+0x116>
 800fe68:	2301      	movs	r3, #1
 800fe6a:	e7b2      	b.n	800fdd2 <_dtoa_r+0x1aa>
 800fe6c:	900b      	str	r0, [sp, #44]	; 0x2c
 800fe6e:	e7b1      	b.n	800fdd4 <_dtoa_r+0x1ac>
 800fe70:	9b04      	ldr	r3, [sp, #16]
 800fe72:	9a00      	ldr	r2, [sp, #0]
 800fe74:	1a9b      	subs	r3, r3, r2
 800fe76:	9304      	str	r3, [sp, #16]
 800fe78:	4253      	negs	r3, r2
 800fe7a:	9307      	str	r3, [sp, #28]
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	930a      	str	r3, [sp, #40]	; 0x28
 800fe80:	e7bf      	b.n	800fe02 <_dtoa_r+0x1da>
 800fe82:	2300      	movs	r3, #0
 800fe84:	9308      	str	r3, [sp, #32]
 800fe86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	dc55      	bgt.n	800ff38 <_dtoa_r+0x310>
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fe92:	461a      	mov	r2, r3
 800fe94:	9209      	str	r2, [sp, #36]	; 0x24
 800fe96:	e00c      	b.n	800feb2 <_dtoa_r+0x28a>
 800fe98:	2301      	movs	r3, #1
 800fe9a:	e7f3      	b.n	800fe84 <_dtoa_r+0x25c>
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fea0:	9308      	str	r3, [sp, #32]
 800fea2:	9b00      	ldr	r3, [sp, #0]
 800fea4:	4413      	add	r3, r2
 800fea6:	9302      	str	r3, [sp, #8]
 800fea8:	3301      	adds	r3, #1
 800feaa:	2b01      	cmp	r3, #1
 800feac:	9303      	str	r3, [sp, #12]
 800feae:	bfb8      	it	lt
 800feb0:	2301      	movlt	r3, #1
 800feb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800feb4:	2200      	movs	r2, #0
 800feb6:	6042      	str	r2, [r0, #4]
 800feb8:	2204      	movs	r2, #4
 800feba:	f102 0614 	add.w	r6, r2, #20
 800febe:	429e      	cmp	r6, r3
 800fec0:	6841      	ldr	r1, [r0, #4]
 800fec2:	d93d      	bls.n	800ff40 <_dtoa_r+0x318>
 800fec4:	4620      	mov	r0, r4
 800fec6:	f001 fa5b 	bl	8011380 <_Balloc>
 800feca:	9001      	str	r0, [sp, #4]
 800fecc:	2800      	cmp	r0, #0
 800fece:	d13b      	bne.n	800ff48 <_dtoa_r+0x320>
 800fed0:	4b11      	ldr	r3, [pc, #68]	; (800ff18 <_dtoa_r+0x2f0>)
 800fed2:	4602      	mov	r2, r0
 800fed4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fed8:	e6c0      	b.n	800fc5c <_dtoa_r+0x34>
 800feda:	2301      	movs	r3, #1
 800fedc:	e7df      	b.n	800fe9e <_dtoa_r+0x276>
 800fede:	bf00      	nop
 800fee0:	636f4361 	.word	0x636f4361
 800fee4:	3fd287a7 	.word	0x3fd287a7
 800fee8:	8b60c8b3 	.word	0x8b60c8b3
 800feec:	3fc68a28 	.word	0x3fc68a28
 800fef0:	509f79fb 	.word	0x509f79fb
 800fef4:	3fd34413 	.word	0x3fd34413
 800fef8:	080130e2 	.word	0x080130e2
 800fefc:	080130f9 	.word	0x080130f9
 800ff00:	7ff00000 	.word	0x7ff00000
 800ff04:	080130de 	.word	0x080130de
 800ff08:	080130d5 	.word	0x080130d5
 800ff0c:	08012f1d 	.word	0x08012f1d
 800ff10:	3ff80000 	.word	0x3ff80000
 800ff14:	080132c8 	.word	0x080132c8
 800ff18:	08013154 	.word	0x08013154
 800ff1c:	2501      	movs	r5, #1
 800ff1e:	2300      	movs	r3, #0
 800ff20:	9306      	str	r3, [sp, #24]
 800ff22:	9508      	str	r5, [sp, #32]
 800ff24:	f04f 33ff 	mov.w	r3, #4294967295
 800ff28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	2312      	movs	r3, #18
 800ff30:	e7b0      	b.n	800fe94 <_dtoa_r+0x26c>
 800ff32:	2301      	movs	r3, #1
 800ff34:	9308      	str	r3, [sp, #32]
 800ff36:	e7f5      	b.n	800ff24 <_dtoa_r+0x2fc>
 800ff38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ff3e:	e7b8      	b.n	800feb2 <_dtoa_r+0x28a>
 800ff40:	3101      	adds	r1, #1
 800ff42:	6041      	str	r1, [r0, #4]
 800ff44:	0052      	lsls	r2, r2, #1
 800ff46:	e7b8      	b.n	800feba <_dtoa_r+0x292>
 800ff48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff4a:	9a01      	ldr	r2, [sp, #4]
 800ff4c:	601a      	str	r2, [r3, #0]
 800ff4e:	9b03      	ldr	r3, [sp, #12]
 800ff50:	2b0e      	cmp	r3, #14
 800ff52:	f200 809d 	bhi.w	8010090 <_dtoa_r+0x468>
 800ff56:	2d00      	cmp	r5, #0
 800ff58:	f000 809a 	beq.w	8010090 <_dtoa_r+0x468>
 800ff5c:	9b00      	ldr	r3, [sp, #0]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	dd32      	ble.n	800ffc8 <_dtoa_r+0x3a0>
 800ff62:	4ab7      	ldr	r2, [pc, #732]	; (8010240 <_dtoa_r+0x618>)
 800ff64:	f003 030f 	and.w	r3, r3, #15
 800ff68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ff6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ff70:	9b00      	ldr	r3, [sp, #0]
 800ff72:	05d8      	lsls	r0, r3, #23
 800ff74:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ff78:	d516      	bpl.n	800ffa8 <_dtoa_r+0x380>
 800ff7a:	4bb2      	ldr	r3, [pc, #712]	; (8010244 <_dtoa_r+0x61c>)
 800ff7c:	ec51 0b19 	vmov	r0, r1, d9
 800ff80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ff84:	f7f0 fc72 	bl	800086c <__aeabi_ddiv>
 800ff88:	f007 070f 	and.w	r7, r7, #15
 800ff8c:	4682      	mov	sl, r0
 800ff8e:	468b      	mov	fp, r1
 800ff90:	2503      	movs	r5, #3
 800ff92:	4eac      	ldr	r6, [pc, #688]	; (8010244 <_dtoa_r+0x61c>)
 800ff94:	b957      	cbnz	r7, 800ffac <_dtoa_r+0x384>
 800ff96:	4642      	mov	r2, r8
 800ff98:	464b      	mov	r3, r9
 800ff9a:	4650      	mov	r0, sl
 800ff9c:	4659      	mov	r1, fp
 800ff9e:	f7f0 fc65 	bl	800086c <__aeabi_ddiv>
 800ffa2:	4682      	mov	sl, r0
 800ffa4:	468b      	mov	fp, r1
 800ffa6:	e028      	b.n	800fffa <_dtoa_r+0x3d2>
 800ffa8:	2502      	movs	r5, #2
 800ffaa:	e7f2      	b.n	800ff92 <_dtoa_r+0x36a>
 800ffac:	07f9      	lsls	r1, r7, #31
 800ffae:	d508      	bpl.n	800ffc2 <_dtoa_r+0x39a>
 800ffb0:	4640      	mov	r0, r8
 800ffb2:	4649      	mov	r1, r9
 800ffb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ffb8:	f7f0 fb2e 	bl	8000618 <__aeabi_dmul>
 800ffbc:	3501      	adds	r5, #1
 800ffbe:	4680      	mov	r8, r0
 800ffc0:	4689      	mov	r9, r1
 800ffc2:	107f      	asrs	r7, r7, #1
 800ffc4:	3608      	adds	r6, #8
 800ffc6:	e7e5      	b.n	800ff94 <_dtoa_r+0x36c>
 800ffc8:	f000 809b 	beq.w	8010102 <_dtoa_r+0x4da>
 800ffcc:	9b00      	ldr	r3, [sp, #0]
 800ffce:	4f9d      	ldr	r7, [pc, #628]	; (8010244 <_dtoa_r+0x61c>)
 800ffd0:	425e      	negs	r6, r3
 800ffd2:	4b9b      	ldr	r3, [pc, #620]	; (8010240 <_dtoa_r+0x618>)
 800ffd4:	f006 020f 	and.w	r2, r6, #15
 800ffd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe0:	ec51 0b19 	vmov	r0, r1, d9
 800ffe4:	f7f0 fb18 	bl	8000618 <__aeabi_dmul>
 800ffe8:	1136      	asrs	r6, r6, #4
 800ffea:	4682      	mov	sl, r0
 800ffec:	468b      	mov	fp, r1
 800ffee:	2300      	movs	r3, #0
 800fff0:	2502      	movs	r5, #2
 800fff2:	2e00      	cmp	r6, #0
 800fff4:	d17a      	bne.n	80100ec <_dtoa_r+0x4c4>
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d1d3      	bne.n	800ffa2 <_dtoa_r+0x37a>
 800fffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	f000 8082 	beq.w	8010106 <_dtoa_r+0x4de>
 8010002:	4b91      	ldr	r3, [pc, #580]	; (8010248 <_dtoa_r+0x620>)
 8010004:	2200      	movs	r2, #0
 8010006:	4650      	mov	r0, sl
 8010008:	4659      	mov	r1, fp
 801000a:	f7f0 fd77 	bl	8000afc <__aeabi_dcmplt>
 801000e:	2800      	cmp	r0, #0
 8010010:	d079      	beq.n	8010106 <_dtoa_r+0x4de>
 8010012:	9b03      	ldr	r3, [sp, #12]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d076      	beq.n	8010106 <_dtoa_r+0x4de>
 8010018:	9b02      	ldr	r3, [sp, #8]
 801001a:	2b00      	cmp	r3, #0
 801001c:	dd36      	ble.n	801008c <_dtoa_r+0x464>
 801001e:	9b00      	ldr	r3, [sp, #0]
 8010020:	4650      	mov	r0, sl
 8010022:	4659      	mov	r1, fp
 8010024:	1e5f      	subs	r7, r3, #1
 8010026:	2200      	movs	r2, #0
 8010028:	4b88      	ldr	r3, [pc, #544]	; (801024c <_dtoa_r+0x624>)
 801002a:	f7f0 faf5 	bl	8000618 <__aeabi_dmul>
 801002e:	9e02      	ldr	r6, [sp, #8]
 8010030:	4682      	mov	sl, r0
 8010032:	468b      	mov	fp, r1
 8010034:	3501      	adds	r5, #1
 8010036:	4628      	mov	r0, r5
 8010038:	f7f0 fa84 	bl	8000544 <__aeabi_i2d>
 801003c:	4652      	mov	r2, sl
 801003e:	465b      	mov	r3, fp
 8010040:	f7f0 faea 	bl	8000618 <__aeabi_dmul>
 8010044:	4b82      	ldr	r3, [pc, #520]	; (8010250 <_dtoa_r+0x628>)
 8010046:	2200      	movs	r2, #0
 8010048:	f7f0 f930 	bl	80002ac <__adddf3>
 801004c:	46d0      	mov	r8, sl
 801004e:	46d9      	mov	r9, fp
 8010050:	4682      	mov	sl, r0
 8010052:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010056:	2e00      	cmp	r6, #0
 8010058:	d158      	bne.n	801010c <_dtoa_r+0x4e4>
 801005a:	4b7e      	ldr	r3, [pc, #504]	; (8010254 <_dtoa_r+0x62c>)
 801005c:	2200      	movs	r2, #0
 801005e:	4640      	mov	r0, r8
 8010060:	4649      	mov	r1, r9
 8010062:	f7f0 f921 	bl	80002a8 <__aeabi_dsub>
 8010066:	4652      	mov	r2, sl
 8010068:	465b      	mov	r3, fp
 801006a:	4680      	mov	r8, r0
 801006c:	4689      	mov	r9, r1
 801006e:	f7f0 fd63 	bl	8000b38 <__aeabi_dcmpgt>
 8010072:	2800      	cmp	r0, #0
 8010074:	f040 8295 	bne.w	80105a2 <_dtoa_r+0x97a>
 8010078:	4652      	mov	r2, sl
 801007a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801007e:	4640      	mov	r0, r8
 8010080:	4649      	mov	r1, r9
 8010082:	f7f0 fd3b 	bl	8000afc <__aeabi_dcmplt>
 8010086:	2800      	cmp	r0, #0
 8010088:	f040 8289 	bne.w	801059e <_dtoa_r+0x976>
 801008c:	ec5b ab19 	vmov	sl, fp, d9
 8010090:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010092:	2b00      	cmp	r3, #0
 8010094:	f2c0 8148 	blt.w	8010328 <_dtoa_r+0x700>
 8010098:	9a00      	ldr	r2, [sp, #0]
 801009a:	2a0e      	cmp	r2, #14
 801009c:	f300 8144 	bgt.w	8010328 <_dtoa_r+0x700>
 80100a0:	4b67      	ldr	r3, [pc, #412]	; (8010240 <_dtoa_r+0x618>)
 80100a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80100a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80100aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	f280 80d5 	bge.w	801025c <_dtoa_r+0x634>
 80100b2:	9b03      	ldr	r3, [sp, #12]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	f300 80d1 	bgt.w	801025c <_dtoa_r+0x634>
 80100ba:	f040 826f 	bne.w	801059c <_dtoa_r+0x974>
 80100be:	4b65      	ldr	r3, [pc, #404]	; (8010254 <_dtoa_r+0x62c>)
 80100c0:	2200      	movs	r2, #0
 80100c2:	4640      	mov	r0, r8
 80100c4:	4649      	mov	r1, r9
 80100c6:	f7f0 faa7 	bl	8000618 <__aeabi_dmul>
 80100ca:	4652      	mov	r2, sl
 80100cc:	465b      	mov	r3, fp
 80100ce:	f7f0 fd29 	bl	8000b24 <__aeabi_dcmpge>
 80100d2:	9e03      	ldr	r6, [sp, #12]
 80100d4:	4637      	mov	r7, r6
 80100d6:	2800      	cmp	r0, #0
 80100d8:	f040 8245 	bne.w	8010566 <_dtoa_r+0x93e>
 80100dc:	9d01      	ldr	r5, [sp, #4]
 80100de:	2331      	movs	r3, #49	; 0x31
 80100e0:	f805 3b01 	strb.w	r3, [r5], #1
 80100e4:	9b00      	ldr	r3, [sp, #0]
 80100e6:	3301      	adds	r3, #1
 80100e8:	9300      	str	r3, [sp, #0]
 80100ea:	e240      	b.n	801056e <_dtoa_r+0x946>
 80100ec:	07f2      	lsls	r2, r6, #31
 80100ee:	d505      	bpl.n	80100fc <_dtoa_r+0x4d4>
 80100f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100f4:	f7f0 fa90 	bl	8000618 <__aeabi_dmul>
 80100f8:	3501      	adds	r5, #1
 80100fa:	2301      	movs	r3, #1
 80100fc:	1076      	asrs	r6, r6, #1
 80100fe:	3708      	adds	r7, #8
 8010100:	e777      	b.n	800fff2 <_dtoa_r+0x3ca>
 8010102:	2502      	movs	r5, #2
 8010104:	e779      	b.n	800fffa <_dtoa_r+0x3d2>
 8010106:	9f00      	ldr	r7, [sp, #0]
 8010108:	9e03      	ldr	r6, [sp, #12]
 801010a:	e794      	b.n	8010036 <_dtoa_r+0x40e>
 801010c:	9901      	ldr	r1, [sp, #4]
 801010e:	4b4c      	ldr	r3, [pc, #304]	; (8010240 <_dtoa_r+0x618>)
 8010110:	4431      	add	r1, r6
 8010112:	910d      	str	r1, [sp, #52]	; 0x34
 8010114:	9908      	ldr	r1, [sp, #32]
 8010116:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801011a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801011e:	2900      	cmp	r1, #0
 8010120:	d043      	beq.n	80101aa <_dtoa_r+0x582>
 8010122:	494d      	ldr	r1, [pc, #308]	; (8010258 <_dtoa_r+0x630>)
 8010124:	2000      	movs	r0, #0
 8010126:	f7f0 fba1 	bl	800086c <__aeabi_ddiv>
 801012a:	4652      	mov	r2, sl
 801012c:	465b      	mov	r3, fp
 801012e:	f7f0 f8bb 	bl	80002a8 <__aeabi_dsub>
 8010132:	9d01      	ldr	r5, [sp, #4]
 8010134:	4682      	mov	sl, r0
 8010136:	468b      	mov	fp, r1
 8010138:	4649      	mov	r1, r9
 801013a:	4640      	mov	r0, r8
 801013c:	f7f0 fd1c 	bl	8000b78 <__aeabi_d2iz>
 8010140:	4606      	mov	r6, r0
 8010142:	f7f0 f9ff 	bl	8000544 <__aeabi_i2d>
 8010146:	4602      	mov	r2, r0
 8010148:	460b      	mov	r3, r1
 801014a:	4640      	mov	r0, r8
 801014c:	4649      	mov	r1, r9
 801014e:	f7f0 f8ab 	bl	80002a8 <__aeabi_dsub>
 8010152:	3630      	adds	r6, #48	; 0x30
 8010154:	f805 6b01 	strb.w	r6, [r5], #1
 8010158:	4652      	mov	r2, sl
 801015a:	465b      	mov	r3, fp
 801015c:	4680      	mov	r8, r0
 801015e:	4689      	mov	r9, r1
 8010160:	f7f0 fccc 	bl	8000afc <__aeabi_dcmplt>
 8010164:	2800      	cmp	r0, #0
 8010166:	d163      	bne.n	8010230 <_dtoa_r+0x608>
 8010168:	4642      	mov	r2, r8
 801016a:	464b      	mov	r3, r9
 801016c:	4936      	ldr	r1, [pc, #216]	; (8010248 <_dtoa_r+0x620>)
 801016e:	2000      	movs	r0, #0
 8010170:	f7f0 f89a 	bl	80002a8 <__aeabi_dsub>
 8010174:	4652      	mov	r2, sl
 8010176:	465b      	mov	r3, fp
 8010178:	f7f0 fcc0 	bl	8000afc <__aeabi_dcmplt>
 801017c:	2800      	cmp	r0, #0
 801017e:	f040 80b5 	bne.w	80102ec <_dtoa_r+0x6c4>
 8010182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010184:	429d      	cmp	r5, r3
 8010186:	d081      	beq.n	801008c <_dtoa_r+0x464>
 8010188:	4b30      	ldr	r3, [pc, #192]	; (801024c <_dtoa_r+0x624>)
 801018a:	2200      	movs	r2, #0
 801018c:	4650      	mov	r0, sl
 801018e:	4659      	mov	r1, fp
 8010190:	f7f0 fa42 	bl	8000618 <__aeabi_dmul>
 8010194:	4b2d      	ldr	r3, [pc, #180]	; (801024c <_dtoa_r+0x624>)
 8010196:	4682      	mov	sl, r0
 8010198:	468b      	mov	fp, r1
 801019a:	4640      	mov	r0, r8
 801019c:	4649      	mov	r1, r9
 801019e:	2200      	movs	r2, #0
 80101a0:	f7f0 fa3a 	bl	8000618 <__aeabi_dmul>
 80101a4:	4680      	mov	r8, r0
 80101a6:	4689      	mov	r9, r1
 80101a8:	e7c6      	b.n	8010138 <_dtoa_r+0x510>
 80101aa:	4650      	mov	r0, sl
 80101ac:	4659      	mov	r1, fp
 80101ae:	f7f0 fa33 	bl	8000618 <__aeabi_dmul>
 80101b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101b4:	9d01      	ldr	r5, [sp, #4]
 80101b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80101b8:	4682      	mov	sl, r0
 80101ba:	468b      	mov	fp, r1
 80101bc:	4649      	mov	r1, r9
 80101be:	4640      	mov	r0, r8
 80101c0:	f7f0 fcda 	bl	8000b78 <__aeabi_d2iz>
 80101c4:	4606      	mov	r6, r0
 80101c6:	f7f0 f9bd 	bl	8000544 <__aeabi_i2d>
 80101ca:	3630      	adds	r6, #48	; 0x30
 80101cc:	4602      	mov	r2, r0
 80101ce:	460b      	mov	r3, r1
 80101d0:	4640      	mov	r0, r8
 80101d2:	4649      	mov	r1, r9
 80101d4:	f7f0 f868 	bl	80002a8 <__aeabi_dsub>
 80101d8:	f805 6b01 	strb.w	r6, [r5], #1
 80101dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101de:	429d      	cmp	r5, r3
 80101e0:	4680      	mov	r8, r0
 80101e2:	4689      	mov	r9, r1
 80101e4:	f04f 0200 	mov.w	r2, #0
 80101e8:	d124      	bne.n	8010234 <_dtoa_r+0x60c>
 80101ea:	4b1b      	ldr	r3, [pc, #108]	; (8010258 <_dtoa_r+0x630>)
 80101ec:	4650      	mov	r0, sl
 80101ee:	4659      	mov	r1, fp
 80101f0:	f7f0 f85c 	bl	80002ac <__adddf3>
 80101f4:	4602      	mov	r2, r0
 80101f6:	460b      	mov	r3, r1
 80101f8:	4640      	mov	r0, r8
 80101fa:	4649      	mov	r1, r9
 80101fc:	f7f0 fc9c 	bl	8000b38 <__aeabi_dcmpgt>
 8010200:	2800      	cmp	r0, #0
 8010202:	d173      	bne.n	80102ec <_dtoa_r+0x6c4>
 8010204:	4652      	mov	r2, sl
 8010206:	465b      	mov	r3, fp
 8010208:	4913      	ldr	r1, [pc, #76]	; (8010258 <_dtoa_r+0x630>)
 801020a:	2000      	movs	r0, #0
 801020c:	f7f0 f84c 	bl	80002a8 <__aeabi_dsub>
 8010210:	4602      	mov	r2, r0
 8010212:	460b      	mov	r3, r1
 8010214:	4640      	mov	r0, r8
 8010216:	4649      	mov	r1, r9
 8010218:	f7f0 fc70 	bl	8000afc <__aeabi_dcmplt>
 801021c:	2800      	cmp	r0, #0
 801021e:	f43f af35 	beq.w	801008c <_dtoa_r+0x464>
 8010222:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010224:	1e6b      	subs	r3, r5, #1
 8010226:	930f      	str	r3, [sp, #60]	; 0x3c
 8010228:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801022c:	2b30      	cmp	r3, #48	; 0x30
 801022e:	d0f8      	beq.n	8010222 <_dtoa_r+0x5fa>
 8010230:	9700      	str	r7, [sp, #0]
 8010232:	e049      	b.n	80102c8 <_dtoa_r+0x6a0>
 8010234:	4b05      	ldr	r3, [pc, #20]	; (801024c <_dtoa_r+0x624>)
 8010236:	f7f0 f9ef 	bl	8000618 <__aeabi_dmul>
 801023a:	4680      	mov	r8, r0
 801023c:	4689      	mov	r9, r1
 801023e:	e7bd      	b.n	80101bc <_dtoa_r+0x594>
 8010240:	080132c8 	.word	0x080132c8
 8010244:	080132a0 	.word	0x080132a0
 8010248:	3ff00000 	.word	0x3ff00000
 801024c:	40240000 	.word	0x40240000
 8010250:	401c0000 	.word	0x401c0000
 8010254:	40140000 	.word	0x40140000
 8010258:	3fe00000 	.word	0x3fe00000
 801025c:	9d01      	ldr	r5, [sp, #4]
 801025e:	4656      	mov	r6, sl
 8010260:	465f      	mov	r7, fp
 8010262:	4642      	mov	r2, r8
 8010264:	464b      	mov	r3, r9
 8010266:	4630      	mov	r0, r6
 8010268:	4639      	mov	r1, r7
 801026a:	f7f0 faff 	bl	800086c <__aeabi_ddiv>
 801026e:	f7f0 fc83 	bl	8000b78 <__aeabi_d2iz>
 8010272:	4682      	mov	sl, r0
 8010274:	f7f0 f966 	bl	8000544 <__aeabi_i2d>
 8010278:	4642      	mov	r2, r8
 801027a:	464b      	mov	r3, r9
 801027c:	f7f0 f9cc 	bl	8000618 <__aeabi_dmul>
 8010280:	4602      	mov	r2, r0
 8010282:	460b      	mov	r3, r1
 8010284:	4630      	mov	r0, r6
 8010286:	4639      	mov	r1, r7
 8010288:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801028c:	f7f0 f80c 	bl	80002a8 <__aeabi_dsub>
 8010290:	f805 6b01 	strb.w	r6, [r5], #1
 8010294:	9e01      	ldr	r6, [sp, #4]
 8010296:	9f03      	ldr	r7, [sp, #12]
 8010298:	1bae      	subs	r6, r5, r6
 801029a:	42b7      	cmp	r7, r6
 801029c:	4602      	mov	r2, r0
 801029e:	460b      	mov	r3, r1
 80102a0:	d135      	bne.n	801030e <_dtoa_r+0x6e6>
 80102a2:	f7f0 f803 	bl	80002ac <__adddf3>
 80102a6:	4642      	mov	r2, r8
 80102a8:	464b      	mov	r3, r9
 80102aa:	4606      	mov	r6, r0
 80102ac:	460f      	mov	r7, r1
 80102ae:	f7f0 fc43 	bl	8000b38 <__aeabi_dcmpgt>
 80102b2:	b9d0      	cbnz	r0, 80102ea <_dtoa_r+0x6c2>
 80102b4:	4642      	mov	r2, r8
 80102b6:	464b      	mov	r3, r9
 80102b8:	4630      	mov	r0, r6
 80102ba:	4639      	mov	r1, r7
 80102bc:	f7f0 fc14 	bl	8000ae8 <__aeabi_dcmpeq>
 80102c0:	b110      	cbz	r0, 80102c8 <_dtoa_r+0x6a0>
 80102c2:	f01a 0f01 	tst.w	sl, #1
 80102c6:	d110      	bne.n	80102ea <_dtoa_r+0x6c2>
 80102c8:	4620      	mov	r0, r4
 80102ca:	ee18 1a10 	vmov	r1, s16
 80102ce:	f001 f897 	bl	8011400 <_Bfree>
 80102d2:	2300      	movs	r3, #0
 80102d4:	9800      	ldr	r0, [sp, #0]
 80102d6:	702b      	strb	r3, [r5, #0]
 80102d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102da:	3001      	adds	r0, #1
 80102dc:	6018      	str	r0, [r3, #0]
 80102de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	f43f acf1 	beq.w	800fcc8 <_dtoa_r+0xa0>
 80102e6:	601d      	str	r5, [r3, #0]
 80102e8:	e4ee      	b.n	800fcc8 <_dtoa_r+0xa0>
 80102ea:	9f00      	ldr	r7, [sp, #0]
 80102ec:	462b      	mov	r3, r5
 80102ee:	461d      	mov	r5, r3
 80102f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102f4:	2a39      	cmp	r2, #57	; 0x39
 80102f6:	d106      	bne.n	8010306 <_dtoa_r+0x6de>
 80102f8:	9a01      	ldr	r2, [sp, #4]
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d1f7      	bne.n	80102ee <_dtoa_r+0x6c6>
 80102fe:	9901      	ldr	r1, [sp, #4]
 8010300:	2230      	movs	r2, #48	; 0x30
 8010302:	3701      	adds	r7, #1
 8010304:	700a      	strb	r2, [r1, #0]
 8010306:	781a      	ldrb	r2, [r3, #0]
 8010308:	3201      	adds	r2, #1
 801030a:	701a      	strb	r2, [r3, #0]
 801030c:	e790      	b.n	8010230 <_dtoa_r+0x608>
 801030e:	4ba6      	ldr	r3, [pc, #664]	; (80105a8 <_dtoa_r+0x980>)
 8010310:	2200      	movs	r2, #0
 8010312:	f7f0 f981 	bl	8000618 <__aeabi_dmul>
 8010316:	2200      	movs	r2, #0
 8010318:	2300      	movs	r3, #0
 801031a:	4606      	mov	r6, r0
 801031c:	460f      	mov	r7, r1
 801031e:	f7f0 fbe3 	bl	8000ae8 <__aeabi_dcmpeq>
 8010322:	2800      	cmp	r0, #0
 8010324:	d09d      	beq.n	8010262 <_dtoa_r+0x63a>
 8010326:	e7cf      	b.n	80102c8 <_dtoa_r+0x6a0>
 8010328:	9a08      	ldr	r2, [sp, #32]
 801032a:	2a00      	cmp	r2, #0
 801032c:	f000 80d7 	beq.w	80104de <_dtoa_r+0x8b6>
 8010330:	9a06      	ldr	r2, [sp, #24]
 8010332:	2a01      	cmp	r2, #1
 8010334:	f300 80ba 	bgt.w	80104ac <_dtoa_r+0x884>
 8010338:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801033a:	2a00      	cmp	r2, #0
 801033c:	f000 80b2 	beq.w	80104a4 <_dtoa_r+0x87c>
 8010340:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010344:	9e07      	ldr	r6, [sp, #28]
 8010346:	9d04      	ldr	r5, [sp, #16]
 8010348:	9a04      	ldr	r2, [sp, #16]
 801034a:	441a      	add	r2, r3
 801034c:	9204      	str	r2, [sp, #16]
 801034e:	9a05      	ldr	r2, [sp, #20]
 8010350:	2101      	movs	r1, #1
 8010352:	441a      	add	r2, r3
 8010354:	4620      	mov	r0, r4
 8010356:	9205      	str	r2, [sp, #20]
 8010358:	f001 f954 	bl	8011604 <__i2b>
 801035c:	4607      	mov	r7, r0
 801035e:	2d00      	cmp	r5, #0
 8010360:	dd0c      	ble.n	801037c <_dtoa_r+0x754>
 8010362:	9b05      	ldr	r3, [sp, #20]
 8010364:	2b00      	cmp	r3, #0
 8010366:	dd09      	ble.n	801037c <_dtoa_r+0x754>
 8010368:	42ab      	cmp	r3, r5
 801036a:	9a04      	ldr	r2, [sp, #16]
 801036c:	bfa8      	it	ge
 801036e:	462b      	movge	r3, r5
 8010370:	1ad2      	subs	r2, r2, r3
 8010372:	9204      	str	r2, [sp, #16]
 8010374:	9a05      	ldr	r2, [sp, #20]
 8010376:	1aed      	subs	r5, r5, r3
 8010378:	1ad3      	subs	r3, r2, r3
 801037a:	9305      	str	r3, [sp, #20]
 801037c:	9b07      	ldr	r3, [sp, #28]
 801037e:	b31b      	cbz	r3, 80103c8 <_dtoa_r+0x7a0>
 8010380:	9b08      	ldr	r3, [sp, #32]
 8010382:	2b00      	cmp	r3, #0
 8010384:	f000 80af 	beq.w	80104e6 <_dtoa_r+0x8be>
 8010388:	2e00      	cmp	r6, #0
 801038a:	dd13      	ble.n	80103b4 <_dtoa_r+0x78c>
 801038c:	4639      	mov	r1, r7
 801038e:	4632      	mov	r2, r6
 8010390:	4620      	mov	r0, r4
 8010392:	f001 f9f7 	bl	8011784 <__pow5mult>
 8010396:	ee18 2a10 	vmov	r2, s16
 801039a:	4601      	mov	r1, r0
 801039c:	4607      	mov	r7, r0
 801039e:	4620      	mov	r0, r4
 80103a0:	f001 f946 	bl	8011630 <__multiply>
 80103a4:	ee18 1a10 	vmov	r1, s16
 80103a8:	4680      	mov	r8, r0
 80103aa:	4620      	mov	r0, r4
 80103ac:	f001 f828 	bl	8011400 <_Bfree>
 80103b0:	ee08 8a10 	vmov	s16, r8
 80103b4:	9b07      	ldr	r3, [sp, #28]
 80103b6:	1b9a      	subs	r2, r3, r6
 80103b8:	d006      	beq.n	80103c8 <_dtoa_r+0x7a0>
 80103ba:	ee18 1a10 	vmov	r1, s16
 80103be:	4620      	mov	r0, r4
 80103c0:	f001 f9e0 	bl	8011784 <__pow5mult>
 80103c4:	ee08 0a10 	vmov	s16, r0
 80103c8:	2101      	movs	r1, #1
 80103ca:	4620      	mov	r0, r4
 80103cc:	f001 f91a 	bl	8011604 <__i2b>
 80103d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	4606      	mov	r6, r0
 80103d6:	f340 8088 	ble.w	80104ea <_dtoa_r+0x8c2>
 80103da:	461a      	mov	r2, r3
 80103dc:	4601      	mov	r1, r0
 80103de:	4620      	mov	r0, r4
 80103e0:	f001 f9d0 	bl	8011784 <__pow5mult>
 80103e4:	9b06      	ldr	r3, [sp, #24]
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	4606      	mov	r6, r0
 80103ea:	f340 8081 	ble.w	80104f0 <_dtoa_r+0x8c8>
 80103ee:	f04f 0800 	mov.w	r8, #0
 80103f2:	6933      	ldr	r3, [r6, #16]
 80103f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80103f8:	6918      	ldr	r0, [r3, #16]
 80103fa:	f001 f8b3 	bl	8011564 <__hi0bits>
 80103fe:	f1c0 0020 	rsb	r0, r0, #32
 8010402:	9b05      	ldr	r3, [sp, #20]
 8010404:	4418      	add	r0, r3
 8010406:	f010 001f 	ands.w	r0, r0, #31
 801040a:	f000 8092 	beq.w	8010532 <_dtoa_r+0x90a>
 801040e:	f1c0 0320 	rsb	r3, r0, #32
 8010412:	2b04      	cmp	r3, #4
 8010414:	f340 808a 	ble.w	801052c <_dtoa_r+0x904>
 8010418:	f1c0 001c 	rsb	r0, r0, #28
 801041c:	9b04      	ldr	r3, [sp, #16]
 801041e:	4403      	add	r3, r0
 8010420:	9304      	str	r3, [sp, #16]
 8010422:	9b05      	ldr	r3, [sp, #20]
 8010424:	4403      	add	r3, r0
 8010426:	4405      	add	r5, r0
 8010428:	9305      	str	r3, [sp, #20]
 801042a:	9b04      	ldr	r3, [sp, #16]
 801042c:	2b00      	cmp	r3, #0
 801042e:	dd07      	ble.n	8010440 <_dtoa_r+0x818>
 8010430:	ee18 1a10 	vmov	r1, s16
 8010434:	461a      	mov	r2, r3
 8010436:	4620      	mov	r0, r4
 8010438:	f001 f9fe 	bl	8011838 <__lshift>
 801043c:	ee08 0a10 	vmov	s16, r0
 8010440:	9b05      	ldr	r3, [sp, #20]
 8010442:	2b00      	cmp	r3, #0
 8010444:	dd05      	ble.n	8010452 <_dtoa_r+0x82a>
 8010446:	4631      	mov	r1, r6
 8010448:	461a      	mov	r2, r3
 801044a:	4620      	mov	r0, r4
 801044c:	f001 f9f4 	bl	8011838 <__lshift>
 8010450:	4606      	mov	r6, r0
 8010452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010454:	2b00      	cmp	r3, #0
 8010456:	d06e      	beq.n	8010536 <_dtoa_r+0x90e>
 8010458:	ee18 0a10 	vmov	r0, s16
 801045c:	4631      	mov	r1, r6
 801045e:	f001 fa5b 	bl	8011918 <__mcmp>
 8010462:	2800      	cmp	r0, #0
 8010464:	da67      	bge.n	8010536 <_dtoa_r+0x90e>
 8010466:	9b00      	ldr	r3, [sp, #0]
 8010468:	3b01      	subs	r3, #1
 801046a:	ee18 1a10 	vmov	r1, s16
 801046e:	9300      	str	r3, [sp, #0]
 8010470:	220a      	movs	r2, #10
 8010472:	2300      	movs	r3, #0
 8010474:	4620      	mov	r0, r4
 8010476:	f000 ffe5 	bl	8011444 <__multadd>
 801047a:	9b08      	ldr	r3, [sp, #32]
 801047c:	ee08 0a10 	vmov	s16, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	f000 81b1 	beq.w	80107e8 <_dtoa_r+0xbc0>
 8010486:	2300      	movs	r3, #0
 8010488:	4639      	mov	r1, r7
 801048a:	220a      	movs	r2, #10
 801048c:	4620      	mov	r0, r4
 801048e:	f000 ffd9 	bl	8011444 <__multadd>
 8010492:	9b02      	ldr	r3, [sp, #8]
 8010494:	2b00      	cmp	r3, #0
 8010496:	4607      	mov	r7, r0
 8010498:	f300 808e 	bgt.w	80105b8 <_dtoa_r+0x990>
 801049c:	9b06      	ldr	r3, [sp, #24]
 801049e:	2b02      	cmp	r3, #2
 80104a0:	dc51      	bgt.n	8010546 <_dtoa_r+0x91e>
 80104a2:	e089      	b.n	80105b8 <_dtoa_r+0x990>
 80104a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80104aa:	e74b      	b.n	8010344 <_dtoa_r+0x71c>
 80104ac:	9b03      	ldr	r3, [sp, #12]
 80104ae:	1e5e      	subs	r6, r3, #1
 80104b0:	9b07      	ldr	r3, [sp, #28]
 80104b2:	42b3      	cmp	r3, r6
 80104b4:	bfbf      	itttt	lt
 80104b6:	9b07      	ldrlt	r3, [sp, #28]
 80104b8:	9607      	strlt	r6, [sp, #28]
 80104ba:	1af2      	sublt	r2, r6, r3
 80104bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80104be:	bfb6      	itet	lt
 80104c0:	189b      	addlt	r3, r3, r2
 80104c2:	1b9e      	subge	r6, r3, r6
 80104c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80104c6:	9b03      	ldr	r3, [sp, #12]
 80104c8:	bfb8      	it	lt
 80104ca:	2600      	movlt	r6, #0
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	bfb7      	itett	lt
 80104d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80104d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80104d8:	1a9d      	sublt	r5, r3, r2
 80104da:	2300      	movlt	r3, #0
 80104dc:	e734      	b.n	8010348 <_dtoa_r+0x720>
 80104de:	9e07      	ldr	r6, [sp, #28]
 80104e0:	9d04      	ldr	r5, [sp, #16]
 80104e2:	9f08      	ldr	r7, [sp, #32]
 80104e4:	e73b      	b.n	801035e <_dtoa_r+0x736>
 80104e6:	9a07      	ldr	r2, [sp, #28]
 80104e8:	e767      	b.n	80103ba <_dtoa_r+0x792>
 80104ea:	9b06      	ldr	r3, [sp, #24]
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	dc18      	bgt.n	8010522 <_dtoa_r+0x8fa>
 80104f0:	f1ba 0f00 	cmp.w	sl, #0
 80104f4:	d115      	bne.n	8010522 <_dtoa_r+0x8fa>
 80104f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80104fa:	b993      	cbnz	r3, 8010522 <_dtoa_r+0x8fa>
 80104fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010500:	0d1b      	lsrs	r3, r3, #20
 8010502:	051b      	lsls	r3, r3, #20
 8010504:	b183      	cbz	r3, 8010528 <_dtoa_r+0x900>
 8010506:	9b04      	ldr	r3, [sp, #16]
 8010508:	3301      	adds	r3, #1
 801050a:	9304      	str	r3, [sp, #16]
 801050c:	9b05      	ldr	r3, [sp, #20]
 801050e:	3301      	adds	r3, #1
 8010510:	9305      	str	r3, [sp, #20]
 8010512:	f04f 0801 	mov.w	r8, #1
 8010516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010518:	2b00      	cmp	r3, #0
 801051a:	f47f af6a 	bne.w	80103f2 <_dtoa_r+0x7ca>
 801051e:	2001      	movs	r0, #1
 8010520:	e76f      	b.n	8010402 <_dtoa_r+0x7da>
 8010522:	f04f 0800 	mov.w	r8, #0
 8010526:	e7f6      	b.n	8010516 <_dtoa_r+0x8ee>
 8010528:	4698      	mov	r8, r3
 801052a:	e7f4      	b.n	8010516 <_dtoa_r+0x8ee>
 801052c:	f43f af7d 	beq.w	801042a <_dtoa_r+0x802>
 8010530:	4618      	mov	r0, r3
 8010532:	301c      	adds	r0, #28
 8010534:	e772      	b.n	801041c <_dtoa_r+0x7f4>
 8010536:	9b03      	ldr	r3, [sp, #12]
 8010538:	2b00      	cmp	r3, #0
 801053a:	dc37      	bgt.n	80105ac <_dtoa_r+0x984>
 801053c:	9b06      	ldr	r3, [sp, #24]
 801053e:	2b02      	cmp	r3, #2
 8010540:	dd34      	ble.n	80105ac <_dtoa_r+0x984>
 8010542:	9b03      	ldr	r3, [sp, #12]
 8010544:	9302      	str	r3, [sp, #8]
 8010546:	9b02      	ldr	r3, [sp, #8]
 8010548:	b96b      	cbnz	r3, 8010566 <_dtoa_r+0x93e>
 801054a:	4631      	mov	r1, r6
 801054c:	2205      	movs	r2, #5
 801054e:	4620      	mov	r0, r4
 8010550:	f000 ff78 	bl	8011444 <__multadd>
 8010554:	4601      	mov	r1, r0
 8010556:	4606      	mov	r6, r0
 8010558:	ee18 0a10 	vmov	r0, s16
 801055c:	f001 f9dc 	bl	8011918 <__mcmp>
 8010560:	2800      	cmp	r0, #0
 8010562:	f73f adbb 	bgt.w	80100dc <_dtoa_r+0x4b4>
 8010566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010568:	9d01      	ldr	r5, [sp, #4]
 801056a:	43db      	mvns	r3, r3
 801056c:	9300      	str	r3, [sp, #0]
 801056e:	f04f 0800 	mov.w	r8, #0
 8010572:	4631      	mov	r1, r6
 8010574:	4620      	mov	r0, r4
 8010576:	f000 ff43 	bl	8011400 <_Bfree>
 801057a:	2f00      	cmp	r7, #0
 801057c:	f43f aea4 	beq.w	80102c8 <_dtoa_r+0x6a0>
 8010580:	f1b8 0f00 	cmp.w	r8, #0
 8010584:	d005      	beq.n	8010592 <_dtoa_r+0x96a>
 8010586:	45b8      	cmp	r8, r7
 8010588:	d003      	beq.n	8010592 <_dtoa_r+0x96a>
 801058a:	4641      	mov	r1, r8
 801058c:	4620      	mov	r0, r4
 801058e:	f000 ff37 	bl	8011400 <_Bfree>
 8010592:	4639      	mov	r1, r7
 8010594:	4620      	mov	r0, r4
 8010596:	f000 ff33 	bl	8011400 <_Bfree>
 801059a:	e695      	b.n	80102c8 <_dtoa_r+0x6a0>
 801059c:	2600      	movs	r6, #0
 801059e:	4637      	mov	r7, r6
 80105a0:	e7e1      	b.n	8010566 <_dtoa_r+0x93e>
 80105a2:	9700      	str	r7, [sp, #0]
 80105a4:	4637      	mov	r7, r6
 80105a6:	e599      	b.n	80100dc <_dtoa_r+0x4b4>
 80105a8:	40240000 	.word	0x40240000
 80105ac:	9b08      	ldr	r3, [sp, #32]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	f000 80ca 	beq.w	8010748 <_dtoa_r+0xb20>
 80105b4:	9b03      	ldr	r3, [sp, #12]
 80105b6:	9302      	str	r3, [sp, #8]
 80105b8:	2d00      	cmp	r5, #0
 80105ba:	dd05      	ble.n	80105c8 <_dtoa_r+0x9a0>
 80105bc:	4639      	mov	r1, r7
 80105be:	462a      	mov	r2, r5
 80105c0:	4620      	mov	r0, r4
 80105c2:	f001 f939 	bl	8011838 <__lshift>
 80105c6:	4607      	mov	r7, r0
 80105c8:	f1b8 0f00 	cmp.w	r8, #0
 80105cc:	d05b      	beq.n	8010686 <_dtoa_r+0xa5e>
 80105ce:	6879      	ldr	r1, [r7, #4]
 80105d0:	4620      	mov	r0, r4
 80105d2:	f000 fed5 	bl	8011380 <_Balloc>
 80105d6:	4605      	mov	r5, r0
 80105d8:	b928      	cbnz	r0, 80105e6 <_dtoa_r+0x9be>
 80105da:	4b87      	ldr	r3, [pc, #540]	; (80107f8 <_dtoa_r+0xbd0>)
 80105dc:	4602      	mov	r2, r0
 80105de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80105e2:	f7ff bb3b 	b.w	800fc5c <_dtoa_r+0x34>
 80105e6:	693a      	ldr	r2, [r7, #16]
 80105e8:	3202      	adds	r2, #2
 80105ea:	0092      	lsls	r2, r2, #2
 80105ec:	f107 010c 	add.w	r1, r7, #12
 80105f0:	300c      	adds	r0, #12
 80105f2:	f7fd fc3b 	bl	800de6c <memcpy>
 80105f6:	2201      	movs	r2, #1
 80105f8:	4629      	mov	r1, r5
 80105fa:	4620      	mov	r0, r4
 80105fc:	f001 f91c 	bl	8011838 <__lshift>
 8010600:	9b01      	ldr	r3, [sp, #4]
 8010602:	f103 0901 	add.w	r9, r3, #1
 8010606:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801060a:	4413      	add	r3, r2
 801060c:	9305      	str	r3, [sp, #20]
 801060e:	f00a 0301 	and.w	r3, sl, #1
 8010612:	46b8      	mov	r8, r7
 8010614:	9304      	str	r3, [sp, #16]
 8010616:	4607      	mov	r7, r0
 8010618:	4631      	mov	r1, r6
 801061a:	ee18 0a10 	vmov	r0, s16
 801061e:	f7ff fa75 	bl	800fb0c <quorem>
 8010622:	4641      	mov	r1, r8
 8010624:	9002      	str	r0, [sp, #8]
 8010626:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801062a:	ee18 0a10 	vmov	r0, s16
 801062e:	f001 f973 	bl	8011918 <__mcmp>
 8010632:	463a      	mov	r2, r7
 8010634:	9003      	str	r0, [sp, #12]
 8010636:	4631      	mov	r1, r6
 8010638:	4620      	mov	r0, r4
 801063a:	f001 f989 	bl	8011950 <__mdiff>
 801063e:	68c2      	ldr	r2, [r0, #12]
 8010640:	f109 3bff 	add.w	fp, r9, #4294967295
 8010644:	4605      	mov	r5, r0
 8010646:	bb02      	cbnz	r2, 801068a <_dtoa_r+0xa62>
 8010648:	4601      	mov	r1, r0
 801064a:	ee18 0a10 	vmov	r0, s16
 801064e:	f001 f963 	bl	8011918 <__mcmp>
 8010652:	4602      	mov	r2, r0
 8010654:	4629      	mov	r1, r5
 8010656:	4620      	mov	r0, r4
 8010658:	9207      	str	r2, [sp, #28]
 801065a:	f000 fed1 	bl	8011400 <_Bfree>
 801065e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010662:	ea43 0102 	orr.w	r1, r3, r2
 8010666:	9b04      	ldr	r3, [sp, #16]
 8010668:	430b      	orrs	r3, r1
 801066a:	464d      	mov	r5, r9
 801066c:	d10f      	bne.n	801068e <_dtoa_r+0xa66>
 801066e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010672:	d02a      	beq.n	80106ca <_dtoa_r+0xaa2>
 8010674:	9b03      	ldr	r3, [sp, #12]
 8010676:	2b00      	cmp	r3, #0
 8010678:	dd02      	ble.n	8010680 <_dtoa_r+0xa58>
 801067a:	9b02      	ldr	r3, [sp, #8]
 801067c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010680:	f88b a000 	strb.w	sl, [fp]
 8010684:	e775      	b.n	8010572 <_dtoa_r+0x94a>
 8010686:	4638      	mov	r0, r7
 8010688:	e7ba      	b.n	8010600 <_dtoa_r+0x9d8>
 801068a:	2201      	movs	r2, #1
 801068c:	e7e2      	b.n	8010654 <_dtoa_r+0xa2c>
 801068e:	9b03      	ldr	r3, [sp, #12]
 8010690:	2b00      	cmp	r3, #0
 8010692:	db04      	blt.n	801069e <_dtoa_r+0xa76>
 8010694:	9906      	ldr	r1, [sp, #24]
 8010696:	430b      	orrs	r3, r1
 8010698:	9904      	ldr	r1, [sp, #16]
 801069a:	430b      	orrs	r3, r1
 801069c:	d122      	bne.n	80106e4 <_dtoa_r+0xabc>
 801069e:	2a00      	cmp	r2, #0
 80106a0:	ddee      	ble.n	8010680 <_dtoa_r+0xa58>
 80106a2:	ee18 1a10 	vmov	r1, s16
 80106a6:	2201      	movs	r2, #1
 80106a8:	4620      	mov	r0, r4
 80106aa:	f001 f8c5 	bl	8011838 <__lshift>
 80106ae:	4631      	mov	r1, r6
 80106b0:	ee08 0a10 	vmov	s16, r0
 80106b4:	f001 f930 	bl	8011918 <__mcmp>
 80106b8:	2800      	cmp	r0, #0
 80106ba:	dc03      	bgt.n	80106c4 <_dtoa_r+0xa9c>
 80106bc:	d1e0      	bne.n	8010680 <_dtoa_r+0xa58>
 80106be:	f01a 0f01 	tst.w	sl, #1
 80106c2:	d0dd      	beq.n	8010680 <_dtoa_r+0xa58>
 80106c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80106c8:	d1d7      	bne.n	801067a <_dtoa_r+0xa52>
 80106ca:	2339      	movs	r3, #57	; 0x39
 80106cc:	f88b 3000 	strb.w	r3, [fp]
 80106d0:	462b      	mov	r3, r5
 80106d2:	461d      	mov	r5, r3
 80106d4:	3b01      	subs	r3, #1
 80106d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80106da:	2a39      	cmp	r2, #57	; 0x39
 80106dc:	d071      	beq.n	80107c2 <_dtoa_r+0xb9a>
 80106de:	3201      	adds	r2, #1
 80106e0:	701a      	strb	r2, [r3, #0]
 80106e2:	e746      	b.n	8010572 <_dtoa_r+0x94a>
 80106e4:	2a00      	cmp	r2, #0
 80106e6:	dd07      	ble.n	80106f8 <_dtoa_r+0xad0>
 80106e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80106ec:	d0ed      	beq.n	80106ca <_dtoa_r+0xaa2>
 80106ee:	f10a 0301 	add.w	r3, sl, #1
 80106f2:	f88b 3000 	strb.w	r3, [fp]
 80106f6:	e73c      	b.n	8010572 <_dtoa_r+0x94a>
 80106f8:	9b05      	ldr	r3, [sp, #20]
 80106fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80106fe:	4599      	cmp	r9, r3
 8010700:	d047      	beq.n	8010792 <_dtoa_r+0xb6a>
 8010702:	ee18 1a10 	vmov	r1, s16
 8010706:	2300      	movs	r3, #0
 8010708:	220a      	movs	r2, #10
 801070a:	4620      	mov	r0, r4
 801070c:	f000 fe9a 	bl	8011444 <__multadd>
 8010710:	45b8      	cmp	r8, r7
 8010712:	ee08 0a10 	vmov	s16, r0
 8010716:	f04f 0300 	mov.w	r3, #0
 801071a:	f04f 020a 	mov.w	r2, #10
 801071e:	4641      	mov	r1, r8
 8010720:	4620      	mov	r0, r4
 8010722:	d106      	bne.n	8010732 <_dtoa_r+0xb0a>
 8010724:	f000 fe8e 	bl	8011444 <__multadd>
 8010728:	4680      	mov	r8, r0
 801072a:	4607      	mov	r7, r0
 801072c:	f109 0901 	add.w	r9, r9, #1
 8010730:	e772      	b.n	8010618 <_dtoa_r+0x9f0>
 8010732:	f000 fe87 	bl	8011444 <__multadd>
 8010736:	4639      	mov	r1, r7
 8010738:	4680      	mov	r8, r0
 801073a:	2300      	movs	r3, #0
 801073c:	220a      	movs	r2, #10
 801073e:	4620      	mov	r0, r4
 8010740:	f000 fe80 	bl	8011444 <__multadd>
 8010744:	4607      	mov	r7, r0
 8010746:	e7f1      	b.n	801072c <_dtoa_r+0xb04>
 8010748:	9b03      	ldr	r3, [sp, #12]
 801074a:	9302      	str	r3, [sp, #8]
 801074c:	9d01      	ldr	r5, [sp, #4]
 801074e:	ee18 0a10 	vmov	r0, s16
 8010752:	4631      	mov	r1, r6
 8010754:	f7ff f9da 	bl	800fb0c <quorem>
 8010758:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801075c:	9b01      	ldr	r3, [sp, #4]
 801075e:	f805 ab01 	strb.w	sl, [r5], #1
 8010762:	1aea      	subs	r2, r5, r3
 8010764:	9b02      	ldr	r3, [sp, #8]
 8010766:	4293      	cmp	r3, r2
 8010768:	dd09      	ble.n	801077e <_dtoa_r+0xb56>
 801076a:	ee18 1a10 	vmov	r1, s16
 801076e:	2300      	movs	r3, #0
 8010770:	220a      	movs	r2, #10
 8010772:	4620      	mov	r0, r4
 8010774:	f000 fe66 	bl	8011444 <__multadd>
 8010778:	ee08 0a10 	vmov	s16, r0
 801077c:	e7e7      	b.n	801074e <_dtoa_r+0xb26>
 801077e:	9b02      	ldr	r3, [sp, #8]
 8010780:	2b00      	cmp	r3, #0
 8010782:	bfc8      	it	gt
 8010784:	461d      	movgt	r5, r3
 8010786:	9b01      	ldr	r3, [sp, #4]
 8010788:	bfd8      	it	le
 801078a:	2501      	movle	r5, #1
 801078c:	441d      	add	r5, r3
 801078e:	f04f 0800 	mov.w	r8, #0
 8010792:	ee18 1a10 	vmov	r1, s16
 8010796:	2201      	movs	r2, #1
 8010798:	4620      	mov	r0, r4
 801079a:	f001 f84d 	bl	8011838 <__lshift>
 801079e:	4631      	mov	r1, r6
 80107a0:	ee08 0a10 	vmov	s16, r0
 80107a4:	f001 f8b8 	bl	8011918 <__mcmp>
 80107a8:	2800      	cmp	r0, #0
 80107aa:	dc91      	bgt.n	80106d0 <_dtoa_r+0xaa8>
 80107ac:	d102      	bne.n	80107b4 <_dtoa_r+0xb8c>
 80107ae:	f01a 0f01 	tst.w	sl, #1
 80107b2:	d18d      	bne.n	80106d0 <_dtoa_r+0xaa8>
 80107b4:	462b      	mov	r3, r5
 80107b6:	461d      	mov	r5, r3
 80107b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107bc:	2a30      	cmp	r2, #48	; 0x30
 80107be:	d0fa      	beq.n	80107b6 <_dtoa_r+0xb8e>
 80107c0:	e6d7      	b.n	8010572 <_dtoa_r+0x94a>
 80107c2:	9a01      	ldr	r2, [sp, #4]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d184      	bne.n	80106d2 <_dtoa_r+0xaaa>
 80107c8:	9b00      	ldr	r3, [sp, #0]
 80107ca:	3301      	adds	r3, #1
 80107cc:	9300      	str	r3, [sp, #0]
 80107ce:	2331      	movs	r3, #49	; 0x31
 80107d0:	7013      	strb	r3, [r2, #0]
 80107d2:	e6ce      	b.n	8010572 <_dtoa_r+0x94a>
 80107d4:	4b09      	ldr	r3, [pc, #36]	; (80107fc <_dtoa_r+0xbd4>)
 80107d6:	f7ff ba95 	b.w	800fd04 <_dtoa_r+0xdc>
 80107da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107dc:	2b00      	cmp	r3, #0
 80107de:	f47f aa6e 	bne.w	800fcbe <_dtoa_r+0x96>
 80107e2:	4b07      	ldr	r3, [pc, #28]	; (8010800 <_dtoa_r+0xbd8>)
 80107e4:	f7ff ba8e 	b.w	800fd04 <_dtoa_r+0xdc>
 80107e8:	9b02      	ldr	r3, [sp, #8]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	dcae      	bgt.n	801074c <_dtoa_r+0xb24>
 80107ee:	9b06      	ldr	r3, [sp, #24]
 80107f0:	2b02      	cmp	r3, #2
 80107f2:	f73f aea8 	bgt.w	8010546 <_dtoa_r+0x91e>
 80107f6:	e7a9      	b.n	801074c <_dtoa_r+0xb24>
 80107f8:	08013154 	.word	0x08013154
 80107fc:	08012f1c 	.word	0x08012f1c
 8010800:	080130d5 	.word	0x080130d5

08010804 <__sflush_r>:
 8010804:	898a      	ldrh	r2, [r1, #12]
 8010806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801080a:	4605      	mov	r5, r0
 801080c:	0710      	lsls	r0, r2, #28
 801080e:	460c      	mov	r4, r1
 8010810:	d458      	bmi.n	80108c4 <__sflush_r+0xc0>
 8010812:	684b      	ldr	r3, [r1, #4]
 8010814:	2b00      	cmp	r3, #0
 8010816:	dc05      	bgt.n	8010824 <__sflush_r+0x20>
 8010818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801081a:	2b00      	cmp	r3, #0
 801081c:	dc02      	bgt.n	8010824 <__sflush_r+0x20>
 801081e:	2000      	movs	r0, #0
 8010820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010826:	2e00      	cmp	r6, #0
 8010828:	d0f9      	beq.n	801081e <__sflush_r+0x1a>
 801082a:	2300      	movs	r3, #0
 801082c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010830:	682f      	ldr	r7, [r5, #0]
 8010832:	602b      	str	r3, [r5, #0]
 8010834:	d032      	beq.n	801089c <__sflush_r+0x98>
 8010836:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010838:	89a3      	ldrh	r3, [r4, #12]
 801083a:	075a      	lsls	r2, r3, #29
 801083c:	d505      	bpl.n	801084a <__sflush_r+0x46>
 801083e:	6863      	ldr	r3, [r4, #4]
 8010840:	1ac0      	subs	r0, r0, r3
 8010842:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010844:	b10b      	cbz	r3, 801084a <__sflush_r+0x46>
 8010846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010848:	1ac0      	subs	r0, r0, r3
 801084a:	2300      	movs	r3, #0
 801084c:	4602      	mov	r2, r0
 801084e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010850:	6a21      	ldr	r1, [r4, #32]
 8010852:	4628      	mov	r0, r5
 8010854:	47b0      	blx	r6
 8010856:	1c43      	adds	r3, r0, #1
 8010858:	89a3      	ldrh	r3, [r4, #12]
 801085a:	d106      	bne.n	801086a <__sflush_r+0x66>
 801085c:	6829      	ldr	r1, [r5, #0]
 801085e:	291d      	cmp	r1, #29
 8010860:	d82c      	bhi.n	80108bc <__sflush_r+0xb8>
 8010862:	4a2a      	ldr	r2, [pc, #168]	; (801090c <__sflush_r+0x108>)
 8010864:	40ca      	lsrs	r2, r1
 8010866:	07d6      	lsls	r6, r2, #31
 8010868:	d528      	bpl.n	80108bc <__sflush_r+0xb8>
 801086a:	2200      	movs	r2, #0
 801086c:	6062      	str	r2, [r4, #4]
 801086e:	04d9      	lsls	r1, r3, #19
 8010870:	6922      	ldr	r2, [r4, #16]
 8010872:	6022      	str	r2, [r4, #0]
 8010874:	d504      	bpl.n	8010880 <__sflush_r+0x7c>
 8010876:	1c42      	adds	r2, r0, #1
 8010878:	d101      	bne.n	801087e <__sflush_r+0x7a>
 801087a:	682b      	ldr	r3, [r5, #0]
 801087c:	b903      	cbnz	r3, 8010880 <__sflush_r+0x7c>
 801087e:	6560      	str	r0, [r4, #84]	; 0x54
 8010880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010882:	602f      	str	r7, [r5, #0]
 8010884:	2900      	cmp	r1, #0
 8010886:	d0ca      	beq.n	801081e <__sflush_r+0x1a>
 8010888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801088c:	4299      	cmp	r1, r3
 801088e:	d002      	beq.n	8010896 <__sflush_r+0x92>
 8010890:	4628      	mov	r0, r5
 8010892:	f001 fa4d 	bl	8011d30 <_free_r>
 8010896:	2000      	movs	r0, #0
 8010898:	6360      	str	r0, [r4, #52]	; 0x34
 801089a:	e7c1      	b.n	8010820 <__sflush_r+0x1c>
 801089c:	6a21      	ldr	r1, [r4, #32]
 801089e:	2301      	movs	r3, #1
 80108a0:	4628      	mov	r0, r5
 80108a2:	47b0      	blx	r6
 80108a4:	1c41      	adds	r1, r0, #1
 80108a6:	d1c7      	bne.n	8010838 <__sflush_r+0x34>
 80108a8:	682b      	ldr	r3, [r5, #0]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d0c4      	beq.n	8010838 <__sflush_r+0x34>
 80108ae:	2b1d      	cmp	r3, #29
 80108b0:	d001      	beq.n	80108b6 <__sflush_r+0xb2>
 80108b2:	2b16      	cmp	r3, #22
 80108b4:	d101      	bne.n	80108ba <__sflush_r+0xb6>
 80108b6:	602f      	str	r7, [r5, #0]
 80108b8:	e7b1      	b.n	801081e <__sflush_r+0x1a>
 80108ba:	89a3      	ldrh	r3, [r4, #12]
 80108bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108c0:	81a3      	strh	r3, [r4, #12]
 80108c2:	e7ad      	b.n	8010820 <__sflush_r+0x1c>
 80108c4:	690f      	ldr	r7, [r1, #16]
 80108c6:	2f00      	cmp	r7, #0
 80108c8:	d0a9      	beq.n	801081e <__sflush_r+0x1a>
 80108ca:	0793      	lsls	r3, r2, #30
 80108cc:	680e      	ldr	r6, [r1, #0]
 80108ce:	bf08      	it	eq
 80108d0:	694b      	ldreq	r3, [r1, #20]
 80108d2:	600f      	str	r7, [r1, #0]
 80108d4:	bf18      	it	ne
 80108d6:	2300      	movne	r3, #0
 80108d8:	eba6 0807 	sub.w	r8, r6, r7
 80108dc:	608b      	str	r3, [r1, #8]
 80108de:	f1b8 0f00 	cmp.w	r8, #0
 80108e2:	dd9c      	ble.n	801081e <__sflush_r+0x1a>
 80108e4:	6a21      	ldr	r1, [r4, #32]
 80108e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80108e8:	4643      	mov	r3, r8
 80108ea:	463a      	mov	r2, r7
 80108ec:	4628      	mov	r0, r5
 80108ee:	47b0      	blx	r6
 80108f0:	2800      	cmp	r0, #0
 80108f2:	dc06      	bgt.n	8010902 <__sflush_r+0xfe>
 80108f4:	89a3      	ldrh	r3, [r4, #12]
 80108f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108fa:	81a3      	strh	r3, [r4, #12]
 80108fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010900:	e78e      	b.n	8010820 <__sflush_r+0x1c>
 8010902:	4407      	add	r7, r0
 8010904:	eba8 0800 	sub.w	r8, r8, r0
 8010908:	e7e9      	b.n	80108de <__sflush_r+0xda>
 801090a:	bf00      	nop
 801090c:	20400001 	.word	0x20400001

08010910 <_fflush_r>:
 8010910:	b538      	push	{r3, r4, r5, lr}
 8010912:	690b      	ldr	r3, [r1, #16]
 8010914:	4605      	mov	r5, r0
 8010916:	460c      	mov	r4, r1
 8010918:	b913      	cbnz	r3, 8010920 <_fflush_r+0x10>
 801091a:	2500      	movs	r5, #0
 801091c:	4628      	mov	r0, r5
 801091e:	bd38      	pop	{r3, r4, r5, pc}
 8010920:	b118      	cbz	r0, 801092a <_fflush_r+0x1a>
 8010922:	6983      	ldr	r3, [r0, #24]
 8010924:	b90b      	cbnz	r3, 801092a <_fflush_r+0x1a>
 8010926:	f000 f887 	bl	8010a38 <__sinit>
 801092a:	4b14      	ldr	r3, [pc, #80]	; (801097c <_fflush_r+0x6c>)
 801092c:	429c      	cmp	r4, r3
 801092e:	d11b      	bne.n	8010968 <_fflush_r+0x58>
 8010930:	686c      	ldr	r4, [r5, #4]
 8010932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d0ef      	beq.n	801091a <_fflush_r+0xa>
 801093a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801093c:	07d0      	lsls	r0, r2, #31
 801093e:	d404      	bmi.n	801094a <_fflush_r+0x3a>
 8010940:	0599      	lsls	r1, r3, #22
 8010942:	d402      	bmi.n	801094a <_fflush_r+0x3a>
 8010944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010946:	f000 fc9a 	bl	801127e <__retarget_lock_acquire_recursive>
 801094a:	4628      	mov	r0, r5
 801094c:	4621      	mov	r1, r4
 801094e:	f7ff ff59 	bl	8010804 <__sflush_r>
 8010952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010954:	07da      	lsls	r2, r3, #31
 8010956:	4605      	mov	r5, r0
 8010958:	d4e0      	bmi.n	801091c <_fflush_r+0xc>
 801095a:	89a3      	ldrh	r3, [r4, #12]
 801095c:	059b      	lsls	r3, r3, #22
 801095e:	d4dd      	bmi.n	801091c <_fflush_r+0xc>
 8010960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010962:	f000 fc8d 	bl	8011280 <__retarget_lock_release_recursive>
 8010966:	e7d9      	b.n	801091c <_fflush_r+0xc>
 8010968:	4b05      	ldr	r3, [pc, #20]	; (8010980 <_fflush_r+0x70>)
 801096a:	429c      	cmp	r4, r3
 801096c:	d101      	bne.n	8010972 <_fflush_r+0x62>
 801096e:	68ac      	ldr	r4, [r5, #8]
 8010970:	e7df      	b.n	8010932 <_fflush_r+0x22>
 8010972:	4b04      	ldr	r3, [pc, #16]	; (8010984 <_fflush_r+0x74>)
 8010974:	429c      	cmp	r4, r3
 8010976:	bf08      	it	eq
 8010978:	68ec      	ldreq	r4, [r5, #12]
 801097a:	e7da      	b.n	8010932 <_fflush_r+0x22>
 801097c:	08013188 	.word	0x08013188
 8010980:	080131a8 	.word	0x080131a8
 8010984:	08013168 	.word	0x08013168

08010988 <std>:
 8010988:	2300      	movs	r3, #0
 801098a:	b510      	push	{r4, lr}
 801098c:	4604      	mov	r4, r0
 801098e:	e9c0 3300 	strd	r3, r3, [r0]
 8010992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010996:	6083      	str	r3, [r0, #8]
 8010998:	8181      	strh	r1, [r0, #12]
 801099a:	6643      	str	r3, [r0, #100]	; 0x64
 801099c:	81c2      	strh	r2, [r0, #14]
 801099e:	6183      	str	r3, [r0, #24]
 80109a0:	4619      	mov	r1, r3
 80109a2:	2208      	movs	r2, #8
 80109a4:	305c      	adds	r0, #92	; 0x5c
 80109a6:	f7fd fa6f 	bl	800de88 <memset>
 80109aa:	4b05      	ldr	r3, [pc, #20]	; (80109c0 <std+0x38>)
 80109ac:	6263      	str	r3, [r4, #36]	; 0x24
 80109ae:	4b05      	ldr	r3, [pc, #20]	; (80109c4 <std+0x3c>)
 80109b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80109b2:	4b05      	ldr	r3, [pc, #20]	; (80109c8 <std+0x40>)
 80109b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80109b6:	4b05      	ldr	r3, [pc, #20]	; (80109cc <std+0x44>)
 80109b8:	6224      	str	r4, [r4, #32]
 80109ba:	6323      	str	r3, [r4, #48]	; 0x30
 80109bc:	bd10      	pop	{r4, pc}
 80109be:	bf00      	nop
 80109c0:	08012491 	.word	0x08012491
 80109c4:	080124b3 	.word	0x080124b3
 80109c8:	080124eb 	.word	0x080124eb
 80109cc:	0801250f 	.word	0x0801250f

080109d0 <_cleanup_r>:
 80109d0:	4901      	ldr	r1, [pc, #4]	; (80109d8 <_cleanup_r+0x8>)
 80109d2:	f000 b8c1 	b.w	8010b58 <_fwalk_reent>
 80109d6:	bf00      	nop
 80109d8:	08010911 	.word	0x08010911

080109dc <__sfmoreglue>:
 80109dc:	b570      	push	{r4, r5, r6, lr}
 80109de:	2268      	movs	r2, #104	; 0x68
 80109e0:	1e4d      	subs	r5, r1, #1
 80109e2:	4355      	muls	r5, r2
 80109e4:	460e      	mov	r6, r1
 80109e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80109ea:	f001 fa0d 	bl	8011e08 <_malloc_r>
 80109ee:	4604      	mov	r4, r0
 80109f0:	b140      	cbz	r0, 8010a04 <__sfmoreglue+0x28>
 80109f2:	2100      	movs	r1, #0
 80109f4:	e9c0 1600 	strd	r1, r6, [r0]
 80109f8:	300c      	adds	r0, #12
 80109fa:	60a0      	str	r0, [r4, #8]
 80109fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010a00:	f7fd fa42 	bl	800de88 <memset>
 8010a04:	4620      	mov	r0, r4
 8010a06:	bd70      	pop	{r4, r5, r6, pc}

08010a08 <__sfp_lock_acquire>:
 8010a08:	4801      	ldr	r0, [pc, #4]	; (8010a10 <__sfp_lock_acquire+0x8>)
 8010a0a:	f000 bc38 	b.w	801127e <__retarget_lock_acquire_recursive>
 8010a0e:	bf00      	nop
 8010a10:	200014e9 	.word	0x200014e9

08010a14 <__sfp_lock_release>:
 8010a14:	4801      	ldr	r0, [pc, #4]	; (8010a1c <__sfp_lock_release+0x8>)
 8010a16:	f000 bc33 	b.w	8011280 <__retarget_lock_release_recursive>
 8010a1a:	bf00      	nop
 8010a1c:	200014e9 	.word	0x200014e9

08010a20 <__sinit_lock_acquire>:
 8010a20:	4801      	ldr	r0, [pc, #4]	; (8010a28 <__sinit_lock_acquire+0x8>)
 8010a22:	f000 bc2c 	b.w	801127e <__retarget_lock_acquire_recursive>
 8010a26:	bf00      	nop
 8010a28:	200014ea 	.word	0x200014ea

08010a2c <__sinit_lock_release>:
 8010a2c:	4801      	ldr	r0, [pc, #4]	; (8010a34 <__sinit_lock_release+0x8>)
 8010a2e:	f000 bc27 	b.w	8011280 <__retarget_lock_release_recursive>
 8010a32:	bf00      	nop
 8010a34:	200014ea 	.word	0x200014ea

08010a38 <__sinit>:
 8010a38:	b510      	push	{r4, lr}
 8010a3a:	4604      	mov	r4, r0
 8010a3c:	f7ff fff0 	bl	8010a20 <__sinit_lock_acquire>
 8010a40:	69a3      	ldr	r3, [r4, #24]
 8010a42:	b11b      	cbz	r3, 8010a4c <__sinit+0x14>
 8010a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a48:	f7ff bff0 	b.w	8010a2c <__sinit_lock_release>
 8010a4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010a50:	6523      	str	r3, [r4, #80]	; 0x50
 8010a52:	4b13      	ldr	r3, [pc, #76]	; (8010aa0 <__sinit+0x68>)
 8010a54:	4a13      	ldr	r2, [pc, #76]	; (8010aa4 <__sinit+0x6c>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	62a2      	str	r2, [r4, #40]	; 0x28
 8010a5a:	42a3      	cmp	r3, r4
 8010a5c:	bf04      	itt	eq
 8010a5e:	2301      	moveq	r3, #1
 8010a60:	61a3      	streq	r3, [r4, #24]
 8010a62:	4620      	mov	r0, r4
 8010a64:	f000 f820 	bl	8010aa8 <__sfp>
 8010a68:	6060      	str	r0, [r4, #4]
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	f000 f81c 	bl	8010aa8 <__sfp>
 8010a70:	60a0      	str	r0, [r4, #8]
 8010a72:	4620      	mov	r0, r4
 8010a74:	f000 f818 	bl	8010aa8 <__sfp>
 8010a78:	2200      	movs	r2, #0
 8010a7a:	60e0      	str	r0, [r4, #12]
 8010a7c:	2104      	movs	r1, #4
 8010a7e:	6860      	ldr	r0, [r4, #4]
 8010a80:	f7ff ff82 	bl	8010988 <std>
 8010a84:	68a0      	ldr	r0, [r4, #8]
 8010a86:	2201      	movs	r2, #1
 8010a88:	2109      	movs	r1, #9
 8010a8a:	f7ff ff7d 	bl	8010988 <std>
 8010a8e:	68e0      	ldr	r0, [r4, #12]
 8010a90:	2202      	movs	r2, #2
 8010a92:	2112      	movs	r1, #18
 8010a94:	f7ff ff78 	bl	8010988 <std>
 8010a98:	2301      	movs	r3, #1
 8010a9a:	61a3      	str	r3, [r4, #24]
 8010a9c:	e7d2      	b.n	8010a44 <__sinit+0xc>
 8010a9e:	bf00      	nop
 8010aa0:	08012f08 	.word	0x08012f08
 8010aa4:	080109d1 	.word	0x080109d1

08010aa8 <__sfp>:
 8010aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aaa:	4607      	mov	r7, r0
 8010aac:	f7ff ffac 	bl	8010a08 <__sfp_lock_acquire>
 8010ab0:	4b1e      	ldr	r3, [pc, #120]	; (8010b2c <__sfp+0x84>)
 8010ab2:	681e      	ldr	r6, [r3, #0]
 8010ab4:	69b3      	ldr	r3, [r6, #24]
 8010ab6:	b913      	cbnz	r3, 8010abe <__sfp+0x16>
 8010ab8:	4630      	mov	r0, r6
 8010aba:	f7ff ffbd 	bl	8010a38 <__sinit>
 8010abe:	3648      	adds	r6, #72	; 0x48
 8010ac0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010ac4:	3b01      	subs	r3, #1
 8010ac6:	d503      	bpl.n	8010ad0 <__sfp+0x28>
 8010ac8:	6833      	ldr	r3, [r6, #0]
 8010aca:	b30b      	cbz	r3, 8010b10 <__sfp+0x68>
 8010acc:	6836      	ldr	r6, [r6, #0]
 8010ace:	e7f7      	b.n	8010ac0 <__sfp+0x18>
 8010ad0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010ad4:	b9d5      	cbnz	r5, 8010b0c <__sfp+0x64>
 8010ad6:	4b16      	ldr	r3, [pc, #88]	; (8010b30 <__sfp+0x88>)
 8010ad8:	60e3      	str	r3, [r4, #12]
 8010ada:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010ade:	6665      	str	r5, [r4, #100]	; 0x64
 8010ae0:	f000 fbcc 	bl	801127c <__retarget_lock_init_recursive>
 8010ae4:	f7ff ff96 	bl	8010a14 <__sfp_lock_release>
 8010ae8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010aec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010af0:	6025      	str	r5, [r4, #0]
 8010af2:	61a5      	str	r5, [r4, #24]
 8010af4:	2208      	movs	r2, #8
 8010af6:	4629      	mov	r1, r5
 8010af8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010afc:	f7fd f9c4 	bl	800de88 <memset>
 8010b00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010b04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010b08:	4620      	mov	r0, r4
 8010b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b0c:	3468      	adds	r4, #104	; 0x68
 8010b0e:	e7d9      	b.n	8010ac4 <__sfp+0x1c>
 8010b10:	2104      	movs	r1, #4
 8010b12:	4638      	mov	r0, r7
 8010b14:	f7ff ff62 	bl	80109dc <__sfmoreglue>
 8010b18:	4604      	mov	r4, r0
 8010b1a:	6030      	str	r0, [r6, #0]
 8010b1c:	2800      	cmp	r0, #0
 8010b1e:	d1d5      	bne.n	8010acc <__sfp+0x24>
 8010b20:	f7ff ff78 	bl	8010a14 <__sfp_lock_release>
 8010b24:	230c      	movs	r3, #12
 8010b26:	603b      	str	r3, [r7, #0]
 8010b28:	e7ee      	b.n	8010b08 <__sfp+0x60>
 8010b2a:	bf00      	nop
 8010b2c:	08012f08 	.word	0x08012f08
 8010b30:	ffff0001 	.word	0xffff0001

08010b34 <fiprintf>:
 8010b34:	b40e      	push	{r1, r2, r3}
 8010b36:	b503      	push	{r0, r1, lr}
 8010b38:	4601      	mov	r1, r0
 8010b3a:	ab03      	add	r3, sp, #12
 8010b3c:	4805      	ldr	r0, [pc, #20]	; (8010b54 <fiprintf+0x20>)
 8010b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b42:	6800      	ldr	r0, [r0, #0]
 8010b44:	9301      	str	r3, [sp, #4]
 8010b46:	f001 fb59 	bl	80121fc <_vfiprintf_r>
 8010b4a:	b002      	add	sp, #8
 8010b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b50:	b003      	add	sp, #12
 8010b52:	4770      	bx	lr
 8010b54:	20000024 	.word	0x20000024

08010b58 <_fwalk_reent>:
 8010b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b5c:	4606      	mov	r6, r0
 8010b5e:	4688      	mov	r8, r1
 8010b60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010b64:	2700      	movs	r7, #0
 8010b66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b6a:	f1b9 0901 	subs.w	r9, r9, #1
 8010b6e:	d505      	bpl.n	8010b7c <_fwalk_reent+0x24>
 8010b70:	6824      	ldr	r4, [r4, #0]
 8010b72:	2c00      	cmp	r4, #0
 8010b74:	d1f7      	bne.n	8010b66 <_fwalk_reent+0xe>
 8010b76:	4638      	mov	r0, r7
 8010b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b7c:	89ab      	ldrh	r3, [r5, #12]
 8010b7e:	2b01      	cmp	r3, #1
 8010b80:	d907      	bls.n	8010b92 <_fwalk_reent+0x3a>
 8010b82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b86:	3301      	adds	r3, #1
 8010b88:	d003      	beq.n	8010b92 <_fwalk_reent+0x3a>
 8010b8a:	4629      	mov	r1, r5
 8010b8c:	4630      	mov	r0, r6
 8010b8e:	47c0      	blx	r8
 8010b90:	4307      	orrs	r7, r0
 8010b92:	3568      	adds	r5, #104	; 0x68
 8010b94:	e7e9      	b.n	8010b6a <_fwalk_reent+0x12>

08010b96 <rshift>:
 8010b96:	6903      	ldr	r3, [r0, #16]
 8010b98:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ba0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010ba4:	f100 0414 	add.w	r4, r0, #20
 8010ba8:	dd45      	ble.n	8010c36 <rshift+0xa0>
 8010baa:	f011 011f 	ands.w	r1, r1, #31
 8010bae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010bb2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010bb6:	d10c      	bne.n	8010bd2 <rshift+0x3c>
 8010bb8:	f100 0710 	add.w	r7, r0, #16
 8010bbc:	4629      	mov	r1, r5
 8010bbe:	42b1      	cmp	r1, r6
 8010bc0:	d334      	bcc.n	8010c2c <rshift+0x96>
 8010bc2:	1a9b      	subs	r3, r3, r2
 8010bc4:	009b      	lsls	r3, r3, #2
 8010bc6:	1eea      	subs	r2, r5, #3
 8010bc8:	4296      	cmp	r6, r2
 8010bca:	bf38      	it	cc
 8010bcc:	2300      	movcc	r3, #0
 8010bce:	4423      	add	r3, r4
 8010bd0:	e015      	b.n	8010bfe <rshift+0x68>
 8010bd2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010bd6:	f1c1 0820 	rsb	r8, r1, #32
 8010bda:	40cf      	lsrs	r7, r1
 8010bdc:	f105 0e04 	add.w	lr, r5, #4
 8010be0:	46a1      	mov	r9, r4
 8010be2:	4576      	cmp	r6, lr
 8010be4:	46f4      	mov	ip, lr
 8010be6:	d815      	bhi.n	8010c14 <rshift+0x7e>
 8010be8:	1a9a      	subs	r2, r3, r2
 8010bea:	0092      	lsls	r2, r2, #2
 8010bec:	3a04      	subs	r2, #4
 8010bee:	3501      	adds	r5, #1
 8010bf0:	42ae      	cmp	r6, r5
 8010bf2:	bf38      	it	cc
 8010bf4:	2200      	movcc	r2, #0
 8010bf6:	18a3      	adds	r3, r4, r2
 8010bf8:	50a7      	str	r7, [r4, r2]
 8010bfa:	b107      	cbz	r7, 8010bfe <rshift+0x68>
 8010bfc:	3304      	adds	r3, #4
 8010bfe:	1b1a      	subs	r2, r3, r4
 8010c00:	42a3      	cmp	r3, r4
 8010c02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010c06:	bf08      	it	eq
 8010c08:	2300      	moveq	r3, #0
 8010c0a:	6102      	str	r2, [r0, #16]
 8010c0c:	bf08      	it	eq
 8010c0e:	6143      	streq	r3, [r0, #20]
 8010c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c14:	f8dc c000 	ldr.w	ip, [ip]
 8010c18:	fa0c fc08 	lsl.w	ip, ip, r8
 8010c1c:	ea4c 0707 	orr.w	r7, ip, r7
 8010c20:	f849 7b04 	str.w	r7, [r9], #4
 8010c24:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010c28:	40cf      	lsrs	r7, r1
 8010c2a:	e7da      	b.n	8010be2 <rshift+0x4c>
 8010c2c:	f851 cb04 	ldr.w	ip, [r1], #4
 8010c30:	f847 cf04 	str.w	ip, [r7, #4]!
 8010c34:	e7c3      	b.n	8010bbe <rshift+0x28>
 8010c36:	4623      	mov	r3, r4
 8010c38:	e7e1      	b.n	8010bfe <rshift+0x68>

08010c3a <__hexdig_fun>:
 8010c3a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010c3e:	2b09      	cmp	r3, #9
 8010c40:	d802      	bhi.n	8010c48 <__hexdig_fun+0xe>
 8010c42:	3820      	subs	r0, #32
 8010c44:	b2c0      	uxtb	r0, r0
 8010c46:	4770      	bx	lr
 8010c48:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010c4c:	2b05      	cmp	r3, #5
 8010c4e:	d801      	bhi.n	8010c54 <__hexdig_fun+0x1a>
 8010c50:	3847      	subs	r0, #71	; 0x47
 8010c52:	e7f7      	b.n	8010c44 <__hexdig_fun+0xa>
 8010c54:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010c58:	2b05      	cmp	r3, #5
 8010c5a:	d801      	bhi.n	8010c60 <__hexdig_fun+0x26>
 8010c5c:	3827      	subs	r0, #39	; 0x27
 8010c5e:	e7f1      	b.n	8010c44 <__hexdig_fun+0xa>
 8010c60:	2000      	movs	r0, #0
 8010c62:	4770      	bx	lr

08010c64 <__gethex>:
 8010c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c68:	ed2d 8b02 	vpush	{d8}
 8010c6c:	b089      	sub	sp, #36	; 0x24
 8010c6e:	ee08 0a10 	vmov	s16, r0
 8010c72:	9304      	str	r3, [sp, #16]
 8010c74:	4bb4      	ldr	r3, [pc, #720]	; (8010f48 <__gethex+0x2e4>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	9301      	str	r3, [sp, #4]
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	468b      	mov	fp, r1
 8010c7e:	4690      	mov	r8, r2
 8010c80:	f7ef fab0 	bl	80001e4 <strlen>
 8010c84:	9b01      	ldr	r3, [sp, #4]
 8010c86:	f8db 2000 	ldr.w	r2, [fp]
 8010c8a:	4403      	add	r3, r0
 8010c8c:	4682      	mov	sl, r0
 8010c8e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010c92:	9305      	str	r3, [sp, #20]
 8010c94:	1c93      	adds	r3, r2, #2
 8010c96:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010c9a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010c9e:	32fe      	adds	r2, #254	; 0xfe
 8010ca0:	18d1      	adds	r1, r2, r3
 8010ca2:	461f      	mov	r7, r3
 8010ca4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010ca8:	9100      	str	r1, [sp, #0]
 8010caa:	2830      	cmp	r0, #48	; 0x30
 8010cac:	d0f8      	beq.n	8010ca0 <__gethex+0x3c>
 8010cae:	f7ff ffc4 	bl	8010c3a <__hexdig_fun>
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	d13a      	bne.n	8010d2e <__gethex+0xca>
 8010cb8:	9901      	ldr	r1, [sp, #4]
 8010cba:	4652      	mov	r2, sl
 8010cbc:	4638      	mov	r0, r7
 8010cbe:	f001 fc2a 	bl	8012516 <strncmp>
 8010cc2:	4605      	mov	r5, r0
 8010cc4:	2800      	cmp	r0, #0
 8010cc6:	d168      	bne.n	8010d9a <__gethex+0x136>
 8010cc8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010ccc:	eb07 060a 	add.w	r6, r7, sl
 8010cd0:	f7ff ffb3 	bl	8010c3a <__hexdig_fun>
 8010cd4:	2800      	cmp	r0, #0
 8010cd6:	d062      	beq.n	8010d9e <__gethex+0x13a>
 8010cd8:	4633      	mov	r3, r6
 8010cda:	7818      	ldrb	r0, [r3, #0]
 8010cdc:	2830      	cmp	r0, #48	; 0x30
 8010cde:	461f      	mov	r7, r3
 8010ce0:	f103 0301 	add.w	r3, r3, #1
 8010ce4:	d0f9      	beq.n	8010cda <__gethex+0x76>
 8010ce6:	f7ff ffa8 	bl	8010c3a <__hexdig_fun>
 8010cea:	2301      	movs	r3, #1
 8010cec:	fab0 f480 	clz	r4, r0
 8010cf0:	0964      	lsrs	r4, r4, #5
 8010cf2:	4635      	mov	r5, r6
 8010cf4:	9300      	str	r3, [sp, #0]
 8010cf6:	463a      	mov	r2, r7
 8010cf8:	4616      	mov	r6, r2
 8010cfa:	3201      	adds	r2, #1
 8010cfc:	7830      	ldrb	r0, [r6, #0]
 8010cfe:	f7ff ff9c 	bl	8010c3a <__hexdig_fun>
 8010d02:	2800      	cmp	r0, #0
 8010d04:	d1f8      	bne.n	8010cf8 <__gethex+0x94>
 8010d06:	9901      	ldr	r1, [sp, #4]
 8010d08:	4652      	mov	r2, sl
 8010d0a:	4630      	mov	r0, r6
 8010d0c:	f001 fc03 	bl	8012516 <strncmp>
 8010d10:	b980      	cbnz	r0, 8010d34 <__gethex+0xd0>
 8010d12:	b94d      	cbnz	r5, 8010d28 <__gethex+0xc4>
 8010d14:	eb06 050a 	add.w	r5, r6, sl
 8010d18:	462a      	mov	r2, r5
 8010d1a:	4616      	mov	r6, r2
 8010d1c:	3201      	adds	r2, #1
 8010d1e:	7830      	ldrb	r0, [r6, #0]
 8010d20:	f7ff ff8b 	bl	8010c3a <__hexdig_fun>
 8010d24:	2800      	cmp	r0, #0
 8010d26:	d1f8      	bne.n	8010d1a <__gethex+0xb6>
 8010d28:	1bad      	subs	r5, r5, r6
 8010d2a:	00ad      	lsls	r5, r5, #2
 8010d2c:	e004      	b.n	8010d38 <__gethex+0xd4>
 8010d2e:	2400      	movs	r4, #0
 8010d30:	4625      	mov	r5, r4
 8010d32:	e7e0      	b.n	8010cf6 <__gethex+0x92>
 8010d34:	2d00      	cmp	r5, #0
 8010d36:	d1f7      	bne.n	8010d28 <__gethex+0xc4>
 8010d38:	7833      	ldrb	r3, [r6, #0]
 8010d3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010d3e:	2b50      	cmp	r3, #80	; 0x50
 8010d40:	d13b      	bne.n	8010dba <__gethex+0x156>
 8010d42:	7873      	ldrb	r3, [r6, #1]
 8010d44:	2b2b      	cmp	r3, #43	; 0x2b
 8010d46:	d02c      	beq.n	8010da2 <__gethex+0x13e>
 8010d48:	2b2d      	cmp	r3, #45	; 0x2d
 8010d4a:	d02e      	beq.n	8010daa <__gethex+0x146>
 8010d4c:	1c71      	adds	r1, r6, #1
 8010d4e:	f04f 0900 	mov.w	r9, #0
 8010d52:	7808      	ldrb	r0, [r1, #0]
 8010d54:	f7ff ff71 	bl	8010c3a <__hexdig_fun>
 8010d58:	1e43      	subs	r3, r0, #1
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	2b18      	cmp	r3, #24
 8010d5e:	d82c      	bhi.n	8010dba <__gethex+0x156>
 8010d60:	f1a0 0210 	sub.w	r2, r0, #16
 8010d64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010d68:	f7ff ff67 	bl	8010c3a <__hexdig_fun>
 8010d6c:	1e43      	subs	r3, r0, #1
 8010d6e:	b2db      	uxtb	r3, r3
 8010d70:	2b18      	cmp	r3, #24
 8010d72:	d91d      	bls.n	8010db0 <__gethex+0x14c>
 8010d74:	f1b9 0f00 	cmp.w	r9, #0
 8010d78:	d000      	beq.n	8010d7c <__gethex+0x118>
 8010d7a:	4252      	negs	r2, r2
 8010d7c:	4415      	add	r5, r2
 8010d7e:	f8cb 1000 	str.w	r1, [fp]
 8010d82:	b1e4      	cbz	r4, 8010dbe <__gethex+0x15a>
 8010d84:	9b00      	ldr	r3, [sp, #0]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	bf14      	ite	ne
 8010d8a:	2700      	movne	r7, #0
 8010d8c:	2706      	moveq	r7, #6
 8010d8e:	4638      	mov	r0, r7
 8010d90:	b009      	add	sp, #36	; 0x24
 8010d92:	ecbd 8b02 	vpop	{d8}
 8010d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d9a:	463e      	mov	r6, r7
 8010d9c:	4625      	mov	r5, r4
 8010d9e:	2401      	movs	r4, #1
 8010da0:	e7ca      	b.n	8010d38 <__gethex+0xd4>
 8010da2:	f04f 0900 	mov.w	r9, #0
 8010da6:	1cb1      	adds	r1, r6, #2
 8010da8:	e7d3      	b.n	8010d52 <__gethex+0xee>
 8010daa:	f04f 0901 	mov.w	r9, #1
 8010dae:	e7fa      	b.n	8010da6 <__gethex+0x142>
 8010db0:	230a      	movs	r3, #10
 8010db2:	fb03 0202 	mla	r2, r3, r2, r0
 8010db6:	3a10      	subs	r2, #16
 8010db8:	e7d4      	b.n	8010d64 <__gethex+0x100>
 8010dba:	4631      	mov	r1, r6
 8010dbc:	e7df      	b.n	8010d7e <__gethex+0x11a>
 8010dbe:	1bf3      	subs	r3, r6, r7
 8010dc0:	3b01      	subs	r3, #1
 8010dc2:	4621      	mov	r1, r4
 8010dc4:	2b07      	cmp	r3, #7
 8010dc6:	dc0b      	bgt.n	8010de0 <__gethex+0x17c>
 8010dc8:	ee18 0a10 	vmov	r0, s16
 8010dcc:	f000 fad8 	bl	8011380 <_Balloc>
 8010dd0:	4604      	mov	r4, r0
 8010dd2:	b940      	cbnz	r0, 8010de6 <__gethex+0x182>
 8010dd4:	4b5d      	ldr	r3, [pc, #372]	; (8010f4c <__gethex+0x2e8>)
 8010dd6:	4602      	mov	r2, r0
 8010dd8:	21de      	movs	r1, #222	; 0xde
 8010dda:	485d      	ldr	r0, [pc, #372]	; (8010f50 <__gethex+0x2ec>)
 8010ddc:	f7fe fe78 	bl	800fad0 <__assert_func>
 8010de0:	3101      	adds	r1, #1
 8010de2:	105b      	asrs	r3, r3, #1
 8010de4:	e7ee      	b.n	8010dc4 <__gethex+0x160>
 8010de6:	f100 0914 	add.w	r9, r0, #20
 8010dea:	f04f 0b00 	mov.w	fp, #0
 8010dee:	f1ca 0301 	rsb	r3, sl, #1
 8010df2:	f8cd 9008 	str.w	r9, [sp, #8]
 8010df6:	f8cd b000 	str.w	fp, [sp]
 8010dfa:	9306      	str	r3, [sp, #24]
 8010dfc:	42b7      	cmp	r7, r6
 8010dfe:	d340      	bcc.n	8010e82 <__gethex+0x21e>
 8010e00:	9802      	ldr	r0, [sp, #8]
 8010e02:	9b00      	ldr	r3, [sp, #0]
 8010e04:	f840 3b04 	str.w	r3, [r0], #4
 8010e08:	eba0 0009 	sub.w	r0, r0, r9
 8010e0c:	1080      	asrs	r0, r0, #2
 8010e0e:	0146      	lsls	r6, r0, #5
 8010e10:	6120      	str	r0, [r4, #16]
 8010e12:	4618      	mov	r0, r3
 8010e14:	f000 fba6 	bl	8011564 <__hi0bits>
 8010e18:	1a30      	subs	r0, r6, r0
 8010e1a:	f8d8 6000 	ldr.w	r6, [r8]
 8010e1e:	42b0      	cmp	r0, r6
 8010e20:	dd63      	ble.n	8010eea <__gethex+0x286>
 8010e22:	1b87      	subs	r7, r0, r6
 8010e24:	4639      	mov	r1, r7
 8010e26:	4620      	mov	r0, r4
 8010e28:	f000 ff4a 	bl	8011cc0 <__any_on>
 8010e2c:	4682      	mov	sl, r0
 8010e2e:	b1a8      	cbz	r0, 8010e5c <__gethex+0x1f8>
 8010e30:	1e7b      	subs	r3, r7, #1
 8010e32:	1159      	asrs	r1, r3, #5
 8010e34:	f003 021f 	and.w	r2, r3, #31
 8010e38:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010e3c:	f04f 0a01 	mov.w	sl, #1
 8010e40:	fa0a f202 	lsl.w	r2, sl, r2
 8010e44:	420a      	tst	r2, r1
 8010e46:	d009      	beq.n	8010e5c <__gethex+0x1f8>
 8010e48:	4553      	cmp	r3, sl
 8010e4a:	dd05      	ble.n	8010e58 <__gethex+0x1f4>
 8010e4c:	1eb9      	subs	r1, r7, #2
 8010e4e:	4620      	mov	r0, r4
 8010e50:	f000 ff36 	bl	8011cc0 <__any_on>
 8010e54:	2800      	cmp	r0, #0
 8010e56:	d145      	bne.n	8010ee4 <__gethex+0x280>
 8010e58:	f04f 0a02 	mov.w	sl, #2
 8010e5c:	4639      	mov	r1, r7
 8010e5e:	4620      	mov	r0, r4
 8010e60:	f7ff fe99 	bl	8010b96 <rshift>
 8010e64:	443d      	add	r5, r7
 8010e66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010e6a:	42ab      	cmp	r3, r5
 8010e6c:	da4c      	bge.n	8010f08 <__gethex+0x2a4>
 8010e6e:	ee18 0a10 	vmov	r0, s16
 8010e72:	4621      	mov	r1, r4
 8010e74:	f000 fac4 	bl	8011400 <_Bfree>
 8010e78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	6013      	str	r3, [r2, #0]
 8010e7e:	27a3      	movs	r7, #163	; 0xa3
 8010e80:	e785      	b.n	8010d8e <__gethex+0x12a>
 8010e82:	1e73      	subs	r3, r6, #1
 8010e84:	9a05      	ldr	r2, [sp, #20]
 8010e86:	9303      	str	r3, [sp, #12]
 8010e88:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010e8c:	4293      	cmp	r3, r2
 8010e8e:	d019      	beq.n	8010ec4 <__gethex+0x260>
 8010e90:	f1bb 0f20 	cmp.w	fp, #32
 8010e94:	d107      	bne.n	8010ea6 <__gethex+0x242>
 8010e96:	9b02      	ldr	r3, [sp, #8]
 8010e98:	9a00      	ldr	r2, [sp, #0]
 8010e9a:	f843 2b04 	str.w	r2, [r3], #4
 8010e9e:	9302      	str	r3, [sp, #8]
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	9300      	str	r3, [sp, #0]
 8010ea4:	469b      	mov	fp, r3
 8010ea6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010eaa:	f7ff fec6 	bl	8010c3a <__hexdig_fun>
 8010eae:	9b00      	ldr	r3, [sp, #0]
 8010eb0:	f000 000f 	and.w	r0, r0, #15
 8010eb4:	fa00 f00b 	lsl.w	r0, r0, fp
 8010eb8:	4303      	orrs	r3, r0
 8010eba:	9300      	str	r3, [sp, #0]
 8010ebc:	f10b 0b04 	add.w	fp, fp, #4
 8010ec0:	9b03      	ldr	r3, [sp, #12]
 8010ec2:	e00d      	b.n	8010ee0 <__gethex+0x27c>
 8010ec4:	9b03      	ldr	r3, [sp, #12]
 8010ec6:	9a06      	ldr	r2, [sp, #24]
 8010ec8:	4413      	add	r3, r2
 8010eca:	42bb      	cmp	r3, r7
 8010ecc:	d3e0      	bcc.n	8010e90 <__gethex+0x22c>
 8010ece:	4618      	mov	r0, r3
 8010ed0:	9901      	ldr	r1, [sp, #4]
 8010ed2:	9307      	str	r3, [sp, #28]
 8010ed4:	4652      	mov	r2, sl
 8010ed6:	f001 fb1e 	bl	8012516 <strncmp>
 8010eda:	9b07      	ldr	r3, [sp, #28]
 8010edc:	2800      	cmp	r0, #0
 8010ede:	d1d7      	bne.n	8010e90 <__gethex+0x22c>
 8010ee0:	461e      	mov	r6, r3
 8010ee2:	e78b      	b.n	8010dfc <__gethex+0x198>
 8010ee4:	f04f 0a03 	mov.w	sl, #3
 8010ee8:	e7b8      	b.n	8010e5c <__gethex+0x1f8>
 8010eea:	da0a      	bge.n	8010f02 <__gethex+0x29e>
 8010eec:	1a37      	subs	r7, r6, r0
 8010eee:	4621      	mov	r1, r4
 8010ef0:	ee18 0a10 	vmov	r0, s16
 8010ef4:	463a      	mov	r2, r7
 8010ef6:	f000 fc9f 	bl	8011838 <__lshift>
 8010efa:	1bed      	subs	r5, r5, r7
 8010efc:	4604      	mov	r4, r0
 8010efe:	f100 0914 	add.w	r9, r0, #20
 8010f02:	f04f 0a00 	mov.w	sl, #0
 8010f06:	e7ae      	b.n	8010e66 <__gethex+0x202>
 8010f08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010f0c:	42a8      	cmp	r0, r5
 8010f0e:	dd72      	ble.n	8010ff6 <__gethex+0x392>
 8010f10:	1b45      	subs	r5, r0, r5
 8010f12:	42ae      	cmp	r6, r5
 8010f14:	dc36      	bgt.n	8010f84 <__gethex+0x320>
 8010f16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010f1a:	2b02      	cmp	r3, #2
 8010f1c:	d02a      	beq.n	8010f74 <__gethex+0x310>
 8010f1e:	2b03      	cmp	r3, #3
 8010f20:	d02c      	beq.n	8010f7c <__gethex+0x318>
 8010f22:	2b01      	cmp	r3, #1
 8010f24:	d11c      	bne.n	8010f60 <__gethex+0x2fc>
 8010f26:	42ae      	cmp	r6, r5
 8010f28:	d11a      	bne.n	8010f60 <__gethex+0x2fc>
 8010f2a:	2e01      	cmp	r6, #1
 8010f2c:	d112      	bne.n	8010f54 <__gethex+0x2f0>
 8010f2e:	9a04      	ldr	r2, [sp, #16]
 8010f30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010f34:	6013      	str	r3, [r2, #0]
 8010f36:	2301      	movs	r3, #1
 8010f38:	6123      	str	r3, [r4, #16]
 8010f3a:	f8c9 3000 	str.w	r3, [r9]
 8010f3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010f40:	2762      	movs	r7, #98	; 0x62
 8010f42:	601c      	str	r4, [r3, #0]
 8010f44:	e723      	b.n	8010d8e <__gethex+0x12a>
 8010f46:	bf00      	nop
 8010f48:	08013230 	.word	0x08013230
 8010f4c:	08013154 	.word	0x08013154
 8010f50:	080131c8 	.word	0x080131c8
 8010f54:	1e71      	subs	r1, r6, #1
 8010f56:	4620      	mov	r0, r4
 8010f58:	f000 feb2 	bl	8011cc0 <__any_on>
 8010f5c:	2800      	cmp	r0, #0
 8010f5e:	d1e6      	bne.n	8010f2e <__gethex+0x2ca>
 8010f60:	ee18 0a10 	vmov	r0, s16
 8010f64:	4621      	mov	r1, r4
 8010f66:	f000 fa4b 	bl	8011400 <_Bfree>
 8010f6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	6013      	str	r3, [r2, #0]
 8010f70:	2750      	movs	r7, #80	; 0x50
 8010f72:	e70c      	b.n	8010d8e <__gethex+0x12a>
 8010f74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d1f2      	bne.n	8010f60 <__gethex+0x2fc>
 8010f7a:	e7d8      	b.n	8010f2e <__gethex+0x2ca>
 8010f7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d1d5      	bne.n	8010f2e <__gethex+0x2ca>
 8010f82:	e7ed      	b.n	8010f60 <__gethex+0x2fc>
 8010f84:	1e6f      	subs	r7, r5, #1
 8010f86:	f1ba 0f00 	cmp.w	sl, #0
 8010f8a:	d131      	bne.n	8010ff0 <__gethex+0x38c>
 8010f8c:	b127      	cbz	r7, 8010f98 <__gethex+0x334>
 8010f8e:	4639      	mov	r1, r7
 8010f90:	4620      	mov	r0, r4
 8010f92:	f000 fe95 	bl	8011cc0 <__any_on>
 8010f96:	4682      	mov	sl, r0
 8010f98:	117b      	asrs	r3, r7, #5
 8010f9a:	2101      	movs	r1, #1
 8010f9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010fa0:	f007 071f 	and.w	r7, r7, #31
 8010fa4:	fa01 f707 	lsl.w	r7, r1, r7
 8010fa8:	421f      	tst	r7, r3
 8010faa:	4629      	mov	r1, r5
 8010fac:	4620      	mov	r0, r4
 8010fae:	bf18      	it	ne
 8010fb0:	f04a 0a02 	orrne.w	sl, sl, #2
 8010fb4:	1b76      	subs	r6, r6, r5
 8010fb6:	f7ff fdee 	bl	8010b96 <rshift>
 8010fba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010fbe:	2702      	movs	r7, #2
 8010fc0:	f1ba 0f00 	cmp.w	sl, #0
 8010fc4:	d048      	beq.n	8011058 <__gethex+0x3f4>
 8010fc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010fca:	2b02      	cmp	r3, #2
 8010fcc:	d015      	beq.n	8010ffa <__gethex+0x396>
 8010fce:	2b03      	cmp	r3, #3
 8010fd0:	d017      	beq.n	8011002 <__gethex+0x39e>
 8010fd2:	2b01      	cmp	r3, #1
 8010fd4:	d109      	bne.n	8010fea <__gethex+0x386>
 8010fd6:	f01a 0f02 	tst.w	sl, #2
 8010fda:	d006      	beq.n	8010fea <__gethex+0x386>
 8010fdc:	f8d9 0000 	ldr.w	r0, [r9]
 8010fe0:	ea4a 0a00 	orr.w	sl, sl, r0
 8010fe4:	f01a 0f01 	tst.w	sl, #1
 8010fe8:	d10e      	bne.n	8011008 <__gethex+0x3a4>
 8010fea:	f047 0710 	orr.w	r7, r7, #16
 8010fee:	e033      	b.n	8011058 <__gethex+0x3f4>
 8010ff0:	f04f 0a01 	mov.w	sl, #1
 8010ff4:	e7d0      	b.n	8010f98 <__gethex+0x334>
 8010ff6:	2701      	movs	r7, #1
 8010ff8:	e7e2      	b.n	8010fc0 <__gethex+0x35c>
 8010ffa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ffc:	f1c3 0301 	rsb	r3, r3, #1
 8011000:	9315      	str	r3, [sp, #84]	; 0x54
 8011002:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011004:	2b00      	cmp	r3, #0
 8011006:	d0f0      	beq.n	8010fea <__gethex+0x386>
 8011008:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801100c:	f104 0314 	add.w	r3, r4, #20
 8011010:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011014:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011018:	f04f 0c00 	mov.w	ip, #0
 801101c:	4618      	mov	r0, r3
 801101e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011022:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011026:	d01c      	beq.n	8011062 <__gethex+0x3fe>
 8011028:	3201      	adds	r2, #1
 801102a:	6002      	str	r2, [r0, #0]
 801102c:	2f02      	cmp	r7, #2
 801102e:	f104 0314 	add.w	r3, r4, #20
 8011032:	d13f      	bne.n	80110b4 <__gethex+0x450>
 8011034:	f8d8 2000 	ldr.w	r2, [r8]
 8011038:	3a01      	subs	r2, #1
 801103a:	42b2      	cmp	r2, r6
 801103c:	d10a      	bne.n	8011054 <__gethex+0x3f0>
 801103e:	1171      	asrs	r1, r6, #5
 8011040:	2201      	movs	r2, #1
 8011042:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011046:	f006 061f 	and.w	r6, r6, #31
 801104a:	fa02 f606 	lsl.w	r6, r2, r6
 801104e:	421e      	tst	r6, r3
 8011050:	bf18      	it	ne
 8011052:	4617      	movne	r7, r2
 8011054:	f047 0720 	orr.w	r7, r7, #32
 8011058:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801105a:	601c      	str	r4, [r3, #0]
 801105c:	9b04      	ldr	r3, [sp, #16]
 801105e:	601d      	str	r5, [r3, #0]
 8011060:	e695      	b.n	8010d8e <__gethex+0x12a>
 8011062:	4299      	cmp	r1, r3
 8011064:	f843 cc04 	str.w	ip, [r3, #-4]
 8011068:	d8d8      	bhi.n	801101c <__gethex+0x3b8>
 801106a:	68a3      	ldr	r3, [r4, #8]
 801106c:	459b      	cmp	fp, r3
 801106e:	db19      	blt.n	80110a4 <__gethex+0x440>
 8011070:	6861      	ldr	r1, [r4, #4]
 8011072:	ee18 0a10 	vmov	r0, s16
 8011076:	3101      	adds	r1, #1
 8011078:	f000 f982 	bl	8011380 <_Balloc>
 801107c:	4681      	mov	r9, r0
 801107e:	b918      	cbnz	r0, 8011088 <__gethex+0x424>
 8011080:	4b1a      	ldr	r3, [pc, #104]	; (80110ec <__gethex+0x488>)
 8011082:	4602      	mov	r2, r0
 8011084:	2184      	movs	r1, #132	; 0x84
 8011086:	e6a8      	b.n	8010dda <__gethex+0x176>
 8011088:	6922      	ldr	r2, [r4, #16]
 801108a:	3202      	adds	r2, #2
 801108c:	f104 010c 	add.w	r1, r4, #12
 8011090:	0092      	lsls	r2, r2, #2
 8011092:	300c      	adds	r0, #12
 8011094:	f7fc feea 	bl	800de6c <memcpy>
 8011098:	4621      	mov	r1, r4
 801109a:	ee18 0a10 	vmov	r0, s16
 801109e:	f000 f9af 	bl	8011400 <_Bfree>
 80110a2:	464c      	mov	r4, r9
 80110a4:	6923      	ldr	r3, [r4, #16]
 80110a6:	1c5a      	adds	r2, r3, #1
 80110a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80110ac:	6122      	str	r2, [r4, #16]
 80110ae:	2201      	movs	r2, #1
 80110b0:	615a      	str	r2, [r3, #20]
 80110b2:	e7bb      	b.n	801102c <__gethex+0x3c8>
 80110b4:	6922      	ldr	r2, [r4, #16]
 80110b6:	455a      	cmp	r2, fp
 80110b8:	dd0b      	ble.n	80110d2 <__gethex+0x46e>
 80110ba:	2101      	movs	r1, #1
 80110bc:	4620      	mov	r0, r4
 80110be:	f7ff fd6a 	bl	8010b96 <rshift>
 80110c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80110c6:	3501      	adds	r5, #1
 80110c8:	42ab      	cmp	r3, r5
 80110ca:	f6ff aed0 	blt.w	8010e6e <__gethex+0x20a>
 80110ce:	2701      	movs	r7, #1
 80110d0:	e7c0      	b.n	8011054 <__gethex+0x3f0>
 80110d2:	f016 061f 	ands.w	r6, r6, #31
 80110d6:	d0fa      	beq.n	80110ce <__gethex+0x46a>
 80110d8:	4453      	add	r3, sl
 80110da:	f1c6 0620 	rsb	r6, r6, #32
 80110de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80110e2:	f000 fa3f 	bl	8011564 <__hi0bits>
 80110e6:	42b0      	cmp	r0, r6
 80110e8:	dbe7      	blt.n	80110ba <__gethex+0x456>
 80110ea:	e7f0      	b.n	80110ce <__gethex+0x46a>
 80110ec:	08013154 	.word	0x08013154

080110f0 <L_shift>:
 80110f0:	f1c2 0208 	rsb	r2, r2, #8
 80110f4:	0092      	lsls	r2, r2, #2
 80110f6:	b570      	push	{r4, r5, r6, lr}
 80110f8:	f1c2 0620 	rsb	r6, r2, #32
 80110fc:	6843      	ldr	r3, [r0, #4]
 80110fe:	6804      	ldr	r4, [r0, #0]
 8011100:	fa03 f506 	lsl.w	r5, r3, r6
 8011104:	432c      	orrs	r4, r5
 8011106:	40d3      	lsrs	r3, r2
 8011108:	6004      	str	r4, [r0, #0]
 801110a:	f840 3f04 	str.w	r3, [r0, #4]!
 801110e:	4288      	cmp	r0, r1
 8011110:	d3f4      	bcc.n	80110fc <L_shift+0xc>
 8011112:	bd70      	pop	{r4, r5, r6, pc}

08011114 <__match>:
 8011114:	b530      	push	{r4, r5, lr}
 8011116:	6803      	ldr	r3, [r0, #0]
 8011118:	3301      	adds	r3, #1
 801111a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801111e:	b914      	cbnz	r4, 8011126 <__match+0x12>
 8011120:	6003      	str	r3, [r0, #0]
 8011122:	2001      	movs	r0, #1
 8011124:	bd30      	pop	{r4, r5, pc}
 8011126:	f813 2b01 	ldrb.w	r2, [r3], #1
 801112a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801112e:	2d19      	cmp	r5, #25
 8011130:	bf98      	it	ls
 8011132:	3220      	addls	r2, #32
 8011134:	42a2      	cmp	r2, r4
 8011136:	d0f0      	beq.n	801111a <__match+0x6>
 8011138:	2000      	movs	r0, #0
 801113a:	e7f3      	b.n	8011124 <__match+0x10>

0801113c <__hexnan>:
 801113c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011140:	680b      	ldr	r3, [r1, #0]
 8011142:	115e      	asrs	r6, r3, #5
 8011144:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011148:	f013 031f 	ands.w	r3, r3, #31
 801114c:	b087      	sub	sp, #28
 801114e:	bf18      	it	ne
 8011150:	3604      	addne	r6, #4
 8011152:	2500      	movs	r5, #0
 8011154:	1f37      	subs	r7, r6, #4
 8011156:	4690      	mov	r8, r2
 8011158:	6802      	ldr	r2, [r0, #0]
 801115a:	9301      	str	r3, [sp, #4]
 801115c:	4682      	mov	sl, r0
 801115e:	f846 5c04 	str.w	r5, [r6, #-4]
 8011162:	46b9      	mov	r9, r7
 8011164:	463c      	mov	r4, r7
 8011166:	9502      	str	r5, [sp, #8]
 8011168:	46ab      	mov	fp, r5
 801116a:	7851      	ldrb	r1, [r2, #1]
 801116c:	1c53      	adds	r3, r2, #1
 801116e:	9303      	str	r3, [sp, #12]
 8011170:	b341      	cbz	r1, 80111c4 <__hexnan+0x88>
 8011172:	4608      	mov	r0, r1
 8011174:	9205      	str	r2, [sp, #20]
 8011176:	9104      	str	r1, [sp, #16]
 8011178:	f7ff fd5f 	bl	8010c3a <__hexdig_fun>
 801117c:	2800      	cmp	r0, #0
 801117e:	d14f      	bne.n	8011220 <__hexnan+0xe4>
 8011180:	9904      	ldr	r1, [sp, #16]
 8011182:	9a05      	ldr	r2, [sp, #20]
 8011184:	2920      	cmp	r1, #32
 8011186:	d818      	bhi.n	80111ba <__hexnan+0x7e>
 8011188:	9b02      	ldr	r3, [sp, #8]
 801118a:	459b      	cmp	fp, r3
 801118c:	dd13      	ble.n	80111b6 <__hexnan+0x7a>
 801118e:	454c      	cmp	r4, r9
 8011190:	d206      	bcs.n	80111a0 <__hexnan+0x64>
 8011192:	2d07      	cmp	r5, #7
 8011194:	dc04      	bgt.n	80111a0 <__hexnan+0x64>
 8011196:	462a      	mov	r2, r5
 8011198:	4649      	mov	r1, r9
 801119a:	4620      	mov	r0, r4
 801119c:	f7ff ffa8 	bl	80110f0 <L_shift>
 80111a0:	4544      	cmp	r4, r8
 80111a2:	d950      	bls.n	8011246 <__hexnan+0x10a>
 80111a4:	2300      	movs	r3, #0
 80111a6:	f1a4 0904 	sub.w	r9, r4, #4
 80111aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80111ae:	f8cd b008 	str.w	fp, [sp, #8]
 80111b2:	464c      	mov	r4, r9
 80111b4:	461d      	mov	r5, r3
 80111b6:	9a03      	ldr	r2, [sp, #12]
 80111b8:	e7d7      	b.n	801116a <__hexnan+0x2e>
 80111ba:	2929      	cmp	r1, #41	; 0x29
 80111bc:	d156      	bne.n	801126c <__hexnan+0x130>
 80111be:	3202      	adds	r2, #2
 80111c0:	f8ca 2000 	str.w	r2, [sl]
 80111c4:	f1bb 0f00 	cmp.w	fp, #0
 80111c8:	d050      	beq.n	801126c <__hexnan+0x130>
 80111ca:	454c      	cmp	r4, r9
 80111cc:	d206      	bcs.n	80111dc <__hexnan+0xa0>
 80111ce:	2d07      	cmp	r5, #7
 80111d0:	dc04      	bgt.n	80111dc <__hexnan+0xa0>
 80111d2:	462a      	mov	r2, r5
 80111d4:	4649      	mov	r1, r9
 80111d6:	4620      	mov	r0, r4
 80111d8:	f7ff ff8a 	bl	80110f0 <L_shift>
 80111dc:	4544      	cmp	r4, r8
 80111de:	d934      	bls.n	801124a <__hexnan+0x10e>
 80111e0:	f1a8 0204 	sub.w	r2, r8, #4
 80111e4:	4623      	mov	r3, r4
 80111e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80111ea:	f842 1f04 	str.w	r1, [r2, #4]!
 80111ee:	429f      	cmp	r7, r3
 80111f0:	d2f9      	bcs.n	80111e6 <__hexnan+0xaa>
 80111f2:	1b3b      	subs	r3, r7, r4
 80111f4:	f023 0303 	bic.w	r3, r3, #3
 80111f8:	3304      	adds	r3, #4
 80111fa:	3401      	adds	r4, #1
 80111fc:	3e03      	subs	r6, #3
 80111fe:	42b4      	cmp	r4, r6
 8011200:	bf88      	it	hi
 8011202:	2304      	movhi	r3, #4
 8011204:	4443      	add	r3, r8
 8011206:	2200      	movs	r2, #0
 8011208:	f843 2b04 	str.w	r2, [r3], #4
 801120c:	429f      	cmp	r7, r3
 801120e:	d2fb      	bcs.n	8011208 <__hexnan+0xcc>
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	b91b      	cbnz	r3, 801121c <__hexnan+0xe0>
 8011214:	4547      	cmp	r7, r8
 8011216:	d127      	bne.n	8011268 <__hexnan+0x12c>
 8011218:	2301      	movs	r3, #1
 801121a:	603b      	str	r3, [r7, #0]
 801121c:	2005      	movs	r0, #5
 801121e:	e026      	b.n	801126e <__hexnan+0x132>
 8011220:	3501      	adds	r5, #1
 8011222:	2d08      	cmp	r5, #8
 8011224:	f10b 0b01 	add.w	fp, fp, #1
 8011228:	dd06      	ble.n	8011238 <__hexnan+0xfc>
 801122a:	4544      	cmp	r4, r8
 801122c:	d9c3      	bls.n	80111b6 <__hexnan+0x7a>
 801122e:	2300      	movs	r3, #0
 8011230:	f844 3c04 	str.w	r3, [r4, #-4]
 8011234:	2501      	movs	r5, #1
 8011236:	3c04      	subs	r4, #4
 8011238:	6822      	ldr	r2, [r4, #0]
 801123a:	f000 000f 	and.w	r0, r0, #15
 801123e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011242:	6022      	str	r2, [r4, #0]
 8011244:	e7b7      	b.n	80111b6 <__hexnan+0x7a>
 8011246:	2508      	movs	r5, #8
 8011248:	e7b5      	b.n	80111b6 <__hexnan+0x7a>
 801124a:	9b01      	ldr	r3, [sp, #4]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d0df      	beq.n	8011210 <__hexnan+0xd4>
 8011250:	f04f 32ff 	mov.w	r2, #4294967295
 8011254:	f1c3 0320 	rsb	r3, r3, #32
 8011258:	fa22 f303 	lsr.w	r3, r2, r3
 801125c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011260:	401a      	ands	r2, r3
 8011262:	f846 2c04 	str.w	r2, [r6, #-4]
 8011266:	e7d3      	b.n	8011210 <__hexnan+0xd4>
 8011268:	3f04      	subs	r7, #4
 801126a:	e7d1      	b.n	8011210 <__hexnan+0xd4>
 801126c:	2004      	movs	r0, #4
 801126e:	b007      	add	sp, #28
 8011270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011274 <_localeconv_r>:
 8011274:	4800      	ldr	r0, [pc, #0]	; (8011278 <_localeconv_r+0x4>)
 8011276:	4770      	bx	lr
 8011278:	2000017c 	.word	0x2000017c

0801127c <__retarget_lock_init_recursive>:
 801127c:	4770      	bx	lr

0801127e <__retarget_lock_acquire_recursive>:
 801127e:	4770      	bx	lr

08011280 <__retarget_lock_release_recursive>:
 8011280:	4770      	bx	lr

08011282 <__swhatbuf_r>:
 8011282:	b570      	push	{r4, r5, r6, lr}
 8011284:	460e      	mov	r6, r1
 8011286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801128a:	2900      	cmp	r1, #0
 801128c:	b096      	sub	sp, #88	; 0x58
 801128e:	4614      	mov	r4, r2
 8011290:	461d      	mov	r5, r3
 8011292:	da08      	bge.n	80112a6 <__swhatbuf_r+0x24>
 8011294:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011298:	2200      	movs	r2, #0
 801129a:	602a      	str	r2, [r5, #0]
 801129c:	061a      	lsls	r2, r3, #24
 801129e:	d410      	bmi.n	80112c2 <__swhatbuf_r+0x40>
 80112a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112a4:	e00e      	b.n	80112c4 <__swhatbuf_r+0x42>
 80112a6:	466a      	mov	r2, sp
 80112a8:	f001 f980 	bl	80125ac <_fstat_r>
 80112ac:	2800      	cmp	r0, #0
 80112ae:	dbf1      	blt.n	8011294 <__swhatbuf_r+0x12>
 80112b0:	9a01      	ldr	r2, [sp, #4]
 80112b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80112b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80112ba:	425a      	negs	r2, r3
 80112bc:	415a      	adcs	r2, r3
 80112be:	602a      	str	r2, [r5, #0]
 80112c0:	e7ee      	b.n	80112a0 <__swhatbuf_r+0x1e>
 80112c2:	2340      	movs	r3, #64	; 0x40
 80112c4:	2000      	movs	r0, #0
 80112c6:	6023      	str	r3, [r4, #0]
 80112c8:	b016      	add	sp, #88	; 0x58
 80112ca:	bd70      	pop	{r4, r5, r6, pc}

080112cc <__smakebuf_r>:
 80112cc:	898b      	ldrh	r3, [r1, #12]
 80112ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80112d0:	079d      	lsls	r5, r3, #30
 80112d2:	4606      	mov	r6, r0
 80112d4:	460c      	mov	r4, r1
 80112d6:	d507      	bpl.n	80112e8 <__smakebuf_r+0x1c>
 80112d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80112dc:	6023      	str	r3, [r4, #0]
 80112de:	6123      	str	r3, [r4, #16]
 80112e0:	2301      	movs	r3, #1
 80112e2:	6163      	str	r3, [r4, #20]
 80112e4:	b002      	add	sp, #8
 80112e6:	bd70      	pop	{r4, r5, r6, pc}
 80112e8:	ab01      	add	r3, sp, #4
 80112ea:	466a      	mov	r2, sp
 80112ec:	f7ff ffc9 	bl	8011282 <__swhatbuf_r>
 80112f0:	9900      	ldr	r1, [sp, #0]
 80112f2:	4605      	mov	r5, r0
 80112f4:	4630      	mov	r0, r6
 80112f6:	f000 fd87 	bl	8011e08 <_malloc_r>
 80112fa:	b948      	cbnz	r0, 8011310 <__smakebuf_r+0x44>
 80112fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011300:	059a      	lsls	r2, r3, #22
 8011302:	d4ef      	bmi.n	80112e4 <__smakebuf_r+0x18>
 8011304:	f023 0303 	bic.w	r3, r3, #3
 8011308:	f043 0302 	orr.w	r3, r3, #2
 801130c:	81a3      	strh	r3, [r4, #12]
 801130e:	e7e3      	b.n	80112d8 <__smakebuf_r+0xc>
 8011310:	4b0d      	ldr	r3, [pc, #52]	; (8011348 <__smakebuf_r+0x7c>)
 8011312:	62b3      	str	r3, [r6, #40]	; 0x28
 8011314:	89a3      	ldrh	r3, [r4, #12]
 8011316:	6020      	str	r0, [r4, #0]
 8011318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801131c:	81a3      	strh	r3, [r4, #12]
 801131e:	9b00      	ldr	r3, [sp, #0]
 8011320:	6163      	str	r3, [r4, #20]
 8011322:	9b01      	ldr	r3, [sp, #4]
 8011324:	6120      	str	r0, [r4, #16]
 8011326:	b15b      	cbz	r3, 8011340 <__smakebuf_r+0x74>
 8011328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801132c:	4630      	mov	r0, r6
 801132e:	f001 f94f 	bl	80125d0 <_isatty_r>
 8011332:	b128      	cbz	r0, 8011340 <__smakebuf_r+0x74>
 8011334:	89a3      	ldrh	r3, [r4, #12]
 8011336:	f023 0303 	bic.w	r3, r3, #3
 801133a:	f043 0301 	orr.w	r3, r3, #1
 801133e:	81a3      	strh	r3, [r4, #12]
 8011340:	89a0      	ldrh	r0, [r4, #12]
 8011342:	4305      	orrs	r5, r0
 8011344:	81a5      	strh	r5, [r4, #12]
 8011346:	e7cd      	b.n	80112e4 <__smakebuf_r+0x18>
 8011348:	080109d1 	.word	0x080109d1

0801134c <malloc>:
 801134c:	4b02      	ldr	r3, [pc, #8]	; (8011358 <malloc+0xc>)
 801134e:	4601      	mov	r1, r0
 8011350:	6818      	ldr	r0, [r3, #0]
 8011352:	f000 bd59 	b.w	8011e08 <_malloc_r>
 8011356:	bf00      	nop
 8011358:	20000024 	.word	0x20000024

0801135c <__ascii_mbtowc>:
 801135c:	b082      	sub	sp, #8
 801135e:	b901      	cbnz	r1, 8011362 <__ascii_mbtowc+0x6>
 8011360:	a901      	add	r1, sp, #4
 8011362:	b142      	cbz	r2, 8011376 <__ascii_mbtowc+0x1a>
 8011364:	b14b      	cbz	r3, 801137a <__ascii_mbtowc+0x1e>
 8011366:	7813      	ldrb	r3, [r2, #0]
 8011368:	600b      	str	r3, [r1, #0]
 801136a:	7812      	ldrb	r2, [r2, #0]
 801136c:	1e10      	subs	r0, r2, #0
 801136e:	bf18      	it	ne
 8011370:	2001      	movne	r0, #1
 8011372:	b002      	add	sp, #8
 8011374:	4770      	bx	lr
 8011376:	4610      	mov	r0, r2
 8011378:	e7fb      	b.n	8011372 <__ascii_mbtowc+0x16>
 801137a:	f06f 0001 	mvn.w	r0, #1
 801137e:	e7f8      	b.n	8011372 <__ascii_mbtowc+0x16>

08011380 <_Balloc>:
 8011380:	b570      	push	{r4, r5, r6, lr}
 8011382:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011384:	4604      	mov	r4, r0
 8011386:	460d      	mov	r5, r1
 8011388:	b976      	cbnz	r6, 80113a8 <_Balloc+0x28>
 801138a:	2010      	movs	r0, #16
 801138c:	f7ff ffde 	bl	801134c <malloc>
 8011390:	4602      	mov	r2, r0
 8011392:	6260      	str	r0, [r4, #36]	; 0x24
 8011394:	b920      	cbnz	r0, 80113a0 <_Balloc+0x20>
 8011396:	4b18      	ldr	r3, [pc, #96]	; (80113f8 <_Balloc+0x78>)
 8011398:	4818      	ldr	r0, [pc, #96]	; (80113fc <_Balloc+0x7c>)
 801139a:	2166      	movs	r1, #102	; 0x66
 801139c:	f7fe fb98 	bl	800fad0 <__assert_func>
 80113a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113a4:	6006      	str	r6, [r0, #0]
 80113a6:	60c6      	str	r6, [r0, #12]
 80113a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80113aa:	68f3      	ldr	r3, [r6, #12]
 80113ac:	b183      	cbz	r3, 80113d0 <_Balloc+0x50>
 80113ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113b0:	68db      	ldr	r3, [r3, #12]
 80113b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80113b6:	b9b8      	cbnz	r0, 80113e8 <_Balloc+0x68>
 80113b8:	2101      	movs	r1, #1
 80113ba:	fa01 f605 	lsl.w	r6, r1, r5
 80113be:	1d72      	adds	r2, r6, #5
 80113c0:	0092      	lsls	r2, r2, #2
 80113c2:	4620      	mov	r0, r4
 80113c4:	f000 fc9d 	bl	8011d02 <_calloc_r>
 80113c8:	b160      	cbz	r0, 80113e4 <_Balloc+0x64>
 80113ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80113ce:	e00e      	b.n	80113ee <_Balloc+0x6e>
 80113d0:	2221      	movs	r2, #33	; 0x21
 80113d2:	2104      	movs	r1, #4
 80113d4:	4620      	mov	r0, r4
 80113d6:	f000 fc94 	bl	8011d02 <_calloc_r>
 80113da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113dc:	60f0      	str	r0, [r6, #12]
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d1e4      	bne.n	80113ae <_Balloc+0x2e>
 80113e4:	2000      	movs	r0, #0
 80113e6:	bd70      	pop	{r4, r5, r6, pc}
 80113e8:	6802      	ldr	r2, [r0, #0]
 80113ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113ee:	2300      	movs	r3, #0
 80113f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80113f4:	e7f7      	b.n	80113e6 <_Balloc+0x66>
 80113f6:	bf00      	nop
 80113f8:	080130e2 	.word	0x080130e2
 80113fc:	08013244 	.word	0x08013244

08011400 <_Bfree>:
 8011400:	b570      	push	{r4, r5, r6, lr}
 8011402:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011404:	4605      	mov	r5, r0
 8011406:	460c      	mov	r4, r1
 8011408:	b976      	cbnz	r6, 8011428 <_Bfree+0x28>
 801140a:	2010      	movs	r0, #16
 801140c:	f7ff ff9e 	bl	801134c <malloc>
 8011410:	4602      	mov	r2, r0
 8011412:	6268      	str	r0, [r5, #36]	; 0x24
 8011414:	b920      	cbnz	r0, 8011420 <_Bfree+0x20>
 8011416:	4b09      	ldr	r3, [pc, #36]	; (801143c <_Bfree+0x3c>)
 8011418:	4809      	ldr	r0, [pc, #36]	; (8011440 <_Bfree+0x40>)
 801141a:	218a      	movs	r1, #138	; 0x8a
 801141c:	f7fe fb58 	bl	800fad0 <__assert_func>
 8011420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011424:	6006      	str	r6, [r0, #0]
 8011426:	60c6      	str	r6, [r0, #12]
 8011428:	b13c      	cbz	r4, 801143a <_Bfree+0x3a>
 801142a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801142c:	6862      	ldr	r2, [r4, #4]
 801142e:	68db      	ldr	r3, [r3, #12]
 8011430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011434:	6021      	str	r1, [r4, #0]
 8011436:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801143a:	bd70      	pop	{r4, r5, r6, pc}
 801143c:	080130e2 	.word	0x080130e2
 8011440:	08013244 	.word	0x08013244

08011444 <__multadd>:
 8011444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011448:	690d      	ldr	r5, [r1, #16]
 801144a:	4607      	mov	r7, r0
 801144c:	460c      	mov	r4, r1
 801144e:	461e      	mov	r6, r3
 8011450:	f101 0c14 	add.w	ip, r1, #20
 8011454:	2000      	movs	r0, #0
 8011456:	f8dc 3000 	ldr.w	r3, [ip]
 801145a:	b299      	uxth	r1, r3
 801145c:	fb02 6101 	mla	r1, r2, r1, r6
 8011460:	0c1e      	lsrs	r6, r3, #16
 8011462:	0c0b      	lsrs	r3, r1, #16
 8011464:	fb02 3306 	mla	r3, r2, r6, r3
 8011468:	b289      	uxth	r1, r1
 801146a:	3001      	adds	r0, #1
 801146c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011470:	4285      	cmp	r5, r0
 8011472:	f84c 1b04 	str.w	r1, [ip], #4
 8011476:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801147a:	dcec      	bgt.n	8011456 <__multadd+0x12>
 801147c:	b30e      	cbz	r6, 80114c2 <__multadd+0x7e>
 801147e:	68a3      	ldr	r3, [r4, #8]
 8011480:	42ab      	cmp	r3, r5
 8011482:	dc19      	bgt.n	80114b8 <__multadd+0x74>
 8011484:	6861      	ldr	r1, [r4, #4]
 8011486:	4638      	mov	r0, r7
 8011488:	3101      	adds	r1, #1
 801148a:	f7ff ff79 	bl	8011380 <_Balloc>
 801148e:	4680      	mov	r8, r0
 8011490:	b928      	cbnz	r0, 801149e <__multadd+0x5a>
 8011492:	4602      	mov	r2, r0
 8011494:	4b0c      	ldr	r3, [pc, #48]	; (80114c8 <__multadd+0x84>)
 8011496:	480d      	ldr	r0, [pc, #52]	; (80114cc <__multadd+0x88>)
 8011498:	21b5      	movs	r1, #181	; 0xb5
 801149a:	f7fe fb19 	bl	800fad0 <__assert_func>
 801149e:	6922      	ldr	r2, [r4, #16]
 80114a0:	3202      	adds	r2, #2
 80114a2:	f104 010c 	add.w	r1, r4, #12
 80114a6:	0092      	lsls	r2, r2, #2
 80114a8:	300c      	adds	r0, #12
 80114aa:	f7fc fcdf 	bl	800de6c <memcpy>
 80114ae:	4621      	mov	r1, r4
 80114b0:	4638      	mov	r0, r7
 80114b2:	f7ff ffa5 	bl	8011400 <_Bfree>
 80114b6:	4644      	mov	r4, r8
 80114b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80114bc:	3501      	adds	r5, #1
 80114be:	615e      	str	r6, [r3, #20]
 80114c0:	6125      	str	r5, [r4, #16]
 80114c2:	4620      	mov	r0, r4
 80114c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114c8:	08013154 	.word	0x08013154
 80114cc:	08013244 	.word	0x08013244

080114d0 <__s2b>:
 80114d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114d4:	460c      	mov	r4, r1
 80114d6:	4615      	mov	r5, r2
 80114d8:	461f      	mov	r7, r3
 80114da:	2209      	movs	r2, #9
 80114dc:	3308      	adds	r3, #8
 80114de:	4606      	mov	r6, r0
 80114e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80114e4:	2100      	movs	r1, #0
 80114e6:	2201      	movs	r2, #1
 80114e8:	429a      	cmp	r2, r3
 80114ea:	db09      	blt.n	8011500 <__s2b+0x30>
 80114ec:	4630      	mov	r0, r6
 80114ee:	f7ff ff47 	bl	8011380 <_Balloc>
 80114f2:	b940      	cbnz	r0, 8011506 <__s2b+0x36>
 80114f4:	4602      	mov	r2, r0
 80114f6:	4b19      	ldr	r3, [pc, #100]	; (801155c <__s2b+0x8c>)
 80114f8:	4819      	ldr	r0, [pc, #100]	; (8011560 <__s2b+0x90>)
 80114fa:	21ce      	movs	r1, #206	; 0xce
 80114fc:	f7fe fae8 	bl	800fad0 <__assert_func>
 8011500:	0052      	lsls	r2, r2, #1
 8011502:	3101      	adds	r1, #1
 8011504:	e7f0      	b.n	80114e8 <__s2b+0x18>
 8011506:	9b08      	ldr	r3, [sp, #32]
 8011508:	6143      	str	r3, [r0, #20]
 801150a:	2d09      	cmp	r5, #9
 801150c:	f04f 0301 	mov.w	r3, #1
 8011510:	6103      	str	r3, [r0, #16]
 8011512:	dd16      	ble.n	8011542 <__s2b+0x72>
 8011514:	f104 0909 	add.w	r9, r4, #9
 8011518:	46c8      	mov	r8, r9
 801151a:	442c      	add	r4, r5
 801151c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011520:	4601      	mov	r1, r0
 8011522:	3b30      	subs	r3, #48	; 0x30
 8011524:	220a      	movs	r2, #10
 8011526:	4630      	mov	r0, r6
 8011528:	f7ff ff8c 	bl	8011444 <__multadd>
 801152c:	45a0      	cmp	r8, r4
 801152e:	d1f5      	bne.n	801151c <__s2b+0x4c>
 8011530:	f1a5 0408 	sub.w	r4, r5, #8
 8011534:	444c      	add	r4, r9
 8011536:	1b2d      	subs	r5, r5, r4
 8011538:	1963      	adds	r3, r4, r5
 801153a:	42bb      	cmp	r3, r7
 801153c:	db04      	blt.n	8011548 <__s2b+0x78>
 801153e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011542:	340a      	adds	r4, #10
 8011544:	2509      	movs	r5, #9
 8011546:	e7f6      	b.n	8011536 <__s2b+0x66>
 8011548:	f814 3b01 	ldrb.w	r3, [r4], #1
 801154c:	4601      	mov	r1, r0
 801154e:	3b30      	subs	r3, #48	; 0x30
 8011550:	220a      	movs	r2, #10
 8011552:	4630      	mov	r0, r6
 8011554:	f7ff ff76 	bl	8011444 <__multadd>
 8011558:	e7ee      	b.n	8011538 <__s2b+0x68>
 801155a:	bf00      	nop
 801155c:	08013154 	.word	0x08013154
 8011560:	08013244 	.word	0x08013244

08011564 <__hi0bits>:
 8011564:	0c03      	lsrs	r3, r0, #16
 8011566:	041b      	lsls	r3, r3, #16
 8011568:	b9d3      	cbnz	r3, 80115a0 <__hi0bits+0x3c>
 801156a:	0400      	lsls	r0, r0, #16
 801156c:	2310      	movs	r3, #16
 801156e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011572:	bf04      	itt	eq
 8011574:	0200      	lsleq	r0, r0, #8
 8011576:	3308      	addeq	r3, #8
 8011578:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801157c:	bf04      	itt	eq
 801157e:	0100      	lsleq	r0, r0, #4
 8011580:	3304      	addeq	r3, #4
 8011582:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011586:	bf04      	itt	eq
 8011588:	0080      	lsleq	r0, r0, #2
 801158a:	3302      	addeq	r3, #2
 801158c:	2800      	cmp	r0, #0
 801158e:	db05      	blt.n	801159c <__hi0bits+0x38>
 8011590:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011594:	f103 0301 	add.w	r3, r3, #1
 8011598:	bf08      	it	eq
 801159a:	2320      	moveq	r3, #32
 801159c:	4618      	mov	r0, r3
 801159e:	4770      	bx	lr
 80115a0:	2300      	movs	r3, #0
 80115a2:	e7e4      	b.n	801156e <__hi0bits+0xa>

080115a4 <__lo0bits>:
 80115a4:	6803      	ldr	r3, [r0, #0]
 80115a6:	f013 0207 	ands.w	r2, r3, #7
 80115aa:	4601      	mov	r1, r0
 80115ac:	d00b      	beq.n	80115c6 <__lo0bits+0x22>
 80115ae:	07da      	lsls	r2, r3, #31
 80115b0:	d423      	bmi.n	80115fa <__lo0bits+0x56>
 80115b2:	0798      	lsls	r0, r3, #30
 80115b4:	bf49      	itett	mi
 80115b6:	085b      	lsrmi	r3, r3, #1
 80115b8:	089b      	lsrpl	r3, r3, #2
 80115ba:	2001      	movmi	r0, #1
 80115bc:	600b      	strmi	r3, [r1, #0]
 80115be:	bf5c      	itt	pl
 80115c0:	600b      	strpl	r3, [r1, #0]
 80115c2:	2002      	movpl	r0, #2
 80115c4:	4770      	bx	lr
 80115c6:	b298      	uxth	r0, r3
 80115c8:	b9a8      	cbnz	r0, 80115f6 <__lo0bits+0x52>
 80115ca:	0c1b      	lsrs	r3, r3, #16
 80115cc:	2010      	movs	r0, #16
 80115ce:	b2da      	uxtb	r2, r3
 80115d0:	b90a      	cbnz	r2, 80115d6 <__lo0bits+0x32>
 80115d2:	3008      	adds	r0, #8
 80115d4:	0a1b      	lsrs	r3, r3, #8
 80115d6:	071a      	lsls	r2, r3, #28
 80115d8:	bf04      	itt	eq
 80115da:	091b      	lsreq	r3, r3, #4
 80115dc:	3004      	addeq	r0, #4
 80115de:	079a      	lsls	r2, r3, #30
 80115e0:	bf04      	itt	eq
 80115e2:	089b      	lsreq	r3, r3, #2
 80115e4:	3002      	addeq	r0, #2
 80115e6:	07da      	lsls	r2, r3, #31
 80115e8:	d403      	bmi.n	80115f2 <__lo0bits+0x4e>
 80115ea:	085b      	lsrs	r3, r3, #1
 80115ec:	f100 0001 	add.w	r0, r0, #1
 80115f0:	d005      	beq.n	80115fe <__lo0bits+0x5a>
 80115f2:	600b      	str	r3, [r1, #0]
 80115f4:	4770      	bx	lr
 80115f6:	4610      	mov	r0, r2
 80115f8:	e7e9      	b.n	80115ce <__lo0bits+0x2a>
 80115fa:	2000      	movs	r0, #0
 80115fc:	4770      	bx	lr
 80115fe:	2020      	movs	r0, #32
 8011600:	4770      	bx	lr
	...

08011604 <__i2b>:
 8011604:	b510      	push	{r4, lr}
 8011606:	460c      	mov	r4, r1
 8011608:	2101      	movs	r1, #1
 801160a:	f7ff feb9 	bl	8011380 <_Balloc>
 801160e:	4602      	mov	r2, r0
 8011610:	b928      	cbnz	r0, 801161e <__i2b+0x1a>
 8011612:	4b05      	ldr	r3, [pc, #20]	; (8011628 <__i2b+0x24>)
 8011614:	4805      	ldr	r0, [pc, #20]	; (801162c <__i2b+0x28>)
 8011616:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801161a:	f7fe fa59 	bl	800fad0 <__assert_func>
 801161e:	2301      	movs	r3, #1
 8011620:	6144      	str	r4, [r0, #20]
 8011622:	6103      	str	r3, [r0, #16]
 8011624:	bd10      	pop	{r4, pc}
 8011626:	bf00      	nop
 8011628:	08013154 	.word	0x08013154
 801162c:	08013244 	.word	0x08013244

08011630 <__multiply>:
 8011630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011634:	4691      	mov	r9, r2
 8011636:	690a      	ldr	r2, [r1, #16]
 8011638:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801163c:	429a      	cmp	r2, r3
 801163e:	bfb8      	it	lt
 8011640:	460b      	movlt	r3, r1
 8011642:	460c      	mov	r4, r1
 8011644:	bfbc      	itt	lt
 8011646:	464c      	movlt	r4, r9
 8011648:	4699      	movlt	r9, r3
 801164a:	6927      	ldr	r7, [r4, #16]
 801164c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011650:	68a3      	ldr	r3, [r4, #8]
 8011652:	6861      	ldr	r1, [r4, #4]
 8011654:	eb07 060a 	add.w	r6, r7, sl
 8011658:	42b3      	cmp	r3, r6
 801165a:	b085      	sub	sp, #20
 801165c:	bfb8      	it	lt
 801165e:	3101      	addlt	r1, #1
 8011660:	f7ff fe8e 	bl	8011380 <_Balloc>
 8011664:	b930      	cbnz	r0, 8011674 <__multiply+0x44>
 8011666:	4602      	mov	r2, r0
 8011668:	4b44      	ldr	r3, [pc, #272]	; (801177c <__multiply+0x14c>)
 801166a:	4845      	ldr	r0, [pc, #276]	; (8011780 <__multiply+0x150>)
 801166c:	f240 115d 	movw	r1, #349	; 0x15d
 8011670:	f7fe fa2e 	bl	800fad0 <__assert_func>
 8011674:	f100 0514 	add.w	r5, r0, #20
 8011678:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801167c:	462b      	mov	r3, r5
 801167e:	2200      	movs	r2, #0
 8011680:	4543      	cmp	r3, r8
 8011682:	d321      	bcc.n	80116c8 <__multiply+0x98>
 8011684:	f104 0314 	add.w	r3, r4, #20
 8011688:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801168c:	f109 0314 	add.w	r3, r9, #20
 8011690:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011694:	9202      	str	r2, [sp, #8]
 8011696:	1b3a      	subs	r2, r7, r4
 8011698:	3a15      	subs	r2, #21
 801169a:	f022 0203 	bic.w	r2, r2, #3
 801169e:	3204      	adds	r2, #4
 80116a0:	f104 0115 	add.w	r1, r4, #21
 80116a4:	428f      	cmp	r7, r1
 80116a6:	bf38      	it	cc
 80116a8:	2204      	movcc	r2, #4
 80116aa:	9201      	str	r2, [sp, #4]
 80116ac:	9a02      	ldr	r2, [sp, #8]
 80116ae:	9303      	str	r3, [sp, #12]
 80116b0:	429a      	cmp	r2, r3
 80116b2:	d80c      	bhi.n	80116ce <__multiply+0x9e>
 80116b4:	2e00      	cmp	r6, #0
 80116b6:	dd03      	ble.n	80116c0 <__multiply+0x90>
 80116b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d05a      	beq.n	8011776 <__multiply+0x146>
 80116c0:	6106      	str	r6, [r0, #16]
 80116c2:	b005      	add	sp, #20
 80116c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c8:	f843 2b04 	str.w	r2, [r3], #4
 80116cc:	e7d8      	b.n	8011680 <__multiply+0x50>
 80116ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80116d2:	f1ba 0f00 	cmp.w	sl, #0
 80116d6:	d024      	beq.n	8011722 <__multiply+0xf2>
 80116d8:	f104 0e14 	add.w	lr, r4, #20
 80116dc:	46a9      	mov	r9, r5
 80116de:	f04f 0c00 	mov.w	ip, #0
 80116e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80116e6:	f8d9 1000 	ldr.w	r1, [r9]
 80116ea:	fa1f fb82 	uxth.w	fp, r2
 80116ee:	b289      	uxth	r1, r1
 80116f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80116f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80116f8:	f8d9 2000 	ldr.w	r2, [r9]
 80116fc:	4461      	add	r1, ip
 80116fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011702:	fb0a c20b 	mla	r2, sl, fp, ip
 8011706:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801170a:	b289      	uxth	r1, r1
 801170c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011710:	4577      	cmp	r7, lr
 8011712:	f849 1b04 	str.w	r1, [r9], #4
 8011716:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801171a:	d8e2      	bhi.n	80116e2 <__multiply+0xb2>
 801171c:	9a01      	ldr	r2, [sp, #4]
 801171e:	f845 c002 	str.w	ip, [r5, r2]
 8011722:	9a03      	ldr	r2, [sp, #12]
 8011724:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011728:	3304      	adds	r3, #4
 801172a:	f1b9 0f00 	cmp.w	r9, #0
 801172e:	d020      	beq.n	8011772 <__multiply+0x142>
 8011730:	6829      	ldr	r1, [r5, #0]
 8011732:	f104 0c14 	add.w	ip, r4, #20
 8011736:	46ae      	mov	lr, r5
 8011738:	f04f 0a00 	mov.w	sl, #0
 801173c:	f8bc b000 	ldrh.w	fp, [ip]
 8011740:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011744:	fb09 220b 	mla	r2, r9, fp, r2
 8011748:	4492      	add	sl, r2
 801174a:	b289      	uxth	r1, r1
 801174c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011750:	f84e 1b04 	str.w	r1, [lr], #4
 8011754:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011758:	f8be 1000 	ldrh.w	r1, [lr]
 801175c:	0c12      	lsrs	r2, r2, #16
 801175e:	fb09 1102 	mla	r1, r9, r2, r1
 8011762:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011766:	4567      	cmp	r7, ip
 8011768:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801176c:	d8e6      	bhi.n	801173c <__multiply+0x10c>
 801176e:	9a01      	ldr	r2, [sp, #4]
 8011770:	50a9      	str	r1, [r5, r2]
 8011772:	3504      	adds	r5, #4
 8011774:	e79a      	b.n	80116ac <__multiply+0x7c>
 8011776:	3e01      	subs	r6, #1
 8011778:	e79c      	b.n	80116b4 <__multiply+0x84>
 801177a:	bf00      	nop
 801177c:	08013154 	.word	0x08013154
 8011780:	08013244 	.word	0x08013244

08011784 <__pow5mult>:
 8011784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011788:	4615      	mov	r5, r2
 801178a:	f012 0203 	ands.w	r2, r2, #3
 801178e:	4606      	mov	r6, r0
 8011790:	460f      	mov	r7, r1
 8011792:	d007      	beq.n	80117a4 <__pow5mult+0x20>
 8011794:	4c25      	ldr	r4, [pc, #148]	; (801182c <__pow5mult+0xa8>)
 8011796:	3a01      	subs	r2, #1
 8011798:	2300      	movs	r3, #0
 801179a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801179e:	f7ff fe51 	bl	8011444 <__multadd>
 80117a2:	4607      	mov	r7, r0
 80117a4:	10ad      	asrs	r5, r5, #2
 80117a6:	d03d      	beq.n	8011824 <__pow5mult+0xa0>
 80117a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80117aa:	b97c      	cbnz	r4, 80117cc <__pow5mult+0x48>
 80117ac:	2010      	movs	r0, #16
 80117ae:	f7ff fdcd 	bl	801134c <malloc>
 80117b2:	4602      	mov	r2, r0
 80117b4:	6270      	str	r0, [r6, #36]	; 0x24
 80117b6:	b928      	cbnz	r0, 80117c4 <__pow5mult+0x40>
 80117b8:	4b1d      	ldr	r3, [pc, #116]	; (8011830 <__pow5mult+0xac>)
 80117ba:	481e      	ldr	r0, [pc, #120]	; (8011834 <__pow5mult+0xb0>)
 80117bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80117c0:	f7fe f986 	bl	800fad0 <__assert_func>
 80117c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80117c8:	6004      	str	r4, [r0, #0]
 80117ca:	60c4      	str	r4, [r0, #12]
 80117cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80117d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80117d4:	b94c      	cbnz	r4, 80117ea <__pow5mult+0x66>
 80117d6:	f240 2171 	movw	r1, #625	; 0x271
 80117da:	4630      	mov	r0, r6
 80117dc:	f7ff ff12 	bl	8011604 <__i2b>
 80117e0:	2300      	movs	r3, #0
 80117e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80117e6:	4604      	mov	r4, r0
 80117e8:	6003      	str	r3, [r0, #0]
 80117ea:	f04f 0900 	mov.w	r9, #0
 80117ee:	07eb      	lsls	r3, r5, #31
 80117f0:	d50a      	bpl.n	8011808 <__pow5mult+0x84>
 80117f2:	4639      	mov	r1, r7
 80117f4:	4622      	mov	r2, r4
 80117f6:	4630      	mov	r0, r6
 80117f8:	f7ff ff1a 	bl	8011630 <__multiply>
 80117fc:	4639      	mov	r1, r7
 80117fe:	4680      	mov	r8, r0
 8011800:	4630      	mov	r0, r6
 8011802:	f7ff fdfd 	bl	8011400 <_Bfree>
 8011806:	4647      	mov	r7, r8
 8011808:	106d      	asrs	r5, r5, #1
 801180a:	d00b      	beq.n	8011824 <__pow5mult+0xa0>
 801180c:	6820      	ldr	r0, [r4, #0]
 801180e:	b938      	cbnz	r0, 8011820 <__pow5mult+0x9c>
 8011810:	4622      	mov	r2, r4
 8011812:	4621      	mov	r1, r4
 8011814:	4630      	mov	r0, r6
 8011816:	f7ff ff0b 	bl	8011630 <__multiply>
 801181a:	6020      	str	r0, [r4, #0]
 801181c:	f8c0 9000 	str.w	r9, [r0]
 8011820:	4604      	mov	r4, r0
 8011822:	e7e4      	b.n	80117ee <__pow5mult+0x6a>
 8011824:	4638      	mov	r0, r7
 8011826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801182a:	bf00      	nop
 801182c:	08013390 	.word	0x08013390
 8011830:	080130e2 	.word	0x080130e2
 8011834:	08013244 	.word	0x08013244

08011838 <__lshift>:
 8011838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801183c:	460c      	mov	r4, r1
 801183e:	6849      	ldr	r1, [r1, #4]
 8011840:	6923      	ldr	r3, [r4, #16]
 8011842:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011846:	68a3      	ldr	r3, [r4, #8]
 8011848:	4607      	mov	r7, r0
 801184a:	4691      	mov	r9, r2
 801184c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011850:	f108 0601 	add.w	r6, r8, #1
 8011854:	42b3      	cmp	r3, r6
 8011856:	db0b      	blt.n	8011870 <__lshift+0x38>
 8011858:	4638      	mov	r0, r7
 801185a:	f7ff fd91 	bl	8011380 <_Balloc>
 801185e:	4605      	mov	r5, r0
 8011860:	b948      	cbnz	r0, 8011876 <__lshift+0x3e>
 8011862:	4602      	mov	r2, r0
 8011864:	4b2a      	ldr	r3, [pc, #168]	; (8011910 <__lshift+0xd8>)
 8011866:	482b      	ldr	r0, [pc, #172]	; (8011914 <__lshift+0xdc>)
 8011868:	f240 11d9 	movw	r1, #473	; 0x1d9
 801186c:	f7fe f930 	bl	800fad0 <__assert_func>
 8011870:	3101      	adds	r1, #1
 8011872:	005b      	lsls	r3, r3, #1
 8011874:	e7ee      	b.n	8011854 <__lshift+0x1c>
 8011876:	2300      	movs	r3, #0
 8011878:	f100 0114 	add.w	r1, r0, #20
 801187c:	f100 0210 	add.w	r2, r0, #16
 8011880:	4618      	mov	r0, r3
 8011882:	4553      	cmp	r3, sl
 8011884:	db37      	blt.n	80118f6 <__lshift+0xbe>
 8011886:	6920      	ldr	r0, [r4, #16]
 8011888:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801188c:	f104 0314 	add.w	r3, r4, #20
 8011890:	f019 091f 	ands.w	r9, r9, #31
 8011894:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011898:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801189c:	d02f      	beq.n	80118fe <__lshift+0xc6>
 801189e:	f1c9 0e20 	rsb	lr, r9, #32
 80118a2:	468a      	mov	sl, r1
 80118a4:	f04f 0c00 	mov.w	ip, #0
 80118a8:	681a      	ldr	r2, [r3, #0]
 80118aa:	fa02 f209 	lsl.w	r2, r2, r9
 80118ae:	ea42 020c 	orr.w	r2, r2, ip
 80118b2:	f84a 2b04 	str.w	r2, [sl], #4
 80118b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80118ba:	4298      	cmp	r0, r3
 80118bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80118c0:	d8f2      	bhi.n	80118a8 <__lshift+0x70>
 80118c2:	1b03      	subs	r3, r0, r4
 80118c4:	3b15      	subs	r3, #21
 80118c6:	f023 0303 	bic.w	r3, r3, #3
 80118ca:	3304      	adds	r3, #4
 80118cc:	f104 0215 	add.w	r2, r4, #21
 80118d0:	4290      	cmp	r0, r2
 80118d2:	bf38      	it	cc
 80118d4:	2304      	movcc	r3, #4
 80118d6:	f841 c003 	str.w	ip, [r1, r3]
 80118da:	f1bc 0f00 	cmp.w	ip, #0
 80118de:	d001      	beq.n	80118e4 <__lshift+0xac>
 80118e0:	f108 0602 	add.w	r6, r8, #2
 80118e4:	3e01      	subs	r6, #1
 80118e6:	4638      	mov	r0, r7
 80118e8:	612e      	str	r6, [r5, #16]
 80118ea:	4621      	mov	r1, r4
 80118ec:	f7ff fd88 	bl	8011400 <_Bfree>
 80118f0:	4628      	mov	r0, r5
 80118f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80118fa:	3301      	adds	r3, #1
 80118fc:	e7c1      	b.n	8011882 <__lshift+0x4a>
 80118fe:	3904      	subs	r1, #4
 8011900:	f853 2b04 	ldr.w	r2, [r3], #4
 8011904:	f841 2f04 	str.w	r2, [r1, #4]!
 8011908:	4298      	cmp	r0, r3
 801190a:	d8f9      	bhi.n	8011900 <__lshift+0xc8>
 801190c:	e7ea      	b.n	80118e4 <__lshift+0xac>
 801190e:	bf00      	nop
 8011910:	08013154 	.word	0x08013154
 8011914:	08013244 	.word	0x08013244

08011918 <__mcmp>:
 8011918:	b530      	push	{r4, r5, lr}
 801191a:	6902      	ldr	r2, [r0, #16]
 801191c:	690c      	ldr	r4, [r1, #16]
 801191e:	1b12      	subs	r2, r2, r4
 8011920:	d10e      	bne.n	8011940 <__mcmp+0x28>
 8011922:	f100 0314 	add.w	r3, r0, #20
 8011926:	3114      	adds	r1, #20
 8011928:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801192c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011930:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011934:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011938:	42a5      	cmp	r5, r4
 801193a:	d003      	beq.n	8011944 <__mcmp+0x2c>
 801193c:	d305      	bcc.n	801194a <__mcmp+0x32>
 801193e:	2201      	movs	r2, #1
 8011940:	4610      	mov	r0, r2
 8011942:	bd30      	pop	{r4, r5, pc}
 8011944:	4283      	cmp	r3, r0
 8011946:	d3f3      	bcc.n	8011930 <__mcmp+0x18>
 8011948:	e7fa      	b.n	8011940 <__mcmp+0x28>
 801194a:	f04f 32ff 	mov.w	r2, #4294967295
 801194e:	e7f7      	b.n	8011940 <__mcmp+0x28>

08011950 <__mdiff>:
 8011950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011954:	460c      	mov	r4, r1
 8011956:	4606      	mov	r6, r0
 8011958:	4611      	mov	r1, r2
 801195a:	4620      	mov	r0, r4
 801195c:	4690      	mov	r8, r2
 801195e:	f7ff ffdb 	bl	8011918 <__mcmp>
 8011962:	1e05      	subs	r5, r0, #0
 8011964:	d110      	bne.n	8011988 <__mdiff+0x38>
 8011966:	4629      	mov	r1, r5
 8011968:	4630      	mov	r0, r6
 801196a:	f7ff fd09 	bl	8011380 <_Balloc>
 801196e:	b930      	cbnz	r0, 801197e <__mdiff+0x2e>
 8011970:	4b3a      	ldr	r3, [pc, #232]	; (8011a5c <__mdiff+0x10c>)
 8011972:	4602      	mov	r2, r0
 8011974:	f240 2132 	movw	r1, #562	; 0x232
 8011978:	4839      	ldr	r0, [pc, #228]	; (8011a60 <__mdiff+0x110>)
 801197a:	f7fe f8a9 	bl	800fad0 <__assert_func>
 801197e:	2301      	movs	r3, #1
 8011980:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011984:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011988:	bfa4      	itt	ge
 801198a:	4643      	movge	r3, r8
 801198c:	46a0      	movge	r8, r4
 801198e:	4630      	mov	r0, r6
 8011990:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011994:	bfa6      	itte	ge
 8011996:	461c      	movge	r4, r3
 8011998:	2500      	movge	r5, #0
 801199a:	2501      	movlt	r5, #1
 801199c:	f7ff fcf0 	bl	8011380 <_Balloc>
 80119a0:	b920      	cbnz	r0, 80119ac <__mdiff+0x5c>
 80119a2:	4b2e      	ldr	r3, [pc, #184]	; (8011a5c <__mdiff+0x10c>)
 80119a4:	4602      	mov	r2, r0
 80119a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80119aa:	e7e5      	b.n	8011978 <__mdiff+0x28>
 80119ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80119b0:	6926      	ldr	r6, [r4, #16]
 80119b2:	60c5      	str	r5, [r0, #12]
 80119b4:	f104 0914 	add.w	r9, r4, #20
 80119b8:	f108 0514 	add.w	r5, r8, #20
 80119bc:	f100 0e14 	add.w	lr, r0, #20
 80119c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80119c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80119c8:	f108 0210 	add.w	r2, r8, #16
 80119cc:	46f2      	mov	sl, lr
 80119ce:	2100      	movs	r1, #0
 80119d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80119d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80119d8:	fa1f f883 	uxth.w	r8, r3
 80119dc:	fa11 f18b 	uxtah	r1, r1, fp
 80119e0:	0c1b      	lsrs	r3, r3, #16
 80119e2:	eba1 0808 	sub.w	r8, r1, r8
 80119e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80119ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80119ee:	fa1f f888 	uxth.w	r8, r8
 80119f2:	1419      	asrs	r1, r3, #16
 80119f4:	454e      	cmp	r6, r9
 80119f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80119fa:	f84a 3b04 	str.w	r3, [sl], #4
 80119fe:	d8e7      	bhi.n	80119d0 <__mdiff+0x80>
 8011a00:	1b33      	subs	r3, r6, r4
 8011a02:	3b15      	subs	r3, #21
 8011a04:	f023 0303 	bic.w	r3, r3, #3
 8011a08:	3304      	adds	r3, #4
 8011a0a:	3415      	adds	r4, #21
 8011a0c:	42a6      	cmp	r6, r4
 8011a0e:	bf38      	it	cc
 8011a10:	2304      	movcc	r3, #4
 8011a12:	441d      	add	r5, r3
 8011a14:	4473      	add	r3, lr
 8011a16:	469e      	mov	lr, r3
 8011a18:	462e      	mov	r6, r5
 8011a1a:	4566      	cmp	r6, ip
 8011a1c:	d30e      	bcc.n	8011a3c <__mdiff+0xec>
 8011a1e:	f10c 0203 	add.w	r2, ip, #3
 8011a22:	1b52      	subs	r2, r2, r5
 8011a24:	f022 0203 	bic.w	r2, r2, #3
 8011a28:	3d03      	subs	r5, #3
 8011a2a:	45ac      	cmp	ip, r5
 8011a2c:	bf38      	it	cc
 8011a2e:	2200      	movcc	r2, #0
 8011a30:	441a      	add	r2, r3
 8011a32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011a36:	b17b      	cbz	r3, 8011a58 <__mdiff+0x108>
 8011a38:	6107      	str	r7, [r0, #16]
 8011a3a:	e7a3      	b.n	8011984 <__mdiff+0x34>
 8011a3c:	f856 8b04 	ldr.w	r8, [r6], #4
 8011a40:	fa11 f288 	uxtah	r2, r1, r8
 8011a44:	1414      	asrs	r4, r2, #16
 8011a46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011a4a:	b292      	uxth	r2, r2
 8011a4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011a50:	f84e 2b04 	str.w	r2, [lr], #4
 8011a54:	1421      	asrs	r1, r4, #16
 8011a56:	e7e0      	b.n	8011a1a <__mdiff+0xca>
 8011a58:	3f01      	subs	r7, #1
 8011a5a:	e7ea      	b.n	8011a32 <__mdiff+0xe2>
 8011a5c:	08013154 	.word	0x08013154
 8011a60:	08013244 	.word	0x08013244

08011a64 <__ulp>:
 8011a64:	b082      	sub	sp, #8
 8011a66:	ed8d 0b00 	vstr	d0, [sp]
 8011a6a:	9b01      	ldr	r3, [sp, #4]
 8011a6c:	4912      	ldr	r1, [pc, #72]	; (8011ab8 <__ulp+0x54>)
 8011a6e:	4019      	ands	r1, r3
 8011a70:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011a74:	2900      	cmp	r1, #0
 8011a76:	dd05      	ble.n	8011a84 <__ulp+0x20>
 8011a78:	2200      	movs	r2, #0
 8011a7a:	460b      	mov	r3, r1
 8011a7c:	ec43 2b10 	vmov	d0, r2, r3
 8011a80:	b002      	add	sp, #8
 8011a82:	4770      	bx	lr
 8011a84:	4249      	negs	r1, r1
 8011a86:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011a8a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011a8e:	f04f 0200 	mov.w	r2, #0
 8011a92:	f04f 0300 	mov.w	r3, #0
 8011a96:	da04      	bge.n	8011aa2 <__ulp+0x3e>
 8011a98:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011a9c:	fa41 f300 	asr.w	r3, r1, r0
 8011aa0:	e7ec      	b.n	8011a7c <__ulp+0x18>
 8011aa2:	f1a0 0114 	sub.w	r1, r0, #20
 8011aa6:	291e      	cmp	r1, #30
 8011aa8:	bfda      	itte	le
 8011aaa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011aae:	fa20 f101 	lsrle.w	r1, r0, r1
 8011ab2:	2101      	movgt	r1, #1
 8011ab4:	460a      	mov	r2, r1
 8011ab6:	e7e1      	b.n	8011a7c <__ulp+0x18>
 8011ab8:	7ff00000 	.word	0x7ff00000

08011abc <__b2d>:
 8011abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011abe:	6905      	ldr	r5, [r0, #16]
 8011ac0:	f100 0714 	add.w	r7, r0, #20
 8011ac4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011ac8:	1f2e      	subs	r6, r5, #4
 8011aca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011ace:	4620      	mov	r0, r4
 8011ad0:	f7ff fd48 	bl	8011564 <__hi0bits>
 8011ad4:	f1c0 0320 	rsb	r3, r0, #32
 8011ad8:	280a      	cmp	r0, #10
 8011ada:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011b58 <__b2d+0x9c>
 8011ade:	600b      	str	r3, [r1, #0]
 8011ae0:	dc14      	bgt.n	8011b0c <__b2d+0x50>
 8011ae2:	f1c0 0e0b 	rsb	lr, r0, #11
 8011ae6:	fa24 f10e 	lsr.w	r1, r4, lr
 8011aea:	42b7      	cmp	r7, r6
 8011aec:	ea41 030c 	orr.w	r3, r1, ip
 8011af0:	bf34      	ite	cc
 8011af2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011af6:	2100      	movcs	r1, #0
 8011af8:	3015      	adds	r0, #21
 8011afa:	fa04 f000 	lsl.w	r0, r4, r0
 8011afe:	fa21 f10e 	lsr.w	r1, r1, lr
 8011b02:	ea40 0201 	orr.w	r2, r0, r1
 8011b06:	ec43 2b10 	vmov	d0, r2, r3
 8011b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b0c:	42b7      	cmp	r7, r6
 8011b0e:	bf3a      	itte	cc
 8011b10:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011b14:	f1a5 0608 	subcc.w	r6, r5, #8
 8011b18:	2100      	movcs	r1, #0
 8011b1a:	380b      	subs	r0, #11
 8011b1c:	d017      	beq.n	8011b4e <__b2d+0x92>
 8011b1e:	f1c0 0c20 	rsb	ip, r0, #32
 8011b22:	fa04 f500 	lsl.w	r5, r4, r0
 8011b26:	42be      	cmp	r6, r7
 8011b28:	fa21 f40c 	lsr.w	r4, r1, ip
 8011b2c:	ea45 0504 	orr.w	r5, r5, r4
 8011b30:	bf8c      	ite	hi
 8011b32:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011b36:	2400      	movls	r4, #0
 8011b38:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011b3c:	fa01 f000 	lsl.w	r0, r1, r0
 8011b40:	fa24 f40c 	lsr.w	r4, r4, ip
 8011b44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011b48:	ea40 0204 	orr.w	r2, r0, r4
 8011b4c:	e7db      	b.n	8011b06 <__b2d+0x4a>
 8011b4e:	ea44 030c 	orr.w	r3, r4, ip
 8011b52:	460a      	mov	r2, r1
 8011b54:	e7d7      	b.n	8011b06 <__b2d+0x4a>
 8011b56:	bf00      	nop
 8011b58:	3ff00000 	.word	0x3ff00000

08011b5c <__d2b>:
 8011b5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011b60:	4689      	mov	r9, r1
 8011b62:	2101      	movs	r1, #1
 8011b64:	ec57 6b10 	vmov	r6, r7, d0
 8011b68:	4690      	mov	r8, r2
 8011b6a:	f7ff fc09 	bl	8011380 <_Balloc>
 8011b6e:	4604      	mov	r4, r0
 8011b70:	b930      	cbnz	r0, 8011b80 <__d2b+0x24>
 8011b72:	4602      	mov	r2, r0
 8011b74:	4b25      	ldr	r3, [pc, #148]	; (8011c0c <__d2b+0xb0>)
 8011b76:	4826      	ldr	r0, [pc, #152]	; (8011c10 <__d2b+0xb4>)
 8011b78:	f240 310a 	movw	r1, #778	; 0x30a
 8011b7c:	f7fd ffa8 	bl	800fad0 <__assert_func>
 8011b80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011b84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011b88:	bb35      	cbnz	r5, 8011bd8 <__d2b+0x7c>
 8011b8a:	2e00      	cmp	r6, #0
 8011b8c:	9301      	str	r3, [sp, #4]
 8011b8e:	d028      	beq.n	8011be2 <__d2b+0x86>
 8011b90:	4668      	mov	r0, sp
 8011b92:	9600      	str	r6, [sp, #0]
 8011b94:	f7ff fd06 	bl	80115a4 <__lo0bits>
 8011b98:	9900      	ldr	r1, [sp, #0]
 8011b9a:	b300      	cbz	r0, 8011bde <__d2b+0x82>
 8011b9c:	9a01      	ldr	r2, [sp, #4]
 8011b9e:	f1c0 0320 	rsb	r3, r0, #32
 8011ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8011ba6:	430b      	orrs	r3, r1
 8011ba8:	40c2      	lsrs	r2, r0
 8011baa:	6163      	str	r3, [r4, #20]
 8011bac:	9201      	str	r2, [sp, #4]
 8011bae:	9b01      	ldr	r3, [sp, #4]
 8011bb0:	61a3      	str	r3, [r4, #24]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	bf14      	ite	ne
 8011bb6:	2202      	movne	r2, #2
 8011bb8:	2201      	moveq	r2, #1
 8011bba:	6122      	str	r2, [r4, #16]
 8011bbc:	b1d5      	cbz	r5, 8011bf4 <__d2b+0x98>
 8011bbe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011bc2:	4405      	add	r5, r0
 8011bc4:	f8c9 5000 	str.w	r5, [r9]
 8011bc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011bcc:	f8c8 0000 	str.w	r0, [r8]
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	b003      	add	sp, #12
 8011bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011bdc:	e7d5      	b.n	8011b8a <__d2b+0x2e>
 8011bde:	6161      	str	r1, [r4, #20]
 8011be0:	e7e5      	b.n	8011bae <__d2b+0x52>
 8011be2:	a801      	add	r0, sp, #4
 8011be4:	f7ff fcde 	bl	80115a4 <__lo0bits>
 8011be8:	9b01      	ldr	r3, [sp, #4]
 8011bea:	6163      	str	r3, [r4, #20]
 8011bec:	2201      	movs	r2, #1
 8011bee:	6122      	str	r2, [r4, #16]
 8011bf0:	3020      	adds	r0, #32
 8011bf2:	e7e3      	b.n	8011bbc <__d2b+0x60>
 8011bf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011bf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011bfc:	f8c9 0000 	str.w	r0, [r9]
 8011c00:	6918      	ldr	r0, [r3, #16]
 8011c02:	f7ff fcaf 	bl	8011564 <__hi0bits>
 8011c06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011c0a:	e7df      	b.n	8011bcc <__d2b+0x70>
 8011c0c:	08013154 	.word	0x08013154
 8011c10:	08013244 	.word	0x08013244

08011c14 <__ratio>:
 8011c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c18:	4688      	mov	r8, r1
 8011c1a:	4669      	mov	r1, sp
 8011c1c:	4681      	mov	r9, r0
 8011c1e:	f7ff ff4d 	bl	8011abc <__b2d>
 8011c22:	a901      	add	r1, sp, #4
 8011c24:	4640      	mov	r0, r8
 8011c26:	ec55 4b10 	vmov	r4, r5, d0
 8011c2a:	f7ff ff47 	bl	8011abc <__b2d>
 8011c2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011c32:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011c36:	eba3 0c02 	sub.w	ip, r3, r2
 8011c3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011c3e:	1a9b      	subs	r3, r3, r2
 8011c40:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011c44:	ec51 0b10 	vmov	r0, r1, d0
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	bfd6      	itet	le
 8011c4c:	460a      	movle	r2, r1
 8011c4e:	462a      	movgt	r2, r5
 8011c50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011c54:	468b      	mov	fp, r1
 8011c56:	462f      	mov	r7, r5
 8011c58:	bfd4      	ite	le
 8011c5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011c5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011c62:	4620      	mov	r0, r4
 8011c64:	ee10 2a10 	vmov	r2, s0
 8011c68:	465b      	mov	r3, fp
 8011c6a:	4639      	mov	r1, r7
 8011c6c:	f7ee fdfe 	bl	800086c <__aeabi_ddiv>
 8011c70:	ec41 0b10 	vmov	d0, r0, r1
 8011c74:	b003      	add	sp, #12
 8011c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c7a <__copybits>:
 8011c7a:	3901      	subs	r1, #1
 8011c7c:	b570      	push	{r4, r5, r6, lr}
 8011c7e:	1149      	asrs	r1, r1, #5
 8011c80:	6914      	ldr	r4, [r2, #16]
 8011c82:	3101      	adds	r1, #1
 8011c84:	f102 0314 	add.w	r3, r2, #20
 8011c88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011c8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011c90:	1f05      	subs	r5, r0, #4
 8011c92:	42a3      	cmp	r3, r4
 8011c94:	d30c      	bcc.n	8011cb0 <__copybits+0x36>
 8011c96:	1aa3      	subs	r3, r4, r2
 8011c98:	3b11      	subs	r3, #17
 8011c9a:	f023 0303 	bic.w	r3, r3, #3
 8011c9e:	3211      	adds	r2, #17
 8011ca0:	42a2      	cmp	r2, r4
 8011ca2:	bf88      	it	hi
 8011ca4:	2300      	movhi	r3, #0
 8011ca6:	4418      	add	r0, r3
 8011ca8:	2300      	movs	r3, #0
 8011caa:	4288      	cmp	r0, r1
 8011cac:	d305      	bcc.n	8011cba <__copybits+0x40>
 8011cae:	bd70      	pop	{r4, r5, r6, pc}
 8011cb0:	f853 6b04 	ldr.w	r6, [r3], #4
 8011cb4:	f845 6f04 	str.w	r6, [r5, #4]!
 8011cb8:	e7eb      	b.n	8011c92 <__copybits+0x18>
 8011cba:	f840 3b04 	str.w	r3, [r0], #4
 8011cbe:	e7f4      	b.n	8011caa <__copybits+0x30>

08011cc0 <__any_on>:
 8011cc0:	f100 0214 	add.w	r2, r0, #20
 8011cc4:	6900      	ldr	r0, [r0, #16]
 8011cc6:	114b      	asrs	r3, r1, #5
 8011cc8:	4298      	cmp	r0, r3
 8011cca:	b510      	push	{r4, lr}
 8011ccc:	db11      	blt.n	8011cf2 <__any_on+0x32>
 8011cce:	dd0a      	ble.n	8011ce6 <__any_on+0x26>
 8011cd0:	f011 011f 	ands.w	r1, r1, #31
 8011cd4:	d007      	beq.n	8011ce6 <__any_on+0x26>
 8011cd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011cda:	fa24 f001 	lsr.w	r0, r4, r1
 8011cde:	fa00 f101 	lsl.w	r1, r0, r1
 8011ce2:	428c      	cmp	r4, r1
 8011ce4:	d10b      	bne.n	8011cfe <__any_on+0x3e>
 8011ce6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011cea:	4293      	cmp	r3, r2
 8011cec:	d803      	bhi.n	8011cf6 <__any_on+0x36>
 8011cee:	2000      	movs	r0, #0
 8011cf0:	bd10      	pop	{r4, pc}
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	e7f7      	b.n	8011ce6 <__any_on+0x26>
 8011cf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011cfa:	2900      	cmp	r1, #0
 8011cfc:	d0f5      	beq.n	8011cea <__any_on+0x2a>
 8011cfe:	2001      	movs	r0, #1
 8011d00:	e7f6      	b.n	8011cf0 <__any_on+0x30>

08011d02 <_calloc_r>:
 8011d02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d04:	fba1 2402 	umull	r2, r4, r1, r2
 8011d08:	b94c      	cbnz	r4, 8011d1e <_calloc_r+0x1c>
 8011d0a:	4611      	mov	r1, r2
 8011d0c:	9201      	str	r2, [sp, #4]
 8011d0e:	f000 f87b 	bl	8011e08 <_malloc_r>
 8011d12:	9a01      	ldr	r2, [sp, #4]
 8011d14:	4605      	mov	r5, r0
 8011d16:	b930      	cbnz	r0, 8011d26 <_calloc_r+0x24>
 8011d18:	4628      	mov	r0, r5
 8011d1a:	b003      	add	sp, #12
 8011d1c:	bd30      	pop	{r4, r5, pc}
 8011d1e:	220c      	movs	r2, #12
 8011d20:	6002      	str	r2, [r0, #0]
 8011d22:	2500      	movs	r5, #0
 8011d24:	e7f8      	b.n	8011d18 <_calloc_r+0x16>
 8011d26:	4621      	mov	r1, r4
 8011d28:	f7fc f8ae 	bl	800de88 <memset>
 8011d2c:	e7f4      	b.n	8011d18 <_calloc_r+0x16>
	...

08011d30 <_free_r>:
 8011d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d32:	2900      	cmp	r1, #0
 8011d34:	d044      	beq.n	8011dc0 <_free_r+0x90>
 8011d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d3a:	9001      	str	r0, [sp, #4]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8011d42:	bfb8      	it	lt
 8011d44:	18e4      	addlt	r4, r4, r3
 8011d46:	f000 fc7f 	bl	8012648 <__malloc_lock>
 8011d4a:	4a1e      	ldr	r2, [pc, #120]	; (8011dc4 <_free_r+0x94>)
 8011d4c:	9801      	ldr	r0, [sp, #4]
 8011d4e:	6813      	ldr	r3, [r2, #0]
 8011d50:	b933      	cbnz	r3, 8011d60 <_free_r+0x30>
 8011d52:	6063      	str	r3, [r4, #4]
 8011d54:	6014      	str	r4, [r2, #0]
 8011d56:	b003      	add	sp, #12
 8011d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d5c:	f000 bc7a 	b.w	8012654 <__malloc_unlock>
 8011d60:	42a3      	cmp	r3, r4
 8011d62:	d908      	bls.n	8011d76 <_free_r+0x46>
 8011d64:	6825      	ldr	r5, [r4, #0]
 8011d66:	1961      	adds	r1, r4, r5
 8011d68:	428b      	cmp	r3, r1
 8011d6a:	bf01      	itttt	eq
 8011d6c:	6819      	ldreq	r1, [r3, #0]
 8011d6e:	685b      	ldreq	r3, [r3, #4]
 8011d70:	1949      	addeq	r1, r1, r5
 8011d72:	6021      	streq	r1, [r4, #0]
 8011d74:	e7ed      	b.n	8011d52 <_free_r+0x22>
 8011d76:	461a      	mov	r2, r3
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	b10b      	cbz	r3, 8011d80 <_free_r+0x50>
 8011d7c:	42a3      	cmp	r3, r4
 8011d7e:	d9fa      	bls.n	8011d76 <_free_r+0x46>
 8011d80:	6811      	ldr	r1, [r2, #0]
 8011d82:	1855      	adds	r5, r2, r1
 8011d84:	42a5      	cmp	r5, r4
 8011d86:	d10b      	bne.n	8011da0 <_free_r+0x70>
 8011d88:	6824      	ldr	r4, [r4, #0]
 8011d8a:	4421      	add	r1, r4
 8011d8c:	1854      	adds	r4, r2, r1
 8011d8e:	42a3      	cmp	r3, r4
 8011d90:	6011      	str	r1, [r2, #0]
 8011d92:	d1e0      	bne.n	8011d56 <_free_r+0x26>
 8011d94:	681c      	ldr	r4, [r3, #0]
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	6053      	str	r3, [r2, #4]
 8011d9a:	4421      	add	r1, r4
 8011d9c:	6011      	str	r1, [r2, #0]
 8011d9e:	e7da      	b.n	8011d56 <_free_r+0x26>
 8011da0:	d902      	bls.n	8011da8 <_free_r+0x78>
 8011da2:	230c      	movs	r3, #12
 8011da4:	6003      	str	r3, [r0, #0]
 8011da6:	e7d6      	b.n	8011d56 <_free_r+0x26>
 8011da8:	6825      	ldr	r5, [r4, #0]
 8011daa:	1961      	adds	r1, r4, r5
 8011dac:	428b      	cmp	r3, r1
 8011dae:	bf04      	itt	eq
 8011db0:	6819      	ldreq	r1, [r3, #0]
 8011db2:	685b      	ldreq	r3, [r3, #4]
 8011db4:	6063      	str	r3, [r4, #4]
 8011db6:	bf04      	itt	eq
 8011db8:	1949      	addeq	r1, r1, r5
 8011dba:	6021      	streq	r1, [r4, #0]
 8011dbc:	6054      	str	r4, [r2, #4]
 8011dbe:	e7ca      	b.n	8011d56 <_free_r+0x26>
 8011dc0:	b003      	add	sp, #12
 8011dc2:	bd30      	pop	{r4, r5, pc}
 8011dc4:	200014ec 	.word	0x200014ec

08011dc8 <sbrk_aligned>:
 8011dc8:	b570      	push	{r4, r5, r6, lr}
 8011dca:	4e0e      	ldr	r6, [pc, #56]	; (8011e04 <sbrk_aligned+0x3c>)
 8011dcc:	460c      	mov	r4, r1
 8011dce:	6831      	ldr	r1, [r6, #0]
 8011dd0:	4605      	mov	r5, r0
 8011dd2:	b911      	cbnz	r1, 8011dda <sbrk_aligned+0x12>
 8011dd4:	f000 fb4c 	bl	8012470 <_sbrk_r>
 8011dd8:	6030      	str	r0, [r6, #0]
 8011dda:	4621      	mov	r1, r4
 8011ddc:	4628      	mov	r0, r5
 8011dde:	f000 fb47 	bl	8012470 <_sbrk_r>
 8011de2:	1c43      	adds	r3, r0, #1
 8011de4:	d00a      	beq.n	8011dfc <sbrk_aligned+0x34>
 8011de6:	1cc4      	adds	r4, r0, #3
 8011de8:	f024 0403 	bic.w	r4, r4, #3
 8011dec:	42a0      	cmp	r0, r4
 8011dee:	d007      	beq.n	8011e00 <sbrk_aligned+0x38>
 8011df0:	1a21      	subs	r1, r4, r0
 8011df2:	4628      	mov	r0, r5
 8011df4:	f000 fb3c 	bl	8012470 <_sbrk_r>
 8011df8:	3001      	adds	r0, #1
 8011dfa:	d101      	bne.n	8011e00 <sbrk_aligned+0x38>
 8011dfc:	f04f 34ff 	mov.w	r4, #4294967295
 8011e00:	4620      	mov	r0, r4
 8011e02:	bd70      	pop	{r4, r5, r6, pc}
 8011e04:	200014f0 	.word	0x200014f0

08011e08 <_malloc_r>:
 8011e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e0c:	1ccd      	adds	r5, r1, #3
 8011e0e:	f025 0503 	bic.w	r5, r5, #3
 8011e12:	3508      	adds	r5, #8
 8011e14:	2d0c      	cmp	r5, #12
 8011e16:	bf38      	it	cc
 8011e18:	250c      	movcc	r5, #12
 8011e1a:	2d00      	cmp	r5, #0
 8011e1c:	4607      	mov	r7, r0
 8011e1e:	db01      	blt.n	8011e24 <_malloc_r+0x1c>
 8011e20:	42a9      	cmp	r1, r5
 8011e22:	d905      	bls.n	8011e30 <_malloc_r+0x28>
 8011e24:	230c      	movs	r3, #12
 8011e26:	603b      	str	r3, [r7, #0]
 8011e28:	2600      	movs	r6, #0
 8011e2a:	4630      	mov	r0, r6
 8011e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e30:	4e2e      	ldr	r6, [pc, #184]	; (8011eec <_malloc_r+0xe4>)
 8011e32:	f000 fc09 	bl	8012648 <__malloc_lock>
 8011e36:	6833      	ldr	r3, [r6, #0]
 8011e38:	461c      	mov	r4, r3
 8011e3a:	bb34      	cbnz	r4, 8011e8a <_malloc_r+0x82>
 8011e3c:	4629      	mov	r1, r5
 8011e3e:	4638      	mov	r0, r7
 8011e40:	f7ff ffc2 	bl	8011dc8 <sbrk_aligned>
 8011e44:	1c43      	adds	r3, r0, #1
 8011e46:	4604      	mov	r4, r0
 8011e48:	d14d      	bne.n	8011ee6 <_malloc_r+0xde>
 8011e4a:	6834      	ldr	r4, [r6, #0]
 8011e4c:	4626      	mov	r6, r4
 8011e4e:	2e00      	cmp	r6, #0
 8011e50:	d140      	bne.n	8011ed4 <_malloc_r+0xcc>
 8011e52:	6823      	ldr	r3, [r4, #0]
 8011e54:	4631      	mov	r1, r6
 8011e56:	4638      	mov	r0, r7
 8011e58:	eb04 0803 	add.w	r8, r4, r3
 8011e5c:	f000 fb08 	bl	8012470 <_sbrk_r>
 8011e60:	4580      	cmp	r8, r0
 8011e62:	d13a      	bne.n	8011eda <_malloc_r+0xd2>
 8011e64:	6821      	ldr	r1, [r4, #0]
 8011e66:	3503      	adds	r5, #3
 8011e68:	1a6d      	subs	r5, r5, r1
 8011e6a:	f025 0503 	bic.w	r5, r5, #3
 8011e6e:	3508      	adds	r5, #8
 8011e70:	2d0c      	cmp	r5, #12
 8011e72:	bf38      	it	cc
 8011e74:	250c      	movcc	r5, #12
 8011e76:	4629      	mov	r1, r5
 8011e78:	4638      	mov	r0, r7
 8011e7a:	f7ff ffa5 	bl	8011dc8 <sbrk_aligned>
 8011e7e:	3001      	adds	r0, #1
 8011e80:	d02b      	beq.n	8011eda <_malloc_r+0xd2>
 8011e82:	6823      	ldr	r3, [r4, #0]
 8011e84:	442b      	add	r3, r5
 8011e86:	6023      	str	r3, [r4, #0]
 8011e88:	e00e      	b.n	8011ea8 <_malloc_r+0xa0>
 8011e8a:	6822      	ldr	r2, [r4, #0]
 8011e8c:	1b52      	subs	r2, r2, r5
 8011e8e:	d41e      	bmi.n	8011ece <_malloc_r+0xc6>
 8011e90:	2a0b      	cmp	r2, #11
 8011e92:	d916      	bls.n	8011ec2 <_malloc_r+0xba>
 8011e94:	1961      	adds	r1, r4, r5
 8011e96:	42a3      	cmp	r3, r4
 8011e98:	6025      	str	r5, [r4, #0]
 8011e9a:	bf18      	it	ne
 8011e9c:	6059      	strne	r1, [r3, #4]
 8011e9e:	6863      	ldr	r3, [r4, #4]
 8011ea0:	bf08      	it	eq
 8011ea2:	6031      	streq	r1, [r6, #0]
 8011ea4:	5162      	str	r2, [r4, r5]
 8011ea6:	604b      	str	r3, [r1, #4]
 8011ea8:	4638      	mov	r0, r7
 8011eaa:	f104 060b 	add.w	r6, r4, #11
 8011eae:	f000 fbd1 	bl	8012654 <__malloc_unlock>
 8011eb2:	f026 0607 	bic.w	r6, r6, #7
 8011eb6:	1d23      	adds	r3, r4, #4
 8011eb8:	1af2      	subs	r2, r6, r3
 8011eba:	d0b6      	beq.n	8011e2a <_malloc_r+0x22>
 8011ebc:	1b9b      	subs	r3, r3, r6
 8011ebe:	50a3      	str	r3, [r4, r2]
 8011ec0:	e7b3      	b.n	8011e2a <_malloc_r+0x22>
 8011ec2:	6862      	ldr	r2, [r4, #4]
 8011ec4:	42a3      	cmp	r3, r4
 8011ec6:	bf0c      	ite	eq
 8011ec8:	6032      	streq	r2, [r6, #0]
 8011eca:	605a      	strne	r2, [r3, #4]
 8011ecc:	e7ec      	b.n	8011ea8 <_malloc_r+0xa0>
 8011ece:	4623      	mov	r3, r4
 8011ed0:	6864      	ldr	r4, [r4, #4]
 8011ed2:	e7b2      	b.n	8011e3a <_malloc_r+0x32>
 8011ed4:	4634      	mov	r4, r6
 8011ed6:	6876      	ldr	r6, [r6, #4]
 8011ed8:	e7b9      	b.n	8011e4e <_malloc_r+0x46>
 8011eda:	230c      	movs	r3, #12
 8011edc:	603b      	str	r3, [r7, #0]
 8011ede:	4638      	mov	r0, r7
 8011ee0:	f000 fbb8 	bl	8012654 <__malloc_unlock>
 8011ee4:	e7a1      	b.n	8011e2a <_malloc_r+0x22>
 8011ee6:	6025      	str	r5, [r4, #0]
 8011ee8:	e7de      	b.n	8011ea8 <_malloc_r+0xa0>
 8011eea:	bf00      	nop
 8011eec:	200014ec 	.word	0x200014ec

08011ef0 <__ssputs_r>:
 8011ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ef4:	688e      	ldr	r6, [r1, #8]
 8011ef6:	429e      	cmp	r6, r3
 8011ef8:	4682      	mov	sl, r0
 8011efa:	460c      	mov	r4, r1
 8011efc:	4690      	mov	r8, r2
 8011efe:	461f      	mov	r7, r3
 8011f00:	d838      	bhi.n	8011f74 <__ssputs_r+0x84>
 8011f02:	898a      	ldrh	r2, [r1, #12]
 8011f04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011f08:	d032      	beq.n	8011f70 <__ssputs_r+0x80>
 8011f0a:	6825      	ldr	r5, [r4, #0]
 8011f0c:	6909      	ldr	r1, [r1, #16]
 8011f0e:	eba5 0901 	sub.w	r9, r5, r1
 8011f12:	6965      	ldr	r5, [r4, #20]
 8011f14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f1c:	3301      	adds	r3, #1
 8011f1e:	444b      	add	r3, r9
 8011f20:	106d      	asrs	r5, r5, #1
 8011f22:	429d      	cmp	r5, r3
 8011f24:	bf38      	it	cc
 8011f26:	461d      	movcc	r5, r3
 8011f28:	0553      	lsls	r3, r2, #21
 8011f2a:	d531      	bpl.n	8011f90 <__ssputs_r+0xa0>
 8011f2c:	4629      	mov	r1, r5
 8011f2e:	f7ff ff6b 	bl	8011e08 <_malloc_r>
 8011f32:	4606      	mov	r6, r0
 8011f34:	b950      	cbnz	r0, 8011f4c <__ssputs_r+0x5c>
 8011f36:	230c      	movs	r3, #12
 8011f38:	f8ca 3000 	str.w	r3, [sl]
 8011f3c:	89a3      	ldrh	r3, [r4, #12]
 8011f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f42:	81a3      	strh	r3, [r4, #12]
 8011f44:	f04f 30ff 	mov.w	r0, #4294967295
 8011f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f4c:	6921      	ldr	r1, [r4, #16]
 8011f4e:	464a      	mov	r2, r9
 8011f50:	f7fb ff8c 	bl	800de6c <memcpy>
 8011f54:	89a3      	ldrh	r3, [r4, #12]
 8011f56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f5e:	81a3      	strh	r3, [r4, #12]
 8011f60:	6126      	str	r6, [r4, #16]
 8011f62:	6165      	str	r5, [r4, #20]
 8011f64:	444e      	add	r6, r9
 8011f66:	eba5 0509 	sub.w	r5, r5, r9
 8011f6a:	6026      	str	r6, [r4, #0]
 8011f6c:	60a5      	str	r5, [r4, #8]
 8011f6e:	463e      	mov	r6, r7
 8011f70:	42be      	cmp	r6, r7
 8011f72:	d900      	bls.n	8011f76 <__ssputs_r+0x86>
 8011f74:	463e      	mov	r6, r7
 8011f76:	6820      	ldr	r0, [r4, #0]
 8011f78:	4632      	mov	r2, r6
 8011f7a:	4641      	mov	r1, r8
 8011f7c:	f000 fb4a 	bl	8012614 <memmove>
 8011f80:	68a3      	ldr	r3, [r4, #8]
 8011f82:	1b9b      	subs	r3, r3, r6
 8011f84:	60a3      	str	r3, [r4, #8]
 8011f86:	6823      	ldr	r3, [r4, #0]
 8011f88:	4433      	add	r3, r6
 8011f8a:	6023      	str	r3, [r4, #0]
 8011f8c:	2000      	movs	r0, #0
 8011f8e:	e7db      	b.n	8011f48 <__ssputs_r+0x58>
 8011f90:	462a      	mov	r2, r5
 8011f92:	f000 fb65 	bl	8012660 <_realloc_r>
 8011f96:	4606      	mov	r6, r0
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	d1e1      	bne.n	8011f60 <__ssputs_r+0x70>
 8011f9c:	6921      	ldr	r1, [r4, #16]
 8011f9e:	4650      	mov	r0, sl
 8011fa0:	f7ff fec6 	bl	8011d30 <_free_r>
 8011fa4:	e7c7      	b.n	8011f36 <__ssputs_r+0x46>
	...

08011fa8 <_svfiprintf_r>:
 8011fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fac:	4698      	mov	r8, r3
 8011fae:	898b      	ldrh	r3, [r1, #12]
 8011fb0:	061b      	lsls	r3, r3, #24
 8011fb2:	b09d      	sub	sp, #116	; 0x74
 8011fb4:	4607      	mov	r7, r0
 8011fb6:	460d      	mov	r5, r1
 8011fb8:	4614      	mov	r4, r2
 8011fba:	d50e      	bpl.n	8011fda <_svfiprintf_r+0x32>
 8011fbc:	690b      	ldr	r3, [r1, #16]
 8011fbe:	b963      	cbnz	r3, 8011fda <_svfiprintf_r+0x32>
 8011fc0:	2140      	movs	r1, #64	; 0x40
 8011fc2:	f7ff ff21 	bl	8011e08 <_malloc_r>
 8011fc6:	6028      	str	r0, [r5, #0]
 8011fc8:	6128      	str	r0, [r5, #16]
 8011fca:	b920      	cbnz	r0, 8011fd6 <_svfiprintf_r+0x2e>
 8011fcc:	230c      	movs	r3, #12
 8011fce:	603b      	str	r3, [r7, #0]
 8011fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8011fd4:	e0d1      	b.n	801217a <_svfiprintf_r+0x1d2>
 8011fd6:	2340      	movs	r3, #64	; 0x40
 8011fd8:	616b      	str	r3, [r5, #20]
 8011fda:	2300      	movs	r3, #0
 8011fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8011fde:	2320      	movs	r3, #32
 8011fe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fe8:	2330      	movs	r3, #48	; 0x30
 8011fea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012194 <_svfiprintf_r+0x1ec>
 8011fee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ff2:	f04f 0901 	mov.w	r9, #1
 8011ff6:	4623      	mov	r3, r4
 8011ff8:	469a      	mov	sl, r3
 8011ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ffe:	b10a      	cbz	r2, 8012004 <_svfiprintf_r+0x5c>
 8012000:	2a25      	cmp	r2, #37	; 0x25
 8012002:	d1f9      	bne.n	8011ff8 <_svfiprintf_r+0x50>
 8012004:	ebba 0b04 	subs.w	fp, sl, r4
 8012008:	d00b      	beq.n	8012022 <_svfiprintf_r+0x7a>
 801200a:	465b      	mov	r3, fp
 801200c:	4622      	mov	r2, r4
 801200e:	4629      	mov	r1, r5
 8012010:	4638      	mov	r0, r7
 8012012:	f7ff ff6d 	bl	8011ef0 <__ssputs_r>
 8012016:	3001      	adds	r0, #1
 8012018:	f000 80aa 	beq.w	8012170 <_svfiprintf_r+0x1c8>
 801201c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801201e:	445a      	add	r2, fp
 8012020:	9209      	str	r2, [sp, #36]	; 0x24
 8012022:	f89a 3000 	ldrb.w	r3, [sl]
 8012026:	2b00      	cmp	r3, #0
 8012028:	f000 80a2 	beq.w	8012170 <_svfiprintf_r+0x1c8>
 801202c:	2300      	movs	r3, #0
 801202e:	f04f 32ff 	mov.w	r2, #4294967295
 8012032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012036:	f10a 0a01 	add.w	sl, sl, #1
 801203a:	9304      	str	r3, [sp, #16]
 801203c:	9307      	str	r3, [sp, #28]
 801203e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012042:	931a      	str	r3, [sp, #104]	; 0x68
 8012044:	4654      	mov	r4, sl
 8012046:	2205      	movs	r2, #5
 8012048:	f814 1b01 	ldrb.w	r1, [r4], #1
 801204c:	4851      	ldr	r0, [pc, #324]	; (8012194 <_svfiprintf_r+0x1ec>)
 801204e:	f7ee f8d7 	bl	8000200 <memchr>
 8012052:	9a04      	ldr	r2, [sp, #16]
 8012054:	b9d8      	cbnz	r0, 801208e <_svfiprintf_r+0xe6>
 8012056:	06d0      	lsls	r0, r2, #27
 8012058:	bf44      	itt	mi
 801205a:	2320      	movmi	r3, #32
 801205c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012060:	0711      	lsls	r1, r2, #28
 8012062:	bf44      	itt	mi
 8012064:	232b      	movmi	r3, #43	; 0x2b
 8012066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801206a:	f89a 3000 	ldrb.w	r3, [sl]
 801206e:	2b2a      	cmp	r3, #42	; 0x2a
 8012070:	d015      	beq.n	801209e <_svfiprintf_r+0xf6>
 8012072:	9a07      	ldr	r2, [sp, #28]
 8012074:	4654      	mov	r4, sl
 8012076:	2000      	movs	r0, #0
 8012078:	f04f 0c0a 	mov.w	ip, #10
 801207c:	4621      	mov	r1, r4
 801207e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012082:	3b30      	subs	r3, #48	; 0x30
 8012084:	2b09      	cmp	r3, #9
 8012086:	d94e      	bls.n	8012126 <_svfiprintf_r+0x17e>
 8012088:	b1b0      	cbz	r0, 80120b8 <_svfiprintf_r+0x110>
 801208a:	9207      	str	r2, [sp, #28]
 801208c:	e014      	b.n	80120b8 <_svfiprintf_r+0x110>
 801208e:	eba0 0308 	sub.w	r3, r0, r8
 8012092:	fa09 f303 	lsl.w	r3, r9, r3
 8012096:	4313      	orrs	r3, r2
 8012098:	9304      	str	r3, [sp, #16]
 801209a:	46a2      	mov	sl, r4
 801209c:	e7d2      	b.n	8012044 <_svfiprintf_r+0x9c>
 801209e:	9b03      	ldr	r3, [sp, #12]
 80120a0:	1d19      	adds	r1, r3, #4
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	9103      	str	r1, [sp, #12]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	bfbb      	ittet	lt
 80120aa:	425b      	neglt	r3, r3
 80120ac:	f042 0202 	orrlt.w	r2, r2, #2
 80120b0:	9307      	strge	r3, [sp, #28]
 80120b2:	9307      	strlt	r3, [sp, #28]
 80120b4:	bfb8      	it	lt
 80120b6:	9204      	strlt	r2, [sp, #16]
 80120b8:	7823      	ldrb	r3, [r4, #0]
 80120ba:	2b2e      	cmp	r3, #46	; 0x2e
 80120bc:	d10c      	bne.n	80120d8 <_svfiprintf_r+0x130>
 80120be:	7863      	ldrb	r3, [r4, #1]
 80120c0:	2b2a      	cmp	r3, #42	; 0x2a
 80120c2:	d135      	bne.n	8012130 <_svfiprintf_r+0x188>
 80120c4:	9b03      	ldr	r3, [sp, #12]
 80120c6:	1d1a      	adds	r2, r3, #4
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	9203      	str	r2, [sp, #12]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	bfb8      	it	lt
 80120d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80120d4:	3402      	adds	r4, #2
 80120d6:	9305      	str	r3, [sp, #20]
 80120d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80121a4 <_svfiprintf_r+0x1fc>
 80120dc:	7821      	ldrb	r1, [r4, #0]
 80120de:	2203      	movs	r2, #3
 80120e0:	4650      	mov	r0, sl
 80120e2:	f7ee f88d 	bl	8000200 <memchr>
 80120e6:	b140      	cbz	r0, 80120fa <_svfiprintf_r+0x152>
 80120e8:	2340      	movs	r3, #64	; 0x40
 80120ea:	eba0 000a 	sub.w	r0, r0, sl
 80120ee:	fa03 f000 	lsl.w	r0, r3, r0
 80120f2:	9b04      	ldr	r3, [sp, #16]
 80120f4:	4303      	orrs	r3, r0
 80120f6:	3401      	adds	r4, #1
 80120f8:	9304      	str	r3, [sp, #16]
 80120fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120fe:	4826      	ldr	r0, [pc, #152]	; (8012198 <_svfiprintf_r+0x1f0>)
 8012100:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012104:	2206      	movs	r2, #6
 8012106:	f7ee f87b 	bl	8000200 <memchr>
 801210a:	2800      	cmp	r0, #0
 801210c:	d038      	beq.n	8012180 <_svfiprintf_r+0x1d8>
 801210e:	4b23      	ldr	r3, [pc, #140]	; (801219c <_svfiprintf_r+0x1f4>)
 8012110:	bb1b      	cbnz	r3, 801215a <_svfiprintf_r+0x1b2>
 8012112:	9b03      	ldr	r3, [sp, #12]
 8012114:	3307      	adds	r3, #7
 8012116:	f023 0307 	bic.w	r3, r3, #7
 801211a:	3308      	adds	r3, #8
 801211c:	9303      	str	r3, [sp, #12]
 801211e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012120:	4433      	add	r3, r6
 8012122:	9309      	str	r3, [sp, #36]	; 0x24
 8012124:	e767      	b.n	8011ff6 <_svfiprintf_r+0x4e>
 8012126:	fb0c 3202 	mla	r2, ip, r2, r3
 801212a:	460c      	mov	r4, r1
 801212c:	2001      	movs	r0, #1
 801212e:	e7a5      	b.n	801207c <_svfiprintf_r+0xd4>
 8012130:	2300      	movs	r3, #0
 8012132:	3401      	adds	r4, #1
 8012134:	9305      	str	r3, [sp, #20]
 8012136:	4619      	mov	r1, r3
 8012138:	f04f 0c0a 	mov.w	ip, #10
 801213c:	4620      	mov	r0, r4
 801213e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012142:	3a30      	subs	r2, #48	; 0x30
 8012144:	2a09      	cmp	r2, #9
 8012146:	d903      	bls.n	8012150 <_svfiprintf_r+0x1a8>
 8012148:	2b00      	cmp	r3, #0
 801214a:	d0c5      	beq.n	80120d8 <_svfiprintf_r+0x130>
 801214c:	9105      	str	r1, [sp, #20]
 801214e:	e7c3      	b.n	80120d8 <_svfiprintf_r+0x130>
 8012150:	fb0c 2101 	mla	r1, ip, r1, r2
 8012154:	4604      	mov	r4, r0
 8012156:	2301      	movs	r3, #1
 8012158:	e7f0      	b.n	801213c <_svfiprintf_r+0x194>
 801215a:	ab03      	add	r3, sp, #12
 801215c:	9300      	str	r3, [sp, #0]
 801215e:	462a      	mov	r2, r5
 8012160:	4b0f      	ldr	r3, [pc, #60]	; (80121a0 <_svfiprintf_r+0x1f8>)
 8012162:	a904      	add	r1, sp, #16
 8012164:	4638      	mov	r0, r7
 8012166:	f7fb ff37 	bl	800dfd8 <_printf_float>
 801216a:	1c42      	adds	r2, r0, #1
 801216c:	4606      	mov	r6, r0
 801216e:	d1d6      	bne.n	801211e <_svfiprintf_r+0x176>
 8012170:	89ab      	ldrh	r3, [r5, #12]
 8012172:	065b      	lsls	r3, r3, #25
 8012174:	f53f af2c 	bmi.w	8011fd0 <_svfiprintf_r+0x28>
 8012178:	9809      	ldr	r0, [sp, #36]	; 0x24
 801217a:	b01d      	add	sp, #116	; 0x74
 801217c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012180:	ab03      	add	r3, sp, #12
 8012182:	9300      	str	r3, [sp, #0]
 8012184:	462a      	mov	r2, r5
 8012186:	4b06      	ldr	r3, [pc, #24]	; (80121a0 <_svfiprintf_r+0x1f8>)
 8012188:	a904      	add	r1, sp, #16
 801218a:	4638      	mov	r0, r7
 801218c:	f7fc f9c8 	bl	800e520 <_printf_i>
 8012190:	e7eb      	b.n	801216a <_svfiprintf_r+0x1c2>
 8012192:	bf00      	nop
 8012194:	0801339c 	.word	0x0801339c
 8012198:	080133a6 	.word	0x080133a6
 801219c:	0800dfd9 	.word	0x0800dfd9
 80121a0:	08011ef1 	.word	0x08011ef1
 80121a4:	080133a2 	.word	0x080133a2

080121a8 <__sfputc_r>:
 80121a8:	6893      	ldr	r3, [r2, #8]
 80121aa:	3b01      	subs	r3, #1
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	b410      	push	{r4}
 80121b0:	6093      	str	r3, [r2, #8]
 80121b2:	da08      	bge.n	80121c6 <__sfputc_r+0x1e>
 80121b4:	6994      	ldr	r4, [r2, #24]
 80121b6:	42a3      	cmp	r3, r4
 80121b8:	db01      	blt.n	80121be <__sfputc_r+0x16>
 80121ba:	290a      	cmp	r1, #10
 80121bc:	d103      	bne.n	80121c6 <__sfputc_r+0x1e>
 80121be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121c2:	f7fd bbc5 	b.w	800f950 <__swbuf_r>
 80121c6:	6813      	ldr	r3, [r2, #0]
 80121c8:	1c58      	adds	r0, r3, #1
 80121ca:	6010      	str	r0, [r2, #0]
 80121cc:	7019      	strb	r1, [r3, #0]
 80121ce:	4608      	mov	r0, r1
 80121d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121d4:	4770      	bx	lr

080121d6 <__sfputs_r>:
 80121d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121d8:	4606      	mov	r6, r0
 80121da:	460f      	mov	r7, r1
 80121dc:	4614      	mov	r4, r2
 80121de:	18d5      	adds	r5, r2, r3
 80121e0:	42ac      	cmp	r4, r5
 80121e2:	d101      	bne.n	80121e8 <__sfputs_r+0x12>
 80121e4:	2000      	movs	r0, #0
 80121e6:	e007      	b.n	80121f8 <__sfputs_r+0x22>
 80121e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121ec:	463a      	mov	r2, r7
 80121ee:	4630      	mov	r0, r6
 80121f0:	f7ff ffda 	bl	80121a8 <__sfputc_r>
 80121f4:	1c43      	adds	r3, r0, #1
 80121f6:	d1f3      	bne.n	80121e0 <__sfputs_r+0xa>
 80121f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080121fc <_vfiprintf_r>:
 80121fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012200:	460d      	mov	r5, r1
 8012202:	b09d      	sub	sp, #116	; 0x74
 8012204:	4614      	mov	r4, r2
 8012206:	4698      	mov	r8, r3
 8012208:	4606      	mov	r6, r0
 801220a:	b118      	cbz	r0, 8012214 <_vfiprintf_r+0x18>
 801220c:	6983      	ldr	r3, [r0, #24]
 801220e:	b90b      	cbnz	r3, 8012214 <_vfiprintf_r+0x18>
 8012210:	f7fe fc12 	bl	8010a38 <__sinit>
 8012214:	4b89      	ldr	r3, [pc, #548]	; (801243c <_vfiprintf_r+0x240>)
 8012216:	429d      	cmp	r5, r3
 8012218:	d11b      	bne.n	8012252 <_vfiprintf_r+0x56>
 801221a:	6875      	ldr	r5, [r6, #4]
 801221c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801221e:	07d9      	lsls	r1, r3, #31
 8012220:	d405      	bmi.n	801222e <_vfiprintf_r+0x32>
 8012222:	89ab      	ldrh	r3, [r5, #12]
 8012224:	059a      	lsls	r2, r3, #22
 8012226:	d402      	bmi.n	801222e <_vfiprintf_r+0x32>
 8012228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801222a:	f7ff f828 	bl	801127e <__retarget_lock_acquire_recursive>
 801222e:	89ab      	ldrh	r3, [r5, #12]
 8012230:	071b      	lsls	r3, r3, #28
 8012232:	d501      	bpl.n	8012238 <_vfiprintf_r+0x3c>
 8012234:	692b      	ldr	r3, [r5, #16]
 8012236:	b9eb      	cbnz	r3, 8012274 <_vfiprintf_r+0x78>
 8012238:	4629      	mov	r1, r5
 801223a:	4630      	mov	r0, r6
 801223c:	f7fd fbda 	bl	800f9f4 <__swsetup_r>
 8012240:	b1c0      	cbz	r0, 8012274 <_vfiprintf_r+0x78>
 8012242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012244:	07dc      	lsls	r4, r3, #31
 8012246:	d50e      	bpl.n	8012266 <_vfiprintf_r+0x6a>
 8012248:	f04f 30ff 	mov.w	r0, #4294967295
 801224c:	b01d      	add	sp, #116	; 0x74
 801224e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012252:	4b7b      	ldr	r3, [pc, #492]	; (8012440 <_vfiprintf_r+0x244>)
 8012254:	429d      	cmp	r5, r3
 8012256:	d101      	bne.n	801225c <_vfiprintf_r+0x60>
 8012258:	68b5      	ldr	r5, [r6, #8]
 801225a:	e7df      	b.n	801221c <_vfiprintf_r+0x20>
 801225c:	4b79      	ldr	r3, [pc, #484]	; (8012444 <_vfiprintf_r+0x248>)
 801225e:	429d      	cmp	r5, r3
 8012260:	bf08      	it	eq
 8012262:	68f5      	ldreq	r5, [r6, #12]
 8012264:	e7da      	b.n	801221c <_vfiprintf_r+0x20>
 8012266:	89ab      	ldrh	r3, [r5, #12]
 8012268:	0598      	lsls	r0, r3, #22
 801226a:	d4ed      	bmi.n	8012248 <_vfiprintf_r+0x4c>
 801226c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801226e:	f7ff f807 	bl	8011280 <__retarget_lock_release_recursive>
 8012272:	e7e9      	b.n	8012248 <_vfiprintf_r+0x4c>
 8012274:	2300      	movs	r3, #0
 8012276:	9309      	str	r3, [sp, #36]	; 0x24
 8012278:	2320      	movs	r3, #32
 801227a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801227e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012282:	2330      	movs	r3, #48	; 0x30
 8012284:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012448 <_vfiprintf_r+0x24c>
 8012288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801228c:	f04f 0901 	mov.w	r9, #1
 8012290:	4623      	mov	r3, r4
 8012292:	469a      	mov	sl, r3
 8012294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012298:	b10a      	cbz	r2, 801229e <_vfiprintf_r+0xa2>
 801229a:	2a25      	cmp	r2, #37	; 0x25
 801229c:	d1f9      	bne.n	8012292 <_vfiprintf_r+0x96>
 801229e:	ebba 0b04 	subs.w	fp, sl, r4
 80122a2:	d00b      	beq.n	80122bc <_vfiprintf_r+0xc0>
 80122a4:	465b      	mov	r3, fp
 80122a6:	4622      	mov	r2, r4
 80122a8:	4629      	mov	r1, r5
 80122aa:	4630      	mov	r0, r6
 80122ac:	f7ff ff93 	bl	80121d6 <__sfputs_r>
 80122b0:	3001      	adds	r0, #1
 80122b2:	f000 80aa 	beq.w	801240a <_vfiprintf_r+0x20e>
 80122b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122b8:	445a      	add	r2, fp
 80122ba:	9209      	str	r2, [sp, #36]	; 0x24
 80122bc:	f89a 3000 	ldrb.w	r3, [sl]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	f000 80a2 	beq.w	801240a <_vfiprintf_r+0x20e>
 80122c6:	2300      	movs	r3, #0
 80122c8:	f04f 32ff 	mov.w	r2, #4294967295
 80122cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122d0:	f10a 0a01 	add.w	sl, sl, #1
 80122d4:	9304      	str	r3, [sp, #16]
 80122d6:	9307      	str	r3, [sp, #28]
 80122d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122dc:	931a      	str	r3, [sp, #104]	; 0x68
 80122de:	4654      	mov	r4, sl
 80122e0:	2205      	movs	r2, #5
 80122e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122e6:	4858      	ldr	r0, [pc, #352]	; (8012448 <_vfiprintf_r+0x24c>)
 80122e8:	f7ed ff8a 	bl	8000200 <memchr>
 80122ec:	9a04      	ldr	r2, [sp, #16]
 80122ee:	b9d8      	cbnz	r0, 8012328 <_vfiprintf_r+0x12c>
 80122f0:	06d1      	lsls	r1, r2, #27
 80122f2:	bf44      	itt	mi
 80122f4:	2320      	movmi	r3, #32
 80122f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122fa:	0713      	lsls	r3, r2, #28
 80122fc:	bf44      	itt	mi
 80122fe:	232b      	movmi	r3, #43	; 0x2b
 8012300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012304:	f89a 3000 	ldrb.w	r3, [sl]
 8012308:	2b2a      	cmp	r3, #42	; 0x2a
 801230a:	d015      	beq.n	8012338 <_vfiprintf_r+0x13c>
 801230c:	9a07      	ldr	r2, [sp, #28]
 801230e:	4654      	mov	r4, sl
 8012310:	2000      	movs	r0, #0
 8012312:	f04f 0c0a 	mov.w	ip, #10
 8012316:	4621      	mov	r1, r4
 8012318:	f811 3b01 	ldrb.w	r3, [r1], #1
 801231c:	3b30      	subs	r3, #48	; 0x30
 801231e:	2b09      	cmp	r3, #9
 8012320:	d94e      	bls.n	80123c0 <_vfiprintf_r+0x1c4>
 8012322:	b1b0      	cbz	r0, 8012352 <_vfiprintf_r+0x156>
 8012324:	9207      	str	r2, [sp, #28]
 8012326:	e014      	b.n	8012352 <_vfiprintf_r+0x156>
 8012328:	eba0 0308 	sub.w	r3, r0, r8
 801232c:	fa09 f303 	lsl.w	r3, r9, r3
 8012330:	4313      	orrs	r3, r2
 8012332:	9304      	str	r3, [sp, #16]
 8012334:	46a2      	mov	sl, r4
 8012336:	e7d2      	b.n	80122de <_vfiprintf_r+0xe2>
 8012338:	9b03      	ldr	r3, [sp, #12]
 801233a:	1d19      	adds	r1, r3, #4
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	9103      	str	r1, [sp, #12]
 8012340:	2b00      	cmp	r3, #0
 8012342:	bfbb      	ittet	lt
 8012344:	425b      	neglt	r3, r3
 8012346:	f042 0202 	orrlt.w	r2, r2, #2
 801234a:	9307      	strge	r3, [sp, #28]
 801234c:	9307      	strlt	r3, [sp, #28]
 801234e:	bfb8      	it	lt
 8012350:	9204      	strlt	r2, [sp, #16]
 8012352:	7823      	ldrb	r3, [r4, #0]
 8012354:	2b2e      	cmp	r3, #46	; 0x2e
 8012356:	d10c      	bne.n	8012372 <_vfiprintf_r+0x176>
 8012358:	7863      	ldrb	r3, [r4, #1]
 801235a:	2b2a      	cmp	r3, #42	; 0x2a
 801235c:	d135      	bne.n	80123ca <_vfiprintf_r+0x1ce>
 801235e:	9b03      	ldr	r3, [sp, #12]
 8012360:	1d1a      	adds	r2, r3, #4
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	9203      	str	r2, [sp, #12]
 8012366:	2b00      	cmp	r3, #0
 8012368:	bfb8      	it	lt
 801236a:	f04f 33ff 	movlt.w	r3, #4294967295
 801236e:	3402      	adds	r4, #2
 8012370:	9305      	str	r3, [sp, #20]
 8012372:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012458 <_vfiprintf_r+0x25c>
 8012376:	7821      	ldrb	r1, [r4, #0]
 8012378:	2203      	movs	r2, #3
 801237a:	4650      	mov	r0, sl
 801237c:	f7ed ff40 	bl	8000200 <memchr>
 8012380:	b140      	cbz	r0, 8012394 <_vfiprintf_r+0x198>
 8012382:	2340      	movs	r3, #64	; 0x40
 8012384:	eba0 000a 	sub.w	r0, r0, sl
 8012388:	fa03 f000 	lsl.w	r0, r3, r0
 801238c:	9b04      	ldr	r3, [sp, #16]
 801238e:	4303      	orrs	r3, r0
 8012390:	3401      	adds	r4, #1
 8012392:	9304      	str	r3, [sp, #16]
 8012394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012398:	482c      	ldr	r0, [pc, #176]	; (801244c <_vfiprintf_r+0x250>)
 801239a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801239e:	2206      	movs	r2, #6
 80123a0:	f7ed ff2e 	bl	8000200 <memchr>
 80123a4:	2800      	cmp	r0, #0
 80123a6:	d03f      	beq.n	8012428 <_vfiprintf_r+0x22c>
 80123a8:	4b29      	ldr	r3, [pc, #164]	; (8012450 <_vfiprintf_r+0x254>)
 80123aa:	bb1b      	cbnz	r3, 80123f4 <_vfiprintf_r+0x1f8>
 80123ac:	9b03      	ldr	r3, [sp, #12]
 80123ae:	3307      	adds	r3, #7
 80123b0:	f023 0307 	bic.w	r3, r3, #7
 80123b4:	3308      	adds	r3, #8
 80123b6:	9303      	str	r3, [sp, #12]
 80123b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123ba:	443b      	add	r3, r7
 80123bc:	9309      	str	r3, [sp, #36]	; 0x24
 80123be:	e767      	b.n	8012290 <_vfiprintf_r+0x94>
 80123c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80123c4:	460c      	mov	r4, r1
 80123c6:	2001      	movs	r0, #1
 80123c8:	e7a5      	b.n	8012316 <_vfiprintf_r+0x11a>
 80123ca:	2300      	movs	r3, #0
 80123cc:	3401      	adds	r4, #1
 80123ce:	9305      	str	r3, [sp, #20]
 80123d0:	4619      	mov	r1, r3
 80123d2:	f04f 0c0a 	mov.w	ip, #10
 80123d6:	4620      	mov	r0, r4
 80123d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123dc:	3a30      	subs	r2, #48	; 0x30
 80123de:	2a09      	cmp	r2, #9
 80123e0:	d903      	bls.n	80123ea <_vfiprintf_r+0x1ee>
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d0c5      	beq.n	8012372 <_vfiprintf_r+0x176>
 80123e6:	9105      	str	r1, [sp, #20]
 80123e8:	e7c3      	b.n	8012372 <_vfiprintf_r+0x176>
 80123ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80123ee:	4604      	mov	r4, r0
 80123f0:	2301      	movs	r3, #1
 80123f2:	e7f0      	b.n	80123d6 <_vfiprintf_r+0x1da>
 80123f4:	ab03      	add	r3, sp, #12
 80123f6:	9300      	str	r3, [sp, #0]
 80123f8:	462a      	mov	r2, r5
 80123fa:	4b16      	ldr	r3, [pc, #88]	; (8012454 <_vfiprintf_r+0x258>)
 80123fc:	a904      	add	r1, sp, #16
 80123fe:	4630      	mov	r0, r6
 8012400:	f7fb fdea 	bl	800dfd8 <_printf_float>
 8012404:	4607      	mov	r7, r0
 8012406:	1c78      	adds	r0, r7, #1
 8012408:	d1d6      	bne.n	80123b8 <_vfiprintf_r+0x1bc>
 801240a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801240c:	07d9      	lsls	r1, r3, #31
 801240e:	d405      	bmi.n	801241c <_vfiprintf_r+0x220>
 8012410:	89ab      	ldrh	r3, [r5, #12]
 8012412:	059a      	lsls	r2, r3, #22
 8012414:	d402      	bmi.n	801241c <_vfiprintf_r+0x220>
 8012416:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012418:	f7fe ff32 	bl	8011280 <__retarget_lock_release_recursive>
 801241c:	89ab      	ldrh	r3, [r5, #12]
 801241e:	065b      	lsls	r3, r3, #25
 8012420:	f53f af12 	bmi.w	8012248 <_vfiprintf_r+0x4c>
 8012424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012426:	e711      	b.n	801224c <_vfiprintf_r+0x50>
 8012428:	ab03      	add	r3, sp, #12
 801242a:	9300      	str	r3, [sp, #0]
 801242c:	462a      	mov	r2, r5
 801242e:	4b09      	ldr	r3, [pc, #36]	; (8012454 <_vfiprintf_r+0x258>)
 8012430:	a904      	add	r1, sp, #16
 8012432:	4630      	mov	r0, r6
 8012434:	f7fc f874 	bl	800e520 <_printf_i>
 8012438:	e7e4      	b.n	8012404 <_vfiprintf_r+0x208>
 801243a:	bf00      	nop
 801243c:	08013188 	.word	0x08013188
 8012440:	080131a8 	.word	0x080131a8
 8012444:	08013168 	.word	0x08013168
 8012448:	0801339c 	.word	0x0801339c
 801244c:	080133a6 	.word	0x080133a6
 8012450:	0800dfd9 	.word	0x0800dfd9
 8012454:	080121d7 	.word	0x080121d7
 8012458:	080133a2 	.word	0x080133a2
 801245c:	00000000 	.word	0x00000000

08012460 <nan>:
 8012460:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012468 <nan+0x8>
 8012464:	4770      	bx	lr
 8012466:	bf00      	nop
 8012468:	00000000 	.word	0x00000000
 801246c:	7ff80000 	.word	0x7ff80000

08012470 <_sbrk_r>:
 8012470:	b538      	push	{r3, r4, r5, lr}
 8012472:	4d06      	ldr	r5, [pc, #24]	; (801248c <_sbrk_r+0x1c>)
 8012474:	2300      	movs	r3, #0
 8012476:	4604      	mov	r4, r0
 8012478:	4608      	mov	r0, r1
 801247a:	602b      	str	r3, [r5, #0]
 801247c:	f7f2 f938 	bl	80046f0 <_sbrk>
 8012480:	1c43      	adds	r3, r0, #1
 8012482:	d102      	bne.n	801248a <_sbrk_r+0x1a>
 8012484:	682b      	ldr	r3, [r5, #0]
 8012486:	b103      	cbz	r3, 801248a <_sbrk_r+0x1a>
 8012488:	6023      	str	r3, [r4, #0]
 801248a:	bd38      	pop	{r3, r4, r5, pc}
 801248c:	200014f4 	.word	0x200014f4

08012490 <__sread>:
 8012490:	b510      	push	{r4, lr}
 8012492:	460c      	mov	r4, r1
 8012494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012498:	f000 f912 	bl	80126c0 <_read_r>
 801249c:	2800      	cmp	r0, #0
 801249e:	bfab      	itete	ge
 80124a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80124a2:	89a3      	ldrhlt	r3, [r4, #12]
 80124a4:	181b      	addge	r3, r3, r0
 80124a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80124aa:	bfac      	ite	ge
 80124ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80124ae:	81a3      	strhlt	r3, [r4, #12]
 80124b0:	bd10      	pop	{r4, pc}

080124b2 <__swrite>:
 80124b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124b6:	461f      	mov	r7, r3
 80124b8:	898b      	ldrh	r3, [r1, #12]
 80124ba:	05db      	lsls	r3, r3, #23
 80124bc:	4605      	mov	r5, r0
 80124be:	460c      	mov	r4, r1
 80124c0:	4616      	mov	r6, r2
 80124c2:	d505      	bpl.n	80124d0 <__swrite+0x1e>
 80124c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124c8:	2302      	movs	r3, #2
 80124ca:	2200      	movs	r2, #0
 80124cc:	f000 f890 	bl	80125f0 <_lseek_r>
 80124d0:	89a3      	ldrh	r3, [r4, #12]
 80124d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80124da:	81a3      	strh	r3, [r4, #12]
 80124dc:	4632      	mov	r2, r6
 80124de:	463b      	mov	r3, r7
 80124e0:	4628      	mov	r0, r5
 80124e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124e6:	f000 b837 	b.w	8012558 <_write_r>

080124ea <__sseek>:
 80124ea:	b510      	push	{r4, lr}
 80124ec:	460c      	mov	r4, r1
 80124ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124f2:	f000 f87d 	bl	80125f0 <_lseek_r>
 80124f6:	1c43      	adds	r3, r0, #1
 80124f8:	89a3      	ldrh	r3, [r4, #12]
 80124fa:	bf15      	itete	ne
 80124fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80124fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012502:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012506:	81a3      	strheq	r3, [r4, #12]
 8012508:	bf18      	it	ne
 801250a:	81a3      	strhne	r3, [r4, #12]
 801250c:	bd10      	pop	{r4, pc}

0801250e <__sclose>:
 801250e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012512:	f000 b83b 	b.w	801258c <_close_r>

08012516 <strncmp>:
 8012516:	b510      	push	{r4, lr}
 8012518:	b17a      	cbz	r2, 801253a <strncmp+0x24>
 801251a:	4603      	mov	r3, r0
 801251c:	3901      	subs	r1, #1
 801251e:	1884      	adds	r4, r0, r2
 8012520:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012524:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012528:	4290      	cmp	r0, r2
 801252a:	d101      	bne.n	8012530 <strncmp+0x1a>
 801252c:	42a3      	cmp	r3, r4
 801252e:	d101      	bne.n	8012534 <strncmp+0x1e>
 8012530:	1a80      	subs	r0, r0, r2
 8012532:	bd10      	pop	{r4, pc}
 8012534:	2800      	cmp	r0, #0
 8012536:	d1f3      	bne.n	8012520 <strncmp+0xa>
 8012538:	e7fa      	b.n	8012530 <strncmp+0x1a>
 801253a:	4610      	mov	r0, r2
 801253c:	e7f9      	b.n	8012532 <strncmp+0x1c>

0801253e <__ascii_wctomb>:
 801253e:	b149      	cbz	r1, 8012554 <__ascii_wctomb+0x16>
 8012540:	2aff      	cmp	r2, #255	; 0xff
 8012542:	bf85      	ittet	hi
 8012544:	238a      	movhi	r3, #138	; 0x8a
 8012546:	6003      	strhi	r3, [r0, #0]
 8012548:	700a      	strbls	r2, [r1, #0]
 801254a:	f04f 30ff 	movhi.w	r0, #4294967295
 801254e:	bf98      	it	ls
 8012550:	2001      	movls	r0, #1
 8012552:	4770      	bx	lr
 8012554:	4608      	mov	r0, r1
 8012556:	4770      	bx	lr

08012558 <_write_r>:
 8012558:	b538      	push	{r3, r4, r5, lr}
 801255a:	4d07      	ldr	r5, [pc, #28]	; (8012578 <_write_r+0x20>)
 801255c:	4604      	mov	r4, r0
 801255e:	4608      	mov	r0, r1
 8012560:	4611      	mov	r1, r2
 8012562:	2200      	movs	r2, #0
 8012564:	602a      	str	r2, [r5, #0]
 8012566:	461a      	mov	r2, r3
 8012568:	f7f2 f871 	bl	800464e <_write>
 801256c:	1c43      	adds	r3, r0, #1
 801256e:	d102      	bne.n	8012576 <_write_r+0x1e>
 8012570:	682b      	ldr	r3, [r5, #0]
 8012572:	b103      	cbz	r3, 8012576 <_write_r+0x1e>
 8012574:	6023      	str	r3, [r4, #0]
 8012576:	bd38      	pop	{r3, r4, r5, pc}
 8012578:	200014f4 	.word	0x200014f4

0801257c <abort>:
 801257c:	b508      	push	{r3, lr}
 801257e:	2006      	movs	r0, #6
 8012580:	f000 f8d8 	bl	8012734 <raise>
 8012584:	2001      	movs	r0, #1
 8012586:	f7f2 f83b 	bl	8004600 <_exit>
	...

0801258c <_close_r>:
 801258c:	b538      	push	{r3, r4, r5, lr}
 801258e:	4d06      	ldr	r5, [pc, #24]	; (80125a8 <_close_r+0x1c>)
 8012590:	2300      	movs	r3, #0
 8012592:	4604      	mov	r4, r0
 8012594:	4608      	mov	r0, r1
 8012596:	602b      	str	r3, [r5, #0]
 8012598:	f7f2 f875 	bl	8004686 <_close>
 801259c:	1c43      	adds	r3, r0, #1
 801259e:	d102      	bne.n	80125a6 <_close_r+0x1a>
 80125a0:	682b      	ldr	r3, [r5, #0]
 80125a2:	b103      	cbz	r3, 80125a6 <_close_r+0x1a>
 80125a4:	6023      	str	r3, [r4, #0]
 80125a6:	bd38      	pop	{r3, r4, r5, pc}
 80125a8:	200014f4 	.word	0x200014f4

080125ac <_fstat_r>:
 80125ac:	b538      	push	{r3, r4, r5, lr}
 80125ae:	4d07      	ldr	r5, [pc, #28]	; (80125cc <_fstat_r+0x20>)
 80125b0:	2300      	movs	r3, #0
 80125b2:	4604      	mov	r4, r0
 80125b4:	4608      	mov	r0, r1
 80125b6:	4611      	mov	r1, r2
 80125b8:	602b      	str	r3, [r5, #0]
 80125ba:	f7f2 f870 	bl	800469e <_fstat>
 80125be:	1c43      	adds	r3, r0, #1
 80125c0:	d102      	bne.n	80125c8 <_fstat_r+0x1c>
 80125c2:	682b      	ldr	r3, [r5, #0]
 80125c4:	b103      	cbz	r3, 80125c8 <_fstat_r+0x1c>
 80125c6:	6023      	str	r3, [r4, #0]
 80125c8:	bd38      	pop	{r3, r4, r5, pc}
 80125ca:	bf00      	nop
 80125cc:	200014f4 	.word	0x200014f4

080125d0 <_isatty_r>:
 80125d0:	b538      	push	{r3, r4, r5, lr}
 80125d2:	4d06      	ldr	r5, [pc, #24]	; (80125ec <_isatty_r+0x1c>)
 80125d4:	2300      	movs	r3, #0
 80125d6:	4604      	mov	r4, r0
 80125d8:	4608      	mov	r0, r1
 80125da:	602b      	str	r3, [r5, #0]
 80125dc:	f7f2 f86f 	bl	80046be <_isatty>
 80125e0:	1c43      	adds	r3, r0, #1
 80125e2:	d102      	bne.n	80125ea <_isatty_r+0x1a>
 80125e4:	682b      	ldr	r3, [r5, #0]
 80125e6:	b103      	cbz	r3, 80125ea <_isatty_r+0x1a>
 80125e8:	6023      	str	r3, [r4, #0]
 80125ea:	bd38      	pop	{r3, r4, r5, pc}
 80125ec:	200014f4 	.word	0x200014f4

080125f0 <_lseek_r>:
 80125f0:	b538      	push	{r3, r4, r5, lr}
 80125f2:	4d07      	ldr	r5, [pc, #28]	; (8012610 <_lseek_r+0x20>)
 80125f4:	4604      	mov	r4, r0
 80125f6:	4608      	mov	r0, r1
 80125f8:	4611      	mov	r1, r2
 80125fa:	2200      	movs	r2, #0
 80125fc:	602a      	str	r2, [r5, #0]
 80125fe:	461a      	mov	r2, r3
 8012600:	f7f2 f868 	bl	80046d4 <_lseek>
 8012604:	1c43      	adds	r3, r0, #1
 8012606:	d102      	bne.n	801260e <_lseek_r+0x1e>
 8012608:	682b      	ldr	r3, [r5, #0]
 801260a:	b103      	cbz	r3, 801260e <_lseek_r+0x1e>
 801260c:	6023      	str	r3, [r4, #0]
 801260e:	bd38      	pop	{r3, r4, r5, pc}
 8012610:	200014f4 	.word	0x200014f4

08012614 <memmove>:
 8012614:	4288      	cmp	r0, r1
 8012616:	b510      	push	{r4, lr}
 8012618:	eb01 0402 	add.w	r4, r1, r2
 801261c:	d902      	bls.n	8012624 <memmove+0x10>
 801261e:	4284      	cmp	r4, r0
 8012620:	4623      	mov	r3, r4
 8012622:	d807      	bhi.n	8012634 <memmove+0x20>
 8012624:	1e43      	subs	r3, r0, #1
 8012626:	42a1      	cmp	r1, r4
 8012628:	d008      	beq.n	801263c <memmove+0x28>
 801262a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801262e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012632:	e7f8      	b.n	8012626 <memmove+0x12>
 8012634:	4402      	add	r2, r0
 8012636:	4601      	mov	r1, r0
 8012638:	428a      	cmp	r2, r1
 801263a:	d100      	bne.n	801263e <memmove+0x2a>
 801263c:	bd10      	pop	{r4, pc}
 801263e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012646:	e7f7      	b.n	8012638 <memmove+0x24>

08012648 <__malloc_lock>:
 8012648:	4801      	ldr	r0, [pc, #4]	; (8012650 <__malloc_lock+0x8>)
 801264a:	f7fe be18 	b.w	801127e <__retarget_lock_acquire_recursive>
 801264e:	bf00      	nop
 8012650:	200014e8 	.word	0x200014e8

08012654 <__malloc_unlock>:
 8012654:	4801      	ldr	r0, [pc, #4]	; (801265c <__malloc_unlock+0x8>)
 8012656:	f7fe be13 	b.w	8011280 <__retarget_lock_release_recursive>
 801265a:	bf00      	nop
 801265c:	200014e8 	.word	0x200014e8

08012660 <_realloc_r>:
 8012660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012664:	4680      	mov	r8, r0
 8012666:	4614      	mov	r4, r2
 8012668:	460e      	mov	r6, r1
 801266a:	b921      	cbnz	r1, 8012676 <_realloc_r+0x16>
 801266c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012670:	4611      	mov	r1, r2
 8012672:	f7ff bbc9 	b.w	8011e08 <_malloc_r>
 8012676:	b92a      	cbnz	r2, 8012684 <_realloc_r+0x24>
 8012678:	f7ff fb5a 	bl	8011d30 <_free_r>
 801267c:	4625      	mov	r5, r4
 801267e:	4628      	mov	r0, r5
 8012680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012684:	f000 f872 	bl	801276c <_malloc_usable_size_r>
 8012688:	4284      	cmp	r4, r0
 801268a:	4607      	mov	r7, r0
 801268c:	d802      	bhi.n	8012694 <_realloc_r+0x34>
 801268e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012692:	d812      	bhi.n	80126ba <_realloc_r+0x5a>
 8012694:	4621      	mov	r1, r4
 8012696:	4640      	mov	r0, r8
 8012698:	f7ff fbb6 	bl	8011e08 <_malloc_r>
 801269c:	4605      	mov	r5, r0
 801269e:	2800      	cmp	r0, #0
 80126a0:	d0ed      	beq.n	801267e <_realloc_r+0x1e>
 80126a2:	42bc      	cmp	r4, r7
 80126a4:	4622      	mov	r2, r4
 80126a6:	4631      	mov	r1, r6
 80126a8:	bf28      	it	cs
 80126aa:	463a      	movcs	r2, r7
 80126ac:	f7fb fbde 	bl	800de6c <memcpy>
 80126b0:	4631      	mov	r1, r6
 80126b2:	4640      	mov	r0, r8
 80126b4:	f7ff fb3c 	bl	8011d30 <_free_r>
 80126b8:	e7e1      	b.n	801267e <_realloc_r+0x1e>
 80126ba:	4635      	mov	r5, r6
 80126bc:	e7df      	b.n	801267e <_realloc_r+0x1e>
	...

080126c0 <_read_r>:
 80126c0:	b538      	push	{r3, r4, r5, lr}
 80126c2:	4d07      	ldr	r5, [pc, #28]	; (80126e0 <_read_r+0x20>)
 80126c4:	4604      	mov	r4, r0
 80126c6:	4608      	mov	r0, r1
 80126c8:	4611      	mov	r1, r2
 80126ca:	2200      	movs	r2, #0
 80126cc:	602a      	str	r2, [r5, #0]
 80126ce:	461a      	mov	r2, r3
 80126d0:	f7f1 ffa0 	bl	8004614 <_read>
 80126d4:	1c43      	adds	r3, r0, #1
 80126d6:	d102      	bne.n	80126de <_read_r+0x1e>
 80126d8:	682b      	ldr	r3, [r5, #0]
 80126da:	b103      	cbz	r3, 80126de <_read_r+0x1e>
 80126dc:	6023      	str	r3, [r4, #0]
 80126de:	bd38      	pop	{r3, r4, r5, pc}
 80126e0:	200014f4 	.word	0x200014f4

080126e4 <_raise_r>:
 80126e4:	291f      	cmp	r1, #31
 80126e6:	b538      	push	{r3, r4, r5, lr}
 80126e8:	4604      	mov	r4, r0
 80126ea:	460d      	mov	r5, r1
 80126ec:	d904      	bls.n	80126f8 <_raise_r+0x14>
 80126ee:	2316      	movs	r3, #22
 80126f0:	6003      	str	r3, [r0, #0]
 80126f2:	f04f 30ff 	mov.w	r0, #4294967295
 80126f6:	bd38      	pop	{r3, r4, r5, pc}
 80126f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80126fa:	b112      	cbz	r2, 8012702 <_raise_r+0x1e>
 80126fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012700:	b94b      	cbnz	r3, 8012716 <_raise_r+0x32>
 8012702:	4620      	mov	r0, r4
 8012704:	f000 f830 	bl	8012768 <_getpid_r>
 8012708:	462a      	mov	r2, r5
 801270a:	4601      	mov	r1, r0
 801270c:	4620      	mov	r0, r4
 801270e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012712:	f000 b817 	b.w	8012744 <_kill_r>
 8012716:	2b01      	cmp	r3, #1
 8012718:	d00a      	beq.n	8012730 <_raise_r+0x4c>
 801271a:	1c59      	adds	r1, r3, #1
 801271c:	d103      	bne.n	8012726 <_raise_r+0x42>
 801271e:	2316      	movs	r3, #22
 8012720:	6003      	str	r3, [r0, #0]
 8012722:	2001      	movs	r0, #1
 8012724:	e7e7      	b.n	80126f6 <_raise_r+0x12>
 8012726:	2400      	movs	r4, #0
 8012728:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801272c:	4628      	mov	r0, r5
 801272e:	4798      	blx	r3
 8012730:	2000      	movs	r0, #0
 8012732:	e7e0      	b.n	80126f6 <_raise_r+0x12>

08012734 <raise>:
 8012734:	4b02      	ldr	r3, [pc, #8]	; (8012740 <raise+0xc>)
 8012736:	4601      	mov	r1, r0
 8012738:	6818      	ldr	r0, [r3, #0]
 801273a:	f7ff bfd3 	b.w	80126e4 <_raise_r>
 801273e:	bf00      	nop
 8012740:	20000024 	.word	0x20000024

08012744 <_kill_r>:
 8012744:	b538      	push	{r3, r4, r5, lr}
 8012746:	4d07      	ldr	r5, [pc, #28]	; (8012764 <_kill_r+0x20>)
 8012748:	2300      	movs	r3, #0
 801274a:	4604      	mov	r4, r0
 801274c:	4608      	mov	r0, r1
 801274e:	4611      	mov	r1, r2
 8012750:	602b      	str	r3, [r5, #0]
 8012752:	f7f1 ff45 	bl	80045e0 <_kill>
 8012756:	1c43      	adds	r3, r0, #1
 8012758:	d102      	bne.n	8012760 <_kill_r+0x1c>
 801275a:	682b      	ldr	r3, [r5, #0]
 801275c:	b103      	cbz	r3, 8012760 <_kill_r+0x1c>
 801275e:	6023      	str	r3, [r4, #0]
 8012760:	bd38      	pop	{r3, r4, r5, pc}
 8012762:	bf00      	nop
 8012764:	200014f4 	.word	0x200014f4

08012768 <_getpid_r>:
 8012768:	f7f1 bf32 	b.w	80045d0 <_getpid>

0801276c <_malloc_usable_size_r>:
 801276c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012770:	1f18      	subs	r0, r3, #4
 8012772:	2b00      	cmp	r3, #0
 8012774:	bfbc      	itt	lt
 8012776:	580b      	ldrlt	r3, [r1, r0]
 8012778:	18c0      	addlt	r0, r0, r3
 801277a:	4770      	bx	lr

0801277c <_init>:
 801277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801277e:	bf00      	nop
 8012780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012782:	bc08      	pop	{r3}
 8012784:	469e      	mov	lr, r3
 8012786:	4770      	bx	lr

08012788 <_fini>:
 8012788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801278a:	bf00      	nop
 801278c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801278e:	bc08      	pop	{r3}
 8012790:	469e      	mov	lr, r3
 8012792:	4770      	bx	lr
